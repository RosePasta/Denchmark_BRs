<bug id='35743' author='etorrjr10' open_date='2020-01-10T15:55:14Z' closed_time='2020-01-31T10:03:49Z'>
	<summary>Multi-GPU training issue, tensorflow 2.0.0</summary>
	<description>
I am trying to train my code on multiple-GPUs and have followed the tutorials online on using MirroredStrategy using MNIST dataset. Below is the error...
ValueError: handle is not available outside the replica context or a tf.distribute.Strategy.update() call.
I have a feeling that the issue is due to the fact that when I call on my GPUs. They are named XLA and not :/device:GPU. This leads to me to believe it is a bug? Below is my full code and following that the full error. I am currently using tensorflow 2.0.0, CUDA 10.1, and CentOS 7.6.1810
My code is below...
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras.applications import Xception
from tensorflow.keras.utils import multi_gpu_model
import numpy as np
num_samples = 1000
height = 224
width = 224
num_classes = 1000
#this puts the models weights on the CPU
with tf.device(device_names[1]):
model = Xception(weights = None,
input_shape = (height, width, 3),
classes = num_classes)
#this splits up the training amongst multiple GPUs
mirrored_strategy = tf.distribute.MirroredStrategy(devices = [device_names[3], device_names[4]])
from future import absolute_import, division, print_function, unicode_literals
import tensorflow_datasets as tfds
import tensorflow as tf
tfds.disable_progress_bar()
import os
print(tf.version)
2.0.0
datasets, info = tfds.load(name = 'mnist', with_info = True, as_supervised = True)
mnist_train, mnist_test = datasets['train'], datasets['test']
#this splits up the training amongst multiple specific GPUs
strategy = tf.distribute.MirroredStrategy(devices = [device_names[2], device_names[3]])
print('Number of devices: {}'.format(strategy.num_replicas_in_sync))
print('Name of devices are: ' + device_names[2] + ' and ' + device_names[3])
Number of devices: 2
Name of devices are: /device:XLA_GPU:0 and /device:XLA_GPU:1
#The benefit of using multiple GPUs is that you can train with the largest batchsize
#then you can just tweak the learning_rate accordingly
num_train_examples = info.splits['train'].num_examples
num_test_examples = info.splits['test'].num_examples
BUFFER_SIZE = 10000
BATCH_SIZE_PER_REPLICA = 64
def scale(image, label):
image = tf.cast(image, tf.float32)
image /=255
&lt;denchmark-code&gt;return image, label
&lt;/denchmark-code&gt;

train_dataset = mnist_train.map(scale).cache().shuffle(BUFFER_SIZE).batch(BATCH_SIZE)
eval_dataset = mnist_test.map(scale).batch(BATCH_SIZE)
with strategy.scope(): #the scope portion indicates which parts of the code will be distributed
model = tf.keras.Sequential([
tf.keras.layers.Conv2D(32, 3, activation = 'relu', input_shape = (28,28,1)),
tf.keras.layers.MaxPooling2D(),
tf.keras.layers.Flatten(),
tf.keras.layers.Dense(64, activation = 'relu'),
tf.keras.layers.Dense(10, activation = 'softmax')
])
import datetime
log_dir = "logs/fit/" + datetime.datetime.now().strftime("%Y%m%d-%H%M%S")
tensorboard_callback = tf.keras.callbacks.TensorBoard(log_dir = log_dir, histogram_freq = 1)
model.compile(loss = 'sparse_categorical_crossentropy',
optimizer = tf.keras.optimizers.Adam(),
metrics = ['accuracy'])
def decay(epoch):
if epoch &lt; 3:
return 1e-3
elif epoch &gt;= 3 and epoch &lt; 7:
return 1e-4
else:
return 1e-5
checkpoint_dir = './training_checkpoints'
checkpoint_prefix = os.path.join(checkpoint_dir, "ckpt_{epoch}")
class PrintLR(tf.keras.callbacks.Callback):
def on_epoch_end(self, epoch, logs = None):
print('\nLearning rate for epoch {} is {}'.format(epoch + 1, model.optimizer.lr.numpy()))
callbacks = [tensorboard_callback,
tf.keras.callbacks.ModelCheckpoint(filepath = checkpoint_prefix,
save_weights_only = True),
tf.keras.callbacks.LearningRateScheduler(decay),
PrintLR()
]
model.fit(train_dataset, epochs = 30, callbacks = callbacks)
&lt;denchmark-h:h2&gt;FULL ERROR:&lt;/denchmark-h&gt;

ValueError                                Traceback (most recent call last)
 in 
----&gt; 1 model.fit(train_dataset, epochs = 30, callbacks = callbacks)
~/anaconda3/envs/tf/lib/python3.6/site-packages/tensorflow_core/python/keras/engine/training.py in fit(self, x, y, batch_size, epochs, verbose, callbacks, validation_split, validation_data, shuffle, class_weight, sample_weight, initial_epoch, steps_per_epoch, validation_steps, validation_freq, max_queue_size, workers, use_multiprocessing, **kwargs)
726         max_queue_size=max_queue_size,
727         workers=workers,
--&gt; 728         use_multiprocessing=use_multiprocessing)
729
730   def evaluate(self,
~/anaconda3/envs/tf/lib/python3.6/site-packages/tensorflow_core/python/keras/engine/training_v2.py in fit(self, model, x, y, batch_size, epochs, verbose, callbacks, validation_split, validation_data, shuffle, class_weight, sample_weight, initial_epoch, steps_per_epoch, validation_steps, validation_freq, **kwargs)
322                 mode=ModeKeys.TRAIN,
323                 training_context=training_context,
--&gt; 324                 total_epochs=epochs)
325             cbks.make_logs(model, epoch_logs, training_result, ModeKeys.TRAIN)
326
~/anaconda3/envs/tf/lib/python3.6/site-packages/tensorflow_core/python/keras/engine/training_v2.py in run_one_epoch(model, iterator, execution_function, dataset_size, batch_size, strategy, steps_per_epoch, num_samples, mode, training_context, total_epochs)
121         step=step, mode=mode, size=current_batch_size) as batch_logs:
122       try:
--&gt; 123         batch_outs = execution_function(iterator)
124       except (StopIteration, errors.OutOfRangeError):
125         # TODO(kaftan): File bug about tf function and errors.OutOfRangeError?
~/anaconda3/envs/tf/lib/python3.6/site-packages/tensorflow_core/python/keras/engine/training_v2_utils.py in execution_function(input_fn)
84     # numpy translates Tensors to values in Eager mode.
85     return nest.map_structure(_non_none_constant_value,
---&gt; 86                               distributed_function(input_fn))
87
88   return execution_function
~/anaconda3/envs/tf/lib/python3.6/site-packages/tensorflow_core/python/eager/def_function.py in call(self, *args, **kwds)
455
456     tracing_count = self._get_tracing_count()
--&gt; 457     result = self._call(*args, **kwds)
458     if tracing_count == self._get_tracing_count():
459       self._call_counter.called_without_tracing()
~/anaconda3/envs/tf/lib/python3.6/site-packages/tensorflow_core/python/eager/def_function.py in _call(self, *args, **kwds)
501       # This is the first call of call, so we have to initialize.
502       initializer_map = object_identity.ObjectIdentityDictionary()
--&gt; 503       self._initialize(args, kwds, add_initializers_to=initializer_map)
504     finally:
505       # At this point we know that the initialization is complete (or less
~/anaconda3/envs/tf/lib/python3.6/site-packages/tensorflow_core/python/eager/def_function.py in _initialize(self, args, kwds, add_initializers_to)
406     self._concrete_stateful_fn = (
407         self._stateful_fn._get_concrete_function_internal_garbage_collected(  # pylint: disable=protected-access
--&gt; 408             *args, **kwds))
409
410     def invalid_creator_scope(*unused_args, **unused_kwds):
~/anaconda3/envs/tf/lib/python3.6/site-packages/tensorflow_core/python/eager/function.py in _get_concrete_function_internal_garbage_collected(self, *args, **kwargs)
1846     if self.input_signature:
1847       args, kwargs = None, None
-&gt; 1848     graph_function, _, _ = self._maybe_define_function(args, kwargs)
1849     return graph_function
1850
~/anaconda3/envs/tf/lib/python3.6/site-packages/tensorflow_core/python/eager/function.py in _maybe_define_function(self, args, kwargs)
2148         graph_function = self._function_cache.primary.get(cache_key, None)
2149         if graph_function is None:
-&gt; 2150           graph_function = self._create_graph_function(args, kwargs)
2151           self._function_cache.primary[cache_key] = graph_function
2152         return graph_function, args, kwargs
~/anaconda3/envs/tf/lib/python3.6/site-packages/tensorflow_core/python/eager/function.py in _create_graph_function(self, args, kwargs, override_flat_arg_shapes)
2039             arg_names=arg_names,
2040             override_flat_arg_shapes=override_flat_arg_shapes,
-&gt; 2041             capture_by_value=self._capture_by_value),
2042         self._function_attributes,
2043         # Tell the ConcreteFunction to clean up its graph once it goes out of
~/anaconda3/envs/tf/lib/python3.6/site-packages/tensorflow_core/python/framework/func_graph.py in func_graph_from_py_func(name, python_func, args, kwargs, signature, func_graph, autograph, autograph_options, add_control_dependencies, arg_names, op_return_value, collections, capture_by_value, override_flat_arg_shapes)
913                                           converted_func)
914
--&gt; 915       func_outputs = python_func(*func_args, **func_kwargs)
916
917       # invariant: func_outputs contains only Tensors, CompositeTensors,
~/anaconda3/envs/tf/lib/python3.6/site-packages/tensorflow_core/python/eager/def_function.py in wrapped_fn(*args, **kwds)
356         # wrapped allows AutoGraph to swap in a converted function. We give
357         # the function a weak reference to itself to avoid a reference cycle.
--&gt; 358         return weak_wrapped_fn().wrapped(*args, **kwds)
359     weak_wrapped_fn = weakref.ref(wrapped_fn)
360
~/anaconda3/envs/tf/lib/python3.6/site-packages/tensorflow_core/python/keras/engine/training_v2_utils.py in distributed_function(input_iterator)
71     strategy = distribution_strategy_context.get_strategy()
72     outputs = strategy.experimental_run_v2(
---&gt; 73         per_replica_function, args=(model, x, y, sample_weights))
74     # Out of PerReplica outputs reduce or pick values to return.
75     all_outputs = dist_utils.unwrap_output_dict(
~/anaconda3/envs/tf/lib/python3.6/site-packages/tensorflow_core/python/distribute/distribute_lib.py in experimental_run_v2(self, fn, args, kwargs)
758       fn = autograph.tf_convert(fn, ag_ctx.control_status_ctx(),
759                                 convert_by_default=False)
--&gt; 760       return self._extended.call_for_each_replica(fn, args=args, kwargs=kwargs)
761
762   def reduce(self, reduce_op, value, axis):
~/anaconda3/envs/tf/lib/python3.6/site-packages/tensorflow_core/python/distribute/distribute_lib.py in call_for_each_replica(self, fn, args, kwargs)
1785       kwargs = {}
1786     with self._container_strategy().scope():
-&gt; 1787       return self._call_for_each_replica(fn, args, kwargs)
1788
1789   def _call_for_each_replica(self, fn, args, kwargs):
~/anaconda3/envs/tf/lib/python3.6/site-packages/tensorflow_core/python/distribute/distribute_lib.py in _call_for_each_replica(self, fn, args, kwargs)
2130         self._container_strategy(),
2131         replica_id_in_sync_group=constant_op.constant(0, dtypes.int32)):
-&gt; 2132       return fn(*args, **kwargs)
2133
2134   def _reduce_to(self, reduce_op, value, destinations):
~/anaconda3/envs/tf/lib/python3.6/site-packages/tensorflow_core/python/autograph/impl/api.py in wrapper(*args, **kwargs)
290   def wrapper(*args, **kwargs):
291     with ag_ctx.ControlStatusCtx(status=ag_ctx.Status.DISABLED):
--&gt; 292       return func(*args, **kwargs)
293
294   if inspect.isfunction(func) or inspect.ismethod(func):
~/anaconda3/envs/tf/lib/python3.6/site-packages/tensorflow_core/python/keras/engine/training_v2_utils.py in train_on_batch(model, x, y, sample_weight, class_weight, reset_metrics)
262       y,
263       sample_weights=sample_weights,
--&gt; 264       output_loss_metrics=model._output_loss_metrics)
265
266   if reset_metrics:
~/anaconda3/envs/tf/lib/python3.6/site-packages/tensorflPlease make sure that this is a bug. As per our GitHub Policy, we only address code/doc bugs, performance issues, feature requests and build/installation issues on GitHub. tag:bug_template
ow_core/python/keras/engine/training_eager.py in train_on_batch(model, inputs, targets, sample_weights, output_loss_metrics)
309           sample_weights=sample_weights,
310           training=True,
--&gt; 311           output_loss_metrics=output_loss_metrics))
312   if not isinstance(outs, list):
313     outs = [outs]
~/anaconda3/envs/tf/lib/python3.6/site-packages/tensorflow_core/python/keras/engine/training_eager.py in _process_single_batch(model, inputs, targets, output_loss_metrics, sample_weights, training)
270                         loss_scale_optimizer.LossScaleOptimizer):
271             grads = model.optimizer.get_unscaled_gradients(grads)
--&gt; 272           model.optimizer.apply_gradients(zip(grads, trainable_weights))
273       else:
274         logging.warning('The list of trainable weights is empty. Make sure that'
~/anaconda3/envs/tf/lib/python3.6/site-packages/tensorflow_core/python/keras/optimizer_v2/optimizer_v2.py in apply_gradients(self, grads_and_vars, name)
439           functools.partial(self._distributed_apply, apply_state=apply_state),
440           args=(grads_and_vars,),
--&gt; 441           kwargs={"name": name})
442
443   def _distributed_apply(self, distribution, grads_and_vars, name, apply_state):
~/anaconda3/envs/tf/lib/python3.6/site-packages/tensorflow_core/python/distribute/distribute_lib.py in merge_call(self, merge_fn, args, kwargs)
1915     if kwargs is None:
1916       kwargs = {}
-&gt; 1917     return self._merge_call(merge_fn, args, kwargs)
1918
1919   def _merge_call(self, merge_fn, args, kwargs):
~/anaconda3/envs/tf/lib/python3.6/site-packages/tensorflow_core/python/distribute/distribute_lib.py in _merge_call(self, merge_fn, args, kwargs)
1922         distribution_strategy_context._CrossReplicaThreadMode(self._strategy))  # pylint: disable=protected-access
1923     try:
-&gt; 1924       return merge_fn(self._strategy, *args, **kwargs)
1925     finally:
1926       _pop_per_thread_mode()
~/anaconda3/envs/tf/lib/python3.6/site-packages/tensorflow_core/python/keras/optimizer_v2/optimizer_v2.py in _distributed_apply(self, distribution, grads_and_vars, name, apply_state)
480         # delays. See b/136304694.
481         with backend.name_scope(
--&gt; 482             scope_name), distribution.extended.colocate_vars_with(var):
483           update_ops.extend(
484               distribution.extended.update(
~/anaconda3/envs/tf/lib/python3.6/contextlib.py in enter(self)
79     def enter(self):
80         try:
---&gt; 81             return next(self.gen)
82         except StopIteration:
83             raise RuntimeError("generator didn't yield") from None
~/anaconda3/envs/tf/lib/python3.6/site-packages/tensorflow_core/python/framework/ops.py in _colocate_with_for_gradient(self, op, gradient_uid, ignore_existing)
4218   def _colocate_with_for_gradient(self, op, gradient_uid,
4219                                   ignore_existing=False):
-&gt; 4220     with self.colocate_with(op, ignore_existing):
4221       if gradient_uid is not None and self._control_flow_context is not None:
4222         self._control_flow_context.EnterGradientColocation(op, gradient_uid)
~/anaconda3/envs/tf/lib/python3.6/contextlib.py in enter(self)
79     def enter(self):
80         try:
---&gt; 81             return next(self.gen)
82         except StopIteration:
83             raise RuntimeError("generator didn't yield") from None
~/anaconda3/envs/tf/lib/python3.6/site-packages/tensorflow_core/python/framework/ops.py in colocate_with(self, op, ignore_existing)
4267       raise ValueError("Trying to reset colocation (op is None) but "
4268                        "ignore_existing is not True")
-&gt; 4269     op = _op_to_colocate_with(op, self)
4270
4271     # By default, colocate_with resets the device function stack,
~/anaconda3/envs/tf/lib/python3.6/site-packages/tensorflow_core/python/framework/ops.py in _op_to_colocate_with(v, graph)
6601   # happen soon, perhaps this hack to work around the circular
6602   # import dependency is acceptable.
-&gt; 6603   if hasattr(v, "handle") and hasattr(v.handle, "op") and isinstance(
6604       v.handle.op, Operation):
6605     if graph.building_function:
~/anaconda3/envs/tf/lib/python3.6/site-packages/tensorflow_core/python/distribute/values.py in handle(self)
715       device = distribute_lib.get_update_device()
716       if device is None:
--&gt; 717         raise ValueError("handle is not available outside the replica context"
718                          " or a tf.distribute.Strategy.update() call.")
719     return self.get(device=device).handle
ValueError: handle is not available outside the replica context or a tf.distribute.Strategy.update() call.
	</description>
	<comments>
		<comment id='1' author='etorrjr10' date='2020-01-12T08:49:30Z'>
		do you have NCCL? If not, you need to use tf.distribute.HierarchicalCopyAllReduce() but not default function 'tf.distribute.NcclAllReduce()'
		</comment>
		<comment id='2' author='etorrjr10' date='2020-01-12T21:35:48Z'>
		&lt;denchmark-link:https://github.com/HLSS-Hen&gt;@HLSS-Hen&lt;/denchmark-link&gt;
 Yeah, I just checked. I have NCCL 2. Either way, I tried inputting tf.distribute.HierarchicalCopyAllReduce() as follows...
tf.distribute.MirroredStrategy(cross_device_ops = tf.distribute.HierarchicalCopyAllReduce(),
devices = [device_name[0], device_name[1]])
But, sadly, I get the same error
		</comment>
		<comment id='3' author='etorrjr10' date='2020-01-13T17:43:17Z'>
		&lt;denchmark-link:https://github.com/etorrjr10&gt;@etorrjr10&lt;/denchmark-link&gt;
 Can you repaste the code snippet to clearly show which parts of the code are under strategy scope? For example, are you calling model.compile() under strategy scope? Also why do you need to specify a device scope for your model?
&lt;denchmark-code&gt;with tf.device(device_names[1]):
&lt;/denchmark-code&gt;

		</comment>
		<comment id='4' author='etorrjr10' date='2020-01-31T10:03:49Z'>
		Please reopen if you are still having issues. Thanks!
		</comment>
		<comment id='5' author='etorrjr10' date='2020-01-31T10:03:51Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/35743&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/35743&gt;No&lt;/denchmark-link&gt;

		</comment>
		<comment id='6' author='etorrjr10' date='2020-01-31T20:50:24Z'>
		I am also getting same error while handling gradient tape.
&lt;denchmark-code&gt;Traceback (most recent call last):
  File "train_model.py", line 211, in &lt;module&gt;
    main()
  File "train_model.py", line 194, in main
    batch_loss = train_step(inp, targ, enc_hidden, targ_lang, encoder, decoder)
  File "train_model.py", line 115, in train_step
    gradients = tape.gradient(loss, variables)
  File "/usr/local/lib/python2.7/dist-packages/tensorflow_core/python/eager/backprop.py", line 1011, in gradient
    flat_sources = [_handle_or_self(x) for x in flat_sources]
  File "/usr/local/lib/python2.7/dist-packages/tensorflow_core/python/eager/backprop.py", line 697, in _handle_or_self
    x = x.handle
  File "/usr/local/lib/python2.7/dist-packages/tensorflow_core/python/distribute/values.py", line 720, in handle
    raise ValueError("`handle` is not available outside the replica context"
ValueError: `handle` is not available outside the replica context or a `tf.distribute.Strategy.update()` call.
&lt;/denchmark-code&gt;

My code:
&lt;denchmark-code&gt;strategy = tf.distribute.MirroredStrategy()
with strategy.scope():
    LOSS_OBJECT = tf.keras.losses.SparseCategoricalCrossentropy(
    from_logits=True, reduction='none')

    OPTIMIZER = tf.keras.optimizers.Adam()


with strategy.scope():
    #@tf.function
    def train_step(inp, targ, enc_hidden, targ_lang, encoder, decoder):
        loss = 0

        with tf.GradientTape(persistent=True) as tape:
            enc_output, enc_hidden = encoder(inp, enc_hidden)

            dec_hidden = enc_hidden

            dec_input = tf.expand_dims([targ_lang.word_index['&lt;start&gt;']] * BATCH_SIZE, 1)

            # Teacher forcing - feeding the target as the next input
            for t in range(1, targ.shape[1]):
                # passing enc_output to the decoder
                predictions, dec_hidden, _ = decoder(dec_input, dec_hidden, enc_output)

                loss += loss_function(targ[:, t], predictions)

                # using teacher forcing
                dec_input = tf.expand_dims(targ[:, t], 1)

            batch_loss = (loss / int(targ.shape[1]))

            variables = encoder.trainable_variables + decoder.trainable_variables

            gradients = tape.gradient(loss, variables)

            OPTIMIZER.apply_gradients(zip(gradients, variables))

        return batch_loss
&lt;/denchmark-code&gt;

I am using Tensorflow==2.1.0 and cuda 10.1
		</comment>
	</comments>
</bug>