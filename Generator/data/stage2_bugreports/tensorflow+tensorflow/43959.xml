<bug id='43959' author='Rariusz' open_date='2020-10-12T13:52:10Z' closed_time='2020-10-14T19:45:11Z'>
	<summary>After converting to TFLite the network lost structure and return zero</summary>
	<description>
&lt;denchmark-h:h3&gt;System information&lt;/denchmark-h&gt;


OS Platform and Distribution  - Linux Ubuntu 20.04 LTS, 64bit:
TensorFlow installed from conda:
TensorFlow version 2.2.0:
Python version 3.8.5:
GCC/Compiler version 9.3.0:
CUDA/cuDNN version 11.0:
GPU model and memory GTX 1080, 12GB:

&lt;denchmark-h:h3&gt;Problem&lt;/denchmark-h&gt;

I did a model training for my own data set. I used the model from the Tensorflow V2 Zoo repository: ssd_resnet50_v1_fpn_1024x1024_coco17_tpu-8.
&lt;denchmark-code&gt;python model_main_tf2.py --model_dir=trening_demo/models/my_ssd_resnet50_v1_fpn_1024x1024_coco17_tpu-8 \
			 --pipeline_config_path=trening_demo/pre-trained-models/ssd_resnet50_v1_fpn_1024x1024_coco17_tpu-8/pipeline.config
&lt;/denchmark-code&gt;

I did training the model for the dataset and I exported the model using this command:
&lt;denchmark-code&gt;python export_tflite_graph_tf2.py --pipeline_config_path trening_demo/pre-trained-models/ssd_resnet50_v1_fpn_1024x1024_coco17_tpu-8/pipeline.config --trained_checkpoint_dir trening_demo/models/my_ssd_resnet50_v1_fpn_1024x1024_coco17_tpu-8/ --output_directory trening_demo/exported-models-tflite/ex_my_ssd_resnet50_v1_fpn_1024x1024_coco17_tpu-8
&lt;/denchmark-code&gt;

Then I run the detector for the saved model and the results are satisfactory.  Then I wanted to convert the saved model to TFLite.
I use:
&lt;denchmark-code&gt;import tensorflow as tf

# Convert the model
converter = tf.lite.TFLiteConverter.from_saved_model(saved_model_dir) # path to the SavedModel directory
converter.optimizations = [lite.Optimize.DEFAULT]
tflite_model = converter.convert().

# Save the model.
with open('model.tflite', 'wb') as f:
  f.write(tflite_model)
&lt;/denchmark-code&gt;

Then I run the detector for tflite_model and the results are zeros. This line of code return zero:
&lt;denchmark-code&gt;# Retrieve detection results
boxes = interpreter.get_tensor(output_details[0]['index'])[0] # Bounding box coordinates of detected objects
classes = interpreter.get_tensor(output_details[1]['index'])[0] # Class index of detected objects
scores = interpreter.get_tensor(output_details[2]['index'])[0] # Confidence of detected objects
#num = interpreter.get_tensor(output_details[3]['index'])[0]  # Total number of detected objects (inaccurate and not needed)
&lt;/denchmark-code&gt;

Error:
&lt;denchmark-code&gt;---------------------------------------------------------------------------
IndexError                                Traceback (most recent call last)
&lt;ipython-input-20-ca031052c9d2&gt; in &lt;module&gt;()
     23     print(interpreter.get_tensor(output_details[3]['index']))
     24     # Retrieve detection results
---&gt; 25     boxes = interpreter.get_tensor(output_details[0]['index'])[0] # Bounding box coordinates of detected objects
     26     classes = interpreter.get_tensor(output_details[1]['index'])[0] # Class index of detected objects
     27     scores = interpreter.get_tensor(output_details[2]['index'])[0] # Confidence of detected objects

IndexError: invalid index to scalar variable.
&lt;/denchmark-code&gt;

So, I compared the network structures with the Netron program. The structure of pre-trained model form tf model Zoo:
&lt;denchmark-link:https://user-images.githubusercontent.com/28406311/95753600-24689100-0ca2-11eb-8ec1-4fd4336a8fd9.png&gt;&lt;/denchmark-link&gt;

The structure of the network after training:
&lt;denchmark-link:https://user-images.githubusercontent.com/28406311/95753615-29c5db80-0ca2-11eb-9fdd-8cd8ce9c3de5.png&gt;&lt;/denchmark-link&gt;

The structuer after convert to TFLite
&lt;denchmark-link:https://user-images.githubusercontent.com/28406311/95753751-57128980-0ca2-11eb-93e5-c06df4b9a6d4.png&gt;&lt;/denchmark-link&gt;

Why has the network been so reduced? How to solve problems?
Best,
	</description>
	<comments>
		<comment id='1' author='Rariusz' date='2020-10-13T23:54:47Z'>
		&lt;denchmark-link:https://github.com/Rariusz&gt;@Rariusz&lt;/denchmark-link&gt;
 Can you please share a simple standalone code to reproduce the issue? Please share model generation code or tflite model. Thanks!
		</comment>
		<comment id='2' author='Rariusz' date='2020-10-14T10:21:20Z'>
		&lt;denchmark-link:https://github.com/jvishnuvardhan&gt;@jvishnuvardhan&lt;/denchmark-link&gt;
  Thank you for your response!!!. Link to the model and the tflite file:
&lt;denchmark-link:https://drive.google.com/drive/folders/1Hz4BdMw2xg5t1rRMhl0smiz17GnL-Pz5?usp=sharing&gt;https://drive.google.com/drive/folders/1Hz4BdMw2xg5t1rRMhl0smiz17GnL-Pz5?usp=sharing&lt;/denchmark-link&gt;

&lt;denchmark-link:https://drive.google.com/file/d/1_Rg3PcHTZ5w561QiSaINQZ-GzknAym3b/view?usp=sharing&gt;https://drive.google.com/file/d/1_Rg3PcHTZ5w561QiSaINQZ-GzknAym3b/view?usp=sharing&lt;/denchmark-link&gt;

This is the code that I use for convert model to TFLite
&lt;denchmark-code&gt;import tensorflow as tf
import importlib.util
converter = tf.lite.TFLiteConverter.from_saved_model('/content/model_temp/exported-models-tflite/ex_my_ssd_resnet50_v1_fpn_1024x1024_coco17_tpu-8/saved_model')
tflite_model = converter.convert()
with open('/content/model_temp/c-tflite/model.tflite', 'wb') as f:
  f.write(tflite_model)

len(tflite_model)
&lt;/denchmark-code&gt;

To run detector I use standard code:
&lt;denchmark-code&gt;PATH_TO_LABELS = '/content/model_temp/labelmap-and-images/labelmap/labelmap.txt'
with open(PATH_TO_LABELS, 'r') as f:
    labels = [line.strip() for line in f.readlines()]
&lt;/denchmark-code&gt;

&lt;denchmark-code&gt;PATH_TO_CKPT = '/content/model_temp/c-tflite/model.tflite'

#pkg = importlib.util.find_spec('tflite_runtime')
#f pkg:
#    from tflite_runtime.interpreter import Interpreter
#else:
from tensorflow.lite.python.interpreter import Interpreter


interpreter = Interpreter(model_path = PATH_TO_CKPT)

print(interpreter)
interpreter.allocate_tensors()

# Get model details
input_details = interpreter.get_input_details()
output_details = interpreter.get_output_details()
height = input_details[0]['shape'][1]
width = input_details[0]['shape'][2]

print(height)
print(width)

floating_model = (input_details[0]['dtype'] == np.float32)

input_mean = 127.5
input_std = 127.5
&lt;/denchmark-code&gt;

&lt;denchmark-code&gt;# Loop over every image and perform detection
for image_path in IMAGE_PATHS:

    # Load image and resize to expected shape [1xHxWx3]
    image = cv2.imread(image_path)
    image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
    imH, imW, _ = image.shape 
    image_resized = cv2.resize(image_rgb, (width, height))
    input_data = np.expand_dims(image_resized, axis=0)

    # Normalize pixel values if using a floating model (i.e. if model is non-quantized)
    if floating_model:
        input_data = (np.float32(input_data) - input_mean) / input_std

    # Perform the actual detection by running the model with the image as input
    print(input_data.dtype)
    interpreter.set_tensor(input_details[0]['index'],input_data)
    interpreter.invoke()

    print(interpreter.get_tensor(output_details[0]['index']))
    print(interpreter.get_tensor(output_details[1]['index']))
    print(interpreter.get_tensor(output_details[2]['index']))
    print(interpreter.get_tensor(output_details[3]['index']))
    # Retrieve detection results
    boxes = interpreter.get_tensor(output_details[0]['index'])[0] # Bounding box coordinates of detected objects
    classes = interpreter.get_tensor(output_details[1]['index'])[0] # Class index of detected objects
    scores = interpreter.get_tensor(output_details[2]['index'])[0] # Confidence of detected objects
    #num = interpreter.get_tensor(output_details[3]['index'])[0]  # Total number of detected objects (inaccurate and not needed)

    # Loop over all detections and draw detection box if confidence is above minimum threshold
    for i in range(len(scores)):
        if ((scores[i] &gt; min_conf_threshold) and (scores[i] &lt;= 1.0)):

            # Get bounding box coordinates and draw box
            # Interpreter can return coordinates that are outside of image dimensions, need to force them to be within image using max() and min()
            ymin = int(max(1,(boxes[i][0] * imH)))
            xmin = int(max(1,(boxes[i][1] * imW)))
            ymax = int(min(imH,(boxes[i][2] * imH)))
            xmax = int(min(imW,(boxes[i][3] * imW)))
            
            cv2.rectangle(image, (xmin,ymin), (xmax,ymax), (10, 255, 0), 2)

            # Draw label
            object_name = labels[int(classes[i])] # Look up object name from "labels" array using class index
            label = '%s: %d%%' % (object_name, int(scores[i]*100)) # Example: 'person: 72%'
            labelSize, baseLine = cv2.getTextSize(label, cv2.FONT_HERSHEY_SIMPLEX, 0.7, 2) # Get font size
            label_ymin = max(ymin, labelSize[1] + 10) # Make sure not to draw label too close to top of window
            cv2.rectangle(image, (xmin, label_ymin-labelSize[1]-10), (xmin+labelSize[0], label_ymin+baseLine-10), (255, 255, 255), cv2.FILLED) # Draw white box to put label text in
            cv2.putText(image, label, (xmin, label_ymin-7), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 0, 0), 2) # Draw label text
&lt;/denchmark-code&gt;

		</comment>
		<comment id='3' author='Rariusz' date='2020-10-14T19:45:11Z'>
		&lt;denchmark-link:https://github.com/Rariusz&gt;@Rariusz&lt;/denchmark-link&gt;
 You need to follow the instructions &lt;denchmark-link:https://github.com/tensorflow/models/blob/master/research/object_detection/g3doc/running_on_mobile_tf2.md&gt;here&lt;/denchmark-link&gt;
 to convert TF2 detection models for TFLite. There is an intermediate step where you export TFLite-specific SavedModel for TFLite converter.
		</comment>
		<comment id='4' author='Rariusz' date='2020-10-14T19:45:13Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/43959&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/43959&gt;No&lt;/denchmark-link&gt;

		</comment>
		<comment id='5' author='Rariusz' date='2020-10-16T18:34:26Z'>
		&lt;denchmark-link:https://github.com/Rariusz&gt;@Rariusz&lt;/denchmark-link&gt;
 replying to your thread here. Can you check if you are able to convert the floating-point model fine? There might be a bug in the quantization code, so its better to do a sanity check first.
		</comment>
	</comments>
</bug>