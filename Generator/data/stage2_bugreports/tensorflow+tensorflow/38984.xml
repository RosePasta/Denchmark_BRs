<bug id='38984' author='tanguycdls' open_date='2020-04-28T16:06:54Z' closed_time='2020-05-26T18:57:46Z'>
	<summary>[TF2.2rc3] dict of ragged tensors as an input of keras layer does not support serialization</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): yes
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): linux
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device:
TensorFlow installed from (source or binary): binary
TensorFlow version (use command below): 2.2rc3
Python version: 3.6
Bazel version (if compiling from source):
GCC/Compiler version (if compiling from source):
CUDA/cuDNN version:
GPU model and memory:

Describe the current behavior
We have a layer that takes a dict of ragged tensors as input:
&lt;denchmark-code&gt;class EmbeddingMerger(tf.keras.layers.Layer):
  def __init__(self, list_features, **kwargs):
    super().__init__(**kwargs)
    self._supports_ragged_inputs = True
    self.embeddings = {feature: Embedding(10, 3) for feature in list_features}
    self.mean = tf.keras.layers.Lambda(tf.reduce_mean, arguments=dict(axis=1))
  def call(self, inputs):
    tensors = [self.embeddings[col](inputs[col]) for col in inputs]
    tensors = [self.mean(inp) for inp in tensors]
    return Add()(tensors)
&lt;/denchmark-code&gt;

before saving it the model works well:
&lt;denchmark-code&gt;list_features = ['feature_1', 'feature_2']
feature_1 = tf.ragged.constant([[0], [1, 3]])
feature_2 = tf.ragged.constant([[1, 2], [4]])
f = {'feature_1': feature_1,
     'feature_2': feature_2}
f_inputs = {'feature_1': Input(shape=(), name='feature_1', ragged=True),
            'feature_2': Input(shape=(), name='feature_2', ragged=True)}
out = EmbeddingMerger(list_features)(f_inputs)
model = Model(f_inputs, out)
&lt;/denchmark-code&gt;

&lt;denchmark-code&gt;truth = model.predict(f)
truth
&lt;/denchmark-code&gt;


array([[-0.01802131, -0.01703345,  0.0267079 ],
[ 0.0096956 , -0.05128085, -0.04486313]], dtype=float32)

If we serialize the model and reload it :
&lt;denchmark-code&gt;model.save('/tmp/test')
model_reloaded = tf.keras.models.load_model('/tmp/test')
model_reloaded.predict(f)
&lt;/denchmark-code&gt;


ValueError: Layer embedding_merger does not support RaggedTensors as input. Inputs received: {'feature_1': tf.RaggedTensor(values=Tensor("model/Cast_1:0", shape=(None,), dtype=float32), row_splits=Tensor("RaggedFromVariant/RaggedTensorFromVariant:0", shape=(None,), dtype=int64)), 'feature_2': tf.RaggedTensor(values=Tensor("model/Cast_3:0", shape=(None,), dtype=float32), row_splits=Tensor("RaggedFromVariant_1/RaggedTensorFromVariant:0", shape=(None,), dtype=int64))}. You can try converting your input to an uniform tensor.


Describe the expected behavior
The model should work as well serialized and not serialized and keep its support for ragged inputs in the dict.

&lt;denchmark-link:https://colab.research.google.com/gist/tanguycdls/552347a77758674c39b37471f72c3bdf/copie-de-untitled5.ipynb&gt;https://colab.research.google.com/gist/tanguycdls/552347a77758674c39b37471f72c3bdf/copie-de-untitled5.ipynb&lt;/denchmark-link&gt;


I found that &lt;denchmark-link:https://www.tensorflow.org/guide/concrete_function#nested_arguments&gt;https://www.tensorflow.org/guide/concrete_function#nested_arguments&lt;/denchmark-link&gt;
 that stands that TF 2.3 will support that usage in a concrete function. I tried but its actually worse the model does not even support dict of ragged in the non serialized model: &lt;denchmark-link:https://colab.research.google.com/gist/tanguycdls/e78f2c5329f85b84a8d8db7d1b6a40f1/copie-de-untitled5.ipynb&gt;https://colab.research.google.com/gist/tanguycdls/e78f2c5329f85b84a8d8db7d1b6a40f1/copie-de-untitled5.ipynb&lt;/denchmark-link&gt;

TF 2.1.0
Same as nightly breaks even non serialized on another error:

ValueError: Error when checking input: expected feature_1 to have 1 dimensions, but got array with shape (2, None)

&lt;denchmark-link:https://colab.research.google.com/gist/tanguycdls/996ea1f53de753c14cb837f1071e509c/copie-de-untitled5.ipynb&gt;https://colab.research.google.com/gist/tanguycdls/996ea1f53de753c14cb837f1071e509c/copie-de-untitled5.ipynb&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='tanguycdls' date='2020-04-29T08:04:05Z'>
		&lt;denchmark-link:https://github.com/tanguycdls&gt;@tanguycdls&lt;/denchmark-link&gt;

I have tried in colab in TF 2.1.0 and 2.2-rc3 and was able to reproduce the issue.Please, find the gist &lt;denchmark-link:https://colab.sandbox.google.com/gist/ravikyram/41b639aa2a57c78b9332f19bab1df756/untitled838.ipynb&gt;here&lt;/denchmark-link&gt;
.Thanks!
		</comment>
		<comment id='2' author='tanguycdls' date='2020-05-26T18:57:46Z'>
		There's a bug in your code: the shape you pass in when constructing Input isn't correct.  In particular, you're using shape=(), which means that each batch has a single scalar value.  But in reality, each batch has a vector value of unknown size -- i.e., shape=[None].  So you should change it to:
&lt;denchmark-code&gt;f_inputs = {'feature_1': Input(shape=[None], name='feature_1', ragged=True),
            'feature_2': Input(shape=[None], name='feature_2', ragged=True)}
&lt;/denchmark-code&gt;

And then it works as expected.
		</comment>
		<comment id='3' author='tanguycdls' date='2020-05-26T18:57:48Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/38984&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/38984&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>