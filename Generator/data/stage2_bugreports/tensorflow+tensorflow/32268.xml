<bug id='32268' author='vade' open_date='2019-09-06T00:29:30Z' closed_time='2020-03-31T10:01:27Z'>
	<summary>TF.Keras model creation results in different output node when eager is enabled or not</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): No
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Google Collab
Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device:
TensorFlow installed from (source or binary): No
TensorFlow version (use command below):Google Collab default runtime / Tensorflow 1.14.0
tf.keras 2.2.4-tf
Python version:Google Collab default runtime: 3.6.8 (default, Jan 14 2019, 11:02:34)
[GCC 8.0.1 20180414 (experimental) [trunk revision 259383]]

Describe the current behavior
building a tf.keras sequence model when eager mode is enabled vs not results in different output nodes.
Describe the expected behavior
Graph execution does not effect graph construction, the model should be the same.
Code to reproduce the issue
Provide a reproducible test case that is the bare minimum necessary to generate the problem.
With eager enabled:
&lt;denchmark-code&gt;# load tensorflow
from __future__ import absolute_import, division, print_function, unicode_literals
import tensorflow as tf
import numpy as np
print(tf.__version__)
AUTOTUNE = tf.data.experimental.AUTOTUNE
#enable eager
tf.enable_eager_execution()
assert tf.multiply(6, 7).numpy() == 42
print("Eager execution: {}".format(tf.executing_eagerly()))

# build our model and print its outputs and summary
base_model = tf.keras.applications.NASNetMobile(input_shape=(IMG_SIZE, IMG_SIZE, 3),
                                               include_top=False,
                                               weights='imagenet')
base_model.trainable = False
output = tf.keras.layers.Dense(num_labels, activation = 'sigmoid', name="cinemanet_output", input_shape=(None, 1056))

model = tf.keras.Sequential([
  base_model,
  tf.keras.layers.GlobalAveragePooling2D(),
  output])
model.summary()
print(model.input.op.name)
print(model.output.op.name)
&lt;/denchmark-code&gt;

Results in:
&lt;denchmark-code&gt;Model: "sequential"
_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
NASNet (Model)               (None, 7, 7, 1056)        4269716   
_________________________________________________________________
global_average_pooling2d (Gl (None, 1056)              0         
_________________________________________________________________
cinemanet_output (Dense)     (None, 229)               242053    
=================================================================
Total params: 4,511,769
Trainable params: 242,053
Non-trainable params: 4,269,716
_________________________________________________________________
NASNet_input
cinemanet_output/Identity
&lt;/denchmark-code&gt;

Without Eager:
&lt;denchmark-code&gt;Model: "sequential"
_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
NASNet (Model)               (None, 7, 7, 1056)        4269716   
_________________________________________________________________
global_average_pooling2d (Gl (None, 1056)              0         
_________________________________________________________________
cinemanet_output (Dense)     (None, 229)               242053    
=================================================================
Total params: 4,511,769
Trainable params: 242,053
Non-trainable params: 4,269,716
_________________________________________________________________
NASNet_input
cinemanet_output/Sigmoid
&lt;/denchmark-code&gt;

Which results in a model with no output when saved to pb.
Other info / logs
Include any logs or source code that would be helpful to diagnose the problem. If including tracebacks, please include the full traceback. Large logs and files should be attached.
	</description>
	<comments>
		<comment id='1' author='vade' date='2019-09-06T00:38:54Z'>
		See &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/32241&gt;#32241&lt;/denchmark-link&gt;
 - this may be the root of that issue?
		</comment>
		<comment id='2' author='vade' date='2019-09-09T07:48:43Z'>
		&lt;denchmark-link:https://github.com/vade&gt;@vade&lt;/denchmark-link&gt;
, Looks like the code is incomplete, Please provide the complete code to reproduce the issue. Since i tried executing the code, some of the variable such as IMG_SIZE is not defined. Thanks!
		</comment>
		<comment id='3' author='vade' date='2019-09-09T16:56:01Z'>
		Apologies, Im happy to put together a very limited GCS demo of the issue. Hold tight.
		</comment>
		<comment id='4' author='vade' date='2019-09-09T20:15:09Z'>
		Hi.
Eager Mode code in GCS:
&lt;denchmark-link:https://colab.research.google.com/drive/16g3-5kgD5KV5_vz0DY07_bIO0miXp-NP&gt;https://colab.research.google.com/drive/16g3-5kgD5KV5_vz0DY07_bIO0miXp-NP&lt;/denchmark-link&gt;

No Eager Mode code in GCS:
&lt;denchmark-link:https://colab.research.google.com/drive/1JqmscKZTLy2GpUiTzSyOMDXepalPSZKR&gt;https://colab.research.google.com/drive/1JqmscKZTLy2GpUiTzSyOMDXepalPSZKR&lt;/denchmark-link&gt;

One line of code difference : tf.enable_eager_execution()
Output with Eager:
&lt;denchmark-code&gt;Model: "sequential"
_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
NASNet (Model)               (None, 7, 7, 1056)        4269716   
_________________________________________________________________
global_average_pooling2d (Gl (None, 1056)              0         
_________________________________________________________________
cinemanet_output (Dense)     (None, 229)               242053    
=================================================================
Total params: 4,511,769
Trainable params: 242,053
Non-trainable params: 4,269,716
_________________________________________________________________
NASNet_input
cinemanet_output/Identity
&lt;/denchmark-code&gt;

Output with No Eager:
&lt;denchmark-code&gt;WARNING:tensorflow:From /usr/local/lib/python3.6/dist-packages/tensorflow/python/ops/init_ops.py:1251: calling VarianceScaling.__init__ (from tensorflow.python.ops.init_ops) with dtype is deprecated and will be removed in a future version.
Instructions for updating:
Call initializer instance with the dtype argument instead of passing it to the constructor
Downloading data from https://github.com/titu1994/Keras-NASNet/releases/download/v1.2/NASNet-mobile-no-top.h5
19996672/19993432 [==============================] - 0s 0us/step
Model: "sequential"
_________________________________________________________________
Layer (type)                 Output Shape              Param #   
=================================================================
NASNet (Model)               (None, 7, 7, 1056)        4269716   
_________________________________________________________________
global_average_pooling2d (Gl (None, 1056)              0         
_________________________________________________________________
cinemanet_output (Dense)     (None, 229)               242053    
=================================================================
Total params: 4,511,769
Trainable params: 242,053
Non-trainable params: 4,269,716
_________________________________________________________________
NASNet_input
cinemanet_output/Sigmoid
&lt;/denchmark-code&gt;

See the last print statement / output:
		</comment>
		<comment id='5' author='vade' date='2019-09-10T04:56:22Z'>
		&lt;denchmark-link:https://github.com/vade&gt;@vade&lt;/denchmark-link&gt;
, Thanks for providing the GCS.
		</comment>
		<comment id='6' author='vade' date='2019-09-10T21:19:39Z'>
		I could reproduce the issue even in tf-nightly. Thanks!
		</comment>
		<comment id='7' author='vade' date='2019-09-10T21:29:38Z'>
		Thank you very much for looking into this. Much obliged, and thank you for all of your work on TF!
		</comment>
		<comment id='8' author='vade' date='2020-03-31T10:01:27Z'>
		Looking through &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/32241&gt;#32241&lt;/denchmark-link&gt;
, it seems that the issue (different output node) was fixed, but freeze_graph is no longer supported.
Closing this for now. If freeze_graph is an issue, please file another one :-)
		</comment>
		<comment id='9' author='vade' date='2020-03-31T10:01:29Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/32268&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/32268&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>