<bug id='24865' author='awav' open_date='2019-01-12T00:14:05Z' closed_time='2019-07-02T12:21:44Z'>
	<summary>[TF2.0] Custom variables</summary>
	<description>
Hello all,
I'm testing new features of TF2.0. Especially, I'm interested in creating custom variables. According to &lt;denchmark-link:https://github.com/tensorflow/community/blob/master/rfcs/20180817-variables-20.md&gt;Variables RFC&lt;/denchmark-link&gt;
 description, it must be easy to do:

tf.Variable will become an abstract base class with a well-defined interface and `a scoped factory to construct instances: 1. Users will be able to implement their own variable-like objects by subclassing tf.Variable and adding a scoped factory function to use those variables, 2. ...

But, I'm getting errors and because of lack of the documentation, I can not figure out either I do something wrong or this feature doesn't work at the moment.
I'm using tensorflow from pip tf-nightly-2.0-preview.
version 1:
In [74]: class Variable(metaclass=tf.Variable): pass
In [75]: v = Variable(1.0)
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
&lt;ipython-input-75-5f9f01fedcf6&gt; in &lt;module&gt;
----&gt; 1 v = Variable(1.0)

TypeError: 'ResourceVariable' object is not callable
version 2:
In [78]: class Variable(tf.Variable):
    ...:     pass
    ...:

In [79]: v = Variable(10.)
---------------------------------------------------------------------------
NotImplementedError                       Traceback (most recent call last)
&lt;ipython-input-79-9441da3b11b5&gt; in &lt;module&gt;
----&gt; 1 v = Variable(10.)

~/anaconda3/envs/tf2/lib/python3.6/site-packages/tensorflow/python/ops/variables.py in __call__(cls, *args, **kwargs)
    200       return cls._variable_v2_call(*args, **kwargs)
    201     else:
--&gt; 202       return super(VariableMetaclass, cls).__call__(*args, **kwargs)
    203
    204

~/anaconda3/envs/tf2/lib/python3.6/site-packages/tensorflow/python/ops/variables.py in __init__(self, initial_value, trainable, validate_shape, caching_device, name, variable_def, dtype, import_scope, constraint, synchronization, aggregation)
    395       RuntimeError: If eager execution is enabled.
    396     """
--&gt; 397     raise NotImplementedError
    398
    399   def __repr__(self):

NotImplementedError:
I would be grateful for the clarity about the status of this RFC part and, in case it is implemented, some guidance how it should be done.
Thanks!
	</description>
	<comments>
		<comment id='1' author='awav' date='2019-01-15T00:20:47Z'>
		We don't have an interface for inheriting from Variable yet (the RFC isn't as fully implemented as it seems). There'll probably be another RFC for the inherit-from-variable interface; it is tricky as we need to maintain compatibility with checkpointing and distribution strategies and parameter servers and functions and other things which want to control variable creation and initialization.
		</comment>
		<comment id='2' author='awav' date='2019-02-22T21:47:49Z'>
		&lt;denchmark-link:https://github.com/awav&gt;@awav&lt;/denchmark-link&gt;
 I think we should close this? Or do you want to attach a cleaned-up version of the second alternative you have here?
		</comment>
		<comment id='3' author='awav' date='2019-07-02T12:21:44Z'>
		Closing, and removing from the project tracker.
		</comment>
		<comment id='4' author='awav' date='2019-07-02T12:21:45Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=24865&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=24865&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>