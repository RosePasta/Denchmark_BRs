<bug id='43114' author='kwanchet' open_date='2020-09-10T15:38:10Z' closed_time='2020-10-01T15:13:46Z'>
	<summary>Problem saving and loading Keras Model that was built with StellarGraph library</summary>
	<description>
Please make sure that this is a bug. As per our
GitHub Policy,
we only address code/doc bugs, performance issues, feature requests and
build/installation issues on GitHub. tag:bug_template
System information


Have I written custom code (as opposed to using a stock example script provided in TensorFlow):
I am using StellarGraph package which uses Keras for building graph neural networks.


OS Platform and Distribution (e.g., Linux Ubuntu 16.04): macOS Catalina


Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: NIL


TensorFlow installed from (source or binary): binary


TensorFlow version (use command below): pip install tensorflow 2.3.0


Python version: 3.6.9


Bazel version (if compiling from source):


GCC/Compiler version (if compiling from source):


CUDA/cuDNN version:


GPU model and memory:


You can collect some of this information using our environment capture
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/tree/master/tools/tf_env_collect.sh&gt;script&lt;/denchmark-link&gt;

You can also obtain the TensorFlow version with:

TF 1.0: python -c "import tensorflow as tf; print(tf.GIT_VERSION, tf.VERSION)"
TF 2.0: python -c "import tensorflow as tf; print(tf.version.GIT_VERSION, tf.version.VERSION)"

Describe the current behavior
I have used the following code to save and load the Keras model:
&lt;denchmark-code&gt;json_file = open(os.path.join("./outputs/model_new/", 'model.json'), 'r')
model_json = json_file.read()
json_file.close()
model = model_from_json(model_json, custom_objects=sg.custom_keras_layers)
# load weights into new model
model.load_weights(os.path.join("./outputs/model_new/", "model.h5"))   
model.compile(
            optimizer=optimizers.Adam(lr=0.002),
            loss=keras.losses.binary_crossentropy,
            metrics=METRICS,
        )
&lt;/denchmark-code&gt;

However, it returns the following error:
&lt;denchmark-code&gt;ValueError: Dimension 1 in both shapes must be equal, but are 2 and 1. Shapes are [?,2] and [?,1]. for '{{node mean_hin_aggregator_3/concat_5}} = ConcatV2[N=2, T=DT_FLOAT, Tidx=DT_INT32](mean_hin_aggregator_3/Reshape_35, mean_hin_aggregator_3/truediv_5, mean_hin_aggregator_3/concat_5/axis)' with input shapes: [?,2,18], [?,1,18], [] and with computed input tensors: input[2] = &lt;2&gt;.
&lt;/denchmark-code&gt;

Please note that I am using StellarGraph to build the graph model. There are some custom layers involved such as Mean_hin_aggregator. I suspect this is the cause of the problem. A similar problem was mentioned in StellarGraph issues before: &lt;denchmark-link:https://github.com/stellargraph/stellargraph/issues/201&gt;stellargraph/stellargraph#201&lt;/denchmark-link&gt;

Describe the expected behavior
It should return the trained model.
Standalone code to reproduce the issue
Provide a reproducible test case that is the bare minimum necessary to generate
the problem. If possible, please share a link to Colab/Jupyter/any notebook.
Other info / logs Include any logs or source code that would be helpful to
diagnose the problem. If including tracebacks, please include the full
traceback. Large logs and files should be attached.
	</description>
	<comments>
		<comment id='1' author='kwanchet' date='2020-09-11T13:53:13Z'>
		&lt;denchmark-link:https://github.com/kwanchet&gt;@kwanchet&lt;/denchmark-link&gt;

Can you please share colab link or simple standalone code with supporting files ( model.json) to reproduce the issue in our environment.It helps us in localizing the issue faster.Thanks!
		</comment>
		<comment id='2' author='kwanchet' date='2020-09-18T14:41:13Z'>
		This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you.
		</comment>
		<comment id='3' author='kwanchet' date='2020-09-24T15:00:38Z'>
		A brilliant feature of HinSage is that it can do inductive representation learning. Not being able to save and load the model makes this much less useful.
Is this being looked at so we can use this awesome algorithm in all its glory?
		</comment>
		<comment id='4' author='kwanchet' date='2020-10-01T15:13:44Z'>
		Closing as stale. Please reopen if you'd like to work on this further.
		</comment>
		<comment id='5' author='kwanchet' date='2020-10-01T15:13:47Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/43114&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/43114&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>