<bug id='42728' author='Rogach' open_date='2020-08-28T09:49:13Z' closed_time='2020-08-28T17:33:48Z'>
	<summary>OP_REQUIRES failed at conv_ops.cc:1115</summary>
	<description>
System information

Have I written custom code (as opposed to using a stock example script provided in TensorFlow): no, used code from CNN tutorial
OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Arch Linux, kernel 5.8.3-arch1-1
TensorFlow installed from (source or binary): python-tensorflow-opt-cuda package
TensorFlow version (use command below): unknown 2.3.0
Python version: Python 3.8.5
CUDA/cuDNN version: CUDA 11.0.2-1,  cuDNN 8.0.2.39-2
GPU model and memory: Nvidia GeForce RTX 2070 8gb

Describe the current behavior
Any model fitting using Conv2D layers fails with OP_REQUIRES failed at conv_ops.cc:1115 : Not found: No algorithm worked! errors. Full trace:
&lt;denchmark-code&gt;2020-08-28 12:42:25.012311: W tensorflow/core/framework/op_kernel.cc:1767] OP_REQUIRES failed at conv_ops.cc:1115 : Not found: No algorithm worked!
Traceback (most recent call last):
  File "test.py", line 26, in &lt;module&gt;
    history = model.fit(train_images, train_labels, epochs=10, batch_size=64,
  File "/usr/lib/python3.8/site-packages/tensorflow/python/keras/engine/training.py", line 108, in _method_wrapper
    return method(self, *args, **kwargs)
  File "/usr/lib/python3.8/site-packages/tensorflow/python/keras/engine/training.py", line 1098, in fit
    tmp_logs = train_function(iterator)
  File "/usr/lib/python3.8/site-packages/tensorflow/python/eager/def_function.py", line 780, in __call__
    result = self._call(*args, **kwds)
  File "/usr/lib/python3.8/site-packages/tensorflow/python/eager/def_function.py", line 840, in _call
    return self._stateless_fn(*args, **kwds)
  File "/usr/lib/python3.8/site-packages/tensorflow/python/eager/function.py", line 2829, in __call__
    return graph_function._filtered_call(args, kwargs)  # pylint: disable=protected-access
  File "/usr/lib/python3.8/site-packages/tensorflow/python/eager/function.py", line 1843, in _filtered_call
    return self._call_flat(
  File "/usr/lib/python3.8/site-packages/tensorflow/python/eager/function.py", line 1923, in _call_flat
    return self._build_call_outputs(self._inference_function.call(
  File "/usr/lib/python3.8/site-packages/tensorflow/python/eager/function.py", line 545, in call
    outputs = execute.execute(
  File "/usr/lib/python3.8/site-packages/tensorflow/python/eager/execute.py", line 59, in quick_execute
    tensors = pywrap_tfe.TFE_Py_Execute(ctx._handle, device_name, op_name,
tensorflow.python.framework.errors_impl.NotFoundError:  No algorithm worked!
	 [[node sequential/conv2d/Conv2D (defined at test.py:26) ]] [Op:__inference_train_function_853]

Function call stack:
train_function
&lt;/denchmark-code&gt;

Describe the expected behavior
Model fitting works correctly.
Standalone code to reproduce the issue
I used &lt;denchmark-link:https://www.tensorflow.org/tutorials/images/cnn&gt;Convolutional Neural Network (CNN) Tutorial&lt;/denchmark-link&gt;
, full code below:
import tensorflow as tf

from tensorflow.keras import datasets, layers, models
import matplotlib.pyplot as plt

(train_images, train_labels), (test_images, test_labels) = datasets.cifar10.load_data()

# Normalize pixel values to be between 0 and 1
train_images, test_images = train_images / 255.0, test_images / 255.0

model = models.Sequential()
model.add(layers.Conv2D(32, (3, 3), activation='relu', input_shape=(32, 32, 3)))
model.add(layers.MaxPooling2D((2, 2)))
model.add(layers.Conv2D(64, (3, 3), activation='relu'))
model.add(layers.MaxPooling2D((2, 2)))
model.add(layers.Conv2D(64, (3, 3), activation='relu'))

model.add(layers.Flatten())
model.add(layers.Dense(64, activation='relu'))
model.add(layers.Dense(10))

model.compile(optimizer='adam',
              loss=tf.keras.losses.SparseCategoricalCrossentropy(from_logits=True),
              metrics=['accuracy'])

history = model.fit(train_images, train_labels, epochs=10,
                    validation_data=(test_images, test_labels))
I'm attaching full log file (with ): &lt;denchmark-link:https://github.com/tensorflow/tensorflow/files/5141360/log.txt&gt;log.txt&lt;/denchmark-link&gt;

How can I help debugging this problem?
	</description>
	<comments>
		<comment id='1' author='Rogach' date='2020-08-28T11:43:27Z'>
		I tried reverting different packages to older versions, and it seems the problem was introduced in cuDNN between versions 8.0.0.180 and 8.0.2.39:
&lt;denchmark-code&gt;cudnn 8.0.0.180 works
cudnn 8.0.2.39 doesn't
&lt;/denchmark-code&gt;

Unfortunately cuDNN is not open-source so I am not able to debug further.
		</comment>
		<comment id='2' author='Rogach' date='2020-08-28T17:16:40Z'>
		&lt;denchmark-link:https://github.com/Rogach&gt;@Rogach&lt;/denchmark-link&gt;
,
As per the &lt;denchmark-link:https://www.tensorflow.org/install/source#tested_build_configurations&gt;tested build configurations&lt;/denchmark-link&gt;
, TensorFlow v2.3 is compatible with cuDNN 7.6 and CUDA 10.1.
I was able to run the code without any issues using that configuration, please find the gist of it &lt;denchmark-link:https://colab.research.google.com/gist/amahendrakar/b9f00c660793a08d672576fa97f6670f/42728.ipynb&gt;here&lt;/denchmark-link&gt;
. Thanks!
Could you please check if you are facing the same error with cuDNN 7.6 and CUDA 10.1? Thanks!
		</comment>
		<comment id='3' author='Rogach' date='2020-08-28T17:33:48Z'>
		Yes, cuDNN 7.6 (or even 8.0.0) works correctly, problems begin only with 8.0.2. I'll close the issue for now since the configuration is unsupported.
		</comment>
		<comment id='4' author='Rogach' date='2020-08-28T17:33:49Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/42728&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/42728&gt;No&lt;/denchmark-link&gt;

		</comment>
		<comment id='5' author='Rogach' date='2020-11-26T00:48:43Z'>
		This workaround fixes this issue for me.
&lt;denchmark-code&gt;gpus = tf.config.experimental.list_physical_devices('GPU')
for gpu in gpus:
  tf.config.experimental.set_memory_growth(gpu, True)
&lt;/denchmark-code&gt;

or
&lt;denchmark-code&gt;from tensorflow.compat.v1 import ConfigProto
from tensorflow.compat.v1 import InteractiveSession

config = ConfigProto()
config.gpu_options.allow_growth = True
session = InteractiveSession(config=config)
&lt;/denchmark-code&gt;

		</comment>
	</comments>
</bug>