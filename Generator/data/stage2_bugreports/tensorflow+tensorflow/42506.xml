<bug id='42506' author='mrdbourke' open_date='2020-08-20T04:19:09Z' closed_time='2020-12-24T12:05:07Z'>
	<summary>tf.keras.applications.EfficientNetB- not running as expected</summary>
	<description>
System information

OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Colab
TensorFlow version (use command below): v2.3.0-0-gb36436b087 2.3.0

Describe the current behavior
&lt;denchmark-link:https://www.tensorflow.org/api_docs/python/tf/keras/applications/EfficientNetB0&gt;tf.keras.applications.EfficientNetB-&lt;/denchmark-link&gt;
 not behaving like other tf.keras.applications modules.
In seems any of the EfficientNet modules I try to use don't function as expected as when using other modules such as &lt;denchmark-link:https://www.tensorflow.org/api_docs/python/tf/keras/applications/ResNet50V2&gt;ResNet50V2&lt;/denchmark-link&gt;
 (using the same code/data setups).
Unless this is stated somewhere, I'm not sure what I'm getting wrong.
I've tried the TF Hub versions of EfficientNetB- and as feature extractors and they seem to be working fine.
Describe the expected behavior
EfficientNetB- modules should function like other modules in tf.keras.applications.

Running Colab notebook: &lt;denchmark-link:https://colab.research.google.com/drive/1m3U3wREqWLCKqLhh5Gzuy_mdq5mk6h_r?usp=sharing&gt;https://colab.research.google.com/drive/1m3U3wREqWLCKqLhh5Gzuy_mdq5mk6h_r?usp=sharing&lt;/denchmark-link&gt;

Other info / logs
ResNetV250 output:
&lt;denchmark-code&gt;24/24 [==============================] - 17s 701ms/step - loss: 2.2448 - accuracy: 0.2240 - val_loss: 2.0786 - val_accuracy: 0.4660
Epoch 2/10
24/24 [==============================] - 16s 674ms/step - loss: 1.9990 - accuracy: 0.5800 - val_loss: 1.8562 - val_accuracy: 0.6896
Epoch 3/10
24/24 [==============================] - 16s 665ms/step - loss: 1.8456 - accuracy: 0.7000 - val_loss: 1.7827 - val_accuracy: 0.7476
Epoch 4/10
24/24 [==============================] - 16s 672ms/step - loss: 1.7713 - accuracy: 0.7667 - val_loss: 1.7561 - val_accuracy: 0.7608
Epoch 5/10
24/24 [==============================] - 16s 664ms/step - loss: 1.7313 - accuracy: 0.8053 - val_loss: 1.7457 - val_accuracy: 0.7616
Epoch 6/10
24/24 [==============================] - 16s 667ms/step - loss: 1.7049 - accuracy: 0.8187 - val_loss: 1.7340 - val_accuracy: 0.7712
Epoch 7/10
24/24 [==============================] - 16s 668ms/step - loss: 1.6779 - accuracy: 0.8347 - val_loss: 1.7246 - val_accuracy: 0.7824
Epoch 8/10
24/24 [==============================] - 16s 667ms/step - loss: 1.6577 - accuracy: 0.8520 - val_loss: 1.7222 - val_accuracy: 0.7760
Epoch 9/10
24/24 [==============================] - 16s 665ms/step - loss: 1.6476 - accuracy: 0.8747 - val_loss: 1.7189 - val_accuracy: 0.7772
Epoch 10/10
24/24 [==============================] - 16s 661ms/step - loss: 1.6372 - accuracy: 0.8853 - val_loss: 1.7163 - val_accuracy: 0.7764
&lt;/denchmark-code&gt;

EfficientNetB0 output (using same code and data as above, except for EfficientNetB0 not ResNet50V2):
&lt;denchmark-code&gt;Epoch 1/10
24/24 [==============================] - 18s 735ms/step - loss: 2.3056 - accuracy: 0.0787 - val_loss: 2.3026 - val_accuracy: 0.1000
Epoch 2/10
24/24 [==============================] - 16s 654ms/step - loss: 2.3048 - accuracy: 0.0827 - val_loss: 2.3026 - val_accuracy: 0.1000
Epoch 3/10
24/24 [==============================] - 16s 654ms/step - loss: 2.3048 - accuracy: 0.0907 - val_loss: 2.3026 - val_accuracy: 0.1000
Epoch 4/10
24/24 [==============================] - 15s 639ms/step - loss: 2.3051 - accuracy: 0.0867 - val_loss: 2.3027 - val_accuracy: 0.1000
Epoch 5/10
24/24 [==============================] - 15s 631ms/step - loss: 2.3052 - accuracy: 0.0773 - val_loss: 2.3026 - val_accuracy: 0.1000
Epoch 6/10
24/24 [==============================] - 15s 632ms/step - loss: 2.3052 - accuracy: 0.0800 - val_loss: 2.3026 - val_accuracy: 0.1000
Epoch 7/10
24/24 [==============================] - 15s 634ms/step - loss: 2.3059 - accuracy: 0.1040 - val_loss: 2.3027 - val_accuracy: 0.1000
Epoch 8/10
24/24 [==============================] - 15s 623ms/step - loss: 2.3055 - accuracy: 0.0907 - val_loss: 2.3027 - val_accuracy: 0.1000
Epoch 9/10
24/24 [==============================] - 15s 631ms/step - loss: 2.3037 - accuracy: 0.0947 - val_loss: 2.3026 - val_accuracy: 0.1000
Epoch 10/10
24/24 [==============================] - 15s 621ms/step - loss: 2.3044 - accuracy: 0.0907 - val_loss: 2.3026 - val_accuracy: 0.1000
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='mrdbourke' date='2020-08-20T06:32:00Z'>
		Tweaking the Learning Rate or Changing the optimizer might help you...I think this is caused due to the mismatch dataset with the optimizer....
		</comment>
		<comment id='2' author='mrdbourke' date='2020-08-21T03:11:54Z'>
		
Tweaking the Learning Rate or Changing the optimizer might help you...I think this is caused due to the mismatch dataset with the optimizer....

I've tried several different optimizers/learning rates but for some reason each model never moves off guessing level performance, e.g. 10% accuracy with 10 classes
		</comment>
		<comment id='3' author='mrdbourke' date='2020-08-21T07:19:06Z'>
		I am able to replicate the issue reported, please find the &lt;denchmark-link:https://colab.research.google.com/gist/Saduf2019/38619eec760a7d0ceedebf8da8410c3b/untitled383.ipynb&gt;gist here&lt;/denchmark-link&gt;
. Thanks!
		</comment>
		<comment id='4' author='mrdbourke' date='2020-08-25T11:47:41Z'>
		I'm also experiencing this exact same issue, was about to open a ticket myself... :-)
		</comment>
		<comment id='5' author='mrdbourke' date='2020-08-27T07:25:16Z'>
		FYI, on my side it was an input scaling issue - and looking at your gist this may be your case too!  EfficientNet is "weird" in that it simply wants untouched 0-255 inputs, while you've scaled them 0-1.
		</comment>
		<comment id='6' author='mrdbourke' date='2020-08-27T10:46:33Z'>
		
FYI, on my side it was an input scaling issue - and looking at your gist this may be your case too! EfficientNet is "weird" in that it simply wants untouched 0-255 inputs, while you've scaled them 0-1.

You're completely right. It turns out EfficientNet has normalization built-in.
Thank you for this.
Also found this information buried in this guide: &lt;denchmark-link:https://keras.io/examples/vision/image_classification_efficientnet_fine_tuning/&gt;https://keras.io/examples/vision/image_classification_efficientnet_fine_tuning/&lt;/denchmark-link&gt;

&lt;denchmark-code&gt;from tensorflow.keras.applications import EfficientNetB0
model = EfficientNetB0(weights='imagenet')
&lt;/denchmark-code&gt;

"This model takes input images of shape (224, 224, 3), and the input data should range [0, 255]. Normalization is included as part of the model."
		</comment>
		<comment id='7' author='mrdbourke' date='2020-08-28T00:24:53Z'>
		Hmm... seems the inputs for EfficientNet are different depending on whether you're using TensorFlow Hub or tensorflow.keras.applications.
TensorFlow Hub version of EfficientNet takes inputs in range [0, 1] : &lt;denchmark-link:https://tfhub.dev/tensorflow/efficientnet/b0/classification/1&gt;https://tfhub.dev/tensorflow/efficientnet/b0/classification/1&lt;/denchmark-link&gt;


For this model, the size of the input image is flexible, but it would be best to match the model training input, which is height x width = 224 x 224 pixels for this model. The input images are expected to have color values in the range [0,1], following the common image input conventions.

 version of EfficientNet takes inputs in range [0, 255]: &lt;denchmark-link:https://keras.io/examples/vision/image_classification_efficientnet_fine_tuning/&gt;https://keras.io/examples/vision/image_classification_efficientnet_fine_tuning/&lt;/denchmark-link&gt;


This model takes input images of shape (224, 224, 3), and the input data should range [0, 255]. Normalization is included as part of the model.

My assumption is that they'd be the same?
		</comment>
		<comment id='8' author='mrdbourke' date='2020-09-14T22:25:31Z'>
		&lt;denchmark-link:https://github.com/mrdbourke&gt;@mrdbourke&lt;/denchmark-link&gt;
 Yes you are right. The inputs are different for hub module and keras applications module and thats the cause of the behavior that you are observing.
		</comment>
		<comment id='9' author='mrdbourke' date='2020-09-17T21:35:02Z'>
		&lt;denchmark-link:https://github.com/gowthamkpr&gt;@gowthamkpr&lt;/denchmark-link&gt;
 do you know why the inputs are different for each model?
		</comment>
		<comment id='10' author='mrdbourke' date='2020-10-05T14:15:05Z'>
		Normalization was moved into the model code keeping in mind the Serving use-case.
So for desired behaviors
If you import model from tf.keras.applications : DO NOT Normalize the inputs
		</comment>
		<comment id='11' author='mrdbourke' date='2020-12-12T11:50:19Z'>
		&lt;denchmark-link:https://github.com/mrdbourke&gt;@mrdbourke&lt;/denchmark-link&gt;
,
Yes, there are differences between  and the  in . In addition to above comments, please refer this &lt;denchmark-link:https://stackoverflow.com/a/60284154/11530462&gt;Stack Overflow&lt;/denchmark-link&gt;
 issue, Answered by Tensorflow Hub Engineer, Arno. Thanks!
		</comment>
		<comment id='12' author='mrdbourke' date='2020-12-19T12:03:59Z'>
		This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you.
		</comment>
		<comment id='13' author='mrdbourke' date='2020-12-24T12:05:07Z'>
		Automatically closing due to lack of recent activity. Please update the issue when new information becomes available, and we will reopen the issue. Thanks!
		</comment>
		<comment id='14' author='mrdbourke' date='2020-12-24T12:05:09Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/42506&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/42506&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>