<bug id='321' author='miguelgfierro' open_date='2019-09-12T10:53:20Z' closed_time='2019-09-23T10:35:32Z'>
	<summary>[BUG] unit-test-linux-gpu failing</summary>
	<description>
&lt;denchmark-h:h3&gt;Description&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;tests/unit/classification/test_classification_model.py ...F..            [ 24%]
tests/unit/classification/test_classification_notebooks.py F......       [ 33%]

=================================== FAILURES ===================================
____________________________ test_model_to_learner _____________________________

self = &lt;urllib.request.HTTPSHandler object at 0x7f1d7c7e0da0&gt;
http_class = &lt;class 'http.client.HTTPSConnection'&gt;
req = &lt;urllib.request.Request object at 0x7f1d7c7e3438&gt;
http_conn_args = {'check_hostname': None, 'context': None}
host = 'cvbp.blob.core.windows.net'
h = &lt;http.client.HTTPSConnection object at 0x7f1d7c7e0cc0&gt;

    def do_open(self, http_class, req, **http_conn_args):
        """Return an HTTPResponse object for the request, using http_class.
    
        http_class must implement the HTTPConnection API from http.client.
        """
        host = req.host
        if not host:
            raise URLError('no host given')
    
        # will parse host:port
        h = http_class(host, timeout=req.timeout, **http_conn_args)
        h.set_debuglevel(self._debuglevel)
    
        headers = dict(req.unredirected_hdrs)
        headers.update(dict((k, v) for k, v in req.headers.items()
                            if k not in headers))
    
        # TODO(jhylton): Should this be redesigned to handle
        # persistent connections?
    
        # We want to make an HTTP/1.1 request, but the addinfourl
        # class isn't prepared to deal with a persistent connection.
        # It will try to read all remaining data from the socket,
        # which will block while the server waits for the next request.
        # So make sure the connection gets closed after the (only)
        # request.
        headers["Connection"] = "close"
        headers = dict((name.title(), val) for name, val in headers.items())
    
        if req._tunnel_host:
            tunnel_headers = {}
            proxy_auth_hdr = "Proxy-Authorization"
            if proxy_auth_hdr in headers:
                tunnel_headers[proxy_auth_hdr] = headers[proxy_auth_hdr]
                # Proxy-Authorization should not be sent to origin
                # server.
                del headers[proxy_auth_hdr]
            h.set_tunnel(req._tunnel_host, headers=tunnel_headers)
    
        try:
            try:
                h.request(req.get_method(), req.selector, req.data, headers,
&gt;                         encode_chunked=req.has_header('Transfer-encoding'))

/data/anaconda/envs/cv/lib/python3.6/urllib/request.py:1318: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;http.client.HTTPSConnection object at 0x7f1d7c7e0cc0&gt;, method = 'GET'
url = '/public/images/cvbp_cup.jpg', body = None
headers = {'Connection': 'close', 'Host': 'cvbp.blob.core.windows.net', 'User-Agent': 'Python-urllib/3.6'}

    def request(self, method, url, body=None, headers={}, *,
                encode_chunked=False):
        """Send a complete request to the server."""
&gt;       self._send_request(method, url, body, headers, encode_chunked)

/data/anaconda/envs/cv/lib/python3.6/http/client.py:1239: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;http.client.HTTPSConnection object at 0x7f1d7c7e0cc0&gt;, method = 'GET'
url = '/public/images/cvbp_cup.jpg', body = None
headers = {'Connection': 'close', 'Host': 'cvbp.blob.core.windows.net', 'User-Agent': 'Python-urllib/3.6'}
encode_chunked = False

    def _send_request(self, method, url, body, headers, encode_chunked):
        # Honor explicitly requested Host: and Accept-Encoding: headers.
        header_names = frozenset(k.lower() for k in headers)
        skips = {}
        if 'host' in header_names:
            skips['skip_host'] = 1
        if 'accept-encoding' in header_names:
            skips['skip_accept_encoding'] = 1
    
        self.putrequest(method, url, **skips)
    
        # chunked encoding will happen if HTTP/1.1 is used and either
        # the caller passes encode_chunked=True or the following
        # conditions hold:
        # 1. content-length has not been explicitly set
        # 2. the body is a file or iterable, but not a str or bytes-like
        # 3. Transfer-Encoding has NOT been explicitly set by the caller
    
        if 'content-length' not in header_names:
            # only chunk body if not explicitly set for backwards
            # compatibility, assuming the client code is already handling the
            # chunking
            if 'transfer-encoding' not in header_names:
                # if content-length cannot be automatically determined, fall
                # back to chunked encoding
                encode_chunked = False
                content_length = self._get_content_length(body, method)
                if content_length is None:
                    if body is not None:
                        if self.debuglevel &gt; 0:
                            print('Unable to determine size of %r' % body)
                        encode_chunked = True
                        self.putheader('Transfer-Encoding', 'chunked')
                else:
                    self.putheader('Content-Length', str(content_length))
        else:
            encode_chunked = False
    
        for hdr, value in headers.items():
            self.putheader(hdr, value)
        if isinstance(body, str):
            # RFC 2616 Section 3.7.1 says that text default has a
            # default charset of iso-8859-1.
            body = _encode(body, 'body')
&gt;       self.endheaders(body, encode_chunked=encode_chunked)

/data/anaconda/envs/cv/lib/python3.6/http/client.py:1285: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;http.client.HTTPSConnection object at 0x7f1d7c7e0cc0&gt;
message_body = None

    def endheaders(self, message_body=None, *, encode_chunked=False):
        """Indicate that the last header line has been sent to the server.
    
        This method sends the request to the server.  The optional message_body
        argument can be used to pass a message body associated with the
        request.
        """
        if self.__state == _CS_REQ_STARTED:
            self.__state = _CS_REQ_SENT
        else:
            raise CannotSendHeader()
&gt;       self._send_output(message_body, encode_chunked=encode_chunked)

/data/anaconda/envs/cv/lib/python3.6/http/client.py:1234: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;http.client.HTTPSConnection object at 0x7f1d7c7e0cc0&gt;
message_body = None, encode_chunked = False

    def _send_output(self, message_body=None, encode_chunked=False):
        """Send the currently buffered request and clear the buffer.
    
        Appends an extra \\r\\n to the buffer.
        A message_body may be specified, to be appended to the request.
        """
        self._buffer.extend((b"", b""))
        msg = b"\r\n".join(self._buffer)
        del self._buffer[:]
&gt;       self.send(msg)

/data/anaconda/envs/cv/lib/python3.6/http/client.py:1026: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;http.client.HTTPSConnection object at 0x7f1d7c7e0cc0&gt;
data = b'GET /public/images/cvbp_cup.jpg HTTP/1.1\r\nAccept-Encoding: identity\r\nHost: cvbp.blob.core.windows.net\r\nUser-Agent: Python-urllib/3.6\r\nConnection: close\r\n\r\n'

    def send(self, data):
        """Send `data' to the server.
        ``data`` can be a string object, a bytes object, an array object, a
        file-like object that supports a .read() method, or an iterable object.
        """
    
        if self.sock is None:
            if self.auto_open:
&gt;               self.connect()

/data/anaconda/envs/cv/lib/python3.6/http/client.py:964: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;http.client.HTTPSConnection object at 0x7f1d7c7e0cc0&gt;

    def connect(self):
        "Connect to a host on a given (SSL) port."
    
        super().connect()
    
        if self._tunnel_host:
            server_hostname = self._tunnel_host
        else:
            server_hostname = self.host
    
        self.sock = self._context.wrap_socket(self.sock,
&gt;                                             server_hostname=server_hostname)

/data/anaconda/envs/cv/lib/python3.6/http/client.py:1400: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;ssl.SSLContext object at 0x7f1d9407cdc8&gt;
sock = &lt;socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6&gt;
server_side = False, do_handshake_on_connect = True, suppress_ragged_eofs = True
server_hostname = 'cvbp.blob.core.windows.net', session = None

    def wrap_socket(self, sock, server_side=False,
                    do_handshake_on_connect=True,
                    suppress_ragged_eofs=True,
                    server_hostname=None, session=None):
        return SSLSocket(sock=sock, server_side=server_side,
                         do_handshake_on_connect=do_handshake_on_connect,
                         suppress_ragged_eofs=suppress_ragged_eofs,
                         server_hostname=server_hostname,
&gt;                        _context=self, _session=session)

/data/anaconda/envs/cv/lib/python3.6/ssl.py:407: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6&gt;
sock = &lt;socket.socket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6&gt;
keyfile = None, certfile = None, server_side = False
cert_reqs = &lt;VerifyMode.CERT_NONE: 0&gt;
ssl_version = &lt;_SSLMethod.PROTOCOL_TLS: 2&gt;, ca_certs = None
do_handshake_on_connect = True, family = &lt;AddressFamily.AF_INET: 2&gt;
type = &lt;SocketKind.SOCK_STREAM: 1&gt;, proto = 0, fileno = None
suppress_ragged_eofs = True, npn_protocols = None, ciphers = None
server_hostname = 'cvbp.blob.core.windows.net'
_context = &lt;ssl.SSLContext object at 0x7f1d9407cdc8&gt;, _session = None

    def __init__(self, sock=None, keyfile=None, certfile=None,
                 server_side=False, cert_reqs=CERT_NONE,
                 ssl_version=PROTOCOL_TLS, ca_certs=None,
                 do_handshake_on_connect=True,
                 family=AF_INET, type=SOCK_STREAM, proto=0, fileno=None,
                 suppress_ragged_eofs=True, npn_protocols=None, ciphers=None,
                 server_hostname=None,
                 _context=None, _session=None):
    
        if _context:
            self._context = _context
        else:
            if server_side and not certfile:
                raise ValueError("certfile must be specified for server-side "
                                 "operations")
            if keyfile and not certfile:
                raise ValueError("certfile must be specified")
            if certfile and not keyfile:
                keyfile = certfile
            self._context = SSLContext(ssl_version)
            self._context.verify_mode = cert_reqs
            if ca_certs:
                self._context.load_verify_locations(ca_certs)
            if certfile:
                self._context.load_cert_chain(certfile, keyfile)
            if npn_protocols:
                self._context.set_npn_protocols(npn_protocols)
            if ciphers:
                self._context.set_ciphers(ciphers)
            self.keyfile = keyfile
            self.certfile = certfile
            self.cert_reqs = cert_reqs
            self.ssl_version = ssl_version
            self.ca_certs = ca_certs
            self.ciphers = ciphers
        # Can't use sock.type as other flags (such as SOCK_NONBLOCK) get
        # mixed in.
        if sock.getsockopt(SOL_SOCKET, SO_TYPE) != SOCK_STREAM:
            raise NotImplementedError("only stream sockets are supported")
        if server_side:
            if server_hostname:
                raise ValueError("server_hostname can only be specified "
                                 "in client mode")
            if _session is not None:
                raise ValueError("session can only be specified in "
                                 "client mode")
        if self._context.check_hostname and not server_hostname:
            raise ValueError("check_hostname requires server_hostname")
        self._session = _session
        self.server_side = server_side
        self.server_hostname = server_hostname
        self.do_handshake_on_connect = do_handshake_on_connect
        self.suppress_ragged_eofs = suppress_ragged_eofs
        if sock is not None:
            socket.__init__(self,
                            family=sock.family,
                            type=sock.type,
                            proto=sock.proto,
                            fileno=sock.fileno())
            self.settimeout(sock.gettimeout())
            sock.detach()
        elif fileno is not None:
            socket.__init__(self, fileno=fileno)
        else:
            socket.__init__(self, family=family, type=type, proto=proto)
    
        # See if we are connected
        try:
            self.getpeername()
        except OSError as e:
            if e.errno != errno.ENOTCONN:
                raise
            connected = False
        else:
            connected = True
    
        self._closed = False
        self._sslobj = None
        self._connected = connected
        if connected:
            # create the SSL object
            try:
                sslobj = self._context._wrap_socket(self, server_side,
                                                    server_hostname)
                self._sslobj = SSLObject(sslobj, owner=self,
                                         session=self._session)
                if do_handshake_on_connect:
                    timeout = self.gettimeout()
                    if timeout == 0.0:
                        # non-blocking
                        raise ValueError("do_handshake_on_connect should not be specified for non-blocking sockets")
&gt;                   self.do_handshake()

/data/anaconda/envs/cv/lib/python3.6/ssl.py:817: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;ssl.SSLSocket [closed] fd=-1, family=AddressFamily.AF_INET, type=SocketKind.SOCK_STREAM, proto=6&gt;
block = False

    def do_handshake(self, block=False):
        """Perform a TLS/SSL handshake."""
        self._check_connected()
        timeout = self.gettimeout()
        try:
            if timeout == 0.0 and block:
                self.settimeout(None)
&gt;           self._sslobj.do_handshake()

/data/anaconda/envs/cv/lib/python3.6/ssl.py:1077: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;ssl.SSLObject object at 0x7f1d7c7e0b00&gt;

    def do_handshake(self):
        """Start the SSL/TLS handshake."""
&gt;       self._sslobj.do_handshake()
E       ssl.SSLError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed (_ssl.c:852)

/data/anaconda/envs/cv/lib/python3.6/ssl.py:689: SSLError

During handling of the above exception, another exception occurred:

tmp = '/tmp/pytest-of-cvbpuser/pytest-700/tmpvmsbchvs'

    def test_model_to_learner(tmp):
        model = models.resnet18
    
        # Test if the function loads an ImageNet model (ResNet) trainer
        learn = model_to_learner(model(pretrained=True))
        assert len(learn.data.classes) == 1000  # Check Image net classes
        assert isinstance(learn.model, models.ResNet)
    
        # Test if model can predict very simple image
        IM_URL = "https://cvbp.blob.core.windows.net/public/images/cvbp_cup.jpg"
        imagefile = os.path.join(tmp, "cvbp_cup.jpg")
&gt;       urllib.request.urlretrieve(IM_URL, imagefile)

tests/unit/classification/test_classification_model.py:82: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/data/anaconda/envs/cv/lib/python3.6/urllib/request.py:248: in urlretrieve
    with contextlib.closing(urlopen(url, data)) as fp:
/data/anaconda/envs/cv/lib/python3.6/urllib/request.py:223: in urlopen
    return opener.open(url, data, timeout)
/data/anaconda/envs/cv/lib/python3.6/urllib/request.py:526: in open
    response = self._open(req, data)
/data/anaconda/envs/cv/lib/python3.6/urllib/request.py:544: in _open
    '_open', req)
/data/anaconda/envs/cv/lib/python3.6/urllib/request.py:504: in _call_chain
    result = func(*args)
/data/anaconda/envs/cv/lib/python3.6/urllib/request.py:1361: in https_open
    context=self._context, check_hostname=self._check_hostname)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;urllib.request.HTTPSHandler object at 0x7f1d7c7e0da0&gt;
http_class = &lt;class 'http.client.HTTPSConnection'&gt;
req = &lt;urllib.request.Request object at 0x7f1d7c7e3438&gt;
http_conn_args = {'check_hostname': None, 'context': None}
host = 'cvbp.blob.core.windows.net'
h = &lt;http.client.HTTPSConnection object at 0x7f1d7c7e0cc0&gt;

    def do_open(self, http_class, req, **http_conn_args):
        """Return an HTTPResponse object for the request, using http_class.
    
        http_class must implement the HTTPConnection API from http.client.
        """
        host = req.host
        if not host:
            raise URLError('no host given')
    
        # will parse host:port
        h = http_class(host, timeout=req.timeout, **http_conn_args)
        h.set_debuglevel(self._debuglevel)
    
        headers = dict(req.unredirected_hdrs)
        headers.update(dict((k, v) for k, v in req.headers.items()
                            if k not in headers))
    
        # TODO(jhylton): Should this be redesigned to handle
        # persistent connections?
    
        # We want to make an HTTP/1.1 request, but the addinfourl
        # class isn't prepared to deal with a persistent connection.
        # It will try to read all remaining data from the socket,
        # which will block while the server waits for the next request.
        # So make sure the connection gets closed after the (only)
        # request.
        headers["Connection"] = "close"
        headers = dict((name.title(), val) for name, val in headers.items())
    
        if req._tunnel_host:
            tunnel_headers = {}
            proxy_auth_hdr = "Proxy-Authorization"
            if proxy_auth_hdr in headers:
                tunnel_headers[proxy_auth_hdr] = headers[proxy_auth_hdr]
                # Proxy-Authorization should not be sent to origin
                # server.
                del headers[proxy_auth_hdr]
            h.set_tunnel(req._tunnel_host, headers=tunnel_headers)
    
        try:
            try:
                h.request(req.get_method(), req.selector, req.data, headers,
                          encode_chunked=req.has_header('Transfer-encoding'))
            except OSError as err: # timeout error
&gt;               raise URLError(err)
E               urllib.error.URLError: &lt;urlopen error [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed (_ssl.c:852)&gt;

/data/anaconda/envs/cv/lib/python3.6/urllib/request.py:1320: URLError
_____________________________ test_00_notebook_run _____________________________

classification_notebooks = {'00_webcam': '/data/home/cvbpuser/myagent/_work/1/s/classification/notebooks/00_webcam.ipynb', '01_training_introduct...y_vs_speed': '/data/home/cvbpuser/myagent/_work/1/s/classification/notebooks/03_training_accuracy_vs_speed.ipynb', ...}

    @pytest.mark.notebooks
    def test_00_notebook_run(classification_notebooks):
        notebook_path = classification_notebooks["00_webcam"]
        pm.execute_notebook(
            notebook_path,
            OUTPUT_NOTEBOOK,
            parameters=dict(PM_VERSION=pm.__version__),
&gt;           kernel_name=KERNEL_NAME,
        )

tests/unit/classification/test_classification_notebooks.py:26: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/data/anaconda/envs/cv/lib/python3.6/site-packages/papermill/execute.py:104: in execute_notebook
    raise_for_execution_errors(nb, output_path)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

nb = {'cells': [{'cell_type': 'code', 'metadata': {'inputHidden': True, 'hide_input': True}, 'execution_count': None, 'sour...end_time': '2019-09-12T10:10:03.347530', 'duration': 3.669196, 'exception': True}}, 'nbformat': 4, 'nbformat_minor': 2}
output_path = 'output.ipynb'

    def raise_for_execution_errors(nb, output_path):
        """Assigned parameters into the appropriate place in the input notebook
    
        Parameters
        ----------
        nb : NotebookNode
           Executable notebook object
        output_path : str
           Path to write executed notebook
        """
        error = None
        for cell in nb.cells:
            if cell.get("outputs") is None:
                continue
    
            for output in cell.outputs:
                if output.output_type == "error":
                    error = PapermillExecutionError(
                        exec_count=cell.execution_count,
                        source=cell.source,
                        ename=output.ename,
                        evalue=output.evalue,
                        traceback=output.traceback,
                    )
                    break
    
        if error:
            # Write notebook back out with the Error Message at the top of the Notebook.
            error_msg = ERROR_MESSAGE_TEMPLATE % str(error.exec_count)
            error_msg_cell = nbformat.v4.new_code_cell(
                source="%%html\n" + error_msg,
                outputs=[
                    nbformat.v4.new_output(output_type="display_data", data={"text/html": error_msg})
                ],
                metadata={"inputHidden": True, "hide_input": True},
            )
            nb.cells = [error_msg_cell] + nb.cells
            write_ipynb(nb, output_path)
&gt;           raise error
E           papermill.exceptions.PapermillExecutionError: 
E           ---------------------------------------------------------------------------
E           Exception encountered at "In [6]":
E           ---------------------------------------------------------------------------
E           SSLError                                  Traceback (most recent call last)
E           /data/anaconda/envs/cv/lib/python3.6/urllib/request.py in do_open(self, http_class, req, **http_conn_args)
E              1317                 h.request(req.get_method(), req.selector, req.data, headers,
E           -&gt; 1318                           encode_chunked=req.has_header('Transfer-encoding'))
E              1319             except OSError as err: # timeout error
E           
E           /data/anaconda/envs/cv/lib/python3.6/http/client.py in request(self, method, url, body, headers, encode_chunked)
E              1238         """Send a complete request to the server."""
E           -&gt; 1239         self._send_request(method, url, body, headers, encode_chunked)
E              1240 
E           
E           /data/anaconda/envs/cv/lib/python3.6/http/client.py in _send_request(self, method, url, body, headers, encode_chunked)
E              1284             body = _encode(body, 'body')
E           -&gt; 1285         self.endheaders(body, encode_chunked=encode_chunked)
E              1286 
E           
E           /data/anaconda/envs/cv/lib/python3.6/http/client.py in endheaders(self, message_body, encode_chunked)
E              1233             raise CannotSendHeader()
E           -&gt; 1234         self._send_output(message_body, encode_chunked=encode_chunked)
E              1235 
E           
E           /data/anaconda/envs/cv/lib/python3.6/http/client.py in _send_output(self, message_body, encode_chunked)
E              1025         del self._buffer[:]
E           -&gt; 1026         self.send(msg)
E              1027 
E           
E           /data/anaconda/envs/cv/lib/python3.6/http/client.py in send(self, data)
E               963             if self.auto_open:
E           --&gt; 964                 self.connect()
E               965             else:
E           
E           /data/anaconda/envs/cv/lib/python3.6/http/client.py in connect(self)
E              1399             self.sock = self._context.wrap_socket(self.sock,
E           -&gt; 1400                                                   server_hostname=server_hostname)
E              1401             if not self._context.check_hostname and self._check_hostname:
E           
E           /data/anaconda/envs/cv/lib/python3.6/ssl.py in wrap_socket(self, sock, server_side, do_handshake_on_connect, suppress_ragged_eofs, server_hostname, session)
E               406                          server_hostname=server_hostname,
E           --&gt; 407                          _context=self, _session=session)
E               408 
E           
E           /data/anaconda/envs/cv/lib/python3.6/ssl.py in __init__(self, sock, keyfile, certfile, server_side, cert_reqs, ssl_version, ca_certs, do_handshake_on_connect, family, type, proto, fileno, suppress_ragged_eofs, npn_protocols, ciphers, server_hostname, _context, _session)
E               816                         raise ValueError("do_handshake_on_connect should not be specified for non-blocking sockets")
E           --&gt; 817                     self.do_handshake()
E               818 
E           
E           /data/anaconda/envs/cv/lib/python3.6/ssl.py in do_handshake(self, block)
E              1076                 self.settimeout(None)
E           -&gt; 1077             self._sslobj.do_handshake()
E              1078         finally:
E           
E           /data/anaconda/envs/cv/lib/python3.6/ssl.py in do_handshake(self)
E               688         """Start the SSL/TLS handshake."""
E           --&gt; 689         self._sslobj.do_handshake()
E               690         if self.context.check_hostname:
E           
E           SSLError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed (_ssl.c:852)
E           
E           During handling of the above exception, another exception occurred:
E           
E           URLError                                  Traceback (most recent call last)
E           &lt;ipython-input-6-6c27fd8918b6&gt; in &lt;module&gt;
E                 1 # Download an example image
E                 2 IM_URL = "https://cvbp.blob.core.windows.net/public/images/cvbp_cup.jpg"
E           ----&gt; 3 urllib.request.urlretrieve(IM_URL, os.path.join(data_path(), "example.jpg"))
E                 4 
E                 5 im = open_image(os.path.join(data_path(), "example.jpg"), convert_mode='RGB')
E           
E           /data/anaconda/envs/cv/lib/python3.6/urllib/request.py in urlretrieve(url, filename, reporthook, data)
E               246     url_type, path = splittype(url)
E               247 
E           --&gt; 248     with contextlib.closing(urlopen(url, data)) as fp:
E               249         headers = fp.info()
E               250 
E           
E           /data/anaconda/envs/cv/lib/python3.6/urllib/request.py in urlopen(url, data, timeout, cafile, capath, cadefault, context)
E               221     else:
E               222         opener = _opener
E           --&gt; 223     return opener.open(url, data, timeout)
E               224 
E               225 def install_opener(opener):
E           
E           /data/anaconda/envs/cv/lib/python3.6/urllib/request.py in open(self, fullurl, data, timeout)
E               524             req = meth(req)
E               525 
E           --&gt; 526         response = self._open(req, data)
E               527 
E               528         # post-process response
E           
E           /data/anaconda/envs/cv/lib/python3.6/urllib/request.py in _open(self, req, data)
E               542         protocol = req.type
E               543         result = self._call_chain(self.handle_open, protocol, protocol +
E           --&gt; 544                                   '_open', req)
E               545         if result:
E               546             return result
E           
E           /data/anaconda/envs/cv/lib/python3.6/urllib/request.py in _call_chain(self, chain, kind, meth_name, *args)
E               502         for handler in handlers:
E               503             func = getattr(handler, meth_name)
E           --&gt; 504             result = func(*args)
E               505             if result is not None:
E               506                 return result
E           
E           /data/anaconda/envs/cv/lib/python3.6/urllib/request.py in https_open(self, req)
E              1359         def https_open(self, req):
E              1360             return self.do_open(http.client.HTTPSConnection, req,
E           -&gt; 1361                 context=self._context, check_hostname=self._check_hostname)
E              1362 
E              1363         https_request = AbstractHTTPHandler.do_request_
E           
E           /data/anaconda/envs/cv/lib/python3.6/urllib/request.py in do_open(self, http_class, req, **http_conn_args)
E              1318                           encode_chunked=req.has_header('Transfer-encoding'))
E              1319             except OSError as err: # timeout error
E           -&gt; 1320                 raise URLError(err)
E              1321             r = h.getresponse()
E              1322         except:
E           
E           URLError: &lt;urlopen error [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed (_ssl.c:852)&gt;

/data/anaconda/envs/cv/lib/python3.6/site-packages/papermill/execute.py:188: PapermillExecutionError
&lt;/denchmark-code&gt;

&lt;denchmark-h:h3&gt;In which platform does it happen?&lt;/denchmark-h&gt;

&lt;denchmark-h:h3&gt;How do we replicate the issue?&lt;/denchmark-h&gt;

&lt;denchmark-h:h3&gt;Expected behavior (i.e. solution)&lt;/denchmark-h&gt;

&lt;denchmark-h:h3&gt;Other Comments&lt;/denchmark-h&gt;

	</description>
	<comments>
		<comment id='1' author='miguelgfierro' date='2019-09-13T14:44:28Z'>
		recreated the test machines in windows and linux in a devops subscription
		</comment>
		<comment id='2' author='miguelgfierro' date='2019-09-23T10:35:32Z'>
		fixed with new pipeline and test machines
		</comment>
	</comments>
</bug>