<bug id='320' author='miguelgfierro' open_date='2019-09-12T10:50:43Z' closed_time='2019-09-23T10:35:37Z'>
	<summary>[BUG] pipeline azureml-notebook-test-linux-cpu failing</summary>
	<description>
&lt;denchmark-h:h3&gt;Description&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;.FFF.                                                                    [100%]
=================================== FAILURES ===================================
_____________________________ test_21_notebook_run _____________________________

classification_notebooks = {'00_webcam': '/home/vsts/work/1/s/classification/notebooks/00_webcam.ipynb', '01_training_introduction': '/home/vsts/...3_training_accuracy_vs_speed': '/home/vsts/work/1/s/classification/notebooks/03_training_accuracy_vs_speed.ipynb', ...}
subscription_id = '***'
resource_group = 'amlnotebookrg', workspace_name = 'amlnotebookws'
workspace_region = '***2'

    @pytest.mark.azuremlnotebooks
    def test_21_notebook_run(
        classification_notebooks,
        subscription_id,
        resource_group,
        workspace_name,
        workspace_region,
    ):
        notebook_path = classification_notebooks[
            "21_deployment_on_azure_container_instances"
        ]
        pm.execute_notebook(
            notebook_path,
            OUTPUT_NOTEBOOK,
            parameters=dict(
                PM_VERSION=pm.__version__,
                subscription_id=subscription_id,
                resource_group=resource_group,
                workspace_name=workspace_name,
                workspace_region=workspace_region,
            ),
&gt;           kernel_name=KERNEL_NAME,
        )

tests/smoke/test_azureml_notebooks.py:58: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/share/miniconda/envs/cv/lib/python3.6/site-packages/papermill/execute.py:104: in execute_notebook
    raise_for_execution_errors(nb, output_path)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

nb = {'cells': [{'cell_type': 'code', 'metadata': {'inputHidden': True, 'hide_input': True}, 'execution_count': None, 'sour...end_time': '2019-09-12T10:19:40.699401', 'duration': 5.033488, 'exception': True}}, 'nbformat': 4, 'nbformat_minor': 2}
output_path = 'output.ipynb'

    def raise_for_execution_errors(nb, output_path):
        """Assigned parameters into the appropriate place in the input notebook
    
        Parameters
        ----------
        nb : NotebookNode
           Executable notebook object
        output_path : str
           Path to write executed notebook
        """
        error = None
        for cell in nb.cells:
            if cell.get("outputs") is None:
                continue
    
            for output in cell.outputs:
                if output.output_type == "error":
                    error = PapermillExecutionError(
                        exec_count=cell.execution_count,
                        source=cell.source,
                        ename=output.ename,
                        evalue=output.evalue,
                        traceback=output.traceback,
                    )
                    break
    
        if error:
            # Write notebook back out with the Error Message at the top of the Notebook.
            error_msg = ERROR_MESSAGE_TEMPLATE % str(error.exec_count)
            error_msg_cell = nbformat.v4.new_code_cell(
                source="%%html\n" + error_msg,
                outputs=[
                    nbformat.v4.new_output(output_type="display_data", data={"text/html": error_msg})
                ],
                metadata={"inputHidden": True, "hide_input": True},
            )
            nb.cells = [error_msg_cell] + nb.cells
            write_ipynb(nb, output_path)
&gt;           raise error
E           papermill.exceptions.PapermillExecutionError: 
E           ---------------------------------------------------------------------------
E           Exception encountered at "In [2]":
E           ---------------------------------------------------------------------------
E           SSLError                                  Traceback (most recent call last)
E           /usr/share/miniconda/envs/cv/lib/python3.6/urllib/request.py in do_open(self, http_class, req, **http_conn_args)
E              1317                 h.request(req.get_method(), req.selector, req.data, headers,
E           -&gt; 1318                           encode_chunked=req.has_header('Transfer-encoding'))
E              1319             except OSError as err: # timeout error
E           
E           /usr/share/miniconda/envs/cv/lib/python3.6/http/client.py in request(self, method, url, body, headers, encode_chunked)
E              1238         """Send a complete request to the server."""
E           -&gt; 1239         self._send_request(method, url, body, headers, encode_chunked)
E              1240 
E           
E           /usr/share/miniconda/envs/cv/lib/python3.6/http/client.py in _send_request(self, method, url, body, headers, encode_chunked)
E              1284             body = _encode(body, 'body')
E           -&gt; 1285         self.endheaders(body, encode_chunked=encode_chunked)
E              1286 
E           
E           /usr/share/miniconda/envs/cv/lib/python3.6/http/client.py in endheaders(self, message_body, encode_chunked)
E              1233             raise CannotSendHeader()
E           -&gt; 1234         self._send_output(message_body, encode_chunked=encode_chunked)
E              1235 
E           
E           /usr/share/miniconda/envs/cv/lib/python3.6/http/client.py in _send_output(self, message_body, encode_chunked)
E              1025         del self._buffer[:]
E           -&gt; 1026         self.send(msg)
E              1027 
E           
E           /usr/share/miniconda/envs/cv/lib/python3.6/http/client.py in send(self, data)
E               963             if self.auto_open:
E           --&gt; 964                 self.connect()
E               965             else:
E           
E           /usr/share/miniconda/envs/cv/lib/python3.6/http/client.py in connect(self)
E              1399             self.sock = self._context.wrap_socket(self.sock,
E           -&gt; 1400                                                   server_hostname=server_hostname)
E              1401             if not self._context.check_hostname and self._check_hostname:
E           
E           /usr/share/miniconda/envs/cv/lib/python3.6/ssl.py in wrap_socket(self, sock, server_side, do_handshake_on_connect, suppress_ragged_eofs, server_hostname, session)
E               406                          server_hostname=server_hostname,
E           --&gt; 407                          _context=self, _session=session)
E               408 
E           
E           /usr/share/miniconda/envs/cv/lib/python3.6/ssl.py in __init__(self, sock, keyfile, certfile, server_side, cert_reqs, ssl_version, ca_certs, do_handshake_on_connect, family, type, proto, fileno, suppress_ragged_eofs, npn_protocols, ciphers, server_hostname, _context, _session)
E               816                         raise ValueError("do_handshake_on_connect should not be specified for non-blocking sockets")
E           --&gt; 817                     self.do_handshake()
E               818 
E           
E           /usr/share/miniconda/envs/cv/lib/python3.6/ssl.py in do_handshake(self, block)
E              1076                 self.settimeout(None)
E           -&gt; 1077             self._sslobj.do_handshake()
E              1078         finally:
E           
E           /usr/share/miniconda/envs/cv/lib/python3.6/ssl.py in do_handshake(self)
E               688         """Start the SSL/TLS handshake."""
E           --&gt; 689         self._sslobj.do_handshake()
E               690         if self.context.check_hostname:
E           
E           SSLError: [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed (_ssl.c:852)
E           
E           During handling of the above exception, another exception occurred:
E           
E           URLError                                  Traceback (most recent call last)
E           &lt;ipython-input-2-2e2a8adec5e2&gt; in &lt;module&gt;
E           ----&gt; 1 learn = model_to_learner(models.resnet18(pretrained=True), IMAGENET_IM_SIZE)
E           
E           /usr/share/miniconda/envs/cv/lib/python3.6/site-packages/torchvision/models/resnet.py in resnet18(pretrained, progress, **kwargs)
E               229     """
E               230     return _resnet('resnet18', BasicBlock, [2, 2, 2, 2], pretrained, progress,
E           --&gt; 231                    **kwargs)
E               232 
E               233 
E           
E           /usr/share/miniconda/envs/cv/lib/python3.6/site-packages/torchvision/models/resnet.py in _resnet(arch, block, layers, pretrained, progress, **kwargs)
E               215     if pretrained:
E               216         state_dict = load_state_dict_from_url(model_urls[arch],
E           --&gt; 217                                               progress=progress)
E               218         model.load_state_dict(state_dict)
E               219     return model
E           
E           /usr/share/miniconda/envs/cv/lib/python3.6/site-packages/torch/hub.py in load_state_dict_from_url(url, model_dir, map_location, progress)
E               460         sys.stderr.write('Downloading: "{}" to {}\n'.format(url, cached_file))
E               461         hash_prefix = HASH_REGEX.search(filename).group(1)
E           --&gt; 462         _download_url_to_file(url, cached_file, hash_prefix, progress=progress)
E               463     return torch.load(cached_file, map_location=map_location)
E           
E           /usr/share/miniconda/envs/cv/lib/python3.6/site-packages/torch/hub.py in _download_url_to_file(url, dst, hash_prefix, progress)
E               370 def _download_url_to_file(url, dst, hash_prefix, progress):
E               371     file_size = None
E           --&gt; 372     u = urlopen(url)
E               373     meta = u.info()
E               374     if hasattr(meta, 'getheaders'):
E           
E           /usr/share/miniconda/envs/cv/lib/python3.6/urllib/request.py in urlopen(url, data, timeout, cafile, capath, cadefault, context)
E               221     else:
E               222         opener = _opener
E           --&gt; 223     return opener.open(url, data, timeout)
E               224 
E               225 def install_opener(opener):
E           
E           /usr/share/miniconda/envs/cv/lib/python3.6/urllib/request.py in open(self, fullurl, data, timeout)
E               524             req = meth(req)
E               525 
E           --&gt; 526         response = self._open(req, data)
E               527 
E               528         # post-process response
E           
E           /usr/share/miniconda/envs/cv/lib/python3.6/urllib/request.py in _open(self, req, data)
E               542         protocol = req.type
E               543         result = self._call_chain(self.handle_open, protocol, protocol +
E           --&gt; 544                                   '_open', req)
E               545         if result:
E               546             return result
E           
E           /usr/share/miniconda/envs/cv/lib/python3.6/urllib/request.py in _call_chain(self, chain, kind, meth_name, *args)
E               502         for handler in handlers:
E               503             func = getattr(handler, meth_name)
E           --&gt; 504             result = func(*args)
E               505             if result is not None:
E               506                 return result
E           
E           /usr/share/miniconda/envs/cv/lib/python3.6/urllib/request.py in https_open(self, req)
E              1359         def https_open(self, req):
E              1360             return self.do_open(http.client.HTTPSConnection, req,
E           -&gt; 1361                 context=self._context, check_hostname=self._check_hostname)
E              1362 
E              1363         https_request = AbstractHTTPHandler.do_request_
E           
E           /usr/share/miniconda/envs/cv/lib/python3.6/urllib/request.py in do_open(self, http_class, req, **http_conn_args)
E              1318                           encode_chunked=req.has_header('Transfer-encoding'))
E              1319             except OSError as err: # timeout error
E           -&gt; 1320                 raise URLError(err)
E              1321             r = h.getresponse()
E              1322         except:
E           
E           URLError: &lt;urlopen error [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed (_ssl.c:852)&gt;

/usr/share/miniconda/envs/cv/lib/python3.6/site-packages/papermill/execute.py:188: PapermillExecutionError
----------------------------- Captured stderr call -----------------------------

Executing:   0%|          | 0/65 [00:00&lt;?, ?cell/s]
Executing:   2%|▏         | 1/65 [00:00&lt;00:56,  1.14cell/s]
Executing:   5%|▍         | 3/65 [00:01&lt;00:39,  1.58cell/s]
Executing:   8%|▊         | 5/65 [00:01&lt;00:27,  2.16cell/s]
Executing:   9%|▉         | 6/65 [00:03&lt;01:00,  1.03s/cell]
Executing:  12%|█▏        | 8/65 [00:04&lt;00:47,  1.19cell/s]
Executing:  12%|█▏        | 8/65 [00:05&lt;00:35,  1.59cell/s]
_____________________________ test_22_notebook_run _____________________________

classification_notebooks = {'00_webcam': '/home/vsts/work/1/s/classification/notebooks/00_webcam.ipynb', '01_training_introduction': '/home/vsts/...3_training_accuracy_vs_speed': '/home/vsts/work/1/s/classification/notebooks/03_training_accuracy_vs_speed.ipynb', ...}
subscription_id = '***'
resource_group = 'amlnotebookrg', workspace_name = 'amlnotebookws'
workspace_region = '***2'

    @pytest.mark.azuremlnotebooks
    def test_22_notebook_run(
        classification_notebooks,
        subscription_id,
        resource_group,
        workspace_name,
        workspace_region,
    ):
        notebook_path = classification_notebooks[
            "22_deployment_on_azure_kubernetes_service"
        ]
        pm.execute_notebook(
            notebook_path,
            OUTPUT_NOTEBOOK,
            parameters=dict(
                PM_VERSION=pm.__version__,
                subscription_id=subscription_id,
                resource_group=resource_group,
                workspace_name=workspace_name,
                workspace_region=workspace_region,
            ),
&gt;           kernel_name=KERNEL_NAME,
        )

tests/smoke/test_azureml_notebooks.py:83: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/share/miniconda/envs/cv/lib/python3.6/site-packages/papermill/execute.py:104: in execute_notebook
    raise_for_execution_errors(nb, output_path)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

nb = {'cells': [{'cell_type': 'code', 'metadata': {'inputHidden': True, 'hide_input': True}, 'execution_count': None, 'sour...end_time': '2019-09-12T10:19:46.959285', 'duration': 5.817276, 'exception': True}}, 'nbformat': 4, 'nbformat_minor': 2}
output_path = 'output.ipynb'

    def raise_for_execution_errors(nb, output_path):
        """Assigned parameters into the appropriate place in the input notebook
    
        Parameters
        ----------
        nb : NotebookNode
           Executable notebook object
        output_path : str
           Path to write executed notebook
        """
        error = None
        for cell in nb.cells:
            if cell.get("outputs") is None:
                continue
    
            for output in cell.outputs:
                if output.output_type == "error":
                    error = PapermillExecutionError(
                        exec_count=cell.execution_count,
                        source=cell.source,
                        ename=output.ename,
                        evalue=output.evalue,
                        traceback=output.traceback,
                    )
                    break
    
        if error:
            # Write notebook back out with the Error Message at the top of the Notebook.
            error_msg = ERROR_MESSAGE_TEMPLATE % str(error.exec_count)
            error_msg_cell = nbformat.v4.new_code_cell(
                source="%%html\n" + error_msg,
                outputs=[
                    nbformat.v4.new_output(output_type="display_data", data={"text/html": error_msg})
                ],
                metadata={"inputHidden": True, "hide_input": True},
            )
            nb.cells = [error_msg_cell] + nb.cells
            write_ipynb(nb, output_path)
&gt;           raise error
E           papermill.exceptions.PapermillExecutionError: 
E           ---------------------------------------------------------------------------
E           Exception encountered at "In [6]":
E           ---------------------------------------------------------------------------
E           KeyError                                  Traceback (most recent call last)
E           &lt;ipython-input-6-af5043783823&gt; in &lt;module&gt;
E           ----&gt; 1 docker_image = ws.images["image-classif-resnet18-f48"]
E           
E           KeyError: 'image-classif-resnet18-f48'

/usr/share/miniconda/envs/cv/lib/python3.6/site-packages/papermill/execute.py:188: PapermillExecutionError
----------------------------- Captured stderr call -----------------------------

Executing:   0%|          | 0/36 [00:00&lt;?, ?cell/s]
Executing:   3%|▎         | 1/36 [00:00&lt;00:30,  1.16cell/s]
Executing:  11%|█         | 4/36 [00:02&lt;00:24,  1.32cell/s]
Executing:  19%|█▉        | 7/36 [00:02&lt;00:15,  1.84cell/s]
Executing:  25%|██▌       | 9/36 [00:02&lt;00:10,  2.52cell/s]
Executing:  31%|███       | 11/36 [00:03&lt;00:10,  2.47cell/s]
Executing:  33%|███▎      | 12/36 [00:04&lt;00:16,  1.50cell/s]
Executing:  39%|███▉      | 14/36 [00:05&lt;00:12,  1.81cell/s]
Executing:  39%|███▉      | 14/36 [00:05&lt;00:09,  2.41cell/s]
_____________________________ test_23_notebook_run _____________________________

classification_notebooks = {'00_webcam': '/home/vsts/work/1/s/classification/notebooks/00_webcam.ipynb', '01_training_introduction': '/home/vsts/...3_training_accuracy_vs_speed': '/home/vsts/work/1/s/classification/notebooks/03_training_accuracy_vs_speed.ipynb', ...}
subscription_id = '***'
resource_group = 'amlnotebookrg', workspace_name = 'amlnotebookws'
workspace_region = '***2'

    @pytest.mark.azuremlnotebooks
    def test_23_notebook_run(
        classification_notebooks,
        subscription_id,
        resource_group,
        workspace_name,
        workspace_region,
    ):
        notebook_path = classification_notebooks["23_aci_aks_web_service_testing"]
        pm.execute_notebook(
            notebook_path,
            OUTPUT_NOTEBOOK,
            parameters=dict(
                PM_VERSION=pm.__version__,
                subscription_id=subscription_id,
                resource_group=resource_group,
                workspace_name=workspace_name,
                workspace_region=workspace_region,
            ),
&gt;           kernel_name=KERNEL_NAME,
        )

tests/smoke/test_azureml_notebooks.py:106: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/usr/share/miniconda/envs/cv/lib/python3.6/site-packages/papermill/execute.py:104: in execute_notebook
    raise_for_execution_errors(nb, output_path)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

nb = {'cells': [{'cell_type': 'code', 'metadata': {'inputHidden': True, 'hide_input': True}, 'execution_count': None, 'sour...end_time': '2019-09-12T10:19:53.061402', 'duration': 6.023939, 'exception': True}}, 'nbformat': 4, 'nbformat_minor': 2}
output_path = 'output.ipynb'

    def raise_for_execution_errors(nb, output_path):
        """Assigned parameters into the appropriate place in the input notebook
    
        Parameters
        ----------
        nb : NotebookNode
           Executable notebook object
        output_path : str
           Path to write executed notebook
        """
        error = None
        for cell in nb.cells:
            if cell.get("outputs") is None:
                continue
    
            for output in cell.outputs:
                if output.output_type == "error":
                    error = PapermillExecutionError(
                        exec_count=cell.execution_count,
                        source=cell.source,
                        ename=output.ename,
                        evalue=output.evalue,
                        traceback=output.traceback,
                    )
                    break
    
        if error:
            # Write notebook back out with the Error Message at the top of the Notebook.
            error_msg = ERROR_MESSAGE_TEMPLATE % str(error.exec_count)
            error_msg_cell = nbformat.v4.new_code_cell(
                source="%%html\n" + error_msg,
                outputs=[
                    nbformat.v4.new_output(output_type="display_data", data={"text/html": error_msg})
                ],
                metadata={"inputHidden": True, "hide_input": True},
            )
            nb.cells = [error_msg_cell] + nb.cells
            write_ipynb(nb, output_path)
&gt;           raise error
E           papermill.exceptions.PapermillExecutionError: 
E           ---------------------------------------------------------------------------
E           Exception encountered at "In [6]":
E           ---------------------------------------------------------------------------
E           KeyError                                  Traceback (most recent call last)
E           &lt;ipython-input-6-883397ed965d&gt; in &lt;module&gt;
E                 1 # Retrieve the web services
E           ----&gt; 2 aci_service = ws.webservices['im-classif-websvc']
E                 3 aks_service = ws.webservices['aks-cpu-image-classif-web-svc']
E           
E           KeyError: 'im-classif-websvc'
&lt;/denchmark-code&gt;

&lt;denchmark-h:h3&gt;In which platform does it happen?&lt;/denchmark-h&gt;

&lt;denchmark-h:h3&gt;How do we replicate the issue?&lt;/denchmark-h&gt;

&lt;denchmark-h:h3&gt;Expected behavior (i.e. solution)&lt;/denchmark-h&gt;

&lt;denchmark-h:h3&gt;Other Comments&lt;/denchmark-h&gt;

	</description>
	<comments>
		<comment id='1' author='miguelgfierro' date='2019-09-23T10:35:37Z'>
		fixed with new pipeline and test machines
		</comment>
	</comments>
</bug>