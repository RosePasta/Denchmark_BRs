<bug id='513' author='gautamchitnis' open_date='2020-02-23T12:58:35Z' closed_time='2020-02-25T19:00:49Z'>
	<summary>[BUG] Using CocoDetection for detection scenario doesn't work</summary>
	<description>
&lt;denchmark-h:h3&gt;Description&lt;/denchmark-h&gt;

DetectionLearner class does not accept CocoDetection object as an input, as it looks for train_dl attribute provided by DetectionDataset class. Also, there is no clarity around how we can provide labels to DetectionLearner.
&lt;denchmark-h:h3&gt;In which platform does it happen?&lt;/denchmark-h&gt;

Windows
&lt;denchmark-h:h3&gt;How do we replicate the issue?&lt;/denchmark-h&gt;

This code can be used to get the annotations loaded (unsure if this is the best/correct way):
&lt;denchmark-code&gt;import torchvision.datasets as ds
d = ds.CocoDetection('&lt;PATH_TO_ANNOTATIONS&gt;\\train_annotations.json')

print(len(d))
&lt;/denchmark-code&gt;

This code is what I'm using to load labels:
&lt;denchmark-code&gt;f=open("&lt;PATH_TO_LABELS&gt;\\labelmap.pbtext", "r")
labels = f.read()
&lt;/denchmark-code&gt;

This is what my DetectionLearner call looks like:
detector = DetectionLearner(d,labels=labels)
This operation generates error:
detector.fit(1, lr=0.05, print_freq=30)
The error is as follows:
&lt;denchmark-code&gt;---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
&lt;ipython-input-10-a6d78ddca21a&gt; in &lt;module&gt;
----&gt; 1 detector.fit(1, lr=0.05, print_freq=30)

E:\Anaconda\envs\cv\lib\site-packages\utils_cv\detection\model.py in fit(self, epochs, lr, momentum, weight_decay, print_freq, step_size, gamma, skip_evaluation)
    536                 self.model,
    537                 self.optimizer,
--&gt; 538                 self.dataset.train_dl,
    539                 self.device,
    540                 epoch,

AttributeError: 'CocoDetection' object has no attribute 'train_dl'
&lt;/denchmark-code&gt;

I have tried manually removing train_dl attribute from line 538 of model.py to make it as self.dataset but that throws following error:
&lt;denchmark-code&gt;---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
&lt;ipython-input-11-a6d78ddca21a&gt; in &lt;module&gt;
----&gt; 1 detector.fit(1, lr=0.05, print_freq=30)

E:\Anaconda\envs\cv\lib\site-packages\utils_cv\detection\model.py in fit(self, epochs, lr, momentum, weight_decay, print_freq, step_size, gamma, skip_evaluation)
    539                 self.device,
    540                 epoch,
--&gt; 541                 print_freq=print_freq,
    542             )
    543             self.losses.append(logger.meters["loss"].median)

E:\Anaconda\envs\cv\lib\site-packages\utils_cv\detection\references\engine.py in train_one_epoch(model, optimizer, data_loader, device, epoch, print_freq)
     31         data_loader, print_freq, header
     32     ):
---&gt; 33         images = list(image.to(device) for image in images)
     34         targets = [{k: v.to(device) for k, v in t.items()} for t in targets]
     35 

TypeError: 'Image' object is not iterable
&lt;/denchmark-code&gt;

And at this point I've hit a roadblock as to what to do next.
&lt;denchmark-h:h3&gt;Expected behavior (i.e. solution)&lt;/denchmark-h&gt;

Make necessary changes to accommodate CocoDetection dataset for object detection, or provide a guideline as to how one can do it on their own.
&lt;denchmark-h:h3&gt;Other Comments&lt;/denchmark-h&gt;

N/A
	</description>
	<comments>
		<comment id='1' author='gautamchitnis' date='2020-02-25T18:38:00Z'>
		Thanks for your comment! Unfortunately this feature suggestion is currently out-of-scope. Feel free to contribute how to make testing (and perhaps training) on COCO easy. Likely the best approach for this would be to provide a helper function which downloads COCO and creates a "DetectionDataset" object, which in turn can be used as input to the learner. See e.g.:
&lt;denchmark-link:https://github.com/microsoft/computervision-recipes/blob/master/scenarios/detection/01_training_introduction.ipynb&gt;https://github.com/microsoft/computervision-recipes/blob/master/scenarios/detection/01_training_introduction.ipynb&lt;/denchmark-link&gt;

		</comment>
		<comment id='2' author='gautamchitnis' date='2020-02-25T19:00:49Z'>
		
Thanks for your comment! Unfortunately this feature suggestion is currently out-of-scope. Feel free to contribute how to make testing (and perhaps training) on COCO easy. Likely the best approach for this would be to provide a helper function which downloads COCO and creates a "DetectionDataset" object, which in turn can be used as input to the learner. See e.g.:
https://github.com/microsoft/computervision-recipes/blob/master/scenarios/detection/01_training_introduction.ipynb

Cool. I'll take a look into it. Closing this issue on my end.
		</comment>
	</comments>
</bug>