<bug id='2615' author='barak' open_date='2020-09-10T10:37:53Z' closed_time='2020-10-09T15:57:22Z'>
	<summary>ARMA_64BIT_WORD mismatch while compiling mlpack</summary>
	<description>
&lt;denchmark-h:h4&gt;Issue description&lt;/denchmark-h&gt;

I'm getting a build error on a 32-bit architecture, see &lt;denchmark-link:https://buildd.debian.org/status/fetch.php?pkg=mlpack&amp;arch=mipsel&amp;ver=3.4.1-1&amp;stamp=1599729345&gt;https://buildd.debian.org/status/fetch.php?pkg=mlpack&amp;arch=mipsel&amp;ver=3.4.1-1&amp;stamp=1599729345&lt;/denchmark-link&gt;
 and &lt;denchmark-link:https://buildd.debian.org/status/package.php?p=mlpack&gt;https://buildd.debian.org/status/package.php?p=mlpack&lt;/denchmark-link&gt;
 for the most recent autobuild results on varoius architectures.
One possibly relevant bit:
&lt;denchmark-code&gt;[  1%] Building CXX precompiled header src/mlpack/cotire/mlpack_CXX_prefix.hxx.pch
cd /&lt;&lt;PKGBUILDDIR&gt;&gt;/src/mlpack &amp;&amp; /usr/bin/cmake -DCOTIRE_BUILD_TYPE:STRING=None -DCOTIRE_VERBOSE:BOOL=1 -P /&lt;&lt;PKGBUILDDIR&gt;&gt;/CMake/cotire.cmake precompile /&lt;&lt;PKGBUILDDIR&gt;&gt;/obj-mipsel-linux-gnu/src/mlpack/mlpack_CXX_cotire.cmake /&lt;&lt;PKGBUILDDIR&gt;&gt;/obj-mipsel-linux-gnu/src/mlpack/cotire/mlpack_CXX_prefix.hxx /&lt;&lt;PKGBUILDDIR&gt;&gt;/obj-mipsel-linux-gnu/src/mlpack/cotire/mlpack_CXX_prefix.hxx.pch /&lt;&lt;PKGBUILDDIR&gt;&gt;/src/mlpack/bindings/cli/print_help.cpp
-- execute_process: /usr/bin/clang++;-Dmlpack_EXPORTS;-DDEBUG;-DHAS_STB;-DBOOST_TEST_DYN_LINK;-D_FORTIFY_SOURCE=2;-g;-O2;-fdebug-prefix-map=/&lt;&lt;PKGBUILDDIR&gt;&gt;=.;-fstack-protector-strong;-Wformat;-Werror=format-security;-Wdate-time;-Wall;-Wextra;-ftemplate-depth=1000;-Wno-unused-function;-pthread;-g;-O0;-ftemplate-backtrace-limit=0;-Wno-unknown-pragmas;-std=gnu++11;-fPIC;-I/&lt;&lt;PKGBUILDDIR&gt;&gt;/src;-I/usr/include/stb;-I/&lt;&lt;PKGBUILDDIR&gt;&gt;/obj-mipsel-linux-gnu/src/mlpack/..;-x;c++-header;-c;/&lt;&lt;PKGBUILDDIR&gt;&gt;/obj-mipsel-linux-gnu/src/mlpack/cotire/mlpack_CXX_prefix.hxx;-o;/&lt;&lt;PKGBUILDDIR&gt;&gt;/obj-mipsel-linux-gnu/src/mlpack/cotire/mlpack_CXX_prefix.hxx.pch
In file included from /&lt;&lt;PKGBUILDDIR&gt;&gt;/obj-mipsel-linux-gnu/src/mlpack/cotire/mlpack_CXX_prefix.hxx:4:
In file included from /&lt;&lt;PKGBUILDDIR&gt;&gt;/obj-mipsel-linux-gnu/src/mlpack/cotire/mlpack_CXX_prefix.cxx:4:
In file included from /&lt;&lt;PKGBUILDDIR&gt;&gt;/src/mlpack/prereqs.hpp:125:
/&lt;&lt;PKGBUILDDIR&gt;&gt;/src/mlpack/core/util/arma_config_check.hpp:31:13: warning: mlpack was compiled with ARMA_64BIT_WORD, but you are compiling without ARMA_64BIT_WORD.  This will almost certainly cause irreparable disaster.  Either enable ARMA_64BIT_WORD in your application which is using mlpack, or, recompile mlpack against a version of Armadillo which has ARMA_64BIT_WORD disabled. [-W#pragma-messages]
    #pragma message "mlpack was compiled with ARMA_64BIT_WORD, but you are \
            ^
1 warning generated.
&lt;/denchmark-code&gt;

There is also an out-of-memory event, not sure if that is a consequence of the above, or if memory-saving measures (like single-threaded build and all kinds of crazy compilation options) need to be enabled when compiling with clang.
&lt;denchmark-code&gt;LLVM ERROR: out of memory
Stack dump:
0.	Program arguments: /usr/lib/llvm-9/bin/clang -cc1 -triple mipsel-unknown-linux-gnu -emit-obj -mrelax-all -disable-free -disable-llvm-verifier -discard-value-names -main-file-name cf_main.cpp -mrelocation-model static -mthread-model posix -mdisable-fp-elim -fmath-errno -masm-verbose -mconstructor-aliases -fuse-init-array -target-cpu mips32r2 -target-feature -noabicalls -target-feature +fpxx -target-feature +nooddspreg -target-abi o32 -mfloat-abi hard -dwarf-column-info -debug-info-kind=limited -dwarf-version=4 -debugger-tuning=gdb -coverage-notes-file /&lt;&lt;PKGBUILDDIR&gt;&gt;/obj-mipsel-linux-gnu/src/mlpack/methods/cf/CMakeFiles/mlpack_cf.dir/cf_main.cpp.gcno -resource-dir /usr/lib/llvm-9/lib/clang/9.0.1 -D BOOST_TEST_DYN_LINK -D DEBUG -D HAS_STB -I /&lt;&lt;PKGBUILDDIR&gt;&gt;/src -I /usr/include/stb -I /&lt;&lt;PKGBUILDDIR&gt;&gt;/obj-mipsel-linux-gnu/src/mlpack/.. -D _FORTIFY_SOURCE=2 -D BINDING_TYPE=BINDING_TYPE_CLI -internal-isystem /usr/bin/../lib/gcc/mipsel-linux-gnu/10/../../../../include/c++/10 -internal-isystem /usr/bin/../lib/gcc/mipsel-linux-gnu/10/../../../../include/mipsel-linux-gnu/c++/10 -internal-isystem /usr/bin/../lib/gcc/mipsel-linux-gnu/10/../../../../include/mipsel-linux-gnu/c++/10 -internal-isystem /usr/bin/../lib/gcc/mipsel-linux-gnu/10/../../../../include/c++/10/backward -internal-isystem /usr/local/include -internal-isystem /usr/lib/llvm-9/lib/clang/9.0.1/include -internal-externc-isystem /usr/include/mipsel-linux-gnu -internal-externc-isystem /include -internal-externc-isystem /usr/include -O0 -Wformat -Werror=format-security -Wdate-time -Wall -Wextra -Wno-unused-function -Wno-unknown-pragmas -std=gnu++11 -fdeprecated-macro -fdebug-compilation-dir /&lt;&lt;PKGBUILDDIR&gt;&gt;/obj-mipsel-linux-gnu/src/mlpack/methods/cf -fdebug-prefix-map=/&lt;&lt;PKGBUILDDIR&gt;&gt;=. -ftemplate-depth 1000 -ferror-limit 19 -ftemplate-backtrace-limit 0 -fmessage-length 0 -pthread -stack-protector 2 -fobjc-runtime=gcc -fcxx-exceptions -fexceptions -fdiagnostics-show-option -faddrsig -o CMakeFiles/mlpack_cf.dir/cf_main.cpp.o -x c++ /&lt;&lt;PKGBUILDDIR&gt;&gt;/src/mlpack/methods/cf/cf_main.cpp 
1.	&lt;eof&gt; parser at end of file
2.	Code generation
/usr/lib/mipsel-linux-gnu/libLLVM-9.so.1(_ZN4llvm3sys15PrintStackTraceERNS_11raw_ostreamE+0x50)[0x7148fa74]
clang: error: unable to execute command: Aborted
clang: error: clang frontend command failed due to signal (use -v to see invocation)
clang version 9.0.1-14 
Target: mipsel-unknown-linux-gnu
Thread model: posix
&lt;/denchmark-code&gt;

&lt;denchmark-h:h4&gt;Your environment&lt;/denchmark-h&gt;


version of mlpack: 3.4.1
operating system: Debian (sid) autobuilder chroot
compiler: clang 9.0.1
version of dependencies (Boost/Armadillo): 1.71.0
any other environment information you think is relevant: architecture mipsel

	</description>
	<comments>
		<comment id='1' author='barak' date='2020-09-10T15:03:19Z'>
		&lt;denchmark-link:https://github.com/barak&gt;@barak&lt;/denchmark-link&gt;
 maybe you need to install armadillo manually and specify in the CMake command that it is 32bit architecture, I am not sure.
Just curious how much RAM is available in you system?
		</comment>
		<comment id='2' author='barak' date='2020-09-10T15:10:46Z'>
		&lt;denchmark-link:https://github.com/barak&gt;@barak&lt;/denchmark-link&gt;
 can you specify how are you building mlpack? usually it should only compile on one core.
		</comment>
		<comment id='3' author='barak' date='2020-09-10T20:45:17Z'>
		Hey &lt;denchmark-link:https://github.com/shrit&gt;@shrit&lt;/denchmark-link&gt;
, I believe  doesn't usually compiles on one core i had to specify with  to compile it on one core otherwise it used to fail on my system.
I have a 4 core CPU with 8 GB of ram, If that helps.
		</comment>
		<comment id='4' author='barak' date='2020-09-10T20:48:29Z'>
		Hey &lt;denchmark-link:https://github.com/barak&gt;@barak&lt;/denchmark-link&gt;
, Yes you need to specify the number of cores to build, It affects the amount of memory that is being used, if you have less memory i would advice you to go with  that worked for me.
		</comment>
		<comment id='5' author='barak' date='2020-09-10T22:05:29Z'>
		Yeah, the ARMA_64BIT_WORD mismatch is a little concerning, but shouldn't affect the build, at least.  The real error seems to be this:
&lt;denchmark-code&gt;LLVM ERROR: out of memory
Stack dump:
0.	Program arguments: /usr/lib/llvm-9/bin/clang -cc1 -triple mipsel-unknown-linux-gnu -emit-obj -mrelax-all -disable-free -disable-llvm-verifier -discard-value-names -main-file-name cf_main.cpp -mrelocation-model static -mthread-model posix -mdisable-fp-elim -fmath-errno -masm-verbose -mconstructor-aliases -fuse-init-array -target-cpu mips32r2 -target-feature -noabicalls -target-feature +fpxx -target-feature +nooddspreg -target-abi o32 -mfloat-abi hard -dwarf-column-info -debug-info-kind=limited -dwarf-version=4 -debugger-tuning=gdb -coverage-notes-file /&lt;&lt;PKGBUILDDIR&gt;&gt;/obj-mipsel-linux-gnu/src/mlpack/methods/cf/CMakeFiles/mlpack_cf.dir/cf_main.cpp.gcno -resource-dir /usr/lib/llvm-9/lib/clang/9.0.1 -D BOOST_TEST_DYN_LINK -D DEBUG -D HAS_STB -I /&lt;&lt;PKGBUILDDIR&gt;&gt;/src -I /usr/include/stb -I /&lt;&lt;PKGBUILDDIR&gt;&gt;/obj-mipsel-linux-gnu/src/mlpack/.. -D _FORTIFY_SOURCE=2 -D BINDING_TYPE=BINDING_TYPE_CLI -internal-isystem /usr/bin/../lib/gcc/mipsel-linux-gnu/10/../../../../include/c++/10 -internal-isystem /usr/bin/../lib/gcc/mipsel-linux-gnu/10/../../../../include/mipsel-linux-gnu/c++/10 -internal-isystem /usr/bin/../lib/gcc/mipsel-linux-gnu/10/../../../../include/mipsel-linux-gnu/c++/10 -internal-isystem /usr/bin/../lib/gcc/mipsel-linux-gnu/10/../../../../include/c++/10/backward -internal-isystem /usr/local/include -internal-isystem /usr/lib/llvm-9/lib/clang/9.0.1/include -internal-externc-isystem /usr/include/mipsel-linux-gnu -internal-externc-isystem /include -internal-externc-isystem /usr/include -O0 -Wformat -Werror=format-security -Wdate-time -Wall -Wextra -Wno-unused-function -Wno-unknown-pragmas -std=gnu++11 -fdeprecated-macro -fdebug-compilation-dir /&lt;&lt;PKGBUILDDIR&gt;&gt;/obj-mipsel-linux-gnu/src/mlpack/methods/cf -fdebug-prefix-map=/&lt;&lt;PKGBUILDDIR&gt;&gt;=. -ftemplate-depth 1000 -ferror-limit 19 -ftemplate-backtrace-limit 0 -fmessage-length 0 -pthread -stack-protector 2 -fobjc-runtime=gcc -fcxx-exceptions -fexceptions -fdiagnostics-show-option -faddrsig -o CMakeFiles/mlpack_cf.dir/cf_main.cpp.o -x c++ /&lt;&lt;PKGBUILDDIR&gt;&gt;/src/mlpack/methods/cf/cf_main.cpp 
1.	&lt;eof&gt; parser at end of file
2.	Code generation
/usr/lib/mipsel-linux-gnu/libLLVM-9.so.1(_ZN4llvm3sys15PrintStackTraceERNS_11raw_ostreamE+0x50)[0x7148fa74]
clang: error: unable to execute command: Aborted
clang: error: clang frontend command failed due to signal (use -v to see invocation)
clang version 9.0.1-14 
&lt;/denchmark-code&gt;

mlpack can be really harsh on memory, in part because of its heavy reliance on Boost (&lt;denchmark-link:https://github.com/shrit&gt;@shrit&lt;/denchmark-link&gt;
 and others are working hard to help change that! ).  When I encounter OOMs packaging mlpack for Fedora, here are my tricks:

remove -pipe from CMAKE_C_FLAGS and CMAKE_CXX_FLAGS
set --param ggc-min-heapsize=32768 --param ggc-min-expand=1 in CMAKE_C_FLAGS and CMAKE_CXX_FLAGS
build on one core for sure

Hopefully this helps!
For the ARMA_64BIT_WORD issue... I need to think about that a little more.  I should have a better response soon-ish.
		</comment>
		<comment id='6' author='barak' date='2020-09-11T11:32:04Z'>
		&lt;denchmark-link:https://github.com/shrit&gt;@shrit&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/Aakash-kaushik&gt;@Aakash-kaushik&lt;/denchmark-link&gt;
 This is on the Debian autobuilders, I don't have direct control of their resourcing or other characteristics. The build scripts currently specify a single-threaded build () when using  but not when using , see below. The build scripts are set up to use  when available.
&lt;denchmark-link:https://github.com/rcurtin&gt;@rcurtin&lt;/denchmark-link&gt;
 This was building with  so might require different flags. The flags you note are already set when compiling with . When using that compiler, the following are all set, in the following snippet from :
&lt;denchmark-code&gt;DH_FLAGS += --max-parallel=1

ifeq ($(shell dpkg-vendor --derives-from Ubuntu &amp;&amp; echo yes),yes)
SAVE_SPACE=yes
endif

ifeq ($(shell dpkg-architecture --query DEB_BUILD_ARCH_BITS),32)
SAVE_SPACE=yes
endif

ifeq ($(shell dpkg-architecture --query DEB_BUILD_ARCH_OS),kfreebsd)
SAVE_SPACE=yes
endif

ifeq ($(SAVE_SPACE),yes)
ifneq (, $(filter $(shell dpkg-architecture -qDEB_HOST_ARCH_CPU),mips mipsel))
        export DEB_CXXFLAGS_MAINT_APPEND = --param ggc-min-expand=5 -g0
else
        export DEB_CXXFLAGS_MAINT_APPEND = --param ggc-min-expand=20 -g0
endif
endif
&lt;/denchmark-code&gt;

		</comment>
		<comment id='7' author='barak' date='2020-09-11T13:59:25Z'>
		&lt;denchmark-link:https://github.com/barak&gt;@barak&lt;/denchmark-link&gt;
 I am also curious about this issue. It seems that it has appeared only on  architecture.
&lt;denchmark-code&gt;[  1%] Building CXX precompiled header src/mlpack/cotire/mlpack_CXX_prefix.hxx.pch
cd /&lt;&lt;PKGBUILDDIR&gt;&gt;/src/mlpack &amp;&amp; /usr/bin/cmake -DCOTIRE_BUILD_TYPE:STRING=None -DCOTIRE_VERBOSE:BOOL=1 -P /&lt;&lt;PKGBUILDDIR&gt;&gt;/CMake/cotire.cmake precompile /&lt;&lt;PKGBUILDDIR&gt;&gt;/obj-mipsel-linux-gnu/src/mlpack/mlpack_CXX_cotire.cmake /&lt;&lt;PKGBUILDDIR&gt;&gt;/obj-mipsel-linux-gnu/src/mlpack/cotire/mlpack_CXX_prefix.hxx /&lt;&lt;PKGBUILDDIR&gt;&gt;/obj-mipsel-linux-gnu/src/mlpack/cotire/mlpack_CXX_prefix.hxx.pch /&lt;&lt;PKGBUILDDIR&gt;&gt;/src/mlpack/bindings/cli/print_help.cpp
-- execute_process: /usr/bin/clang++;-Dmlpack_EXPORTS;-DDEBUG;-DHAS_STB;-DBOOST_TEST_DYN_LINK;-D_FORTIFY_SOURCE=2;-g;-O2;-fdebug-prefix-map=/&lt;&lt;PKGBUILDDIR&gt;&gt;=.;-fstack-protector-strong;-Wformat;-Werror=format-security;-Wdate-time;-Wall;-Wextra;-ftemplate-depth=1000;-Wno-unused-function;-pthread;-g;-O0;-ftemplate-backtrace-limit=0;-Wno-unknown-pragmas;-std=gnu++11;-fPIC;-I/&lt;&lt;PKGBUILDDIR&gt;&gt;/src;-I/usr/include/stb;-I/&lt;&lt;PKGBUILDDIR&gt;&gt;/obj-mipsel-linux-gnu/src/mlpack/..;-x;c++-header;-c;/&lt;&lt;PKGBUILDDIR&gt;&gt;/obj-mipsel-linux-gnu/src/mlpack/cotire/mlpack_CXX_prefix.hxx;-o;/&lt;&lt;PKGBUILDDIR&gt;&gt;/obj-mipsel-linux-gnu/src/mlpack/cotire/mlpack_CXX_prefix.hxx.pch
In file included from /&lt;&lt;PKGBUILDDIR&gt;&gt;/obj-mipsel-linux-gnu/src/mlpack/cotire/mlpack_CXX_prefix.hxx:4:
In file included from /&lt;&lt;PKGBUILDDIR&gt;&gt;/obj-mipsel-linux-gnu/src/mlpack/cotire/mlpack_CXX_prefix.cxx:4:
In file included from /&lt;&lt;PKGBUILDDIR&gt;&gt;/src/mlpack/prereqs.hpp:125:
/&lt;&lt;PKGBUILDDIR&gt;&gt;/src/mlpack/core/util/arma_config_check.hpp:31:13: warning: mlpack was compiled with ARMA_64BIT_WORD, but you are compiling without ARMA_64BIT_WORD.  This will almost certainly cause irreparable disaster.  Either enable ARMA_64BIT_WORD in your application which is using mlpack, or, recompile mlpack against a version of Armadillo which has ARMA_64BIT_WORD disabled. [-W#pragma-messages]
    #pragma message "mlpack was compiled with ARMA_64BIT_WORD, but you are \
            ^
1 warning generated.
&lt;/denchmark-code&gt;

I have also noticed that the  and  is building perfectly without any issue from armadillo side or mlpack, and  is also passing this step but failing later on a different issue.
&lt;denchmark-link:https://buildd.debian.org/status/fetch.php?pkg=mlpack&amp;arch=i386&amp;ver=3.4.1-1&amp;stamp=1599730877&amp;raw=0&gt;https://buildd.debian.org/status/fetch.php?pkg=mlpack&amp;arch=i386&amp;ver=3.4.1-1&amp;stamp=1599730877&amp;raw=0&lt;/denchmark-link&gt;

		</comment>
		<comment id='8' author='barak' date='2020-09-11T14:01:06Z'>
		(That ARMA_64BIT_WORD warning won't cause a failing build.  It's still something that needs to be fixed, but it's not something that will affect compilation at least.  It also shouldn't affect the tests... I think.)
		</comment>
		<comment id='9' author='barak' date='2020-10-09T00:52:43Z'>
		I opened &lt;denchmark-link:https://github.com/mlpack/mlpack/pull/2665&gt;#2665&lt;/denchmark-link&gt;
, which fixes the spurious  issue. 
		</comment>
	</comments>
</bug>