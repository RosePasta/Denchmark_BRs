<bug id='2024' author='BryanSWeber' open_date='2019-09-19T04:30:24Z' closed_time='2019-11-08T15:20:02Z'>
	<summary>mlpack does not load data</summary>
	<description>
I have installed mlpack on windows using vcpkg (specifically ".\vcpkg install mlpack[tools]:x86 - windows")
I intended to integrate mlpack with an existing project (x86) that produced a .dll
I then resolved all the compiler/linker problems, etc. and my program now successfully compiled.
Not wanting to be ambitious I simply tried to integrate the existing script:
&lt;denchmark-link:https://www.mlpack.org/doc/mlpack-3.0.4/doxygen/sample_ml_app.html&gt;https://www.mlpack.org/doc/mlpack-3.0.4/doxygen/sample_ml_app.html&lt;/denchmark-link&gt;

Curiously the following
&lt;denchmark-code&gt;    #pragma once
# include "Source\MyModule.h"
# include "Source\RFLearn.h"

# include "mlpack/core.hpp"
# include "mlpack/methods/random_forest/random_forest.hpp"
# include "mlpack/methods/decision_tree/random_dimension_select.hpp"
# include "mlpack/core/cv/k_fold_cv.hpp"
# include "mlpack/core/cv/metrics/accuracy.hpp"
# include "mlpack/core/cv/metrics/precision.hpp"
# include "mlpack/core/cv/metrics/recall.hpp"
# include "mlpack/core/cv/metrics/F1.hpp"

using namespace arma;
using namespace mlpack;
using namespace mlpack::tree;
using namespace mlpack::cv;

int RFLearn::test_function() {

//Method A
	mat dataset;
	bool loaded = mlpack::data::Load("C:\\Users\\MainUser\\mlpack\\src\\mlpack\\tests\\data\\german.csv", dataset);
	if (!loaded)
		return -1;
//Method B
	//arma::sp_mat dataset;
	//dataset.load("C:\\Users\\MainUser\\mlpack\\src\\mlpack\\tests\\data\\german.csv", arma::coord_ascii);
	//dataset = dataset.t(); // We must transpose after load!

	MyModule::DiagnosticText("Hey, we're here.");

	return 1;
    }
&lt;/denchmark-code&gt;

Method A results in an inability to link the .dll, the project compiles but presumably fails early in operation.
Method B works just fine. But Method A is the sample data set with the sample code, german.csv is not sparse. What's going on?
	</description>
	<comments>
		<comment id='1' author='BryanSWeber' date='2019-09-19T19:00:28Z'>
		As a note, I have been trying to consider that perhaps the line endings are not correct (eg. linux vs windows .csv files), but that should be resolved using the files directly from the mlpack git.
		</comment>
		<comment id='2' author='BryanSWeber' date='2019-09-19T20:43:12Z'>
		Maybe it is some format issue, does it fail as well if you remove every line from the dataset except the first one?
		</comment>
		<comment id='3' author='BryanSWeber' date='2019-09-20T00:22:25Z'>
		Indeed, it does fail if I remove every line after the first from the dataset.  I made sure the end of line characters were deleted using the line ending display in notepad++.   I called this german_short.csv
I also did a find&amp;replace for \r\n into \n over the extended character set, which should convert to unix line endings. I called this german_unix.csv
Both german_short.csv and german_unix.csv had the same problem, and both were loadable by the alternative method.  I am quite perplexed, but recognize the data load/save portion tends to be the least exciting part of a project.
After peeking at the function directly, it looks like it does indeed look for  \r \n line endings, so there should be nothing wrong with the endings I currently have, (pulled from this git anyway).  


mlpack/src/mlpack/core/data/load_csv.cpp


        Lines 37 to 41
      in
      2635297






 if (extension == "csv") 



 { 



 // Match all characters that are not ',', '\r', or '\n'. 



   stringRule = quotedRule.copy() | qi::raw[*~qi::char_(",\r\n")]; 



 } 





As a result, I no longer think it is a line-ending problem.  Is it possible I am not loading the function properly or it is not linked correctly in some way? I would anticipate their to be a compiler error in those cases.  Perhaps data::Load cannot handle a direct file path?
		</comment>
		<comment id='4' author='BryanSWeber' date='2019-09-20T02:10:04Z'>
		Following my previous line of reasoning, I wanted to see what would happen if I simply artificially created my own data. it seems like the RF function has a similar problem. This merely makes me more curious as to what is actually going on.
&lt;denchmark-code&gt;int RFLearn::test_function() {


	//mat dataset;
	//bool loaded = data::Load("C:\\Users\\Bryan\\mlpack\\src\\mlpack\\tests\\data\\german.csv", dataset);

	//arma::sp_mat dataset;
	//dataset.load("C:\\Users\\Bryan\\mlpack\\src\\mlpack\\tests\\data\\german.csv", arma::coord_ascii);
	//dataset = dataset.t(); // We must transpose after load!

	mat dataset = arma::randi&lt;mat&gt;(24, 1000); // german.csv is 24 columns and 1000 rows. Both load functions transpose or request a transpose.

	CUNYAIModule::DiagnosticText("Hey, we're here. %s", std::experimental::filesystem::current_path().c_str() );

    Row&lt;size_t&gt; labels;
    labels = conv_to&lt;Row&lt;size_t&gt;&gt;::from(dataset.row(dataset.n_rows - 1));
    dataset.shed_row(dataset.n_rows - 1);

    const size_t numClasses = 2;
    const size_t minimumLeafSize = 5;
    const size_t numTrees = 10;
    RandomForest&lt;GiniGain, RandomDimensionSelect&gt; rf;
    rf = RandomForest&lt;GiniGain, RandomDimensionSelect&gt;(dataset, labels,
        numClasses, numTrees, minimumLeafSize);

 //   Row&lt;size_t&gt; predictions;
 //   rf.Classify(dataset, predictions);
 //   const size_t correct = arma::accu(predictions == labels);
	//CUNYAIModule::DiagnosticText("Training Accuracy: %4.2f", double(correct) / double(labels.n_elem));

 //   const size_t k = 10;
 //   KFoldCV&lt;RandomForest&lt;GiniGain, RandomDimensionSelect&gt;, Accuracy&gt; cv(k,
 //       dataset, labels, numClasses);
 //   double cvAcc = cv.Evaluate(numTrees, minimumLeafSize);
	//CUNYAIModule::DiagnosticText("KFoldCV Accuracy:  %4.2f", cvAcc);


 //   double cvPrecision = Precision&lt;Binary&gt;::Evaluate(rf, dataset, labels);
 //   cout &lt;&lt; "\nPrecision: " &lt;&lt; cvPrecision;
 //   double cvRecall = Recall&lt;Binary&gt;::Evaluate(rf, dataset, labels);
 //   cout &lt;&lt; "\nRecall: " &lt;&lt; cvRecall;
 //   double cvF1 = F1&lt;Binary&gt;::Evaluate(rf, dataset, labels);
 //   cout &lt;&lt; "\nF1: " &lt;&lt; cvF1;


 //   //mlpack::data::Save("mymodel.xml", "model", rf, false);

 //   //mlpack::data::Load("mymodel.xml", "model", rf);

 //   mat sample("2 12 2 13 1 2 2 1 3 24 3 1 1 1 1 1 0 1 0 1 0 0 0");
 //   mat probabilities;
 //   rf.Classify(sample, predictions, probabilities);
 //   u64 result = predictions.at(0);
 //   cout &lt;&lt; "\nClassification result: " &lt;&lt; result &lt;&lt; " , Probabilities: " &lt;&lt;
 //       probabilities.at(0) &lt;&lt; "/" &lt;&lt; probabilities.at(1);

	return 1;
};
&lt;/denchmark-code&gt;

The program will stop connecting to successfully compiled .DLL once I choose to include the following:

RandomForest&lt;GiniGain, RandomDimensionSelect&gt; rf;
rf = RandomForest&lt;GiniGain, RandomDimensionSelect&gt;(dataset, labels,
    numClasses, numTrees, minimumLeafSize);


Perhaps that sheds some light on the problem.
		</comment>
		<comment id='5' author='BryanSWeber' date='2019-09-27T00:51:22Z'>
		
The program will stop connecting to successfully compiled .DLL once I choose to include the following:

Can you explain what you mean by this?  I don't understand.  Thanks!
		</comment>
		<comment id='6' author='BryanSWeber' date='2019-09-28T15:07:11Z'>
		So the goal is to go from:
x86 MLPack-&gt;myproject.dll-&gt;someone_else's_project
MLPack seems to compile, and myproject.dll also compiles when including mlpack.  But whenever myproject.dll uses any mlpack functions, someone_else's_project can no longer connect to myproject.dll
I am starting to suspect that this has to do with the x86 vs x64 nature of the programs.  I know the final destination is a 32 bit project, so I selected x86 mlpack in order to make sure I am compatible. Did I overlook something?
Edit: I dumped myproject.dll and determined it is in fact x86, so I am again unsure of what the problem is.
		</comment>
		<comment id='7' author='BryanSWeber' date='2019-10-02T14:47:21Z'>
		Okay, I think that I understand the basic idea of what you are trying to do, but I'm hung up on the term "can no longer connect"... is there an associated error message?  To me the terminology doesn't make sense.
		</comment>
		<comment id='8' author='BryanSWeber' date='2019-11-01T15:05:32Z'>
		This issue has been automatically marked as stale because it has not had any recent activity.  It will be closed in 7 days if no further activity occurs.  Thank you for your contributions! üëç
		</comment>
	</comments>
</bug>