<bug id='2212' author='joeljosephjin' open_date='2020-02-16T08:18:22Z' closed_time='2020-04-25T20:08:11Z'>
	<summary>Error while building mlpack - in visual studio 2019 windows</summary>
	<description>
&lt;denchmark-h:h4&gt;Issue description&lt;/denchmark-h&gt;

I want to build mlpack from source for windows. The error is coming up when i build it.
&lt;denchmark-h:h4&gt;Your environment&lt;/denchmark-h&gt;


version of mlpack: latest
operating system: windows
compiler: visual studio 2019 latest
version of dependencies (Boost/Armadillo): latest x64
any other environment information you think is relevant:

&lt;denchmark-h:h4&gt;Steps to reproduce&lt;/denchmark-h&gt;

&lt;denchmark-h:h4&gt;Expected behavior&lt;/denchmark-h&gt;

&lt;denchmark-h:h4&gt;Actual behavior&lt;/denchmark-h&gt;

Error in VS Windows:
"LINK2005	"public: __cdecl boost::program_options::error_with_option_name::error_with_option_name(class std::basic_string&lt;char,struct std::char_traits,class std::allocator &gt; const &amp;,class std::basic_string&lt;char,struct std::char_traits,class std::allocator &gt; const &amp;,class std::basic_string&lt;char,struct std::char_traits,class std::allocator &gt; const &amp;,int)" (??0error_with_option_name@program_options@boost@@QEAA@AEBV?$basic_string@DU?$char_traits@D@std@&lt;denchmark-link:https://github.com/v&gt;@v&lt;/denchmark-link&gt;
?$allocator@D@2@&lt;denchmark-link:https://github.com/std&gt;@std&lt;/denchmark-link&gt;
@&lt;denchmark-link:https://github.com/00h&gt;@00h&lt;/denchmark-link&gt;
@Z) already defined in boost_program_options-vc140-mt-gd.lib(boost_program_options-vc142-mt-gd-x64-1_72.dll)	mlpack_adaboost	C:\mlpack\mlpack\src\mlpack\methods\adaboost\libboost_program_options-vc142-mt-gd-x64-1_71.lib(value_semantic.obj)	1
"
	</description>
	<comments>
		<comment id='1' author='joeljosephjin' date='2020-02-16T18:30:48Z'>
		Hmm, I think that this is similar to what &lt;denchmark-link:https://github.com/himanshupathak21061998&gt;@himanshupathak21061998&lt;/denchmark-link&gt;
 is fighting with for the Conda mlpack build in &lt;denchmark-link:https://github.com/conda-forge/mlpack-feedstock/pull/18&gt;conda-forge/mlpack-feedstock#18&lt;/denchmark-link&gt;
.  I have two ideas, but I'm not sure how well either will work...

Could you try building with a version of Boost older than 1.70?  e.g. Boost 1.69 would be fine, or older too
What happens if, when configuring with CMake, you set the variable Boost_NO_BOOST_CMAKE to 1 and then rebuild?  Does it link properly then?

		</comment>
		<comment id='2' author='joeljosephjin' date='2020-02-16T20:34:58Z'>
		&lt;denchmark-link:https://github.com/rcurtin&gt;@rcurtin&lt;/denchmark-link&gt;
 May be Boost_NO_BOOST_CMAKE would not work. &lt;denchmark-link:https://github.com/joeljosephjin&gt;@joeljosephjin&lt;/denchmark-link&gt;
 I think you should try different version of Boost.
		</comment>
		<comment id='3' author='joeljosephjin' date='2020-03-17T20:54:05Z'>
		This issue has been automatically marked as stale because it has not had any recent activity.  It will be closed in 7 days if no further activity occurs.  Thank you for your contributions! üëç
		</comment>
		<comment id='4' author='joeljosephjin' date='2020-03-17T21:08:39Z'>
		&lt;denchmark-link:https://github.com/rcurtin&gt;@rcurtin&lt;/denchmark-link&gt;
 I think we should keep this open once I found a workaround for this we will close it.
		</comment>
		<comment id='5' author='joeljosephjin' date='2020-04-16T21:53:43Z'>
		This issue has been automatically marked as stale because it has not had any recent activity.  It will be closed in 7 days if no further activity occurs.  Thank you for your contributions! üëç
		</comment>
	</comments>
</bug>