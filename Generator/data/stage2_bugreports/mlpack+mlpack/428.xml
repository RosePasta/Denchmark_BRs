<bug id='428' author='johnlees' open_date='2015-03-30T22:22:28Z' closed_time='2015-05-28T01:34:40Z'>
	<summary>segmentation fault with LogisticRegression API</summary>
	<description>
I am trying to run a LogisticRegression as follows:
void logisticTest(Kmer&amp; k, const arma::vec&amp; y_train)
{
// Train classifier
arma::mat x_train = k.get_x();
mlpack::regression::LogisticRegression&lt;&gt; fit(x_train, y_train);
...
where the get_x function of the Kmer class returns an arma::mat which is 1x3069 (the same dimension as y_train)
I include in the header:
&lt;denchmark-h:h1&gt;include iostream&lt;/denchmark-h&gt;

&lt;denchmark-h:h1&gt;include fstream&lt;/denchmark-h&gt;

&lt;denchmark-h:h1&gt;include cmath&lt;/denchmark-h&gt;

&lt;denchmark-h:h1&gt;include cstdlib&lt;/denchmark-h&gt;

&lt;denchmark-h:h1&gt;include string&lt;/denchmark-h&gt;

&lt;denchmark-h:h1&gt;include algorithm&lt;/denchmark-h&gt;

&lt;denchmark-h:h1&gt;include list&lt;/denchmark-h&gt;

&lt;denchmark-h:h1&gt;include vector&lt;/denchmark-h&gt;

&lt;denchmark-h:h1&gt;include thread&lt;/denchmark-h&gt;

&lt;denchmark-h:h1&gt;include exception&lt;/denchmark-h&gt;

&lt;denchmark-h:h1&gt;include sys/stat.h&lt;/denchmark-h&gt;

// Boost headers
&lt;denchmark-h:h1&gt;include boost/program_options.hpp&lt;/denchmark-h&gt;

&lt;denchmark-h:h1&gt;include boost/math/distributions/normal.hpp&lt;/denchmark-h&gt;

// Armadillo/mlpack headers
&lt;denchmark-h:h1&gt;include mlpack/core.hpp&lt;/denchmark-h&gt;

&lt;denchmark-h:h1&gt;include mlpack/methods/logistic_regression/logistic_regression.hpp&lt;/denchmark-h&gt;

Code compiles with:
g++ -Wall -g -O0 -std=c++11  -c -o kmer.o kmer.cpp
g++ -Wall -g -O0 -std=c++11  -c -o Assoc.o Assoc.cpp
g++ -Wall -g -O0 -std=c++11 Assoc.o kmer.o -lmlpack -larmadillo -lboost_program_options -lblas -llapack -lm -o assoc
x and y are vectors of 0 or 1 (as doubles). I've tried with a number of different x and y of this form.
When I run the code, I always get a segmentation fault, which valgrind suggests occurs in the mlpack::regression::LogisticRegressionFunction::Evaluate function, though I don't know where as the library is stripped of debugging information
==5679== Invalid read of size 8
==5679==    at 0x4EE7702: mlpack::regression::LogisticRegressionFunction::Evaluate(arma::Mat const&amp;) const (in /usr/local/lib/libmlpack.so.1.0)
==5679==    by 0x439D09: mlpack::optimization::L_BFGSmlpack::regression::LogisticRegressionFunction::Evaluate(arma::Mat const&amp;) (lbfgs_impl.hpp:83)
==5679==    by 0x437C26: mlpack::optimization::L_BFGSmlpack::regression::LogisticRegressionFunction::Optimize(arma::Mat&amp;, unsigned long) (lbfgs_impl.hpp:364)
==5679==    by 0x435CAF: mlpack::optimization::L_BFGSmlpack::regression::LogisticRegressionFunction::Optimize(arma::Mat&amp;) (lbfgs_impl.hpp:331)
==5679==    by 0x434A5A: mlpack::regression::LogisticRegressionmlpack::optimization::L_BFGS::LogisticRegression(arma::Mat const&amp;, arma::Col const&amp;, double) (logistic_regression_impl.hpp:37)
==5679==    by 0x431DE5: logisticTest(Kmer&amp;, arma::Col const&amp;) (pangwasAssoc.cpp:17)
==5679==    by 0x419FB5: main (pangwasMain.cpp:109)
==5679==  Address 0xfff001000 is not stack'd, malloc'd or (recently) free'd
==5679==
==5679==
==5679== Process terminating with default action of signal 11 (SIGSEGV)
==5679==  Access not within mapped region at address 0xFFF001000
==5679==    at 0x4EE7702: mlpack::regression::LogisticRegressionFunction::Evaluate(arma::Mat const&amp;) const (in /usr/local/lib/libmlpack.so.1.0)
==5679==    by 0x439D09: mlpack::optimization::L_BFGSmlpack::regression::LogisticRegressionFunction::Evaluate(arma::Mat const&amp;) (lbfgs_impl.hpp:83)
==5679==    by 0x437C26: mlpack::optimization::L_BFGSmlpack::regression::LogisticRegressionFunction::Optimize(arma::Mat&amp;, unsigned long) (lbfgs_impl.hpp:364)
==5679==    by 0x435CAF: mlpack::optimization::L_BFGSmlpack::regression::LogisticRegressionFunction::Optimize(arma::Mat&amp;) (lbfgs_impl.hpp:331)
==5679==    by 0x434A5A: mlpack::regression::LogisticRegressionmlpack::optimization::L_BFGS::LogisticRegression(arma::Mat const&amp;, arma::Col const&amp;, double) (logistic_regression_impl.hpp:37)
==5679==    by 0x431DE5: logisticTest(Kmer&amp;, arma::Col const&amp;) (Assoc.cpp:17)
==5679==    by 0x419FB5: main (Main.cpp:109)
Before this error, I also get a few of the form:
==5679== Conditional jump or move depends on uninitialised value(s)
==5679==    at 0x58B68EF: log (w_log.c:30)
==5679==    by 0x4EE770B: mlpack::regression::LogisticRegressionFunction::Evaluate(arma::Mat const&amp;) const (in /usr/local/lib/libmlpack.so.1.0)
However, when I run the LogisticRegression binary from mlpack using the same x and y vectors printed as csv files it works just fine:
logistic_regression --input_file x.vec.csv --input_responses y.vec.csv --output_file logit.txt -v
[INFO ] Loading 'x.vec.csv' as CSV data.  Size is 1 x 3069.
[INFO ] Loading 'y.vec.csv' as CSV data.  Size is 1 x 3069.
[INFO ] Training model with L-BFGS optimizer.
[INFO ] LogisticRegression::LogisticRegression(): final objective of trained model is 2030.33.
[INFO ] Saving model to 'logit.txt'.
[INFO ] Saving raw ASCII formatted data to 'logit.txt'.
[INFO ]
[INFO ] Execution parameters:
[INFO ]   decision_boundary: 0.5
[INFO ]   help: false
[INFO ]   info: ""
[INFO ]   input_file: x.vec.csv
[INFO ]   input_responses: y.vec.csv
[INFO ]   lambda: 0
[INFO ]   max_iterations: 0
[INFO ]   model_file: ""
[INFO ]   optimizer: lbfgs
[INFO ]   output_file: logit.txt
[INFO ]   output_predictions: predictions.csv
[INFO ]   step_size: 0.01
[INFO ]   test_file: ""
[INFO ]   tolerance: 1e-10
[INFO ]   verbose: true
[INFO ]   version: false
[INFO ]
[INFO ] Program timers:
[INFO ]   loading_data: 0.006700s
[INFO ]   logistic_regression_optimization: 0.067037s
[INFO ]   saving_data: 0.010786s
[INFO ]   total_time: 0.088893s
Could anyone help me debug this? Have I used the API/some pointers incorrectly, or perhaps compiled incorrectly? This seems more likely than a bug in the function, given that the binary works ok
Apologies if this is the wrong forum for this problem
	</description>
	<comments>
		<comment id='1' author='johnlees' date='2015-03-30T22:43:32Z'>
		Hi there,
Just to be completely sure that the matrices are the same size, can you add the following line to logisticTest() and see what the output is?
&lt;denchmark-code&gt;std::cout &lt;&lt; "x: " &lt;&lt; x_train.n_rows &lt;&lt; "x" &lt;&lt; x_train.n_cols &lt;&lt; "; y: " &lt;&lt; y_train.n_rows &lt;&lt; "x" &lt;&lt; y_train.n_cols &lt;&lt; ".\n";
&lt;/denchmark-code&gt;

If you've compiled mlpack from source, you can set the CMake option -DDEBUG=ON to get debugging symbols; that will probably shed a bit more light on what's going on here.  To me it looks like you are using the API correctly, but without the context of the rest of the code / an easy way to reproduce the error, I'm not 100% sure when I say that (I may also have overlooked something simple).
		</comment>
		<comment id='2' author='johnlees' date='2015-03-30T23:19:31Z'>
		Thanks for the quick response!
Looks like the size is ok:
x: 3069x1; y: 3069x1.
Rerunning with the debugging symbols gives:
==9284== Process terminating with default action of signal 11 (SIGSEGV)
==9284==  Access not within mapped region at address 0xFFF001000
==9284==    at 0x5017C82: mlpack::regression::LogisticRegressionFunction::Evaluate(arma::Mat const&amp;) const (logistic_regression_function.cpp:80)
Line 80 is:
77 for (size_t i = 0; i &lt; responses.n_elem; ++i)
78  {
79    if (responses[i] == 1)
80      result += log(sigmoid[i]);
81    else
82      result += log(1.0 - sigmoid[i]);
83  }
so it seems sigmoid, defined earlier in the function, is a different length to responses?
If that doesn't help, I can provide a minimal working example?
		</comment>
		<comment id='3' author='johnlees' date='2015-03-30T23:56:00Z'>
		I think I might know what this is.  Are you defining ARMA_64BIT_WORD in your program?
		</comment>
		<comment id='4' author='johnlees' date='2015-03-31T11:10:02Z'>
		No, I hadn't touched it - thanks for the tip!
I've now uncommented the required line in /include/armadillo_bits/config.hpp and recompiled mlpack. However, I now get an out of memory error:
error: arma::memory::acquire(): out of memory
terminate called after throwing an instance of 'std::bad_alloc'
what():  std::bad_alloc
Program received signal SIGABRT, Aborted.
When I look at the backtrace in gdb, I find that upon initialising the zero matrix, arma requests 4294970366 (i.e. 2^32 +/- rounding error) elements and then fails to allocate memory for it:
(gdb) bt
#0  0x00007ffff6911cc9 in __GI_raise (sig=sig@entry=6) at ../nptl/sysdeps/unix/sysv/linux/raise.c:56
&lt;denchmark-link:https://github.com/mlpack/mlpack/issues/1&gt;#1&lt;/denchmark-link&gt;
  0x00007ffff69150d8 in __GI_abort () at abort.c:89
&lt;denchmark-link:https://github.com/mlpack/mlpack/pull/2&gt;#2&lt;/denchmark-link&gt;
  0x00007ffff721d6b5 in __gnu_cxx::__verbose_terminate_handler() () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
&lt;denchmark-link:https://github.com/mlpack/mlpack/issues/3&gt;#3&lt;/denchmark-link&gt;
  0x00007ffff721b836 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
&lt;denchmark-link:https://github.com/mlpack/mlpack/pull/4&gt;#4&lt;/denchmark-link&gt;
  0x00007ffff721b863 in std::terminate() () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
&lt;denchmark-link:https://github.com/mlpack/mlpack/pull/5&gt;#5&lt;/denchmark-link&gt;
  0x00007ffff721baa2 in __cxa_throw () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
&lt;denchmark-link:https://github.com/mlpack/mlpack/issues/6&gt;#6&lt;/denchmark-link&gt;
  0x00000000004362cd in arma::arma_stop_bad_alloc&lt;char [39]&gt; (x=...) at /usr/include/armadillo_bits/debug.hpp:138
&lt;denchmark-link:https://github.com/mlpack/mlpack/issues/7&gt;#7&lt;/denchmark-link&gt;
  0x00000000004382b7 in arma::arma_check_bad_alloc&lt;char [39]&gt; (state=true, x=...) at /usr/include/armadillo_bits/debug.hpp:378
&lt;denchmark-link:https://github.com/mlpack/mlpack/issues/8&gt;#8&lt;/denchmark-link&gt;
  0x00007ffff7a3edb3 in arma::memory::acquire (n_elem=4294970366) at /usr/include/armadillo_bits/memory.hpp:94
&lt;denchmark-link:https://github.com/mlpack/mlpack/issues/9&gt;#9&lt;/denchmark-link&gt;
  0x00007ffff7a4536a in arma::Mat::init_warm (this=0x7fffffffcf00, in_n_rows=4294970366, in_n_cols=1) at /usr/include/armadillo_bits/Mat_meat.hpp:299
&lt;denchmark-link:https://github.com/mlpack/mlpack/issues/10&gt;#10&lt;/denchmark-link&gt;
 0x00007ffff7b11082 in arma::Mat::operator=arma::Mat&lt;double, arma::gen_zeros&gt; (this=0x7fffffffcf00, X=...) at /usr/include/armadillo_bits/Mat_meat.hpp:4021
&lt;denchmark-link:https://github.com/mlpack/mlpack/issues/11&gt;#11&lt;/denchmark-link&gt;
 0x00007ffff7b0de3a in mlpack::regression::LogisticRegressionFunction::LogisticRegressionFunction (this=0x7fffffffcf00, predictors=..., responses=..., lambda=0)
at /home/john/pangwas/code/mlpack/src/mlpack/methods/logistic_regression/logistic_regression_function.cpp:27
&lt;denchmark-link:https://github.com/mlpack/mlpack/issues/12&gt;#12&lt;/denchmark-link&gt;
 0x000000000045584d in mlpack::regression::LogisticRegressionmlpack::optimization::L_BFGS::LogisticRegression (this=0x7fffffffd8a0, predictors=..., responses=..., lambda=0)
at /home/john/pangwas/code/mlpack/build_logit_debug/include/mlpack/methods/logistic_regression/logistic_regression_impl.hpp:32
&lt;denchmark-link:https://github.com/mlpack/mlpack/issues/13&gt;#13&lt;/denchmark-link&gt;
 0x0000000000452a3c in logisticTest (k=..., y_train=...) at Assoc.cpp:18
&lt;denchmark-link:https://github.com/mlpack/mlpack/issues/14&gt;#14&lt;/denchmark-link&gt;
 0x000000000043b97b in main (argc=9, argv=0x7fffffffe178) at Main.cpp:109
Any idea what is causing this to try and allocate such a huge matrix?
		</comment>
		<comment id='5' author='johnlees' date='2015-03-31T12:37:01Z'>
		I think I've narrowed it down slightly:
Breakpoint 3, mlpack::regression::LogisticRegressionmlpack::optimization::L_BFGS::LogisticRegression (this=0x7fffffffd8a0, predictors=..., responses=..., lambda=0)
at /home/john/pangwas/code/mlpack/build_logit_debug/include/mlpack/methods/logistic_regression/logistic_regression_impl.hpp:32
32    LogisticRegressionFunction errorFunction(predictors, responses, lambda);
(gdb) p predictors.n_rows
$15 = 3069
(gdb) s
mlpack::regression::LogisticRegressionFunction::LogisticRegressionFunction (this=0x7fffffffcf00, predictors=..., responses=..., lambda=0)
at /home/john/pangwas/code/mlpack/src/mlpack/methods/logistic_regression/logistic_regression_function.cpp:25
25      lambda(lambda)
(gdb) p predictors.n_rows
$18 = 4294970365
i.e. in the passing of predictors at line 32 of logistic_regression_impl.hpp to LogisiticRegressionFunction (defined at line 19 of logistic_regression_function.cpp) something I don't understand is happening
		</comment>
		<comment id='6' author='johnlees' date='2015-03-31T12:52:01Z'>
		Adding ARMA_64BIT_WORD is not something you want to do unless you recompile mlpack against Armadillo that has ARMA_64BIT_WORD enabled.  The reason for this is that what ARMA_64BIT_WORD actually controls is whether the Armadillo internal type uword is 32 bits or 64 bits.  If mlpack is compiled with 32-bit uword and your program is compiled with 64-bit uword, disaster ensues (as you can see in your last two posts).  Right when you enter a function in libmlpack.so, the Armadillo structures are now completely misaligned and suddenly you have a horrible disaster.  So, when I asked, I was trying to make sure that you hadn't done that. :)
Anyway, it sounds like ARMA_64BIT_WORD is not the issue, like I had originally thought.  Can you provide a minimal working example of the original error, so I can try to reproduce and figure out what is going on?
Thanks!
		</comment>
		<comment id='7' author='johnlees' date='2015-03-31T15:24:06Z'>
		Hi again Ryan,
Thanks for the tips about using 64 bit words, I certainly got myself into something bad there...
I followed the linear algebra through properly, and it would seem I needed to take the transpose of the design matrix x. Having done this before passing to the mlpack function, all works as expected!
I'm not sure whether this is my oversight, or that the mlpack function does not follow convention?
(to recap, I was supplying predictors with 3069 rows and 1 column, and equally dimensioned responses. If I take the transpose of the responses so they're 1x3069 instead all is well)
My reading of &lt;denchmark-link:https://en.wikipedia.org/wiki/Design_matrix&gt;https://en.wikipedia.org/wiki/Design_matrix&lt;/denchmark-link&gt;
 suggests the latter, but I might well have got that wrong.
Either way, perhaps a test + error on the initial dimensions would be preferable to a segfault?
Thanks again for all your help, and for a great bit of software!
		</comment>
		<comment id='8' author='johnlees' date='2015-03-31T15:38:52Z'>
		Yes, I'm sorry, I actually overlooked this to begin with, even though you gave me the output that makes it perfectly clear.  You said that your input matrices were 3069x1, but they should be 1x3069.  The reason for this is that mlpack matrices are column-major: each point should be a column.  See this tutorial: &lt;denchmark-link:http://www.mlpack.org/doxygen.php?doc=matrices.html&gt;http://www.mlpack.org/doxygen.php?doc=matrices.html&lt;/denchmark-link&gt;

Adding a check for this is somewhat difficult; suppose that the user actually has a 3069-dimensional point that they want to do logistic regression on (this is an edge case, of course, but you can see that there are other cases where I can't easily tell if the user has passed in transposed data).
But, looking at logistic_regression_function.cpp, there are no checks on the size of the matrix in the constructor, which strikes me as odd.  And the fact that the program is segfaulting when passed one point is also odd.  So, there are still two things to be done here (so I'll leave the ticket open):

add checks to the matrix sizes in the constructors in logistic_regression_function.cpp; call Log::Fatal if the dimensions don't match
figure out why a segfault is occurring when 1-column predictors and responses are given

I'll fix these when I have time, or, if someone gets around to it before me, that works too.
Anyway, it looks like you've figured out what you need.  Thanks for bringing these issues to our attention. :)
		</comment>
		<comment id='9' author='johnlees' date='2015-05-28T01:34:40Z'>
		I wasn't able to reproduce the segfault, but I added a matrix size check in &lt;denchmark-link:https://github.com/mlpack/mlpack/commit/db7f910467dec872a93cf47427b3d6196fd52b39&gt;db7f910&lt;/denchmark-link&gt;
.  I'll call this closed now.
		</comment>
		<comment id='10' author='johnlees' date='2015-06-14T11:45:16Z'>
		I think the problem may be more complicated. I am using c++/g++ of mac (which actually mean clang).
(sorry I still do not know how to post codes properly in this editor)
Consider the code:
&lt;denchmark-code&gt;cout&lt;&lt; X.n_cols&lt;&lt; "\t"&lt;&lt; Y.n_elem&lt;&lt; endl;
mlpack::regression::LogisticRegression&lt;mlpack::optimization::L_BFGS&gt; LG(X,Y,w,0.0001);
&lt;/denchmark-code&gt;

I also modified lmpack bound check in 'two' places:

In logistic_regression_impl.hpp:

&lt;denchmark-code&gt;template&lt;template&lt;typename&gt; class OptimizerType&gt;
LogisticRegression&lt;OptimizerType&gt;::LogisticRegression(
    const arma::mat&amp; predictors,
    const arma::vec&amp; responses,
    const arma::mat&amp; initialPoint,
    const double lambda) :
    parameters(arma::zeros&lt;arma::vec&gt;(predictors.n_rows + 1)),
    lambda(lambda)
{
    //std::cout&lt;&lt; "Here OK!"&lt;&lt; std::endl;
    if (responses.n_elem != predictors.n_cols)
    Log::Fatal  &lt;&lt; "LogisticRegression::LogisticRegression(): "
                &lt;&lt; "predictors matrix has " &lt;&lt; predictors.n_cols &lt;&lt; " points, but "
                &lt;&lt; "responses vector has " &lt;&lt; responses.n_elem &lt;&lt; " elements (should be"
                &lt;&lt; " " &lt;&lt; predictors.n_cols &lt;&lt; ")!" &lt;&lt; std::endl;

  LogisticRegressionFunction errorFunction(predictors, responses, lambda);
  errorFunction.InitialPoint() = initialPoint;
  OptimizerType&lt;LogisticRegressionFunction&gt; optimizer(errorFunction);

  // Train the model.
  Timer::Start("logistic_regression_optimization");
  const double out = optimizer.Optimize(parameters);
  Timer::Stop("logistic_regression_optimization");

  Log::Info &lt;&lt; "LogisticRegression::LogisticRegression(): final objective of "
      &lt;&lt; "trained model is " &lt;&lt; out &lt;&lt; "." &lt;&lt; std::endl;
}
&lt;/denchmark-code&gt;

And in logistic_regression_function.cpp (I added bound-check and renamed variables because I was thinking missing (*this) may be a problem for some compilers.)
&lt;denchmark-code&gt;LogisticRegressionFunction::LogisticRegressionFunction(
    const arma::mat&amp; predictors_,
    const arma::vec&amp; responses_,
    const double lambda_) :
    predictors(predictors_),
    responses(responses_),
    lambda(lambda_)
{
    std::cout&lt;&lt; responses_.n_elem &lt;&lt;"\t"&lt;&lt; predictors_.n_cols&lt;&lt; std::endl;
  initialPoint = arma::zeros&lt;arma::mat&gt;(predictors.n_rows + 1, 1);
  // Sanity check.
  if (responses.n_elem != predictors.n_cols)
    Log::Fatal  &lt;&lt; "LogisticRegressionFunction::LogisticRegressionFunction(): "
                &lt;&lt; "predictors matrix has " &lt;&lt; predictors.n_cols &lt;&lt; " points, but "
                &lt;&lt; "responses vector has " &lt;&lt; responses.n_elem &lt;&lt; " elements (should be"
                &lt;&lt; " " &lt;&lt; predictors.n_cols &lt;&lt; ")!" &lt;&lt; std::endl;
}
&lt;/denchmark-code&gt;

The output reads:
&lt;denchmark-code&gt;5000    5000
1   0
&lt;/denchmark-code&gt;

Which means X, Y are passed to LogisticRegression properly, by not properly passed to LogisticRegressionFunction. I have no idea how that can happen. Do you see any reason? (I ran the similar code in linux yesterday and found no problem, so it is likely because of the compiler clang?).
		</comment>
		<comment id='11' author='johnlees' date='2015-06-14T23:06:14Z'>
		I bet that you compiled mlpack with Armadillo configured with ARMA_64BIT_WORD disabled, but in your code that you compiled, ARMA_64BIT_WORD is enabled. (or vice versa). The compiler should emit a big warning if you do that.
The actual issue is that libmlpack.so is compiled with uword set to an integer type of one length (uword is used by Armadillo objects) whereas you program is compiled with uword set to another size. Note that LogisticRegression is a template class and is thus compiled only in to your executable whereas LogisticRegressionFunction is not and therefore is compiled into libmlpack.so. Or is that libmlpack.dylib on OS X?
		</comment>
		<comment id='12' author='johnlees' date='2015-06-15T08:05:44Z'>
		No, there was no warning related to the issue, so far as I see. It was also libmlpack.dylib, not libmlpack.so. I will try to find away to enable ARMA_64BIT_WORD in compiling arma and tell you (so far editing config.hpp of arma does not seem to work for me).
		</comment>
		<comment id='13' author='johnlees' date='2015-06-15T13:40:12Z'>
		You may also add the line std::cout &lt;&lt; sizeof(arma::uword) in various places to confirm that this is the issue.  Another possible issue is that you are compiling mlpack and your test program against different versions of Armadillo.
		</comment>
		<comment id='14' author='johnlees' date='2015-06-15T17:24:46Z'>
		Very true! I get: size of arma::uword (first, my program; second, logistic_regression.hpp; third, in logistic_regression_function.cpp).
&lt;denchmark-code&gt;8
LG:8
LGF:4
&lt;/denchmark-code&gt;

Thanks! Now at least I know what the problem is. I will try to fix the armadillo installation. The lipo -info libaramadillo gives me x86_64 version. Do you also know how to fix this? Thanks, again.
Update: I still get the warning from cmake mkpack even when I check that libarmadillo is x86_64 by lipo -info, and I also uncommented the option in its config.hpp.
&lt;denchmark-code&gt;This is a 64-bit system, but Armadillo was compiled without 64-bit index
  support.  Consider recompiling Armadillo with ARMA_64BIT_WORD to enable
  64-bit indices (large matrix support).  MLPACK will still work without
  ARMA_64BIT_WORD defined, but will not scale to matrices with more than 4
  billion elements.
&lt;/denchmark-code&gt;

Update: it is OK now... Basically I have to edit both config.cmake and config.hpp. I will check if it works...
		</comment>
		<comment id='15' author='johnlees' date='2015-06-15T18:25:25Z'>
		OK. I managed to fix that error. What a pain! But I do learn something. Thanks a lot for your help...
		</comment>
		<comment id='16' author='johnlees' date='2015-06-16T14:03:17Z'>
		Sure, no problem.  I see this issue (different ARMA_64BIT_WORD settings) a decent amount, and I still haven't figured out the best way to handle it.  I think it is possible to check for this bug at compile-time (or at least at run-time) and present an error which is far more understandable than the way you encountered it, which often involves gdb and a lot of head-scratching.
		</comment>
		<comment id='17' author='johnlees' date='2015-06-18T16:02:49Z'>
		In the mean time, I would suggest you guys change the warning popping during configuration
&lt;denchmark-code&gt;CMake Warning at CMakeLists.txt:88 (message):
This is a 64-bit system, but Armadillo was compiled without 64-bit index
support.  Consider recompiling Armadillo with ARMA_64BIT_WORD to enable
64-bit indices (large matrix support).  MLPACK will still work without
ARMA_64BIT_WORD defined, but will not scale to matrices with more than 4
billion elements.
&lt;/denchmark-code&gt;

to something that sounds more "fatal" to catch people attention. Something like MLPACK will still work without ARMA_64BIT_WORD defined to "MLPACK may have problems (e.g. in logistic_regression_function) when ARMA_32BIT_WORD (or ARMA_64BIT_WORD) is not consistently configured". Something like that may be useful for users in tracing the issue.
		</comment>
		<comment id='18' author='johnlees' date='2015-06-18T16:58:20Z'>
		That warning doesn't indicate that failure will occur; that warning only indicates that ARMA_64BIT_WORD is not enabled in the Armadillo configuration, so very large matrices (with more than 2^32 elements) cannot be used.  That isn't a problem, necessarily; the problem comes when mlpack was compiled with a different word size setting than an application that links against Armadillo.  The warning that should be issued if mlpack was compiled without ARMA_64BIT_WORD and a program is being compiled with ARMA_64BIT_WORD reads this: (from src/mlpack/core/util/arma_config_check.hpp):
&lt;denchmark-code&gt;mlpack was compiled without ARMA_64BIT_WORD, but you are
compiling with ARMA_64BIT_WORD.  This will almost certainly cause irreparable
disaster.  Either disable ARMA_64BIT_WORD in your application which is using
mlpack, or, recompile mlpack against a version of Armadillo which has
ARMA_64BIT_WORD enabled.
&lt;/denchmark-code&gt;

Did you not see that warning when you compiled?  If you didn't, then maybe I need to do some debugging and figure out why...
		</comment>
		<comment id='19' author='johnlees' date='2015-06-23T14:12:26Z'>
		Sorry for replying late. It is likely that I did not get that warning. I will find some time slot to recompile armadillo with arma_64bit_word off and figure out things and tell you later.
		</comment>
		<comment id='20' author='johnlees' date='2015-06-23T14:49:28Z'>
		Yes, please let me know what you find out.  If you don't get that warning, then I need to look into why and fix it. :)
		</comment>
		<comment id='21' author='johnlees' date='2015-06-24T11:55:15Z'>
		I rebuilt aramadillo and confirm that I did not get the warning. I will also check if indeed the bug with iword is reproducible with this newly built mlpack.
&lt;denchmark-code&gt;cmake -D ARMADILLO_INCLUDE_DIR=/Volumes/SHome/Developer/lab/armadillo-5.200.1/here/Volumes/SHome/Developer/lab/armadillo-5.200.1/here/include/ -D ARMADILLO_LIBRARY=/Volumes/SHome/Developer/lab/armadillo-5.200.1/here/Volumes/SHome/Developer/lab/armadillo-5.200.1/here/lib/libarmadillo.dylib ../
-- The C compiler identification is GNU 5.1.0
-- The CXX compiler identification is GNU 5.1.0
-- Checking whether C compiler has -isysroot
-- Checking whether C compiler has -isysroot - yes
-- Checking whether C compiler supports OSX deployment target flag
-- Checking whether C compiler supports OSX deployment target flag - yes
-- Check for working C compiler: /usr/local/bin/gcc
-- Check for working C compiler: /usr/local/bin/gcc -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Detecting C compile features
-- Detecting C compile features - done
-- Checking whether CXX compiler has -isysroot
-- Checking whether CXX compiler has -isysroot - yes
-- Checking whether CXX compiler supports OSX deployment target flag
-- Checking whether CXX compiler supports OSX deployment target flag - yes
-- Check for working CXX compiler: /usr/local/bin/g++
-- Check for working CXX compiler: /usr/local/bin/g++ -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Found Armadillo: /Volumes/SHome/Developer/lab/armadillo-5.200.1/here/Volumes/SHome/Developer/lab/armadillo-5.200.1/here/lib/libarmadillo.dylib (found suitable version "5.200.1", required is "3.6.0") 
-- Armadillo libraries: /Volumes/SHome/Developer/lab/armadillo-5.200.1/here/Volumes/SHome/Developer/lab/armadillo-5.200.1/here/lib/libarmadillo.dylib
CMake Warning at CMakeLists.txt:88 (message):
  This is a 64-bit system, but Armadillo was compiled without 64-bit index
  support.  Consider recompiling Armadillo with ARMA_64BIT_WORD to enable
  64-bit indices (large matrix support).  MLPACK will still work without
  ARMA_64BIT_WORD defined, but will not scale to matrices with more than 4
  billion elements.


-- Found LibXml2: /usr/lib/libxml2.dylib (found suitable version "2.9.2", minimum required is "2.6.0") 
-- Boost version: 1.58.0
-- Found the following Boost libraries:
--   program_options
--   unit_test_framework
--   random
-- Found Subversion: /usr/bin/svn (found version "1.7.19") 
CMake Warning (dev) at src/mlpack/CMakeLists.txt:78 (add_custom_target):
  Policy CMP0037 is not set: Target names should not be reserved and should
  match a validity pattern.  Run "cmake --help-policy CMP0037" for policy
  details.  Use the cmake_policy command to set the policy and suppress this
  warning.

  The target name "test" is reserved or not valid for certain CMake features,
  such as generator expressions, and may result in undefined behavior.
This warning is for project developers.  Use -Wno-dev to suppress it.

-- Found Doxygen: /opt/local/bin/doxygen (found version "1.8.9.1") 
CMake Warning at CMakeLists.txt:292 (message):
  txt2man not found; man pages will not be generated.


-- Configuring done
CMake Warning (dev):
  Policy CMP0042 is not set: MACOSX_RPATH is enabled by default.  Run "cmake
  --help-policy CMP0042" for policy details.  Use the cmake_policy command to
  set the policy and suppress this warning.

  MACOSX_RPATH is not specified for the following targets:

   mlpack

This warning is for project developers.  Use -Wno-dev to suppress it.

-- Generating done
-- Build files have been written to: /Volumes/SHome/Developer/lab/mlpack-1.0.12/build
&lt;/denchmark-code&gt;

		</comment>
		<comment id='22' author='johnlees' date='2015-06-24T14:13:18Z'>
		The warning I'm referring to wouldn't be triggered by CMake or by building mlpack, but instead it occurs when you compile a program which #includes mlpack but has ARMA_64BIT_WORD set to a different configuration than when you compiled mlpack.
		</comment>
		<comment id='23' author='johnlees' date='2015-06-24T16:21:14Z'>
		Yes, I understand. I have just recompiled the program too and saw no related warnings and the segmentation fault is also happening (I hope I did not mess up the new libraries with the old includes). Anyway, I found no file src/mlpack/core/util/arma_config_check.hpp in my mlpack-1.0.12 package. I guess it is the newest version around.
		</comment>
		<comment id='24' author='johnlees' date='2015-06-24T17:22:17Z'>
		I'm sorry---I didn't realize you were using 1.0.12.  The git master branch will display this warning, but 1.0.12 will not.
		</comment>
		<comment id='25' author='johnlees' date='2015-08-19T22:50:39Z'>
		Regarding the 64-bit issue, I think we need somebody to bring it all together, at least to describe a fullproof way to recompile everything (3 things: arma, mlpack, your application) in a safe way.
For me, my test program (the linear regression program and the nearest neighbour program copied directly from the mlpack tutorials) crashed (segfault) until I changed my compilation from -std=c++11 to -std=c++03. That suggests that my arma and mlpack binaries were compatible with each other, and were 32-bit, but were incompatible with the test application if the test application was compiled with -std=c++11.
Here's what worked for me to get 64:

go back to the start with arma, fresh build directory
cmake for arma
edit the config.hpp (somewhere in build/tmp) to #define ARMA_64BIT_WORD
make
make install
go back to the start with mlpack, fresh build directory
cmake # won't complain about 64. If it does, restart and be sure to do step 3 correctly
make
make install
now my test applications work (regardless of c++03 or c++11) because ARMA_64BIT_WORD has been "baked into" everything, having been defined very early in the process.

		</comment>
	</comments>
</bug>