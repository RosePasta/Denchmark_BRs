<bug id='2097' author='tomjpsun' open_date='2019-11-27T06:36:03Z' closed_time='2019-12-10T02:53:02Z'>
	<summary>Link error caused by incorrect 'Libs' entry in mlpack.pc file</summary>
	<description>
&lt;denchmark-h:h4&gt;Issue description&lt;/denchmark-h&gt;

The Libs entry of mlpack.pc  seems to be incorrect, which causes the link error.
&lt;denchmark-h:h4&gt;Your environment&lt;/denchmark-h&gt;


version of mlpack: 3.2.2
operating system:macOS 10.14.6
compiler:clang++
version of dependencies (Boost/Armadillo):Boost 1.71, Armadillo 9.800
any other environment information you think is relevant:
clang version 9.0.0 (tags/RELEASE_900/final)
Target: x86_64-apple-darwin18.7.0

&lt;denchmark-h:h4&gt;Steps to reproduce&lt;/denchmark-h&gt;

Compile the following gist ( compile command is located at the first line )
&lt;denchmark-link:https://gist.github.com/tomjpsun/276b6c44046154c7ff11eb17b4c7dded&gt;test.cpp&lt;/denchmark-link&gt;

&lt;denchmark-h:h4&gt;Expected behavior&lt;/denchmark-h&gt;

Normally, the sample code should be built without problem.
&lt;denchmark-h:h4&gt;Actual behavior&lt;/denchmark-h&gt;

We get the build error message:
ld: library not found for -l/usr/local/lib/libarmadillo.dylib
	</description>
	<comments>
		<comment id='1' author='tomjpsun' date='2019-11-30T00:57:32Z'>
		Hey &lt;denchmark-link:https://github.com/tomjpsun&gt;@tomjpsun&lt;/denchmark-link&gt;
, thanks for reporting the issue!  I opened a PR in &lt;denchmark-link:https://github.com/mlpack/mlpack/pull/2101&gt;#2101&lt;/denchmark-link&gt;
.  The fix turns out to be easy. :)  Nice to know someone is getting use out of the pkgconfig files!  I think they make it a lot easier to link against all the mlpack dependencies.
		</comment>
		<comment id='2' author='tomjpsun' date='2019-12-02T15:12:53Z'>
		Fixed via &lt;denchmark-link:https://github.com/mlpack/mlpack/pull/2101&gt;#2101&lt;/denchmark-link&gt;
---let me know if that doesn't fix your issue. 
		</comment>
		<comment id='3' author='tomjpsun' date='2019-12-04T08:45:40Z'>
		Test on &lt;denchmark-link:https://github.com/mlpack/mlpack/commit/e35ef2e249be997f03afb51d78d509979583ec32&gt;Commit:e35ef2e24&lt;/denchmark-link&gt;

Generated mlpack.pc is:

Name: mlpack
Description: scalable C++ machine learning library
URL: http://www.mlpack.org/
Version: 3.2.2
Cflags:  -I/usr/local/include -I/usr/local/include/
Libs: -L/usr/local/lib -lm -L/usr/local/lib/ -larmadillo -lBoost::program_options &gt;-lBoost::unit_test_framework -lBoost::serialization -lmlpack

The armadillo is OK now, while the Boost libs have incorrect formats.
Since it is get from the CMake FindBoost call.
No idea about what 'mlpack' should fix.
		</comment>
		<comment id='4' author='tomjpsun' date='2019-12-04T16:46:56Z'>
		I guess you are using Boost 1.70? I am not sure why or how they rewrote the CMake scripts so significantly in that version. I have been working around it with the CMake option -DBoost_NO_BOOST_CMAKE=1.  I'll reopen this issue and look into some kind of solution that doesn't need that workaround.
		</comment>
		<comment id='5' author='tomjpsun' date='2019-12-05T04:52:08Z'>
		I opened &lt;denchmark-link:https://github.com/mlpack/mlpack/pull/2107&gt;#2107&lt;/denchmark-link&gt;
 to work around the Boost CMake issue.  My conclusion is that it would be a massive undertaking to revamp the CMake configuration, and it wouldn't be worth it, so I think we can just hardcode the workaround.
		</comment>
		<comment id='6' author='tomjpsun' date='2019-12-05T12:33:32Z'>
		IMHO, I agree with the descriptions in &lt;denchmark-link:https://github.com/mlpack/mlpack/pull/2107&gt;#2107&lt;/denchmark-link&gt;
 . For now this fix seems to be a good choice, thank you.
		</comment>
		<comment id='7' author='tomjpsun' date='2019-12-10T02:52:59Z'>
		 since &lt;denchmark-link:https://github.com/mlpack/mlpack/pull/2107&gt;#2107&lt;/denchmark-link&gt;
 is merged, I'll go ahead and close this.  Maybe someday we will redo the CMake configuration but it doesn't need to be today.
		</comment>
	</comments>
</bug>