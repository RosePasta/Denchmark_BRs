<bug id='1530' author='marcespie' open_date='2018-10-16T13:39:18Z' closed_time='2018-10-23T18:48:12Z'>
	<summary>cotire + armadillo config + ninja = disaster</summary>
	<description>
The cmake system must be missing some dependency somewhere.
I see the custom target that runs cmake -P CMake/CreateArmaConfigInfo.cmake
firing up, then erroring out because the preprocessed headers depend on armaconfig.
errors like this:
fatal error: file '/pobj/mlpack-3.0.3/mlpack-3.0.3/src/mlpack/core/util/arma_config.hpp' has been modified since the precompiled header '/pobj/mlpack-3.0.3/build-amd64/src/mlpack/tests/cotire/mlpack_test_CXX_prefix.hxx.pch' was built
note: please rebuild precompiled header '/pobj/mlpack-3.0.3/build-amd64/src/mlpack/tests/cotire/mlpack_test_CXX_prefix.hxx.pch'
To reproduce, you just need to run cmake -DCMAKE_MAKE_PROGRAM=ninja
and then have bad luck (Ninja does builds in random order in the absence of inter-dependence, so sometimes it builds, and sometimes not).
Scenario that breaks:


ninja fires up a cotire rule first, such as
[1/533] cd /pobj/mlpack-3.0.3/build-amd64 &amp;&amp; /usr/local/bin/cmake -DCOTIRE_BUILD_TYPE:STRING=Release -P /pobj/mlpack-3.0.3/mlpack-3.0.3/CMake/cotire.cmake combine /pobj/mlpack-3.0.3/build-amd64/src/mlpack/mlpack_CXX_cotire.cmake /pobj/mlpack-3.0.3/build-amd64/src/mlpack/cotire/mlpack_CXX_prefix.cxx /pobj/mlpack-3.0.3/mlpack-3.0.3/src/mlpack/prereqs.hpp


ninja fires up the armaconfig rule:
[8/533] cd /pobj/mlpack-3.0.3/mlpack-3.0.3 &amp;&amp; /usr/local/bin/cmake -D ARMADILLO_INCLUDE_DIR="/usr/local/include" -D ARMADILLO_VERSION_MAJOR="9" -D OPENMP_FOUND="FALSE" -P CMake/CreateArmaConfigInfo.cmake


the first compile rule that uses cotire breaks, because the precompiled header depends on the empty armaconfig that was generated before armaconfig was rebuilt.


For once, I don't know exactly where to add the dependency.
Having ninja builds work is rather important, because ninja can actually parallelize over subdirectories, and thus can be MUCH faster than say, gmake builds...
	</description>
	<comments>
		<comment id='1' author='marcespie' date='2018-10-16T15:49:49Z'>
		I'd never actually heard of or used Ninja, so thanks for pointing this one out.  I'm running some timing simulations now to see if it's better in our situation.  But I can't seem to reproduce the issue you were talking about (maybe I am not unlucky enough?).
I've been basically repeatedly running ninja clean &amp;&amp; ninja -j4 (is the -j4 unneeded? not sure), then seeing if it manages to compile the first few files.
Anyway I suspect that the issue is that the mlpack_headers target (not mlpack) needs to have a dependency on mlpack_arma_config.  Here's a patch... can you try applying this and seeing if it fixes the issue?  Alternately if I'm doing it wrong, let me know so I can try to reproduce the issue better. :)
&lt;denchmark-code&gt;diff --git a/CMakeLists.txt b/CMakeLists.txt
index 1b1818097..c362f4d5d 100644
--- a/CMakeLists.txt
+++ b/CMakeLists.txt
@@ -433,13 +433,13 @@ add_subdirectory(src/mlpack)
 # If we need to keep gitversion.hpp up to date, then make sure the mlpack target
 # depends on it.
 if (USING_GIT STREQUAL "YES")
-  add_dependencies(mlpack mlpack_gitversion)
+  add_dependencies(mlpack_headers mlpack_gitversion)
 endif ()

 # Make the mlpack_arma_config target depend on mlpack (we couldn't do this
 # before the add_subdirectory() call because the mlpack target didn't exist
 # before that).
-add_dependencies(mlpack mlpack_arma_config)
+add_dependencies(mlpack_headers mlpack_arma_config)

 # Make a target to generate the documentation.  If Doxygen isn't installed, then
 # I guess this option will just be unavailable.
&lt;/denchmark-code&gt;

		</comment>
		<comment id='2' author='marcespie' date='2018-10-16T16:26:06Z'>
		Finished my quick simulation:
&lt;denchmark-code&gt;$ time make -j8
&lt;...a whole lotta output...&gt;

real    15m41.317s
user    113m3.754s
sys     3m57.381s
&lt;/denchmark-code&gt;

&lt;denchmark-code&gt;$ time ninja -j8
&lt;...a whole lotta slightly differently formatted output...&gt;

real    15m23.780s
user    112m47.118s
sys     3m50.600s
&lt;/denchmark-code&gt;

So, looks like Ninja doesn't actually save us too much here.  I imagine that's because the build time is so completely dominated by compilation.  That's not to say getting Ninja working right isn't important, just, I was curious so here is what I found. :)
		</comment>
		<comment id='3' author='marcespie' date='2018-10-16T16:43:30Z'>
		On Tue, Oct 16, 2018 at 04:26:13PM +0000, Ryan Curtin wrote:

    Finished my quick simulation:
 $ time make -j8
 &lt;...a whole lotta output...&gt;

 real    15m41.317s
 user    113m3.754s
 sys     3m57.381s

 $ ninja -j8
 &lt;...a whole lotta slightly differently formatted output...&gt;

 real    15m23.780s
 user    112m47.118s
 sys     3m50.600s

    So, looks like Ninja doesn't actually save us too much here. I imagine
    that's because the build time is so completely dominated by
    compilation. That's not to say getting Ninja working right isn't
    important, just, I was curious so here is what I found. :)
There are instances of other projects where ninja  obliterates gnu-make.
For instance, chromium build time is almost *halved* by switching to ninja.

(also, ninja is really good at catching missing deps,
since its does things globally).
		</comment>
		<comment id='4' author='marcespie' date='2018-10-16T16:45:17Z'>
		Good to know---I'll definitely keep it in mind for CMake projects in the future.  In any case it would be hard to believe that Ninja would ever be slower than GNU make. :)
		</comment>
		<comment id='5' author='marcespie' date='2018-10-18T12:24:30Z'>
		I can confirm this fixes problems with ninja
		</comment>
		<comment id='6' author='marcespie' date='2018-10-18T15:01:51Z'>
		Thanks!  I opened &lt;denchmark-link:https://github.com/mlpack/mlpack/pull/1537&gt;#1537&lt;/denchmark-link&gt;
 with the fix.
		</comment>
		<comment id='7' author='marcespie' date='2018-10-23T18:48:12Z'>
		&lt;denchmark-link:https://github.com/mlpack/mlpack/pull/1537&gt;#1537&lt;/denchmark-link&gt;
 is merged so this is now fixed.  Thanks again for the report. 
		</comment>
	</comments>
</bug>