<bug id='783' author='rcurtin' open_date='2016-09-14T03:31:14Z' closed_time='2016-10-07T20:08:13Z'>
	<summary>RandomizedSVD tests sometimes have failing LU decomposition</summary>
	<description>
I noticed that the test RandomizedSVDTest/RandomizedSVDReconstructionError is sometimes failing.  It's straightforward to reproduce:

Add math::RandomSeed(std::time(NULL)) to the top of the test in randomized_svd_test.cpp.
Rebuild mlpack_test and run as while(true); do bin/mlpack_test -t RandomizedSVDTest; sleep 1; done
Wait a few trials and it will probably fail.  On my system it fails maybe 10% of the time.

I see that the first several lines of the test appear to be written in order to carefully generate a positive definite non-square matrix, with singular values [1 0.1 0.01].  But it seems as though the singular values are not preserved when the matrix is centered.  If I add the following code:
&lt;denchmark-code&gt;std::cout &lt;&lt; "data: " &lt;&lt; arma::svd(data).t();
std::cout &lt;&lt; "centered data: " &lt;&lt; arma::svd(centeredData).t();
&lt;/denchmark-code&gt;

Then I get output like this when I run the test:
&lt;denchmark-code&gt;Running 1 test case...
data:    1.0000   0.1000   0.0100
centered data:    2.5269e-01   3.5332e-02   5.7466e-17

warning: lu(): decomposition failed

error: matrix multiplication: incompatible matrix dimensions: 10x3 and 0x0
unknown location(0): fatal error in "RandomizedSVDReconstructionError": std::logic_error: matrix multiplication: incompatible matrix dimensions: 10x3 and 0x0

*** 1 failure detected in test suite "mlpackTest"
&lt;/denchmark-code&gt;

It doesn't look much different when it's not failing:
&lt;denchmark-code&gt;Running 1 test case...
data:    1.0000   0.1000   0.0100
centered data:    9.7937e-01   9.7828e-02   5.3800e-17
&lt;/denchmark-code&gt;

Is it possible the data centering operation needs to be changed or ignored altogether?  I haven't thought about it in much detail since it is late right now... &lt;denchmark-link:https://github.com/zoq&gt;@zoq&lt;/denchmark-link&gt;
, any ideas here?  You originally wrote this code so maybe you have a quick fix. :)
	</description>
	<comments>
		<comment id='1' author='rcurtin' date='2016-09-14T13:33:17Z'>
		I think a simple solution would be to restart once lu failed and to use another random matrix to obtain Q. I'll take a look at the issue in the next days.
		</comment>
		<comment id='2' author='rcurtin' date='2016-09-14T14:10:16Z'>
		Yeah, that's a definite possibility.  I tried removing the call to center the data, but that just causes the test to fail every time.  I wonder, if we modify the smallest singular value in the centeredData matrix and then reconstruct it, could this work?  I am not familiar enough with the algorithm to know what its assumptions are on the input matrix though.
		</comment>
		<comment id='3' author='rcurtin' date='2016-10-07T19:40:46Z'>
		Should we call this fixed with &lt;denchmark-link:https://github.com/mlpack/mlpack/commit/635e37c4de03cdabfc4b493ad2ab5e9e51f9823e&gt;635e37c&lt;/denchmark-link&gt;
?
		</comment>
		<comment id='4' author='rcurtin' date='2016-10-07T20:08:13Z'>
		Ahh, I have forgotten to write a response, you are right it's fixed in &lt;denchmark-link:https://github.com/mlpack/mlpack/commit/635e37c4de03cdabfc4b493ad2ab5e9e51f9823e&gt;635e37c&lt;/denchmark-link&gt;
.
		</comment>
	</comments>
</bug>