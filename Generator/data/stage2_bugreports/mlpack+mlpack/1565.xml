<bug id='1565' author='barak' open_date='2018-11-13T16:23:31Z' closed_time='2019-05-12T00:17:34Z'>
	<summary>option inconsistency --output_file vs --predictions_file</summary>
	<description>
Why is it

mlpack_perceptron --output_file and
mlpack_logistic --output_file but
mlpack_decision_tree --predictions_file?

	</description>
	<comments>
		<comment id='1' author='barak' date='2018-11-13T16:50:26Z'>
		Oversight. :)
I think that we should change all to predictions_file, but we have to do this in a reverse-compatible way until mlpack 4.0.0 when we can remove the output_file options.
If anyone is looking for a new task to do, I think this is a good one:

Find all bindings in src/mlpack/methods/ that have some line like PARAM_MATRIX_OUT("output", ...) where the output matrix is some output predictions.  That's probably just mlpack_perceptron and mlpack_logistic_regression but there may be some others so we should check them all.
Add an option PARAM_MATRIX_OUT("predictions", ...) that does the same thing.
Add a comment pointing out that output can be removed in mlpack 4.0.0, and modify the documentation for the output option to point out that it is deprecated.
Ensure that, for now, the output matrix for predictions and output is identical.
Update any tests in src/mlpack/tests/main_tests/ to make sure that predictions and output are the same.

		</comment>
		<comment id='2' author='barak' date='2018-11-14T12:25:23Z'>
		"We can solve any problem by introducing an extra level of indirection."
-David J. Wheeler's Fundamental Theorem of Software Engineering
Maybe all the option strings should be #define'ed in one .h file, and adopt the convention that all option processing must use only those defined macros? This would encourage people to check if there is already an appropriate option, and would expose newly coined ones, and would avoid gratuitous issues like US-vs-UK spelling differences, typos, etc.
		</comment>
		<comment id='3' author='barak' date='2018-11-24T06:01:29Z'>
		&lt;denchmark-link:https://github.com/rcurtin&gt;@rcurtin&lt;/denchmark-link&gt;
 Can i take up this issue?
		</comment>
		<comment id='4' author='barak' date='2018-11-25T05:50:30Z'>
		I've found all occurences of PARAM_MATRIX_OUT in src/mlpack/methods/ which are as follows:
kmeans/kmeans_main.cpp:PARAM_MATRIX_OUT
kmeans/kmeans_main.cpp:PARAM_MATRIX_OUT
lmnn/lmnn_main.cpp:PARAM_MATRIX_OUT
lmnn/lmnn_main.cpp:PARAM_MATRIX_OUT
lmnn/lmnn_main.cpp:PARAM_MATRIX_OUT
decision_tree/decision_tree_main.cpp:PARAM_MATRIX_OUT
det/det_main.cpp:PARAM_MATRIX_OUT
det/det_main.cpp:PARAM_MATRIX_OUT
det/det_main.cpp:PARAM_MATRIX_OUT
radical/radical_main.cpp:PARAM_MATRIX_OUT
radical/radical_main.cpp:PARAM_MATRIX_OUT
rann/krann_main.cpp:PARAM_MATRIX_OUT
pca/pca_main.cpp:PARAM_MATRIX_OUT
logistic_regression/logistic_regression_main.cpp:PARAM_MATRIX_OUT
approx_kfn/approx_kfn_main.cpp:PARAM_MATRIX_OUT
nmf/nmf_main.cpp:PARAM_MATRIX_OUT
nmf/nmf_main.cpp:PARAM_MATRIX_OUT
fastmks/fastmks_main.cpp:PARAM_MATRIX_OUT
preprocess/preprocess_binarize_main.cpp:PARAM_MATRIX_OUT
preprocess/preprocess_split_main.cpp:PARAM_MATRIX_OUT
preprocess/preprocess_split_main.cpp:PARAM_MATRIX_OUT
gmm/gmm_probability_main.cpp:PARAM_MATRIX_OUT
gmm/gmm_generate_main.cpp:PARAM_MATRIX_OUT
hoeffding_trees/hoeffding_tree_main.cpp:PARAM_MATRIX_OUT
nca/nca_main.cpp:PARAM_MATRIX_OUT
sparse_coding/sparse_coding_main.cpp:PARAM_MATRIX_OUT
sparse_coding/sparse_coding_main.cpp:PARAM_MATRIX_OUT
neighbor_search/knn_main.cpp:PARAM_MATRIX_OUT
neighbor_search/kfn_main.cpp:PARAM_MATRIX_OUT
mean_shift/mean_shift_main.cpp:PARAM_MATRIX_OUT
mean_shift/mean_shift_main.cpp:PARAM_MATRIX_OUT
kernel_pca/kernel_pca_main.cpp:PARAM_MATRIX_OUT
mvu/mvu_main.cpp:PARAM_MATRIX_OUT
emst/emst_main.cpp:PARAM_MATRIX_OUT
naive_bayes/nbc_main.cpp:PARAM_MATRIX_OUT
random_forest/random_forest_main.cpp:PARAM_MATRIX_OUT
dbscan/dbscan_main.cpp:PARAM_MATRIX_OUT
hmm/hmm_generate_main.cpp:PARAM_MATRIX_OUT
local_coordinate_coding/local_coordinate_coding_main.cpp:PARAM_MATRIX_OUT
local_coordinate_coding/local_coordinate_coding_main.cpp:PARAM_MATRIX_OUT
lsh/lsh_main.cpp:PARAM_MATRIX_OUT
There are some examples like PARAM_MATRIX_OUT("distances", ...). Do we need the changes for these examples too ?
or is it only for PARAM_MATRIX_OUT("output", ..)
&lt;denchmark-link:https://github.com/rcurtin&gt;@rcurtin&lt;/denchmark-link&gt;

Could I take up the issue ?
		</comment>
		<comment id='5' author='barak' date='2018-11-26T14:13:28Z'>
		Hi, &lt;denchmark-link:https://github.com/rcurtin&gt;@rcurtin&lt;/denchmark-link&gt;

I have closely been following mlpack for a few months and using it in my projects as well. I am really eager to start contributing to the organization. But as a beginner, I felt this is the best fit issue that I could fix and start collaborating to mlpack. Could I take up this issue please?
		</comment>
		<comment id='6' author='barak' date='2018-11-26T16:54:23Z'>
		&lt;denchmark-link:https://github.com/e-aakash&gt;@e-aakash&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/Hemal-Mamtora&gt;@Hemal-Mamtora&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/ShyamPandya&gt;@ShyamPandya&lt;/denchmark-link&gt;
: It doesn't make sense for me to give permission to a certain person to work on the issue.  In the end the only thing that really matters from my end is that the issue is solved, so whatever PR comes around first is the one I'll review first.  This one might be too simple to work together on, but maybe it makes sense to coordinate efforts so you are not duplicating work.
&lt;denchmark-link:https://github.com/barak&gt;@barak&lt;/denchmark-link&gt;
: I see where you are coming from, but I feel like a system like that might be a little too intensive to set up, and I don't know if there is actually enough similarity between all the programs to enforce only a small set of possible option names. :(  Probably better might be to run something like  before a release.  (I think that will work... didn't actually try it though, just wrote it here...)
		</comment>
		<comment id='7' author='barak' date='2018-11-27T08:36:35Z'>
		&lt;denchmark-link:https://github.com/rcurtin&gt;@rcurtin&lt;/denchmark-link&gt;
 Well people could always add a new option to that file. The idea is just to make a central place where all option names are listed, to make it easier to reuse an existing one when appropriate rather than coining a new one. (As you might imagine, I hit this when trying to write an shell script to apply a variety of methods to a single dataset automatically. This was intended as an example.)
		</comment>
		<comment id='8' author='barak' date='2018-11-27T23:26:45Z'>
		
(As you might imagine, I hit this when trying to write an shell script to apply a variety of methods to a single dataset automatically. This was intended as an example.)

This is a good point, but the automatic binding system is already pretty complex and I'd like to avoid adding some additional file that people have to go consult to understand the options in each binding.  (In my opinion, as it currently stands, it's possible to read something like cf_main.cpp and understand it at a high level without needing to go dig through other parts of the codebase.  If we can keep it like that it would be great.)
I used a modified version of the simple bash script I wrote above to get the full list of options in all the different bindings and I count 184 different option names.  I see a few cases where options could be changed for consistency (output_predictions -&gt; predictions and output_probabilities -&gt; probabilities and output_probs -&gt; probabilities), but it's not immediately clear to me what to do in every case.
Maybe the best thing to do is add some kind of review checklist for adding new methods, so that someone will check to ensure that the names used for options match those used in other methods.
		</comment>
		<comment id='9' author='barak' date='2018-11-28T22:51:30Z'>
		Yeah, a checklist, and a shell script to help scan for outliers and such, seems like a very sensible approach.
Another idea, a bit heavier-handed, that could be used in addition, would be to add each new command to a shell script that runs each command against whichever of some small set of tiny datasets it can work on. As a sort of last-ditch reality check plus command-line option revelation.
		</comment>
		<comment id='10' author='barak' date='2018-12-09T08:50:09Z'>
		
Oversight. :)
I think that we should change all to predictions_file, but we have to do this in a reverse-compatible way until mlpack 4.0.0 when we can remove the output_file options.
If anyone is looking for a new task to do, I think this is a good one:

Find all bindings in src/mlpack/methods/ that have some line like PARAM_MATRIX_OUT("output", ...) where the output matrix is some output predictions.  That's probably just mlpack_perceptron and mlpack_logistic_regression but there may be some others so we should check them all.
Add an option PARAM_MATRIX_OUT("predictions", ...) that does the same thing.
Add a comment pointing out that output can be removed in mlpack 4.0.0, and modify the documentation for the output option to point out that it is deprecated.
Ensure that, for now, the output matrix for predictions and output is identical.
Update any tests in src/mlpack/tests/main_tests/ to make sure that predictions and output are the same.


Doubts :

"Modify the documentation showing depracated." Where is the documentation to be modified?
The string "output" seems to be used in the code (for example in kmeans_main.cpp: line no. 256, 272, 293, 295, 303, 316) etc.
Do we need to modify all those to "predictions"?

		</comment>
		<comment id='11' author='barak' date='2018-12-09T15:02:50Z'>
		&lt;denchmark-link:https://github.com/Hemal-Mamtora&gt;@Hemal-Mamtora&lt;/denchmark-link&gt;
: &lt;denchmark-link:https://github.com/mlpack/mlpack/pull/1582&gt;#1582&lt;/denchmark-link&gt;
 is open and I reviewed it, so maybe you could base some work off that.  Perhaps that would clarify things?
It would probably be worthwhile to look through one of the bindings (like kmeans_main.cpp) to get an idea of how it is structured.  Specifically this issue has to do with the PARAM_... macros, which are what define the parameters used by the binding.
		</comment>
		<comment id='12' author='barak' date='2019-03-02T05:26:12Z'>
		This issue has been automatically marked as stale because it has not had any recent activity.  It will be closed in 7 days if no further activity occurs.  Thank you for your contributions! 👍
		</comment>
		<comment id='13' author='barak' date='2019-03-09T06:03:59Z'>
		&lt;denchmark-link:https://github.com/rcurtin&gt;@rcurtin&lt;/denchmark-link&gt;
 Should this be kept open?
		</comment>
		<comment id='14' author='barak' date='2019-03-09T14:51:20Z'>
		Yeah, let's keep this one open.  I forgot to mark it with the relevant tag, sorry.
		</comment>
		<comment id='15' author='barak' date='2019-05-12T00:17:34Z'>
		Thanks &lt;denchmark-link:https://github.com/jeffin143&gt;@jeffin143&lt;/denchmark-link&gt;
 and &lt;denchmark-link:https://github.com/Hemal-Mamtora&gt;@Hemal-Mamtora&lt;/denchmark-link&gt;
.  It looks to me like all of the classifiers now have  as output not .  So we now have consistency. 
		</comment>
	</comments>
</bug>