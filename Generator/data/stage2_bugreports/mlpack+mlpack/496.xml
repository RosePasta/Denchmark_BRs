<bug id='496' author='davudadiguezel' open_date='2015-12-15T16:21:50Z' closed_time='2016-02-01T14:53:51Z'>
	<summary>hmm_train failed to converge</summary>
	<description>
Hi,
I have trouble running on some of my files. I get this error message:
&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

INFO ] EMFit::Estimate(): iteration 251, log-likelihood -163.419.
[INFO ] EMFit::Estimate(): iteration 252, log-likelihood -163.419.
[INFO ] GMM::Estimate(): log-likelihood of trained GMM is -163.419.
[INFO ] Cluster 6 is empty.
[DEBUG] Point 0 assigned to empty cluster 6.
[INFO ] Cluster 7 is empty.
[DEBUG] Point 1 assigned to empty cluster 7.
[INFO ] KMeans::Cluster(): iteration 1, residual inf.
[INFO ] Cluster 7 is empty.
[DEBUG] Point 32 assigned to empty cluster 7.
[INFO ] KMeans::Cluster(): iteration 2, residual inf.
[INFO ] KMeans::Cluster(): iteration 3, residual 0.269213.
[INFO ] KMeans::Cluster(): iteration 4, residual 0.
[INFO ] KMeans::Cluster(): converged after 4 iterations.
[INFO ] 2240 distance calculations.
[DEBUG] Covariance matrix is not positive definite.  Adding perturbation.
[DEBUG] Covariance matrix is not positive definite.  Adding perturbation.
error: chol(): failed to converge
terminate called after throwing an instance of 'std::runtime_error'
what():  chol(): failed to converge
Program received signal SIGABRT, Aborted.
0x00007ffff64e4cc9 in __GI_raise (sig=sig@entry=6) at ../nptl/sysdeps/unix/sysv/linux/raise.c:56
56      ../nptl/sysdeps/unix/sysv/linux/raise.c: No such file or directory.
(gdb) bt
#0  0x00007ffff64e4cc9 in __GI_raise (sig=sig@entry=6) at ../nptl/sysdeps/unix/sysv/linux/raise.c:56
&lt;denchmark-link:https://github.com/mlpack/mlpack/issues/1&gt;#1&lt;/denchmark-link&gt;
  0x00007ffff64e80d8 in __GI_abort () at abort.c:89
&lt;denchmark-link:https://github.com/mlpack/mlpack/pull/2&gt;#2&lt;/denchmark-link&gt;
  0x00007ffff6def535 in __gnu_cxx::__verbose_terminate_handler() () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
&lt;denchmark-link:https://github.com/mlpack/mlpack/issues/3&gt;#3&lt;/denchmark-link&gt;
  0x00007ffff6ded6d6 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
&lt;denchmark-link:https://github.com/mlpack/mlpack/pull/4&gt;#4&lt;/denchmark-link&gt;
  0x00007ffff6ded703 in std::terminate() () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
&lt;denchmark-link:https://github.com/mlpack/mlpack/pull/5&gt;#5&lt;/denchmark-link&gt;
  0x00007ffff6ded922 in __cxa_throw () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
&lt;denchmark-link:https://github.com/mlpack/mlpack/issues/6&gt;#6&lt;/denchmark-link&gt;
  0x00007ffff799e144 in arma::arma_bad&lt;char [27]&gt; (x=..., hurl=true) at /usr/include/armadillo_bits/debug.hpp:177
&lt;denchmark-link:https://github.com/mlpack/mlpack/issues/7&gt;#7&lt;/denchmark-link&gt;
  0x00007ffff79a9387 in arma::op_chol::applyarma::Mat (out=..., X=...) at /usr/include/armadillo_bits/op_chol_meat.hpp:26
&lt;denchmark-link:https://github.com/mlpack/mlpack/issues/8&gt;#8&lt;/denchmark-link&gt;
  0x00007ffff79a6809 in arma::Mat::Matarma::Mat&lt;double, arma::op_chol&gt; (this=0x7fffffffb300, X=...) at /usr/include/armadillo_bits/Mat_meat.hpp:3932
&lt;denchmark-link:https://github.com/mlpack/mlpack/issues/9&gt;#9&lt;/denchmark-link&gt;
  0x00007ffff79a59ad in arma::Proxyarma::Op&lt;arma::Mat&lt;double, arma::op_chol&gt; &gt;::Proxy (this=0x7fffffffb300, A=...) at /usr/include/armadillo_bits/Proxy.hpp:309
&lt;denchmark-link:https://github.com/mlpack/mlpack/issues/10&gt;#10&lt;/denchmark-link&gt;
 0x00007ffff79a2ba3 in arma::op_strans::apply_proxyarma::Op&lt;arma::Mat&lt;double, arma::op_chol&gt; &gt; (out=..., X=...) at /usr/include/armadillo_bits/op_strans_meat.hpp:220
&lt;denchmark-link:https://github.com/mlpack/mlpack/issues/11&gt;#11&lt;/denchmark-link&gt;
 0x00007ffff799f88e in arma::op_htrans::applyarma::Op&lt;arma::Mat&lt;double, arma::op_chol&gt; &gt; (out=..., in=..., junk=0x0) at /usr/include/armadillo_bits/op_htrans_meat.hpp:265
&lt;denchmark-link:https://github.com/mlpack/mlpack/issues/12&gt;#12&lt;/denchmark-link&gt;
 0x00007ffff799e9e2 in arma::Mat::operator=arma::Op&lt;arma::Mat&lt;double, arma::op_chol&gt;, arma::op_htrans&gt; (this=0x8fbc00, X=...) at /usr/include/armadillo_bits/Mat_meat.hpp:3948
&lt;denchmark-link:https://github.com/mlpack/mlpack/issues/13&gt;#13&lt;/denchmark-link&gt;
 0x00007ffff799b7ab in mlpack::distribution::GaussianDistribution::FactorCovariance (this=0x8fbac0) at /org/share/home/adigueze/mlpack-master/src/mlpack/core/dists/gaussian_distribution.cpp:38
&lt;denchmark-link:https://github.com/mlpack/mlpack/issues/14&gt;#14&lt;/denchmark-link&gt;
 0x00007ffff799b732 in mlpack::distribution::GaussianDistribution::Covariance(arma::Mat&amp;&amp;) (this=0x8fbac0, covariance=&lt;unknown type in /org/share/home/adigueze/mlpack-master/bin/lib/libmlpack.so.1, CU 0x21ab0, DIE 0x52374&gt;)
&lt;denchmark-code&gt;at /org/share/home/adigueze/mlpack-master/src/mlpack/core/dists/gaussian_distribution.cpp:30
&lt;/denchmark-code&gt;

&lt;denchmark-link:https://github.com/mlpack/mlpack/issues/15&gt;#15&lt;/denchmark-link&gt;
 0x00000000005fe597 in mlpack::gmm::EMFit&lt;mlpack::kmeans::KMeans&lt;mlpack::metric::LMetric&lt;2, true&gt;, mlpack::kmeans::RandomPartition, mlpack::kmeans::MaxVarianceNewCluster, mlpack::kmeans::NaiveKMeans, arma::Mat &gt;, mlpack::gmm::PositiveDefiniteConstraint&gt;::InitialClustering (this=0x8fc280, observations=..., dists=..., weights=...) at /org/share/home/adigueze/mlpack-master/src/mlpack/../mlpack/methods/gmm/em_fit_impl.hpp:264
&lt;denchmark-link:https://github.com/mlpack/mlpack/issues/16&gt;#16&lt;/denchmark-link&gt;
 0x00000000005f4472 in mlpack::gmm::EMFit&lt;mlpack::kmeans::KMeans&lt;mlpack::metric::LMetric&lt;2, true&gt;, mlpack::kmeans::RandomPartition, mlpack::kmeans::MaxVarianceNewCluster, mlpack::kmeans::NaiveKMeans, arma::Mat &gt;, mlpack::gmm::PositiveDefiniteConstraint&gt;::Estimate (this=0x8fc280, observations=..., dists=..., weights=..., useInitialModel=false) at /org/share/home/adigueze/mlpack-master/src/mlpack/../mlpack/methods/gmm/em_fit_impl.hpp:39
&lt;denchmark-link:https://github.com/mlpack/mlpack/issues/17&gt;#17&lt;/denchmark-link&gt;
 0x00000000005e9027 in mlpack::gmm::GMM&lt;mlpack::gmm::EMFit&lt;mlpack::kmeans::KMeans&lt;mlpack::metric::LMetric&lt;2, true&gt;, mlpack::kmeans::RandomPartition, mlpack::kmeans::MaxVarianceNewCluster, mlpack::kmeans::NaiveKMeans, arma::Mat &gt;, mlpack::gmm::PositiveDefiniteConstraint&gt; &gt;::Estimate (this=0x8f68a0, observations=..., trials=1, useExistingModel=false) at /org/share/home/adigueze/mlpack-master/src/mlpack/../mlpack/methods/gmm/gmm_impl.hpp:190
&lt;denchmark-link:https://github.com/mlpack/mlpack/issues/18&gt;#18&lt;/denchmark-link&gt;
 0x00000000005dd382 in mlpack::hmm::HMM&lt;mlpack::gmm::GMM&lt;mlpack::gmm::EMFit&lt;mlpack::kmeans::KMeans&lt;mlpack::metric::LMetric&lt;2, true&gt;, mlpack::kmeans::RandomPartition, mlpack::kmeans::MaxVarianceNewCluster, mlpack::kmeans::NaiveKMeans, arma::Mat &gt;, mlpack::gmm::PositiveDefiniteConstraint&gt; &gt; &gt;::Train (this=0x7fffffffd770, dataSeq=..., stateSeq=...) at /org/share/home/adigueze/mlpack-master/src/mlpack/methods/hmm/hmm_impl.hpp:276
&lt;denchmark-link:https://github.com/mlpack/mlpack/issues/19&gt;#19&lt;/denchmark-link&gt;
 0x00000000005d1543 in Train::Apply&lt;mlpack::hmm::HMM&lt;mlpack::gmm::GMM&lt;mlpack::gmm::EMFit&lt;mlpack::kmeans::KMeans&lt;mlpack::metric::LMetric&lt;2, true&gt;, mlpack::kmeans::RandomPartition, mlpack::kmeans::MaxVarianceNewCluster, mlpack::kmeans::NaiveKMeans, arma::Mat &gt;, mlpack::gmm::PositiveDefiniteConstraint&gt; &gt; &gt; &gt; (hmm=..., trainSeqPtr=0x7fffffffd400) at /org/share/home/adigueze/mlpack-master/src/mlpack/methods/hmm/hmm_train_main.cpp:170
&lt;denchmark-link:https://github.com/mlpack/mlpack/issues/20&gt;#20&lt;/denchmark-link&gt;
 0x00000000005c3415 in main (argc=14, argv=0x7fffffffe128) at /org/share/home/adigueze/mlpack-master/src/mlpack/methods/hmm/hmm_train_main.cpp:344
&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

Here is the input file and the labels I use:
&lt;denchmark-link:https://github.com/mlpack/mlpack/files/62846/obsShoulderLeft.csv.txt&gt;obsShoulderLeft.csv.txt&lt;/denchmark-link&gt;

&lt;denchmark-link:https://github.com/mlpack/mlpack/files/62847/labels.csv.txt&gt;labels.csv.txt&lt;/denchmark-link&gt;

I run hmm_train like this:
hmm_train  -v -i labels.csv -o runNormalizedTest.xml -t gmm -g 10 -n 13
I guess, the error means that the EM algorithm does not converge. I normalized my data, but this didn't change anything. Is there anything else I can do? Or is there anything wrong with my data? On other files everything works fine. Any help is very welcome.
Greetings
davud
	</description>
	<comments>
		<comment id='1' author='davudadiguezel' date='2015-12-18T09:32:54Z'>
		I noticed, that when I train each column separately, everything runs fine. Some column combinations run fine, too. So I am really confused.
		</comment>
		<comment id='2' author='davudadiguezel' date='2015-12-18T20:33:01Z'>
		Hi there,
Sorry for the slow response.  It took me a while to dig into this one.  I believe that what was happening here was that some particular Gaussian from one of the GMMs that make up your HMM emission distribution had a covariance matrix which wasn't positive definite (or, positive definite enough for chol()).  Previously, this issue had been handled by the file src/mlpack/methods/gmm/positive_definite_constraint.hpp [1], which, at the end of each EM algorithm iteration during GMM training, would add small amounts to the diagonal until the determinant was greater than 0 (and thus the matrix would be positive definite).
However, what seemed to actually be occurring was that the determinant was indeed greater than 0, but because of floating point errors (I theorize) the call to  would fail.  So, in &lt;denchmark-link:https://github.com/mlpack/mlpack/commit/e08a8ff534e2c8c153007c51bc55a5e0ac69c9a6&gt;e08a8ff&lt;/denchmark-link&gt;
 I committed a better strategy for checking positive definiteness: instead of using  and forcing the determinant to be greater than some small value like 1e-50, we just call  to make sure it converges, and if not, add to the diagonal.  This guarantees that when the  is applied, the covariance matrix can be decomposed with , and therefore the problem you're having, you shouldn't have anymore (assuming you update to git master).
As a side note, I am about to rename all of the executables to be prefixed with , so  will become , as per &lt;denchmark-link:https://github.com/mlpack/mlpack/issues/229&gt;#229&lt;/denchmark-link&gt;
, in the next couple days or so, so if you update and rebuild mlpack, you may notice that the names have changed.  But no compatibility breakage or anything, so there shouldn't be any issues -- just giving you a heads up. :)
If my big long explanation turns out to have been wrong or my fix didn't actually fix your issue, feel free to reopen... (I really hope it is a fix, though, it took me a while to dig to the bottom of that one.) :)
[1] &lt;denchmark-link:https://github.com/mlpack/mlpack/blob/master/src/mlpack/methods/gmm/positive_definite_constraint.hpp&gt;https://github.com/mlpack/mlpack/blob/master/src/mlpack/methods/gmm/positive_definite_constraint.hpp&lt;/denchmark-link&gt;

		</comment>
		<comment id='3' author='davudadiguezel' date='2015-12-21T09:49:12Z'>
		hey Ryan,
just finished a successful training! Thanks for the great work!
Greetings
Davud
		</comment>
		<comment id='4' author='davudadiguezel' date='2015-12-22T09:08:13Z'>
		hey ryan,
I had some more tests running and I experienced problems with the fix. It looks like the program is just running forever:
&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

[DEBUG] Covariance matrix is not positive definite.  Adding perturbation.
[DEBUG] Covariance matrix is not positive definite.  Adding perturbation.
[DEBUG] Covariance matrix is not positive definite.  Adding perturbation.
[DEBUG] Covariance matrix is not positive definite.  Adding perturbation.
[INFO ] EMFit::Estimate(): iteration 7, log-likelihood 34547.2.
[DEBUG] Covariance matrix is not positive definite.  Adding perturbation.
[DEBUG] Covariance matrix is not positive definite.  Adding perturbation.
[DEBUG] Covariance matrix is not positive definite.  Adding perturbation.
[DEBUG] Covariance matrix is not positive definite.  Adding perturbation.
[DEBUG] Covariance matrix is not positive definite.  Adding perturbation.
[DEBUG] Covariance matrix is not positive definite.  Adding perturbation.
[DEBUG] Covariance matrix is not positive definite.  Adding perturbation.
[DEBUG] Covariance matrix is not positive definite.  Adding perturbation.
[DEBUG] Covariance matrix is not positive definite.  Adding perturbation.
[DEBUG] Covariance matrix is not positive definite.  Adding perturbation.
[DEBUG] Covariance matrix is not positive definite.  Adding perturbation.
[INFO ] EMFit::Estimate(): iteration 8, log-likelihood inf.
[DEBUG] Covariance matrix is not positive definite.  Adding perturbation.
[DEBUG] Covariance matrix is not positive definite.  Adding perturbation.
[DEBUG] Covariance matrix is not positive definite.  Adding perturbation.
[DEBUG] Covariance matrix is not positive definite.  Adding perturbation.
[DEBUG] Covariance matrix is not positive definite.  Adding perturbation.
[DEBUG] Covariance matrix is not positive definite.  Adding perturbation.
&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

It stayed like this all night. Do you have any idea?
Greetings and merry christmas
Davud
		</comment>
		<comment id='5' author='davudadiguezel' date='2015-12-22T19:01:53Z'>
		Hm, I think what's happening here is a covariance matrix is ending up full of NaNs.  I'm not sure why, but I'll look into it and see if I can reproduce it.  I'd suggest that maybe your GMM has too many Gaussians in it... maybe fewer Gaussians will cause this problem less often?
		</comment>
		<comment id='6' author='davudadiguezel' date='2016-01-04T11:44:19Z'>
		Hi Ryan,
happy new year! Sorry for my late response. Haven't bin at office lately.
I just tried with 10, 5, and 3 gaussians and the problem does occur less often, but it still does.
greetings,
davud
		</comment>
		<comment id='7' author='davudadiguezel' date='2016-01-13T21:45:59Z'>
		Hey Davud,
Sorry for the slow response; I was out of town for a while too. :)
I did some digging, and I think I've solved the issue in &lt;denchmark-link:https://github.com/mlpack/mlpack/commit/c5050982ef63d3122098b51b58c43a5b9ae73eec&gt;c505098&lt;/denchmark-link&gt;
.  Here is what I think was happening:
During training, some Gaussians end up having particularly small covariances.  This happens in part because many of the points in your dataset are identical.  A very small covariance for a Gaussian means that the probability of a point centered at the mean will be extremely large; for sufficiently small covariances, this results in the probability being represented as inf on the machine.  Then, later in the EM fitting process, normalization of probabilities turns this inf into a NaN, which ends up propagating to the covariance, which will end up full of NaNs.  When the covariance is full of NaNs, the "Adding perturbation" step will continue forever, because no matter how large a number you add to a matrix full of NaNs, it still won't be positive definite.
So, what I've done is modified the positive definiteness constraint to also enforce a minimum diagonal covariance element of 1e-50 (very small), thus restricting how small a single Gaussian's PDF can get.  This means that the probability of a point at the mean is bounded within the range of numbers representable by the machine, so there is no inf, and there aren't NaNs later.
But, it's possible that I did not properly solve the issue, so please reopen if you still have issues.  I am more than happy to help work out issues like this. :)
		</comment>
		<comment id='8' author='davudadiguezel' date='2016-01-14T14:50:30Z'>
		Hey Ryan,
thanks for the response.
Unfortunately the program keeps hanging (but not as often as before):
&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

[DEBUG] Point 2 assigned to empty cluster 17.
[INFO ] Cluster 18 is empty.
[DEBUG] Point 3 assigned to empty cluster 18.
[INFO ] KMeans::Cluster(): iteration 1, residual inf.
[INFO ] KMeans::Cluster(): iteration 2, residual 0.197714.
[INFO ] KMeans::Cluster(): iteration 3, residual 0.151819.
[INFO ] KMeans::Cluster(): iteration 4, residual 0.0707789.
[INFO ] KMeans::Cluster(): iteration 5, residual 0.0748019.
[INFO ] KMeans::Cluster(): iteration 6, residual 0.0826282.
[INFO ] KMeans::Cluster(): iteration 7, residual 0.0555508.
[INFO ] KMeans::Cluster(): iteration 8, residual 0.0666275.
[INFO ] KMeans::Cluster(): iteration 9, residual 0.0591785.
[INFO ] KMeans::Cluster(): iteration 10, residual 0.0380067.
[INFO ] KMeans::Cluster(): iteration 11, residual 0.00518312.
[INFO ] KMeans::Cluster(): iteration 12, residual 0.00368832.
[INFO ] KMeans::Cluster(): iteration 13, residual 0.00231247.
[INFO ] KMeans::Cluster(): iteration 14, residual 0.00123067.
[INFO ] KMeans::Cluster(): iteration 15, residual 0.0035152.
[INFO ] KMeans::Cluster(): iteration 16, residual 0.00228494.
[INFO ] KMeans::Cluster(): iteration 17, residual 0.00522757.
[INFO ] KMeans::Cluster(): iteration 18, residual 0.0076554.
[INFO ] KMeans::Cluster(): iteration 19, residual 0.0119473.
[INFO ] KMeans::Cluster(): iteration 20, residual 0.0112805.
[INFO ] KMeans::Cluster(): iteration 21, residual 0.0219611.
[INFO ] KMeans::Cluster(): iteration 22, residual 0.0143273.
[INFO ] KMeans::Cluster(): iteration 23, residual 0.0118793.
[INFO ] KMeans::Cluster(): iteration 24, residual 0.0191215.
[INFO ] KMeans::Cluster(): iteration 25, residual 0.0221008.
[INFO ] KMeans::Cluster(): iteration 26, residual 0.0538075.
[INFO ] KMeans::Cluster(): iteration 27, residual 0.0694079.
[INFO ] KMeans::Cluster(): iteration 28, residual 0.0346496.
[INFO ] KMeans::Cluster(): iteration 29, residual 0.00939849.
[INFO ] KMeans::Cluster(): iteration 30, residual 0.00749252.
[INFO ] KMeans::Cluster(): iteration 31, residual 0.00635273.
[INFO ] KMeans::Cluster(): iteration 32, residual 0.00476996.
[INFO ] KMeans::Cluster(): iteration 33, residual 0.00516157.
[INFO ] KMeans::Cluster(): iteration 34, residual 0.00444851.
[INFO ] KMeans::Cluster(): iteration 35, residual 0.00304399.
[INFO ] KMeans::Cluster(): iteration 36, residual 0.00174719.
[INFO ] KMeans::Cluster(): iteration 37, residual 0.000555867.
[INFO ] KMeans::Cluster(): iteration 38, residual 0.000810098.
[INFO ] KMeans::Cluster(): iteration 39, residual 0.000738585.
[INFO ] KMeans::Cluster(): iteration 40, residual 0.00020829.
[INFO ] KMeans::Cluster(): iteration 41, residual 0.
[INFO ] KMeans::Cluster(): converged after 41 iterations.
[INFO ] 3280000 distance calculations.
[DEBUG] Covariance matrix is not positive definite.  Adding perturbation.
[DEBUG] EMFit::Estimate(): initial clustering log-likelihood: 10098.8
[INFO ] EMFit::Estimate(): iteration 1, log-likelihood 10098.8.
[INFO ] EMFit::Estimate(): iteration 2, log-likelihood inf.
[DEBUG] Covariance matrix is not positive definite.  Adding perturbation.
&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

Greetings,
Davud
		</comment>
		<comment id='9' author='davudadiguezel' date='2016-01-19T13:39:21Z'>
		I just experienced another crash. This time I had split up my data by dimension, but it got stuck in an endless loop like before:
[INFO ] EMFit::Estimate(): iteration 23, log-likelihood 13842.8.
[DEBUG] Covariance matrix is not positive definite.  Adding perturbation.
[DEBUG] Covariance matrix is not positive definite.  Adding perturbation.
[DEBUG] Covariance matrix is not positive definite.  Adding perturbation.
[DEBUG] Covariance matrix is not positive definite.  Adding perturbation.
[INFO ] EMFit::Estimate(): iteration 24, log-likelihood inf.
[DEBUG] Covariance matrix is not positive definite.  Adding perturbation.
[DEBUG] Covariance matrix is not positive definite.  Adding perturbation.
[DEBUG] Covariance matrix is not positive definite.  Adding perturbation.
[DEBUG] Covariance matrix is not positive definite.  Adding perturbation.
		</comment>
		<comment id='10' author='davudadiguezel' date='2016-01-19T13:52:51Z'>
		Just a quick update: I've been looking into this, and I found a random seed that allows me to reproduce the issue, but when I use a debugger to step through the calculations to find out where the NaN is coming from, the results don't make any sense.  If I print the value with cout, it gives me something different than what I get if I don't print it and use gdb to inspect.  I'm digging deeper, but I don't have anything yet...
It does appear that this occurs because the covariance matrices for individual Gaussians are getting very small.  I think with your dataset this happens in part because there are so many points with the exact same values.  I know this isn't a solution, but I suspect that if you were to add noise to each point (maybe Gaussian noise with standard deviation 1e-15 or something else quite small), you might encounter fewer or no crashes like this.
I'll keep looking and let you know when I get to the bottom of this. :)
		</comment>
		<comment id='11' author='davudadiguezel' date='2016-01-19T13:56:54Z'>
		thanks, I will try the noise. And thanks for all the work you're doing for supporting :)
		</comment>
		<comment id='12' author='davudadiguezel' date='2016-01-25T15:38:01Z'>
		An update: I was using the debugger wrong, and the results made sense, I was just doing stupid things and reading the results wrong.  I was correct that this is occurring because the covariance matrices for individual Gaussians is very small, and like in each round of debugging this particular problem, the solution will lie in positive_definite_constraint.hpp, the bit of code that forces the covariance to be positive definite.
Originally, I added to the diagonal until det(covariance) was greater than some small number (I arbitrarily chose 1e-50).  But this didn't always work, so I replaced it with a check that the Cholesky decomposition was successful.  But, it turns out that there are situations where the Cholesky decomposition appears to succeed but gives wildly inaccurate results, due to (I think) machine precision issues.
I think that the solution here is going to be to enforce a check based on the condition number of the matrix and the machine precision, but I need to do some reading to familiarize myself with numerical linear algebra precision issues first.  When I implement a fix, I'll then test with your dataset and different random seeds for a day or two to make sure that the issue doesn't recur.
		</comment>
		<comment id='13' author='davudadiguezel' date='2016-01-29T20:34:37Z'>
		Okay, with &lt;denchmark-link:https://github.com/mlpack/mlpack/commit/54b2906d834f7f859c1b94ce3855b633bd4114d8&gt;54b2906&lt;/denchmark-link&gt;
 I think I have finally solved the issue!  I wrote a check that uses the condition number of the Gaussian to prevent the Cholesky decomposition from failing, and I tested it for 10000 trials with different random seeds on your dataset, and had no failures.  So I really hope the issue is solved now.  I will let you close the issue when you decide that the problem is fixed, because it seems like if I close the issue then the issue is not really solved. :)
		</comment>
		<comment id='14' author='davudadiguezel' date='2016-02-01T14:53:48Z'>
		Hey Ryan,
have been running your solution on my data and it looks good!
Many thanks for all your efforts!
Greetings
Davud :)
		</comment>
		<comment id='15' author='davudadiguezel' date='2016-02-01T14:58:52Z'>
		Great, I hope you don't have more issues! :)  But if you do, please let me know and I can keep digging.  I'll release 2.0.1 with the GMM training fixes, as well as some other fixes, shortly.  As far as I can tell my changes didn't significantly affect runtime.
		</comment>
		<comment id='16' author='davudadiguezel' date='2016-02-01T15:02:25Z'>
		I can confirm that. Runtime is unaffected :)
		</comment>
	</comments>
</bug>