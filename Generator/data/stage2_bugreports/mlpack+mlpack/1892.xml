<bug id='1892' author='gmanlan' open_date='2019-05-04T23:24:17Z' closed_time='2019-07-15T16:28:55Z'>
	<summary>Windows pre-built binaries/installer are not being exposed/available for download</summary>
	<description>
For Windows, we have both a zip file and an MSI installer with pre-built binaries ready to go. However, these artifacts are not officially available. Users will need to dig into AppVeyor recent builds to grab them, and these are not official release versions. Many times new users struggle to build from source, and they are not aware of these artifacts.
At the minimum we could add a section in README.MD mentioning that these exist? However, we need some mechanism to persist/tag official releases (AppVeyor deletes old artifacts).
	</description>
	<comments>
		<comment id='1' author='gmanlan' date='2019-05-05T20:52:49Z'>
		Agreed, what I'd like to see is something like this: &lt;denchmark-link:https://github.com/zoq/install-mlpack/blob/master/homebrew/install.md#ready-to-install-package&gt;https://github.com/zoq/install-mlpack/blob/master/homebrew/install.md#ready-to-install-package&lt;/denchmark-link&gt;
 for different platforms. Simple steps to install and build mlpack, including an example that shows how to use the different interfaces (C++, CLI, python).
So a user could just select the os and maybe the package manager and gets the install steps as result. I have some unfinished packages/scripts for homebrew (mac, linux), conda, docke, debian and mingw.
		</comment>
		<comment id='2' author='gmanlan' date='2019-05-06T16:59:26Z'>
		That's great. I believe we can join efforts to fix this. I've started exploring the possibility of augmenting the website in such a way that we have more flexibility to cover stuff like this which is not necessarily coming from source code commits.
For example, the OS and package manager/platform selector could be something that lives entirely in the website... let me work a little bit on that.
		</comment>
		<comment id='3' author='gmanlan' date='2019-05-07T13:48:49Z'>
		
Agreed, what I'd like to see is something like this: https://github.com/zoq/install-mlpack/blob/master/homebrew/install.md#ready-to-install-package for different platforms. Simple steps to install and build mlpack, including an example that shows how to use the different interfaces (C++, CLI, python).
So a user could just select the os and maybe the package manager and gets the install steps as result. I have some unfinished packages/scripts for homebrew (mac, linux), conda, docke, debian and mingw.

Also saw that we have installation through conda and npm, we should also mention them.
		</comment>
		<comment id='4' author='gmanlan' date='2019-05-07T15:57:05Z'>
		One problem though is that some of these distribution channels are not often updated. For instance, some channels are distributing binaries as old as mlpack 2.0 and can only be updated manually. Therefore, we should make sure first that any distribution channel we mention is up-to-date and can be automatically updated when we do a release. Otherwise it creates more problems than help.
Do we know which distribution channels are available + up-to-date + automatically updated?
		</comment>
		<comment id='5' author='gmanlan' date='2019-05-07T16:02:36Z'>
		I handle Fedora/RHEL/CentOS and PyPI, but I haven't managed to automate either (yet!).  Barak Pearlmutter handles the Debian package and as far as I can tell keeps it quite up to date.  There might be a slight delay in updating to 3.1.0, since now ensmallen is a new dependency.  At least for Fedora, I am waiting for that package to be reviewed and included before I can release 3.1.0.
		</comment>
		<comment id='6' author='gmanlan' date='2019-05-07T16:11:01Z'>
		Great, I'm compiling the list - I believe it will be useful to show all the alternatives in the website.
		</comment>
		<comment id='7' author='gmanlan' date='2019-05-07T16:22:05Z'>
		
I handle Fedora/RHEL/CentOS and PyPI, but I haven't managed to automate either (yet!). Barak Pearlmutter handles the Debian package and as far as I can tell keeps it quite up to date. There might be a slight delay in updating to 3.1.0, since now ensmallen is a new dependency. At least for Fedora, I am waiting for that package to be reviewed and included before I can release 3.1.0.

May be after &lt;denchmark-link:https://github.com/gmanlan&gt;@gmanlan&lt;/denchmark-link&gt;
 makes a consolidated list we could automate some of them :)
		</comment>
		<comment id='8' author='gmanlan' date='2019-05-07T18:29:29Z'>
		I'm working on an automated process for the one I mentioned above. The homebrew package is already done.
		</comment>
		<comment id='9' author='gmanlan' date='2019-05-07T18:40:35Z'>
		
I'm working on an automated process for the one I mentioned above. The homebrew package is already done.

Wonderful , So may be the List could be of some sort of following structure
distribution channels   ---  up-to-date  (Y/N)    -----       automatically updates Available (Y/N)
		</comment>
		<comment id='10' author='gmanlan' date='2019-05-10T03:05:34Z'>
		I have somehow organized all the options based on sections (sections are driven by OS or OS agnostic channels). It looks like this so far:
Python

Get via pip or conda: "mlpack in Python quickstart guide"

Ubuntu, Debian, Fedora, Red Hat

Install using a package manager: "mlpack command-line quickstart guide"
Build from source: build.html linux instructions

Windows

Download prebuilt binaries: MSI Installer
Install using a package manager: installation through vcpkg
Build from source: build_windows.html win instructions

&lt;denchmark-link:https://github.com/zoq&gt;@zoq&lt;/denchmark-link&gt;
: could you please let me know how your homebrew (mac, linux), conda, docke, debian and mingw alternatives would fit into this schema? Do we need to add another section?
&lt;denchmark-link:https://github.com/jeffin143&gt;@jeffin143&lt;/denchmark-link&gt;
, &lt;denchmark-link:https://github.com/rcurtin&gt;@rcurtin&lt;/denchmark-link&gt;
: any other alternative we are missing here?
I'm building this list to guide the design of the website. Thanks.
		</comment>
		<comment id='11' author='gmanlan' date='2019-05-10T11:10:54Z'>
		Actually, I was thinking about something similar to what pytorch provides (&lt;denchmark-link:https://pytorch.org&gt;https://pytorch.org&lt;/denchmark-link&gt;
). Each could link to a more in-depth usage guide, just like the ones we already provide. That makes it also easy to add new combinations, like we do have packages for Haiku and FreeBSD as well, that aren't mentioned on the website. I could write something like this in javascript if you like the idea. Let me know what you think.
		</comment>
		<comment id='12' author='gmanlan' date='2019-05-10T12:24:39Z'>
		There's an Arch Linux package also, but I don't maintain it.  I found this too: &lt;denchmark-link:https://repology.org/project/mlpack/versions&gt;https://repology.org/project/mlpack/versions&lt;/denchmark-link&gt;

		</comment>
		<comment id='13' author='gmanlan' date='2019-05-10T16:34:34Z'>
		That's a great idea &lt;denchmark-link:https://github.com/zoq&gt;@zoq&lt;/denchmark-link&gt;
. Would you be able to write a JS snippet, that's somehow easy to maintain - e.g. maybe a JSON is required? I can quickly include it in the upcoming website and see how it fits.
&lt;denchmark-link:https://github.com/rcurtin&gt;@rcurtin&lt;/denchmark-link&gt;
: I think I will add the repology link as a "more/other options" note. The more options we provide, the easier it will be for users to find the right entry point. We will have time later to polish/remove what's not properly working or helping - but as a first version, I would like to be as inclusive as possible.
		</comment>
		<comment id='14' author='gmanlan' date='2019-05-10T20:21:19Z'>
		Will sketch something up and post the code here (probably tomorrow). Do you have already have a first impression of the changed design?
		</comment>
		<comment id='15' author='gmanlan' date='2019-05-11T01:13:15Z'>
		I'm working on it, but still evolving and not final. Don't worry about design, the raw snippet will do. I will then apply CSS to make it compatible with whatever final design we use.
		</comment>
		<comment id='16' author='gmanlan' date='2019-05-11T12:47:15Z'>
		Sounds good, was just curious.
		</comment>
		<comment id='17' author='gmanlan' date='2019-05-12T13:48:02Z'>
		&lt;denchmark-link:https://github.com/zoq&gt;@zoq&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/rcurtin&gt;@rcurtin&lt;/denchmark-link&gt;
 , Is this our package &lt;denchmark-link:https://www.npmjs.com/package/mlpack&gt;https://www.npmjs.com/package/mlpack&lt;/denchmark-link&gt;

		</comment>
		<comment id='18' author='gmanlan' date='2019-05-12T20:32:43Z'>
		Looks like it, but the package dosn't provide any functionality: &lt;denchmark-link:https://npm.runkit.com/mlpack/main.js?t=1557692928706&gt;https://npm.runkit.com/mlpack/main.js?t=1557692928706&lt;/denchmark-link&gt;

		</comment>
		<comment id='19' author='gmanlan' date='2019-05-12T23:26:35Z'>
		First concept, there is still some things left todo:
&lt;denchmark-link:https://gist.github.com/zoq/8a1be219c64061b78100ba84c5d020e7&gt;https://gist.github.com/zoq/8a1be219c64061b78100ba84c5d020e7&lt;/denchmark-link&gt;

&lt;denchmark-link:https://gist.github.com/zoq/3cdb60986a6978a60a83a0241f29305f&gt;https://gist.github.com/zoq/3cdb60986a6978a60a83a0241f29305f&lt;/denchmark-link&gt;

		</comment>
		<comment id='20' author='gmanlan' date='2019-05-15T01:18:22Z'>
		Thanks for the gists zoq. I have quickly tried it and looks promising. At the same time, I'm a little bit concerned about the maintainability and user experience of the widget. For example, there are many combinations that do not apply (e.g. nightly will not be available through some channels such as windows installer/vcpkg/conda..., or pip goes with python and never with R or source, or pip/conda for Windows - as it is today - may not be available as the bindings are broken, etc.). So maybe a simplification of the table (let's say just OS and language? or maybe same-level categories such as (1) python - because it should be OS agnostic - and then (2) Linux/Mac, (3) Windows) would help us both (maintainers and users) on the long term. What do you think?
Attached is what we roughly have today (which is missing your homebrew additions).
&lt;denchmark-link:https://user-images.githubusercontent.com/40178166/57742048-583a2400-7674-11e9-8c8a-9824e694f24f.png&gt;&lt;/denchmark-link&gt;

		</comment>
		<comment id='21' author='gmanlan' date='2019-05-15T22:20:56Z'>
		Nice, in either situation whatever we choose to go with will be better than the very spartan list we have right now. :)
		</comment>
		<comment id='22' author='gmanlan' date='2019-05-15T23:27:53Z'>
		Looks really nice, excited to see a first version.

So maybe a simplification of the table (let's say just OS and language? or maybe same-level categories such as (1) python - because it should be OS agnostic - and then (2) Linux/Mac, (3) Windows) would help us both (maintainers and users) on the long term. What do you think?

Don't mind to reduce the number of possibilities. We should only show solutions that work and are tested, as you said python bindings on windows might not work at least right now (still have to check mingw), so there is no need to show a build/install solution.
About the maintainability, the homebrew package is fully automated, once a new version is released or the master branch is updated a new build is triggered and tested (&lt;denchmark-link:https://dev.azure.com/marcusedel/zoq/_build/results?buildId=41&gt;https://dev.azure.com/marcusedel/zoq/_build/results?buildId=41&lt;/denchmark-link&gt;
). I have a similar set up for apt. Working on the docker and conda toolchain next. I guess we could do the same for pip as well?
Looks like we could also provide a cloud version for quick prototyping:
&lt;denchmark-link:https://user-images.githubusercontent.com/4209744/57815956-c288bc80-7779-11e9-8de6-1aaa4934b752.png&gt;&lt;/denchmark-link&gt;

		</comment>
		<comment id='23' author='gmanlan' date='2019-06-07T00:46:44Z'>
		Ok, I had some time to get back to this, so here is an early version of the upcoming website:
&lt;denchmark-link:https://gmanlan.github.io/mlpack.org/&gt;https://gmanlan.github.io/mlpack.org/&lt;/denchmark-link&gt;

&lt;denchmark-link:https://user-images.githubusercontent.com/40178166/59074933-d314ea00-8882-11e9-8de7-9a744e6a16b3.png&gt;&lt;/denchmark-link&gt;


Intent is to bring material design/modern look &amp; feel to be competitive with other libraries
Take the opportunity to improve adoption fronts, such as distribution channels, getting started guides/tutorials, etc.

Some pending items:

Figure out how to embed/reformat @zoq's table into the Get Started section
Build Doxygen and redesign the style to be consistent with the main website
Deep test different form factors (it should be mobile friendly already, or almost friendly...)

Feedback is welcome!
		</comment>
		<comment id='24' author='gmanlan' date='2019-06-07T03:23:16Z'>
		&lt;denchmark-link:https://github.com/gmanlan&gt;@gmanlan&lt;/denchmark-link&gt;
 , Looks great , the heading goes with the background well. Great job :)
		</comment>
		<comment id='25' author='gmanlan' date='2019-06-07T21:07:04Z'>
		Agreed this looks good.

Figure out how to embed/reformat @zoq's table into the Get Started section

I can give this a try.

Build Doxygen and redesign the style to be consistent with the main website

Not sure what the status of &lt;denchmark-link:https://github.com/mlpack/mlpack/issues/1877&gt;#1877&lt;/denchmark-link&gt;
 is, but I think if we like to switch, it doesn't make sense to work on both? &lt;denchmark-link:https://github.com/rcurtin&gt;@rcurtin&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/amirmasoudabdol&gt;@amirmasoudabdol&lt;/denchmark-link&gt;
 what do you think?
Comments:

Do you mind to remove the Github badge, personally I think that destroys the clean design.
In IRC you said, the background is pseudo random? Perhaps we can use some mlpack model to create something special. Also, do you think it should be so present, it does take a lot of space and doesn't really provide much information.
Not sure if this is system depended, and I can't really tell from the screenshot but on my system the font-color is really similar with the background-colour so it is sometimes hard to read:

&lt;denchmark-link:https://user-images.githubusercontent.com/4209744/59133575-c4a8fa00-8978-11e9-82ea-6f6b87be156e.png&gt;&lt;/denchmark-link&gt;

		</comment>
		<comment id='26' author='gmanlan' date='2019-06-07T22:35:52Z'>
		Thanks &lt;denchmark-link:https://github.com/zoq&gt;@zoq&lt;/denchmark-link&gt;
 and &lt;denchmark-link:https://github.com/jeffin143&gt;@jeffin143&lt;/denchmark-link&gt;
 for the feedback.

Remove the Github badge: yes I can remove it, just thought it would be a fast way of reaching the repo instead of going through text to find the link - the badge is pretty standard among libraries nowadays - i.e. https://scikit-learn.org/stable/ - also, the badge is hidden when rendering in small form factors such as mobile
Hero banner background: we can try a model generated one - although it may be an overkill - other websites are using pretty standard/simple hero banners. I think it should be something more related to the core identity of mlpack, how it started, or what's the core advantage, or why the logo is a nodes tree... that kind of concepts could help shape the graphical representation of the banner. If no ideas, a simple gradient/texture will do.
Size of hero banner: again, this seems to be pretty standard nowadays, and it's based on a bootstrap template - take a look at https://www.tensorflow.org/, https://spacy.io/, https://pytorch.org/, etc. - hero banners are there for impact and quick info (title + download). We can try reducing the size a little bit, but not much that it would look weird among nowadays designs.
Agreed, I will fine-tune the background/font color, without necessarily jumping into a white background (undesired).

		</comment>
		<comment id='27' author='gmanlan' date='2019-06-08T07:30:34Z'>
		&lt;denchmark-link:https://github.com/gmanlan&gt;@gmanlan&lt;/denchmark-link&gt;
 I think the website looks good but I also agree we should decide which one we want to go with. I'm still in favor of Sphinx because I think it's gonna be easier to maintain later on. That being said, I don't expect the Sphinx solution would work out of the box and we probably need to do more edits and fine-tuning later on. I think whatever we can improve with the Doxygen and current website we should, and see when and if Sphinx version be ready, and satisfactory or not.
Regarding the status, I've solved a few issues and can generate the documentation nicely now. I'm trying to see which part of the CSS I can hack to achieve what &lt;denchmark-link:https://github.com/rcurtin&gt;@rcurtin&lt;/denchmark-link&gt;
 was asking for. Regarding the dark or white background, I'm working on both actually. Since most OSs are offering Dark Mode these days, CSS has support for either automatic or manual switch.
I'll try to put a PR soon that everyone can see. 🤞🏼
		</comment>
		<comment id='28' author='gmanlan' date='2019-06-10T20:45:29Z'>
		&lt;denchmark-link:https://github.com/amirmasoudabdol&gt;@amirmasoudabdol&lt;/denchmark-link&gt;
 thanks. I believe the base website should not be attached to the documentation framework we use. The website still needs to exist by itself. Landing page, FAQ, downloads, etc. are agnostic of what documentation framework we use. Said that, Sphinx vs Doxygen can be a separate discussion topic/work item. At the end of the day, the website (i.e. landing page) will just have a link to whatever documentation we build.
		</comment>
		<comment id='29' author='gmanlan' date='2019-06-14T17:30:23Z'>
		This looks really nice &lt;denchmark-link:https://github.com/gmanlan&gt;@gmanlan&lt;/denchmark-link&gt;
, looking forward to seeing it deployed.  &lt;denchmark-link:https://github.com/amirmasoudabdol&gt;@amirmasoudabdol&lt;/denchmark-link&gt;
 I think that we can get the documentation working separately from the website.  As it currently stands the website is built with Jekyll but the workflow looks like this:

For each mlpack version, build the doxygen docs as HTML.
Copy those HTML doxygen docs to the root of the Jekyll build, along with any necessary CSS.
Build the Jekyll site, which will just copy the HTML doxygen docs to the right place.

Just like you said, effectively this results in the mlpack website existing by itself, and then linking to the (currently) Doxygen documentation.  Note also that this is different from the bindings Markdown documentation, which has a similar build process to what's above, but it outputs Markdown which is copied to a different place.  &lt;denchmark-link:https://github.com/gmanlan&gt;@gmanlan&lt;/denchmark-link&gt;
 if you want help making that part come together just let me know.  The scripts in the mlpack.org/ repo may be a little ugly...
So if we switch out Doxygen and Sphinx, I don't think it'll make a huge difference either way.  It'll still likely have to be built as a preprocessing step before the site is generated.
		</comment>
		<comment id='30' author='gmanlan' date='2019-06-14T23:50:22Z'>
		I did some minor updates based on the received feedback. Please take a look here: &lt;denchmark-link:https://gmanlan.github.io/mlpack.org/&gt;https://gmanlan.github.io/mlpack.org/&lt;/denchmark-link&gt;

A couple of asks:

@rcurtin: could you please generate a ready-to-include Doxygen package for the new website? I will use it to adapt the CSS so it's consistent with the rest of the site (this CSS can be later translated into Sphinx if we switch to it).
@zoq: the "Distribution-Table-Test" page actually goes embedded inside the "Get Started" page, but I need your help to make the table work. Please let me know when you have a working version so I can try embedding it and adjusting the format. If you believe it's getting very complex/hard to maintain, we can try a simpler approach as a list and build on top of it later, as you wish.

Because we are changing a lot of code here, I prefer to do baby steps and wrap up the first iteration of the website soon, as long as everybody reviews it. We can then open new PRs for improvements/optimizations as needed.
		</comment>
		<comment id='31' author='gmanlan' date='2019-07-15T00:33:40Z'>
		This issue has been automatically marked as stale because it has not had any recent activity.  It will be closed in 7 days if no further activity occurs.  Thank you for your contributions! 👍
		</comment>
		<comment id='32' author='gmanlan' date='2019-07-15T16:28:55Z'>
		Original issue has been addressed. Website work will continue on a different thread.
		</comment>
	</comments>
</bug>