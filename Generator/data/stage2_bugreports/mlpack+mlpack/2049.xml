<bug id='2049' author='barak' open_date='2019-10-08T11:31:22Z' closed_time='2019-11-15T21:20:04Z'>
	<summary>build failure on crappy machines</summary>
	<description>
&lt;denchmark-h:h4&gt;Issue description&lt;/denchmark-h&gt;

Build failures on some architectures, on the Debian autobuilder farm. Seems to run out of resources, e.g., memory allocation failure in ccplus1. Also there are alignment warnings. See below.
&lt;denchmark-h:h4&gt;Your environment&lt;/denchmark-h&gt;


version of mlpack: 3.2.1-1
operating system: Debian (sid)
compiler: GCC 9.2.1-8
version of dependencies (Boost/Armadillo): 1.67.0 / 1:9.600.5+dfsg-1
any other environment information you think is relevant: debian autobuilder

&lt;denchmark-h:h4&gt;Steps to reproduce&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;$ dput mlpack*.changes
&lt;/denchmark-code&gt;

&lt;denchmark-h:h4&gt;Expected behavior&lt;/denchmark-h&gt;

Green lights across the board on &lt;denchmark-link:https://buildd.debian.org/status/package.php?p=mlpack&gt;https://buildd.debian.org/status/package.php?p=mlpack&lt;/denchmark-link&gt;

&lt;denchmark-h:h4&gt;Actual behavior&lt;/denchmark-h&gt;

Issues on m68k and sh4.
Relevant logs
&lt;denchmark-link:https://buildd.debian.org/status/fetch.php?pkg=mlpack&amp;arch=sh4&amp;ver=3.2.1-1&amp;stamp=1570495366&amp;raw=0&gt;https://buildd.debian.org/status/fetch.php?pkg=mlpack&amp;arch=sh4&amp;ver=3.2.1-1&amp;stamp=1570495366&amp;raw=0&lt;/denchmark-link&gt;

&lt;denchmark-code&gt;....
/&lt;&lt;PKGBUILDDIR&gt;&gt;/src/mlpack/tests/serialization.hpp:247:39:   required from 'void mlpack::SerializeObjectAll(T&amp;, T&amp;, T&amp;, T&amp;) [with T = mlpack::ann::RNN&lt;mlpack::ann::NegativeLogLikelihood&lt;arma::Mat&lt;double&gt;, arma::Mat&lt;double&gt; &gt;, mlpack::ann::RandomInitialization&gt;]'
/&lt;&lt;PKGBUILDDIR&gt;&gt;/src/mlpack/tests/recurrent_network_test.cpp:1035:61:   required from here
/&lt;&lt;PKGBUILDDIR&gt;&gt;/src/mlpack/methods/ann/layer/recurrent_impl.hpp:297:21: warning: 'new' of type 'mlpack::ann::Sequential&lt;arma::Mat&lt;double&gt;, arma::Mat&lt;double&gt;, false&gt;' with extended alignment 16 [-Waligned-new=]
  297 |     initialModule = new Sequential&lt;&gt;();
      |                     ^~~~~~~~~~~~~~~~~~
/&lt;&lt;PKGBUILDDIR&gt;&gt;/src/mlpack/methods/ann/layer/recurrent_impl.hpp:297:21: note: uses 'void* operator new(std::size_t)', which does not have an alignment parameter
/&lt;&lt;PKGBUILDDIR&gt;&gt;/src/mlpack/methods/ann/layer/recurrent_impl.hpp:297:21: note: use '-faligned-new' to enable C++17 over-aligned new support
/&lt;&lt;PKGBUILDDIR&gt;&gt;/src/mlpack/methods/ann/layer/recurrent_impl.hpp:298:19: warning: 'new' of type 'mlpack::ann::AddMerge&lt;arma::Mat&lt;double&gt;, arma::Mat&lt;double&gt; &gt;' with extended alignment 16 [-Waligned-new=]
  298 |     mergeModule = new AddMerge&lt;&gt;(false, false);
      |                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
/&lt;&lt;PKGBUILDDIR&gt;&gt;/src/mlpack/methods/ann/layer/recurrent_impl.hpp:298:19: note: uses 'void* operator new(std::size_t)', which does not have an alignment parameter
/&lt;&lt;PKGBUILDDIR&gt;&gt;/src/mlpack/methods/ann/layer/recurrent_impl.hpp:298:19: note: use '-faligned-new' to enable C++17 over-aligned new support
/&lt;&lt;PKGBUILDDIR&gt;&gt;/src/mlpack/methods/ann/layer/recurrent_impl.hpp:299:23: warning: 'new' of type 'mlpack::ann::Sequential&lt;arma::Mat&lt;double&gt;, arma::Mat&lt;double&gt;, false&gt;' with extended alignment 16 [-Waligned-new=]
  299 |     recurrentModule = new Sequential&lt;&gt;(false);
      |                       ^~~~~~~~~~~~~~~~~~~~~~~
/&lt;&lt;PKGBUILDDIR&gt;&gt;/src/mlpack/methods/ann/layer/recurrent_impl.hpp:299:23: note: uses 'void* operator new(std::size_t)', which does not have an alignment parameter
/&lt;&lt;PKGBUILDDIR&gt;&gt;/src/mlpack/methods/ann/layer/recurrent_impl.hpp:299:23: note: use '-faligned-new' to enable C++17 over-aligned new support

cc1plus: out of memory allocating 2540756 bytes after a total of 37974016 bytes
make[4]: *** [src/mlpack/tests/CMakeFiles/mlpack_test.dir/build.make:1285: src/mlpack/tests/CMakeFiles/mlpack_test.dir/recurrent_network_test.cpp.o] Error 1
make[4]: Leaving directory '/&lt;&lt;PKGBUILDDIR&gt;&gt;/obj-sh4-linux-gnu'
make[3]: *** [CMakeFiles/Makefile2:4265: src/mlpack/tests/CMakeFiles/mlpack_test.dir/all] Error 2
make[3]: Leaving directory '/&lt;&lt;PKGBUILDDIR&gt;&gt;/obj-sh4-linux-gnu'
make[2]: *** [Makefile:144: all] Error 2
make[2]: Leaving directory '/&lt;&lt;PKGBUILDDIR&gt;&gt;/obj-sh4-linux-gnu'
dh_auto_build: cd obj-sh4-linux-gnu &amp;&amp; make -j1 "INSTALL=install --strip-program=true" returned exit code 2
make[1]: *** [debian/rules:52: override_dh_auto_build] Error 255
make[1]: Leaving directory '/&lt;&lt;PKGBUILDDIR&gt;&gt;'
make: *** [debian/rules:46: build-arch] Error 2
dpkg-buildpackage: error: debian/rules build-arch subprocess returned exit status 2
&lt;/denchmark-code&gt;

&lt;denchmark-link:https://buildd.debian.org/status/fetch.php?pkg=mlpack&amp;arch=m68k&amp;ver=3.2.1-1&amp;stamp=1570440030&amp;raw=0&gt;https://buildd.debian.org/status/fetch.php?pkg=mlpack&amp;arch=m68k&amp;ver=3.2.1-1&amp;stamp=1570440030&amp;raw=0&lt;/denchmark-link&gt;

&lt;denchmark-code&gt;...
/usr/include/boost/archive/basic_binary_iarchive.hpp:75:7:   required from 'void boost::archive::basic_binary_iarchive&lt;Archive&gt;::load_override(T&amp;) [with T = const boost::serialization::nvp&lt;mlpack::ann::FFN&lt;mlpack::ann::NegativeLogLikelihood&lt;arma::Mat&lt;double&gt;, arma::Mat&lt;double&gt; &gt; &gt; &gt;; Archive = boost::archive::binary_iarchive]'
/usr/include/boost/archive/binary_iarchive_impl.hpp:58:9:   required from 'void boost::archive::binary_iarchive_impl&lt;Archive, Elem, Tr&gt;::load_override(T&amp;) [with T = const boost::serialization::nvp&lt;mlpack::ann::FFN&lt;mlpack::ann::NegativeLogLikelihood&lt;arma::Mat&lt;double&gt;, arma::Mat&lt;double&gt; &gt; &gt; &gt;; Archive = boost::archive::binary_iarchive; Elem = char; Tr = std::char_traits&lt;char&gt;]'
/usr/include/boost/archive/detail/interface_iarchive.hpp:68:9:   required from 'Archive&amp; boost::archive::detail::interface_iarchive&lt;Archive&gt;::operator&gt;&gt;(T&amp;) [with T = const boost::serialization::nvp&lt;mlpack::ann::FFN&lt;mlpack::ann::NegativeLogLikelihood&lt;arma::Mat&lt;double&gt;, arma::Mat&lt;double&gt; &gt; &gt; &gt;; Archive = boost::archive::binary_iarchive]'
/&lt;&lt;PKGBUILDDIR&gt;&gt;/src/mlpack/tests/serialization.hpp:223:9:   required from 'void mlpack::SerializeObject(T&amp;, T&amp;) [with T = mlpack::ann::FFN&lt;mlpack::ann::NegativeLogLikelihood&lt;arma::Mat&lt;double&gt;, arma::Mat&lt;double&gt; &gt; &gt;; IArchiveType = boost::archive::binary_iarchive; OArchiveType = boost::archive::binary_oarchive]'
/&lt;&lt;PKGBUILDDIR&gt;&gt;/src/mlpack/tests/serialization.hpp:247:39:   required from 'void mlpack::SerializeObjectAll(T&amp;, T&amp;, T&amp;, T&amp;) [with T = mlpack::ann::FFN&lt;mlpack::ann::NegativeLogLikelihood&lt;arma::Mat&lt;double&gt;, arma::Mat&lt;double&gt; &gt; &gt;]'
/&lt;&lt;PKGBUILDDIR&gt;&gt;/src/mlpack/tests/feedforward_network_test.cpp:452:61:   required from here
/&lt;&lt;PKGBUILDDIR&gt;&gt;/src/mlpack/methods/ann/layer/recurrent_impl.hpp:297:21: warning: 'new' of type 'mlpack::ann::Sequential&lt;arma::Mat&lt;double&gt;, arma::Mat&lt;double&gt;, false&gt;' with extended alignment 16 [-Waligned-new=]
  297 |     initialModule = new Sequential&lt;&gt;();
      |                     ^~~~~~~~~~~~~~~~~~
/&lt;&lt;PKGBUILDDIR&gt;&gt;/src/mlpack/methods/ann/layer/recurrent_impl.hpp:297:21: note: uses 'void* operator new(std::size_t)', which does not have an alignment parameter
/&lt;&lt;PKGBUILDDIR&gt;&gt;/src/mlpack/methods/ann/layer/recurrent_impl.hpp:297:21: note: use '-faligned-new' to enable C++17 over-aligned new support
/&lt;&lt;PKGBUILDDIR&gt;&gt;/src/mlpack/methods/ann/layer/recurrent_impl.hpp:298:19: warning: 'new' of type 'mlpack::ann::AddMerge&lt;arma::Mat&lt;double&gt;, arma::Mat&lt;double&gt; &gt;' with extended alignment 16 [-Waligned-new=]
  298 |     mergeModule = new AddMerge&lt;&gt;(false, false);
      |                   ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
/&lt;&lt;PKGBUILDDIR&gt;&gt;/src/mlpack/methods/ann/layer/recurrent_impl.hpp:298:19: note: uses 'void* operator new(std::size_t)', which does not have an alignment parameter
/&lt;&lt;PKGBUILDDIR&gt;&gt;/src/mlpack/methods/ann/layer/recurrent_impl.hpp:298:19: note: use '-faligned-new' to enable C++17 over-aligned new support
/&lt;&lt;PKGBUILDDIR&gt;&gt;/src/mlpack/methods/ann/layer/recurrent_impl.hpp:299:23: warning: 'new' of type 'mlpack::ann::Sequential&lt;arma::Mat&lt;double&gt;, arma::Mat&lt;double&gt;, false&gt;' with extended alignment 16 [-Waligned-new=]
  299 |     recurrentModule = new Sequential&lt;&gt;(false);
      |                       ^~~~~~~~~~~~~~~~~~~~~~~
/&lt;&lt;PKGBUILDDIR&gt;&gt;/src/mlpack/methods/ann/layer/recurrent_impl.hpp:299:23: note: uses 'void* operator new(std::size_t)', which does not have an alignment parameter
/&lt;&lt;PKGBUILDDIR&gt;&gt;/src/mlpack/methods/ann/layer/recurrent_impl.hpp:299:23: note: use '-faligned-new' to enable C++17 over-aligned new support
c++: fatal error: Killed signal terminated program cc1plus
compilation terminated.
make[4]: *** [src/mlpack/tests/CMakeFiles/mlpack_test.dir/build.make:515: src/mlpack/tests/CMakeFiles/mlpack_test.dir/feedforward_network_test.cpp.o] Error 1
make[4]: Leaving directory '/&lt;&lt;PKGBUILDDIR&gt;&gt;/obj-m68k-linux-gnu'
make[3]: *** [CMakeFiles/Makefile2:4329: src/mlpack/tests/CMakeFiles/mlpack_test.dir/all] Error 2
make[3]: Leaving directory '/&lt;&lt;PKGBUILDDIR&gt;&gt;/obj-m68k-linux-gnu'
make[2]: *** [Makefile:144: all] Error 2
make[2]: Leaving directory '/&lt;&lt;PKGBUILDDIR&gt;&gt;/obj-m68k-linux-gnu'
dh_auto_build: cd obj-m68k-linux-gnu &amp;&amp; make -j1 "INSTALL=install --strip-program=true" returned exit code 2
make[1]: *** [debian/rules:52: override_dh_auto_build] Error 255
make[1]: Leaving directory '/&lt;&lt;PKGBUILDDIR&gt;&gt;'
make: *** [debian/rules:46: build-arch] Error 2
dpkg-buildpackage: error: debian/rules build-arch subprocess returned exit status 2
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='barak' date='2019-10-08T13:21:51Z'>
		I don't know how much we can do about this one.  As much as I love old computing hardware I think we're a bit stuck with the limitations of gcc.  Due to the large number of templated header files we have to include, as far as I know, mlpack requires at least 1GB or more of RAM to compile.  There might be some compile flags that could be passed to gcc to reduce memory usage, but I'm not sure; another option (if you're not already doing this) is to ensure that make is called with only one core (i.e. make not make -jX for X &gt; 1).
The alignment warnings should be fixable, though.
		</comment>
		<comment id='2' author='barak' date='2019-10-08T22:52:04Z'>
		Yeah, already doing that.
&lt;denchmark-code&gt;$ egrep -A1 -B1 DH_FLAGS mlpack/debian/rules 

DH_FLAGS += --max-parallel=1

%:
        dh $@ ${DH_FLAGS}
&lt;/denchmark-code&gt;

I did call them crappy machines in the title...
		</comment>
		<comment id='3' author='barak' date='2019-10-09T03:12:52Z'>
		Maybe some CXXFLAGS changes like playing with ggc-min-expand and ggc-min-heapsize might be helpful?  (Also -pipe?)  I don't have too many other tricks I know of, and unfortunately maybe cross-compilation is the best option here.
Also, it's not clear to me that there are any m68k systems in existence to even actually run any mlpack programs. :-D (Are the debian m68k build systems actually physical m68k systems?  Or are they just emulating?)
		</comment>
		<comment id='4' author='barak' date='2019-10-09T13:34:45Z'>
		Yeah, they're actual! Silly perhaps, but real hardware.
One nice thing is they help weed out portability issues which often bite not only past hardware, but also future hardware. Some "doesn't make sense on platform without XXX" options would be sensible, unfortunately there is no such mechanism right now. I agree the "right" solution is to selectively defang the compiler on under-resourced platforms. Or just mark them as unsupported architectures.
		</comment>
		<comment id='5' author='barak' date='2019-10-09T13:49:19Z'>
		Nice!  Glad to hear they have actual hardware for this stuff.  Maybe I should plug in the sparc64 system I have under my desk and get it building Debian packages. :)
I think that unfortunately it's unrealistic to compile mlpack on any system with less than 1GB of RAM.  I don't know of any m68k systems with anywhere close to that much (those are usually &lt;32MB RAM if I remember right) and sh4 I wasn't previously familiar with but it looks like its main use was in the Dreamcast, which only had 16MB of RAM.  So even if we did get some nice reduction of memory usage by gcc, I really don't think there's any way we could get it to be that small of a footprint. :(
		</comment>
		<comment id='6' author='barak' date='2019-10-09T20:14:51Z'>
		Okay. In the next upload I'll selectively remove architectures that seem to fail the build due to being under-resourced.
		</comment>
		<comment id='7' author='barak' date='2019-11-08T20:20:01Z'>
		This issue has been automatically marked as stale because it has not had any recent activity.  It will be closed in 7 days if no further activity occurs.  Thank you for your contributions! 👍
		</comment>
	</comments>
</bug>