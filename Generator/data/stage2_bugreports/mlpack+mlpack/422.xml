<bug id='422' author='theSundayProgrammer' open_date='2015-03-20T07:33:36Z' closed_time='2015-03-21T06:25:01Z'>
	<summary>Error Compiling Triangular_kernel.hpp on Windows</summary>
	<description>
In triangular_kernel.hpp (line 657) the following function fails to compile as it is using the max macro from a windows header.
double Evaluate(const double distance) const
{
return std::max(0.0, (1 - distance) / bandwidth);
}
The workaround is to add
&lt;denchmark-h:h1&gt;ifdef max&lt;/denchmark-h&gt;

&lt;denchmark-h:h1&gt;undef max&lt;/denchmark-h&gt;

&lt;denchmark-h:h1&gt;endif&lt;/denchmark-h&gt;

close to the top of the file
	</description>
	<comments>
		<comment id='1' author='theSundayProgrammer' date='2015-03-20T08:49:41Z'>
		This is already done in src/mlpack/core.hpp; see the end of the file:
&lt;denchmark-link:https://github.com/mlpack/mlpack/blob/master/src/mlpack/core.hpp&gt;https://github.com/mlpack/mlpack/blob/master/src/mlpack/core.hpp&lt;/denchmark-link&gt;

If mlpack is actually failing to compile, please attach a build log so I can dig deeper, but this is a problem that should not be happening.
		</comment>
		<comment id='2' author='theSundayProgrammer' date='2015-03-20T10:05:50Z'>
		#include &lt;mlpack/core/kernels/triangular_kernel.hpp&gt;
// Use Armadillo's C++ version detection.
#ifdef ARMA_USE_CXX11
#define MLPACK_USE_CX11
#endif
#endif
// Clean up unfortunate Windows preprocessor definitions, even if this file was
// already included.  Use std::min and std::max!
#ifdef _WIN32
#ifdef min
#undef min
#endif
#ifdef max
#undef max
#endif
&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

this must be done before including triangular_kernel.hpp not  after as is done in core.hpp
		</comment>
		<comment id='3' author='theSundayProgrammer' date='2015-03-20T10:24:32Z'>
		error compiling lars.cpp
Error   7   error C2059: syntax error : '::'    mlpack\mlpack-1.0.12\src\mlpack\core\kernels\triangular_kernel.hpp  64  1   mlpack
Error   6   error C2589: '(' : illegal token on right side of '::'  mlpack\mlpack-1.0.12\src\mlpack\core\kernels\triangular_kernel.hpp  64  1   mlpack
		</comment>
		<comment id='4' author='theSundayProgrammer' date='2015-03-20T10:26:44Z'>
		Ah, I see now. I don't have a working Visual Studio environment so I have a difficult time testing.
		</comment>
		<comment id='5' author='theSundayProgrammer' date='2015-03-20T10:42:42Z'>
		Can you update master to &lt;denchmark-link:https://github.com/mlpack/mlpack/commit/a12065450b76493f4cef2a68d5a1abcf60745ecd&gt;a120654&lt;/denchmark-link&gt;
 and test the fix I've committed? Thanks!
		</comment>
		<comment id='6' author='theSundayProgrammer' date='2015-03-20T11:36:21Z'>
		That particular fix does not work. But I can see what you are trying. You need to include those #undef's after including windows headers. I'll try to locate that and let you know in a day or two.
		</comment>
		<comment id='7' author='theSundayProgrammer' date='2015-03-20T11:52:41Z'>
		I tried this in timers.hpp and it worked:
#elif defined(_WIN32)
#define NOMINMAX ///////The Sunday Programmer added this
#include &lt;windows.h&gt;  //GetSystemTimeAsFileTime(),
		</comment>
		<comment id='8' author='theSundayProgrammer' date='2015-03-20T12:05:31Z'>
		On further investigation I see no need to include platform dependent headers in timers.hpp. I would recommend moving the entire
#if defined(unix) || defined(__unix)
...
#else
#error "unknown OS"
#endif
to timers.cpp from timers.hpp.
		</comment>
		<comment id='9' author='theSundayProgrammer' date='2015-03-20T13:50:25Z'>
		Ah, okay, now I understand better. The first patch was written on a plane waiting to take off so I'm not too surprised it didn't work perfectly. :)
I've taken a closer look at the situation and committed &lt;denchmark-link:https://github.com/mlpack/mlpack/commit/8bd3f964748695df1023ea6a74b9e5d4bae75eb4&gt;8bd3f96&lt;/denchmark-link&gt;
. This removes the undef'ing of min/max entirely and sets  safely before including , like you suggested. Can you try it and see if that fixes the issue? Thanks for testing the previous patch, also.
I don't see a quick way to move the inclusion of the system-dependent headers into timers.cpp, since the Timers class exposes some methods and has some members that require a definition of the timeval type. If you'd like to refactor and submit a pull request, I'm happy to go that direction, but I'm also happy enough to leave it as-is.
		</comment>
		<comment id='10' author='theSundayProgrammer' date='2015-03-21T01:45:36Z'>
		Thanks. That works on Visual Studio 2013 release x64.
Off topic: just to define 'timeval' we have to include &lt;windows.h&gt; and &lt;winsock.h&gt;. If we can avoid that we could save a lot of compilation time.
		</comment>
		<comment id='11' author='theSundayProgrammer' date='2015-03-21T01:46:38Z'>
		Off topic: just to define 'timeval' we have to include windows.h and winsock.h. If we can avoid that we could save a lot of compilation time.
		</comment>
		<comment id='12' author='theSundayProgrammer' date='2015-03-21T06:25:01Z'>
		Cool; thanks for testing that.  I'm going to close this ticket then, and open another one for the off-topic issue.
		</comment>
	</comments>
</bug>