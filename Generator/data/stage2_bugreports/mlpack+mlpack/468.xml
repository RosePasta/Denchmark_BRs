<bug id='468' author='theSundayProgrammer' open_date='2015-11-07T09:56:59Z' closed_time='2015-11-24T18:56:28Z'>
	<summary>LoadSave Unit test fails  Windows x64</summary>
	<description>
All the other tests are passing except raw ascii. I tried to debug. It looks like tellg() is returning a strange value when the file is opened as text. If I modify the code to open as binary then binary file read fails. Luckily  arma_ascii works. I could not repro the csv isssue mentioned earlier.
[WARN ] Unable to detect type of 'test_file.txt'; load failed. Incorrect extension?
../load_save_test.cpp(194): fatal error: in "LoadSaveTest/SaveArmaASCIITest": critical check data::Load("test_file.txt", test) == true has failed
[WARN ] Unable to detect type of 'test_file.txt'; load failed. Incorrect extension?
../load_save_test.cpp(220): fatal error: in "LoadSaveTest/LoadRawASCIITest": critical check data::Load("test_file.txt", test) == true has failed
[WARN ] Unable to detect type of 'test_file.txt'; load failed. Incorrect extension?
../load_save_test.cpp(246): fatal error: in "LoadSaveTest/LoadCSVTxtTest": critical check data::Load("test_file.txt", test) == true has failed
	</description>
	<comments>
		<comment id='1' author='theSundayProgrammer' date='2015-11-07T10:38:18Z'>
		The issue is with armadillo. I'll raise it there
		</comment>
		<comment id='2' author='theSundayProgrammer' date='2015-11-09T00:58:34Z'>
		Hey, let me know what the results of this are.  If Armadillo issues a bugfix, we can add an #ifdef to point out the bug if the affected Armadillo versions are used on x64 Windows.
		</comment>
		<comment id='3' author='theSundayProgrammer' date='2015-11-09T03:58:19Z'>
		Foolewing msessage sent to Conrad:
In Windows, the following program prints "Not good"when the input file is a text file with CR-LF line endings. More comments inline
`int main() {
std::fstream ifs;
ifs.open(fname, std::fstream::in);
if (ifs) {
std::istream&amp; is = ifs;
auto loadType = arma::diskio::guess_file_type(is);
&lt;denchmark-code&gt;    std::cout &lt;&lt; "Load type" &lt;&lt; loadType &lt;&lt; std::endl;
    // output is 0 unknown
    // this is for the same reason the following program prints "Not Good"
   // So I removed the is.good() test in guess_file_type.
  // Now the loadType is 5 (raw_binary) because the last two characters are '\0'.
  // I guess you have to  read character by character until end of file.

    is.clear();        // get length of file:
    is.seekg(0, std::ios::end);
    is.clear();
    auto length= is.tellg();
    is.seekg(0, is.beg);

    // allocate memory:
    char * buffer = new char[length];

    // read data as a block:
    is.read(buffer, length);
    std::cout &lt;&lt; length &lt;&lt; " "&lt;&lt; (is.good()?"Good":"Not Good") &lt;&lt; std::endl;
    ifs.close();

    // print content:
    std::cout.write(buffer, length);

    delete[] buffer;
}

return 0;
&lt;/denchmark-code&gt;

}`
		</comment>
		<comment id='4' author='theSundayProgrammer' date='2015-11-10T06:16:49Z'>
		Hi Ryan
I contacted Conrad S about this. The issue is that when a file stream is
opened without ifstream::binary flag, Windows  filters the CR-LF bytes to
just LF. As a result the read does not read(buf,len) does not fill the buf
with len bytes. On Un*x there is only one LF and binary or not makes no
difference.
I have no idea how to fix this, nor does Conrad AFAIK, save asking the
client to open the file in binary always.
Hope you can do that in MLPack.
Regards
Joe
On Mon, Nov 9, 2015 at 11:58 AM, Ryan Curtin &lt;denchmark-link:mailto:notifications@github.com&gt;notifications@github.com&lt;/denchmark-link&gt;

wrote:

Hey, let me know what the results of this are. If Armadillo issues a
bugfix, we can add an #ifdef to point out the bug if the affected Armadillo
versions are used on x64 Windows.
â€”
Reply to this email directly or view it on GitHub
#468 (comment).

&lt;denchmark-h:h2&gt;&lt;/denchmark-h&gt;

Joseph Chakravarti Mariadassou
&lt;denchmark-link:http://thesundayprogrammer.com&gt;http://thesundayprogrammer.com&lt;/denchmark-link&gt;

		</comment>
		<comment id='5' author='theSundayProgrammer' date='2015-11-11T00:58:58Z'>
		But read(buffer, length) should fill the buffer with up to length characters, terminated with a \0 (like typical C strings).  Is it instead reading the CR (ASCII value 13) into the buffer?  The rule that causes guess_file_type() to return arma_binary is below:
&lt;denchmark-code&gt;      // the range checking can be made more elaborate
      if( ((val_i &lt;= 8) || (val_i &gt;= 123)) || ((val_j &lt;= 8) || (val_j &gt;= 123)) )
        {
        has_binary = true;
        break;
        }
&lt;/denchmark-code&gt;

It sounds like maybe Conrad's comment applies here---we might simply need to make the rules more complex for Windows systems.
I don't have a Windows environment currently set up, so if you can help debug and test this, we can throw together a patch and send it upstream.
		</comment>
		<comment id='6' author='theSundayProgrammer' date='2015-11-11T09:40:57Z'>
		podarray data(N);
data[N-1] could be anything. We could initialise it to char(20)  and this
problem can be fixed. As I understood, the problem is that it could come up
in other cases where the file is not opened as binary. MLPack appears to be
doing the right thing when it comes to reading a binary file. When a file
is opened as a text file Armadillo is treating it like a binary file. This
is where the problem arises.
Conrad S:
*I looked at the documentation for C++, and I don't think it's possible to
detect how a stream was opened. I'll update Armadillo's documentation to
state that the streams must be opened in binary. *
If you want me to run any test on Windows do let me know.
Joe
		</comment>
		<comment id='7' author='theSundayProgrammer' date='2015-11-23T13:37:00Z'>
		I did a bit of thinking and digging, and I wanted to see if you are willing to try two things:

opening the file as binary on Windows.  This can be done by modifying load_impl.hpp at line 64 to be something like this:

&lt;denchmark-code&gt;#ifdef _WIN32
  stream.open(filename.c_str(), std::fstream::in | std::fstream::binary);
#else
  stream.open(filename.c_str(), std::fstream::in);
#endif
&lt;/denchmark-code&gt;

You'd have to make that change for a couple of functions; both overloads of Load() in load_impl.hpp and both overloads of Save() in save_impl.hpp.  If that fixes your load issues and the SerializationTest output, we can take that as a fix.  Or...

Change the condition in guess_file_type() inside of Armadillo.  It seems possible to me that the '\r' character is not being stripped properly when read under Windows, and this is causing the file to be detected as binary.  So modifying the conditional that I mentioned in the previous comment could fix that.

Like I've mentioned before, I don't have a good working Windows system (and at the current moment I don't have time to set one up), so unfortunately fixing this one will either be up to you (but I'm happy to help how I can!) or someone else who reads this ticket and happens to be developing on Windows.
		</comment>
		<comment id='8' author='theSundayProgrammer' date='2015-11-24T00:07:48Z'>
		That did the trick. Except I had to make the change in save_impl as well. I'll leave it to you to close the bug once you have made the changes to the repo.
		</comment>
		<comment id='9' author='theSundayProgrammer' date='2015-11-24T15:18:10Z'>
		Which change made the trick?  Opening the file in binary mode on Windows?  If so, I'll make the change and close the bug.
		</comment>
		<comment id='10' author='theSundayProgrammer' date='2015-11-24T18:47:52Z'>
		The change in load_impl/save_impl did the trick. I did not consider changers to guess_file_type as it would have had no affect in this case.
I ought to have been clearer.
		</comment>
		<comment id='11' author='theSundayProgrammer' date='2015-11-24T18:56:28Z'>
		Ah, okay.  I committed the fix (&lt;denchmark-link:https://github.com/mlpack/mlpack/commit/449b660127e3fbc42634660edffbbef339b6f73a&gt;449b660&lt;/denchmark-link&gt;
), so this should be fine.  Thanks for your help!
		</comment>
	</comments>
</bug>