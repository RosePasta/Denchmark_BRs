<bug id='1538' author='aabghari' open_date='2018-10-18T19:21:21Z' closed_time='2018-11-14T17:20:01Z'>
	<summary>Wrong HMM predict (state sequence) and LogLikelihood</summary>
	<description>
Hi,
I have a HMM model. Sometime the state sequence estimation is wrong which all the states are zero for  example. I have checked the output with a python hmm implementation hmmlearn. hmmlearn seems to give the right answers for the same model and parameters. I have attached a cpp file which uses MLPACK and a python file which uses hmmlearn. Both have the same parameters and observation. I have put enough comment in the cpp file to follow. The version of the MLPACK is 3.0.3.
Thanks,
Arash
&lt;denchmark-link:https://github.com/mlpack/mlpack/files/2493314/hmm_test.zip&gt;hmm_test.zip&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='aabghari' date='2018-10-18T21:50:06Z'>
		I think I know why it happens. The problem is the numerical instability when calculating logStateProb. I am going to provide you with a patch.
		</comment>
		<comment id='2' author='aabghari' date='2018-10-18T22:00:17Z'>
		Ah, great, thanks for digging in!  I have not had time to look into it---I was hoping I could maybe tonight or tomorrow.  But if you can provide a patch, it accelerates the whole bug fixing process :)
		</comment>
		<comment id='3' author='aabghari' date='2018-10-19T17:51:48Z'>
		How do you want me to provide you with the patch?
		</comment>
		<comment id='4' author='aabghari' date='2018-10-19T19:07:34Z'>
		A pull request is fine, or if you prefer, you can just post the diff here and I can create the PR.  Whatever is most convenient for you. üëç
		</comment>
		<comment id='5' author='aabghari' date='2018-10-22T15:07:06Z'>
		Hi,
Please find the attached diff file. Let me explained what I have done. I think there are two cases which are the root of the problem.

Using the emission probability  instead of the logprob directly. For example in Predict() there is this line which uses the log of the emission probability like this log(emission.probability()). If you look at the emission prob calculation, you see that it's actually calculated from the logprob by taking an exp(). So we have log()-&gt;exp()-&gt;log() which causes numerical instability.
In all probability calculation either Forward() or Backward() for example, All the values are getting multiplied with each other which makes them very small at the end.

To fix the above mentioned causes, I replaced all the prob calculations with the log version. Thus, instead of multiply, it's all addition now. It can even reduce the CPU consumption since everything is now addition and subtraction. To achieve this I have to add to new functionalities which are AddLog() and AccuLog(). I have put this functions under core/math/log_add.{cpp,hpp}. Feel free to restructure them according to mlpack policy.
I have to add a LogProbability function to GMM distribution as well so it can work with the new log version of the HMM.
I have also added a test case. This is the one originally failed on my application and that's how I discovered the issue at the first place.
All the tests are passed with this patch.
Please let me know when you have accepted this patch and merged it into the main branch.
BTW, the patch is against the master branch.
Thanks,
Arash
P.S. the same approach (using LogAdd()) can be used where ever you have softmax  layer to avoid instability too.
&lt;denchmark-link:https://github.com/mlpack/mlpack/files/2501925/hmm.patch.zip&gt;hmm.patch.zip&lt;/denchmark-link&gt;

		</comment>
		<comment id='6' author='aabghari' date='2018-10-24T23:40:48Z'>
		I opened &lt;denchmark-link:https://github.com/mlpack/mlpack/pull/1547&gt;#1547&lt;/denchmark-link&gt;
 with your patch, which I adapted slightly in a few cases.  I inlined the  and  functions, as well as templatizing them.
Would you like me to add your name to the files that you modified?  This is a really nice contribution and we can add your name to  and  as well as the website.  In addition, we like to mail mlpack stickers to new contributors that they can put on their laptop. :)  If you want some, just send me an email at &lt;denchmark-link:mailto:ryan@ratml.org&gt;ryan@ratml.org&lt;/denchmark-link&gt;
 and I can get them in the mail for you.  It could take a few weeks for them to arrive.
		</comment>
		<comment id='7' author='aabghari' date='2018-10-25T00:26:53Z'>
		hi,
I have no issue with adding my name. However I've got the original idea of using LogAdd() a few years back from sphinx library.
&lt;denchmark-link:https://github.com/cmusphinx/sphinxbase/blob/master/include/sphinxbase/logmath.h&gt;https://github.com/cmusphinx/sphinxbase/blob/master/include/sphinxbase/logmath.h&lt;/denchmark-link&gt;

Thanks.
		</comment>
		<comment id='8' author='aabghari' date='2018-10-26T03:04:14Z'>
		No problem, it is still a patch that you prepared.  :)  Let me know what name (and email if you want to add that) you'd like me to use, and if you want any stickers.
		</comment>
		<comment id='9' author='aabghari' date='2018-10-26T14:27:04Z'>
		Hi,
The name is Arash Abghari. The email is &lt;denchmark-link:mailto:arash.abghari@gmail.com&gt;arash.abghari@gmail.com&lt;/denchmark-link&gt;

		</comment>
		<comment id='10' author='aabghari' date='2018-10-26T15:12:11Z'>
		Updated.  Thanks! üëç
		</comment>
		<comment id='11' author='aabghari' date='2018-11-14T17:20:01Z'>
		Hey &lt;denchmark-link:https://github.com/aabghari&gt;@aabghari&lt;/denchmark-link&gt;
, thanks again for the patch.  It is merged now. 
		</comment>
	</comments>
</bug>