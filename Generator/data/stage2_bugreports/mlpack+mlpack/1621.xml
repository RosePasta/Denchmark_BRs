<bug id='1621' author='mascaretti' open_date='2018-12-27T18:59:01Z' closed_time='2019-01-07T17:34:45Z'>
	<summary>Python bindings not working</summary>
	<description>


I am trying to compile mlpack 3.0.4 following the instructions on Manjaro 18.0.


Everything seems to work fine, but for the fact that when I try to import mlpack on Python (3.7.1) I see the following:


&gt;&gt;&gt; import mlpack
Traceback (most recent call last):
 File "&lt;stdin&gt;", line 1, in &lt;module&gt;
ModuleNotFoundError: No module named 'mlpack'


The version of CMake I am using is 3.13.1 (I was checking: #1213) and Cython is 0.29.1-1 (as discussed: #1416).


I have tried to explicitly run make python, getting
this output.


I have checked in /usr/local/lib/python3.7/site-packages, but the directory is empty


I have run bin/mlpack_test to obtain the following: 31 failures (although I think this is hardly related to the issue - being mainly adaboost failing to read in the files)


&lt;denchmark-h:h2&gt;Dependencies&lt;/denchmark-h&gt;

&lt;denchmark-h:h3&gt;C++&lt;/denchmark-h&gt;


armadillo 9.200.6-2
boost 1.68.0-2

&lt;denchmark-h:h3&gt;Python&lt;/denchmark-h&gt;


python-setuptools 1:40.6.2-1
cython 0.29.1-1
python-numpy 1.15.4-1
python-pandas 0.23.4-1
python-pytest-runner 4.2-2

	</description>
	<comments>
		<comment id='1' author='mascaretti' date='2018-12-27T20:31:17Z'>
		Hi there &lt;denchmark-link:https://github.com/mascaretti&gt;@mascaretti&lt;/denchmark-link&gt;
, sorry that it didn't work out of the box.  Thanks for the clear report.  I have a couple other questions...


Did you run make install to install the Python bindings?


You can try running the Python bindings in the build directory with, e.g.,


&lt;denchmark-code&gt;cd /home/andrea/Documenti/mlpack-3.0.4/build/src/mlpack/bindings/python/
export LD_LIBRARY_PATH=/home/andrea/Documenti/mlpack-3.0.4/build/lib/
PYTHONPATH=. python
&lt;/denchmark-code&gt;

then import mlpack should work.

For the failing tests, it looks like maybe you did not run the tests from the right directory?  Ideally you should run bin/mlpack_test from the build directory; or, also you could run make test and that will run all the tests.  Based on the output it doesn't look like there are any problems, just that it is failing to load the data.  All the data should be in the working directory of the test.

		</comment>
		<comment id='2' author='mascaretti' date='2018-12-27T20:52:11Z'>
		Dear &lt;denchmark-link:https://github.com/rcurtin&gt;@rcurtin&lt;/denchmark-link&gt;
, thanks for the super fast reply!
Answering in order:

Yes, I did run make install. I have tried doing it again, obtaining the
following. I also get a message printed on my shell (I guess this is due to the fact I am re-running make install?):

&lt;denchmark-code&gt;TEST FAILED: usr/local/lib/python3.7/site-packages/ does NOT support .pth files
error: bad install directory or PYTHONPATH

You are attempting to install a package to a directory that is not
on PYTHONPATH and which Python does not read ".pth" files from.  The
installation directory you specified (via --install-dir, --prefix, or
the distutils default setting) was:

    usr/local/lib/python3.7/site-packages/

and your PYTHONPATH environment variable currently contains:

    '/usr/local/lib/python3.7/site-packages/'

Here are some of your options for correcting the problem:

* You can choose a different installation directory, i.e., one that is
  on PYTHONPATH or supports .pth files

* You can add the installation directory to the PYTHONPATH environment
  variable.  (It must then also be on PYTHONPATH whenever you run
  Python and want to use the package(s) you are installing.)

* You can set up the installation directory to support ".pth" files by
  using one of the approaches described here:

  https://setuptools.readthedocs.io/en/latest/easy_install.html#custom-installation-locations


Please make the appropriate changes for your system and try again.
&lt;/denchmark-code&gt;



Python bindings work alright in the build directory


You are right, that was my mistake. Now every test works fine.


		</comment>
		<comment id='3' author='mascaretti' date='2018-12-27T20:54:30Z'>
		Thanks for the response.  Actually this appears to be a bug in the CMake configuration.  It turns out to be a duplicate of a bug I have been working on in the past few weeks:
&lt;denchmark-link:http://knife.lugatgt.org/pipermail/mlpack/2018-December/003802.html&gt;http://knife.lugatgt.org/pipermail/mlpack/2018-December/003802.html&lt;/denchmark-link&gt;

Since your issue is on Manjaro and not OS X, maybe I can reproduce it inside of a Docker container.  In any case, hang tight, I have some ideas of what is going on here.  It might take a little bit to get to the bottom of the issue and resolve it though.
		</comment>
		<comment id='4' author='mascaretti' date='2019-01-02T18:38:44Z'>
		Sorry for the delay on this one---I found the bug in CMake pretty quickly and was able to fix it, but I wanted to make CMake have a fatal installation error when it encountered problems.  That part took a bunch longer.
You can use the branch for &lt;denchmark-link:https://github.com/mlpack/mlpack/pull/1629&gt;#1629&lt;/denchmark-link&gt;
, or alternately you can wait until it's merged, and then the problem should be solved.
Thanks again for the report! üëç
		</comment>
		<comment id='5' author='mascaretti' date='2019-01-03T21:19:15Z'>
		The issue should be fixed now, so I'll close it.  Thanks for the report!
		</comment>
		<comment id='6' author='mascaretti' date='2019-01-04T14:55:49Z'>
		Dear &lt;denchmark-link:https://github.com/rcurtin&gt;@rcurtin&lt;/denchmark-link&gt;
 thanks!
I have cloned via git, built and installed everything. Now bindings are actually installed.
However, after having manually run export PYTHONPATH=/usr/local/lib/python3.7/site-packages/, I get the following error from Python:
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/usr/local/lib/python3.7/site-packages/mlpack-3.0.5-py3.7-linux-x86_64.egg/mlpack/__init__.py", line 24, in &lt;module&gt;
    from .hmm_train import hmm_train
ImportError: /usr/local/lib/python3.7/site-packages/mlpack-3.0.5-py3.7-linux-x86_64.egg/mlpack/hmm_train.cpython-37m-x86_64-linux-gnu.so: undefined symbol: _ZNK6mlpack3gmm3GMM14LogProbabilityERKN4arma3ColIdEE
It looks like some linking is not working as expected.
&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

I also wanted to report that running ./bin/mlpack_test in /home/andrea/Documenti/mlpack/build (i.e. the directory in which I have git cloned the code) outputs
&lt;denchmark-code&gt;Running 1470 test cases...
/home/andrea/Documenti/mlpack/src/mlpack/tests/cf_test.cpp(217): ESC[4;31;49mfatal error: in "CFTest/RecommendationAccuracyBiasSVDTest": critical check failures &lt; 17 has failed [17 &gt;= 17]ESC[0;39;49m
&lt;/denchmark-code&gt;

		</comment>
		<comment id='7' author='mascaretti' date='2019-01-04T15:40:02Z'>
		Do you have mlpack installed multiple times on your system?
Run ldd /usr/local/lib/python3.7/site-packages/mlpack-3.0.5-py3.7-linux-x86_64.egg/mlpack/hmm_train.cpython-37m-x86_64-linux-gnu.so and see what it's linked against.  Ideally it should be /usr/local/lib/libmlpack.so.3, but if there is /usr/lib/libmlpack.so on your system that could be a different version, which could cause problems.
Looks like I should update the tolerance for that failing CF test.  It is a randomized test and is not always guaranteed to succeed.
		</comment>
		<comment id='8' author='mascaretti' date='2019-01-04T17:45:56Z'>
		I have tried to install it a number of times. Maybe I should clean everything up and start from scratch?
I have run the command to obtain the following (weird) output:
ldd /usr/local/lib/python3.7/site-packages/mlpack-3.0.5-py3.7-linux-x86_64.egg/mlpack/hmm_train.cpython-37m-x86_64-linux-gnu.so
	linux-vdso.so.1 (0x00007ffdaffd1000)
	libmlpack.so.3 =&gt; not found
	libboost_serialization.so.1.68.0 =&gt; /usr/lib/libboost_serialization.so.1.68.0 (0x00007f24fd438000)
	libpython3.7m.so.1.0 =&gt; /usr/lib/libpython3.7m.so.1.0 (0x00007f24fd0bf000)
	libstdc++.so.6 =&gt; /usr/lib/libstdc++.so.6 (0x00007f24fcf30000)
	libm.so.6 =&gt; /usr/lib/libm.so.6 (0x00007f24fcdab000)
	libgomp.so.1 =&gt; /usr/lib/libgomp.so.1 (0x00007f24fcd7b000)
	libgcc_s.so.1 =&gt; /usr/lib/libgcc_s.so.1 (0x00007f24fcd5f000)
	libc.so.6 =&gt; /usr/lib/libc.so.6 (0x00007f24fcb9b000)
	/usr/lib64/ld-linux-x86-64.so.2 (0x00007f24fd544000)
	librt.so.1 =&gt; /usr/lib/librt.so.1 (0x00007f24fcb91000)
	libpthread.so.0 =&gt; /usr/lib/libpthread.so.0 (0x00007f24fcb70000)
	libdl.so.2 =&gt; /usr/lib/libdl.so.2 (0x00007f24fcb6b000)
	libutil.so.1 =&gt; /usr/lib/libutil.so.1 (0x00007f24fcb66000)
Yet
ls -al /usr/local/lib
totale 2796
drwxr-xr-x  4 root root    4096  3 gen 22.06 .
drwxr-xr-x 12 root root    4096  4 gen 15.27 ..
lrwxrwxrwx  1 root root      14  3 gen 22.06 libmlpack.so -&gt; libmlpack.so.3
lrwxrwxrwx  1 root root      16  3 gen 22.06 libmlpack.so.3 -&gt; libmlpack.so.3.0
-rwxr-xr-x  1 root root 2844064  3 gen 20.37 libmlpack.so.3.0
drwxr-xr-x  2 root root    4096  3 gen 22.06 pkgconfig
drwxr-xr-x  3 root root    4096  3 gen 22.06 python3.7
I honestly don't know what to do.
		</comment>
		<comment id='9' author='mascaretti' date='2019-01-04T19:12:59Z'>
		The fact that ldd doesn't find anything to link against seems to suggest that there is only one version of mlpack installed on the system.  Still, it may not be a bad idea to clean everything up and start over, just to make sure we are not chasing a strange artifact.
If you run LD_LIBRARY_PATH=/usr/local/lib/ ldd /usr/local/lib/python3.7/site-packages/mlpack-3.0.5-py3.7-linux-x86_64.egg/mlpack/hmm_train.cpython-37m-x86_64-linux-gnu.so it should find the right libmlpack.so.
Another thing you could try would be running the Python bindings directly from the build directory, i.e.
&lt;denchmark-code&gt;$ cd build/
$ export PYTHONPATH=src/mlpack/bindings/python/
$ export LD_LIBRARY_PATH=lib/
$ python
...
&gt;&gt;&gt; import mlpack
&lt;/denchmark-code&gt;

and I think that should work.  You could also try setting LD_LIBRARY_PATH to /usr/local/lib when you open python: LD_LIBRARY_PATH=/usr/local/lib/ python.
		</comment>
		<comment id='10' author='mascaretti' date='2019-01-07T16:09:20Z'>
		So, I have tried building and installing mlpack on a different machine (with the same OS).
I experience the same issue here.
ldd /usr/local/lib/python3.7/site-packages/mlpack-3.0.5-py3.7-linux-x86_64.egg/mlpack/hmm_train.cpython-37m-x86_64-linux-gnu.so
        linux-vdso.so.1 (0x00007ffc198df000)
        libmlpack.so.3 =&gt; not found
        libboost_serialization.so.1.68.0 =&gt; /usr/lib/libboost_serialization.so.1.68.0 (0x00007ff414688000)
        libpython3.7m.so.1.0 =&gt; /usr/lib/libpython3.7m.so.1.0 (0x00007ff41430f000)
        libstdc++.so.6 =&gt; /usr/lib/libstdc++.so.6 (0x00007ff414180000)
        libm.so.6 =&gt; /usr/lib/libm.so.6 (0x00007ff413ffb000)
        libgomp.so.1 =&gt; /usr/lib/libgomp.so.1 (0x00007ff413fcb000)
        libgcc_s.so.1 =&gt; /usr/lib/libgcc_s.so.1 (0x00007ff413faf000)
        libc.so.6 =&gt; /usr/lib/libc.so.6 (0x00007ff413deb000)
        /usr/lib64/ld-linux-x86-64.so.2 (0x00007ff414797000)
        librt.so.1 =&gt; /usr/lib/librt.so.1 (0x00007ff413de1000)
        libpthread.so.0 =&gt; /usr/lib/libpthread.so.0 (0x00007ff413dc0000)
        libdl.so.2 =&gt; /usr/lib/libdl.so.2 (0x00007ff413dbb000)
        libutil.so.1 =&gt; /usr/lib/libutil.so.1 (0x00007ff413db6000)
I don't know why it cannot link to the proper library. I have also tried:

running LD_LIBRARY_PATH=/usr/local/lib/ ldd /usr/local/lib/python3.7/site-packages/mlpack-3.0.5-py3.7-linux-x86_64.egg/mlpack/hmm_train.cpython-37m-x86_64-linux-gnu.so

        linux-vdso.so.1 (0x00007ffdb19ec000)
        libmlpack.so.3 =&gt; not found
        libboost_serialization.so.1.68.0 =&gt; /usr/lib/libboost_serialization.so.1.68.0 (0x00007f979f570000)
        libpython3.7m.so.1.0 =&gt; /usr/lib/libpython3.7m.so.1.0 (0x00007f979f1f7000)
        libstdc++.so.6 =&gt; /usr/lib/libstdc++.so.6 (0x00007f979f068000)
        libm.so.6 =&gt; /usr/lib/libm.so.6 (0x00007f979eee3000)
        libgomp.so.1 =&gt; /usr/lib/libgomp.so.1 (0x00007f979eeb3000)
        libgcc_s.so.1 =&gt; /usr/lib/libgcc_s.so.1 (0x00007f979ee97000)
        libc.so.6 =&gt; /usr/lib/libc.so.6 (0x00007f979ecd3000)
        /usr/lib64/ld-linux-x86-64.so.2 (0x00007f979f67f000)
        librt.so.1 =&gt; /usr/lib/librt.so.1 (0x00007f979ecc9000)
        libpthread.so.0 =&gt; /usr/lib/libpthread.so.0 (0x00007f979eca8000)
        libdl.so.2 =&gt; /usr/lib/libdl.so.2 (0x00007f979eca3000)
        libutil.so.1 =&gt; /usr/lib/libutil.so.1 (0x00007f979ec9e000)

Running LD_LIBRARY_PATH=/usr/local/lib/ python to obtain from within python:

&gt;&gt;&gt; import mlpack
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/usr/local/lib/python3.7/site-packages/mlpack-3.0.5-py3.7-linux-x86_64.egg/mlpack/__init__.py", line 11, in &lt;module&gt;
    from .test_python_binding import test_python_binding
ImportError: libmlpack.so.3: cannot open shared object file: No such file or directory

Running the Python binding from the build directory works alright.

		</comment>
		<comment id='11' author='mascaretti' date='2019-01-07T16:21:38Z'>
		Ok, glad that (3) worked ok.  But I'm surprised that libmlpack.so.3 wasn't able to be opened for either case (1) or (2).  Are you sure the file /usr/local/lib/libmlpack.so.3 exists?
Also, maybe LD_LIBRARY_PATH needs to be exported, i.e.,
&lt;denchmark-code&gt;export LD_LIBRARY_PATH=/usr/local/lib
python
&lt;/denchmark-code&gt;

I am not sure on that last part though.
		</comment>
		<comment id='12' author='mascaretti' date='2019-01-07T16:29:56Z'>
		You are right, it doesn't exist:
pwd
/usr/local/lib
ls -al
totale 12
drwxr-xr-x  3 root root 4096  7 gen 17.27 .
drwxr-xr-x 12 root root 4096  7 gen 14.59 ..
drwxr-xr-x  3 root root 4096  7 gen 14.59 python3.7
		</comment>
		<comment id='13' author='mascaretti' date='2019-01-07T16:34:05Z'>
		I see, did you run make install successfully?  libmlpack.so.3 must have been installed somewhere...
		</comment>
		<comment id='14' author='mascaretti' date='2019-01-07T16:46:23Z'>
		I am reporting &lt;denchmark-link:https://github.com/mlpack/mlpack/files/2733514/mlpack_make_install.log&gt;here&lt;/denchmark-link&gt;
 what happens if I re-run  from 
		</comment>
		<comment id='15' author='mascaretti' date='2019-01-07T16:47:59Z'>
		Oh, strange, the library got installed to /usr/local/lib64:
&lt;denchmark-code&gt;-- Up-to-date: /usr/local/lib64/libmlpack.so.3.0
-- Up-to-date: /usr/local/lib64/libmlpack.so.3
-- Up-to-date: /usr/local/lib64/libmlpack.so
&lt;/denchmark-code&gt;

So try using LD_LIBRARY_PATH=/usr/local/lib64/ instead and let's see what happens.
		</comment>
		<comment id='16' author='mascaretti' date='2019-01-07T17:25:49Z'>
		So, I run export LD_LIBRARY_PATH=/usr/local/lib64/ to obtain
ldd /usr/local/lib/python3.7/site-packages/mlpack-3.0.5-py3.7-linux-x86_64.egg/mlpack/hmm_train.cpython-37m-x86_64-linux-gnu.so
        linux-vdso.so.1 (0x00007ffd7d2fd000)
        libmlpack.so.3 =&gt; /usr/local/lib64/libmlpack.so.3 (0x00007f280c4d4000)
        libboost_serialization.so.1.68.0 =&gt; /usr/lib/libboost_serialization.so.1.68.0 (0x00007f280c453000)
        libpython3.7m.so.1.0 =&gt; /usr/lib/libpython3.7m.so.1.0 (0x00007f280c0da000)
        libstdc++.so.6 =&gt; /usr/lib/libstdc++.so.6 (0x00007f280bf4b000)
        libm.so.6 =&gt; /usr/lib/libm.so.6 (0x00007f280bdc6000)
        libgomp.so.1 =&gt; /usr/lib/libgomp.so.1 (0x00007f280bd96000)
        libgcc_s.so.1 =&gt; /usr/lib/libgcc_s.so.1 (0x00007f280bd7a000)
        libc.so.6 =&gt; /usr/lib/libc.so.6 (0x00007f280bbb6000)
        /usr/lib64/ld-linux-x86-64.so.2 (0x00007f280c78d000)
        libarmadillo.so.9 =&gt; /usr/lib/libarmadillo.so.9 (0x00007f280bba8000)
        libboost_program_options.so.1.68.0 =&gt; /usr/lib/libboost_program_options.so.1.68.0 (0x00007f280bb20000)
        libboost_unit_test_framework.so.1.68.0 =&gt; /usr/lib/libboost_unit_test_framework.so.1.68.0 (0x00007f280ba4f000)
        libpthread.so.0 =&gt; /usr/lib/libpthread.so.0 (0x00007f280ba2e000)
        librt.so.1 =&gt; /usr/lib/librt.so.1 (0x00007f280ba22000)
        libdl.so.2 =&gt; /usr/lib/libdl.so.2 (0x00007f280ba1d000)
        libutil.so.1 =&gt; /usr/lib/libutil.so.1 (0x00007f280ba18000)
        libopenblas.so.3 =&gt; /usr/lib/libopenblas.so.3 (0x00007f280a7ea000)
        liblapack.so.3 =&gt; /usr/lib/liblapack.so.3 (0x00007f2809f08000)
        libhdf5.so.103 =&gt; /usr/lib/libhdf5.so.103 (0x00007f2809b8f000)
        libsz.so.2 =&gt; /usr/lib/libsz.so.2 (0x00007f280998a000)
        libz.so.1 =&gt; /usr/lib/libz.so.1 (0x00007f2809773000)
        libarpack.so.2 =&gt; /usr/lib/libarpack.so.2 (0x00007f2809725000)
        libsuperlu.so.4 =&gt; /usr/lib/libsuperlu.so.4 (0x00007f28096af000)
        libboost_timer.so.1.68.0 =&gt; /usr/lib/libboost_timer.so.1.68.0 (0x00007f28096a7000)
        libboost_system.so.1.68.0 =&gt; /usr/lib/libboost_system.so.1.68.0 (0x00007f28096a1000)
        libgfortran.so.5 =&gt; /usr/lib/libgfortran.so.5 (0x00007f2809422000)
        libaec.so.0 =&gt; /usr/lib/libaec.so.0 (0x00007f2809219000)
        libmpi_usempif08.so.40 =&gt; /usr/lib/openmpi/libmpi_usempif08.so.40 (0x00007f28091d7000)
        libmpi_usempi_ignore_tkr.so.40 =&gt; /usr/lib/openmpi/libmpi_usempi_ignore_tkr.so.40 (0x00007f28091c7000)
        libmpi_mpifh.so.40 =&gt; /usr/lib/openmpi/libmpi_mpifh.so.40 (0x00007f2809168000)
        libmpi.so.40 =&gt; /usr/lib/openmpi/libmpi.so.40 (0x00007f280905d000)
        libboost_chrono.so.1.68.0 =&gt; /usr/lib/libboost_chrono.so.1.68.0 (0x00007f2809052000)
        libquadmath.so.0 =&gt; /usr/lib/../lib/libquadmath.so.0 (0x00007f280900f000)
        libopen-rte.so.40 =&gt; /usr/lib/openmpi/libopen-rte.so.40 (0x00007f2808f56000)
        libopen-pal.so.40 =&gt; /usr/lib/openmpi/libopen-pal.so.40 (0x00007f2808e97000)
        libhwloc.so.5 =&gt; /usr/lib/libhwloc.so.5 (0x00007f2808e54000)
        libnuma.so.1 =&gt; /usr/lib/libnuma.so.1 (0x00007f2808e47000)
        libudev.so.1 =&gt; /usr/lib/libudev.so.1 (0x00007f2808e27000)
        libltdl.so.7 =&gt; /usr/lib/libltdl.so.7 (0x00007f2808e1b000)
which seems promising.
If I run export PYTHONPATH=/usr/local/lib/python3.7/site-packages/, run Python from the shell and import mlpack, everything works fine!
Everything seems to work alright also if I do LD_LIBRARY_PATH=/usr/local/lib64/ spyder so that I can use the IDE.
Thanks for the help and support: I really needed to use MLPACK for my thesis.
Now I will try to add to the PYTHONPATH and LD_LIBRARY_PATH what's needed so that I don't have to do it everytime I boot the OS.
		</comment>
		<comment id='17' author='mascaretti' date='2019-01-07T17:34:45Z'>
		Great!  I am glad you got it worked out.  I imagine it would be possible to install mlpack in a different location (i.e. using CMAKE_INSTALL_PREFIX or something) so that setting PYTHONPATH and LD_LIBRARY_PATH aren't needed, but at this point maybe it is easier to just keep it set up the way that you have it set up. :)  Glad that mlpack is useful for your thesis, and feel free to open more issues if you have more problems.
		</comment>
	</comments>
</bug>