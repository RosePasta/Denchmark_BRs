<bug id='821' author='ghost(ghost)' open_date='2016-11-30T10:48:35Z' closed_time='2017-03-27T14:48:18Z'>
	<summary>mlpack_adaboost error</summary>
	<description>
./mlpack_adaboost -t train.csv -l labels.csv -M model.txt
./mlpack_adaboost -m model.txt -T train.csv -o result.csv
[FATAL] input stream error
terminate called after throwing an instance of 'std::runtime_error'
what():  fatal error; see Log::Fatal output
Aborted (core dumped)
train.csv :
2,3
2,3
2,4
1,0
2,3
6,6
7,8
2,3
2,3
2,4
1,0
2,3
6,6
7,8
2,3
2,3
2,4
1,0
2,3
6,6
7,8
lables.csv:
0
0
0
0
0
1
1
0
0
0
0
0
1
1
0
0
0
0
0
1
1
version:
mlpack 2.1.0
boost 1.58.0
blas openblas 2.18
	</description>
	<comments>
		<comment id='1' author='ghost(ghost)' date='2016-12-05T02:23:34Z'>
		I can reproduce this with both 2.1.0 and git master.  But I found that if you use binary models (i.e. -M model.bin and -m model.bin) there is no problem and everything seems to work.  Text and XML models fail.  I'll try to look into this in the coming days.
		</comment>
		<comment id='2' author='ghost(ghost)' date='2016-12-05T03:18:46Z'>
		Aha， bin format works well ，Thx！
Infact bin format makes more efficiency， but sometimes texts get better readability ：）
		</comment>
		<comment id='3' author='ghost(ghost)' date='2016-12-06T15:15:48Z'>
		So the issue here is twofold:

The training set you are using can be perfectly modeled by the weak learner in a single iteration of AdaBoost.  But the AdaBoost code does not handle this as well as it could.
There is some problem serializing nan values in text and binary format.

I have some ideas for how to fix it but at the moment I don't have the time.  If you train on a more difficult dataset, I think that you are not likely to see this problem.  Still, I will fix it when I have a chance! :)
		</comment>
		<comment id='4' author='ghost(ghost)' date='2017-01-14T19:45:01Z'>
		Hey &lt;denchmark-link:https://github.com/rcurtin&gt;@rcurtin&lt;/denchmark-link&gt;

I am a newbie here, and I am in a position of just jumping in and contribute. I wanted to take up this issue, since most of the 'easy'  labelled isues have already been taken up or have been fixed. I will require help from you on how to go ahead with this issue.
		</comment>
		<comment id='5' author='ghost(ghost)' date='2017-01-17T13:57:08Z'>
		Hi &lt;denchmark-link:https://github.com/nitinkgp23&gt;@nitinkgp23&lt;/denchmark-link&gt;
, I haven't had time to address this issue yet and similarly my time is pretty limited to help out with someone else fixing the issue.  For the  issue, you can try writing some sample code that serializes, e.g., an Armadillo vector with some  values in it, and then deserialize it, and see if it fails.  For the AdaBoost issue, you can run AdaBoost with the training set given here and see that it doesn't converge in one iteration when it should, and then work out what needs to change for it to converge in one iteration.
		</comment>
		<comment id='6' author='ghost(ghost)' date='2017-03-03T14:52:48Z'>
		I'll try and isolate this issue if no one else is actively working on it right now.
		</comment>
		<comment id='7' author='ghost(ghost)' date='2017-03-25T00:59:17Z'>
		The Adaboost problem is fixed with &lt;denchmark-link:https://github.com/mlpack/mlpack/pull/956&gt;#956&lt;/denchmark-link&gt;
 being merged (thanks &lt;denchmark-link:https://github.com/nish21&gt;@nish21&lt;/denchmark-link&gt;
!).  The nan serialization issue still remains.
		</comment>
		<comment id='8' author='ghost(ghost)' date='2017-03-25T14:56:52Z'>
		Thanks for the update &lt;denchmark-link:https://github.com/rcurtin&gt;@rcurtin&lt;/denchmark-link&gt;
.
I checked the reported error and cannot replicate it after &lt;denchmark-link:https://github.com/mlpack/mlpack/pull/956&gt;#956&lt;/denchmark-link&gt;
 .
Also,  values are being correctly serialized, as I tested &lt;denchmark-link:https://gist.github.com/shikharbhardwaj/17ff67075822906d9c8f1260981e60b6&gt;here&lt;/denchmark-link&gt;
.
Is there anything else that needs to be tested?
		</comment>
		<comment id='9' author='ghost(ghost)' date='2017-03-27T14:12:43Z'>
		Ah, so there is a little catch... the test that you've written uses Armadillo's built-in loading/saving functionality.  But the serialization issue occurs when we are using boost::serialization, to serialize models.  Therefore you would need to use the other overload of data::Load(), which you could do like this:
&lt;denchmark-code&gt;data::Load("test.bin", "matrix", test);
&lt;/denchmark-code&gt;

And you could test that with bin, xml, and txt extensions.  From what I can tell with a very quick investigation, bin works, but xml and txt do not.  This may be a boost::serialization issue, but I am not sure.
		</comment>
		<comment id='10' author='ghost(ghost)' date='2017-03-27T14:45:21Z'>
		I retested and the issue is there.
Turns out  does not support  or  in the text-based formats. Mailing list discussion : &lt;denchmark-link:http://lists.boost.org/boost-users/2005/01/9360.php&gt;http://lists.boost.org/boost-users/2005/01/9360.php&lt;/denchmark-link&gt;

There are a few workarounds mentioned in the post.
		</comment>
		<comment id='11' author='ghost(ghost)' date='2017-03-27T14:48:18Z'>
		Thanks for looking into that.  It seems that implementing any of these workarounds would take some large amount of effort, and on top of that, any NaNs appearing in mlpack models almost certainly mean something is very wrong.  I can't think of any situation where a NaN would be the correct value.  Thus, I think we can go ahead and close this since the original issue is now solved, and not worry about serializing NaNs correctly.
		</comment>
	</comments>
</bug>