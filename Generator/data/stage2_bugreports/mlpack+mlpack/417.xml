<bug id='417' author='saketkc' open_date='2015-03-04T07:35:42Z' closed_time='2015-03-25T06:58:47Z'>
	<summary>SVD batch and incremental tests are susceptible to random failures</summary>
	<description>
In context of &lt;denchmark-link:https://github.com/Homebrew/homebrew-science/pull/1819&gt;https://github.com/Homebrew/homebrew-science/pull/1819&lt;/denchmark-link&gt;

See: &lt;denchmark-link:http://bot.brew.sh/job/Homebrew%20Science%20Pull%20Requests/1159/version=mavericks/testReport/junit/brew-test-bot/mavericks/install_Homebrew_science_mlpack/&gt;http://bot.brew.sh/job/Homebrew%20Science%20Pull%20Requests/1159/version=mavericks/testReport/junit/brew-test-bot/mavericks/install_Homebrew_science_mlpack/&lt;/denchmark-link&gt;

I do not have a Mac to replicate this error, but this is preventing from mlpack being updated on homebrew.
&lt;denchmark-code&gt;tmp/mlpack-zmG7xJ/mlpack-mlpack-1.0.12/src/mlpack/tests/svd_batch_test.cpp:98: fatal error in "SVDBatchMomentumTest": critical check RMSE_2 &lt;= RMSE_1 failed [0.9185867037696458 &gt; 0.91157712642902167]
/tmp/mlpack-zmG7xJ/mlpack-mlpack-1.0.12/src/mlpack/tests/svd_batch_test.cpp:149: fatal error in "SVDBatchRegularizationTest": critical check RMSE_2 &lt;= RMSE_1 failed [0.91787583628169389 &gt; 0.91157712642902167]
/tmp/mlpack-zmG7xJ/mlpack-mlpack-1.0.12/src/mlpack/tests/svd_incremental_test.cpp:123: fatal error in "SVDIncompleteIncrementalRegularizationTest": critical check RMSE_2 &lt; RMSE_1 failed [0.92918024945339284 &gt;= 0.92886091107661617]
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='saketkc' date='2015-03-04T20:51:36Z'>
		I can reliably reproduce those test errors on a Mac running 10.9.5.
		</comment>
		<comment id='2' author='saketkc' date='2015-03-08T21:19:45Z'>
		As an update, I looked into the issue.  It's not actually Mac-specific.  Instead, the issue is more of a bad tolerance in those three failing tests.  If I vary the random seed (which is, in these cases, set at compilation time), I sometimes get tests that pass and sometimes get tests that fail.  For now what I would do in your packaging situation is to apply a patch that comments out those tests (either the entire test in svd_batch_test.cpp and svd_incremental_test.cpp, or just the lines that call BOOST_REQUIRE_*).  I'm relatively sure the algorithms themselves will still work.  Many of the mlpack tests are aimed more at ensuring that a code update does not break the functionality of the method, instead of ensuring that mlpack's algorithms work on every possible platform (in general, this  is a lot harder to test and also failures of this type happen a lot less often).
I'm going to leave the ticket open until I fix the tests in master, but what I've written should be good enough to solve the Homebrew issue, I think.
		</comment>
		<comment id='3' author='saketkc' date='2015-03-25T07:05:59Z'>
		Okay, so I think you can adapt the patch in &lt;denchmark-link:https://github.com/mlpack/mlpack/commit/73b48dd8d3eb3ecd702a8d9cdb9501a270e1925a&gt;73b48dd&lt;/denchmark-link&gt;
 to mlpack 1.0.12 and use that in Homebrew, and that should fix your issue.
		</comment>
		<comment id='4' author='saketkc' date='2015-03-25T07:37:12Z'>
		The patch wouldn't work straight away, since there are commits in between that and 1.0.12 tagged release. Do you plan to make a minor release, 1.0.13 maybe?
		</comment>
		<comment id='5' author='saketkc' date='2015-03-25T07:42:17Z'>
		I don't plan to make a minor release for a change like this that doesn't actually affect functionality.  You can easily take the changeset &lt;denchmark-link:https://github.com/mlpack/mlpack/commit/73b48dd8d3eb3ecd702a8d9cdb9501a270e1925a&gt;73b48dd&lt;/denchmark-link&gt;
 and adapt it to 1.0.12, since the actual meat of the code in  and  is virtually identical in 1.0.12 and master.  If there is a 1.0.13 release, I will incorporate this fix, of course, but there will need to be larger improvements to the overall package or some other more compelling reason.  In this particular case you should have no problem building a patch to use with your Homebrew package.
		</comment>
		<comment id='6' author='saketkc' date='2015-03-27T01:38:49Z'>
		Fails on  &lt;denchmark-link:http://bot.brew.sh/job/Homebrew%20Science%20Pull%20Requests/1414/version=mountain_lion/testReport/junit/brew-test-bot/mountain_lion/install_Homebrew_science_mlpack/&gt;http://bot.brew.sh/job/Homebrew%20Science%20Pull%20Requests/1414/version=mountain_lion/testReport/junit/brew-test-bot/mountain_lion/install_Homebrew_science_mlpack/&lt;/denchmark-link&gt;

		</comment>
		<comment id='7' author='saketkc' date='2015-03-27T01:54:59Z'>
		This is not related to the issue you originally opened.  Please open a new issue and detail what is going on more completely.  I don't have a Mac, I don't use a Mac, I have little desire to own a Mac, and so I don't generally know what is going on when you simply tell me that things are failing.
Further, you aren't applying any patch like I suggested, so even if it did compile, you would still have the original problems.
		</comment>
		<comment id='8' author='saketkc' date='2015-03-27T02:05:30Z'>
		Ryan, I  &lt;denchmark-link:https://github.com/Homebrew/homebrew-science/pull/1819/files#diff-2e6205c4e12cd1dafdb5284a684acf07R5&gt;applying the patch&lt;/denchmark-link&gt;
. I don't own a Mac either(I have already indicated this several times). It looks like it might be a  issue.
I am going to probably close that PR. Thanks for your suggestions.
		</comment>
		<comment id='9' author='saketkc' date='2015-03-27T02:26:29Z'>
		I think that the issue may be a clang issue, but again, I'd rather discuss that in a different issue for the sake of anyone who comes searching later.
As for applying the patch, what you are actually doing there is downloading mlpack master &lt;denchmark-link:https://github.com/mlpack/mlpack/commit/73b48dd8d3eb3ecd702a8d9cdb9501a270e1925a&gt;73b48dd&lt;/denchmark-link&gt;
, which is significantly different from mlpack 1.0.12, and labeling it as mlpack 1.0.12.  What I meant, originally, was that you can use git to generate a patch (something like this):
&lt;denchmark-code&gt;git create-patch 73b48dd
&lt;/denchmark-code&gt;

and then you can modify that patch until it applies to the mlpack-1.0.12 source.  Then, as a step in the build process, you apply the patch you created (patch -p0 &lt; the_patch.patch), and the test errors are fixed.
		</comment>
	</comments>
</bug>