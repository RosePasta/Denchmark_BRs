<bug id='755' author='keon' open_date='2016-08-06T06:19:48Z' closed_time='2017-03-06T01:39:11Z'>
	<summary>Log::Info has incompatibility issue with some iomanip functions</summary>
	<description>
Log::Info works fine with std::setw, but I found that it has some issues with some functions in &lt;iomanip&gt;.
std::fixed and std::setprecision function is ignored when used together with Log:: functions.
	</description>
	<comments>
		<comment id='1' author='keon' date='2016-12-15T11:12:13Z'>
		Can I start working on this issue?
		</comment>
		<comment id='2' author='keon' date='2016-12-15T14:07:40Z'>
		I had a look through the code in prefixedoutstream.hpp and prefixedoutstream_impl.hpp.
Converting each output to a string causes the floating-point types to lose the type information needed by the destination stream to output the necessary precision, even after the appropriate flags are set.
I could imagine two solutions to the problem

Introduce 3 inline template specialisations for util::prefixedoutstream::BaseLogic for float, double and long double, each of which directly writes the val to the destination stream.
Use std::enable_if on BaseLogic to write val directly to the destination if the type satisfies std::is_floating_point.

Any thoughts?
		</comment>
		<comment id='3' author='keon' date='2016-12-15T15:22:35Z'>
		Hi Shikhar,
Thanks for looking into this.  I think the second approach is the right one to use here.  Since there should never be a newline printed as a result of printing a number, you can probably simplify the overload of BaseLogic greatly, too.
One thing to check will be that std::fixed and std::setprecision work with Armadillo objects, like this:
&lt;denchmark-code&gt;arma::mat m;
m.randu(5, 5);
Log::Info &lt;&lt; std::setprecision(10) &lt;&lt; m;
&lt;/denchmark-code&gt;

But even if that does not, just a patch for floating-point types only will still be a great help!
Thanks,
Ryan
		</comment>
		<comment id='4' author='keon' date='2016-12-15T17:44:22Z'>
		Thanks Ryan.
Turns out that just syncing the flags and precision between destination and convert will be enough, without needing extra overloads.
Printing Armadillo objects with set precision is not possible with this approach AFAICS, as the overloads for operator&lt;&lt; called are defined by Armadillo.
Armadillo does provide a raw_print method to print without modifying the stream flags but that would require an overload approach on the baseLogic(?)
I'll create a PR ASAP with the changes for floating-point types.
		</comment>
		<comment id='5' author='keon' date='2016-12-16T16:18:10Z'>
		Not quite fixed yet, it would be nice to make sure Armadillo objects print with custom precision first.
		</comment>
		<comment id='6' author='keon' date='2017-01-10T18:54:59Z'>
		Hi
An approach for printing Armadillo objects with custom precision would be to define an overload for them, and then use  to print the object, as shown &lt;denchmark-link:http://arma.sourceforge.net/docs.html#raw_print&gt;here&lt;/denchmark-link&gt;
.
The problem with this approach would be misaligned output if the user decides to set incorrect flags on the stream. Also, by default, std::cout does not have std::fixed set, and precision set to 6.
Any suggestions?
		</comment>
		<comment id='7' author='keon' date='2017-01-30T19:12:58Z'>
		Hi Shikhar, sorry for the slow response on this one.
Here is an idea.  We can use std::ios flags to detect what is set and determine whether or not these are the default parameters.  If the default parameters are set, then we can just call Armadillo's typical print() functionality.  However, if different parameters are set, then we can call raw_print().  What do you think of this approach?
		</comment>
		<comment id='8' author='keon' date='2017-02-28T10:08:28Z'>
		I am sorry for replying so late.
The approach for switching between raw_print and print, based on the stream flags seems pretty reasonable to me.
How do I go about creating template specialisation for Armadillo objects? Checking if the type is from the  namespace has its &lt;denchmark-link:http://stackoverflow.com/questions/34974844/check-if-a-type-is-from-a-particular-namespace&gt;quirks&lt;/denchmark-link&gt;
.
How about defining 5 specialisations for arma::mat, arma::vec, arma::rowvec, arma::spmat, arma::cube? This seems like a big violation of DRY.
Thanks for your time
		</comment>
		<comment id='9' author='keon' date='2017-02-28T15:30:29Z'>
		Probably the closest we have is :
&lt;denchmark-link:https://github.com/conradsnicta/armadillo-code/blob/7.800.x/include/armadillo_bits/traits.hpp#L632&gt;https://github.com/conradsnicta/armadillo-code/blob/7.800.x/include/armadillo_bits/traits.hpp#L632&lt;/denchmark-link&gt;

Do you think that will do what you need?  I've used is_arma_type&lt;&gt; in other places too for the same reasons.
		</comment>
		<comment id='10' author='keon' date='2017-02-28T15:39:52Z'>
		That is great. I'll create a PR with the changes.
		</comment>
		<comment id='11' author='keon' date='2017-03-06T01:39:11Z'>
		Very nice to have this solved.  Thanks &lt;denchmark-link:https://github.com/shikharbhardwaj&gt;@shikharbhardwaj&lt;/denchmark-link&gt;
!
		</comment>
	</comments>
</bug>