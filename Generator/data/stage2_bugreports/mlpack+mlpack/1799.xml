<bug id='1799' author='seewishnew' open_date='2019-03-21T02:29:54Z' closed_time='2019-07-26T03:26:03Z'>
	<summary>Issue with building mlpack binaries on Mac OS X Mojave</summary>
	<description>
&lt;denchmark-h:h4&gt;Issue description&lt;/denchmark-h&gt;

While trying to execute a binary or during the make process, the armadillo library is not able to find the latest version of libhdf5 and instead it keeps looking for libhdf5.101.dylib.
It produces the following error:
&lt;denchmark-code&gt;dyld: Library not loaded: @rpath/libhdf5.101.dylib
  Referenced from: /usr/local/lib/libarmadillo.9.dylib
  Reason: image not found
&lt;/denchmark-code&gt;

&lt;denchmark-h:h4&gt;Your environment&lt;/denchmark-h&gt;


version of mlpack: 3.0.5
operating system: Mac OS X Mojave
compiler: gcc/g++ front-end clang/clang++ back-end (Apple LLVM version 10.0.0)
version of dependencies (Boost/Armadillo): Boost - 1.68.0_1; Armadillo - 9.200.7_1
any other environment information you think is relevant: I also use conda version 4.5.12. I have this issue in the default base environment. This base environment has only those extra packages required by mlpack's python bindings installed at the moment.

&lt;denchmark-h:h4&gt;Steps to reproduce&lt;/denchmark-h&gt;

This message appears

During the make command's execution
While trying to compile cpp code that uses mlpack/armadillo
While trying to execute an mlpack binary file

&lt;denchmark-h:h4&gt;Expected behavior&lt;/denchmark-h&gt;

This should not happen. However, there are two hacky fixes that I discovered, for the problems associated with this issue:

At the time of this writing, anaconda installs libhdf5.101.dylib by default. So for compiling cpp code that uses mlpack/armadillo, you can circumvent the problem by redirecting the rpath search directory:

&lt;denchmark-code&gt;g++ cov.cpp -o cov.cpp.o --std=c++11 -lmlpack -larmadillo -rpath /anaconda3/lib/
&lt;/denchmark-code&gt;


The above does not fix the issue with the mlpack binaries as the make files would need to be fixed so as to find the appropriate libhdf5 file in the run path before building the binary. The hack that I discovered for this was to link the latest version of libhdf5 that I had installed with brew to the old version:

&lt;denchmark-code&gt;sudo ln -s /usr/local/lib/libhdf5.103.dylib /usr/local/lib/libhdf5.101.dylib
&lt;/denchmark-code&gt;

And then do the usual cmake ../ and make in a clean build directory.
But ideally, armadillo should be able to pick up the latest version of libhdf5 without having to depend on the version number.
&lt;denchmark-h:h4&gt;Actual behavior&lt;/denchmark-h&gt;

It produces the following error:
&lt;denchmark-code&gt;dyld: Library not loaded: @rpath/libhdf5.101.dylib
  Referenced from: /usr/local/lib/libarmadillo.9.dylib
  Reason: image not found
Abort trap: 6
&lt;/denchmark-code&gt;

The make process does not highlight this message in particular. However, the mlpack binaries fail to execute after producing the above message.
	</description>
	<comments>
		<comment id='1' author='seewishnew' date='2019-03-24T23:12:39Z'>
		Can you compile any Armadillo program at all?  Try this:
&lt;denchmark-code&gt;#include &lt;armadillo&gt;

int main()
{
  arma::mat x("1 2 3; 4 5 6");
  x.print();
}
&lt;/denchmark-code&gt;

and you can compile that with g++ -o test test.cpp -larmadillo.  Does that give the same HDF5 linking issue?
		</comment>
		<comment id='2' author='seewishnew' date='2019-03-25T10:12:51Z'>
		Yes. I was able to compile and then run this program without any linking issues.
I remembered that I had symlinked the current version of libhdf5 (libhdf5.103.dylib) in /usr/local/lib to libhdf5.101.dylib. So I renamed that file to libhdf5.101.dylib.old and then tried compiling the program again. Even this time it compiled successfully, and I was able to run the program without any issue this time as well.
		</comment>
		<comment id='3' author='seewishnew' date='2019-04-26T05:18:46Z'>
		Sorry for the really slow response on this.  Things have been busy on my end...
I think I may understand what is happening here.  When you compile an Armadillo program by hand, I think that it works because it is using the system-installed HDF5 version (via brew).  But when you are compiling mlpack in the anaconda environment, it is using the conda-provided HDF5 version, but the brew-provided Armadillo version.
It seems to me like the best option would be to obtain a copy of Armadillo via anaconda, or, alternately, hand-compile Armadillo so that it finds the anaconda-provided HDF5 version and links against it.  (I am sorry---you are in the special version of hell that happens when there are multiple package managers providing different versions of .so's on a single system.  This is not a fun place, but it started becoming common when every language decided to have its own package manager.  And the Python community decided it wouldn't just be one, but it would be several.)
You could compile Armadillo with  to disable HDF5 support; or, you can read the CMake HDF5 documentation to try and figure out how to get it to search the right place:
&lt;denchmark-link:https://cmake.org/cmake/help/latest/module/FindHDF5.html&gt;https://cmake.org/cmake/help/latest/module/FindHDF5.html&lt;/denchmark-link&gt;

You can check if you've had success by running ldd libarmadillo.so after you've built Armadillo.  In any case, building Armadillo by hand will be the right call here, unless you want to modify the brew-provided armadillo_bits/config.hpp to comment out the #define ARMA_USE_HDF5 line.  (That file will be found in whatever include directory brew installed to.)
I hope this helps---let me know if I can clarify anything.
		</comment>
		<comment id='4' author='seewishnew' date='2019-07-19T02:26:14Z'>
		This issue has been automatically marked as stale because it has not had any recent activity.  It will be closed in 7 days if no further activity occurs.  Thank you for your contributions! üëç
		</comment>
		<comment id='5' author='seewishnew' date='2020-12-08T10:42:14Z'>
		How to 'hand-compile Armadillo so that it finds the anaconda-provided HDF5 version and links against it.'?
		</comment>
	</comments>
</bug>