<bug id='1928' author='janbraun' open_date='2019-06-17T14:08:55Z' closed_time='2019-08-10T01:07:45Z'>
	<summary>mlpack 3.1.1 fails to compile with gcc 9.1.0 and USE_OPENMP=yes</summary>
	<description>
&lt;denchmark-h:h4&gt;Issue description&lt;/denchmark-h&gt;

I cannot compile mlpack 3.1.1 with openmp support when using gcc 9.1.0.
Compiling without openmp support (USE_OPENMP=no) and gcc 9.1.0 works fine.
Compilation with openmp support and clang 8.0.0 also works.
&lt;denchmark-h:h4&gt;Your environment&lt;/denchmark-h&gt;


version of mlpack: 3.1.1
operating system: Gentoo Linux
compiler: gcc 9.1.0
version of dependencies (Boost/Armadillo): boost 1.65, armadillo 9.200.6
any other environment information you think is relevant:

&lt;denchmark-h:h4&gt;Steps to reproduce&lt;/denchmark-h&gt;


Unpack sources
Change to source dir, create build dir and change to that.
Call cmake with -DUSE_OPENMP=yes cmake -G Ninja -DCMAKE_INSTALL_PREFIX=/usr -DBUILD_CLI_EXECUTABLES=yes -DDEBUG=no -DARMA_EXTRA_DEBUG=no -DBUILD_MARKDOWN_BINDINGS=no -DMATHJAX=yes -DUSE_OPENMP=yes -DPROFILE=no -DBUILD_PYTHON_BINDINGS=no -DBUILD_TESTS=no -DMATHJAX_JS_PATH=/usr/share/mathjax/MathJax.js ..
Call ninja

&lt;denchmark-h:h4&gt;Expected behavior&lt;/denchmark-h&gt;

Compilation completes
&lt;denchmark-h:h4&gt;Actual behavior&lt;/denchmark-h&gt;

Compilation fails for src/mlpack/methods/det/CMakeFiles/mlpack_det.dir/det_main.cpp.o
Call /usr/bin/c++  -DARMA_NO_DEBUG -DBOOST_TEST_DYN_LINK -DHAS_OPENMP -DNDEBUG -I../src -Isrc/mlpack/.. -fdiagnostics-color -fdiagnostics-color -Wall -Wextra -ftemplate-depth=1000 -O3 -fopenmp   -DBINDING_TYPE=BINDING_TYPE_CLI -std=gnu++11 -MD -MT src/mlpack/methods/det/CMakeFiles/mlpack_det.dir/det_main.cpp.o -MF src/mlpack/methods/det/CMakeFiles/mlpack_det.dir/det_main.cpp.o.d -o src/mlpack/methods/det/CMakeFiles/mlpack_det.dir/det_main.cpp.o -c ../src/mlpack/methods/det/det_main.cpp
Output
&lt;denchmark-code&gt;In file included from ../src/mlpack/methods/det/dt_utils.hpp:147,
from ../src/mlpack/methods/det/det_main.cpp:15:
../src/mlpack/methods/det/dt_utils_impl.hpp: In function 'mlpack::det::DTree&lt;MatType, TagType&gt;* mlpack::det::Trainer(MatType&amp;, size_t, bool, size_t, size_t, bool) [with MatType = arma::Mat&lt;double&gt;; TagType = int]':
../src/mlpack/methods/det/dt_utils_impl.hpp:189:3: error: 'folds' not specified in enclosing 'parallel'
189 |   for (omp_size_t fold = 0; fold &lt; (omp_size_t) folds; fold++)
|   ^~~
../src/mlpack/methods/det/dt_utils_impl.hpp:187:11: error: enclosing 'parallel'
187 |   #pragma omp parallel for default(none) \
|           ^~~
../src/mlpack/methods/det/dt_utils_impl.hpp:192:33: error: 'testSize' not specified in enclosing 'parallel'
192 |     const size_t start = fold * testSize;
|                                 ^~~~~~~~
../src/mlpack/methods/det/dt_utils_impl.hpp:187:11: error: enclosing 'parallel'
187 |   #pragma omp parallel for default(none) \
|           ^~~
../src/mlpack/methods/det/dt_utils_impl.hpp:194:61: error: 'cvData' not specified in enclosing 'parallel'
194 |                                 * testSize, (size_t) cvData.n_cols);
|                                                      ~~~~~~~^~~~~~
../src/mlpack/methods/det/dt_utils_impl.hpp:187:11: error: enclosing 'parallel'
187 |   #pragma omp parallel for default(none) \
|           ^~~
../src/mlpack/methods/det/dt_utils_impl.hpp:222:5: error: 'minLeafSize' not specified in enclosing 'parallel'
222 |     cvDTree.Grow(train, cvOldFromNew, useVolumeReg, maxLeafSize,
|     ^~~~~~~
../src/mlpack/methods/det/dt_utils_impl.hpp:187:11: error: enclosing 'parallel'
187 |   #pragma omp parallel for default(none) \
|           ^~~
../src/mlpack/methods/det/dt_utils_impl.hpp:222:5: error: 'maxLeafSize' not specified in enclosing 'parallel'
222 |     cvDTree.Grow(train, cvOldFromNew, useVolumeReg, maxLeafSize,
|     ^~~~~~~
../src/mlpack/methods/det/dt_utils_impl.hpp:187:11: error: enclosing 'parallel'
187 |   #pragma omp parallel for default(none) \
|           ^~~
../src/mlpack/methods/det/dt_utils_impl.hpp:222:5: error: 'useVolumeReg' not specified in enclosing 'parallel'
222 |     cvDTree.Grow(train, cvOldFromNew, useVolumeReg, maxLeafSize,
|     ^~~~~~~
../src/mlpack/methods/det/dt_utils_impl.hpp:187:11: error: enclosing 'parallel'
187 |   #pragma omp parallel for default(none) \
|           ^~~
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='janbraun' date='2019-06-17T14:16:11Z'>
		The main difference when switching compilers seems to be that clang has openmp 3.1 and gcc has openmp 4.5, using their corresponding libraries.
		</comment>
		<comment id='2' author='janbraun' date='2019-06-17T19:26:54Z'>
		A similar bug seems to occur with blender, according to
&lt;denchmark-link:https://bugs.gentoo.org/685922&gt;https://bugs.gentoo.org/685922&lt;/denchmark-link&gt;
, which references
&lt;denchmark-link:https://bugzilla.redhat.com/show_bug.cgi?format=multiple&amp;id=1674700&gt;https://bugzilla.redhat.com/show_bug.cgi?format=multiple&amp;id=1674700&lt;/denchmark-link&gt;

the critical change in gcc 9 is due to a change in OpenMP 4.0:
&lt;denchmark-link:https://gcc.gnu.org/gcc-9/porting_to.html#ompdatasharing&gt;https://gcc.gnu.org/gcc-9/porting_to.html#ompdatasharing&lt;/denchmark-link&gt;

		</comment>
		<comment id='3' author='janbraun' date='2019-06-17T20:21:20Z'>
		So my first guess is to change:



mlpack/src/mlpack/methods/det/dt_utils_impl.hpp


        Lines 187 to 188
      in
      e2f696c






 #pragma omp parallel for default(none) \ 



 shared(prunedSequence, regularizationConstants) 





to:
#pragma omp parallel for default(none) firstprivate(folds) \
      shared(prunedSequence, regularizationConstants)
if that works we could do this for the other cases as well, will check this tomorrow, unless you like to.
		</comment>
		<comment id='4' author='janbraun' date='2019-06-17T20:50:51Z'>
		Thanks for looking at this issue! When I am using
&lt;denchmark-code&gt;  #pragma omp parallel for default(none) \
      firstprivate(folds, testSize, cvData, minLeafSize, maxLeafSize, \
              useVolumeReg) \
      shared(prunedSequence, regularizationConstants)
&lt;/denchmark-code&gt;

i.e., including all variables gcc complains about, it compiles on.
But besides your guess and the referenced site saying "…Specifying them in firstprivate clause is one way to achieve compatibility with both older GCC versions and GCC 9…" I have no idea what the code actually needs.
		</comment>
		<comment id='5' author='janbraun' date='2019-06-30T03:33:07Z'>
		I got this error when installing from the Arch Linux AUR package repository, but manually applying the solution in &lt;denchmark-link:https://github.com/janbraun&gt;@janbraun&lt;/denchmark-link&gt;
 's post fixed it.
		</comment>
		<comment id='6' author='janbraun' date='2019-07-06T16:45:46Z'>
		Could we also just drop the default(none)?  That seems to work on my system but I am not sure it works in all cases.
		</comment>
		<comment id='7' author='janbraun' date='2019-08-03T01:52:02Z'>
		Just a ping on this one; has anyone affected by the issue tried dropping the ?  If that works that seems like the easiest patch to merge.  But if nobody has a chance to check then I can just open a PR with &lt;denchmark-link:https://github.com/janbraun&gt;@janbraun&lt;/denchmark-link&gt;
's fix.
		</comment>
		<comment id='8' author='janbraun' date='2019-08-10T01:07:44Z'>
		I think now that &lt;denchmark-link:https://github.com/mlpack/mlpack/pull/1970&gt;#1970&lt;/denchmark-link&gt;
 is merged, this should be fixed.  Feel free to comment if the current master branch doesn't fix the issue, and we can reopen it. :)
		</comment>
	</comments>
</bug>