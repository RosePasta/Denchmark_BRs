<bug id='1772' author='pvarshney1729' open_date='2019-03-10T15:57:13Z' closed_time='2019-05-20T08:39:34Z'>
	<summary>Segmentation fault in Python_QuickStart</summary>
	<description>
&lt;denchmark-h:h4&gt;Issue description&lt;/denchmark-h&gt;

I was facing Segmentation Fault (core dumped) error while running the Python QuickStart Code on "&lt;denchmark-link:http://mlpack.org/docs/mlpack-3.0.4/doxygen/python_quickstart.html&gt;http://mlpack.org/docs/mlpack-3.0.4/doxygen/python_quickstart.html&lt;/denchmark-link&gt;
". Earlier the issue was with
output = mlpack.preprocess_split(input=dataset, input_labels=labels, test_ratio=0.3)
which was resolved from issue &lt;denchmark-link:https://github.com/mlpack/mlpack/issues/1694&gt;#1694&lt;/denchmark-link&gt;
 . However the problem still persists, now with the line
output = mlpack.random_forest(training=training_set, labels=training_labels, print_training_accuracy=True, num_trees=10, minimum_leaf_size=3)
&lt;denchmark-h:h4&gt;My environment&lt;/denchmark-h&gt;


version of mlpack: 3.0.4
operating system: Ubuntu 18.04
version of dependencies (Boost/Armadillo): Armadillo

	</description>
	<comments>
		<comment id='1' author='pvarshney1729' date='2019-03-10T16:24:31Z'>
		I think so you should build mlpack using git master for correct solution.
		</comment>
		<comment id='2' author='pvarshney1729' date='2019-03-10T18:26:24Z'>
		Unfortunately, it building mlpack using git master isn't working. Moreover, it is giving Segmentation Fault in the line
output = mlpack.preprocess_split(input=dataset, input_labels=labels, test_ratio=0.3) also!
Also, the second sample code (Movie Recommender) on the above link is working fine.
		</comment>
		<comment id='3' author='pvarshney1729' date='2019-03-16T08:30:24Z'>
		&lt;denchmark-link:https://github.com/rcurtin&gt;@rcurtin&lt;/denchmark-link&gt;
 I would like to work upon this issue, can I proceed?
		</comment>
		<comment id='4' author='pvarshney1729' date='2019-03-16T14:36:04Z'>
		&lt;denchmark-link:https://github.com/Shubhangi100&gt;@Shubhangi100&lt;/denchmark-link&gt;
, sure, you are more than welcome to help out.  You might be interested in taking a look at the IRC logs from yesterday; I think I was helping someone with a similar problem.
		</comment>
		<comment id='5' author='pvarshney1729' date='2019-03-16T17:13:45Z'>
		&lt;denchmark-link:https://github.com/rcurtin&gt;@rcurtin&lt;/denchmark-link&gt;
 I have read the IRC logs, in my system there is .so file for preprocess_split and it is here '/usr/local/lib/python2.7/dist-packages/mlpack-3.0.5-py2.7-linux-x86_64.egg/mlpack' but still I am getting segmentation fault in 'output=mlpack.preprocess_split(input=dataset,input_labels=labels,test_ratio=0.3)'.
which was already resolved in &lt;denchmark-link:https://github.com/mlpack/mlpack/issues/1694&gt;#1694&lt;/denchmark-link&gt;
 . Now, how to proceed further?
'
		</comment>
		<comment id='6' author='pvarshney1729' date='2019-03-16T17:31:51Z'>
		&lt;denchmark-link:https://github.com/Shubhangi100&gt;@Shubhangi100&lt;/denchmark-link&gt;
 the goal of the issue is to help &lt;denchmark-link:https://github.com/pvarshney1729&gt;@pvarshney1729&lt;/denchmark-link&gt;
 resolve their problem, but it looks like you haven't fully reproduced the problem yet.  I'd look at &lt;denchmark-link:https://github.com/mlpack/mlpack/issues/1694&gt;#1694&lt;/denchmark-link&gt;
 and make sure you are incorporating the code there.  If you are still getting a segmentation fault, probably the right thing to do is dig in and modify the code to try and figure out what is causing the segmentation fault, or possibly to use a debugger like gdb or pdb to try and find where the segmentation fault happens.  That can help clarify what is going on and lead towards a fix. 
		</comment>
		<comment id='7' author='pvarshney1729' date='2019-03-24T16:03:56Z'>
		&lt;denchmark-link:https://github.com/pvarshney1729&gt;@pvarshney1729&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/Shubhangi100&gt;@Shubhangi100&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/rcurtin&gt;@rcurtin&lt;/denchmark-link&gt;
  I believe there are multiple issues here which are as follows:


Line: labels = df['label']
This returns a pandas.core.series.Series instead of pd. pandas.core.frame.DataFrame. This is solved by #1694
Strangely I still encountered this issue, this might be because my version is not up-to-date with the current version.


Line: df = pd.read_csv('http://www.mlpack.org/datasets/covertype-small.csv.gz')
The data(from the downloaded location) has nan values which is evident from
np.argwhere(np.isnan(output['training'])).shape returns (6804,2)
and hence
output = mlpack.random_forest(training=training_set, labels=training_labels, print_training_accuracy=True, num_trees=10, minimum_leaf_size=3)
results in
error:  error: sort_index(): detected NaN terminate called after throwing an instance of ' std::logic_error'


Hence use some other data such as iris files in the build folder something like this:
training_set = np.array(pd.read_csv('build/iris_train.csv'))
training_labels = np.squeeze(np.array(pd.read_csv('build/iris_train_labels.csv')))
test_set = np.array(pd.read_csv('build/iris_test.csv'))
test_labels = np.squeeze(np.array(pd.read_csv('build/iris_test_labels.csv'))) 

Notice the np.squeeze() statements in training_labels and test_labels. This is done to avoid the following error:
mlpack/random_forest.pyx in mlpack.random_forest.random_forest() mlpack/arma_numpy.pyx in mlpack.arma_numpy.numpy_to_row_s() ValueError: Buffer has wrong number of dimensions (expected 1, got 2)
which basically says that the shape of labels is (x,1) while the expected shape was (x,)
This is a hack  similar to #1694.

I havent used the bug templates and addressing style for MLPACK community as this was already reported.
		</comment>
		<comment id='8' author='pvarshney1729' date='2019-03-28T09:45:28Z'>
		I tried all classification algorithms and getting a segmentation fault for all and also when debugged showing the same error for all algorithms in Mat_meat.hpp file. Is this issue is specific to my set up of mlpack. Maybe there is some binding problem in my set up of mlpack.&lt;denchmark-link:https://github.com/pvarshney1729&gt;@pvarshney1729&lt;/denchmark-link&gt;
@halwai are you also facing this issue?
		</comment>
		<comment id='9' author='pvarshney1729' date='2019-04-07T17:41:48Z'>
		&lt;denchmark-link:https://github.com/Shubhangi100&gt;@Shubhangi100&lt;/denchmark-link&gt;
  Nope, I am not.
		</comment>
		<comment id='10' author='pvarshney1729' date='2019-05-16T15:33:20Z'>
		I have had the same issue as described above, including the proposed fix in 1694 only moving the segmentation fault further on in the quickstart example. This was on ubuntu 18.04, using python3 and mlpack3 downloaded via apt package manager, then removed and downloaded via pip3.
I am considering building mlpack myself with python3 bindings, but I was wondering, are the people having issues using a specific OS and/or using python3 instead of python2 like I am? I note that, while I can't find information on whether mlpack only works with a specific python major version, the build instructions and cmake file seem to hint that python2 is needed.
		</comment>
		<comment id='11' author='pvarshney1729' date='2019-05-16T15:41:21Z'>
		Having looked through multiple threads discussing this issue, there is a trend of people on Ubuntu 18.04 or 16.04 being affected. I'm not saying correlation is causation, but it might be a clue.
I will try it out on my mac as soon as possible and report back.
		</comment>
		<comment id='12' author='pvarshney1729' date='2019-05-16T23:08:01Z'>
		I found our problem.  I looked at the .pyx files that are being generated and saw this:
&lt;denchmark-code&gt;  if isinstance(copy_all_inputs, bool):
    if copy_all_inputs:
      SetParam[cbool](&lt;const string&gt; 'copy_all_inputs', copy_all_inputs)
      CLI.SetPassed(&lt;const string&gt; 'copy_all_inputs')
  else:
    raise TypeError("'copy_all_inputs' must have type 'bool'!")

  # Detect if the parameter was passed; set if so.
    input_tuple = to_matrix(input, dtype=np.double, copy=CLI.HasParam('copy_all_inputs'))
    if len(input_tuple[0].shape) &gt; 2:
      input_tuple[0].shape = (input_tuple[0].shape[0], 1)
    input_mat = arma_numpy.numpy_to_mat_d(input_tuple[0], input_tuple[1])
    SetParam[arma.Mat[double]](&lt;const string&gt; 'input', dereference(input_mat))
    CLI.SetPassed(&lt;const string&gt; 'input')
    del input_mat
&lt;/denchmark-code&gt;

The generator is printing too many spaces for required matrix input parameters... thus, the input matrix never actually makes it to mlpack!  Further, the tests don't catch it because they don't test a required matrix parameter.  I am working on a fix now.
		</comment>
		<comment id='13' author='pvarshney1729' date='2019-05-17T01:26:55Z'>
		I opened &lt;denchmark-link:https://github.com/mlpack/mlpack/pull/1898&gt;#1898&lt;/denchmark-link&gt;
, which I believe will fix this problem.  If you like, please try that branch and see if it fixes the problem. 
		</comment>
		<comment id='14' author='pvarshney1729' date='2019-05-18T11:06:58Z'>
		Nice one! I'll give this a go as soon as I'm back in office Monday (and I'll try it out when I get home, though I hadn't tried it there yet...)
		</comment>
		<comment id='15' author='pvarshney1729' date='2019-05-20T08:39:34Z'>
		Fixed in &lt;denchmark-link:https://github.com/mlpack/mlpack/pull/1898&gt;#1898&lt;/denchmark-link&gt;
.
		</comment>
	</comments>
</bug>