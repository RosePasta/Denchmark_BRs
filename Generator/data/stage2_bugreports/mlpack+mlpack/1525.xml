<bug id='1525' author='GLmontanari' open_date='2018-10-11T09:59:43Z' closed_time='2018-10-24T13:21:25Z'>
	<summary>Can't compile ANN code from tutorial</summary>
	<description>
Hi there, I'm trying to compile the source code from the ANN tutorial, the link is &lt;denchmark-link:http://mlpack.org/docs/mlpack-3.0.3/doxygen/anntutorial.html&gt;http://mlpack.org/docs/mlpack-3.0.3/doxygen/anntutorial.html&lt;/denchmark-link&gt;

I'm using windows 10 with MSVS 2017, mlpack 3.0.3
I just put the code in my main() function and it looks like this:
int main() {
	// Load the training set.
	arma::mat dataset;
	mlpack::data::Load("thyroid_train.csv", dataset, true);
	// Split the labels from the training set.
	arma::mat trainData = dataset.submat(0, 0, dataset.n_rows - 4,
		dataset.n_cols - 1);
	// Split the data from the training set.
	arma::mat trainLabels = dataset.submat(dataset.n_rows - 3, 0,
		dataset.n_rows - 1, dataset.n_cols - 1);
	// Initialize the network.
	FFN&lt;&gt; model;
	model.Add&lt;Linear&lt;&gt; &gt;(trainData.n_rows, 8);
	model.Add&lt;SigmoidLayer&lt;&gt; &gt;();
	model.Add&lt;Linear&lt;&gt; &gt;(8, 3);
	model.Add&lt;LogSoftMax&lt;&gt; &gt;();
	// Train the model.
	model.Train(trainData, trainLabels);
	// Use the Predict method to get the assignments.
	arma::mat assignments;
	model.Predict(trainData, assignments);
	return 0;
        }
when trying to compile i get the following error:
E0442 too few arguments for class template "mlpack::ann::Linear"
I read the API documentation, but I'm not as expert as to tell what's wrong. Can someone help?
	</description>
	<comments>
		<comment id='1' author='GLmontanari' date='2018-10-11T11:59:58Z'>
		Strange, I can't test this right now, so if you are willing to run some tests that would be great:

can you compile if you just use a Linear layer:

Linear&lt;&gt; layer(10, 10);

what if we provide the extra template arguments:

// Load the training set.
arma::mat dataset;
mlpack::data::Load("thyroid_train.csv", dataset, true);
// Split the labels from the training set.
arma::mat trainData = dataset.submat(0, 0, dataset.n_rows - 4,
	dataset.n_cols - 1);
// Split the data from the training set.
arma::mat trainLabels = dataset.submat(dataset.n_rows - 3, 0,
	dataset.n_rows - 1, dataset.n_cols - 1);
// Initialize the network.
FFN&lt;&gt; model;
model.Add&lt;Linear&lt;arma::mat, arma::mat&gt; &gt;(trainData.n_rows, 8);
model.Add&lt;SigmoidLayer&lt;&gt; &gt;();
model.Add&lt;Linear&lt;&gt; &gt;(8, 3);
model.Add&lt;LogSoftMax&lt;&gt; &gt;();
// Train the model.
model.Train(trainData, trainLabels);
// Use the Predict method to get the assignments.
arma::mat assignments;
model.Predict(trainData, assignments);
return 0;
		</comment>
		<comment id='2' author='GLmontanari' date='2018-10-11T12:13:23Z'>
		I think that I've encountered this before and it's an include ordering issue... I think.  Can you paste the includes that you've got at the top of the file?
		</comment>
		<comment id='3' author='GLmontanari' date='2018-10-11T12:21:04Z'>
		I begin from the quickest answer: here are the includes:
&lt;denchmark-code&gt;#include &lt;mlpack/core.hpp&gt;
#include &lt;mlpack/methods/ann/ffn.hpp&gt;
&lt;/denchmark-code&gt;

		</comment>
		<comment id='4' author='GLmontanari' date='2018-10-11T12:27:16Z'>
		&lt;denchmark-link:https://github.com/zoq&gt;@zoq&lt;/denchmark-link&gt;
 . what if we provide the extra template arguments: I tried this:
&lt;denchmark-code&gt;int main() {
	// Load the training set.
	arma::mat dataset;
	mlpack::data::Load("thyroid_train.csv", dataset, true);
	// Split the labels from the training set.
	arma::mat trainData = dataset.submat(0, 0, dataset.n_rows - 4,
		dataset.n_cols - 1);
	// Split the data from the training set.
	arma::mat trainLabels = dataset.submat(dataset.n_rows - 3, 0,
		dataset.n_rows - 1, dataset.n_cols - 1);
	// Initialize the network.
	FFN&lt;&gt; model;
	model.Add&lt;Linear&lt;arma::mat, arma::mat&gt; &gt;(trainData.n_rows, 8);
	model.Add&lt;SigmoidLayer&lt;&gt; &gt;();
	model.Add&lt;Linear&lt;arma::mat, arma::mat&gt; &gt;(8, 3);
	model.Add&lt;LogSoftMax&lt;&gt; &gt;();
	// Train the model.
	model.Train(trainData, trainLabels);
	// Use the Predict method to get the assignments.
	arma::mat assignments;
	model.Predict(trainData, assignments);
	return 0;
}
&lt;/denchmark-code&gt;

I put the arguments arma::mat in both Layer because I couldn't solve the issue by filling just the first Layer. Then I tried to Rebuild my solution and obtained the following error report:
Error	C2027	use of undefined type 'mlpack::ann::Lineararma::mat,arma::mat'	for_mlpack	c:\mlpack\mlpack-3.0.3\build\include\mlpack\methods\ann\ffn.hpp	248
Error	C2664	'void std::vector&lt;boost::variant&lt;mlpack::ann::Addarma::mat,arma::mat *,mlpack::ann::AddMergearma::mat,arma::mat *,mlpack::ann::AtrousConvolution&lt;mlpack::ann::NaiveConvolutionmlpack::ann::ValidConvolution,mlpack::ann::NaiveConvolutionmlpack::ann::FullConvolution,mlpack::ann::NaiveConvolutionmlpack::ann::ValidConvolution,arma::mat,arma::mat&gt; *,mlpack::ann::BaseLayermlpack::ann::LogisticFunction,arma::mat,arma::mat *,mlpack::ann::BaseLayermlpack::ann::IdentityFunction,arma::mat,arma::mat *,mlpack::ann::BaseLayermlpack::ann::TanhFunction,arma::mat,arma::mat *,mlpack::ann::BaseLayermlpack::ann::RectifierFunction,arma::mat,arma::mat *,mlpack::ann::BaseLayermlpack::ann::SoftplusFunction,arma::mat,arma::mat *,mlpack::ann::BatchNormarma::mat,arma::mat *,mlpack::ann::BilinearInterpolationarma::mat,arma::mat *,mlpack::ann::Concatarma::mat,arma::mat *,mlpack::ann::Concatenatearma::mat,arma::mat *,mlpack::ann::ConcatPerformance&lt;mlpack::ann::NegativeLogLikelihoodarma::mat,arma::mat,arma::mat,arma::mat&gt; *,mlpack::ann::Constantarma::mat,arma::mat *,mlpack::ann::Convolution&lt;mlpack::ann::NaiveConvolutionmlpack::ann::ValidConvolution,mlpack::ann::NaiveConvolutionmlpack::ann::FullConvolution,mlpack::ann::NaiveConvolutionmlpack::ann::ValidConvolution,arma::mat,arma::mat&gt; *,mlpack::ann::TransposedConvolution&lt;mlpack::ann::NaiveConvolutionmlpack::ann::ValidConvolution,mlpack::ann::NaiveConvolutionmlpack::ann::FullConvolution,mlpack::ann::NaiveConvolutionmlpack::ann::ValidConvolution,arma::mat,arma::mat&gt; *,mlpack::ann::DropConnectarma::mat,arma::mat *,mlpack::ann::Dropoutarma::mat,arma::mat *,mlpack::ann::AlphaDropoutarma::mat,arma::mat *,mlpack::ann::ELUarma::mat,arma::mat *,mlpack::ann::FlexibleReLUarma::mat,arma::mat *,mlpack::ann::Glimpsearma::mat,arma::mat *,mlpack::ann::HardTanHarma::mat,arma::mat *,mlpack::ann::Joinarma::mat,arma::mat *,mlpack::ann::LayerNormarma::mat,arma::mat *,mlpack::ann::LeakyReLUarma::mat,arma::mat *,mlpack::ann::Lineararma::mat,arma::mat *,mlpack::ann::LinearNoBiasarma::mat,arma::mat *,mlpack::ann::LogSoftMaxarma::mat,arma::mat *,mlpack::ann::Lookuparma::mat,arma::mat *,mlpack::ann::LSTMarma::mat,arma::mat *,mlpack::ann::GRUarma::mat,arma::mat *,mlpack::ann::FastLSTMarma::mat,arma::mat *,mlpack::ann::MaxPoolingarma::mat,arma::mat *,mlpack::ann::MeanPoolingarma::mat,arma::mat *,mlpack::ann::MultiplyConstantarma::mat,arma::mat *,mlpack::ann::MultiplyMergearma::mat,arma::mat *,mlpack::ann::NegativeLogLikelihoodarma::mat,arma::mat *,mlpack::ann::PReLUarma::mat,arma::mat *,mlpack::ann::Recurrentarma::mat,arma::mat *,mlpack::ann::RecurrentAttentionarma::mat,arma::mat *,mlpack::ann::ReinforceNormalarma::mat,arma::mat *,mlpack::ann::Reparametrizationarma::mat,arma::mat *,mlpack::ann::Selectarma::mat,arma::mat *,mlpack::ann::Sequentialarma::mat,arma::mat *,mlpack::ann::Subviewarma::mat,arma::mat *,mlpack::ann::VRClassRewardarma::mat,arma::mat *&gt;,std::allocator&lt;_Ty&gt;&gt;::push_back(_Ty &amp;&amp;)': cannot convert argument 1 from 'LayerType *' to 'const _Ty &amp;'	for_mlpack	c:\mlpack\mlpack-3.0.3\build\include\mlpack\methods\ann\ffn.hpp	248
		</comment>
		<comment id='5' author='GLmontanari' date='2018-10-11T12:31:56Z'>
		Try adding mlpack/methods/ann/layer/layer.hpp to the list of includes.  I think that will solve the issue.
		</comment>
		<comment id='6' author='GLmontanari' date='2018-10-11T12:42:07Z'>
		&lt;denchmark-link:https://github.com/rcurtin&gt;@rcurtin&lt;/denchmark-link&gt;
  Ok, this time compiled, but it seems I forgot to link something, because LNK2019 showed up. I have to investigate. Here is the Output from VS:
&lt;denchmark-code&gt;main.obj : error LNK2019: unresolved external symbol sdot_ referenced in function "double __cdecl arma::blas::dot&lt;double&gt;(unsigned __int64,double const *,double const *)" (??$dot@N@blas@arma@@YAN_KPEBN1@Z)
1&gt;main.obj : error LNK2019: unresolved external symbol ddot_ referenced in function "double __cdecl arma::blas::dot&lt;double&gt;(unsigned __int64,double const *,double const *)" (??$dot@N@blas@arma@@YAN_KPEBN1@Z)
1&gt;main.obj : error LNK2019: unresolved external symbol sgemv_ referenced in function "void __cdecl arma::blas::gemv&lt;double&gt;(char const *,int const *,int const *,double const *,double const *,int const *,double const *,int const *,double const *,double *,int const *)" (??$gemv@N@blas@arma@@YAXPEBDPEBH1PEBN21212PEAN1@Z)
1&gt;main.obj : error LNK2019: unresolved external symbol dgemv_ referenced in function "void __cdecl arma::blas::gemv&lt;double&gt;(char const *,int const *,int const *,double const *,double const *,int const *,double const *,int const *,double const *,double *,int const *)" (??$gemv@N@blas@arma@@YAXPEBDPEBH1PEBN21212PEAN1@Z)
1&gt;main.obj : error LNK2019: unresolved external symbol cgemv_ referenced in function "void __cdecl arma::blas::gemv&lt;double&gt;(char const *,int const *,int const *,double const *,double const *,int const *,double const *,int const *,double const *,double *,int const *)" (??$gemv@N@blas@arma@@YAXPEBDPEBH1PEBN21212PEAN1@Z)
1&gt;main.obj : error LNK2019: unresolved external symbol zgemv_ referenced in function "void __cdecl arma::blas::gemv&lt;double&gt;(char const *,int const *,int const *,double const *,double const *,int const *,double const *,int const *,double const *,double *,int const *)" (??$gemv@N@blas@arma@@YAXPEBDPEBH1PEBN21212PEAN1@Z)
1&gt;main.obj : error LNK2019: unresolved external symbol sgemm_ referenced in function "void __cdecl arma::blas::gemm&lt;double&gt;(char const *,char const *,int const *,int const *,int const *,double const *,double const *,int const *,double const *,int const *,double const *,double *,int const *)" (??$gemm@N@blas@arma@@YAXPEBD0PEBH11PEBN21212PEAN1@Z)
1&gt;main.obj : error LNK2019: unresolved external symbol dgemm_ referenced in function "void __cdecl arma::blas::gemm&lt;double&gt;(char const *,char const *,int const *,int const *,int const *,double const *,double const *,int const *,double const *,int const *,double const *,double *,int const *)" (??$gemm@N@blas@arma@@YAXPEBD0PEBH11PEBN21212PEAN1@Z)
1&gt;main.obj : error LNK2019: unresolved external symbol cgemm_ referenced in function "void __cdecl arma::blas::gemm&lt;double&gt;(char const *,char const *,int const *,int const *,int const *,double const *,double const *,int const *,double const *,int const *,double const *,double *,int const *)" (??$gemm@N@blas@arma@@YAXPEBD0PEBH11PEBN21212PEAN1@Z)
1&gt;main.obj : error LNK2019: unresolved external symbol zgemm_ referenced in function "void __cdecl arma::blas::gemm&lt;double&gt;(char const *,char const *,int const *,int const *,int const *,double const *,double const *,int const *,double const *,int const *,double const *,double *,int const *)" (??$gemm@N@blas@arma@@YAXPEBD0PEBH11PEBN21212PEAN1@Z)
1&gt;main.obj : error LNK2019: unresolved external symbol ssyrk_ referenced in function "void __cdecl arma::blas::syrk&lt;double&gt;(char const *,char const *,int const *,int const *,double const *,double const *,int const *,double const *,double *,int const *)" (??$syrk@N@blas@arma@@YAXPEBD0PEBH1PEBN212PEAN1@Z)
1&gt;main.obj : error LNK2019: unresolved external symbol dsyrk_ referenced in function "void __cdecl arma::blas::syrk&lt;double&gt;(char const *,char const *,int const *,int const *,double const *,double const *,int const *,double const *,double *,int const *)" (??$syrk@N@blas@arma@@YAXPEBD0PEBH1PEBN212PEAN1@Z)
1&gt;main.obj : error LNK2019: unresolved external symbol sgesv_ referenced in function "void __cdecl arma::lapack::gesv&lt;double&gt;(int *,int *,double *,int *,int *,double *,int *,int *)" (??$gesv@N@lapack@arma@@YAXPEAH0PEAN00100@Z)
1&gt;main.obj : error LNK2019: unresolved external symbol dgesv_ referenced in function "void __cdecl arma::lapack::gesv&lt;double&gt;(int *,int *,double *,int *,int *,double *,int *,int *)" (??$gesv@N@lapack@arma@@YAXPEAH0PEAN00100@Z)
1&gt;main.obj : error LNK2019: unresolved external symbol cgesv_ referenced in function "void __cdecl arma::lapack::gesv&lt;double&gt;(int *,int *,double *,int *,int *,double *,int *,int *)" (??$gesv@N@lapack@arma@@YAXPEAH0PEAN00100@Z)
1&gt;main.obj : error LNK2019: unresolved external symbol zgesv_ referenced in function "void __cdecl arma::lapack::gesv&lt;double&gt;(int *,int *,double *,int *,int *,double *,int *,int *)" (??$gesv@N@lapack@arma@@YAXPEAH0PEAN00100@Z)
1&gt;C:\Users\gmontanari\Documents\Visual Studio 2017\Projects\for_mlpack\x64\Debug\for_mlpack.exe : fatal error LNK1120: 16 unresolved externals
&lt;/denchmark-code&gt;

I see someone had the same problem here &lt;denchmark-link:https://github.com/mlpack/mlpack/issues/881&gt;#881&lt;/denchmark-link&gt;
 . Now reading it, maybe you found the solution that time...
		</comment>
		<comment id='7' author='GLmontanari' date='2018-10-11T12:44:42Z'>
		That means you'll need to link against Armadillo.  Glad the include got you further. :)
&lt;denchmark-link:https://github.com/zoq&gt;@zoq&lt;/denchmark-link&gt;
: should we include  by default in ?
		</comment>
		<comment id='8' author='GLmontanari' date='2018-10-11T13:52:59Z'>
		Ok, I am stuck: I tried to link against Armadillo by putting the path of armadillo.lib under Project-&gt;Linker-&gt;Input-&gt;Additional Dependencies but it didn't work.
Now that I think of it, whenever I build Armadillo I only get the .lib and never the .dll . Is it a problem?
		</comment>
		<comment id='9' author='GLmontanari' date='2018-10-11T14:28:25Z'>
		Good news: while reading &lt;denchmark-link:https://github.com/mlpack/mlpack/issues/881&gt;#881&lt;/denchmark-link&gt;
 I stumbled on the following link: &lt;denchmark-link:https://github.com/mlpack/mlpack/wiki/WindowsBuild#3-compiler-additional-library-directories&gt;https://github.com/mlpack/mlpack/wiki/WindowsBuild#3-compiler-additional-library-directories&lt;/denchmark-link&gt;
.
Since every line in the message I posted here was related to  and  I decided to link against the file libopenblas.dll.a under  Project-&gt;Linker-&gt;Input-&gt;Additional Dependencies and to put its include path under C/C++ -&gt; General -&gt; Additional Include Directories.
I managed to build the solution!!!!!!
Unfortunately when it comes to train the model at this point
&lt;denchmark-code&gt;	// Train the model.
	model.Train(trainData, trainLabels);
&lt;/denchmark-code&gt;

I get an exception saying "Mat::operator(): index out of bounds". Any idea about this?
		</comment>
		<comment id='10' author='GLmontanari' date='2018-10-11T15:10:34Z'>
		Ok, I had to reshape the training labels as stated in this closed issue &lt;denchmark-link:https://github.com/mlpack/mlpack/issues/1415&gt;#1415&lt;/denchmark-link&gt;
.
I will put a comment there too because the solution to the problem was found and noone cared to say "thanks".
&lt;denchmark-link:https://github.com/rcurtin&gt;@rcurtin&lt;/denchmark-link&gt;
 and &lt;denchmark-link:https://github.com/zoq&gt;@zoq&lt;/denchmark-link&gt;
 I really want to thank you for  your quick and invaluable answers. You can close the issue if you feel like it now.
		</comment>
		<comment id='11' author='GLmontanari' date='2018-10-11T21:46:32Z'>
		
@zoq: should we include layer.hpp by default in ffn.hpp?

That might avoid some confusion, yes.
&lt;denchmark-link:https://github.com/GLmontanari&gt;@GLmontanari&lt;/denchmark-link&gt;
  Glad you got it working, will update the example code as well.
		</comment>
		<comment id='12' author='GLmontanari' date='2018-10-17T23:12:57Z'>
		I opened &lt;denchmark-link:https://github.com/mlpack/mlpack/pull/1534&gt;#1534&lt;/denchmark-link&gt;
 which should handle both the issues here.  Thanks again for reporting the issues; it's super helpful for us in making sure the documentation is as good as it should be. 
		</comment>
		<comment id='13' author='GLmontanari' date='2018-10-24T13:21:25Z'>
		&lt;denchmark-link:https://github.com/mlpack/mlpack/pull/1534&gt;#1534&lt;/denchmark-link&gt;
 is now merged, so I'll close this now. :)
		</comment>
	</comments>
</bug>