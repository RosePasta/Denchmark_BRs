<bug id='2309' author='mrityunjay-tripathi' open_date='2020-03-17T09:23:22Z' closed_time='2020-05-02T21:06:22Z'>
	<summary>call for better documentation</summary>
	<description>
I learn a lot faster when there is an example of the tool at hand since it gives me hands-on experience. The mlpack documentation is extensive when it comes to details of the particular class but it somewhat lacks when it comes to examples or the use cases of the class/member function/member variable. For example in &lt;denchmark-link:https://en.cppreference.com/&gt;cppreference&lt;/denchmark-link&gt;
 or in the documentation of any other ML-based library such as NumPy, SciPy, scikit-learn, TensorFlow, PyTorch, Keras, etc. there is always some example(s) for each class and use case of (almost) each member function. Also, it helps in following better practices and tracking the reasons for error (as a user).
What we can do is put an example of the use case of the member function in their description itself (maybe whatever is used in unit testing!).
If this makes sense can we start the pull requests for adding unit tests as examples in the description of each class? Or any other method so that we have examples in our documentation!
	</description>
	<comments>
		<comment id='1' author='mrityunjay-tripathi' date='2020-03-20T08:03:40Z'>
		Can we somehow also provide the user with the platform where he/she can run the code as provided by w3schools etc? That platform will consist of just code specific libraries to run and test.
		</comment>
		<comment id='2' author='mrityunjay-tripathi' date='2020-03-20T11:40:29Z'>
		
Can we somehow also provide the user with the platform where he/she can run the code as provided by w3schools etc? That platform will consist of just code specific libraries to run and test.

I don't see a reason to do this honestly, it's too much effort for very little reward. Something like this could be using Jupyter notebooks, which is something to discuss in depth.
I agree that our documentation could use an overhaul. In my mind, the ideal documentation is something like &lt;denchmark-link:http://deeplearning.net/software/theano/tutorial/index.html#prerequisites&gt;Theano's&lt;/denchmark-link&gt;
 where they give a good explanation of everything. It serves as a good overview of machine learning concepts for beginners,  and let's them learn the Theano API through that.
So basically, every method or "group"(Such as layers, RL,etc.) has a basic explanation of the mathematics/ fundamentals behind it, and also explains the API. Moreover, an explanation of Armadillo and template metaprogramming would make it even more beginner friendly.
This would be a huge project, and we would need to change a bit of the website to make it suited to this. However, if we flesh the details out more and set up the basic framework, it would be a good first issue for people to learn the database.
		</comment>
		<comment id='3' author='mrityunjay-tripathi' date='2020-03-20T12:16:25Z'>
		Completely convinced with your explanation. So now which topic to start with for documentation?
		</comment>
		<comment id='4' author='mrityunjay-tripathi' date='2020-03-20T12:29:04Z'>
		Let's wait for more input :) This is a big task, and it will take some time to reach a consensus.
		</comment>
		<comment id='5' author='mrityunjay-tripathi' date='2020-03-24T01:53:41Z'>
		

Can we somehow also provide the user with the platform where he/she can run the code as provided by w3schools etc? That platform will consist of just code specific libraries to run and test.

I don't see a reason to do this honestly, it's too much effort for very little reward. Something like this could be using Jupyter notebooks, which is something to discuss in depth.

Definitely, this would be a cool idea, but to do so we should probably use xeus-cling C++ Jupyter notebooks.  (At least for C++ examples.)  Building off of their system makes it much less effort for us, but there are still a couple issues to be solved (on their end) before the C++ notebook interface is ready.

Let's wait for more input :) This is a big task, and it will take some time to reach a consensus.

Agreed, this really is a huge task.  If we are taking documentation from new contributors, I think that's fine, but we will have to be very careful during the review process to make sure all of the documentation is correct, clear, and coherent.  Bad documentation can drive people away moreso than no documentation, in my opinion. üòÑ
		</comment>
		<comment id='6' author='mrityunjay-tripathi' date='2020-04-25T20:08:08Z'>
		This issue has been automatically marked as stale because it has not had any recent activity.  It will be closed in 7 days if no further activity occurs.  Thank you for your contributions! üëç
		</comment>
	</comments>
</bug>