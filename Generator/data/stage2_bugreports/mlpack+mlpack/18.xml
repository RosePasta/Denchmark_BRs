<bug id='18' author='rcurtin' open_date='2014-12-28T22:19:24Z' closed_time='2014-12-28T22:19:25Z'>
	<summary>LI preprocessor macro conflict with Trilinos</summary>
	<description>
Reported by rcurtin on 19 Feb 40287389 01:46 UTC
I found this particularly useful snippet in sparse_matrix.h:
&lt;denchmark-code&gt;// you need this because trillinos redifines it. It's ok
// if you don't have it, but you will get an annoying warning
#ifdef F77_FUNC
#undef F77_FUNC
#endif
// trilinos uses this identifier, which is not so surprising.
// this is why you should think twice about macros.
#ifdef LI
#undef LI
#endif
&lt;/denchmark-code&gt;

Aside from actually almost shouting a vulgarity (and I wonder why people look at me funny), we need to do any of the following:

find a new name for LI (easiest)
move away from printf(); potentially to cout (C++ standard)

This applies for the L32 and L64 macros too, which are used to add an 'l' or an 'll' to a printf format string (i.e. %llu or %"L64"u); these are defined in fastlib/base/basic_types.h.
cout may be the best way to go with this, because I think it will automatically print with the correct precision and length, but I need to check into that.  Overhauling all printfs with a cout though will be particularly time-consuming and difficult, but worth it to fix this macro mess.
For my particular problem (in mlpack/kernel_pca) I have just made a cheap hack for now.
	</description>
	<comments>
	</comments>
</bug>