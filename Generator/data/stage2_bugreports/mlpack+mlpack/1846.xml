<bug id='1846' author='MuLx10' open_date='2019-04-07T15:56:42Z' closed_time='2019-04-24T21:08:10Z'>
	<summary>RNN: Fails to run Predict() if called before Train().</summary>
	<description>
&lt;denchmark-h:h4&gt;Issue description&lt;/denchmark-h&gt;

  const size_t rho = 5;
  arma::cube questions = arma::ones(1,2,rho);
  arma::cube answers = arma::ones(1,2,rho);
  
  mlpack::ann::RNN&lt;mlpack::ann::MeanSquaredError&lt;&gt; &gt; model(rho);
  model.Add&lt;mlpack::ann::Linear&lt;&gt; &gt;(1, 10);
  model.Add&lt;mlpack::ann::LSTM&lt;&gt; &gt;(10,10);
  model.Add&lt;mlpack::ann::Linear&lt;&gt; &gt;(10, 1);
  
  model.Parameters().randu();
  model.Predict(questions, answers);
Running the above snippet produces :
error: Mat::submat(): indices out of bounds or incorrectly used
  terminate called after throwing an instance of 'std::logic_error'
    what():  Mat::submat(): indices out of bounds or incorrectly used
  Aborted (core dumped)
However, if the last line in the above snippet is replaced by:
model.Train(questions, answers);
model.Predict(questions, answers);
It works perfectly.
&lt;denchmark-h:h4&gt;Steps to reproduce&lt;/denchmark-h&gt;

Running the &lt;denchmark-link:https://pastebin.com/LNafNMUu&gt;code&lt;/denchmark-link&gt;
.
&lt;denchmark-h:h4&gt;Expected behaviour&lt;/denchmark-h&gt;

RNN class methods Predict() and Train() (actually Evalute()) should be consistent.
&lt;denchmark-h:h4&gt;Actual behavior&lt;/denchmark-h&gt;

Fails to run Predict() if called before Train()/ Evaluate().
	</description>
	<comments>
		<comment id='1' author='MuLx10' date='2019-04-07T16:06:36Z'>
		Can I work on this issue ? Should we just modify the predict function to call train and evaluate in itself implicitly not explicitly by the user ? Will that work ?
		</comment>
		<comment id='2' author='MuLx10' date='2019-04-07T16:06:45Z'>
		I have the same problem, it has something to do with the model's parameters not being initialized beforehand. You can try printing the parameters before calling Train, they're empty. Predict does call Reset() if they're empty but for some reason that doesn't seem to do anything.
		</comment>
		<comment id='3' author='MuLx10' date='2019-04-07T16:18:21Z'>
		&lt;denchmark-link:https://github.com/chandramoulirajagopalan&gt;@chandramoulirajagopalan&lt;/denchmark-link&gt;
 I figured out the fix. I guess calling Train() inside Predict is not a good way. One reason would be that the targets are not available. Also, Training may take time. Usually Predict is called to check whether the output shapes are consistent. &lt;denchmark-link:https://github.com/RMaron&gt;@RMaron&lt;/denchmark-link&gt;
 Reset() is called in both. However, some parameters like `outputSize'  were only set during Evaluate().
		</comment>
		<comment id='4' author='MuLx10' date='2019-04-07T16:24:59Z'>
		&lt;denchmark-link:https://github.com/MuLx10&gt;@MuLx10&lt;/denchmark-link&gt;
 The error is caused directly by outputsize being 0. 1 is subtracted from it and it underflows. Then it tries to use that number as an index for SubMat
		</comment>
		<comment id='5' author='MuLx10' date='2019-04-07T16:39:40Z'>
		&lt;denchmark-link:https://github.com/RMaron&gt;@RMaron&lt;/denchmark-link&gt;
 Exactly.
		</comment>
	</comments>
</bug>