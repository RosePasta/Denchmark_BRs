<bug id='1710' author='Nimishkhurana' open_date='2019-02-07T11:53:53Z' closed_time='2019-05-17T01:27:30Z'>
	<summary>ValueError: The truth value of a DataFrame is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all().</summary>
	<description>
&lt;denchmark-h:h4&gt;Issue description&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;&gt;&gt;&gt;import pandas as pd
&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; import mlpack
&gt;&gt;&gt; 
&gt;&gt;&gt; df = pd.read_csv('housingdata.csv',header=None)
&gt;&gt;&gt; 
&gt;&gt;&gt; X = df.iloc[:,5]
&gt;&gt;&gt; y = df.iloc[:,13]
&gt;&gt;&gt; 
&gt;&gt;&gt; output= mlpack.linear_regression(X,y)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "mlpack/linear_regression.pyx", line 119, in mlpack.linear_regression.linear_regression
  File "/home/nimish/anaconda3/lib/python3.6/site-packages/pandas/core/generic.py", line 1121, in __nonzero__
    .format(self.__class__.__name__))
ValueError: The truth value of a Series is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all().
&gt;&gt;&gt; X = pd.DataFrame(X)
&gt;&gt;&gt; y = pd.DataFrame(y)
&gt;&gt;&gt; output= mlpack.linear_regression(X,y)
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "mlpack/linear_regression.pyx", line 119, in mlpack.linear_regression.linear_regression
  File "/home/nimish/anaconda3/lib/python3.6/site-packages/pandas/core/generic.py", line 1121, in __nonzero__
    .format(self.__class__.__name__))
ValueError: The truth value of a DataFrame is ambiguous. Use a.empty, a.bool(), a.item(), a.any() or a.all().
&lt;/denchmark-code&gt;

&lt;denchmark-h:h4&gt;Your environment&lt;/denchmark-h&gt;


version of mlpack:3.0.4
operating system:Ubuntu

I have build mlpack from source.
	</description>
	<comments>
		<comment id='1' author='Nimishkhurana' date='2019-02-07T16:07:53Z'>
		Hi &lt;denchmark-link:https://github.com/Nimishkhurana&gt;@Nimishkhurana&lt;/denchmark-link&gt;

It seems that there is an issue in the ordering of parameters input to the function in the generated binding
I looked at the generated binding for linear regresssion in build/src/mlpack/bindings/python/mlpack/linear_regression.py and tried this
&lt;denchmark-code&gt;output = mlpack.linear_regression(training=X, training_output=y)
&lt;/denchmark-code&gt;

This solves the ValueError but is throwing a segmentation fault for me.
		</comment>
		<comment id='2' author='Nimishkhurana' date='2019-02-07T16:16:33Z'>
		&lt;denchmark-link:https://github.com/bhavya01&gt;@bhavya01&lt;/denchmark-link&gt;
 I also first tried the same you said and got segmentation fault.
Also if I try to run this in jupyter-notebook then kernel keeps on dying again and again.
If our local build is properly configured then it is a serious issue i guess.
		</comment>
		<comment id='3' author='Nimishkhurana' date='2019-02-07T17:12:03Z'>
		I am quite sure that this has to do with the type of the parameter training_response in the file src/mlpack/methods/linear_regression_main.cpp
The function to_matrix return a nested array whereas the pyx file tries to convert it into a row
		</comment>
		<comment id='4' author='Nimishkhurana' date='2019-02-09T19:54:21Z'>
		&lt;denchmark-link:https://github.com/Nimishkhurana&gt;@Nimishkhurana&lt;/denchmark-link&gt;
 thanks for the bug report.  We actually have two issues here:
1. The Python bindings aren't giving good output when keyword parameters aren't used.  Take a look at the signature of linear_regression in linear_regression.pyx:
&lt;denchmark-code&gt;def linear_regression(copy_all_inputs=False,
                      input_model=None,
                      lambda_=None,
                      test=None,
                      training=None,
                      training_responses=None,
                      verbose=False):
&lt;/denchmark-code&gt;

(Note that that file is autogenerated, so if you want to see this file, build mlpack Python bindings with make python then look under your build directory in src/mlpack/bindings/python/mlpack/ for linear_regression.pyx.)
So if you call , then this is equivalent to writing , which doesn't make sense and crashes.  So you should be able to run  and this should work (note that the fix from &lt;denchmark-link:https://github.com/mlpack/mlpack/pull/1700&gt;#1700&lt;/denchmark-link&gt;
 is required for a Pandas Series to work right, so you should be using the git master branch too).
The right way to fix this in the codebase is to generate checks for the type of each input parameter.  So, for copy_all_inputs the code to handle it in linear_regression.pyx is:
&lt;denchmark-code&gt;if copy_all_inputs:
    SetParam[bool](&lt;const string&gt; 'copy_all_inputs', copy_all_inputs)
    CLI.SetPassed(&lt;const string&gt; 'copy_all_inputs')
&lt;/denchmark-code&gt;

but what we really want is
&lt;denchmark-code&gt;if isinstance(copy_all_inputs, bool):
  if copy_all_inputs:
    SetParam[bool](&lt;const string&gt; 'copy_all_inputs', copy_all_inputs)
    CLI.SetPassed(&lt;const string&gt; 'copy_all_inputs')
else:
  raise TypeError("copy_all_inputs must have type 'bool'!")
&lt;/denchmark-code&gt;

Fixing this will require a bit of understanding of the automatic bindings system.  The file src/mlpack/bindings/python/print_pyx.cpp is the file that actually generates the pyx, and internally it will call the function PrintInputProcessing() in src/mlpack/bindings/python/print_input_processing.hpp.  We should just need to update the code in that file to make the type check, and then users will get much better output.
(Bonus: it might also be nice to detect when the user didn't pass any keyword arguments and have a warning.  But I think this may make the signature hard to read.)
2. When a 1-d ndarray is expected but a 2-d ndarray is passed, it segfaults.  Try the following code:
&lt;denchmark-code&gt;import mlpack
import pandas as pd
import numpy as np

d = pd.read_csv("/home/ryan/datasets/corel.csv")
X = (d.iloc[:, 1:5])
y = (d.iloc[:, 6])

output = mlpack.linear_regression(training=X, training_responses=y,
    verbose=True)
&lt;/denchmark-code&gt;

That fails with a segfault.  (If you don't have &lt;denchmark-link:https://github.com/mlpack/mlpack/pull/1700&gt;#1700&lt;/denchmark-link&gt;
 on your branch, you'll need to manually convert  and  to  with  or similar.)  But, if we change  to , it succeeds!  The issue is that  has 2-dimensional shape  but  has 1-dimensional shape .  (N is the size of whatever CSV you use for this.  Anything will work for demonstration.)
I believe this is because the function numpy_to_row_d(), found in src/mlpack/bindings/python/mlpack/arma_numpy.pyx expects a numpy.ndarray[numpy.double_t, ndim=1], but we are passing one with ndim=2.  So either we need another overload, or we need to make sure in the code that calls numpy_to_row_d() (or numpy_to_col_d() or numpy_to_row_s() or numpy_to_col_s())---which is generated also in print_input_processing.hpp---first checks that the given numpy matrix is a vector, then calls flatten().  So now we get generated code from PrintInputProcessing() for training_responses like
&lt;denchmark-code&gt;if training_responses is not None:
    training_responses_tuple = to_matrix(training_responses, dtype=np.double, copy=CLI.HasParam('copy_all_inputs'))
    training_responses_mat = arma_numpy.numpy_to_row_d(training_responses_tuple[0], training_responses_tuple[1])
    SetParam[arma.Row[double]](&lt;const string&gt; 'training_responses', dereference(training_responses_mat))
    CLI.SetPassed(&lt;const string&gt; 'training_responses')
    del training_responses_mat
&lt;/denchmark-code&gt;

but maybe what we need (in addition to type checking as mentioned in the first point) is something like
&lt;denchmark-code&gt;if training_responses is not None:
    training_responses_tuple = to_matrix(training_responses, dtype=np.double, copy=CLI.HasParam('copy_all_inputs'))
    if len(training_responses_tuple[0].shape) &gt; 1:
      #
      # TODO: size checking here.  Ensure only one dimension of the shape is greater than 1,
      # and call ravel() or flatten() (whichever doesn't copy) to make it one-dimensional.
      #
    training_responses_mat = arma_numpy.numpy_to_row_d(training_responses_tuple[0], training_responses_tuple[1])
    SetParam[arma.Row[double]](&lt;const string&gt; 'training_responses', dereference(training_responses_mat))
    CLI.SetPassed(&lt;const string&gt; 'training_responses')
    del training_responses_mat
&lt;/denchmark-code&gt;

I've written so much detail here in the hopes that it helps someone who is interested in the automatic bindings system contribute and solve the bug.  If not I will solve it when I have time, but that may be a little while from now. :)  &lt;denchmark-link:https://github.com/mirraaj&gt;@mirraaj&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/Yashwants19&gt;@Yashwants19&lt;/denchmark-link&gt;
 maybe you might be interested in these also?
		</comment>
		<comment id='5' author='Nimishkhurana' date='2019-02-09T19:55:23Z'>
		
The function to_matrix return a nested array whereas the pyx file tries to convert it into a row

&lt;denchmark-link:https://github.com/bhavya01&gt;@bhavya01&lt;/denchmark-link&gt;
 exactly, maybe the idea I wrote above (for the second point) can help fix this.  There could be other ideas too, I just proposed one. 
		</comment>
		<comment id='6' author='Nimishkhurana' date='2019-02-10T02:43:14Z'>
		Hi &lt;denchmark-link:https://github.com/rcurtin&gt;@rcurtin&lt;/denchmark-link&gt;
 i want to work on this problem.
		</comment>
		<comment id='7' author='Nimishkhurana' date='2019-02-10T06:01:40Z'>
		Hi &lt;denchmark-link:https://github.com/rcurtin&gt;@rcurtin&lt;/denchmark-link&gt;
 I myself want to work on this issue
		</comment>
		<comment id='8' author='Nimishkhurana' date='2019-02-10T06:12:56Z'>
		Hi &lt;denchmark-link:https://github.com/Nimishkhurana&gt;@Nimishkhurana&lt;/denchmark-link&gt;
 i m working on this issue
		</comment>
		<comment id='9' author='Nimishkhurana' date='2019-02-15T19:21:17Z'>
		@Nimishkurana &lt;denchmark-link:https://github.com/Yashwants19&gt;@Yashwants19&lt;/denchmark-link&gt;
 there are multiple things to solve in this issue.  From my perspective I'm interested in merging the first fully working solution, so you are both welcome to work on part of it.  But note that &lt;denchmark-link:https://github.com/mlpack/mlpack/pull/1717&gt;#1717&lt;/denchmark-link&gt;
 is already open which is already pretty close for the  option type, so probably best not to open another PR for that specific part.  If you guys want to work out which parts of this you want to work on, please feel free.
		</comment>
		<comment id='10' author='Nimishkhurana' date='2019-02-15T20:40:17Z'>
		Thanks &lt;denchmark-link:https://github.com/rcurtin&gt;@rcurtin&lt;/denchmark-link&gt;
. I am understanding how automatic bindings system works. As &lt;denchmark-link:https://github.com/mlpack/mlpack/pull/1717&gt;#1717&lt;/denchmark-link&gt;
 is already opened for copy_all_inputs . &lt;denchmark-link:https://github.com/Yashwants19&gt;@Yashwants19&lt;/denchmark-link&gt;
 , let me work on checking the dimensions of input and make the target feature one dimensional if it is not so.
		</comment>
		<comment id='11' author='Nimishkhurana' date='2019-05-17T01:27:30Z'>
		I forgot to close this issue, but with &lt;denchmark-link:https://github.com/mlpack/mlpack/pull/1717&gt;#1717&lt;/denchmark-link&gt;
 and &lt;denchmark-link:https://github.com/mlpack/mlpack/pull/1711&gt;#1711&lt;/denchmark-link&gt;
 merged, I believe these problems to be solved.  Thanks again for reporting the issue. 
		</comment>
	</comments>
</bug>