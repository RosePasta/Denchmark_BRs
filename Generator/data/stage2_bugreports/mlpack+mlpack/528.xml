<bug id='528' author='dongli' open_date='2016-02-27T14:08:49Z' closed_time='2016-06-05T19:27:10Z'>
	<summary>RangeSearch constructor: address of '&amp;lt;tree object&amp;gt;' will always evaluate to 'true'</summary>
	<description>
I am using RangeSearch in mlpack 2.0.1 as:
&lt;denchmark-code&gt;typedef metric::EuclideanDistance MetricType;
typedef tree::BinarySpaceTree&lt;MetricType&gt; TreeType;
typedef range::RangeSearch&lt;&gt; SearchType;
...
arma::mat dataset(...);
...
TreeType datasetTree(dataset);
....
SearchType a(&amp;datasetTree, true);
&lt;/denchmark-code&gt;

The C++ compiler is g++ 5.2.0, and it print warning as:
&lt;denchmark-code&gt;: warning: address of 'datasetTree' will always evaluate to 'true'
      [-Wpointer-bool-conversion]
    SearchType a(&amp;datasetTree, true);
               ~  ^~~~~~~~~~~
1 warning generated.
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='dongli' date='2016-02-27T17:07:56Z'>
		This warning is because the type of tree passed to the RangeSearch object is not right; the RangeSearch object uses trees with the RangeSearchStat statistic.
One thing you can do is, instead of using tree::BinarySpaceTree&lt;MetricType&gt;, you can use the convenience typedef provided by the RangeSearch class:
&lt;denchmark-code&gt;RangeSearch&lt;&gt;::Tree datasetTree(dataset);
&lt;/denchmark-code&gt;

and then that should cast correctly to the right type when you call the RangeSearch constructor.
I think that the tutorial documentation for RangeSearch is incorrect, so I'll try and get this fixed later today (which will also solve &lt;denchmark-link:https://github.com/mlpack/mlpack/issues/525&gt;#525&lt;/denchmark-link&gt;
).
		</comment>
		<comment id='2' author='dongli' date='2016-02-29T14:35:21Z'>
		Thanks for reply! To my knowledge, RangeSearch should support multiple types of trees, but in its template interface:
&lt;denchmark-code&gt;template&lt;typename MetricType = metric::EuclideanDistance,
         typename MatType = arma::mat,
         template&lt;typename TreeMetricType,                                          
                  typename TreeStatType,                                            
                  typename TreeMatType&gt; class TreeType = tree::KDTree&gt;              
class RangeSearch
&lt;/denchmark-code&gt;

the TreeType has been constrained to the above form, so when I used the following trees other than KDTree:
&lt;denchmark-code&gt;range::RangeSearch&lt;MetricType, arma::mat, tree::CoverTree&gt;
&lt;/denchmark-code&gt;

or
&lt;denchmark-code&gt;range::RangeSearch&lt;MetricType, arma::mat, tree::BinarySpaceTree&gt;
&lt;/denchmark-code&gt;

I got the following errors:
&lt;denchmark-code&gt;error: template template argument has different template parameters than its
      corresponding template template parameter
    typedef range::RangeSearch&lt;MetricType, arma::mat, tree::CoverTree&gt; SearchType;
&lt;/denchmark-code&gt;

or
&lt;denchmark-code&gt;error: template template argument has different template parameters than its
      corresponding template template parameter
    typedef range::RangeSearch&lt;MetricType, arma::mat, tree::BinarySpaceTree&gt; SearchType;
&lt;/denchmark-code&gt;

		</comment>
		<comment id='3' author='dongli' date='2016-02-29T15:04:54Z'>
		It does, but the names of those tree types have changed a little bit; for the standard cover tree use tree::StandardCoverTree [1], for the ball tree, use tree::BallTree [2], for the R tree, use tree::RTree [3], and for the R*-tree, use tree::RStarTree [4].  The basic idea was that a user shouldn't need to explicitly specify the metric for the tree or the statistic type either; instead, they could just specify the type of the tree (as a template template parameter) and then we could use the other template parameters of the class to fill in the rest.
In order to do this, we had to develop a TreeType policy class that takes three template parameters (metric, matrix type, and statistic) [5], then we had to refactor all of the dual-tree algorithms to use this policy class (this was done for the 2.0.0 release).  In general, template typedefs are used to turn more-general classes like BinarySpaceTree (which has four template parameters) into the three that are necessary for the TreeType policy class.  Each of the four tree types I mentioned earlier is a template typedef.
[1] &lt;denchmark-link:http://mlpack.org/docs/mlpack-2.0.1/doxygen.php?doc=namespacemlpack_1_1tree.html#a97bb6c0e6c1be359a95c89d21b1afd42&gt;http://mlpack.org/docs/mlpack-2.0.1/doxygen.php?doc=namespacemlpack_1_1tree.html#a97bb6c0e6c1be359a95c89d21b1afd42&lt;/denchmark-link&gt;

[2] &lt;denchmark-link:http://mlpack.org/docs/mlpack-2.0.1/doxygen.php?doc=namespacemlpack_1_1tree.html#a918273941d2d1d3999bf232280530d50&gt;http://mlpack.org/docs/mlpack-2.0.1/doxygen.php?doc=namespacemlpack_1_1tree.html#a918273941d2d1d3999bf232280530d50&lt;/denchmark-link&gt;

[3] &lt;denchmark-link:http://mlpack.org/docs/mlpack-2.0.1/doxygen.php?doc=namespacemlpack_1_1tree.html#ae9e12acec37727ae9a4dbca379ba4317&gt;http://mlpack.org/docs/mlpack-2.0.1/doxygen.php?doc=namespacemlpack_1_1tree.html#ae9e12acec37727ae9a4dbca379ba4317&lt;/denchmark-link&gt;

[4] &lt;denchmark-link:http://mlpack.org/docs/mlpack-2.0.1/doxygen.php?doc=namespacemlpack_1_1tree.html#adbf07e6ff61d2d7840b2c7ea88d25fb7&gt;http://mlpack.org/docs/mlpack-2.0.1/doxygen.php?doc=namespacemlpack_1_1tree.html#adbf07e6ff61d2d7840b2c7ea88d25fb7&lt;/denchmark-link&gt;

[5] &lt;denchmark-link:http://mlpack.org/docs/mlpack-2.0.1/doxygen.php?doc=trees.html&gt;http://mlpack.org/docs/mlpack-2.0.1/doxygen.php?doc=trees.html&lt;/denchmark-link&gt;

		</comment>
		<comment id='4' author='dongli' date='2016-06-05T19:27:10Z'>
		I updated the documentation in &lt;denchmark-link:https://github.com/mlpack/mlpack/commit/79fd639d12a64f3b5471e048ed6d83344b955fea&gt;79fd639&lt;/denchmark-link&gt;
 months ago but forgot to close this issue.
		</comment>
	</comments>
</bug>