<bug id='1425' author='aicaffeinelife' open_date='2018-06-06T01:46:43Z' closed_time='2019-01-06T19:32:29Z'>
	<summary>Installation issues on MacOS High Sierra 10.13.2</summary>
	<description>
Hi,
I'm a newcomer to mlpack and was trying to install it on my MacBook Pro which runs  Mac OS High Sierra 10.13.2. I followed the instructions mentioned on the install page. However, I keep running into an issue during the install. Here's the relevant log of the issue:
&lt;denchmark-code&gt;gcc -Wno-unused-result -Wsign-compare -Wunreachable-code -DNDEBUG -g -fwrapv -O3 -Wall -
Wstrict-prototypes 

-I${HOME}/anaconda3/include -arch x86_64 

-I${HOME}/anaconda3/include -arch x86_64 -UNDEBUG -UHAS_BFD_DL 

-I${HOME}/anaconda3/lib/python3.6/site-packages/numpy/core/include 

-I${HOME}/mlpack/build/src/mlpack/bindings/python/ 

-I${HOME}/mlpack/src -I/usr/local/include -I/usr/local/include 

-I${HOME}/mlpack/build/src/mlpack/.. 

-I${HOME}/anaconda3/include/python3.6m -c 

${HOME}/mlpack/build/src/mlpack/bindings/python/mlpack/knn.cpp -o build/temp.macosx-10.7
-x86_64-3.6

${HOME}/mlpack/build/src/mlpack/bindings/python/mlpack/knn.o 

-DBINDING_TYPE=BINDING_TYPE_PYX -std=c++11 -Wall -Wextra -ftemplate-depth=1000 -g -O0 -ftemplate-backtrace-limit=0 -Wno-unknown-pragmas
In file included from ${HOME}/mlpack/build/src/mlpack/bindings/python/mlpack/nmf.cpp:537:
In file included from ${HOME}/mlpack/src/mlpack/core.hpp:253:
${HOME}/mlpack/src/mlpack/prereqs.hpp:32:10: fatal error: 'cstdint' file not found
#include &lt;cstdint&gt;
         ^~~~~~~~~
&lt;/denchmark-code&gt;

In the new MacOS systems the cstdint library has moved to /usr/local/include/c++/4.2.1/tr1.  I tried configuring Cmake with -D CMAKE_CXX_FLAGS= -I/usr/local/include/c++/4.2.1/tr1 -I /usr/local/include/c++ but then cotire.cmake exits prematurely giving an error similar to:
&lt;denchmark-code&gt;usr/include/c++/4.2.1/cmath:248:3: error: declaration conflicts with target of using declaration already in scope
&lt;/denchmark-code&gt;

As a note I've installed armadillo and boost via home-brew. Am I doing something obviously wrong or is this a known issue in mlpack with newer macOS?
	</description>
	<comments>
		<comment id='1' author='aicaffeinelife' date='2018-06-06T02:14:02Z'>
		Hmm, I haven't seen this before.  What happens if you try to compile any program that uses cstdint?
&lt;denchmark-code&gt;#include &lt;cstdint&gt;

int main() { }
&lt;/denchmark-code&gt;

		</comment>
		<comment id='2' author='aicaffeinelife' date='2018-06-06T02:22:02Z'>
		I wrote a very simple program just to test if the datatypes are working as expected. Here's my program:
&lt;denchmark-code&gt;#include &lt;cstdint&gt; 
#include &lt;iostream&gt;
#include &lt;vector&gt; 

using std::cout; 

int main(int argc, char const *argv[])
{
    int16_t num1; 
    uint8_t num2; 
    num1 = -11245; 
    num2 = 125; 
    cout &lt;&lt; "num1 is : " &lt;&lt; num1 &lt;&lt; "with size: " &lt;&lt; sizeof(num1) &lt;&lt; " bytes \n" ;
    cout &lt;&lt; "num2 is :  " &lt;&lt; num2 &lt;&lt; "with size: " &lt;&lt; sizeof(num2) &lt;&lt; " bytes \n";
    return 0;
}

&lt;/denchmark-code&gt;

I compiled it with g++ -std=c++11 test_program.cpp - o test. It runs as expected. I'm suspecting that mlpack uses gcc as the compiler of choice, maybe that could have an influence?
		</comment>
		<comment id='3' author='aicaffeinelife' date='2018-06-06T02:32:48Z'>
		Interesting, so the compiler works ok by default.  I wonder if CMake is configuring something wront.  Can you give the output of the CMake configuration command?  I wonder if something in the settings detected are wrong.
Thanks for being willing to help debug---I wish I had an instant solution for this one, but not yet. :)
		</comment>
		<comment id='4' author='aicaffeinelife' date='2018-06-06T02:37:49Z'>
		Thanks for responding so quickly :).  Here's the output of the CMake:
&lt;denchmark-code&gt;cmake -D DEBUG=ON ../
-- The C compiler identification is AppleClang 9.1.0.9020039
-- The CXX compiler identification is AppleClang 9.1.0.9020039
-- Check for working C compiler: /Library/Developer/CommandLineTools/usr/bin/cc
-- Check for working C compiler: /Library/Developer/CommandLineTools/usr/bin/cc -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Detecting C compile features
-- Detecting C compile features - done
-- Check for working CXX compiler: /Library/Developer/CommandLineTools/usr/bin/c++
-- Check for working CXX compiler: /Library/Developer/CommandLineTools/usr/bin/c++ -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- cotire 1.7.10 loaded.
-- Found Armadillo: /usr/local/lib/libarmadillo.dylib (found suitable version "8.500.1", minimum required is "6.500.0")
-- Armadillo libraries: /usr/local/lib/libarmadillo.dylib
-- Boost version: 1.67.0
-- Found the following Boost libraries:
--   program_options
--   unit_test_framework
--   serialization
-- Could NOT find OpenMP_C (missing: OpenMP_C_FLAGS OpenMP_C_LIB_NAMES)
-- Could NOT find OpenMP_CXX (missing: OpenMP_CXX_FLAGS OpenMP_CXX_LIB_NAMES)
-- Could NOT find OpenMP (missing: OpenMP_C_FOUND OpenMP_CXX_FOUND)
-- Found Git: /usr/local/bin/git (found version "2.17.0")
-- gitversion.hpp is already up to date.
-- Regenerating arma_config.hpp.
-- Found Python: ${HOME}/anaconda3/bin/python
-- Found PY_distutils: ${HOME}/anaconda3/lib/python3.6/distutils
-- Found PY_Cython: ${HOME}/anaconda3/lib/python3.6/site-packages/Cython
-- Found PY_numpy: ${HOME}/anaconda3/lib/python3.6/site-packages/numpy
-- Found PY_pandas: ${HOME}/anaconda3/lib/python3.6/site-packages/pandas
-- Performing Test COMPILER_HAS_HIDDEN_VISIBILITY
-- Performing Test COMPILER_HAS_HIDDEN_VISIBILITY - Success
-- Performing Test COMPILER_HAS_HIDDEN_INLINE_VISIBILITY
-- Performing Test COMPILER_HAS_HIDDEN_INLINE_VISIBILITY - Success
-- Performing Test COMPILER_HAS_DEPRECATED_ATTR
-- Performing Test COMPILER_HAS_DEPRECATED_ATTR - Success
-- CXX target mlpack cotired.
-- CXX target mlpack_test cotired.
-- Could NOT find Doxygen (missing: DOXYGEN_EXECUTABLE)
CMake Warning at CMakeLists.txt:487 (message):
  txt2man not found; man pages will not be generated.


-- Could NOT find PkgConfig (missing: PKG_CONFIG_EXECUTABLE)
-- Configuring done
CMake Warning (dev):
  Policy CMP0042 is not set: MACOSX_RPATH is enabled by default.  Run "cmake
  --help-policy CMP0042" for policy details.  Use the cmake_policy command to
  set the policy and suppress this warning.

  MACOSX_RPATH is not specified for the following targets:

   mlpack
   mlpack_unity

This warning is for project developers.  Use -Wno-dev to suppress it.

-- Generating done
-- Build files have been written to:${HOME}/mlpack/build
&lt;/denchmark-code&gt;

The openmp warnings are correct since my system is new and I haven't installed openmp yet.  I'm not sure how much of an influence a missing PKG_CONFIG will have.
		</comment>
		<comment id='5' author='aicaffeinelife' date='2018-06-06T02:47:24Z'>
		Right, everything looks fine there.  Is that the same compiler as the gcc that you used by hand?  You could check with gcc --version.
Also, what is the output if you run VERBOSE=1 make? (warning: it will be long, but it may give us useful output that can isolate the difference between your successful compilation and the failure you are getting when compiling mlpack)
		</comment>
		<comment id='6' author='aicaffeinelife' date='2018-06-06T03:05:15Z'>
		So my gcc and g++ are of the same version. I did what you recommended and this was the command log before the error:
&lt;denchmark-code&gt;cd ${HOME}/mlpack/build/src/mlpack/methods/softmax_regression &amp;&amp; 

/Library/Developer/CommandLineTools/usr/bin/c++  -DBOOST_TEST_DYN_LINK -DDEBUG 

-DMLPACK_GIT_VERSION -I${HOME}/mlpack/src -I/usr/local/include 

-I${HOME}mlpack/build/src/mlpack/..  

-Wall -Wextra -ftemplate-depth=1000 -g -O0 -ftemplate-backtrace-limit=0 -Wno-unknown-pragmas   -DBINDING_TYPE=BINDING_TYPE_PYX -std=gnu++11 -o 

CMakeFiles/generate_pyx_softmax_regression.dir/__/__/bindings/python/print_pyx.cpp.o -c ${HOME}/mlpack/src/mlpack/bindings/python/print_pyx.cpp
running build_ext
&lt;/denchmark-code&gt;

A thing which jumps out at me is that the compiler being used is /Library/Developer/CommandLineTools/usr/bin/c++ while the compiler I used to compile my earlier program was in /usr/bin/g++. I wonder if that's got to do with CMake settings for Mac?
		</comment>
		<comment id='7' author='aicaffeinelife' date='2018-06-06T03:19:35Z'>
		Right, I think this is at least part of the issue here.  What is the output of gcc --version? Is it actually a clang version?
You could try cmake -DCMAKE_CXX_COMPILER=/usr/bin/g++ .. to force the use of gcc.
		</comment>
		<comment id='8' author='aicaffeinelife' date='2018-06-06T03:41:10Z'>
		The output of gcc --version is
&lt;denchmark-code&gt;Configured with: --prefix=/Library/Developer/CommandLineTools/usr --with-gxx-include-dir=/usr/include/c++/4.2.1
Apple LLVM version 9.1.0 (clang-902.0.39.1)
Target: x86_64-apple-darwin17.3.0
Thread model: posix
InstalledDir: /Library/Developer/CommandLineTools/usr/bin
&lt;/denchmark-code&gt;

In the newest compilation the compiler does change to /usr/bin/g++ but the error still persists. I' e noticed that this:
gcc -Wno-unused-result -Wsign-compare -Wunreachable-code -DNDEBUG -g -fwrapv -O3 -Wall - Wstrict-prototypes  occurs. Another thing I noted was that this particular error appears when mlpack_test/krann_search module is being compiled. It hasn't occurred  in any other module files being compiled.
		</comment>
		<comment id='9' author='aicaffeinelife' date='2018-06-06T13:27:57Z'>
		I dug into it a bit more and some reading of similar bug reports suggested that -I/usr/local/include may be the problem.  What happens if you compile that simple test program from earlier with the -I/usr/local/include flag?
		</comment>
		<comment id='10' author='aicaffeinelife' date='2018-06-06T15:14:42Z'>
		I deleted and remade the build directory and then configured cmake with cmake -D CMAKE_CXX_COMPILER=/usr/bin/g++ -D CMAKE_CXX_FLAGS= -I /usr/local/include -D DEBUG=ON ../
I followed the verbose log more closely and though it compiled with g++ it still failed at krann_search. Make is successfully able to build the mlpack_test target, but fails due to the same cstdint error on other targets.
		</comment>
		<comment id='11' author='aicaffeinelife' date='2018-06-06T15:19:22Z'>
		Hmm, but I'm interested in what happens if we omit the -I/usr/local/include/.  Is there a cstdint error if you compile the simple program from way earlier with g++ -std=c++11 test_program.cpp -I/usr/local/include/ -o test?
		</comment>
		<comment id='12' author='aicaffeinelife' date='2018-06-06T16:03:49Z'>
		No there is not an error, which is quite confusing. I tried by skipping the /usr/local/include but the error is still in the exact same file. This makes me wonder, if the mlpack core is being built against something else.
		</comment>
		<comment id='13' author='aicaffeinelife' date='2018-06-06T16:52:54Z'>
		Hm, ok, thanks for trying that.  I wonder if this issue has to do with the C++ standard library that CMake is selecting.  So I have a few ideas if you are willing to try:

Replace #include &lt;cstdint&gt; with #include &lt;stdint.h&gt;.
Force CMake to use libc++ instead of libstdc++ by commenting out lines 102 and 109 of CMakeLists.txt.

What do each of those do?  Maybe this can help us get closer to a solution.
		</comment>
		<comment id='14' author='aicaffeinelife' date='2018-06-06T19:56:01Z'>
		I did what you recommended. In prereqs.hpp I replaced the &lt;cstdint&gt; with stdint.h and commented out the lines you mentioned in CMakeLists.txt. That seems to make the error go away only to end up with another:
&lt;denchmark-code&gt;Building CXX object src/mlpack/tests/CMakeFiles/mlpack_test.dir/loss_functions_test.cpp.o
cd ${HOME}/mlpack/build/src/mlpack/tests &amp;&amp; /Library/Developer/CommandLineTools/usr/bin/c++  

-DBOOST_TEST_DYN_LINK -DDEBUG -DMLPACK_GIT_VERSION -I ${HOME}/mlpack/src 

-I/usr/local/include -I${HOME}/mlpack/build/src/mlpack/..  -Wall -Wextra -ftemplate-depth=1000

 -stdlib=libc++ -g -O0 -ftemplate-backtrace-limit=0 -Wno-unknown-pragmas   -Qunused-arguments

 -include ${HOME}/mlpack/build/src/mlpack/tests/cotire/mlpack_test_CXX_prefix.hxx -std=gnu++11 

-o CMakeFiles/mlpack_test.dir/loss_functions_test.cpp.o 

-c ${HOME}/mlpack/src/mlpack/tests/loss_functions_test.cpp
creating build/lib.macosx-10.7-x86_64-3.6
creating build/lib.macosx-10.7-x86_64-3.6/mlpack
g++ -bundle -undefined dynamic_lookup -L${HOME}/anaconda3/lib -arch x86_64 

-L${HOME}/anaconda3/lib -arch x86_64 -arch x86_64 build/temp.macosx-10.7-x86_64-3.6

${HOME}/mlpack/build/src/mlpack/bindings/python/mlpack/sparse_coding.o 

-L${HOME}/mlpack/build/lib/ -lmlpack -lboost_serialization -o build/lib.macosx-10.7-x86_64-3.6/mlpack/sparse_coding.cpython-36m-darwin.so NOTFOUND
clang: error: no such file or directory: 'NOTFOUND'
clang: warning: libstdc++ is deprecated; move to libc++ with a minimum deployment target of OS X 10.9 [-Wdeprecated]
error: command 'g++' failed with exit status 1
make[2]: *** [src/mlpack/methods/sparse_coding/CMakeFiles/build_pyx_sparse_coding] Error 1
make[1]: *** [src/mlpack/methods/sparse_coding/CMakeFiles/build_pyx_sparse_coding.dir/all] Error 2
make[1]: *** Waiting for unfinished jobs....

&lt;/denchmark-code&gt;

		</comment>
		<comment id='15' author='aicaffeinelife' date='2018-06-06T20:00:10Z'>
		Hm, what if you leave the CMake configuration unchanged but leave the stdint.h change in place?
		</comment>
		<comment id='16' author='aicaffeinelife' date='2018-06-06T20:21:26Z'>
		The cstdint error appears to be resolved if we make a change. However now the error of tuple not existing crops up. Since stdint.h seemed to work, I'm wondering if gcc is compiling the codebase as a C codebase? As before I've checked if tuple is existing on my machine using this program:
#include &lt;cstdint&gt; 
#include &lt;iostream&gt;
#include &lt;vector&gt; 
#include &lt;tuple&gt; 

using std::cout; 


int main(int argc, char const *argv[])
{
    std::tuple&lt;int, char&gt; tup(10, 'f');

    cout &lt;&lt; "tup contains 1st elem: " &lt;&lt; std::get&lt;0&gt;(tup) &lt;&lt; " \n";
    cout &lt;&lt; "tup contains 2nd elem: " &lt;&lt; std::get&lt;1&gt;(tup) &lt;&lt; " \n";
    
}

Unlike cstdint , tuple doesn't have a C equivalent. For more information this is the error string:
&lt;denchmark-code&gt;Building CXX object src/mlpack/tests/CMakeFiles/mlpack_test.dir/ksinit_test.cpp.o
${HOME}/mlpack/src/mlpack/prereqs.hpp:35:10: fatal error: 'tuple' file not found
&lt;/denchmark-code&gt;

		</comment>
		<comment id='17' author='aicaffeinelife' date='2018-06-18T15:32:34Z'>
		Sorry for the slow response---I was on vacation last week.  I returned to this and thought about it a little bit... I have some thoughts.


Is this problem only occurring for the Python bindings?  i.e. if you configure CMake with -DBUILD_PYTHON_BINDINGS=OFF, is the build successful?


It looks like forcing clang to use libc++ helped us get closer, but then it tries to link against NOTFOUND as a library which is very strange.  So some library is not found during configuration but I'm not sure which one.  Could you see if the string NOTFOUND exists anywhere in the CMakeCache.txt file?


		</comment>
		<comment id='18' author='aicaffeinelife' date='2018-06-20T01:04:55Z'>
		I'll try that and get back to you, most likely by tomorrow.
		</comment>
		<comment id='19' author='aicaffeinelife' date='2018-06-30T16:20:35Z'>
		Hey sorry for the late reply. I did what you mentioned.

Turning python bindings off seems to have no effect on the installation.
NOTFOUND was there in CMakeCache.txt but it was with OpenMP (which is correct since I don't have openmp)

		</comment>
		<comment id='20' author='aicaffeinelife' date='2018-07-02T14:36:08Z'>
		Ok, thanks for trying it.  I'm confused about why OpenMP being not found would cause problems here, but I guess if it is, you could comment out lines 351-359 of CMakeLists.txt and I think that might fix the issue.
Sorry again for the lots of things to try in debugging this... but I think we are close to having something working...
		</comment>
		<comment id='21' author='aicaffeinelife' date='2018-07-11T15:30:32Z'>
		I don't think OpenMP could be a problem since it just checks if the library needs to be built with OpenMP support. From what I think, it seems that Apple's new toolchain, has some features which are different from say g++ or gcc?
		</comment>
		<comment id='22' author='aicaffeinelife' date='2018-07-27T03:14:12Z'>
		Right, that's true, but somehow  is getting into the list of compiler flags.  I'd like to figure out why, and I'm thinking that OpenMP may be part of the cause.  In &lt;denchmark-link:https://github.com/mlpack/mlpack/pull/1474&gt;#1474&lt;/denchmark-link&gt;
 I actually just merged a new CMake option for disabling OpenMP, so if you are using the git master branch you can update to the latest commit and configure CMake with
&lt;denchmark-code&gt;cmake -DUSE_OPENMP=OFF (then the other options...)
&lt;/denchmark-code&gt;

and that will disable OpenMP in a much easier way.  I am thinking:


If you disable OpenMP and force libc++ like I mentioned earlier in the thread, I expect that "NOTFOUND" will not be a part of the linker command and it will work.


If "NOTFOUND" is still there in the linker errors, then it must be coming from somewhere else, and if you are willing I can provide a CMakeLists.txt you can drop in place that'll provide a lot of output to help track it down.


		</comment>
		<comment id='23' author='aicaffeinelife' date='2018-08-12T01:54:46Z'>
		Sorry for the late reply. I've been really busy with work. I'm gonna try out these suggestions as soon as I get time to do so.
		</comment>
		<comment id='24' author='aicaffeinelife' date='2018-08-14T20:27:14Z'>
		No worries!  I am happy to help if you have the time, but don't feel obligated if you are too busy. :)
		</comment>
		<comment id='25' author='aicaffeinelife' date='2018-08-19T17:12:39Z'>
		I am getting a similar error.
&lt;denchmark-code&gt;fatal error: 'cstdint' file not found
#include &lt;cstdint&gt;
         ^~~~~~~~~
1 error generated.
error: command 'gcc' failed with exit status 1
make[2]: *** [src/mlpack/methods/perceptron/CMakeFiles/build_pyx_perceptron] Error 1
make[1]: *** [src/mlpack/methods/perceptron/CMakeFiles/build_pyx_perceptron.dir/all] Error 2
make: *** [all] Error 2

&lt;/denchmark-code&gt;

Just wanted to drop-in a note to see if any progress was made to resolve this. Thank you.
		</comment>
		<comment id='26' author='aicaffeinelife' date='2018-08-24T02:15:17Z'>
		&lt;denchmark-link:https://github.com/spatala&gt;@spatala&lt;/denchmark-link&gt;
: I had some ideas above; if you're willing to try to debug it I am happy to help.  First, if you don't need Python bindings, you could configure CMake with  and that may resolve the issue.  If you do want Python bindings, my thoughts are that the following could work:

Disable OpenMP by configuring with -DUSE_OPENMP=OFF.
Force the compiler to use libc++ not libstdc++ by commenting out lines 102 and 109 of CMakeLists.txt.

See what those do... it could help out, and if so it could help us figure out what a better long-term solution we can integrate into the codebase is.
		</comment>
		<comment id='27' author='aicaffeinelife' date='2018-08-24T14:47:09Z'>
		&lt;denchmark-link:https://github.com/rcurtin&gt;@rcurtin&lt;/denchmark-link&gt;

I wanted to make the changes you suggested sequentially.  So, when I only changed the , the install worked just fine. Thank you for your help.
		</comment>
		<comment id='28' author='aicaffeinelife' date='2018-09-20T02:53:32Z'>
		&lt;denchmark-link:https://github.com/spatala&gt;@spatala&lt;/denchmark-link&gt;
: glad you got it worked out. (Sorry for the slow response!)
&lt;denchmark-link:https://github.com/aicaffeinelife&gt;@aicaffeinelife&lt;/denchmark-link&gt;
: if you have a chance to try this, it would be great. :)  I still haven't managed to reproduce this.
		</comment>
		<comment id='29' author='aicaffeinelife' date='2018-09-20T15:02:27Z'>
		&lt;denchmark-link:https://github.com/rcurtin&gt;@rcurtin&lt;/denchmark-link&gt;
 Finally this built! I'm so happy. I think it's somewhere in the Python bindings that something is messed up. But I used both of your suggestions and it builds. Just a standard warning when using , but nothing too red-flaggy according to me.
		</comment>
		<comment id='30' author='aicaffeinelife' date='2018-09-20T22:15:17Z'>
		Ah, ok, great!  I am happy that it worked.  So do you mean that if you both disable OpenMP and comment out lines 102 and 109 of CMakeLists.txt, everything builds correctly?  Or do you mean it only built correctly when you configured with -DBUILD_PYTHON_BINDINGS=OFF?
		</comment>
		<comment id='31' author='aicaffeinelife' date='2018-09-20T22:56:33Z'>
		Both. To expand I deleted the mlpack repo I had, cloned the latest master. Commented out lines 102, 109 and then built mlpack with the following command:
cmake -DBUILD_PYTHON_BINDINGS=OFF -DUSE_OPENMP=OFF ..
However, the openmp thing could be incidental since I don't keep that library on my machine. However, I do strongly believe that something in the Python bindings is off.
Thanks for being so patient and accomodating though!
		</comment>
		<comment id='32' author='aicaffeinelife' date='2018-10-04T00:04:02Z'>
		@aicaffeinelife---thanks for the explanation.  I think you are right that the issue is something in the Python bindings.  I'll leave this issue open, because I think the actual underlying issue is unresolved, and if someone is able to dig in further and isolate exactly what the issue is, it would be great.
I don't currently have an OS X setup I can reproduce this on, but I might be able to dig one up.
		</comment>
		<comment id='33' author='aicaffeinelife' date='2018-10-20T15:42:11Z'>
		I just merged &lt;denchmark-link:https://github.com/mlpack/mlpack/pull/1523&gt;#1523&lt;/denchmark-link&gt;
, which I think contains a fix for the Python build issue.  If anyone who was having this problem can try and compile with  (and ) on the latest master branch, we can see if this is fixed or not. :)
		</comment>
		<comment id='34' author='aicaffeinelife' date='2018-12-30T08:02:27Z'>
		Hi, I also have the issue of fatal error: 'tr1/tuple' file not found. I tried the ways discussed above but non of them helped. I configure by using
cmake -D BUILD_PYTHON_BINDINGS=OFF -D USE_OPENMP=OFF -D CMAKE_CXX_COMPILER=/usr/bin/g++ -D CMAKE_CXX_FLAGS= -I /usr/local/include -D DEBUG=ON ../
and I also comment 102 and 109 lines of CMakeLists.txt. To be clear, the lines are listed below.
102: set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -pthread")
109: find_package(Threads)
However, I still have the issue. Do you have any suggestion to fix it? Thanks!
		</comment>
		<comment id='35' author='aicaffeinelife' date='2019-01-02T21:26:09Z'>
		&lt;denchmark-link:https://github.com/gaotx&gt;@gaotx&lt;/denchmark-link&gt;
 maybe we should open a new issue for this one.  In any case,  is not found when using particularly old compilers.  What is the version of your compiler?  Please include that and other system information (as well as the mlpack version) in the new issue, if you don't mind. :)
		</comment>
		<comment id='36' author='aicaffeinelife' date='2019-01-06T19:32:29Z'>
		The original issue has been inactive for a while and I think it is resolved with &lt;denchmark-link:https://github.com/mlpack/mlpack/pull/1523&gt;#1523&lt;/denchmark-link&gt;
 being merged, so I'll go ahead and close this now.
		</comment>
	</comments>
</bug>