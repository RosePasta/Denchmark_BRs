<bug id='476' author='theSundayProgrammer' open_date='2015-11-20T00:23:57Z' closed_time='2015-11-24T18:57:51Z'>
	<summary>Compile Error in Neighbour Search</summary>
	<description>
This is not a bug in mlpack as much as an issue with Visual C++ compiler (VC14). The compiler throws an error:
src\mlpack\methods\neighbor_search\ns_model.hpp(76):
error C3200: 'TreeTypemlpack::metric::EuclideanDistance,mlpack::neighbor::NeighborSearchStatmlpack::neighbor::NearestNeighborSort,arma::mat::DualTreeTraverser':
invalid template argument for template parameter 'TraversalType', expected a class template
The offending line is:
NSType&lt;tree::KDTree&gt;* kdTreeNS;
I could work around it by replacing it with:
NeighborSearch&lt;SortPolicy, metric::EuclideanDistance, arma::mat, tree::KDTree&gt;* kdTreeNS;
There are four more errors like that which I have not included.
	</description>
	<comments>
		<comment id='1' author='theSundayProgrammer' date='2015-11-20T17:10:48Z'>
		Hi there,
If you can provide more complete logs, that could be helpful in figuring out what is going on.  Do you have more information on the VC14 issue (i.e. a link to a bug report or something)?  I am not opposed to working around the issue with #ifdefs, but I'd prefer not to if possible.
I'm not sure what version of ns_model.hpp you're looking at; line 76 in the current git master branch is not the line referenced in your error.  Is this an issue with VC14 template typedef support, or is it an issue with what is in mlpack?
		</comment>
		<comment id='2' author='theSundayProgrammer' date='2015-11-20T17:52:07Z'>
		Which version of mlpack are you using?
Could you post a simple example which could trigger this compile time error?
Maybe I can reproduce the error on my machine(win8 64bits, vc2015 x86_amd64)
		</comment>
		<comment id='3' author='theSundayProgrammer' date='2015-11-21T03:57:35Z'>
		I was just building allknn on VS2015 x64 Release.
I was able to get a better work-around by changing some code in ns_model.hpp from:

template&lt;template&lt;typename TreeMetricType,
typename TreeStatType,
typename TreeMatType&gt; class TreeType&gt;
using NSType = NeighborSearch&lt;SortPolicy,
metric::EuclideanDistance,
arma::mat,
TreeType&gt;

to

template&lt;template&lt;typename TreeMetricType,
typename TreeStatType,
typename TreeMatType&gt; class TreeType&gt;
using NSType = NeighborSearch&lt;SortPolicy,
metric::EuclideanDistance,
arma::mat,
TreeType,
TreeType&lt;metric::EuclideanDistance, NeighborSearchStat,arma::mat&gt;::template DualTreeTraverser&gt;;

The last default parameter had to be added explicitly. I am not sure if this is a gcc extension or a VC bug.
		</comment>
		<comment id='4' author='theSundayProgrammer' date='2015-11-23T13:52:48Z'>
		As far as I can tell perusing the standard, MSVC is in the wrong here.  Here is a more minimal example that should produce the problem:
&lt;denchmark-code&gt;template&lt;typename A, typename B = double&gt;
class C
{

};

template&lt;typename A&gt;
using D = C&lt;A&gt;;

int main()
{
  D&lt;float&gt; d;
}
&lt;/denchmark-code&gt;

That compiles fine with gcc 4.9.2 and clang 3.5.0.  Does that compile with MSVC?
If not, I would suggest that maybe a bug should be filed with the Microsoft compiler team.
In the mean time, the workaround you suggest here is a bit ugly, unfortunately, but should still work with gcc and clang, so if stereomatchingkiss can also reproduce the error (maybe with the snippet I posted too), we can incorporate your fix.
		</comment>
		<comment id='5' author='theSundayProgrammer' date='2015-11-23T21:53:31Z'>
		Yes that compiles. That was an issue in VS2013. It's been fixed in VS2015.
The issue I think is that 'using' does not take into account default
parameters in MSVC 14 (Visual Studio 2015)
On Tue, Nov 24, 2015 at 12:52 AM, Ryan Curtin &lt;denchmark-link:mailto:notifications@github.com&gt;notifications@github.com&lt;/denchmark-link&gt;

wrote:

As far as I can tell perusing the standard, MSVC is in the wrong here.
Here is a more minimal example that should produce the problem:
template&lt;typename A, typename B = double&gt;
class C
{
};
template
using D = C;
int main()
{
D d;
}
That compiles fine with gcc 4.9.2 and clang 3.5.0. Does that compile with
MSVC?
If not, I would suggest that maybe a bug should be filed with the
Microsoft compiler team.
In the mean time, the workaround you suggest here is a bit ugly,
unfortunately, but should still work with gcc and clang, so if
stereomatchingkiss can also reproduce the error (maybe with the snippet I
posted too), we can incorporate your fix.
—
Reply to this email directly or view it on GitHub
#476 (comment).

&lt;denchmark-h:h2&gt;&lt;/denchmark-h&gt;

Joseph Chakravarti Mariadassou
&lt;denchmark-link:http://thesundayprogrammer.com&gt;http://thesundayprogrammer.com&lt;/denchmark-link&gt;

		</comment>
		<comment id='6' author='theSundayProgrammer' date='2015-11-24T15:17:26Z'>
		Hang on, I'm a bit confused: do you mean that the test example and the original mlpack code compile on VS2015, or that the test examples compiles on VS2015 and the original mlpack code does not?
		</comment>
		<comment id='7' author='theSundayProgrammer' date='2015-11-24T16:28:09Z'>
		(For now I merged your commit &lt;denchmark-link:https://github.com/mlpack/mlpack/commit/d4e6af5d37df5b1c7209f173016ab6d71e3aba1e&gt;d4e6af5&lt;/denchmark-link&gt;
 after some quick testing.  Maybe we can come up with a more elegant solution as we learn more, but this is at least a start.)
		</comment>
		<comment id='8' author='theSundayProgrammer' date='2015-11-24T18:43:28Z'>
		The test example compiles. The original mlpack required the change I put in.
On Wed, Nov 25, 2015 at 3:28 AM, Ryan Curtin &lt;denchmark-link:mailto:notifications@github.com&gt;notifications@github.com&lt;/denchmark-link&gt;

wrote:

(For now I merged your commit d4e6af5
d4e6af5
after some quick testing. Maybe we can come up with a more elegant solution
as we learn more, but this is at least a start.)
—
Reply to this email directly or view it on GitHub
#476 (comment).

&lt;denchmark-h:h2&gt;&lt;/denchmark-h&gt;

Joseph Chakravarti Mariadassou
&lt;denchmark-link:http://thesundayprogrammer.com&gt;http://thesundayprogrammer.com&lt;/denchmark-link&gt;

		</comment>
		<comment id='9' author='theSundayProgrammer' date='2015-11-24T18:57:51Z'>
		Hm, okay, then it seems like there is no workaround for VS2015, and this is what we'll have to do.  I'll try to keep this in mind when using template aliases in the future, but if you ever come across an issue where it doesn't compile in MSVC, please feel free to send a pull request.
		</comment>
		<comment id='10' author='theSundayProgrammer' date='2015-11-25T06:03:13Z'>
		Exactly, default parameter for aliases template do work in msvc2015
&lt;denchmark-code&gt;template&lt;typename A, typename B = double&gt;
class C
{

};

template&lt;typename A = float&gt;
using D = C&lt;A&gt;;

int main(int argc, char **argv)
{                    
    D&lt;&gt; d;
}
&lt;/denchmark-code&gt;

Compile without any problems on my laptop
compiler : vc2015 x86_amd64
os : windows 8.x 64 bits
		</comment>
	</comments>
</bug>