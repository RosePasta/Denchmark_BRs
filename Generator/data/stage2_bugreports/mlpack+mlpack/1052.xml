<bug id='1052' author='rcurtin' open_date='2017-07-07T00:34:38Z' closed_time='2017-07-19T13:45:03Z'>
	<summary>Parallel serialization testing can fail</summary>
	<description>
This would be a great issue for someone looking to get involved in the project.
Here is a fascinating unintended consequence of parallel tests: the SerializeObjectAll() function, used in fastmks_test.cpp as well as other tests, uses boost::serialization to save the model to a specific file.  But since we might be testing in parallel, then files may get overwritten arbitrarily, thus causing tests to fail in strange ways like here:
&lt;denchmark-link:https://travis-ci.org/mlpack/mlpack/builds/250830590?utm_source=github_status&amp;utm_medium=notification&gt;https://travis-ci.org/mlpack/mlpack/builds/250830590?utm_source=github_status&amp;utm_medium=notification&lt;/denchmark-link&gt;

In order to fix this problem, we'll need to modify SerializeObjectAll() in src/mlpack/tests/serialization.hpp in a way that it uses unique filenames instead of "test".  There are very many ways to do this, so there is a lot of freedom in how to fix the issue.
&lt;denchmark-link:https://github.com/shikharbhardwaj&gt;@shikharbhardwaj&lt;/denchmark-link&gt;
: CC'ing you here just to let you know (feel free to fix it if you like, but no obligation!).  Even if we think about everything beforehand and are careful about what we merge, there is always something that gets overlooked. :)
	</description>
	<comments>
		<comment id='1' author='rcurtin' date='2017-07-07T15:10:24Z'>
		That slipped under my radar. Thanks for the heads up. :)
Should be an easy fix indeed. I'll wait for some time, if no one takes this up, I'll fix it. (As you mentioned on IRC, this is a good beginner bug).
		</comment>
		<comment id='2' author='rcurtin' date='2017-07-09T15:57:02Z'>
		I started to look into some ways this could be done, in a cross platform manner.


There's std::tempnam(), which returns a filename, but is generally deprecated (not thread-safe and can be an attack vector, although it should not matter much here, but still, fewer warnings are always better.)


std::tmpfile() which returns a C FILE* handle, I'm not sure if that would be useful here.


Other ways require Boost.Filesystem or platform specific functions like mkstemp() on Linux or GetTempFileName() on Windows.
		</comment>
		<comment id='3' author='rcurtin' date='2017-07-10T18:35:43Z'>
		Another idea could be just assembling a name based on the test, or the types given to the test.  RTTI could probably be used here to get a string from a type that should be unique enough.
		</comment>
		<comment id='4' author='rcurtin' date='2017-07-10T19:07:06Z'>
		I had thought about that. Although the string returned by typeid(t).name() is not guaranteed to be unique for each type, most implementations keep it that way. We could just truncate and filter the string to be a valid filename.
		</comment>
		<comment id='5' author='rcurtin' date='2017-07-10T19:17:09Z'>
		I think that could be fine.  The probability for failure is really low here, since we would need a typeid(T).name() collision by two types whose tests just happened to be running simultaneously.  If a user ever reports a bug with it, we can change strategies then, but I doubt that anyone will ever run into an issue with that.
		</comment>
		<comment id='6' author='rcurtin' date='2017-07-19T13:45:02Z'>
		Fixed with &lt;denchmark-link:https://github.com/mlpack/mlpack/pull/1053&gt;#1053&lt;/denchmark-link&gt;
.
		</comment>
	</comments>
</bug>