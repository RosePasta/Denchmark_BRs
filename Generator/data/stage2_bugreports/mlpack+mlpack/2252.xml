<bug id='2252' author='saraansh1999' open_date='2020-03-02T19:19:04Z' closed_time='2020-04-25T20:08:12Z'>
	<summary>as_scalar error in max_pooling based on number of maxIterations for optimizer.</summary>
	<description>

version of mlpack: 3.2.3 (output of cout &lt;&lt; MLPACK_VERSION_MAJOR &lt;&lt;  MLPACK_VERSION_MINOR &lt;&lt;  MLPACK_VERSION_PATCH; )
operating system: Ubuntu 16.04
compiler: g++ (gcc version 5.4.0 20160609)
version of dependencies (Boost/Armadillo):
Boost version: 1.58.0
ARMA version: 9.850.1 (Pyrocumulus Wrath)

Steps to reproduce:
&lt;denchmark-link:url&gt;https://drive.google.com/drive/folders/1bHwfqIQcidgX8sOiwoMFdQWkWA9G4DnB?usp=sharing&lt;/denchmark-link&gt;

The code and the data files are present in this link.
Expected Behavior: The model should start training.
Actual Behavior:
Error:
error: as_scalar(): expression doesn't evaluate to exactly one element terminate called after throwing an instance of 'std::logic_error' what(): as_scalar(): expression doesn't evaluate to exactly one element Aborted (core dumped)
I was able to trace down the error to the line:
&lt;denchmark-link:url&gt;https://github.com/mlpack/mlpack/blob/225ec4e951a5333aa6c84db1490c76e9ca873977/src/mlpack/methods/ann/layer/max_pooling.hpp#L36&lt;/denchmark-link&gt;

I don't know why this is happening.
Been stuck for a while now.
Might be something stupid.
Any help is appreciated.
TIA
	</description>
	<comments>
		<comment id='1' author='saraansh1999' date='2020-03-02T21:37:06Z'>
		Pls tell if the problem is reproducible.
TIA
		</comment>
		<comment id='2' author='saraansh1999' date='2020-03-02T21:38:46Z'>
		Before I take a closer look into the issue, is the model and data from the models repo?
		</comment>
		<comment id='3' author='saraansh1999' date='2020-03-02T21:43:24Z'>
		The code is almost the same as this
&lt;denchmark-link:https://github.com/mlpack/models/blob/master/Kaggle/DigitRecognizerCNN/src/DigitRecognizerCNN.cpp&gt;https://github.com/mlpack/models/blob/master/Kaggle/DigitRecognizerCNN/src/DigitRecognizerCNN.cpp&lt;/denchmark-link&gt;

As suggested by a member on gitter
		</comment>
		<comment id='4' author='saraansh1999' date='2020-03-02T21:47:06Z'>
		Did you test the original code? The reason why I ask is, that such information help a lot to figure out what went wrong as fast a possible.
		</comment>
		<comment id='5' author='saraansh1999' date='2020-03-02T21:48:48Z'>
		I did.
Just to be sure i'll test it once more.
		</comment>
		<comment id='6' author='saraansh1999' date='2020-03-02T21:49:54Z'>
		Thanks, also I guess it fails with the same error?
		</comment>
		<comment id='7' author='saraansh1999' date='2020-03-02T22:01:41Z'>
		Yup.
This is the gdb traceback to the maxpooling layer.
`
Starting program: /home/saraansh/gsoc2020try/mlpack_tutorials/a.out
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
[New Thread 0x7ffff276e700 (LWP 11452)]
[New Thread 0x7ffff1f6d700 (LWP 11453)]
[New Thread 0x7fffef76c700 (LWP 11454)]
[New Thread 0x7fffeaf6b700 (LWP 11455)]
[New Thread 0x7fffe876a700 (LWP 11456)]
[New Thread 0x7fffe5f69700 (LWP 11457)]
[New Thread 0x7fffe3768700 (LWP 11458)]
Reading data ...
Training ...
784 37800
1 37800
error: as_scalar(): expression doesn't evaluate to exactly one element
terminate called after throwing an instance of 'std::logic_error'
what():  as_scalar(): expression doesn't evaluate to exactly one element
Thread 1 "a.out" received signal SIGABRT, Aborted.
0x00007ffff6915428 in __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:54
54	../sysdeps/unix/sysv/linux/raise.c: No such file or directory.
(gdb) up
&lt;denchmark-link:https://github.com/mlpack/mlpack/issues/1&gt;#1&lt;/denchmark-link&gt;
  0x00007ffff691702a in __GI_abort () at abort.c:89
89	abort.c: No such file or directory.
(gdb) up
&lt;denchmark-link:https://github.com/mlpack/mlpack/pull/2&gt;#2&lt;/denchmark-link&gt;
  0x00007ffff747a84d in __gnu_cxx::__verbose_terminate_handler() ()
from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
(gdb) up
&lt;denchmark-link:https://github.com/mlpack/mlpack/issues/3&gt;#3&lt;/denchmark-link&gt;
  0x00007ffff74786b6 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
(gdb) up
&lt;denchmark-link:https://github.com/mlpack/mlpack/pull/4&gt;#4&lt;/denchmark-link&gt;
  0x00007ffff7478701 in std::terminate() () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
(gdb) up
&lt;denchmark-link:https://github.com/mlpack/mlpack/pull/5&gt;#5&lt;/denchmark-link&gt;
  0x00007ffff7478919 in __cxa_throw () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
(gdb) up
&lt;denchmark-link:https://github.com/mlpack/mlpack/issues/6&gt;#6&lt;/denchmark-link&gt;
  0x0000000000407a19 in void arma::arma_stop_logic_error&lt;char const*&gt;(char const* const&amp;) ()
(gdb) up
&lt;denchmark-link:https://github.com/mlpack/mlpack/issues/7&gt;#7&lt;/denchmark-link&gt;
  0x00000000004119e6 in void arma::arma_check&lt;char [64]&gt;(bool, char const (&amp;) [64]) ()
(gdb) up
&lt;denchmark-link:https://github.com/mlpack/mlpack/issues/8&gt;#8&lt;/denchmark-link&gt;
  0x00000000005216c3 in arma::mtOp&lt;unsigned long long, arma::Mat, arma::op_index_max&gt;::elem_type arma::as_scalar&lt;arma::mtOp&lt;unsigned long long, arma::Mat, arma::op_index_max&gt; &gt;(arma::Base&lt;arma::mtOp&lt;unsigned long long, arma::Mat, arma::op_index_max&gt;::elem_type, arma::mtOp&lt;unsigned long long, arma::Mat, arma::op_index_max&gt; &gt; const&amp;) ()
(gdb) up
&lt;denchmark-link:https://github.com/mlpack/mlpack/issues/9&gt;#9&lt;/denchmark-link&gt;
  0x00000000004fe020 in unsigned long mlpack::ann::MaxPoolingRule::Pooling&lt;arma::Mat &gt;(arma::Mat const&amp;) ()
`
Once we are able to figure out the problem and if it needs some change in the code I would love to take it up.
Thanks
		</comment>
		<comment id='8' author='saraansh1999' date='2020-03-02T22:14:48Z'>
		So, there's a bug report issue template that asks for all manner of things including, e.g., the version of Armadillo and dependencies.  Is there a reason that you didn't use that?  Because that information would be really helpful at this point. :)
		</comment>
		<comment id='9' author='saraansh1999' date='2020-03-02T22:25:38Z'>
		I wasnt sure wether this was a bug in the codebase or a fault on my part. I'll update it.
		</comment>
		<comment id='10' author='saraansh1999' date='2020-03-02T23:44:26Z'>
		Thanks!
		</comment>
		<comment id='11' author='saraansh1999' date='2020-03-04T09:49:15Z'>
		Hi &lt;denchmark-link:https://github.com/saraansh1999&gt;@saraansh1999&lt;/denchmark-link&gt;
, I am not able to reproduce this on my system. Here are some the results of the results from DigitRecognizer and DigitRecognizerCNN
&lt;denchmark-code&gt;1 - accuracy: train = 95.2963%, valid = 94.2143%
2 - accuracy: train = 97.2778%, valid = 96.2143%
3 - accuracy: train = 97.8148%, valid = 96.2381%
4 - accuracy: train = 97.5397%, valid = 95.7143%
5 - accuracy: train = 98.3942%, valid = 96.5%
6 - accuracy: train = 98.5132%, valid = 96.7381%

&lt;/denchmark-code&gt;

and
&lt;denchmark-code&gt;Epoch 0:        Training Accuracy = 49.6376%,   Validation Accuracy = 50.4048%
Epoch 1:        Training Accuracy = 66.1243%,   Validation Accuracy = 65.8571%
Epoch 2:        Training Accuracy = 73.6878%,   Validation Accuracy = 73.3333%
Epoch 3:        Training Accuracy = 77.5952%,   Validation Accuracy = 77.5%
Epoch 4:        Training Accuracy = 80.6614%,   Validation Accuracy = 80.5238%
&lt;/denchmark-code&gt;

I think these are acceptable epoch accuracies. I will try running your code also and get back to you.
I will also run some tests on pooling layers just in case.
		</comment>
		<comment id='12' author='saraansh1999' date='2020-03-04T12:21:11Z'>
		Hey &lt;denchmark-link:https://github.com/kartikdutt18&gt;@kartikdutt18&lt;/denchmark-link&gt;
. Thanks for the effort. Following up on your comment I tried running both DigitRecognizer and DigitRecognizerCNN. The linear model seems to be working(i.e. DigitRecognizer), but the DigitRecognozerCNN still seems to be giving me the same error at the same place.
I also tried making the value of MAX_ITERATIONS_PER_CYCLE same as trainX.n_cols(similar to the DigitRecognizer code) but no luck.
The changes I have made to run the DigitRecognizerCNN code, just to give completer info:

Download just the DigitRecognizerCNN and utils files from the repo.
Put the both in the same folder and accordingly change the include statement.
Change the paths to the dataset (the data is downloaded from the repo only).
Run using the command
 g++ DigitRecognizerCNN.cpp -fopenmp -larmadillo -lmlpack -std=c++11; ./a.out

		</comment>
		<comment id='13' author='saraansh1999' date='2020-03-04T15:06:45Z'>
		Hmmm, I couldn't get the code to fail but got very low accuracy (around 8% and it stayed there for a while).
Training Accuracy = 9.39947%,   Validation Accuracy = 9.7166%
Solution that worked for me:
The Following are the changes I made:

Increase iterations per cycle

constexpr int ITERATIONS_PER_CYCLE = 10000;

Reset Optimizer Every cycle

optimizer.ResetPolicy()=false;

Cleaned cout statement a bit. (irrelevant).

This fixes everything for me. The results I got:
&lt;denchmark-code&gt;Training Accuracy = 49.6376%
Validation Accuracy = 50.4048%

Training Accuracy = 66.1243%
Validation Accuracy = 65.8571%
&lt;/denchmark-code&gt;

The code I took is the one you have provided the link for in the description.
		</comment>
		<comment id='14' author='saraansh1999' date='2020-03-04T15:09:34Z'>
		Could you also try running the model in model repo using
&lt;denchmark-code&gt;mkdir build &amp;&amp; cd build &amp;&amp; cmake ../
./bin/DigitRecognizerCNN
&lt;/denchmark-code&gt;

incase you haven't already.
		</comment>
		<comment id='15' author='saraansh1999' date='2020-03-04T18:32:26Z'>
		Same result  :(
		</comment>
		<comment id='16' author='saraansh1999' date='2020-03-04T18:43:02Z'>
		Did you try both methods?
		</comment>
		<comment id='17' author='saraansh1999' date='2020-03-04T18:47:28Z'>
		The first option doesnt work as the code is not even passing the Train call.
Secondly i built the models repo and executed the command you mentioned. Same result.
		</comment>
		<comment id='18' author='saraansh1999' date='2020-03-05T05:36:11Z'>
		Hmm, I will try it on Ubuntu then because I am not facing any issue on my local devices (OSX).
		</comment>
		<comment id='19' author='saraansh1999' date='2020-03-05T15:15:37Z'>
		Any updates?
		</comment>
		<comment id='20' author='saraansh1999' date='2020-03-05T15:18:44Z'>
		&lt;denchmark-link:https://github.com/saraansh1999&gt;@saraansh1999&lt;/denchmark-link&gt;
, I have my embedded systems exam tomorrow. So I am only be able to work on reviews / very minor changes. I will get back to you the day after unless someone beats me to it. I hope that's okay.
		</comment>
		<comment id='21' author='saraansh1999' date='2020-03-06T11:17:55Z'>
		Hi  &lt;denchmark-link:https://github.com/saraansh1999&gt;@saraansh1999&lt;/denchmark-link&gt;
, I tried it on linux based system(PopOS) and on MacOS. DigitRecognizerCNN works fine for me on both machines. I will run some tests to see why it fails on your machine, I'll try to get back to you as soon as I can.
		</comment>
		<comment id='22' author='saraansh1999' date='2020-03-07T13:09:16Z'>
		Hey &lt;denchmark-link:https://github.com/saraansh1999&gt;@saraansh1999&lt;/denchmark-link&gt;
, I have opened a PR that might be related to your issue. Not sure though but I think it is something to look into. Thanks.
		</comment>
		<comment id='23' author='saraansh1999' date='2020-03-07T13:31:17Z'>
		Please can I contribute somehow to this solution. I want to start with something small and get the feel of writing code in this codebase.
		</comment>
		<comment id='24' author='saraansh1999' date='2020-03-17T12:39:19Z'>
		Hey I think this should be solved in &lt;denchmark-link:https://github.com/mlpack/mlpack/pull/2265&gt;#2265&lt;/denchmark-link&gt;
, Could you try it and see if it solved your issue?
Thanks.
		</comment>
		<comment id='25' author='saraansh1999' date='2020-04-16T12:53:43Z'>
		This issue has been automatically marked as stale because it has not had any recent activity.  It will be closed in 7 days if no further activity occurs.  Thank you for your contributions! 👍
		</comment>
	</comments>
</bug>