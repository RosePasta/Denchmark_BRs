<bug id='1033' author='rcurtin' open_date='2017-06-19T18:34:52Z' closed_time='2017-08-08T06:26:33Z'>
	<summary>Require C++11 for compilation?</summary>
	<description>
It's currently possible to (mostly) compile parts of mlpack without C++11, but it can make life difficult.  For instance, I spent ~an hour today trying to compile a simple FFN that I'd worked on earlier:
&lt;denchmark-code&gt;$ g++ -O2 -o run_network -I/home/ryan/src/mlpack/build-nodebug/include/ -L/home/ryan/src/mlpack/build-nodebug/lib/ -lmlpack -larmadillo -lboost_program_options run_network.cpp
&lt;/denchmark-code&gt;

and this output about a billion lines of errors because boost::variant had an ambiguous overload.  I dug for a while, then I realized, I just have to specify -std=c++11 and it's fine.
So, is it time for us to require a C++11 compiler and output a compilation error via #error if we don't detect one?  I think it would be a good idea, I just want to open this ticket and let it sit a while before actually making the change, to see if there are any objections.  I think we can at least reasonably expect that everyone will have a fully functional C++11 compiler available now since it is 2017.  (Though this will make it harder for me to try to compile mlpack on that old Solaris 7 box I have been playing with!)
	</description>
	<comments>
		<comment id='1' author='rcurtin' date='2017-06-20T20:11:12Z'>
		My opinion is that this makes sense, I was not even aware you could compile mlpack without C++11, but I think it is a reasonable requirement.
For the Solaris 7 people (and how many could that be), they can always take the extra step of removing the #error lines.
Would this happen in the mlpack headers, or in CMake?
		</comment>
		<comment id='2' author='rcurtin' date='2017-06-20T20:19:47Z'>
		This change would be in the mlpack headers.  Now that I think about it, CMake will refuse to build mlpack itself without a C++11 compiler.  The problem I encountered arose when I tried to use non-C++11 compilation while including some mlpack headers.
		</comment>
		<comment id='3' author='rcurtin' date='2017-06-21T21:21:15Z'>
		I see. Makes sense to do it in the header then.
My opinion is the same - C++11 is pretty much standard.
		</comment>
		<comment id='4' author='rcurtin' date='2017-08-08T06:26:33Z'>
		When I dug into this further, I found that C++11 happens to already be required via the header file &lt;utility&gt;.  Instead, it turns out what I was encountering was this bug:
&lt;denchmark-link:https://svn.boost.org/trac10/ticket/11285&gt;https://svn.boost.org/trac10/ticket/11285&lt;/denchmark-link&gt;

So actually my compiler was already by default in C++14 mode, but this causes that Boost bug with Boost 1.58.  In &lt;denchmark-link:https://github.com/mlpack/mlpack/commit/37be9f4a5821dd9ea1fb980e1454274850f38d63&gt;37be9f4&lt;/denchmark-link&gt;
, I added a macro check to  that detects this situation (C++14 and Boost &lt; 1.59) and issues an error.  Should help save some other people pain...
		</comment>
	</comments>
</bug>