<bug id='1840' author='conradsnicta' open_date='2019-04-05T07:55:32Z' closed_time='2020-03-06T01:11:36Z'>
	<summary>crash due to not checking eig_sym() for failure in PositiveDefiniteConstraint::ApplyConstraint()</summary>
	<description>
arma::eig_sym() is not checked for failure in PositiveDefiniteConstraint::ApplyConstraint().
This can lead to a crash due to accessing non-existent eigenvalues.
mlpack/src/mlpack/methods/gmm/positive_definite_constraint.hpp



mlpack/src/mlpack/methods/gmm/positive_definite_constraint.hpp


         Line 44
      in
      2326bf8






 arma::eig_sym(eigval, eigvec, covariance); 





The code in  assumes that the  vector has at least one element, which is a false assumption. If  fails,  is reset so that it has no elements -- see the &lt;denchmark-link:http://arma.sourceforge.net/docs.html#eig_sym&gt;eig_sym() documentation&lt;/denchmark-link&gt;
.
Decomposing a non-symmetric matrix with arma::eig_sym() is not guaranteed to work. Furthermore, Armadillo 9.400 will have a rudimentary check for symmetry on the input matrix, which makes failure more likely here.
	</description>
	<comments>
		<comment id='1' author='conradsnicta' date='2019-04-05T08:14:42Z'>
		Similar problems with eig_sym():

https://github.com/mlpack/mlpack/blob/master/src/mlpack/core/math/lin_alg.cpp#L88
https://github.com/mlpack/mlpack/blob/master/src/mlpack/methods/gmm/eigenvalue_ratio_constraint.hpp#L67
https://github.com/mlpack/mlpack/blob/master/src/mlpack/methods/kernel_pca/kernel_rules/nystroem_method.hpp#L67
https://github.com/mlpack/mlpack/blob/master/src/mlpack/methods/kernel_pca/kernel_rules/naive_method.hpp#L76
https://github.com/mlpack/mlpack/blob/master/src/mlpack/tests/gmm_test.cpp#L629

Similar problems with chol():

https://github.com/mlpack/mlpack/blob/master/src/mlpack/core/dists/gaussian_distribution.cpp#L42
https://github.com/mlpack/mlpack/blob/master/src/mlpack/methods/gmm/gmm.cpp#L120

		</comment>
		<comment id='2' author='conradsnicta' date='2019-04-05T11:26:52Z'>
		Can I work on this issue ?
		</comment>
		<comment id='3' author='conradsnicta' date='2019-04-05T18:20:08Z'>
		Sure, feel free to work on the issue.
		</comment>
		<comment id='4' author='conradsnicta' date='2019-04-05T18:31:00Z'>
		How about writing a try catch block in order to make the code free from generating runtime exceptions ? Will that work or any other idea ?
		</comment>
		<comment id='5' author='conradsnicta' date='2019-04-05T18:35:59Z'>
		Generating an error output and then asking it to be fixed will work right ? Instead of getting a runtime exception.
		</comment>
		<comment id='6' author='conradsnicta' date='2019-04-05T19:25:12Z'>
		&lt;denchmark-link:https://github.com/chandramoulirajagopalan&gt;@chandramoulirajagopalan&lt;/denchmark-link&gt;
: Conrad just opened a PR in ensmallen with an example of how we should handle these issues.  You can adapt that strategy.
		</comment>
		<comment id='7' author='conradsnicta' date='2019-04-06T12:49:55Z'>
		For the specific case of , I suggest calling &lt;denchmark-link:http://arma.sourceforge.net/docs.html#symmat&gt;arma::symmatu()&lt;/denchmark-link&gt;
 or &lt;denchmark-link:http://arma.sourceforge.net/docs.html#symmat&gt;arma::symmatl()&lt;/denchmark-link&gt;
 before doing the eigen decomposition via &lt;denchmark-link:http://arma.sourceforge.net/docs.html#eig_sym&gt;eig_sym()&lt;/denchmark-link&gt;
.  This is in addition to checking whether the eigen decomposition succeeded.
Example: covariance = arma::symmatu(covariance);
One problem with PositiveDefiniteConstraint::ApplyConstraint() is that there is no way for the function to tell the caller that applying to constraint could not be accomplished. I suggest refactoring it so  a bool is returned indicating success.
		</comment>
		<comment id='8' author='conradsnicta' date='2019-04-07T09:43:22Z'>
		Should I give an error output if the values don't exist ?
		</comment>
		<comment id='9' author='conradsnicta' date='2019-04-07T10:08:37Z'>
		For Cholesky Decomposition the method returns a double value what to return if it fails, apart from an error message ?
		</comment>
		<comment id='10' author='conradsnicta' date='2019-04-07T11:32:05Z'>
		Created a pull request can someone check that out ? Any improvements needed ?
		</comment>
		<comment id='11' author='conradsnicta' date='2019-04-07T16:31:51Z'>
		Should we use is_empty() to check if the matrix is reset or not for chol() function to prevent from runtime error ?
		</comment>
		<comment id='12' author='conradsnicta' date='2019-04-08T06:52:58Z'>
		&lt;denchmark-link:https://github.com/chandramoulirajagopalan&gt;@chandramoulirajagopalan&lt;/denchmark-link&gt;
 You may have used an old version of mlpack as the base for your work. For example, why are you modifying the following files ?
src/mlpack/methods/ann/layer/lstm.hpp
src/mlpack/methods/ann/layer/lstm_impl.hpp
src/mlpack/tests/ann_layer_test.cpp
src/mlpack/methods/reinforcement_learning/q_learning_impl.hpp
Also, it's not clear why you have #include &lt;iostream&gt;, and use the cerr stream. mlpack already has its own specific streams for logging, such as Log::Fatal, Log::Debug, Log::Info, Log::Warn. Example:
&lt;denchmark-code&gt;Log::Warn &lt;&lt; "message" &lt;&lt; std::endl;
&lt;/denchmark-code&gt;

		</comment>
		<comment id='13' author='conradsnicta' date='2019-04-08T08:26:55Z'>
		That was my first pull request so did not know how to do it. I will fix them now and make a new pull request.
		</comment>
		<comment id='14' author='conradsnicta' date='2019-04-08T09:09:21Z'>
		&lt;denchmark-link:https://github.com/chandramoulirajagopalan&gt;@chandramoulirajagopalan&lt;/denchmark-link&gt;
 You may also want to have a look at the documentation for arma::chol(). There is a form which outputs a bool to indicate success.
		</comment>
		<comment id='15' author='conradsnicta' date='2019-04-08T09:17:34Z'>
		&lt;denchmark-link:https://github.com/conradsnicta&gt;@conradsnicta&lt;/denchmark-link&gt;
 The documentation under arma::chol() doesnot have any boolean functions to check if it succeeded or not. Maybe checking if the decomposed matrix is empty or not would work fine I guess.
		</comment>
		<comment id='16' author='conradsnicta' date='2019-04-08T11:45:15Z'>
		&lt;denchmark-link:https://github.com/chandramoulirajagopalan&gt;@chandramoulirajagopalan&lt;/denchmark-link&gt;
 Your code is still not right.  The documentation for &lt;denchmark-link:http://arma.sourceforge.net/docs.html#chol&gt;chol()&lt;/denchmark-link&gt;
 states:

If the decomposition fails:

R = chol(X) resets R and throws a std::runtime_error exception
chol(R,X) resets R and returns a bool set to false (exception is not thrown)


The following will throw an exception if the decomposition fails:
&lt;denchmark-code&gt;covLower = arma::chol(covariance, "lower");
&lt;/denchmark-code&gt;

so it will never reach this point:
&lt;denchmark-code&gt;// Check if Cholesky Decomposition exists, if not raise an error log.
if (covLower.is_empty())
{
  Log::Fatal &lt;&lt; "Cholesky Decomposition failed as Matrix is Empty ." &lt;&lt; std::endl;
  return;
}
&lt;/denchmark-code&gt;

To do this properly, use code along these lines:
&lt;denchmark-code&gt; mat covLower;
 
 if(arma::chol(covLower, covariance, "lower") == false)
 { ... handle failure here ... }
&lt;/denchmark-code&gt;

Handling eig_sym() failures can be done in a similar manner.
		</comment>
		<comment id='17' author='conradsnicta' date='2019-04-08T11:48:53Z'>
		okay thanks yeah will modify that
		</comment>
		<comment id='18' author='conradsnicta' date='2019-04-08T11:51:46Z'>
		But according to the decomposition the matrix will be reset right ? So what if we check if it is empty or not after the decomposition ? It is not safe to access memory locations that aren't present but here if the decomposition fails it is being reset so checking after the assignment will affect the program ?
		</comment>
		<comment id='19' author='conradsnicta' date='2019-04-08T11:53:35Z'>
		&lt;denchmark-link:https://github.com/chandramoulirajagopalan&gt;@chandramoulirajagopalan&lt;/denchmark-link&gt;
 Make sure you only modify the files that are specific to fixing these bugs. In your PR you modified , which is not related to these bugs.
In the function PositiveDefiniteConstraint::ApplyConstraint(), I recommend to explicitly enforce symmetry on the given matrix via symmatu() or symmatl().
		</comment>
		<comment id='20' author='conradsnicta' date='2019-04-08T11:55:20Z'>
		&lt;denchmark-link:https://github.com/chandramoulirajagopalan&gt;@chandramoulirajagopalan&lt;/denchmark-link&gt;
 As the documentation states, if  fails, R is reset  an exception is thrown. The exception will cause the program to be immediately aborted, as the exception is not caught.
		</comment>
		<comment id='21' author='conradsnicta' date='2019-04-08T15:21:48Z'>
		I modified src/mlpack/methods/linear_svm/linear_svm_impl.hpp because the style checks wasn't building properly and there was some extra space inside the function arguments, so I just deleted it to make sure it was passing the build and yes I will make exceptions for that as you said. I have one more problem &lt;denchmark-link:http://ci.mlpack.org/job/pull-requests-mlpack-static-code-analysis/1469/cppcheckResult/&gt;http://ci.mlpack.org/job/pull-requests-mlpack-static-code-analysis/1469/cppcheckResult/&lt;/denchmark-link&gt;
 I didn't even change anything about logDetCov. Static Code analysis is not building at all
		</comment>
		<comment id='22' author='conradsnicta' date='2019-04-08T16:39:33Z'>
		Can you verify the commit? Is it as required or any other changes to be done ?
		</comment>
		<comment id='23' author='conradsnicta' date='2019-04-09T04:00:03Z'>
		&lt;denchmark-link:https://github.com/chandramoulirajagopalan&gt;@chandramoulirajagopalan&lt;/denchmark-link&gt;
 Your code still has lots of mistakes.  I suggest you thoroughly analyse the program flow, and run tests on each function that you change, before submitting pull requests.
		</comment>
		<comment id='24' author='conradsnicta' date='2019-04-09T04:31:01Z'>
		I am closing the pull request for now. Can you please review the code I commit into my forked repository so that it will be easy instead of building it every time I commit.
		</comment>
		<comment id='25' author='conradsnicta' date='2019-04-09T04:51:30Z'>
		&lt;denchmark-link:https://github.com/chandramoulirajagopalan&gt;@chandramoulirajagopalan&lt;/denchmark-link&gt;
 sorry, I won't have time to go through your repo. I suggest you submit another PR after you have fixed all the problems and thoroughly tested the code (both automatically and manually, by carefully analysing the program flow).
		</comment>
		<comment id='26' author='conradsnicta' date='2019-04-09T04:52:29Z'>
		okay thanks will do that.
		</comment>
		<comment id='27' author='conradsnicta' date='2019-04-09T07:15:58Z'>
		&lt;denchmark-link:https://github.com/conradsnicta&gt;@conradsnicta&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://math.stackexchange.com/questions/654465/do-all-square-matrices-have-eigenvectors&gt;https://math.stackexchange.com/questions/654465/do-all-square-matrices-have-eigenvectors&lt;/denchmark-link&gt;
 This link above says every matrix has eigenvalues but it depends whether it is real or complex. So I think the issue here is to check whether the eigenvalue returned is complex or not ? If there are any matrix which do not have eigen values.So the condition here is to check whether the input matrix is symmetrix and is not empty.
Even this code mat covLower;
if(arma::chol(covLower, covariance, "lower") == false)
{ ... handle failure here ... }
Will not work as we are executing the function chol() inside if statement if it fails it will still throw an error. So we should try doing try catch instead.
		</comment>
		<comment id='28' author='conradsnicta' date='2019-04-09T08:38:41Z'>
		I think this should do
&lt;denchmark-code&gt;if ((mat.is_empty() ==  true) || (mat.is_symmetric() == false))
    {
      Log::Fatal &lt;&lt; "Eigen Decomposition failed as Eigen Value "
            &lt;&lt; "does not exists ." &lt;&lt; std::endl;
      return;
    }
&lt;/denchmark-code&gt;

This should be fine before executing eig_sym().
		</comment>
		<comment id='29' author='conradsnicta' date='2019-04-10T13:57:20Z'>
		&lt;denchmark-link:https://github.com/rcurtin&gt;@rcurtin&lt;/denchmark-link&gt;
 Will that idea work ? Because when I tested it locally I experienced runtime errors while executing the following &lt;denchmark-link:https://github.com/mlpack/mlpack/issues/1840#issuecomment-480798003&gt;idea&lt;/denchmark-link&gt;
. So I just went through this stackoverflow &lt;denchmark-link:https://math.stackexchange.com/questions/654465/do-all-square-matrices-have-eigenvectors&gt;link&lt;/denchmark-link&gt;
, since arma:: matrices can return complex numbers too there is always eigenvalues for every matrix that is square, symmetrical and is not empty. So I guess the ideal case would be to check if the matrix is symmetrical and not empty since it is square we need not bother about it. So I guess these checks are good enough to avoid the decomposition runtime error ? Should I proceed further implementing the code everywhere. &lt;denchmark-link:https://github.com/rcurtin&gt;@rcurtin&lt;/denchmark-link&gt;
  Can you please check this idea if it works or not ?
		</comment>
		<comment id='30' author='conradsnicta' date='2019-04-12T01:24:41Z'>
		&lt;denchmark-link:https://github.com/chandramoulirajagopalan&gt;@chandramoulirajagopalan&lt;/denchmark-link&gt;
 I suggest you re-read the docs for chol(), eig_sym() and eig_gen().
		</comment>
		<comment id='31' author='conradsnicta' date='2019-04-12T03:56:01Z'>
		I have gone through the docs &lt;denchmark-link:https://github.com/conradsnicta&gt;@conradsnicta&lt;/denchmark-link&gt;
 but while I try to execute it under cases where eigenvalues do not exist I still get runtime error.  Log::Fatal does not get executed. The block inside if is returning a runtime exception. So instead of running the function eig_sym() the only way I thought to avoid the runtime error is by checking if the matrix is empty or if it is not symmetrical or if it is not square shaped. So if these three basic conditions are met it is compiling. According to the link  &lt;denchmark-link:https://math.stackexchange.com/questions/654465/do-all-square-matrices-have-eigenvectors&gt;https://math.stackexchange.com/questions/654465/do-all-square-matrices-have-eigenvectors&lt;/denchmark-link&gt;
 every matrix has eigen values I tried using the example from the above link it still executes. So I thought it would be easy to check if they are empty or not.
		</comment>
		<comment id='32' author='conradsnicta' date='2019-04-12T04:57:34Z'>
		&lt;denchmark-link:https://github.com/conradsnicta&gt;@conradsnicta&lt;/denchmark-link&gt;

&lt;denchmark-link:https://gitlab.com/conradsnicta/armadillo-code/blob/9.400.x/include/armadillo_bits/auxlib_meat.hpp#L1698&gt;https://gitlab.com/conradsnicta/armadillo-code/blob/9.400.x/include/armadillo_bits/auxlib_meat.hpp#L1698&lt;/denchmark-link&gt;

the if condition in the library is returning true if the eigenvec is empty and the size of eigenval depends on the size of eigenvec &lt;denchmark-link:https://gitlab.com/conradsnicta/armadillo-code/blob/9.400.x/include/armadillo_bits/auxlib_meat.hpp#L1707&gt;https://gitlab.com/conradsnicta/armadillo-code/blob/9.400.x/include/armadillo_bits/auxlib_meat.hpp#L1707&lt;/denchmark-link&gt;
 so the size of eigenval will be zero only when eigenvec is zero (i.e. if eigenvec is empty) but when eigenvec is empty the code returns true so the if condition which we wrote does not execute since it returns true and eigenval[0] gets called and we are getting runtime error once again. I think  &lt;denchmark-link:https://gitlab.com/conradsnicta/armadillo-code/blob/9.400.x/include/armadillo_bits/auxlib_meat.hpp#L1698&gt;https://gitlab.com/conradsnicta/armadillo-code/blob/9.400.x/include/armadillo_bits/auxlib_meat.hpp#L1698&lt;/denchmark-link&gt;
 it should return false here which will fix our issue.
		</comment>
		<comment id='33' author='conradsnicta' date='2019-04-12T05:47:35Z'>
		&lt;denchmark-link:https://github.com/chandramoulirajagopalan&gt;@chandramoulirajagopalan&lt;/denchmark-link&gt;
 You're not understanding how the code works.  What does  do?  Where is the variable  modified?  Please trust the documentation instead of reading through internal armadillo code.
		</comment>
		<comment id='34' author='conradsnicta' date='2019-04-12T05:51:18Z'>
		I get eig_sym() value to be true even if the input matrix is empty while executing the code. So and then while calling eigval[0] it returns a runtime error again.
		</comment>
		<comment id='35' author='conradsnicta' date='2019-04-12T06:21:35Z'>
		That's a separate issue from an actual eigen decomposition failure. Further comments on this at: &lt;denchmark-link:https://gitlab.com/conradsnicta/armadillo-code/issues/116&gt;https://gitlab.com/conradsnicta/armadillo-code/issues/116&lt;/denchmark-link&gt;

		</comment>
		<comment id='36' author='conradsnicta' date='2019-04-14T19:12:55Z'>
		what should I return for a vector when there is failure in eigen decomposition.
		</comment>
		<comment id='37' author='conradsnicta' date='2019-05-01T10:30:15Z'>
		I get failure in the test cases. What's to be done and the spaces in one of the file ? Can someone help me with that  please ?
		</comment>
		<comment id='38' author='conradsnicta' date='2019-05-12T12:47:28Z'>
		Closing as the discussion has veered off into tutorials on linear algebra and how to code. Feel free to open as a fresh new issue.
		</comment>
		<comment id='39' author='conradsnicta' date='2019-12-29T04:40:30Z'>
		Reopening as &lt;denchmark-link:https://github.com/mlpack/mlpack/pull/2088&gt;#2088&lt;/denchmark-link&gt;
 is being worked on.
		</comment>
		<comment id='40' author='conradsnicta' date='2020-01-28T05:20:26Z'>
		This issue has been automatically marked as stale because it has not had any recent activity.  It will be closed in 7 days if no further activity occurs.  Thank you for your contributions! 👍
		</comment>
	</comments>
</bug>