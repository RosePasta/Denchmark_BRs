<bug id='1849' author='conradsnicta' open_date='2019-04-08T07:11:22Z' closed_time='2019-04-23T17:30:06Z'>
	<summary>bug in ccov() due to use of internal armadillo classes</summary>
	<description>
The ccov() function in mlpack/src/mlpack/core/arma_extend/fn_ccov.hpp uses internal armadillo classes: Op and Glue:



mlpack/src/mlpack/core/arma_extend/fn_ccov.hpp


         Line 8
      in
      3ad649c






 const Op&lt;T1, op_ccov&gt; 








mlpack/src/mlpack/core/arma_extend/fn_ccov.hpp


         Line 22
      in
      3ad649c






 const Glue&lt;T1,T2,glue_ccov&gt; 





In armadillo 9.400 (under development) these classes are changed, resulting in the following errors when compiling mlpack:
&lt;denchmark-code&gt;/usr/include/armadillo_bits/Op_bones.hpp:53:21: error: no class template named ‘traits’ in ‘class arma::op_ccov’
&lt;/denchmark-code&gt;

op_ccov is defined by mlpack in src/mlpack/core/arma_extend/op_ccov_proto.hpp.
I suggest rewriting both forms of ccov() so that the functions output a matrix instead of Op or Glue. When compiling with a C++11 compiler, Armadillo will automatically use the move constructor in the Mat class, so the performance impact will be minimal.
The internal  and  classes are subject to change, as per the &lt;denchmark-link:http://arma.sourceforge.net/docs.html#api_additions&gt;API policy&lt;/denchmark-link&gt;
.
	</description>
	<comments>
		<comment id='1' author='conradsnicta' date='2019-04-08T11:32:24Z'>
		Can I work on this issue?
		</comment>
		<comment id='2' author='conradsnicta' date='2019-04-08T12:01:36Z'>
		&lt;denchmark-link:https://github.com/chandramoulirajagopalan&gt;@chandramoulirajagopalan&lt;/denchmark-link&gt;
 - I'd suggest that it's better to finish one PR properly (ie. your work on &lt;denchmark-link:https://github.com/mlpack/mlpack/issues/1840&gt;#1840&lt;/denchmark-link&gt;
), and then look at making another one. You seem to be working too fast, which can lead to easy mistakes.
		</comment>
		<comment id='3' author='conradsnicta' date='2019-04-08T14:49:19Z'>
		&lt;denchmark-link:https://github.com/rcurtin&gt;@rcurtin&lt;/denchmark-link&gt;
 I'm too busy make a proper PR, so here is the next best thing.
Attached is  (because GitHub won't let me attach .hpp files): &lt;denchmark-link:https://github.com/mlpack/mlpack/files/3054801/ccov.txt&gt;ccov.txt&lt;/denchmark-link&gt;

The code is an adapted form of  so that it doesn't use internal armadillo functionality.
The file should be renamed to ccov.hpp and placed into src/mlpack/core/math/. Then throughout the mlpack codebase, all uses of arma::ccov(X) should then be replaced with mlpack::math::ccov(X). Finally, all ccov related files in core/arma_extend/ should be removed.
Feel free to adapt, change, etc. License is 3-clause BSD license.
Alternatively, all occurrences of arma::ccov(X) could be simply replaced by arma::cov(trans(X)). I don't think the extra transpose will make much of a difference.
		</comment>
		<comment id='4' author='conradsnicta' date='2019-04-12T03:43:39Z'>
		&lt;denchmark-link:https://github.com/conradsnicta&gt;@conradsnicta&lt;/denchmark-link&gt;
 thanks for the report, sorry for the slow response on my end.  Originally when I wrote this (...eight years ago??) the goal was to eventually submit it as a patch to you to add.  I think that you didn't want to include it, which is fine, so we just piggybacked it here and then it got a bit forgotten about.
I think it's not necessary to hook it up to the whole delayed evaluation infrastructure, so the patch you wrote in &lt;denchmark-link:https://github.com/mlpack/mlpack/pull/1856&gt;#1856&lt;/denchmark-link&gt;
 works as a quick change for now.  However, since we're looking to release very soon, we actually don't need to patch the 3.0.x branch but we can patch master directly.
&lt;denchmark-link:https://github.com/mlpack/mlpack/pull/1855&gt;#1855&lt;/denchmark-link&gt;
, which effectively just moves it into mlpack-specific functionality, is fine with me, so I think that's the better way to go here.

Alternatively, all occurrences of arma::ccov(X) could be simply replaced by arma::cov(trans(X)). I don't think the extra transpose will make much of a difference.

I see what you're saying, but the reason we originally avoided doing that was the extra RAM usage needed to do the transpose.  Asymptotically speaking, the operation X*X^T for X of size d x n takes O(nd^2) time whereas a transpose takes O(nd) time (and we'll be doing that twice).  Allocating the extra memory for that limits the maximum size that we can do this operation on, and d often may not be very large at all---it may be, e.g., around 10 for a linear regression task.  In this case the overhead may be non-negligible.
It seems like it would be possible for arma::cov() to detect when it's given a transposed matrix and act accordingly, but I don't think that support is actually there.  (And I also don't think it's worth the effort to make that happen just for this issue.)  If you did want to add the support, we can switch what we're doing on our end, but totally up to you.
		</comment>
		<comment id='5' author='conradsnicta' date='2019-04-12T06:09:38Z'>
		&lt;denchmark-link:https://github.com/rcurtin&gt;@rcurtin&lt;/denchmark-link&gt;
 If I recall correctly, I wasn't entirely convinced that incorporating a specialisation for  was worth it, at least when looking from a speed point of view. Transpose is pretty quick, as it's essentially a glorified copy operation. The most time consuming operation inside the  function is the matrix multiplication, which should take far longer than applying the transpose on the input matrix.
However, I agree with the point that doing the transpose on the input matrix increases memory use, so we can certainly provide an optimisation for that.  There are clear use cases for doing cov(trans(X)) in the mlpack code base.  You're welcome to submit a pull request, otherwise I'll try to implement it when I have free time.  Perhaps this would make mlpack::math::ccov() redundant ?
		</comment>
		<comment id='6' author='conradsnicta' date='2019-04-12T17:06:22Z'>
		Right, transpose is quick, but for the use case I'm considering, the cost of X * trans(X) is going to be similar.
If you're willing to accept a patch for cov(trans(X)) I think that would be great, and then on our end since we try to support older versions of Armadillo, we'll use #if ARMA_VERSION &lt; (what we need), then just hijack the cov(trans(X)) call to call out to our internal ccov() function (that will use internal Armadillo functionality, but at least we know that the internal Armadillo code cannot change since we are only 'modifying' old code).  That way we can update our codebase to always call cov(trans(X)) instead, and we can finally ditch our ccov() function when we increase our minimum version enough.
I don't think I'll have time soon to implement  but I don't think we need to hurry---we have a workaround solution for now via &lt;denchmark-link:https://github.com/mlpack/mlpack/pull/1855&gt;#1855&lt;/denchmark-link&gt;
/&lt;denchmark-link:https://github.com/mlpack/mlpack/pull/1856&gt;#1856&lt;/denchmark-link&gt;
.
		</comment>
		<comment id='7' author='conradsnicta' date='2019-04-23T17:30:06Z'>
		Fixed via &lt;denchmark-link:https://github.com/mlpack/mlpack/pull/1855&gt;#1855&lt;/denchmark-link&gt;
.  A patch for  may come eventually but I don't consider it too high priority right now.
		</comment>
	</comments>
</bug>