<bug id='1872' author='gmanlan' open_date='2019-04-23T00:03:04Z' closed_time='2019-11-03T14:32:28Z'>
	<summary>Build scripts for Python bindings are not correct [Windows]</summary>
	<description>
&lt;denchmark-h:h4&gt;Issue description&lt;/denchmark-h&gt;

Attempting to build python bindings on Windows using Visual Studio 2017 fails due to several issues:

When using the flag BUILD_PYTHON_BINDINGS, CMake still shows a warning about not building python bindings, even though the bindings will be generated (not a roadblock).
When the flag BUILD_PYTHON_BINDINGS is ON, the library will be built statically by default. I presume the python bindings require mlpack as a DLL? In that case, -DBUILD_SHARED_LIBS=ON must be enforced.
Line 106 of setup.py refers to an invalid path. E.g.
package_dir={ '': 'C:/mlpack/build/src/mlpack/bindings/python/' }
This path ends in a slash which is not valid in a python package. What is more, I believe this path should be relative. If so, it should be replaced by: package_dir={ '': '.' },
The linker expects to find mlpack and boost libraries in C:\mlpack\build\lib but this directory doesn't exist as a result of an mlpack build. Therefore, the directory needs to be manually created and populated with the following libraries: boost_serialization.lib, libboost_program_options-vc141-mt-1_65_1.lib, libboost_serialization-vc141-mt-1_65_1.lib, mlpack.dll, mlpack.lib
After fixing issues 1 to 4, build will be successful. However, the resulting python package will fail to import mlpack with the following error:
ImportError: cannot import name 'test_python_binding' from 'mlpack.test_python_binding' (C:\mlpack\build\src\mlpack\bindings\python\mlpack\test_python_binding.cp37-win_amd64.pyd)

&lt;denchmark-h:h4&gt;Your environment&lt;/denchmark-h&gt;


version of mlpack: master branch April 19 (3.0.5)
operating system: windows 10 64 bits
compiler: MSVC 14.1
version of dependencies (Boost/Armadillo): boost 1.65.1, armadillo-9.300.2, OpenBLAS.0.2.14.1
any other environment information you think is relevant: miniconda3 (python 3.7.1)

&lt;denchmark-h:h4&gt;Steps to reproduce&lt;/denchmark-h&gt;


Clone master branch
Run cmake including the flags:
-DBUILD_PYTHON_BINDINGS=ON -DBUILD_SHARED_LIBS=ON
Open solution with Visual Studio 2017 and build

&lt;denchmark-h:h4&gt;Expected behavior&lt;/denchmark-h&gt;

To successfully build python bindings AND the egg package to work (be able to import mlpack in python)
&lt;denchmark-h:h4&gt;Actual behavior&lt;/denchmark-h&gt;

Build failures (when workarounds are applied, the resulting package doesn't work)
	</description>
	<comments>
		<comment id='1' author='gmanlan' date='2019-04-27T06:10:59Z'>
		Thanks for the clear bug report.  I definitely want to fix this so I'll do my best to provide patches if you can test them (I don't have a Windows setup :)).  For the first three issues, thanks for pointing them out; I opened &lt;denchmark-link:https://github.com/mlpack/mlpack/pull/1885&gt;#1885&lt;/denchmark-link&gt;
 which I think will fix those parts.  Let me know if they work (I can't test them on Windows).  Some questions:

When the flag BUILD_PYTHON_BINDINGS is ON, the library will be built statically by default. I presume the python bindings require mlpack as a DLL? In that case, -DBUILD_SHARED_LIBS=ON must be enforced.

Ah, hmm, I am not sure, but do you mean that Python bindings fail if we try to link mlpack statically?  I can set BUILD_SHARED_LIBS to ON when BUILD_PYTHON_BINDINGS is ON, but I don't know if that's what users want.

After fixing issues 1 to 4, build will be successful. However, the resulting python package will fail to import mlpack with the following error:
ImportError: cannot import name 'test_python_binding' from 'mlpack.test_python_binding' (C:\mlpack\build\src\mlpack\bindings\python\mlpack\test_python_binding.cp37-win_amd64.pyd)

This is the tricky one that will require a little debugging... there are a couple of things to test:

Were DLLs or .libs actually built in ${CMAKE_BINARY_DIR}/src/mlpack/bindings/python/mlpack/?
Is the file ${CMAKE_BINARY_DIR}/src/mlpack/bindings/python/mlpack/test_python_binding.pyx empty?
Is PYTHONPATH set right?  (My guess is yes based on that the error is talking about test_python_binding.)

I might need to learn more about how Python works on Windows.  But if we can get this working you are a hero because it means this will probably be easy to package on PyPI for Windows, which is something I haven't known how to do.
		</comment>
		<comment id='2' author='gmanlan' date='2019-04-27T06:11:22Z'>
		Oops, accidentally clicked the wrong button...
		</comment>
		<comment id='3' author='gmanlan' date='2019-04-30T03:16:13Z'>
		I pulled your branch and tried the changes. When attempting to build the build_pyx_xx projects I got a linker error for all of them --&gt; fatal error LNK1181: cannot open input file 'mlpack.lib'
I checked the directory build\src\mlpack\bindings\python\mlpack and it contains:
Mode                LastWriteTime         Length Name
&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

-a----        4/29/2019   7:49 PM          97453 adaboost.cpp
-a----        4/29/2019   7:34 PM              0 adaboost.pyx
-a----        4/29/2019   7:51 PM          97503 approx_kfn.cpp
-a----        4/29/2019   7:34 PM              0 approx_kfn.pyx
-a----        4/29/2019   7:27 PM           2829 arma.pxd
-a----        4/29/2019   7:27 PM           2657 arma_numpy.pxd
-a----        4/29/2019   7:27 PM           9232 arma_numpy.pyx
-a----        4/29/2019   7:27 PM           1704 arma_util.hpp
-a----        4/29/2019   7:52 PM          97303 cf.cpp
-a----        4/29/2019   7:35 PM              0 cf.pyx
-a----        4/29/2019   7:27 PM           1657 cli.pxd
-a----        4/29/2019   7:27 PM           4100 cli_util.hpp
-a----        4/29/2019   7:52 PM          97403 dbscan.cpp
-a----        4/29/2019   7:35 PM              0 dbscan.pyx
-a----        4/29/2019   7:52 PM          97603 decision_stump.cpp
-a----        4/29/2019   7:35 PM              0 decision_stump.pyx
-a----        4/29/2019   7:53 PM          97578 decision_tree.cpp
-a----        4/29/2019   7:35 PM              0 decision_tree.pyx
-a----        4/29/2019   7:54 PM          97328 det.cpp
-a----        4/29/2019   7:37 PM              0 det.pyx
-a----        4/29/2019   7:53 PM          97353 emst.cpp
-a----        4/29/2019   7:28 PM              0 emst.pyx
-a----        4/29/2019   7:54 PM          97428 fastmks.cpp
-a----        4/29/2019   7:28 PM              0 fastmks.pyx
(...etc etc for the rest of the algorithms)
If you notice the dump, you will notice the .pyx are empty (0 bytes).
		</comment>
		<comment id='4' author='gmanlan' date='2019-04-30T03:58:20Z'>
		Hmmm, ok.  What happens if you run one of the generate_pyx_* programs that got built?  Or did those also fail to build?
		</comment>
		<comment id='5' author='gmanlan' date='2019-04-30T21:23:45Z'>
		The generate_pyx_* were successfully built and if I run it it prints out the python code.
I believe we need to fix a path to the libraries somewhere in the build scripts (that's I believe what I was doing in point (4)). I figured out that the linker is trying to fetch the libs from /LIBPATH:C:/mlpack/mlpack-python-pr-1885/build but that's not the right location (it should be /build/Release or Debug).
Also it's failing to find boost_serialization.lib, which is not a valid library name for Boost in Windows (at least for the official MSVC package). It should be something like boost_serialization-vc141-mt-1_65_1.lib (note: the -vc*- and -1__ chunks will change from version to version). If I rename this .lib to boost_serialization.lib, then build_pyx_* can successfully build and link.
		</comment>
		<comment id='6' author='gmanlan' date='2019-05-01T02:46:54Z'>
		Going a step beyond, this is what happens when you go ahead and install the generated mlpack python package:

Navigate to \build\src\mlpack\bindings\python
From there run python setup.py install
Once the package is installed, try importing mlpack in python:

&gt;&gt;&gt; import mlpack Traceback (most recent call last): File "&lt;stdin&gt;", line 1, in &lt;module&gt; File "C:\mlpack\mlpack-python-pr-1885\build\src\mlpack\bindings\python\mlpack\__init__.py", line 11, in &lt;module&gt; from .test_python_binding import test_python_binding ModuleNotFoundError: No module named 'mlpack.test_python_binding'
		</comment>
		<comment id='7' author='gmanlan' date='2019-05-13T03:18:05Z'>
		Thanks for the information, and sorry for the slow response---this fell down on the list a little bit.
I think I know what is happening---the generate_pyx_* programs build successfully, but each .pyx is empty.  The fact that those are empty is almost certainly why the import fails (nothing actually gets compiled).  I looked more closely and realized I am assuming that generate_pyx_* is in ${CMAKE_BINARY_DIR}/bin/, which is not true on Windows.  I rewrote it to use CMake generator expressions, which weren't something I knew about, and now it should get the actual path of those programs right.
I also had to use CMake generator expressions for getting the library paths right for mlpack (and some modification was needed to get the Boost serialization library path correctly).  It seems to work for Linux.  Let me know what happens if you test it...
		</comment>
		<comment id='8' author='gmanlan' date='2019-05-13T16:06:32Z'>
		That's right. Last week I said I was going to update here with my findings but you beat me to it. The ${CMAKE_BINARY_DIR}/bin/ issue was one and the other is a missing openblas reference somewhere, but let me test the new version and report back, thanks!
		</comment>
		<comment id='9' author='gmanlan' date='2019-05-13T20:46:54Z'>
		So I tried the new changes but these errors are blocking the way:
&lt;denchmark-code&gt;Configuring setup.py...
3&gt;CUSTOMBUILD : CMake error : Error processing file: C:/mlpack/mlpack-python-windows-fix/src/mlpack/bindings/python/ConfigureSetup.cmake
&lt;/denchmark-code&gt;

And then...
&lt;denchmark-code&gt;Building Cython binding knn.so...
5&gt;C:\miniconda3\python.exe: can't open file 'C:/mlpack/mlpack-python-windows-fix/build/src/mlpack/bindings/python/setup.py': [Errno 2] No such file or directory
&lt;/denchmark-code&gt;

I noticed that setup.py is not being generated/copied into any directory.
		</comment>
		<comment id='10' author='gmanlan' date='2019-05-13T20:48:46Z'>
		Ah, sorry, forgot to check in a file.  &lt;denchmark-link:https://github.com/mlpack/mlpack/commit/ed6e3f57b600e70a64dc398723a49f49a60570d5&gt;ed6e3f5&lt;/denchmark-link&gt;
 should fix it---sorry about that.
		</comment>
		<comment id='11' author='gmanlan' date='2019-05-14T02:55:38Z'>
		Ok we are getting close, but still facing some issues. Now it seems the linker is unable to find the boost libs. Also the CUSTOMBUILD warnings (or errors?) are unexpected as this is a static build.
&lt;denchmark-code&gt;LINK : fatal error LNK1104: cannot open file 'libboost_serialization-vc141-mt-1_65_1.lib'
92&gt;C:\miniconda3\lib\site-packages\Cython\Compiler\Main.py:367: FutureWarning: Cython directive 'language_level' not set, using 2 for now (Py2). This will change in a later release! File: C:\mlpack\mlpack-python-windows-fix\build\src\mlpack\bindings\python\mlpack\kde.pyx
92&gt;  tree = Parsing.p_module(s, pxd, full_module_name)
92&gt;CUSTOMBUILD : warning : no library file corresponding to 'C:/mlpack/mlpack-python-windows-fix/build/Release/mlpack.lib' found (skipping)
92&gt;CUSTOMBUILD : warning : no library file corresponding to 'optimized C:/boost_1_65_1/lib64-msvc-14.1/boost_serialization-vc141-mt-1_65_1.lib debug C:/boost_1_65_1/lib64-msvc-14.1/boost_serialization-vc141-mt-gd-1_65_1.lib' found (skipping)
92&gt;CUSTOMBUILD : error : command 'C:\\Program Files (x86)\\Microsoft Visual Studio\\2017\\Professional\\VC\\Tools\\MSVC\\14.16.27023\\bin\\HostX86\\x64\\link.exe' failed with exit status 1104
92&gt;Done building project "build_pyx_kde.vcxproj" -- FAILED.
&lt;/denchmark-code&gt;

		</comment>
		<comment id='12' author='gmanlan' date='2019-05-15T01:21:31Z'>
		Oh, my, in digging into this I kind of stumbled upon some ugliness that I might have to work around in setuptools.  Do you have the compilation command that setuptools calls for kde.pyx?  Specifically I want to see how it is linking against libraries.
		</comment>
		<comment id='13' author='gmanlan' date='2019-05-15T15:49:30Z'>
		Yes, this is the link command, which I believe may be missing some of the lib paths specified at the beginning with cmake:
C:\Program Files (x86)\Microsoft Visual Studio\2017\Professional\VC\Tools\MSVC\14.16.27023\bin\HostX86\x64\link.exe /nologo /INCREMENTAL:NO /LTCG /DLL /MANIFEST:EMBED,ID=2 /MANIFESTUAC:NO /LIBPATH:C:\miniconda3\libs /LIBPATH:C:\miniconda3\PCbuild\amd64 "/LIBPATH:C:\Program Files (x86)\Microsoft Visual Studio\2017\Professional\VC\Tools\MSVC\14.16.27023\ATLMFC\lib\x64" "/LIBPATH:C:\Program Files (x86)\Microsoft Visual Studio\2017\Professional\VC\Tools\MSVC\14.16.27023\lib\x64" "/LIBPATH:C:\Program Files (x86)\Windows Kits\NETFXSDK\4.6.1\lib\um\x64" "/LIBPATH:C:\Program Files (x86)\Windows Kits\10\lib\10.0.17763.0\ucrt\x64" "/LIBPATH:C:\Program Files (x86)\Windows Kits\10\lib\10.0.17763.0\um\x64" "/LIBPATH:C:\Program Files (x86)\Microsoft Visual Studio\2017\Professional\VC\Tools\MSVC\14.16.27023\lib\x64" "/LIBPATH:C:\Program Files (x86)\Microsoft Visual Studio\2017\Professional\VC\Tools\MSVC\14.16.27023\atlmfc\lib\x64" "/LIBPATH:C:\Program Files (x86)\Microsoft Visual Studio\2017\Professional\VC\Auxiliary\VS\lib\x64" "/LIBPATH:C:\Program Files (x86)\Windows Kits\10\lib\10.0.17134.0\ucrt\x64" "/LIBPATH:C:\Program Files (x86)\Microsoft Visual Studio\2017\Professional\VC\Auxiliary\VS\UnitTest\lib" "/LIBPATH:C:\Program Files (x86)\Windows Kits\10\lib\10.0.17134.0\um\x64" "/LIBPATH:C:\Program Files (x86)\Windows Kits\NETFXSDK\4.6.1\lib\um\x64" "/LIBPATH:C:\Program Files (x86)\Windows Kits\NETFXSDK\4.6.1\Lib\um\x64" /EXPORT:PyInit_kde build\temp.win-amd64-3.7\Release\mlpack\kde.obj /OUT:build\lib.win-amd64-3.7\mlpack\kde.cp37-win_amd64.pyd /IMPLIB:build\temp.win-amd64-3.7\Release\mlpack\kde.cp37-win_amd64.lib -openmp
		</comment>
		<comment id='14' author='gmanlan' date='2019-05-16T23:35:17Z'>
		Thanks for the output---it was helpful. I tried pushing another update to &lt;denchmark-link:https://github.com/mlpack/mlpack/pull/1885&gt;#1885&lt;/denchmark-link&gt;
; can you try that?  I know how to make CMake link against the right stuff, but figuring out how to pass that to setuptools in a platform-independent way I'm less sure about...
		</comment>
		<comment id='15' author='gmanlan' date='2019-05-17T02:12:02Z'>
		Ok, just tried - now I can see some of the libs properly specified, although there is an empty LIBPATH statement (the second one in the list) which makes the LINK fail:

LINK : fatal error LNK1146: no argument specified with option '/LIBPATH:'

C:\Program Files (x86)\Microsoft Visual Studio\2017\Professional\VC\Tools\MSVC\14.16.27023\bin\HostX86\x64\link.exe /nologo /INCREMENTAL:NO /LTCG /DLL /MANIFEST:EMBED,ID=2 /MANIFESTUAC:NO /LIBPATH:C:/mlpack/mlpack-python-windows-fix/build/Release /LIBPATH: /LIBPATH:C:\miniconda3\libs /LIBPATH:C:\miniconda3\PCbuild\amd64 "/LIBPATH:C:\Program Files (x86)\Microsoft Visual Studio\2017\Professional\VC\Tools\MSVC\14.16.27023\ATLMFC\lib\x64" "/LIBPATH:C:\Program Files (x86)\Microsoft Visual Studio\2017\Professional\VC\Tools\MSVC\14.16.27023\lib\x64" "/LIBPATH:C:\Program Files (x86)\Windows Kits\NETFXSDK\4.6.1\lib\um\x64" "/LIBPATH:C:\Program Files (x86)\Windows Kits\10\lib\10.0.17763.0\ucrt\x64" "/LIBPATH:C:\Program Files (x86)\Windows Kits\10\lib\10.0.17763.0\um\x64" "/LIBPATH:C:\Program Files (x86)\Microsoft Visual Studio\2017\Professional\VC\Tools\MSVC\14.16.27023\lib\x64" "/LIBPATH:C:\Program Files (x86)\Microsoft Visual Studio\2017\Professional\VC\Tools\MSVC\14.16.27023\atlmfc\lib\x64" "/LIBPATH:C:\Program Files (x86)\Microsoft Visual Studio\2017\Professional\VC\Auxiliary\VS\lib\x64" "/LIBPATH:C:\Program Files (x86)\Windows Kits\10\lib\10.0.17134.0\ucrt\x64" "/LIBPATH:C:\Program Files (x86)\Microsoft Visual Studio\2017\Professional\VC\Auxiliary\VS\UnitTest\lib" "/LIBPATH:C:\Program Files (x86)\Windows Kits\10\lib\10.0.17134.0\um\x64" "/LIBPATH:C:\Program Files (x86)\Windows Kits\NETFXSDK\4.6.1\lib\um\x64" "/LIBPATH:C:\Program Files (x86)\Windows Kits\NETFXSDK\4.6.1\Lib\um\x64" mlpack.lib boost_serialization-vc141-mt-gd-1_65_1.lib /EXPORT:PyInit_kde build\temp.win-amd64-3.7\Release\mlpack\kde.obj /OUT:build\lib.win-amd64-3.7\mlpack\kde.cp37-win_amd64.pyd /IMPLIB:build\temp.win-amd64-3.7\Release\mlpack\kde.cp37-win_amd64.lib -openmp
		</comment>
		<comment id='16' author='gmanlan' date='2019-05-17T02:36:43Z'>
		Okay... I pushed another commit (&lt;denchmark-link:https://github.com/mlpack/mlpack/commit/4906722f0e3e7d5c456d5c6edbd7705097424eef&gt;4906722&lt;/denchmark-link&gt;
) which should strip the empty library directory.  I think it will fix the issue... or at least get us to a new error. :)
		</comment>
		<comment id='17' author='gmanlan' date='2019-05-17T02:38:38Z'>
		Ack, hang on, spoke too soon---one more thing to fix.  Just a second...
		</comment>
		<comment id='18' author='gmanlan' date='2019-05-17T02:40:21Z'>
		Ok, better now.  I realized the Boost link directories were not being properly passed.  This should be fixed in &lt;denchmark-link:https://github.com/mlpack/mlpack/commit/a44fdfe8c608b6afe52d11963c093748101f966c&gt;a44fdfe&lt;/denchmark-link&gt;
.  So I think it should link right... with any luck. :)
		</comment>
		<comment id='19' author='gmanlan' date='2019-05-17T16:27:27Z'>
		Uhm, it seems the library_dirs type is not a list of strings:
Traceback (most recent call last):

File "C:/mlpack/mlpack-python-windows-fix/build/src/mlpack/bindings/python/setup.py", line 121, in 
"'library_dirs' (if supplied) must be a list of strings")
TypeError: 'library_dirs' (if supplied) must be a list of strings
C:\Program Files (x86)\Microsoft Visual Studio\2017\Professional\Common7\IDE\VC\VCTargets\Microsoft.CppCommon.targets(209,5): error MSB6006: "cmd.exe" exited with code 1.
Done building project "build_pyx_kde.vcxproj" -- FAILED.

I have tried manually removing the filter() and it seems to work (although my setup.py is being re-generated with every build so I can't be sure it will work for all the pyx).
		</comment>
		<comment id='20' author='gmanlan' date='2019-06-01T05:13:14Z'>
		&lt;denchmark-link:https://github.com/gmanlan&gt;@gmanlan&lt;/denchmark-link&gt;
 sorry for the slow response on this one---a bunch of traveling for me in the past two weeks.  Anyway I think I pushed a fix; when the library dirs are empty, we have to pass  not .  So, I'm interested to know what happens now. :)
		</comment>
		<comment id='21' author='gmanlan' date='2019-06-06T17:28:47Z'>
		&lt;denchmark-link:https://github.com/rcurtin&gt;@rcurtin&lt;/denchmark-link&gt;
, just tried again but it seems the error remains:
File "C:/mlpack/mlpack-python-windows-fix/build/src/mlpack/bindings/python/setup.py", line 125 TypeError: 'library_dirs' (if supplied) must be a list of strings
May it probably be the filter()?
&lt;denchmark-code&gt;library_dirs = filter(None, ['C:/mlpack/mlpack-python-windows-fix/build/Release'] +
    'C:/boost_1_65_1/lib64-msvc-14.1'.split(' '))
if library_dirs == []:
  library_dirs = None
&lt;/denchmark-code&gt;

		</comment>
		<comment id='22' author='gmanlan' date='2019-06-07T00:56:45Z'>
		Color me confused---when I run
&lt;denchmark-code&gt;library_dirs = filter(None, ['C:/mlpack/mlpack-python-windows-fix/build/Release'] +
    'C:/boost_1_65_1/lib64-msvc-14.1'.split(' '))
&lt;/denchmark-code&gt;

then it seems that what is returned is a list of strings, just like setuptools needs.
Anyway, let's try it again just without that filtering code, since on your system we're only passing in a couple directories and I can see there are no empty directories there.  I removed the filter in 87e174b0c.
		</comment>
		<comment id='23' author='gmanlan' date='2019-06-07T17:00:10Z'>
		Ok, now we have LINK errors, which I believe are caused because we are missing LAPACK somewhere?
&lt;denchmark-code&gt;mlpack.lib(adaboost_model.obj) : error LNK2001: unresolved external symbol ddot_
mlpack.lib(adaboost_model.obj) : error LNK2001: unresolved external symbol dgemv_
mlpack.lib(adaboost_model.obj) : error LNK2001: unresolved external symbol dgemm_
mlpack.lib(adaboost_model.obj) : error LNK2001: unresolved external symbol dsyrk_
mlpack.lib(adaboost_model.obj) : error LNK2001: unresolved external symbol dgesv_
mlpack.lib(adaboost_model.obj) : error LNK2001: unresolved external symbol dposv_
build\lib.win-amd64-3.7\mlpack\adaboost.cp37-win_amd64.pyd : fatal error LNK1120: 6 unresolved externals
&lt;/denchmark-code&gt;

And also some encoding issues (I think there is an unexpected character in this file):
mlpack\kernel_pca.pyx:79:24: Decoding error, missing or incorrect coding=&lt;encoding-name&gt; at top of source (cannot decode with encoding 'utf-8': invalid start byte)
		</comment>
		<comment id='24' author='gmanlan' date='2019-07-19T16:24:00Z'>
		Great! Thanks for the update &lt;denchmark-link:https://github.com/rcurtin&gt;@rcurtin&lt;/denchmark-link&gt;
. I think it would depend on how you include Boost into the project, as there are different ways of doing so with VS. Looking forward to the next version!
		</comment>
		<comment id='25' author='gmanlan' date='2019-08-06T14:59:17Z'>
		I have an update---I've been working on this in the background for a couple weeks now.  Progress is a little slow because it seems Visual Studio builds singlethreadedly which is pretty slow.
I've gotten the Python bindings to build successfully and import, so import mlpack does successfully work.  This required some amount of wrangling having to do with static and dynamic linking that I still have yet to work out.  I noticed that to get the build working right, I had to drop all the DLLs that mlpack links against in the directories for the built programs like generate_pyx_cf, etc., and also in build/src/mlpack/bindings/python/mlpack/.  I think this can be resolved if static linking is always used, but I haven't figured out how to get CMake to do that all the way through yet.
In any case, I do have something seeming to work, but the only problem is, it crashes Python.  I haven't yet determined the cause of the crash because I haven't figured out how to get good debugging output, but I am continuing to dig.  It looks like some memory is getting freed twice for a reason I don't yet understand.
Anyway, I'll keep working at it, but I wanted to provide an update. :)
		</comment>
		<comment id='26' author='gmanlan' date='2019-08-15T16:11:56Z'>
		Another update---
I've been continuing to dig into what's going on here and it seems like the crash in Python has to do with the way memory is being passed back and forth between C++ and Python.  My theory (which I have no validation for and am not sure how to validate) is that on Linux and OS X, the memory allocators used in C++ and Python are the same, meaning I can allocate memory in Python and free it in C++ and vice versa, but this seems to not be the case on Windows.
What I am going to try as time allows is to rewrite the memory handling such that C++ memory is never "owned" by Python and vice versa, but this is likely to impact the efficiency of the bindings.  That said, "bindings working but somewhat slower because of copies" is still better than "bindings not working at all". :)
		</comment>
		<comment id='27' author='gmanlan' date='2019-08-15T17:24:19Z'>
		Hey, thanks for the update. That sounds like a big one, I'm wondering how this was working before on Windows. Looking forward to the next iteration!
		</comment>
		<comment id='28' author='gmanlan' date='2019-08-23T03:12:53Z'>
		Ok, pretty happy to provide this update.  I seem to have the Python bindings successfully working from Windows, when I don't allow any passing of memory pointers back and forth from Python to C++.  This means there are more copies than we might hope for, but "a bit slow" is better than "doesn't work".
Next I need to do some serious cleanups and fix some tests that don't work the way I hoped on Windows, but I believe I have the hard part of this (mostly?) figured out, assuming that I don't soon find that something was far more complicated than I thought.  Once I get everything cleaned up, I'll open a PR and we can see if it works for both of us. :)
		</comment>
		<comment id='29' author='gmanlan' date='2019-08-23T19:08:03Z'>
		
Ok, pretty happy to provide this update. I seem to have the Python bindings successfully working from Windows, when I don't allow any passing of memory pointers back and forth from Python to C++. This means there are more copies than we might hope for, but "a bit slow" is better than "doesn't work".
Next I need to do some serious cleanups and fix some tests that don't work the way I hoped on Windows, but I believe I have the hard part of this (mostly?) figured out, assuming that I don't soon find that something was far more complicated than I thought. Once I get everything cleaned up, I'll open a PR and we can see if it works for both of us. :)

Can't we do something like, let  binding behave as it is in Linux and os x , but it should behave differently when it is windows , since i would not like it to become slow :)
		</comment>
		<comment id='30' author='gmanlan' date='2019-08-23T19:12:40Z'>
		Agreed, I was planning on different behavior for each system.
		</comment>
		<comment id='31' author='gmanlan' date='2019-08-23T22:44:02Z'>
		That's awesome &lt;denchmark-link:https://github.com/rcurtin&gt;@rcurtin&lt;/denchmark-link&gt;
. I look forward to testing the PR!
		</comment>
		<comment id='32' author='gmanlan' date='2019-08-29T03:10:40Z'>
		I can't believe I am posting this.  I thought it would never happen.
&lt;denchmark-link:https://user-images.githubusercontent.com/1845039/63907323-fe722580-c9e8-11e9-8f22-e4a7d9242457.png&gt;&lt;/denchmark-link&gt;

It'll take me a little while to figure out all the changes I made and clean it up for a PR, but, this is a nice big step forward.  (The next question is whether or not it will work on anyone else's system!)
		</comment>
		<comment id='33' author='gmanlan' date='2019-08-31T15:59:07Z'>
		&lt;denchmark-link:https://github.com/gmanlan&gt;@gmanlan&lt;/denchmark-link&gt;
 I pushed some changes to &lt;denchmark-link:https://github.com/mlpack/mlpack/pull/1885&gt;#1885&lt;/denchmark-link&gt;
---do you want to try checking them out and seeing if the Python bindings now build on your system?  There may still be some little things I overlooked, but at the very least, this code works on my system, so it shouldn't be  hard to figure out how to make it run on yours if it doesn't already. :)
		</comment>
		<comment id='34' author='gmanlan' date='2019-09-09T17:49:10Z'>
		&lt;denchmark-link:https://github.com/rcurtin&gt;@rcurtin&lt;/denchmark-link&gt;
 I have pulled the last changes and attempted to use it. On the positive side, I can build perfectly fine without issues. Unfortunately after installing the python package on Windows, I'm back to the initial errors (from .cf import cf ImportError: cannot import name 'cf' from 'mlpack.cf').
These are the steps I performed:

Run cmake, build python.vcxproj in Visual Studio (Release/x64)
========== Build: 96 succeeded, 0 failed, 0 up-to-date, 0 skipped ==========
Navigate to C:\mlpack\mlpack-python-windows-fix\build\src\mlpack\bindings\python and run python setup.py install
Add Boost and OpenBLAS DLL dirs to the PATH
Start python and run "import mlpack"

&lt;denchmark-code&gt;&gt;&gt;&gt; import mlpack
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "C:\mlpack\mlpack-python-windows-fix\build\src\mlpack\bindings\python\mlpack\__init__.py", line 14, in &lt;module&gt;
    from .cf import cf
ImportError: cannot import name 'cf' from 'mlpack.cf' (C:\mlpack\mlpack-python-windows-fix\build\src\mlpack\bindings\python\mlpack\cf.cp37-win_amd64.pyd)
&lt;/denchmark-code&gt;

Let me know if you did something different when installing/using the package. Thanks!
		</comment>
		<comment id='35' author='gmanlan' date='2019-09-09T17:51:11Z'>
		Hmmm, ok.  Can you tell me if the file build/src/mlpack/bindings/python/cf.pyx has anything in it?
		</comment>
		<comment id='36' author='gmanlan' date='2019-09-09T18:13:34Z'>
		Good point - cf.pyx is empty (0 bytes), as well as lmnn.pyx. All the others are ok.
		</comment>
		<comment id='37' author='gmanlan' date='2019-09-09T18:17:01Z'>
		Hmm, interesting.  I seem to remember encountering this in my own experimentation but I thought I had it fixed in the PR.  In any case, can you tell me what happens if you run the program generate_pyx_cf?  I think, in your setup, that should be in C:\mlpack\mlpack-python-windows-fix\build\Debug\ (or Release\).  My guess is that this will have some problem.  (The same for generate_pyx_lmnn too.)
		</comment>
		<comment id='38' author='gmanlan' date='2019-09-09T18:18:38Z'>
		By the way, when I ran these programs locally in my build, I had to make sure all the necessary DLLs were in place, and I ran it from either a command prompt or PowerShell so that I could see the output (instead of the window just closing).
		</comment>
		<comment id='39' author='gmanlan' date='2019-09-09T20:21:56Z'>
		I think both are working fine (I can see the python code being generated, without errors). You can see the output of generate_pyx_cf.exe in the attached file.

&lt;denchmark-link:https://github.com/mlpack/mlpack/files/3592461/output.txt&gt;output.txt&lt;/denchmark-link&gt;

		</comment>
		<comment id='40' author='gmanlan' date='2019-09-09T21:40:45Z'>
		Well now that is strange.  generate_pyx_cf.exe worked fine, but the generated file was still empty.  Let me try to reproduce this on a completely clean build of the Python fixes branch tonight.
You might be able to get everything to build by "rebuild"ing the build_pyx_cf target, then the python target.  If cf.pyx isn't empty in build/src/mlpack/bindings/python/mlpack/, then everything should work, I think.
		</comment>
		<comment id='41' author='gmanlan' date='2019-09-10T17:45:50Z'>
		I've been debugging but I see nothing wrong... still, the pyx is empty. Do you know from where the .exe is being called? I can't find it in the VS logs.
		</comment>
		<comment id='42' author='gmanlan' date='2019-09-15T21:09:10Z'>
		I managed to reproduce it and nail down what the issue is.  It so happens that cf and lmnn are the only two bindings that require a direct linkage against libopenblas.dll.a (others call functions that are part of mlpack.dll which is in turns linked against OpenBLAS).  This means that when libopenblas.dll.a is not in the runtime path when generate_pyx_cf is called, the program fails to start, and my CMake scripts are not picking up this failure (not 100% sure why yet).
A workaround is to drop libopenblas.dll.a in the directory containing generate_pyx_cf and generate_pyx_lmnn and rebuild the python target.
I'll be working on figuring out how to get a clean solution for this and let you know what I figure out.
		</comment>
		<comment id='43' author='gmanlan' date='2019-09-16T16:35:36Z'>
		Ah, interesting. I'm wondering why the command C:\mlpack\mlpack-python-windows-fix\build\Release&gt;generate_pyx_cf.exe &gt; output.txt would be able to run then, considering the PATH is the same for both the command prompt and VS. When I run the exe from the cmd prompt, it only requires the dll, but again, VS is sometimes very mysterious.
		</comment>
		<comment id='44' author='gmanlan' date='2019-09-25T03:56:04Z'>
		That's strange, but I agree, Visual Studio can be pretty mysterious.  Same with CMake.  I spent a while digging into it and I concluded that the safest way I can fix the issue is simply to copy all the necessary DLLs to the right place.  So, the latest commit that I pushed adds the CMake variables DLL_COPY_LIBS and DLL_COPY_DIRS that can be specified, containing any additional directories of things that should be copied.
In the case of the Boost libraries and specifically OpenBLAS installed via nuget (where the runtime libraries are in the OpenBLAS directory's bin/x64/ directory), these are automatically copied at configure time, so there is no need to specify them.
I'll push a commit tomorrow with updated documentation, but, the commit I just pushed to &lt;denchmark-link:https://github.com/mlpack/mlpack/pull/1885&gt;#1885&lt;/denchmark-link&gt;
 at least I think should make the Python bindings compile and run successfully for you also.  Sorry again for the slow response---the compile/test cycles are quite slow because I'm running in an underpowered VM, so it's basically one or two compile attempts per night. :)
		</comment>
		<comment id='45' author='gmanlan' date='2019-09-25T20:19:54Z'>
		Hey, good news. I have tried the latest &lt;denchmark-link:https://github.com/mlpack/mlpack/pull/1885&gt;#1885&lt;/denchmark-link&gt;
 and the windows python bindings are building and running. To check if it's properly working, I adapted the example from &lt;denchmark-link:https://www.mlpack.org/doc/mlpack-3.1.1/doxygen/python_quickstart.html&gt;https://www.mlpack.org/doc/mlpack-3.1.1/doxygen/python_quickstart.html&lt;/denchmark-link&gt;
 and it seems to work just fine. Well done! We may want to properly document how to build this, and even better in the future, auto-generate a windows package to be installed using pip.
My extremely manual build steps are:

Run cmake
Open mlpack.sln, build the project 'python' in Release x64
Navigate to \build\src\mlpack\bindings\python and run 'python setup.py install'
Add Boost and OpenBLAS DLL dirs to the PATH
Run python and import mlpack

		</comment>
		<comment id='46' author='gmanlan' date='2019-09-27T00:30:53Z'>
		Definitely, the &lt;denchmark-link:https://github.com/mlpack/mlpack-wheels&gt;https://github.com/mlpack/mlpack-wheels&lt;/denchmark-link&gt;
 repository is ready to try and attempt some Windows builds when everything is merged.  I'm not actually sure what happens with the Python bindings on Windows when I make the "INSTALL" target.  I'm running now to find out... :)
		</comment>
		<comment id='47' author='gmanlan' date='2019-10-10T00:54:49Z'>
		Ok, I fought with it for a while and realized I was setting  incorrectly in my configuration.  I did get mlpack to install but there was some issue with the Python bindings.  However I pushed some minor changes in &lt;denchmark-link:https://github.com/mlpack/mlpack/commit/3bbec9743e0bdc44e3996a7d0d8f290aacf9dcdf&gt;3bbec97&lt;/denchmark-link&gt;
 that add some extra paranoia to CMake.  Personally, I think the PR is ready, and once we merge it it will be a big step forward.  I'll comment more in &lt;denchmark-link:https://github.com/mlpack/mlpack/pull/1885&gt;#1885&lt;/denchmark-link&gt;
.
		</comment>
		<comment id='48' author='gmanlan' date='2019-10-10T16:18:39Z'>
		This is awesome &lt;denchmark-link:https://github.com/rcurtin&gt;@rcurtin&lt;/denchmark-link&gt;
! I left a minor comment after reviewing. Very excited to get this integrated soon!
		</comment>
		<comment id='49' author='gmanlan' date='2019-11-03T14:32:28Z'>
		With &lt;denchmark-link:https://github.com/mlpack/mlpack/pull/1885&gt;#1885&lt;/denchmark-link&gt;
 merged, I think that we can close this. :)  Next I will move towards getting mlpack Python bindings packaged for PyPI on Windows.
		</comment>
	</comments>
</bug>