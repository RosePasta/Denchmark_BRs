<bug id='431' author='johnlees' open_date='2015-04-14T15:11:05Z' closed_time='2015-04-21T08:32:23Z'>
	<summary>Segmentation fault with armadillo v5 and up</summary>
	<description>
As detailed here:
&lt;denchmark-link:http://arma.sourceforge.net/docs.html#uword&gt;http://arma.sourceforge.net/docs.html#uword&lt;/denchmark-link&gt;

Armadillo uses 64 bit word length by default when using a c++11 capable compiler. When used with mlpack this leads to errors such as
&lt;denchmark-code&gt;error: arma::memory::acquire(): out of memory

terminate called after throwing an instance of 'std::bad_alloc'
  what():  std::bad_alloc
&lt;/denchmark-code&gt;

I've tried uncommenting the relevant line in include/armadillo_bits/config.hpp, and using -DARMA_64BIT_WORD when running cmake with mlpack. However when I link this version of mlpack my application immediately segfaults:
&lt;denchmark-code&gt;Program received signal SIGSEGV, Segmentation fault.
0x00007ffff791f905 in long double boost::math::lanczos::lanczos17m64::lanczos_sum_expG_scaled&lt;long double&gt;(long double const&amp;) ()
from /nfs/users/nfs_j/jl11/installations/pangwas/mlpack/build_64/lib/libmlpack.so.1
(gdb) bt
#0  0x00007ffff791f905 in long double boost::math::lanczos::lanczos17m64::lanczos_sum_expG_scaled&lt;long double&gt;(long double const&amp;) ()
from /nfs/users/nfs_j/jl11/installations/pangwas/mlpack/build_64/lib/libmlpack.so.1
#1  0x00007ffff791133f in _GLOBAL__sub_I_discrete_distribution.cpp () from /nfs/users/nfs_j/jl11/installations/pangwas/mlpack/build_64/lib/libmlpack.so.1
#2  0x00007ffff7de9306 in ?? () from /lib64/ld-linux-x86-64.so.2
&lt;/denchmark-code&gt;

Could you provide advice on how to compile and link mlpack correctly when using the newer versions of Armadillo?
Thanks!
	</description>
	<comments>
		<comment id='1' author='johnlees' date='2015-04-14T21:44:37Z'>
		First things first, I disabled the CMake warning for ARMA_64BIT_WORD in &lt;denchmark-link:https://github.com/mlpack/mlpack/commit/ea0d81f60e7d6eeb0902dba4e8de9a857c5ef56d&gt;ea0d81f&lt;/denchmark-link&gt;
.
Can you give me more information on what you've done?
My own investigation uncovered a bug in Armadillo 5.000.0, where the symbol arma_cxx11_rng_instance isn't properly being compiled into libarmadillo.so.  I can compile libmlpack.so successfully, but trying to compile anything against libmlpack.so that requires arma_cxx11_rng_instance (so, anything that uses random numbers from Armadillo) gives me something of the form
&lt;denchmark-code&gt;/tmp/ccBf4Ouc.o: In function `TLS wrapper function for arma::arma_rng_cxx11_instance':
test.cpp:(.text._ZTWN4arma23arma_rng_cxx11_instanceE[_ZTWN4arma23arma_rng_cxx11_instanceE]+0x5): undefined reference to `TLS init function for arma::arma_rng_cxx11_instance'
test.cpp:(.text._ZTWN4arma23arma_rng_cxx11_instanceE[_ZTWN4arma23arma_rng_cxx11_instanceE]+0x15): undefined reference to `arma::arma_rng_cxx11_instance'
collect2: error: ld returned 1 exit status
&lt;/denchmark-code&gt;

I reported the problem upstream, and there will probably be a fix in the next day or so (5.000.1 probably?)
I'd expect you to be encountering the same problem too, but the fact that you aren't leads me to suspect that you are compiling against Armadillo 5.000.0 but linking against an older version of libarmadillo.so (which does not have ARMA_64BIT_WORD enabled) and thus as soon your code calls something internal to libarmadillo.so, stack mangling and other assorted disasters occur.  But... the backtrace you provide is from boost, not from Armadillo, so... could I get more information?  What OS is this on?
		</comment>
		<comment id='2' author='johnlees' date='2015-04-15T03:04:51Z'>
		I also meet segmentation fault when executing allknn as:
&lt;denchmark-code&gt;$ allknn -r grids.csv -q point.csv -n neighbors.csv -d distances.csv -k 1 -v
[INFO ] Loading 'grids.csv' as CSV data.  Size is 612942 x 3.
[INFO ] Loaded reference data from 'grids.csv' (612942 x 3).
[INFO ] Loading 'point.csv' as CSV data.  Size is 1 x 3.
[INFO ] Loaded query data from 'point.csv' (1 x 3).
[INFO ] Building reference tree...
[INFO ] Loaded query data from 'point.csv' (1 x 3).
[INFO ] Building query tree...
[INFO ] Tree built.
[INFO ] Computing 1 nearest neighbors...
Segmentation fault: 11
&lt;/denchmark-code&gt;

I just updated armadillo to 5.000.0. I don't know if this is relevant. I will try to degrade armadillo to 4.650.4 later, and test again.
Edit: This is not related to armadillo version. I used lldb to get error location:
&lt;denchmark-code&gt;Process 59011 stopped
* thread #1: tid = 0x15ffa5, 0x000000010001c9e7 allknn`double mlpack::bound::HRectBound&lt;2, true&gt;::MinDistance&lt;arma::subview_col&lt;double&gt; &gt;(arma::subview_col&lt;double&gt; const&amp;, boost::enable_if&lt;IsVector&lt;arma::subview_col&lt;double&gt; &gt;, void&gt;*) const + 135, queue = 'com.apple.main-thread', stop reason = EXC_BAD_ACCESS (code=1, address=0x7fff5fc84000)
    frame #0: 0x000000010001c9e7 allknn`double mlpack::bound::HRectBound&lt;2, true&gt;::MinDistance&lt;arma::subview_col&lt;double&gt; &gt;(arma::subview_col&lt;double&gt; const&amp;, boost::enable_if&lt;IsVector&lt;arma::subview_col&lt;double&gt; &gt;, void&gt;*) const + 135
allknn`double mlpack::bound::HRectBound&lt;2, true&gt;::MinDistance&lt;arma::subview_col&lt;double&gt; &gt;:
-&gt;  0x10001c9e7 &lt;+135&gt;: movsd  (%rdx,%rdi,8), %xmm3
    0x10001c9ec &lt;+140&gt;: subsd  %xmm3, %xmm2
    0x10001c9f0 &lt;+144&gt;: subsd  (%rcx), %xmm3
    0x10001c9f4 &lt;+148&gt;: movapd %xmm2, %xmm4
&lt;/denchmark-code&gt;

		</comment>
		<comment id='3' author='johnlees' date='2015-04-15T09:46:58Z'>
		Ok, here's some more information about what I've done.
Firstly I have removed any currently existing versions of armadillo or mlpack anywhere on the system (which is Ubuntu 12.04)
I install arma 5.000.0 with
&lt;denchmark-code&gt;cmake -DCMAKE_CXX_COMPILER_ID=Intel -DCMAKE_CXX_COMPILER=icpc -DCMAKE_CXX_FLAGS=-O3 .
make
make install DESTDIR=~/software
&lt;/denchmark-code&gt;

I used your update to CMakeLists.txt as referenced above, then installed mlpack with
&lt;denchmark-code&gt;cmake -DCMAKE_INSTALL_PREFIX:PATH=~/software -DBOOST_ROOT=~/software ../
make
make install
&lt;/denchmark-code&gt;

which didn't warn about 64 bit words not being used
I then compile my application with
&lt;denchmark-code&gt;g++ -Wall -g -O0 -std=c++11 -I${HOME}/software/include -I/usr/include/libxml2 -c -o app.o app.cpp
&lt;/denchmark-code&gt;

and link with
&lt;denchmark-code&gt;g++ -Wall -g -O0 -std=c++11 -I${HOME}/software/include -I/usr/include/libxml2 app.o -L${HOME}/software/lib -lmlpack -larmadillo -lboost_program_options -lblas -llapack -lm -o app
&lt;/denchmark-code&gt;

however I still get a conflict due to word length
&lt;denchmark-code&gt;error: arma::memory::acquire(): out of memory

terminate called after throwing an instance of 'std::bad_alloc'
what():  std::bad_alloc

Program received signal SIGABRT, Aborted.
0x00007ffff57300d5 in raise () from /lib/x86_64-linux-gnu/libc.so.6

(gdb) bt
#0  0x00007ffff57300d5 in raise () from /lib/x86_64-linux-gnu/libc.so.6
#1  0x00007ffff573383b in abort () from /lib/x86_64-linux-gnu/libc.so.6
#2  0x00007ffff602b2d5 in __gnu_cxx::__verbose_terminate_handler () at ../../.././libstdc++-v3/libsupc++/vterminate.cc:95
#3  0x00007ffff6029336 in __cxxabiv1::__terminate (handler=&lt;optimised out&gt;) at ../../.././libstdc++-v3/libsupc++/eh_terminate.cc:47
#4  0x00007ffff6029381 in std::terminate () at ../../.././libstdc++-v3/libsupc++/eh_terminate.cc:57
#5  0x00007ffff6029598 in __cxxabiv1::__cxa_throw (obj=0x7fffec000940, tinfo=0x6bf600 &lt;typeinfo for std::bad_alloc@@GLIBCXX_3.4&gt;,
dest=0x416260 &lt;std::bad_alloc::~bad_alloc()@plt&gt;) at ../../.././libstdc++-v3/libsupc++/eh_throw.cc:87
#6  0x0000000000418ca4 in arma::arma_stop_bad_alloc&lt;char [39]&gt; (x=...) at ~/software/include/armadillo_bits/debug.hpp:138
#7  0x000000000041a829 in arma::arma_check_bad_alloc&lt;char [39]&gt; (state=true, x=...) at ~/software/include/armadillo_bits/debug.hpp:378
#8  0x000000000041a63d in arma::memory::acquire&lt;double&gt; (n_elem=8589934596) at ~/software/include/armadillo_bits/memory.hpp:94
#9  0x000000000041a525 in arma::Mat&lt;double&gt;::init_warm (this=0x7fffffffab20, in_n_rows=4294967298, in_n_cols=2)
at ~/software/include/armadillo_bits/Mat_meat.hpp:311
#10 0x000000000042d4bf in arma::Mat&lt;double&gt;::set_size (this=0x7fffffffab20, in_rows=4294967298, in_cols=2)
at ~/software/include/armadillo_bits/Mat_meat.hpp:5638
#11 0x000000000047503d in mlpack::optimization::L_BFGS&lt;mlpack::regression::LogisticRegressionFunction&gt;::L_BFGS (this=0x7fffffffab10, function=...,
numBasis=5, maxIterations=0, armijoConstant=0.0001, wolfe=0.90000000000000002, minGradientNorm=1e-10, maxLineSearchTrials=50,
minStep=9.9999999999999995e-21, maxStep=1e+20) at ~/software/include/mlpack/core/optimizers/lbfgs/lbfgs_impl.hpp:63
#12 0x00000000004744a2 in mlpack::regression::LogisticRegression&lt;mlpack::optimization::L_BFGS&gt;::LogisticRegression (this=0x7fffffffb330, predictors=...,
responses=..., lambda=0) at ~/software/include/mlpack/methods/logistic_regression/logistic_regression_impl.hpp:33
&lt;/denchmark-code&gt;

This happens regardless of whether I have #define ARMA_64BIT_WORD in armadillo_bits/config.hpp commented or uncommented
I should note the identical process worked fine with armadillo.4.650
Inspecting the libraries
&lt;denchmark-code&gt;ldd app

libmlpack.so.1 =&gt; ~/software/lib/libmlpack.so.1 (0x00007f3ff4a18000)
libarmadillo.so.5 =&gt; ~/software/lib/libarmadillo.so.5 (0x00007f3ff4813000)
libboost_program_options.so.1.57.0 =&gt; ~/software/lib/libboost_program_options.so.1.57.0 (0x00007f3ff45a3000)
libblas.so.3gf =&gt; /usr/lib/libblas.so.3gf (0x00007f3ff403a000)
liblapack.so.3gf =&gt; /usr/lib/liblapack.so.3gf (0x00007f3ff341d000)
libstdc++.so.6 =&gt; /software/gcc-4.9.1/lib64/libstdc++.so.6 (0x00007f3ff3112000)
libm.so.6 =&gt; /lib/x86_64-linux-gnu/libm.so.6 (0x00007f3ff2e16000)
libgcc_s.so.1 =&gt; /software/gcc-4.9.1/lib64/libgcc_s.so.1 (0x00007f3ff2c00000)
libc.so.6 =&gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007f3ff2840000)
libpthread.so.0 =&gt; /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007f3ff2623000)
libboost_unit_test_framework.so.1.57.0 =&gt; ~/software/lib/libboost_unit_test_framework.so.1.57.0 (0x00007f3ff237c000)
libboost_random.so.1.57.0 =&gt; ~/software/lib/libboost_random.so.1.57.0 (0x00007f3ff2176000)
libxml2.so.2 =&gt; /usr/lib/x86_64-linux-gnu/libxml2.so.2 (0x00007f3ff1e1a000)
librt.so.1 =&gt; /lib/x86_64-linux-gnu/librt.so.1 (0x00007f3ff1c12000)
libmkl_rt.so =&gt; /software/intel-tools-2015/composer_xe_2015.0.090/mkl/lib/intel64/libmkl_rt.so (0x00007f3ff169b000)
libimf.so =&gt; /software/intel-tools-2015/composer_xe_2015.0.090/compiler/lib/intel64/libimf.so (0x00007f3ff11e1000)
libsvml.so =&gt; /software/intel-tools-2015/composer_xe_2015.0.090/compiler/lib/intel64/libsvml.so (0x00007f3ff0592000)
libirng.so =&gt; /software/intel-tools-2015/composer_xe_2015.0.090/compiler/lib/intel64/libirng.so (0x00007f3ff038a000)
libintlc.so.5 =&gt; /software/intel-tools-2015/composer_xe_2015.0.090/compiler/lib/intel64/libintlc.so.5 (0x00007f3ff0130000)
libdl.so.2 =&gt; /lib/x86_64-linux-gnu/libdl.so.2 (0x00007f3feff2c000)
libgfortran.so.3 =&gt; /software/gcc-4.9.1/lib64/libgfortran.so.3 (0x00007f3fefc0f000)
/lib64/ld-linux-x86-64.so.2 (0x00007f3ff4f40000)
libboost_system.so.1.57.0 =&gt; ~/software/lib/libboost_system.so.1.57.0 (0x00007f3fefa0c000)
libquadmath.so.0 =&gt; /software/gcc-4.9.1/lib/../lib64/libquadmath.so.0 (0x00007f3fef7ce000)
&lt;/denchmark-code&gt;

My above ld error I think was caused by compiling mlpack against a different boost from the one that was then loaded (which I've now fixed)
		</comment>
		<comment id='4' author='johnlees' date='2015-04-15T09:57:31Z'>
		If I use the mlpack binary ~/software/bin/logistic_regression however, it seems to work just fine (inspecting with ldd, the libraries are the same as my app, except mine also links libblas.so.3gf, libgfortran.so.3, liblapack.so.3gf, and libquadmath.so.0)
A further bit of info, my include directive in the .cpp file is
&lt;denchmark-code&gt;#include &lt;mlpack/core.hpp&gt; // this includes armadillo
#include &lt;mlpack/methods/logistic_regression/logistic_regression.hpp&gt;
&lt;/denchmark-code&gt;

		</comment>
		<comment id='5' author='johnlees' date='2015-04-15T13:03:25Z'>
		Ah, I've been able to fix it!
I needed to uncomment the line in armadillo_bits/config.hpp before compiling mlpack. Not sure if this is an issue specific to me, or a problem with the cmake configuration of mlpack?
		</comment>
		<comment id='6' author='johnlees' date='2015-04-15T15:51:30Z'>
		I'm assuming that you mean that for the fix, you had to uncomment #define ARMA_64BIT_WORD in config.hpp?
Either way, something is not completely adding up for me here.  Can you give me more information on your application and how I can reproduce what is going on?
		</comment>
		<comment id='7' author='johnlees' date='2015-04-15T15:51:48Z'>
		Also, Li, would you like to open a new issue for the problem you're encountering?  Thanks.
		</comment>
		<comment id='8' author='johnlees' date='2015-04-15T16:00:36Z'>
		Yes, that's how I fixed it. Uncommenting that line in arma's config.hpp before running cmake/make/make install for mlpack
The code that goes wrong in the application is a call to:
&lt;denchmark-code&gt;mlpack::regression::LogisticRegression&lt;&gt; fit(x_train.t(), y_train)
&lt;/denchmark-code&gt;

where x is a 200x3 arma::mat and y is a 200x1 arma::vec
Otherwise I think I've put all the information I can above. I think it's an installation issue rather than the application. Perhaps the state of ARMA_64BIT_WORD is incorrectly detected
Installing as above, followed by such a call should reproduce the error. If it doesn't, or it is difficult to follow the exact same steps, I'm happy to close this as solved/fixed!
		</comment>
		<comment id='9' author='johnlees' date='2015-04-15T19:05:21Z'>
		The only way I can reproduce this is by failing to set LD_LIBRARY_PATH, so the runtime linker tries to use a version of libmlpack.so which was compiled with 32-bit uword; then it fails.  But compiling out of the box as you suggested, I can't make a libarmadillo.so with 64-bit uword and a libmlpack.so with 32-bit uword.
So is it possible that there is a libmlpack.so hanging around somewhere still that the runtime linker is picking up on?  (Your output of ldd suggests that this is not the case, since ld seems to be finding the correct libmlpack.so.)
The only other possibility I have not dug further into is that you've used Intel's compiler for Armadillo but gcc for mlpack.  If you use Intel's compiler for mlpack, does this change anything?
		</comment>
		<comment id='10' author='johnlees' date='2015-04-21T08:32:23Z'>
		Hmm, strange. I'm pretty sure I got rid of mlpack completely, and ldd would seem to agree. I can't figure out why we're having a difference, but perhaps it is the compiler
I've tried compiling mlpack with icpc, but it runs a lot slower, and doesn't solve this problem unfortunately.
Perhaps my installation of armadillo was incorrect too. Anyway, thanks for your help!
		</comment>
	</comments>
</bug>