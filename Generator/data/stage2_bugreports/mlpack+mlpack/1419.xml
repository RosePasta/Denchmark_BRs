<bug id='1419' author='rasbt' open_date='2018-06-02T02:44:30Z' closed_time='2018-06-08T20:01:14Z'>
	<summary>[JOSS] Issue in perceptron Python-binding documentation with mlpack class assignment</summary>
	<description>
In the perceptron docs, at &lt;denchmark-link:http://www.mlpack.org/docs/mlpack-3.0.1/python/perceptron.html&gt;http://www.mlpack.org/docs/mlpack-3.0.1/python/perceptron.html&lt;/denchmark-link&gt;

there are some issues in the code examples
&gt;&gt;&gt; from mlpack import perceptron

&gt;&gt;&gt; perceptron(training=training_data, labels=training_labels)
&gt;&gt;&gt; perceptron = output['output_model']

&gt;&gt;&gt; perceptron(input_model=perceptron, test=test_data)
&gt;&gt;&gt; predictions = output['output']
First there's the "output" issue referenced in &lt;denchmark-link:https://github.com/mlpack/mlpack/issues/1418&gt;#1418&lt;/denchmark-link&gt;
. For now, let's assume that's fixed:
&gt;&gt;&gt; output = perceptron(training=training_data, labels=training_labels)
&gt;&gt;&gt; perceptron = output['output_model']

&gt;&gt;&gt; output = perceptron(input_model=perceptron, test=test_data)
&gt;&gt;&gt; predictions = output['output']
Now, the issue is this will raise an TypeError: 'mlpack.perceptron.PerceptronModelType' object is not callable. Presumably, because it's somehow trying to use the module perceptron. I would recommend not to overwrite the perceptron class imported from mlpack (earlier in the documentation) and modify it as follows (perceptron -&gt; perceptron_model):
&gt;&gt;&gt; output = perceptron(training=training_data, labels=training_labels)
&gt;&gt;&gt; perceptron_model = output['output_model']

&gt;&gt;&gt; output = perceptron(input_model=perceptron_model, test=test_data)
&gt;&gt;&gt; predictions = output['output']
Would probably be a good idea to double-check the other modules as well
	</description>
	<comments>
		<comment id='1' author='rasbt' date='2018-06-04T18:53:45Z'>
		Good call---I have a fix in &lt;denchmark-link:https://github.com/mlpack/mlpack/pull/1421&gt;#1421&lt;/denchmark-link&gt;
.  This is one of the tricky bits with writing agnostic documentation: for the command-line, this makes sense.  The model just gets called .  But in Python it goes south fast like you pointed out. :)
I checked all the other bindings too, and none have the same issue.
		</comment>
		<comment id='2' author='rasbt' date='2018-06-08T20:01:14Z'>
		Fixed with the merge of &lt;denchmark-link:https://github.com/mlpack/mlpack/pull/1421&gt;#1421&lt;/denchmark-link&gt;
.
		</comment>
	</comments>
</bug>