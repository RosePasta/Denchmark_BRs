<bug id='1611' author='lhedjazi' open_date='2018-12-23T20:39:47Z' closed_time='2019-03-08T20:44:06Z'>
	<summary>Issues with MLPACK on Windows using Mingw</summary>
	<description>
Dear Mlpack community,
I am struggling since few days to compile Mlpack in the aim to use it in one of my projects but I am facing some issues according to CMake building configs. I tried everything possible and looked on the past issues submitted by Mlpack users. One of the issues is similar to the one we can find here : &lt;denchmark-link:https://github.com/mlpack/mlpack/issues/813&gt;#813&lt;/denchmark-link&gt;

I am using:

Mingw version: g++ (x86_64-posix-seh-rev0, Built by MinGW-W64 project) 8.1.0
CMake 3.13.1 version.
Mlpack version 3.0.4 with Lapack and Blas enabled in the config file (OpenBlas 0.2.14)
Armadillo version 8.500.1
Boost version 1.66.0

I have tried serveral opitons but faced different issues:
Option 1:  When I select to build both "CLI_EXECUTABLES" and "SHARED_LIBS"  in the CMake GUI it fails with the following error:
[ 25%] Linking CXX executable ........\mlpack_adaboost.exe
......
CMakeFiles\mlpack_adaboost.dir/objects.a(adaboost_main.cpp.obj):adaboost_main.cpp:(.text$_ZN6mlpack8bindings3cli8GetParamIPNS_8adaboost13AdaBoostModelEEEvRKNS_4util9ParamDataEPKvPv[_ZN6mlpack8bindings3cli8GetParamIPNS_8adaboost13AdaBoostModelEEEvRKNS_4util9ParamDataEPKvPv]+0x51): undefined reference to `mlpack::adaboost::AdaBoostModel::AdaBoostModel()'
collect2.exe: error: ld returned 1 exit status
mingw32-make.exe[2]: *** [src\mlpack\methods\adaboost\CMakeFiles\mlpack_adaboost.dir\build.make:94: mlpack_adaboost.exe] Error 1
mingw32-make.exe[1]: *** [CMakeFiles\Makefile2:1501: src/mlpack/methods/adaboost/CMakeFiles/mlpack_adaboost.dir/all] Error 2
mingw32-make.exe: *** [Makefile:140: all] Error 2
Option 2: When I select to build each of them seprately it works but I face one issue when I try to link to the so generated libraries in my c++ project:
g++ -std=c++11 -fopenmp "-IC:\WORKS\Dev\Boost\boost_1_66_0" "-IC:\WORKS\Dev\OpenBLAS-v0.2.14-Win64-int64\include" "-IC:\WORKS\Dev\projects\armadillo-8.500.1\include" "-IC:\WORKS\Dev\projects\buildMLpack\include" "-LC:\WORKS\Dev\projects\buildArmadillo" "-LC:\WORKS\Dev\OpenBLAS-v0.2.14-Win64-int64\bin" "-LC:\WORKS\Dev\projects\buildMLpack" "-LC:\WORKS\Dev\Boost\boost_1_66_0\stage\lib" -lmlpack -larmadillo -lopenblas -lboost_serialization-mgw81-mt-x64-1_66 -lboost_program_options-mgw81-mt-x64-1_66 -lboost_unit_test_framework-mgw81-mt-x64-1_66 mainCode.cpp
This outputs:
mainCode.o:mainCode.cpp:(.text$_ZN6mlpack4data4SaveIdEEbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKN4arma3MatIT_EEbb[_ZN6mlpack4data4SaveIdEEbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKN4arma3MatIT_EEbb]+0x73): undefined reference to mlpack::Timer::Start(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;)' mainCode.o:mainCode.cpp:(.text$_ZN6mlpack4data4SaveIdEEbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKN4arma3MatIT_EEbb[_ZN6mlpack4data4SaveIdEEbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKN4arma3MatIT_EEbb]+0x12f): undefined reference to mlpack::Timer::Stop(std::__cxx11::basic_string&lt;char, std::char_traits, std::allocator &gt; const&amp;)'
mainCode.o:mainCode.cpp:(.text$_ZN6mlpack4data4SaveIdEEbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKN4arma3MatIT_EEbb[_ZN6mlpack4data4SaveIdEEbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKN4arma3MatIT_EEbb]+0x161): undefined reference to mlpack::util::PrefixedOutStream::operator&lt;&lt;(char const*)' mainCode.o:mainCode.cpp:(.text$_ZN6mlpack4data4SaveIdEEbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKN4arma3MatIT_EEbb[_ZN6mlpack4data4SaveIdEEbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKN4arma3MatIT_EEbb]+0x17e): undefined reference to mlpack::util::PrefixedOutStream::operator&lt;&lt;(char const*)'
mainCode.o:mainCode.cpp:(.text$_ZN6mlpack4data4SaveIdEEbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKN4arma3MatIT_EEbb[_ZN6mlpack4data4SaveIdEEbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKN4arma3MatIT_EEbb]+0x18d): undefined reference to mlpack::util::PrefixedOutStream::operator&lt;&lt;(char const*)' mainCode.o:mainCode.cpp:(.text$_ZN6mlpack4data4SaveIdEEbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKN4arma3MatIT_EEbb[_ZN6mlpack4data4SaveIdEEbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKN4arma3MatIT_EEbb]+0x19c): undefined reference to mlpack::util::PrefixedOutStream::operator&lt;&lt;(std::ostream&amp; ()(std::ostream&amp;))'
mainCode.o:mainCode.cpp:(.text$_ZN6mlpack4data4SaveIdEEbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKN4arma3MatIT_EEbb[_ZN6mlpack4data4SaveIdEEbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKN4arma3MatIT_EEbb]+0x390): undefined reference to mlpack::Timer::Stop(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;)' mainCode.o:mainCode.cpp:(.text$_ZN6mlpack4data4SaveIdEEbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKN4arma3MatIT_EEbb[_ZN6mlpack4data4SaveIdEEbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKN4arma3MatIT_EEbb]+0x3c2): undefined reference to mlpack::util::PrefixedOutStream::operator&lt;&lt;(char const)'
mainCode.o:mainCode.cpp:(.text$_ZN6mlpack4data4SaveIdEEbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKN4arma3MatIT_EEbb[_ZN6mlpack4data4SaveIdEEbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKN4arma3MatIT_EEbb]+0x3df): undefined reference to mlpack::util::PrefixedOutStream::operator&lt;&lt;(char const*)' mainCode.o:mainCode.cpp:(.text$_ZN6mlpack4data4SaveIdEEbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKN4arma3MatIT_EEbb[_ZN6mlpack4data4SaveIdEEbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKN4arma3MatIT_EEbb]+0x3ee): undefined reference to mlpack::util::PrefixedOutStream::operator&lt;&lt;(char const*)'
mainCode.o:mainCode.cpp:(.text$_ZN6mlpack4data4SaveIdEEbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKN4arma3MatIT_EEbb[_ZN6mlpack4data4SaveIdEEbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKN4arma3MatIT_EEbb]+0x3fd): undefined reference to mlpack::util::PrefixedOutStream::operator&lt;&lt;(std::ostream&amp; (*)(std::ostream&amp;))' mainCode.o:mainCode.cpp:(.text$_ZN6mlpack4data4SaveIdEEbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKN4arma3MatIT_EEbb[_ZN6mlpack4data4SaveIdEEbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKN4arma3MatIT_EEbb]+0x658): undefined reference to mlpack::util::PrefixedOutStream::operator&lt;&lt;(char const*)'
mainCode.o:mainCode.cpp:(.text$_ZN6mlpack4data4SaveIdEEbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKN4arma3MatIT_EEbb[_ZN6mlpack4data4SaveIdEEbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKN4arma3MatIT_EEbb]+0x6e4): undefined reference to mlpack::util::PrefixedOutStream::operator&lt;&lt;(char const*)' mainCode.o:mainCode.cpp:(.text$_ZN6mlpack4data4SaveIdEEbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKN4arma3MatIT_EEbb[_ZN6mlpack4data4SaveIdEEbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKN4arma3MatIT_EEbb]+0x6f1): undefined reference to mlpack::util::PrefixedOutStream::operator&lt;&lt;(std::__cxx11::basic_string&lt;char, std::char_traits, std::allocator &gt;&amp;)'
mainCode.o:mainCode.cpp:(.text$_ZN6mlpack4data4SaveIdEEbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKN4arma3MatIT_EEbb[_ZN6mlpack4data4SaveIdEEbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKN4arma3MatIT_EEbb]+0x700): undefined reference to mlpack::util::PrefixedOutStream::operator&lt;&lt;(char const*)' mainCode.o:mainCode.cpp:(.text$_ZN6mlpack4data4SaveIdEEbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKN4arma3MatIT_EEbb[_ZN6mlpack4data4SaveIdEEbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKN4arma3MatIT_EEbb]+0x721): undefined reference to mlpack::util::PrefixedOutStream::operator&lt;&lt;(char const*)'
mainCode.o:mainCode.cpp:(.text$_ZN6mlpack4data4SaveIdEEbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKN4arma3MatIT_EEbb[_ZN6mlpack4data4SaveIdEEbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKN4arma3MatIT_EEbb]+0x730): undefined reference to mlpack::util::PrefixedOutStream::operator&lt;&lt;(std::ostream&amp; (*)(std::ostream&amp;))' mainCode.o:mainCode.cpp:(.text$_ZN6mlpack4data4SaveIdEEbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKN4arma3MatIT_EEbb[_ZN6mlpack4data4SaveIdEEbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKN4arma3MatIT_EEbb]+0x988): undefined reference to mlpack::util::PrefixedOutStream::operator&lt;&lt;(char const*)'
mainCode.o:mainCode.cpp:(.text$_ZN6mlpack4data4SaveIdEEbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKN4arma3MatIT_EEbb[_ZN6mlpack4data4SaveIdEEbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKN4arma3MatIT_EEbb]+0x9a5): undefined reference to mlpack::util::PrefixedOutStream::operator&lt;&lt;(char const*)' mainCode.o:mainCode.cpp:(.text$_ZN6mlpack4data4SaveIdEEbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKN4arma3MatIT_EEbb[_ZN6mlpack4data4SaveIdEEbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKN4arma3MatIT_EEbb]+0x9b4): undefined reference to mlpack::util::PrefixedOutStream::operator&lt;&lt;(char const*)'
mainCode.o:mainCode.cpp:(.text$_ZN6mlpack4data4SaveIdEEbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKN4arma3MatIT_EEbb[_ZN6mlpack4data4SaveIdEEbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKN4arma3MatIT_EEbb]+0xd18): undefined reference to mlpack::Timer::Stop(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;)' mainCode.o:mainCode.cpp:(.text$_ZN6mlpack4data4SaveIdEEbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKN4arma3MatIT_EEbb[_ZN6mlpack4data4SaveIdEEbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKN4arma3MatIT_EEbb]+0xd4b): undefined reference to mlpack::util::PrefixedOutStream::operator&lt;&lt;(char const*)'
mainCode.o:mainCode.cpp:(.text$_ZN6mlpack4data4SaveIdEEbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKN4arma3MatIT_EEbb[_ZN6mlpack4data4SaveIdEEbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKN4arma3MatIT_EEbb]+0xd68): undefined reference to mlpack::util::PrefixedOutStream::operator&lt;&lt;(char const*)' mainCode.o:mainCode.cpp:(.text$_ZN6mlpack4data4SaveIdEEbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKN4arma3MatIT_EEbb[_ZN6mlpack4data4SaveIdEEbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKN4arma3MatIT_EEbb]+0xd77): undefined reference to mlpack::util::PrefixedOutStream::operator&lt;&lt;(char const*)'
mainCode.o:mainCode.cpp:(.text$_ZN6mlpack4data4SaveIdEEbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKN4arma3MatIT_EEbb[_ZN6mlpack4data4SaveIdEEbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKN4arma3MatIT_EEbb]+0xd86): undefined reference to mlpack::util::PrefixedOutStream::operator&lt;&lt;(std::ostream&amp; (*)(std::ostream&amp;))' mainCode.o:mainCode.cpp:(.text$_ZN6mlpack4data4SaveIdEEbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKN4arma3MatIT_EEbb[_ZN6mlpack4data4SaveIdEEbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKN4arma3MatIT_EEbb]+0xdb9): undefined reference to mlpack::util::PrefixedOutStream::operator&lt;&lt;(char const*)'
mainCode.o:mainCode.cpp:(.text$_ZN6mlpack4data4SaveIdEEbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKN4arma3MatIT_EEbb[_ZN6mlpack4data4SaveIdEEbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKN4arma3MatIT_EEbb]+0xe52): undefined reference to mlpack::Timer::Stop(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;)' mainCode.o:mainCode.cpp:(.text$_ZN6mlpack4data4SaveIdEEbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKN4arma3MatIT_EEbb[_ZN6mlpack4data4SaveIdEEbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKN4arma3MatIT_EEbb]+0xe84): undefined reference to mlpack::util::PrefixedOutStream::operator&lt;&lt;(char const*)'
mainCode.o:mainCode.cpp:(.text$_ZN6mlpack4data4SaveIdEEbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKN4arma3MatIT_EEbb[_ZN6mlpack4data4SaveIdEEbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKN4arma3MatIT_EEbb]+0xea1): undefined reference to mlpack::util::PrefixedOutStream::operator&lt;&lt;(char const*)' mainCode.o:mainCode.cpp:(.text$_ZN6mlpack4data4SaveIdEEbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKN4arma3MatIT_EEbb[_ZN6mlpack4data4SaveIdEEbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKN4arma3MatIT_EEbb]+0xeb0): undefined reference to mlpack::util::PrefixedOutStream::operator&lt;&lt;(std::ostream&amp; ()(std::ostream&amp;))'
mainCode.o:mainCode.cpp:(.text$_ZN6mlpack4data4SaveIdEEbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKN4arma3MatIT_EEbb[_ZN6mlpack4data4SaveIdEEbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKN4arma3MatIT_EEbb]+0xf80): undefined reference to mlpack::Timer::Stop(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;)' mainCode.o:mainCode.cpp:(.text$_ZN6mlpack4data4SaveIdEEbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKN4arma3MatIT_EEbb[_ZN6mlpack4data4SaveIdEEbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKN4arma3MatIT_EEbb]+0xfae): undefined reference to mlpack::util::PrefixedOutStream::operator&lt;&lt;(char const)'
mainCode.o:mainCode.cpp:(.text$_ZN6mlpack4data4SaveIdEEbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKN4arma3MatIT_EEbb[_ZN6mlpack4data4SaveIdEEbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKN4arma3MatIT_EEbb]+0xfcb): undefined reference to mlpack::util::PrefixedOutStream::operator&lt;&lt;(char const*)' mainCode.o:mainCode.cpp:(.text$_ZN6mlpack4data4SaveIdEEbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKN4arma3MatIT_EEbb[_ZN6mlpack4data4SaveIdEEbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKN4arma3MatIT_EEbb]+0xffe): undefined reference to mlpack::util::PrefixedOutStream::operator&lt;&lt;(char const*)'
mainCode.o:mainCode.cpp:(.text$_ZN6mlpack4data4SaveIdEEbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKN4arma3MatIT_EEbb[_ZN6mlpack4data4SaveIdEEbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKN4arma3MatIT_EEbb]+0x1060): undefined reference to mlpack::Timer::Stop(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;)' mainCode.o:mainCode.cpp:(.text$_ZN6mlpack4data4SaveIdEEbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKN4arma3MatIT_EEbb[_ZN6mlpack4data4SaveIdEEbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKN4arma3MatIT_EEbb]+0x117f): undefined reference to mlpack::util::PrefixedOutStream::operator&lt;&lt;(char const*)'
mainCode.o:mainCode.cpp:(.text$_ZN6mlpack4data4SaveIdEEbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKN4arma3MatIT_EEbb[_ZN6mlpack4data4SaveIdEEbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKN4arma3MatIT_EEbb]+0x13ac): undefined reference to mlpack::Timer::Stop(std::__cxx11::basic_string&lt;char, std::char_traits&lt;char&gt;, std::allocator&lt;char&gt; &gt; const&amp;)' mainCode.o:mainCode.cpp:(.text$_ZN6mlpack4data4SaveIdEEbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKN4arma3MatIT_EEbb[_ZN6mlpack4data4SaveIdEEbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKN4arma3MatIT_EEbb]+0x13e3): undefined reference to mlpack::util::PrefixedOutStream::operator&lt;&lt;(char const*)'
mainCode.o:mainCode.cpp:(.text$_ZN6mlpack4data4SaveIdEEbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKN4arma3MatIT_EEbb[_ZN6mlpack4data4SaveIdEEbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKN4arma3MatIT_EEbb]+0x1400): undefined reference to mlpack::util::PrefixedOutStream::operator&lt;&lt;(char const*)' mainCode.o:mainCode.cpp:(.text$_ZN6mlpack4data4SaveIdEEbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKN4arma3MatIT_EEbb[_ZN6mlpack4data4SaveIdEEbRKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEERKN4arma3MatIT_EEbb]+0x14ab): undefined reference to mlpack::util::PrefixedOutStream::operator&lt;&lt;(char const*)'
mainCode.o:mainCode.cpp:(.text.startup+0x6a): undefined reference to `bool mlpack::data::Load(std::__cxx11::basic_string&lt;char, std::char_traits, std::allocator &gt; const&amp;, arma::Mat&amp;, bool, bool)'
collect2.exe: error: ld returned 1 exit status
Option 3 : Building tests from CMake is failing with the following error
C:/PROGRA1/MINGW-1/X86_641.0-P/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/8.1.0/../../../../x86_64-w64-mingw32/bin/as.exe: CMakeFiles\mlpack_test.dir\serialization_test.cpp.obj: too many sections (52710)
C:\Users\lhedjazi\AppData\Local\Temp\cccylgtD.s: Assembler messages:
C:\Users\lhedjazi\AppData\Local\Temp\cccylgtD.s: Fatal error: can't write 1 byte to section .text of CMakeFiles\mlpack_test.dir\serialization_test.cpp.obj: 'File too big'
C:/PROGRA1/MINGW-1/X86_641.0-P/mingw64/bin/../lib/gcc/x86_64-w64-mingw32/8.1.0/../../../../x86_64-w64-mingw32/bin/as.exe: CMakeFiles\mlpack_test.dir\serialization_test.cpp.obj: too many sections (52710)
C:\Users\lhedjazi\AppData\Local\Temp\cccylgtD.s: Fatal error: can't close CMakeFiles\mlpack_test.dir\serialization_test.cpp.obj: File too big
mingw32-make.exe[2]: *** [src\mlpack\tests\CMakeFiles\mlpack_test.dir\build.make:1638: src/mlpack/tests/CMakeFiles/mlpack_test.dir/serialization_test.cpp.obj] Error 1
mingw32-make.exe[1]: *** [CMakeFiles\Makefile2:2678: src/mlpack/tests/CMakeFiles/mlpack_test.dir/all] Error 2
mingw32-make.exe: *** [Makefile:140: all] Error 2
Any help would be appreciable.
Many thanks,
	</description>
	<comments>
		<comment id='1' author='lhedjazi' date='2018-12-24T19:43:16Z'>
		Any thoughts about this issue?
Thanks
		</comment>
		<comment id='2' author='lhedjazi' date='2018-12-25T22:15:35Z'>
		I could make some progress.
After some investigations, the problem seems to appear just when I link to the generated mlpack dll. It works smoothly when I link to the static library (.a).
Even of that, I found also that using Openblas may be tricky in some cases ( for instance the &lt;denchmark-link:http://www.mlpack.org/docs/mlpack-3.0.4/doxygen/sample.html&gt;covariance computation example&lt;/denchmark-link&gt;
 fails). This run smoothly however when blas and lapack are used.
Any explanation to that?
Thanks
		</comment>
		<comment id='3' author='lhedjazi' date='2018-12-26T18:36:34Z'>
		Glad to hear you could make progress.  Honestly mlpack is much more robust on Linux but there are a lot of people using it on Windows (so it seems).  If there is any CMake fix we can do to make things easier for you I am happy to do that, but I don't have any Windows setup so I can't test or debug anything.
For building static libraries, you can configure with the BUILD_SHARED_LIBS CMake variable set to OFF.  (I guess maybe you did this already.)
Can you show what the output of the covariance computation example is?  It seems very strange that that would fail with OpenBLAS but not BLAS/LAPACK.
		</comment>
		<comment id='4' author='lhedjazi' date='2018-12-30T14:20:19Z'>
		Thanks &lt;denchmark-link:https://github.com/rcurtin&gt;@rcurtin&lt;/denchmark-link&gt;
  for your feedback and sorry for this late answer

For building static libraries, you can configure with the BUILD_SHARED_LIBS CMake variable set to OFF. &gt; (I guess maybe you did this already.)

Yes I have already used that but as I told, if BUILD_SHARED_LIBS is set to OFF static libraries and executables are generated without issue. When I set it to ON without selecting to generate executables ("CLI_EXECUTABLES"), mlpack.dll is generated but does not work when I link to in my C++ project. It works fine when I link to the static library.

Can you show what the output of the covariance computation example is? It seems very strange that &gt; &gt; that would fail with OpenBLAS but not BLAS/LAPACK.

I am able in this case to generate the .exe but when I run it nothing happen. No result (csv file) is generated while no error is thrown though.
Could you direct me to someone you know in the group using mlpack with windows to have his feedback?
Many thanks for the great work work you are doing around Mlpack.
Lyamine
		</comment>
		<comment id='5' author='lhedjazi' date='2018-12-30T16:00:49Z'>
		Given that the Windows build guide suggests setting BUILD_SHARED_LIBS=OFF, I would be fine with changing the default value of BUILD_SHARED_LIBS on Windows to OFF.  Do you think that would be reasonable?
For the covariance example, is it possible that the matrix is somehow ending up empty, and as a result no file is saved?  You could try printing it after computation:
&lt;denchmark-code&gt;cout &lt;&lt; "covariance matrix:\n" &lt;&lt; cov;
&lt;/denchmark-code&gt;

I don't know exactly who is using mlpack on Windows; I think most developers are on Linux or OS X.  Perhaps you could take a look at some of the other open issues about Windows and see if someone in one of those has any input?

Many thanks for the great work work you are doing around Mlpack.

Thanks!  It is a big community effort. :)
		</comment>
		<comment id='6' author='lhedjazi' date='2018-12-31T20:13:42Z'>
		Thanks &lt;denchmark-link:https://github.com/rcurtin&gt;@rcurtin&lt;/denchmark-link&gt;


Given that the Windows build guide suggests setting BUILD_SHARED_LIBS=OFF, I would be fine with &gt;changing the default value of BUILD_SHARED_LIBS on Windows to OFF. Do you think that would be &gt;reasonable?

Yes, I think it makes sense to set BUILD_SHARED_LIBS=OFF especially for new users of Mlpack and provided that dlls do not link correctly till the proof of the contrary.

For the covariance example, is it possible that the matrix is somehow ending up empty, and as a result &gt;no file is saved? You could try printing it after computation:


cout &lt;&lt; "covariance matrix:\n" &lt;&lt; cov;

I checked that the matrix is not endingup empty. I have already tried to display the cov matrix but hadn't see anything on the screen. I am sure the issue appear at this line of the code:
arma::mat cov = data * trans(data) / data.n_cols;
For sure, mainly related to the multiplication operation and hence OpenBlas/Lapack libraries, but the question is why it do not throw any error? The same example worked smoothly when Lapack/Blas librarries are used.
I will take a look on other open issues for windows to have any input on this issue.
Happy new year 2019 :)
		</comment>
		<comment id='7' author='lhedjazi' date='2019-01-02T21:21:35Z'>
		
Yes, I think it makes sense to set BUILD_SHARED_LIBS=OFF especially for new users of Mlpack and provided that dlls do not link correctly till the proof of the contrary.

I opened &lt;denchmark-link:https://github.com/mlpack/mlpack/pull/1629&gt;#1629&lt;/denchmark-link&gt;
 that will set this.

I checked that the matrix is not endingup empty. I have already tried to display the cov matrix but hadn't see anything on the screen. I am sure the issue appear at this line of the code:
arma::mat cov = data * trans(data) / data.n_cols;
For sure, mainly related to the multiplication operation and hence OpenBlas/Lapack libraries, but the question is why it do not throw any error? The same example worked smoothly when Lapack/Blas librarries are used.
I will take a look on other open issues for windows to have any input on this issue.

This one is very confusing to me.  Could it, somehow, be the division by data.n_cols?  You could try simplifying the expression and see if the following ones work...
&lt;denchmark-code&gt;// simplest
arma::mat cov = data;
// just division this time
arma::mat cov = data / data.n_cols;
// transposition
arma::mat cov = trans(data);
// multiplication
arma::mat cov = data * trans(data);
&lt;/denchmark-code&gt;

Maybe you can help narrow down exactly which one is failing there, and this might help us make a minimum working example we can file with OpenBLAS.  Another thing might be to try with Visual Studio instead of MinGW, just to see if the compiler makes a difference.
		</comment>
		<comment id='8' author='lhedjazi' date='2019-01-09T22:28:27Z'>
		Sorry for the delay and thanks for your answer.
Yes I have already explored all those options and I got the following result:
// simplest
arma::mat cov = data; (worked)
// just division this time
arma::mat cov = data / data.n_cols; (worked)
// transposition
arma::mat cov = trans(data);  (worked)
// multiplication
arma::mat cov = data * trans(data);  (didn't work)
I am not familiar with VS so couldn't test it from my side.
Thanks,
		</comment>
		<comment id='9' author='lhedjazi' date='2019-01-30T19:49:07Z'>
		&lt;denchmark-link:https://github.com/lhedjazi&gt;@lhedjazi&lt;/denchmark-link&gt;
 I was able to fix the build issues see: &lt;denchmark-link:https://github.com/mlpack/mlpack/pull/1698&gt;#1698&lt;/denchmark-link&gt;
, also if you build armadillo with OpenBLAS make sure that  in the armadillo  is not defined. Let me know if I should clarify anything.
		</comment>
		<comment id='10' author='lhedjazi' date='2019-03-01T20:26:12Z'>
		This issue has been automatically marked as stale because it has not had any recent activity.  It will be closed in 7 days if no further activity occurs.  Thank you for your contributions! 👍
		</comment>
	</comments>
</bug>