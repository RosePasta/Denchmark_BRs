<bug id='2372' author='markodjordjic' open_date='2020-04-16T13:49:17Z' closed_time='2020-04-28T02:12:42Z'>
	<summary>Access violation reading location</summary>
	<description>
&lt;denchmark-h:h4&gt;Issue description&lt;/denchmark-h&gt;

&lt;denchmark-h:h4&gt;Your environment&lt;/denchmark-h&gt;


version of mlpack:
operating system: W10
compiler:
version of dependencies (Boost/Armadillo):
any other environment information you think is relevant:

&lt;denchmark-h:h4&gt;Steps to reproduce&lt;/denchmark-h&gt;

This is the example that throws an error:
#include 
#include 
#include &lt;mlpack/core.hpp&gt;
#include &lt;mlpack/methods/lars/lars.hpp&gt;
int main()
{
arma::mat features(11, 100);
arma::rowvec targets(100);
mlpack::regression::LARS glm (false, .5, .5);
std::vectormlpack::regression::LARS inventoryofModels;
inventoryofModels.emplace_back(glm);
inventoryofModels[0].Train(features, targets);
std::cout &lt;&lt; "Training completed\n";
}
&lt;denchmark-h:h4&gt;Expected behavior&lt;/denchmark-h&gt;

The LARS should be trained.
&lt;denchmark-h:h4&gt;Actual behavior&lt;/denchmark-h&gt;

Exception: read access violation has been thrown.
	</description>
	<comments>
		<comment id='1' author='markodjordjic' date='2020-04-16T14:03:18Z'>
		This appears to be an issue with LARS's lack of copy constructor and copy operator.  It should be a relatively easy fix.
		</comment>
		<comment id='2' author='markodjordjic' date='2020-04-16T14:41:46Z'>
		Hey &lt;denchmark-link:https://github.com/rcurtin&gt;@rcurtin&lt;/denchmark-link&gt;
, &lt;denchmark-link:https://github.com/markodjordjic&gt;@markodjordjic&lt;/denchmark-link&gt;
, I tried reproducing this issue on OSX and on lab-mlpack.org . However, it doesn't cause any failure. Does this failure only exist on windows?
Here is the link for the &lt;denchmark-link:https://github.com/kartikdutt18/mlpack-models-weights-and-datasets/blob/master/DoesLARSFailOnline.ipynb&gt;notebook&lt;/denchmark-link&gt;
. Also, will other methods such as linear regression also fail when we perform something like this. I will setup my windows and try it again.
I also tried with pointers:
&lt;denchmark-code&gt;arma::mat features(11, 100);
arma::rowvec targets(1, 100);
mlpack::regression::LARS* glm = new mlpack::regression::LARS(false, .5, .5);
std::vector&lt;mlpack::regression::LARS*&gt; inventoryofModels;
inventoryofModels.emplace_back(glm);
inventoryofModels[0]-&gt;Train(features, targets);
std::cout &lt;&lt; "Training completed\n";
&lt;/denchmark-code&gt;

Maybe I am missing something.
		</comment>
		<comment id='3' author='markodjordjic' date='2020-04-16T17:18:34Z'>
		&lt;denchmark-link:https://github.com/kartikdutt18&gt;@kartikdutt18&lt;/denchmark-link&gt;
 I bet you can make the invalid access happen like this:
&lt;denchmark-code&gt;arma::mat features(11, 100);
arma::rowvec targets(1, 100);
mlpack::regression::LARS* glm = new mlpack::regression::LARS(false, .5, .5);
std::vector&lt;mlpack::regression::LARS&gt; inventoryofModels;
inventoryofModels.emplace_back(*glm);
delete glm; // Force freeing of LARS internal memory.
inventoryofModels[0].Train(features, targets);
std::cout &lt;&lt; "Training completed\n";
&lt;/denchmark-code&gt;

I haven't tried it, but if you do, let us know what happens. :)
		</comment>
		<comment id='4' author='markodjordjic' date='2020-04-16T17:34:05Z'>
		&lt;denchmark-link:https://github.com/rcurtin&gt;@rcurtin&lt;/denchmark-link&gt;
 and &lt;denchmark-link:https://github.com/kartikdutt18&gt;@kartikdutt18&lt;/denchmark-link&gt;
 thank you both.
I have updated the snippet. (There was one extra line, that is now gone.) The snippet above definitely does not work. Once placed inside a vector, declared LARS object, cannot be trained. Funny enough, if a trained object is placed into a vector, predictions can be made.
The suspectable line in the lars.cpp is:
matGramActive(i, j) = (*matGram)(activeSet[i], activeSet[j]);
		</comment>
		<comment id='5' author='markodjordjic' date='2020-04-16T17:50:21Z'>
		Hmm, This still works on the notebook. However I got them to fail locally (both of them). I will try adding a copy constructor and checking if that solves this issue(I think it should). Thanks a lot.
		</comment>
		<comment id='6' author='markodjordjic' date='2020-04-16T17:51:57Z'>
		Yes, the notebook consists of old snippet. Can you spot the difference? ;)
		</comment>
		<comment id='7' author='markodjordjic' date='2020-04-16T17:52:53Z'>
		I'll save your time. Trained model can be added, and accessed. However, declared model, with parameter only cannot.
		</comment>
		<comment id='8' author='markodjordjic' date='2020-04-16T17:56:49Z'>
		Yep, I updated the notebook also. However I got both the above codes to fail locally. So l'll try and fix them.
		</comment>
		<comment id='9' author='markodjordjic' date='2020-04-26T05:26:25Z'>
		Thanks!
		</comment>
		<comment id='10' author='markodjordjic' date='2020-04-28T02:13:07Z'>
		&lt;denchmark-link:https://github.com/markodjordjic&gt;@markodjordjic&lt;/denchmark-link&gt;
 we'll release mlpack 3.3.1 soon with a fix.  Thanks again for the report! 
		</comment>
	</comments>
</bug>