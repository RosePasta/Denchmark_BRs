<bug id='343' author='rcurtin' open_date='2014-12-29T15:35:47Z' closed_time='2015-01-08T23:01:26Z'>
	<summary>kernel pca unexpected behaviour</summary>
	<description>
Reported by ftrovato on 1 Jan 44621525 12:22 UTC
Dear mlpack developers,
I have tried some tests using kernel_pca on a 48000 (rows) x 16 (cols) data matrix.

With the first test I tried to reproduce the results obtained with the "regular" pca:
kernel_pca -i inpfile.txt --center -k linear -n -o outfile.txt

This is the output:
[INFO ] Loading 'inpfile.txt' as raw ASCII formatted data.  Size is 16 x 48000.
[INFO ] Saving raw ASCII formatted data to 'outfile.txt'.
[INFO ]
[INFO ] Execution parameters:
[INFO ]   bandwidth: 1
[INFO ]   center: true
[INFO ]   degree: 1
[INFO ]   help: false
[INFO ]   info: ""
[INFO ]   input_file: inpfile.txt
[INFO ]   kernel: linear
[INFO ]   kernel_scale: 1
[INFO ]   new_dimensionality: 0
[INFO ]   nystroem_method: true
[INFO ]   offset: 0
[INFO ]   output_file: outfile.txt
[INFO ]   sampling: kmeans
[INFO ]   verbose: true
[INFO ]   version: false
[INFO ]
[INFO ] Program timers:
[INFO ]   loading_data: 0.458363s
[INFO ]   saving_data: 0.524596s
[INFO ]   total_time: 1.295479s
I plotted the first two columns of outfile.txt and compared with the first two in the case of the regular pca. However the results are different: (i) the data are not centered on the x-axis and (ii) the overall shape is different.
Is this an expected behaviour based on the options I have used? I tried to perform the same without the -n option but the calculation is really too slow to finish. Additionally while the calculation -- without the -n option -- is performed I am barely able to move the mouse cursor. I am working on a workstation (Ubuntu 14.04). Is there a reason why I observe such a heavy slow down of my computer performances? At least in my case not using -n seems very difficult, although more accurate (I guess).


Compared to (1) I varied the sampling parameter by specifying --sampling and I see some differences in shape, but the data do not resemble those of regular pca in any case.


I tried to perform kernel pca with other type of kernels. Still, data are never centered. The different kernels give different results, but within each kernel, the calculation is rather insensitive to the parameters of the specific kernel. I expected a bit of variation, why I do not observe it even though i use paramater values that are orders of magnitude different?


For example in the case of the polynomial kernel, no matter what degree is used, the result is always the same: the files are identical weather I use --degree 1000 or 0.00001 or the default.
Here I report an example
kernel_pca -i inpfile.txt --center -k polynomial --sampling kmeans -n -o outfile.txt --verbose
[INFO ] Loading 'inpfile.txt' as raw ASCII formatted data.  Size is 16 x 48000.
[INFO ] Saving raw ASCII formatted data to 'outfile.txt'.
[INFO ]
[INFO ] Execution parameters:
[INFO ]   bandwidth: 1
[INFO ]   center: true
[INFO ]   degree: 1
[INFO ]   help: false
[INFO ]   info: ""
[INFO ]   input_file: inpfile.txt
[INFO ]   kernel: polynomial
[INFO ]   kernel_scale: 1
[INFO ]   new_dimensionality: 0
[INFO ]   nystroem_method: true
[INFO ]   offset: 0
[INFO ]   output_file: outfile.txt
[INFO ]   sampling: kmeans
[INFO ]   verbose: true
[INFO ]   version: false
[INFO ]
[INFO ] Program timers:
[INFO ]   loading_data: 0.410814s
[INFO ]   saving_data: 0.457318s
[INFO ]   total_time: 0.981326s
I might be missing something, but I would appreciate if you could give me any useful feedback.
Thank you for your help,
Fabio
Migrated-From: &lt;denchmark-link:http://trac.research.cc.gatech.edu/fastlab/ticket/361&gt;http://trac.research.cc.gatech.edu/fastlab/ticket/361&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='rcurtin' date='2014-12-30T08:19:05Z'>
		Commented by ftrovato on 11 Sep 44621567 14:02 UTC
As an additional thought/question, that might be important. Are the columns in outfile.txt ordered as I would expect in the case of regular pca?
		</comment>
		<comment id='2' author='rcurtin' date='2014-12-30T08:20:05Z'>
		Commented by marcus on 1 Jun 44624092 23:15 UTC
Hello Fabio,
[I plotted the first two columns of outfile.txt and compared with the first two in the case of the regular pca. However the results are different: (i) the data are not centered on the x-axis and (ii) the overall shape is different.
There was an error in the way we transformed the data. It is fixed in r17032. If you plot the components be aware that the sign is not deterministic. However, the absolute values should be the same.
Note that a negative or positive principal component is still the same principal component it still describes the same one-dimensional subspace.
You can fix the sign by adjusting the columns of u and the rows of v such that the largest element in each column will have a positive sign. If you like I can send you the necessary lines.
I've attached a plot that shows the results of the different methods except of the kpca using the nystroem method all results are the same. I've used the keller4 (2 x 5100) dataset with a linear kernel.
Regarding the centering, there is a big difference in centered across samples or across features. MLPACK PCA implementation centers across samples and that is the standard as far as I know.
Regarding the slow down. You are dealing with high dimensional data using the naive method (standard) that means you need to calculate the complete kernel matrix (48000 x 48000) &gt; 18GB. I guess you don't have enough physical memory / swap file to hold the complete matrix. Linux starts swapping before the RAM is filled up, which results in a slow down. The nystroem method works by using a subset of the data as basis to reconstruct an approximation of the kernel matrix, so you don't need to calculate the complete kernel matrix (48000 x 48000).
[[BR]([BR]]

)]

I tried to perform kernel pca with other type of kernels. Still, data are never centered. The different kernels give different results, but within each kernel, the calculation is rather insensitive to the parameters of the specific kernel. I expected a bit of variation, why I do not observe it even though i use paramater values that are orders of magnitude different?


Can you test this again with the fix introduced in r17032?
I hope this is helpful if instead I've just made things more confusing, let us know.
Thanks,
Marcus
		</comment>
		<comment id='3' author='rcurtin' date='2014-12-30T08:21:05Z'>
		Commented by ftrovato on 13 Jun 44631758 04:38 UTC
Hi Marcus,
thanks for your detailed answer. I changed naive_method.hpp exactly as I found in the revision r17032.
Concerning your commments, the only one I do not really understand well is that about the centering.
What I see from my kernel_pca tests is that on the x-axis (first principal component) the plot is not centered, while it is on the y-axis (second PC).
I am wondering, does centering means that final PCs are centered like in regular pca or not? To illustrate this I performed a fist test. I have attached two files: in "pca.png" you see the results of regular pca and in "kernel_linear_nystroem.png" you see the results of kernel pca (options -k liner -n -c) .
Please note that I did not report the scatter plot of PC1 vs PC2 but instead I plotted the so called Free Energy Surface (FES), which I obtained form the PC1,Pc2 scatter plot by using the formula FES=-0.6ln(Prob(PC1,PC2)), where Prob(PC1,PC2) is the probability of finding PC1,PC2 (the last one evaluated calculating a 2D histogram).
As you can see there is no centering with kernel pca.
What I like in these plots is that they have very similar shapes. Probably it is not so evident because of the scales used, but changing the sign of the PC1 values of kernel_linear_nystroem.png does the trick. However the PC1 absolute values and center are different from pca.png.
Is the change of sign connected to your previous observation? If yes could you send me the code to determine automatically the sign?
I tried a second test, this time using the full kernel. I have attached the file "kernel_linear.png" to illustrate the results.

Data are centered this time!
There is no need to change the sign of the x-axis (PC1) since the orientation of the figure is the same as in the regular pca
The scale of the axes are orders of magnitude different form pca and kernel pca using the nystroem method.

Comments on point (3): although I can rescale the axes to get correspondence with the other methods (I guess that the subspace described by the rescaled PCs will remain invariant), is it expected that the absolute values differ by order of magnitudes in all 3 methods?
I have performed a third test in which I used kernel_pca (revised version r17032) to see if the results changed by varying some parameters of the kernels.


Using nystroem method: both with the polynomial and the laplacian kernels I see no differences when varying degree and bandwidth in the range 0.0001 to 1000. The output files do not differ.


using the full kernel evaluation: with the laplacian kernel there are differences when using bandwidth=0.0001 or 1000. The absolute values are on the order of 0.01, 0.001 for both. I have attached the two files reporting only pc1 (first col) and pc2 (second col) for both bandwidths. Hopefully the long file names should be self-explanatory.


I believe that (4) could be a bug, potentially.
Concerning the very large differences in the absolute values of PC1 and PC2 found with the different methods (comparing pca with kernel_pca or the different kernel_pca), I have to say that I do not understand them. Are they expected?
Thanks,
Fabio
		</comment>
		<comment id='4' author='rcurtin' date='2014-12-30T08:22:06Z'>
		Commented by ftrovato on 27 Dec 44631834 01:44 UTC
How do I attach files? Thanks
		</comment>
		<comment id='5' author='rcurtin' date='2014-12-30T08:23:06Z'>
		Commented by rcurtin on 25 Aug 44631840 19:18 UTC
Hi Fabio,
If you are logged in, you should see an "Attach file" button in the Attachments section of the ticket, which is right below the ticket description at the top of the page.
		</comment>
		<comment id='6' author='rcurtin' date='2014-12-30T08:24:06Z'>
		Commented by ftrovato on 2 Nov 44631994 23:59 UTC
Ok, thanks, I attached 4 files.
		</comment>
		<comment id='7' author='rcurtin' date='2014-12-30T08:25:07Z'>
		Commented by marcus on 28 Jun 44632036 19:10 UTC
Hello Fabian,

thanks for your detailed answer. I changed naive_method.hpp exactly as I found in the revision r17032.

just to be sure, did you also apply the changes from r17031? I'm sorry for the confusion.
Thanks,
Marcus
		</comment>
		<comment id='8' author='rcurtin' date='2014-12-30T08:26:07Z'>
		Commented by ftrovato on 22 Apr 44632044 15:28 UTC
Replying to marcus:

Hello Fabian,

thanks for your detailed answer. I changed naive_method.hpp exactly as I found in the revision r17032.

just to be sure, did you also apply the changes from r17031? I'm sorry for the confusion.

Hello Marcus,
I just considered r17032.
Fabio

Thanks,
Marcus

		</comment>
		<comment id='9' author='rcurtin' date='2014-12-30T08:27:07Z'>
		Commented by ftrovato on 13 Apr 44632125 19:05 UTC
Marcus,
Is there a repository of the revised files that one can download in order to re-build mlpack? If yes does this repository comes with explanations of the modifications?
It would be great if you could point me to the correct files that I need to download, also for the future.
Thanks,
Fabio
		</comment>
		<comment id='10' author='rcurtin' date='2014-12-30T08:28:08Z'>
		Commented by rcurtin on 25 Jun 44632129 15:30 UTC
Hi Fabio,
I'm not Marcus but I can answer the question quickly. :)
You can use subversion to download the most up-to-date sources:
&lt;denchmark-code&gt;svn co http://svn.cc.gatech.edu/fastlab/mlpack/trunk/ mlpack-trunk/
&lt;/denchmark-code&gt;

and that will provide you with the most up-to-date code we have at the moment.  You can view the history with the svn log command, or by using Trac's interface:
&lt;denchmark-link:http://www.mlpack.org/trac/timeline&gt;http://www.mlpack.org/trac/timeline&lt;/denchmark-link&gt;

&lt;denchmark-link:http://www.mlpack.org/trac/browser&gt;http://www.mlpack.org/trac/browser&lt;/denchmark-link&gt;

I hope this is helpful, but if I can clarify further, let me know.
		</comment>
		<comment id='11' author='rcurtin' date='2014-12-30T08:29:08Z'>
		Commented by rcurtin on 18 Nov 44632131 18:48 UTC
I should also note that using the trunk code for everyday use may not be the best idea, since things are prone to change and the code can be unstable at times since parts of it are still in active and heavy development.  For the most part, and for the scope of this ticket, though, there shouldn't be any issues (hopefully, at least).
		</comment>
		<comment id='12' author='rcurtin' date='2015-01-08T23:01:26Z'>
		Closing for inactivity.  Feel free to reopen...
		</comment>
	</comments>
</bug>