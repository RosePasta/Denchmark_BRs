<bug id='1358' author='bqv' open_date='2018-04-07T22:14:17Z' closed_time='2018-04-30T15:30:53Z'>
	<summary>[SoftmaxRegression] munmap_chunk(): invalid pointer during smr.Train()</summary>
	<description>
See &lt;denchmark-link:https://gist.github.com/bqv/ada8359fe79da1ede98012d9e5579712&gt;https://gist.github.com/bqv/ada8359fe79da1ede98012d9e5579712&lt;/denchmark-link&gt;
 for a minimal reproducible example.
Backtrace:
&lt;denchmark-code&gt;#1  0x00007f8759677cf7 in __GI_abort () at abort.c:90
#2  0x00007f87596b8f87 in __libc_message (action=action@entry=do_abort, fmt=fmt@entry=0x7f87597bec38 "%s\n") at ../sysdeps/posix/libc_fatal.c:181
#3  0x00007f87596bf27a in malloc_printerr (str=str@entry=0x7f87597c04f8 "munmap_chunk(): invalid pointer") at malloc.c:5354
#4  0x00007f87596bf72c in munmap_chunk (p=&lt;optimized out&gt;) at malloc.c:2845
#5  0x00000000004155c8 in arma::memory::release&lt;double const&gt; (mem=0x7fffffffe180) at /usr/include/armadillo_bits/memory.hpp:145
#6  arma::Mat&lt;double&gt;::~Mat (this=0x7fffffffd830) at /usr/include/armadillo_bits/Mat_meat.hpp:29
#7  0x0000000000419b05 in mlpack::regression::SoftmaxRegressionFunction::~SoftmaxRegressionFunction (this=0x7fffffffd6b0) at /usr/include/mlpack/methods/softmax_regression/softmax_regression_function.hpp:21
#8  0x0000000000414fbf in mlpack::regression::SoftmaxRegression::Train&lt;mlpack::optimization::GradientDescent&gt; (this=0x7fffffffde10, data=..., labels=..., numClasses=4, optimizer=...)
    at /usr/include/mlpack/methods/softmax_regression/softmax_regression_impl.hpp:64
#9  0x000000000040add6 in mlpackMain () at mlpack.cpp:33
#10 0x000000000040aa2a in main (argc=2, argv=0x7fffffffe448) at /usr/include/mlpack/core/util/mlpack_main.hpp:68```
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='bqv' date='2018-04-07T23:13:33Z'>
		Further digging shows this error can be changed to Mat::init(): requested size is too large by changing numClasses in the initialization call of smr to 0
		</comment>
		<comment id='2' author='bqv' date='2018-04-08T01:06:42Z'>
		Further yet digging shows uninitialized memory regions in valgrind when run on the following code with a much smaller dataset:
&lt;denchmark-code&gt;#include &lt;mlpack/core.hpp&gt;
#include &lt;mlpack/core/util/cli.hpp&gt;
#define BINDING_TYPE BINDING_TYPE_CLI
#include &lt;mlpack/core/util/mlpack_main.hpp&gt;
#include &lt;mlpack/methods/softmax_regression/softmax_regression.hpp&gt;

using SoftmaxRegression = mlpack::regression::SoftmaxRegression;

static void mlpackMain()
{
    arma::mat dataset = arma::mat("0.0 1.0 2.0 3.0 4.0;"
                                  "1.0 1.0 2.0 3.0 3.0;"
                                  "2.0 1.0 2.0 3.0 2.0;"
                                  "3.0 1.0 2.0 3.0 1.0;"
                                  "4.0 1.0 2.0 3.0 0.0;");
    size_t data_dim = dataset.n_cols;
    arma::mat data = dataset.rows(0, data_dim - 2);
    arma::rowvec labelsRow = dataset.row(data_dim - 1);

    arma::Row&lt;size_t&gt; labels = arma::conv_to&lt;arma::Row&lt;size_t&gt;&gt;::from(labelsRow);
    SoftmaxRegression smr(data, labels, 5, 0.5);
}
&lt;/denchmark-code&gt;

The code compiles and runs with error "Mat::init(): requested size is too large" and when run with valgrind, shows a move depending on uninitialized values arising from double mlpack::regression::SoftmaxRegression::Train&lt;mlpack::optimization::L_BFGS&gt;(arma::Mat&lt;double&gt; const&amp;, arma::Row&lt;unsigned long&gt; const&amp;, unsigned long, mlpack::optimization::L_BFGS) (softmax_regression_impl.hpp:53)
		</comment>
		<comment id='3' author='bqv' date='2018-04-08T02:39:22Z'>
		More succinct example of this behaviour:
&lt;denchmark-code&gt;#include &lt;mlpack/core.hpp&gt;
#include &lt;mlpack/core/util/cli.hpp&gt;
#define BINDING_TYPE BINDING_TYPE_CLI
#include &lt;mlpack/core/util/mlpack_main.hpp&gt;
#include &lt;mlpack/methods/softmax_regression/softmax_regression.hpp&gt;

static void mlpackMain()
{
    arma::mat data;
    data.randu(5, 5);
    arma::Row&lt;size_t&gt; labels("0 1 2 3 4");
    mlpack::regression::SoftmaxRegressionFunction regressor(data, labels, 5, 0.5, false);
    arma::mat parameters = regressor.GetInitialPoint();
}
&lt;/denchmark-code&gt;

		</comment>
		<comment id='4' author='bqv' date='2018-04-08T07:26:13Z'>
		Different from your result, I runed the succinct version and got many undefined reference error. Can you tell me your compiling command?
		</comment>
		<comment id='5' author='bqv' date='2018-04-08T08:09:59Z'>
		&lt;denchmark-link:https://github.com/bqv&gt;@bqv&lt;/denchmark-link&gt;
 I tried all your examples with the dataset provided by you and got all of them working smoothly. I think it might be a dependency issue.
		</comment>
		<comment id='6' author='bqv' date='2018-04-08T09:12:05Z'>
		I'm compiling with clang++  -std=c++11 -g -O0  -c -o minimal.o minimal.cpp and clang++ -g -o minimal minimal.o -lmlpack -lboost_program_options -larmadillo.
		</comment>
		<comment id='7' author='bqv' date='2018-04-08T09:20:22Z'>
		In case it is a dependency isssue, I'm running this on debian unstable with the packages:
&lt;denchmark-code&gt;libarmadillo8/testing,unstable,now 1:8.400.0+dfsg-2 amd64
libmlpack-dev/unstable,now 3.0.0-2 amd64
libmlpack3/unstable,now 3.0.0-2 amd64
&lt;/denchmark-code&gt;

		</comment>
		<comment id='8' author='bqv' date='2018-04-11T02:16:23Z'>
		I reproduced this in a debian:sid Docker container.  It's late now but I'll keep digging tomorrow.
		</comment>
		<comment id='9' author='bqv' date='2018-04-24T18:32:31Z'>
		Ok, so I have done quite some digging on this and I am not to the bottom of it yet, but I have both a workaround and the information I need to keep digging.
The problem can be worked around (technically in an unsafe manner because it does not solve the actual problem) by moving the definition of arma::sp_mat groundTruth to the last member of SoftmaxRegressionFunction.
The smoking gun is this.  When I run std::cout &lt;&lt; "sizeof(arma::sp_mat): " &lt;&lt; sizeof(arma::sp_mat) inside SoftmaxRegressionFunction::SoftmaxRegressionFunction() (i.e. in softmax_regression_function.cpp), I get:
&lt;denchmark-code&gt;sizeof(arma::sp_mat): 160
&lt;/denchmark-code&gt;

but when I run the same from softmax_regression_impl.hpp, I get:
&lt;denchmark-code&gt;sizeof(arma::sp_mat): 208
&lt;/denchmark-code&gt;

So the definitions of the class are different during compilation of mlpack and of the test program.  And I haven't yet figured out exactly why that is.  I'll keep you updated as I get deeper into it.
		</comment>
		<comment id='10' author='bqv' date='2018-04-25T15:36:32Z'>
		Ok, the real issue here is that when mlpack was compiled, it was compiled with OpenMP.  But when you compile with g++, the -fopenmp option isn't specified.  This happens to change the size of the Armadillo sparse matrix (which behaves differently with and without OpenMP).  So, if you compile with -fopenmp, this should resolve the issue.
I'm now working on a patch that will at least issue a warning during compilation if mlpack was compiled with -fopenmp and the program linking against mlpack is not using OpenMP.
		</comment>
		<comment id='11' author='bqv' date='2018-04-26T18:21:00Z'>
		I opened &lt;denchmark-link:https://github.com/mlpack/mlpack/pull/1382&gt;#1382&lt;/denchmark-link&gt;
, which will issue a clear warning in situations like this.  Once we merge that, I'll go ahead and release mlpack 3.0.1 and close this issue.  Please do feel free to comment there (or here) if you have any input about the patch.
		</comment>
		<comment id='12' author='bqv' date='2018-04-30T15:30:53Z'>
		Fixed with the merge of &lt;denchmark-link:https://github.com/mlpack/mlpack/pull/1382&gt;#1382&lt;/denchmark-link&gt;
.  I'll go ahead and release mlpack 3.0.1 as a bugfix with this incorporated shortly.
		</comment>
	</comments>
</bug>