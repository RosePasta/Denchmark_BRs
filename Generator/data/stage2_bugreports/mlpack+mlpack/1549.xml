<bug id='1549' author='zsogitbe' open_date='2018-10-25T19:12:47Z' closed_time='2019-02-25T22:26:39Z'>
	<summary>CNN crash, possible connection to 'ANN Input/Output Size #1267'</summary>
	<description>
When running DigitRecognizerCNN.cpp from 'models' the calculation crashes at the first training run (optimization) in Mat_meat.hpp (armadillo) at line 809:
arrayops::copy( memptr(), in_mat.mem, in_mat.n_elem );
in function:
&lt;denchmark-code&gt;template&lt;typename eT&gt;
inline
Mat&lt;eT&gt;&amp;
Mat&lt;eT&gt;::operator=(const Mat&lt;eT&gt;&amp; in_mat)
&lt;/denchmark-code&gt;

which is called by (in convolution_impl.hpp ):
arma::Mat&lt;eT&gt; deltaSlice = mappedError.slice(outMap);
in template function:
&lt;denchmark-code&gt;::Gradient(
    const arma::Mat&lt;eT&gt;&amp;&amp; /* input */,
    arma::Mat&lt;eT&gt;&amp;&amp; error,
    arma::Mat&lt;eT&gt;&amp;&amp; gradient)
&lt;/denchmark-code&gt;

It gives an error:
Exception thrown at 0x00007FFEF2D4C3C7 (vcruntime140.dll) in sample-ml-app.exe: 0xC0000005: Access violation reading location 0x00000294CD481000.
It is most probably a parameter size problem in the convolution network which causes memory corruption.
I am experiencing a lot of problems with CNN networks (random crashes). If the problem is found and corrected then I think that a further step will be needed to make the code more robust and less error/crash prone. It is not OK to just crash when there is a wrong parameter (from the user or from the algorithm itself). I think that some kind of parameter check should be built in and probably more exception handling where needed...
Update:
After further investigation setting the BATCH_SIZE to 1 (instead of the original 50) solves the crash problem. In this way it probably stays in the allocated memory.
	</description>
	<comments>
		<comment id='1' author='zsogitbe' date='2018-10-29T22:48:59Z'>
		Ah, thanks for the update about the batch size.  That should make finding the issue easier.
I took a quick look in valgrind a few days ago when you filed this and saw all kinds of invalid memory accesses, but I haven't had the time to track down the exact code that's failing quite yet.
		</comment>
		<comment id='2' author='zsogitbe' date='2018-11-02T03:06:36Z'>
		I opened &lt;denchmark-link:https://github.com/mlpack/mlpack/pull/1554&gt;#1554&lt;/denchmark-link&gt;
; this should fix the issue.
		</comment>
		<comment id='3' author='zsogitbe' date='2019-02-18T21:27:08Z'>
		This issue has been automatically marked as stale because it has not had any recent activity.  It will be closed in 7 days if no further activity occurs.  Thank you for your contributions! üëç
		</comment>
	</comments>
</bug>