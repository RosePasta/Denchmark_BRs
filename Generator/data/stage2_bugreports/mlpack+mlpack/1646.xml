<bug id='1646' author='mascaretti' open_date='2019-01-09T17:49:50Z' closed_time='2019-01-23T02:37:12Z'>
	<summary>[NMF] Python binding inverting H and W</summary>
	<description>
The documentation of Non-negative matrix factorization Python binding states:

This program performs non-negative matrix factorization on the given dataset,
storing the resulting decomposed matrices in the specified files.  For an
input dataset V, NMF decomposes V into two matrices W and H such that
V = W * H
where all elements in W and H are non-negative.  If V is of size (n x m), then
W will be of size (n x r) and H will be of size (r x m), where r is the rank
of the factorization (specified by the 'rank' parameter).

However, this is contradicted by the execution of the following code.
import numpy as np
import mlpack as ml

#Setting dimensions
n = 10
m = 6
r = 2

#Creating W_0, H_0 and V
W_0 = np.random.uniform(low = 0.0, high = 1.0, size = (n, r))
H_0 = np.random.uniform(low = 0.0, high = 1.0, size = (r, m))
V_0 = W_0.dot(H_0)

#Running NMF with the expected input parameter
output_mlpack = ml.nmf(input = V_0, rank = r,
                       initial_w = W_0, initial_h = H_0,
                       seed = 20190101,
                       verbose = True)

&gt;&gt;&gt; Traceback (most recent call last):
&gt;&gt;&gt;
&gt;&gt;&gt; File "&lt;ipython-input-13-f731a0019f9d&gt;", line 4, in &lt;module&gt;
&gt;&gt;&gt; verbose = True)
&gt;&gt;&gt;
&gt;&gt;&gt; File "mlpack/nmf.pyx", line 156, in mlpack.nmf.nmf
&gt;&gt;&gt;
&gt;&gt;&gt; RuntimeError: fatal error; see Log::Fatal output
&gt;&gt;&gt;

#Running NMF with the SWITCHED input parameters
output_mlpack = ml.nmf(input = V_0, rank = r,
                       initial_w = H_0, initial_h = W_0,
                       seed = 20190101,
                       verbose = True)

H = output_mlpack['h']
H.shape
&gt;&gt;&gt; (10, 2)

W = output_mlpack['w']
W.shape
&gt;&gt;&gt; (2, 6)

#Checking Frobenius norms ||W, H_0||_{F} and ||H, W_0||_{F}
numpy.linalg.norm(W_0 - H)
&gt;&gt;&gt; 3.296522366252803e-16
numpy.linalg.norm(H_0 - W)
&gt;&gt;&gt; 2.790263751007313e-16
	</description>
	<comments>
		<comment id='1' author='mascaretti' date='2019-01-15T02:03:53Z'>
		You're right, thanks for pointing this out.  I've opened &lt;denchmark-link:https://github.com/mlpack/mlpack/pull/1663&gt;#1663&lt;/denchmark-link&gt;
 to fix the issue.
Long (potentially boring) details of why this happened: mlpack uses a column-major representation of matrices, since this is what Armadillo (and under it, FORTRAN libraries like LAPACK and BLAS) use.  Due to the numpy/C++ conversion, when the V_0 matrix gets to mlpack, it receives a matrix of size 6x10 (not 10x6 as you wrote it) and decomposes it like that, giving W in C++ of size 6x2 and H in C++ of size 2x10.  But since the matrices will again be interpreted as transposed when you get them back in Python, you get a W output matrix of size 2x6 and H of size 10x2.  Which would be the exact opposite of what you want!  In addition, our tests for the nmf() binding didn't pick this issue up, since those test bindings don't transpose the matrix on input.  The solution, then, is just to return the H matrix as W and the W matrix as H, and do the same with the initial_h and initial_w parameters. :)
Thanks for pointing out the issue!  Until it is merged, your workaround of just using the opposite names works fine and gives equivalent results.
		</comment>
	</comments>
</bug>