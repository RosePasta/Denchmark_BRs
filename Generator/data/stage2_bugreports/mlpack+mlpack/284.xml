<bug id='284' author='rcurtin' open_date='2014-12-29T13:46:19Z' closed_time='2015-01-09T01:59:48Z'>
	<summary>[OS X] bus error at execution</summary>
	<description>
Reported by natal on 30 Jan 43588055 00:14 UTC
I'm under OS X 10.8.4.
The situation is the following:

An mlpack library built with g++ 4.8.
A very simple program compiled with g++ 4.8 :

&lt;denchmark-code&gt;#include &lt;gmm.hpp&gt;
#include &lt;iostream&gt;

void main()
{
  std::cout &lt;&lt; "Hello World" &lt;&lt; std::endl;
}
&lt;/denchmark-code&gt;


With the following compilation line:

&lt;denchmark-code&gt;/opt/local/bin/g++-mp-4.8 -std=c++11 src/main.cc -I/usr/local/include/mlpack -I/usr/local/include/mlpack/methods/gmm -I/opt/local/include/libxml2 -L/usr/local/lib -L/opt/local/lib -lmlpack -larmadillo -o explore
&lt;/denchmark-code&gt;

The problem is the following:

It compiles with no error and produces the following output at execution :

&lt;denchmark-code&gt;bus error  ./explore
&lt;/denchmark-code&gt;


Using a debugger on this gives the following :

&lt;denchmark-code&gt;$&gt; lldb ./explore
Current executable set to './explore' (x86_64).
(lldb) r
Process 46643 launched: './explore' (x86_64)
Process 46643 stopped
* thread #1: tid = 0x1c03, 0x000000010001112f libmlpack.1.dylib`boost::math::lanczos::lanczos_initializer&lt;boost::math::lanczos::lanczos17m64, long double&gt;::init::init() + 63, 
     []stop reason = EXC_BAD_ACCESS (code=2, address=0x100002600)
    frame #0: 0x000000010001112f libmlpack.1.dylib`boost::math::lanczos::lanczos_initializer&lt;boost::math::lanczos::lanczos17m64, long double&gt;::init::init() + 63
libmlpack.1.dylib`boost::math::lanczos::lanczos_initializer&lt;boost::math::lanczos::lanczos17m64, long double&gt;::init::init() + 63:
-&gt; 0x10001112f:  fstpt  (%rax)
   0x100011131:  fldt   394489(%rip)
   0x100011137:  fstpt  16(%rax)
   0x10001113a:  fldt   394496(%rip)
&lt;/denchmark-code&gt;

Migrated-From: &lt;denchmark-link:http://trac.research.cc.gatech.edu/fastlab/ticket/296&gt;http://trac.research.cc.gatech.edu/fastlab/ticket/296&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='rcurtin' date='2014-12-30T04:40:19Z'>
		Commented by rcurtin on 6 Jul 43588537 02:40 UTC
Uh-oh, I don't think this one is going to be very much fun.  A bus error generally indicates that there is an instruction being called with incorrect or misaligned parameters or something similar to that.  It seems to be failing somewhere in boost::math.  Let's see if we can pinpoint what's causing the error a bit more.  Can you try the following things and report if they give the bus error?

Compile without -std=c++11
Compile using g++-48 not g++-mp-48
Compile with -mtune=generic

Let me know what that gives.  I will see if I can get an OS X system running to reproduce this on.
		</comment>
		<comment id='2' author='rcurtin' date='2014-12-30T04:41:19Z'>
		Commented by natal on 8 Dec 43595808 09:13 UTC
Hi rcurtin and thanks for your reply,

Compile without -std=c++11

That actually works, but I'm going to need the c++11 standard :( , I'm assuming mlpack should not be incompatible with it.

Compile using g++-48 not g++-mp-48

Tried that, I get the same bus error.

Compile with -mtune=generic

Tried that too, no difference.
		</comment>
		<comment id='3' author='rcurtin' date='2014-12-30T04:42:19Z'>
		Commented by rcurtin on 9 Sep 43596817 03:10 UTC
Interesting.  Now let's try to dig a little deeper.  I suspect the problem to be in boost somewhere.  Can you try this sample program (compiled with the same options as you originally were) and see what it gives?
&lt;denchmark-code&gt;#include &lt;boost/math/special_functions/gamma.hpp&gt;
#include &lt;iostream&gt;

void main()
{
  std::cout &lt;&lt; "Hello bus error world" &lt;&lt; std::endl;
}
&lt;/denchmark-code&gt;

Let me know what that gives.  If that's still giving the bus error, then we can start digging into Boost until we have the relevant information, then file a bug there.
		</comment>
		<comment id='4' author='rcurtin' date='2014-12-30T04:43:20Z'>
		Commented by natal on 16 Feb 43596839 12:09 UTC
This little program works and outputs the following as expected:
&lt;denchmark-code&gt;Hello bus error world
&lt;/denchmark-code&gt;

Now I wasn't sure whether you forgot to include gmm.hpp of mlpack. The simple inclusion of that file seems to generate the bus error we are looking at.
Here it is :
&lt;denchmark-code&gt;#include &lt;boost/math/special_functions/gamma.hpp&gt;
#include &lt;iostream&gt;
#include &lt;gmm.hpp&gt;

int main()
{
  std::cout &lt;&lt; "Hello bus error world" &lt;&lt; std::endl;
  return 0;
}

&lt;/denchmark-code&gt;

This generates the bus error.
		</comment>
		<comment id='5' author='rcurtin' date='2014-12-30T04:44:20Z'>
		Commented by rcurtin on 9 Sep 43596872 01:03 UTC
Nope, that was intentional to ignore gmm.hpp.  I want to figure out what exactly is being included that causes the error.  I'm going to start working on getting a system set up to reproduce this so I can dig deeper.  I'll update this ticket in a handful of hours with my results...
		</comment>
		<comment id='6' author='rcurtin' date='2014-12-30T04:45:20Z'>
		Commented by rcurtin on 21 Sep 43602308 15:53 UTC
Ok, I'm sorry for the slow response.  I had some trouble with my VMs. :)
The VM I have is OS X 10.7 not 10.8, and I could not reproduce the problem using any of the tools port made available.  I tried various versions of gcc (up to 4.8) and Boost 1.54 but could not reproduce the bus error.  While I dig up a 10.8 system to test on, can I ask you to try the following couple of things, if you have a chance?

Compile against a different version of Boost
Is mlpack being compiled with the same compiler (g++-mp-4.8) as the test program?
Is this a hackintosh system or an actual Mac? (this shouldn't make a difference, but I suppose it could)
Do you have libmlpack.so present anywhere else on your system than in /usr/local/lib/?

mlpack should compile fine with -std=c++11; I have not had problems doing that on other platforms.
Also, I've had to modify your test program a little; 'void main()' throws an error; I had to replace it with 'int main()'.
I should have a 10.8.4 box to test on soon; I'll let you know how that goes.  Sorry that this is taking a long time to hunt down...
		</comment>
		<comment id='7' author='rcurtin' date='2014-12-30T04:46:20Z'>
		Commented by natal on 16 Jun 43604061 08:02 UTC

Ok, I'm sorry for the slow response. I had some trouble with my VMs. :)

No problem I'm not lightning fast either. :)

I'm trying several versions of boost (already tried 1.53 and 1.54 without success), I'm trying older versions now 1.30 to 1.46. This is taking a little bit of time since I recompile the whole boost library each time.
mlpack is indeed being compiled with the same compiler.
This is an actual Mac (The latest macbook pro retina to be more specific).
Checked that with a find on the entire system. It is indeed only present in /usr/local/lib.


Sorry that this is taking a long time to hunt down...
No worries, I'm not in a hurry.

Thank you for your help!
		</comment>
		<comment id='8' author='rcurtin' date='2014-12-30T04:47:20Z'>
		Commented by natal on 2 Aug 43604082 21:00 UTC
Actually for the second point (is mlpack being compiled with g++-mp-48), it's hard to verify that cmake is doing the job correctly. I simply specified at the beginning of the CMakeList.txt :
&lt;denchmark-code&gt;SET(CMAKE_C_COMPILER /opt/local/bin/gcc-mp-4.8)
SET(CMAKE_CXX_COMPILER /opt/local/bin/g++-mp-4.8)
&lt;/denchmark-code&gt;

Is this the right way to do it ?
		</comment>
		<comment id='9' author='rcurtin' date='2014-12-30T04:48:21Z'>
		Commented by rcurtin on 24 Sep 43604776 22:40 UTC
Yeah, that is the correct way to set the CMake compiler.  You can also do it from the command line when you call CMake:
&lt;denchmark-code&gt;$ cmake -D CMAKE_C_COMPILER=/opt/local/bin/gcc-mp-4.8 -D CMAKE_CXX_COMPILER=/opt/local/bin/g++-mp-4.8
&lt;/denchmark-code&gt;

Everything else you are doing seems okay.  If a couple different versions of Boost don't fix the issue, I wouldn't bother trying every possible version between 1.30 and 1.54; that's very tedious and I don't think it'll be likely to work, if you've already tried a few and they also fail.
It may be worth trying clang as a compiler, too.
I am in the process of hunting down a Mountain Lion system to use.  When I have that, I'll be able to reproduce and debug this much better.
		</comment>
		<comment id='10' author='rcurtin' date='2014-12-30T04:49:21Z'>
		Commented by rcurtin on 18 Sep 43611144 15:54 UTC
Bad news.  I got an OS X 10.8.4 system set up, installed g++-mp-4.8 using MacPorts (and also cmake, boost 1.54, armadillo, and other related packages), built mlpack successfully, and then I built your test program and was unable to reproduce the bug.
Can you add your CMakeCache.txt (found in the mlpack build directory) so maybe I can make sure there's not some software version I'm missing?
I suspect this may be hardware-specific, which is why my VM cannot reproduce this.  I'm going to try and find a Pro Retina system, but I'm not sure if I'll have success.
		</comment>
		<comment id='11' author='rcurtin' date='2014-12-30T04:50:21Z'>
		Commented by natal on 11 Mar 43615160 08:15 UTC
Sorry I was gone for a few days.
I've attached the CMakeCache.txt to this ticket.
Interesting... Something hardware specific related to gcc on the Pro Retina ?
I've installed clang and it seems to be working after I compile with the following options:
clang++ -stdlib=libc++ -std=c++0x src/main.cc -I/usr/local/include/mlpack/methods/gmm -I/opt/local/include/libxml2 -L/usr/local/lib -lmlpack -larmadillo -o explore
I'm just going to end up using clang for now, but this thing with g++ grinds my gears.
I've also attached a tarball of the mini test project to this ticket.
Again, thank you for according time and effort to this.
		</comment>
		<comment id='12' author='rcurtin' date='2014-12-30T04:51:21Z'>
		
I recently encountered a similar issue in &lt;denchmark-link:http://quantlib.org&gt;QuantLib&lt;/denchmark-link&gt;
 and brought it up for &lt;denchmark-link:http://lists.cs.uiuc.edu/pipermail/cfe-dev/2014-April/036279.html&gt;discussion on the cfe-dev mailing list&lt;/denchmark-link&gt;
.  I'm not sure if it is the same issue, but the issue I was experiencing was due to C++11 ABI incompatibility for static initialization which occurred due to the  variables in .
To test if this may be the issue in your case as well, try running the following commands:
&lt;denchmark-code&gt;nm /usr/local/lib/libmlpack.dylib | c++filt | grep ::num$ | fgrep -v 'guard variable'
nm explore | c++filt | grep ::num$ | fgrep -v 'guard variable'
&lt;/denchmark-code&gt;

That should print out the long double boost::math::lanczos::lanczos17m64::lanczos_sum&lt;long double&gt;(long double const&amp;)::num symbol in each binary (and possibly other symbols).  Check that all occurrences of that symbol have the same symbol type (either "D" if C++98 mode or "S" if C++11 mode).  If not, EXC_BAD_ACCESS is likely to occur.
Hope that helps,
Kevin
		</comment>
		<comment id='13' author='rcurtin' date='2015-01-09T01:59:48Z'>
		Closing for inactivity, and also because the bug appears to have been in Boost anyway.
		</comment>
	</comments>
</bug>