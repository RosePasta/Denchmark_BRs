<bug id='2630' author='GLmontanari' open_date='2020-09-22T15:28:56Z' closed_time='2020-09-23T12:06:52Z'>
	<summary>DecisionTree performing poorly  on simple datasets</summary>
	<description>
&lt;denchmark-h:h4&gt;Issue description&lt;/denchmark-h&gt;

Hello,
I'm trying to fine tune a DecisionTree classifier. The call to Optimize() returns the first value in each vector of parameters instead of looking for the best ones.
&lt;denchmark-h:h4&gt;My environment&lt;/denchmark-h&gt;


version of mlpack: 3.4.1
operating system: Windows 10
compiler: msvc 14.6
version of dependencies (Boost/Armadillo): boost 1.64, armadillo 9.900.1

&lt;denchmark-h:h4&gt;Steps to reproduce&lt;/denchmark-h&gt;

Here is my code.
&lt;denchmark-code&gt;	double test_perc = 0.5;
	size_t numClasses = 2;
	double validationSize = 0.2;
	arma::vec leaf_sizes{ 2, 5, 10, 15, 20, 30 };
	arma::vec min_splits{ 1e-4, 1e-5, 1e-6, 1e-7, 1e-8, 1e-9 };
	arma::vec depths{ 2, 3, 5, 10, 13, 20 };

	mlpack::data::Split(data, labels, train_x, test_x, train_y, test_y, test_perc);

	mlpack::hpt::HyperParameterTuner&lt;mlpack::tree::DecisionTree&lt;&gt;,
		mlpack::cv::Accuracy,
		mlpack::cv::SimpleCV, 
		ens::GridSearch&gt; hpt(validationSize, train_x, train_y, numClasses);

	// grid search + get best model
	size_t best_leaf, best_depth;
	double best_split;

	std::tie(best_leaf, best_split, best_depth) = hpt.Optimize(leaf_sizes, min_splits, depths);

	mlpack::tree::DecisionTree&lt;&gt; clf = hpt.BestModel();
	std::cout &lt;&lt; "Best score: " &lt;&lt; hpt.BestObjective() &lt;&lt; "\n";
	std::cout &lt;&lt; "min_leaf_split: " &lt;&lt; best_leaf &lt;&lt; "\n";
	std::cout &lt;&lt; "max_depth: " &lt;&lt; best_depth &lt;&lt; "\n";
	std::cout &lt;&lt; "min_split_gain: " &lt;&lt; best_split &lt;&lt; "\n";
&lt;/denchmark-code&gt;

&lt;denchmark-h:h4&gt;Expected behavior&lt;/denchmark-h&gt;

I was expecting to find the best choice for each parameter in the std::tie but got the first value from each vector instead.
&lt;denchmark-h:h4&gt;Actual behavior&lt;/denchmark-h&gt;

Moreover. I always get Best score = 1 while I am getting lower (and more credible) accuracy scores, around 95% using other libraries.
p.s.: should I attach the data I used?
	</description>
	<comments>
		<comment id='1' author='GLmontanari' date='2020-09-23T07:12:45Z'>
		Changing dataset solved the problem. Closing this issue.
		</comment>
		<comment id='2' author='GLmontanari' date='2020-09-23T09:17:01Z'>
		&lt;denchmark-link:https://user-images.githubusercontent.com/43607219/93992780-43a08c80-fd8e-11ea-8889-46aa01634ebe.png&gt;&lt;/denchmark-link&gt;

		</comment>
		<comment id='3' author='GLmontanari' date='2020-09-23T09:20:53Z'>
		Actually the DecisionTree seems to struggle on too simple problems, like the above one.
If for instance I labeled reddish pixels as class "0" and bluish pixels as class "1". I would get a poor result even though the Best score return from the function hpt.BestObjective() is = 1;
The colors overlap in RGB, but the decision is trivial in HSV where the separation is linear in the Hue.
		</comment>
		<comment id='4' author='GLmontanari' date='2020-09-23T09:25:15Z'>
		Some rows from the data file are like these:
&lt;denchmark-code&gt;labels, r, g, b
0,164,73,163
0,164,73,163
1,232,162,0
1,232,162,0
&lt;/denchmark-code&gt;

These data are picked directly from the image and stored in a csv.
Here is how I fed it to the classifier:
&lt;denchmark-code&gt;	// LOAD
	printf("Loading Data...\n");
        std::string filename = "data.csv";
	arma::mat full;
	mlpack::data::DatasetInfo info;
	mlpack::data::Load(filename, full, info, false, true);

	printf("Splitting data:...\n");
	arma::mat data = full.submat(arma::span(1, 3), arma::span::all);  // data only

	arma::rowvec lb = full.row(0);
	arma::Row&lt;size_t&gt; lb_u = arma::conv_to&lt;arma::Row&lt;size_t&gt;&gt;::from(lb);

	// TRAIN TEST SPLIT
	arma::mat trainData;
	arma::mat testData;
	arma::Row&lt;size_t&gt; trainLabel;
	arma::Row&lt;size_t&gt; testLabel;
	mlpack::data::Split(data, lb_u, trainData, testData, trainLabel, testLabel, 0.65);
	std::cout &lt;&lt; trainLabel.n_cols &lt;&lt; " samples are being evaluated...\n";
	// TRAINING + VALIDATION
	size_t numClasses = 2;
	double validationSize = 0.2;

	arma::Col&lt;size_t&gt; leaf_sizes{ 2, 5, 10, 15, 20, 30 };
	arma::vec min_splits{ 1e-4, 1e-5, 1e-6, 1e-7, 1e-8, 1e-9 };
	arma::Col&lt;size_t&gt; depths{ 2, 3, 5, 10, 13, 20, 30 };

	// hpt
	mlpack::hpt::HyperParameterTuner&lt;mlpack::tree::DecisionTree&lt;&gt;,
		mlpack::cv::Accuracy,
		mlpack::cv::SimpleCV&gt; hpt(validationSize, trainData, trainLabel, numClasses);

	size_t best_leaf, best_depth, best_class;
	double best_split;

	printf("Searching grid parameters and generating cube...\n");
	std::tie(best_leaf, best_split, best_depth) = hpt.Optimize(leaf_sizes, min_splits, depths);

	std::cout &lt;&lt; "Best score: " &lt;&lt; hpt.BestObjective() &lt;&lt; "\n";
	std::cout &lt;&lt; "min_leaf_split: " &lt;&lt; best_leaf &lt;&lt; "\n";
	std::cout &lt;&lt; "max_depth: " &lt;&lt; best_depth &lt;&lt; "\n";
	std::cout &lt;&lt; "min_split_gain: " &lt;&lt; best_split &lt;&lt; "\n";
	mlpack::tree::DecisionTree&lt;&gt; clf = hpt.BestModel();
&lt;/denchmark-code&gt;

		</comment>
		<comment id='5' author='GLmontanari' date='2020-09-23T09:32:37Z'>
		Here is how I generate a "prediction image" using opencv:
&lt;denchmark-code&gt;#include &lt;opencv2/opencv.hpp&gt;

// A color palette
cv::Vec3b palette[4] = { cv::Vec3b(36, 28, 237),  // red
	cv::Vec3b(76, 177, 34),  // green
};

cv::Mat src_img = cv::imread("test.png", cv::IMREAD_UNCHANGED);
cv::Mat dst_img(src_img.rows, src_img.cols, CV_8UC3); // prediction image

for (size_t i = 0; i &lt; src_img.rows; i++)
{
	for (size_t j = 0; j &lt; src_img.cols; j++)
	{
		uchar x = src_img.at&lt;cv::Vec4b&gt;(i, j).val[0];
		uchar y = src_img.at&lt;cv::Vec4b&gt;(i, j).val[1];
		uchar z = src_img.at&lt;cv::Vec4b&gt;(i, j).val[2];
		
                arma::rowvec xp = { (double)x, (double)y, (double)z };  // Classify needs 'double'
		int prediction = (int)(clf.Classify(xp));
		dst_img.at&lt;cv::Vec3b&gt;(i, j) = palette[prediction];
	}
}

cv::imshow("decision", dst_img);
cv::waitKey(0);
&lt;/denchmark-code&gt;

The idea is to assign each pixel of the image a class, red or green.
		</comment>
		<comment id='6' author='GLmontanari' date='2020-09-23T09:41:49Z'>
		Even though the score seems perfect:
&lt;denchmark-link:https://user-images.githubusercontent.com/43607219/93995612-86b02f00-fd91-11ea-94c2-283aea0748fc.PNG&gt;&lt;/denchmark-link&gt;

The final result is not:
&lt;denchmark-link:https://user-images.githubusercontent.com/43607219/93995661-97f93b80-fd91-11ea-899a-928b40774879.png&gt;&lt;/denchmark-link&gt;

Here I applied a black mask to the background.
The four points on the left should be "red" while the points on the red "green".
Can anyone help?
		</comment>
		<comment id='7' author='GLmontanari' date='2020-09-23T12:06:52Z'>
		Shameful. My fault: I was calling my routine twice, so the second time it performed the classification on the decision image from the previous round. Closing this issue.
		</comment>
		<comment id='8' author='GLmontanari' date='2020-09-25T23:36:30Z'>
		&lt;denchmark-link:https://github.com/GLmontanari&gt;@GLmontanari&lt;/denchmark-link&gt;
 no worries!  Glad you got it worked out.  If you have issues in the future, please feel free to report them too.  I wonder if the default parameters for  could be tuned to be better in general, but it doesn't look like that might have been part of the problem here. 
		</comment>
	</comments>
</bug>