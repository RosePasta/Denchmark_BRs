<bug id='2358' author='Trento89' open_date='2020-04-06T19:37:09Z' closed_time='2020-04-07T11:49:19Z'>
	<summary>1x0 matrix</summary>
	<description>
&lt;denchmark-h:h4&gt;Issue description&lt;/denchmark-h&gt;

When passing an arma::Row&lt;size_t&gt; object into the Train() method of mlpack::regression::LogisticRegression, I get an error message stating that the program is being terminated due to incompatible matrix dimensions.  Only problem is that one of the matrices is shown with the wrong dimensions, specifically 1x0 when it is actually supposed to be 1x4.
&lt;denchmark-h:h4&gt;Your environment&lt;/denchmark-h&gt;


version of mlpack: 3.0.4-1
operating system: Debian 10 (Buster)
compiler: g++
version of dependencies (Boost/Armadillo): Armadillo 1:9.200.7+dfsg-1
any other environment information you think is relevant:

&lt;denchmark-h:h4&gt;Steps to reproduce&lt;/denchmark-h&gt;

Compile the program below using the command   and then execute it.
&lt;denchmark-link:https://github.com/mlpack/mlpack/files/4440460/bug_reproduction.cpp.txt&gt;bug_reproduction.cpp.txt&lt;/denchmark-link&gt;

&lt;denchmark-h:h4&gt;Expected behavior&lt;/denchmark-h&gt;

Program trains a model based on the hardcoded values specified in the program.
&lt;denchmark-h:h4&gt;Actual behavior&lt;/denchmark-h&gt;

The following output appears in the terminal:

error: matrix multiplication: incompatible matrix dimensions: 1x0 and 3x4
terminate called after throwing an instance of 'std::logic_error'
what():  matrix multiplication: incompatible matrix dimensions: 1x0 and 3x4
Aborted

	</description>
	<comments>
		<comment id='1' author='Trento89' date='2020-04-07T00:22:33Z'>
		Hey there &lt;denchmark-link:https://github.com/Trento89&gt;@Trento89&lt;/denchmark-link&gt;
, thanks for the clear and concise bug report.  I had to modify the code a little bit to get it to compile, but it's quite similar:
&lt;denchmark-code&gt;#include &lt;iostream&gt;
#include &lt;string&gt;
#include &lt;filesystem&gt;
#include &lt;vector&gt;
#include &lt;algorithm&gt;

#include &lt;mlpack/core.hpp&gt;
#include &lt;mlpack/methods/logistic_regression/logistic_regression.hpp&gt;

using namespace arma;
using namespace mlpack;

int main(){
  mat myMatrix;

  myMatrix &lt;&lt; 0.555950 &lt;&lt; 0.274690 &lt;&lt; 0.540605 &lt;&lt; 0.798938 &lt;&lt; endr
	   &lt;&lt; 0.948014 &lt;&lt; 0.973234 &lt;&lt; 0.216504 &lt;&lt; 0.883152 &lt;&lt; endr
	   &lt;&lt; 0.023787 &lt;&lt; 0.675382 &lt;&lt; 0.231751 &lt;&lt; 0.450332 &lt;&lt; endr;

  Row&lt;size_t&gt; myTargets = Row&lt;size_t&gt;("1 0 1 0");

  std::cout &lt;&lt; myMatrix &lt;&lt; "\n\n" &lt;&lt; myTargets &lt;&lt; "\n\n";

  regression::LogisticRegression&lt;&gt; lr;

  lr.Train(myMatrix,myTargets);

  return 0;
}
&lt;/denchmark-code&gt;

I found that the problem still exists on the git master branch, and then I dug a bit more and figured out what was wrong.  &lt;denchmark-link:https://github.com/mlpack/mlpack/pull/2359&gt;#2359&lt;/denchmark-link&gt;
 fixes the issue, so once that's merged (...and eventually pushed to Debian) the problem should be solved.
In the mean time, you can work around the issue by initializing the LogisticRegression object at the same time as training it:
&lt;denchmark-code&gt;regression::LogisticRegression&lt;&gt; lr(myMatrix, myTargets);
// no separate call to Train() necessary
&lt;/denchmark-code&gt;

Thanks for the bug report! üëç
		</comment>
	</comments>
</bug>