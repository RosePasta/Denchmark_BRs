<bug id='1223' author='conradsnicta' open_date='2018-02-03T06:19:47Z' closed_time='2018-02-07T18:03:40Z'>
	<summary>use of internal armadillo functions (diskio)</summary>
	<description>
Hi &lt;denchmark-link:https://github.com/rcurtin&gt;@rcurtin&lt;/denchmark-link&gt;
,
While implementing speedups in Armadillo's internal diskio class, I've discovered that mlpack is using an internal armadillo function:



mlpack/src/mlpack/core/data/load_arff_impl.hpp


         Line 200
      in
      a16363a






 if (!arma::diskio::convert_naninf(val, token.str())) 





I recommend changing the code so it doesn't use arma::diskio::convert_naninf().  I'm planning to remove that function.
In general, it's not a good idea to use internal Armadillo functions, as they are subject to change and/or removal without notice.  Armadillo has strong API guarantees for public user-facing functions, but not for internal functions.
In a nutshell, functions and classes that are described in the Armadillo documentation (&lt;denchmark-link:http://arma.sourceforge.net/docs.html&gt;docs.html&lt;/denchmark-link&gt;
) are considered as public API.   More info is given in the Armadillo &lt;denchmark-link:http://arma.sourceforge.net/docs.html#api_additions&gt;API policy&lt;/denchmark-link&gt;
.
	</description>
	<comments>
		<comment id='1' author='conradsnicta' date='2018-02-05T16:06:31Z'>
		Yep, you are fully right that we have left the reservation and are in uncharted territory.  But, rest assured that we are aware of the danger of our actions.  In this particular case, to give some context, we need to provide an ARFF reader, which Armadillo doesn't (and likely shouldn't since it has no notion of categorical variables; I think ARFF is out of scope for Armadillo).  We strongly desire that an ARFF will load identically to anything Armadillo loads, so we have to process non-numeric tokens in the same way Armadillo does.
This leaves us with two tough choices: (1) extract convert_naninf() and use it internally in mlpack, thus risking our ARFF reader getting out of sync when Armadillo's NaN/inf handling changes, or (2) use convert_naninf() in violation of the Armadillo API policy and then things may break with a new upstream release (which we try to monitor) and waste your time when you want to, e.g., make sure mlpack still builds and runs against a new experimental version of Armadillo.
I'd prefer for you to be able to avoid wasting your time screwing around with downstream software (although I don't at all mind the screwing around myself), so I am curious if you can think of a better idea for us to handle this issue.  I think there may be another couple instances where we have done things like this in the data loading code, and maybe we can come to a better solution that works for both projects.
		</comment>
		<comment id='2' author='conradsnicta' date='2018-02-06T13:15:32Z'>
		I think option (2) is a non-starter, as it will continue to cause problems.  I think the best bet is a form of option (1), where mlpack is handling inf/nan using its own adapted form of convert_naninf().
Note that convert_naninf() from Armadillo &lt;= 8.300 was used as part of a hacky stopgap until better handling of text files was devised.  In 8.400 I've refactored the approach for reading text files to be more efficient.  However, I'm still not happy with it, so the entire diskio class is subject to change.
Let's handle this issue first before looking at the others. In general it's not a good idea to use non-public APIs, as this causes problems for both projects.
		</comment>
		<comment id='3' author='conradsnicta' date='2018-02-06T13:31:44Z'>
		Sure, I think that is reasonable.  My concern again is just subtle incompatibilities between the two versions over time; right now we are able to accept inf, Inf, INF, nan, Nan, NaN, or NAN exactly the same way Armadillo does, but if someday you decide that naN is also acceptable, if we go with option (1) we suddenly have the situation where naN works with some formats in mlpack but not all.  That is unfortunate but not life-threatening...
It certainly doesn't make sense to expose something as trivial as convert_naninf() (or similar) to the Armadillo public API, so I don't have any ideas for how it can be "automatically detected" (like it currently is via build breakage I guess...) when things change.
For now I'll pull convert_naninf() into its own mlpack internal function, and when 8.400 is out maybe I will replace the implementation (depending on compatibility).
By the way, if you are redoing the disk I/O, one thought is that many times (at least in mlpack's context) a user wants to load a row-major CSV---i.e., each row is an observation---in such a way that in Armadillo, each column is an observation.  We do this now by wrapping Armadillo's public load functionality and then just transposing the matrix when it's all done.  But the ability to avoid the transpose can give speed gains; this is in part why we ended up replacing Armadillo's CSV reader with one made from boost::spirit.  (If your refactoring outperforms the boost::spirit implementation, I think it would be reasonable to switch back.)
		</comment>
		<comment id='4' author='conradsnicta' date='2018-02-07T01:32:18Z'>
		I think the slowest part is reading and interpreting the data. In comparison, transposing is a relatively cheap/fast operation. The CSV reader in &lt;= 8.300 is horribly inefficient, to put it politely.  In 8.400 it's about 2 to 3 times quicker, but it's still not the best.  To handle loading and transposing at the same time would require another file type (eg. csv_ascii_trans), which I'm currently not keen to add. It expands the API with (in my current view) only minor benefits (ie. the user only avoids one explicit call to the transpose function).
		</comment>
		<comment id='5' author='conradsnicta' date='2018-02-07T15:49:27Z'>
		Agreed, I just wanted to toss the idea out there if you saw an easy way to add it.  I'll benchmark the 8.400 CSV reader when it's ready and let you know how it compares to what you've implemented.  Once &lt;denchmark-link:https://github.com/mlpack/mlpack/pull/1226&gt;#1226&lt;/denchmark-link&gt;
 passes the checks I'll merge it and close this issue.
		</comment>
		<comment id='6' author='conradsnicta' date='2018-02-07T18:03:40Z'>
		Fixed in &lt;denchmark-link:https://github.com/mlpack/mlpack/pull/1226&gt;#1226&lt;/denchmark-link&gt;
.
		</comment>
	</comments>
</bug>