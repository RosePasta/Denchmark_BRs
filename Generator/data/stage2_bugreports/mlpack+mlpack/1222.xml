<bug id='1222' author='rcurtin' open_date='2018-02-02T14:55:18Z' closed_time='2018-02-16T14:11:28Z'>
	<summary>Greedy KNN doesn't always return enough results</summary>
	<description>
&lt;denchmark-link:https://github.com/nvasil&gt;@nvasil&lt;/denchmark-link&gt;
 pointed this one out.  If you try to use k-nearest-neighbor search with the greedy algorithm, it may not return results.  Here is a simple way to reproduce the issue:
&lt;denchmark-code&gt;$ bin/mlpack_knn -r test_data_3_1000.csv -k 3 -a greedy -n n.csv -d d.csv -l 1
&lt;/denchmark-code&gt;

That will calculate the nearest neighbors of every point in test_data_3_1000.csv (though any dataset will work) building a tree with a leaf size of 1 (meaning that every leaf in the tree holds only one point).  Since we are using the same query set as the reference set, a point cannot be its own nearest neighbor.  So for some point p, the greedy algorithm will descend the tree directly to the leaf containing only the point p, and no result will be saved.  In our example above, this means that no nearest neighbors are set; we can see that by looking at the results in n.csv and d.csv:
&lt;denchmark-code&gt;$ head d.csv
1.79769313486232e+308,1.79769313486232e+308,1.79769313486232e+308
1.79769313486232e+308,1.79769313486232e+308,1.79769313486232e+308
1.79769313486232e+308,1.79769313486232e+308,1.79769313486232e+308
1.79769313486232e+308,1.79769313486232e+308,1.79769313486232e+308
1.79769313486232e+308,1.79769313486232e+308,1.79769313486232e+308
1.79769313486232e+308,1.79769313486232e+308,1.79769313486232e+308
1.79769313486232e+308,1.79769313486232e+308,1.79769313486232e+308
1.79769313486232e+308,1.79769313486232e+308,1.79769313486232e+308
1.79769313486232e+308,1.79769313486232e+308,1.79769313486232e+308
1.79769313486232e+308,1.79769313486232e+308,1.79769313486232e+308
&lt;/denchmark-code&gt;

&lt;denchmark-code&gt;$ head n.csv
8017,8017,8017
8017,8017,8017
8017,8017,8017
8017,8017,8017
8017,8017,8017
8017,8017,8017
8017,8017,8017
8017,8017,8017
8017,8017,8017
8017,8017,8017
&lt;/denchmark-code&gt;

The responsible code is in src/mlpack/core/tree/greedy_single_tree_traverser_impl.hpp: the recursion there simply recurses until hitting a leaf node.  However, intuitively, the change that needs to happen is that for nearest neighbor search, we need to terminate the recursion and perform all the point-to-point base cases the level before referenceNode.NumDescendants() &lt; k.
This would be a good issue for someone who is looking to learn about the tree recursion code in mlpack.
	</description>
	<comments>
		<comment id='1' author='rcurtin' date='2018-02-03T12:16:52Z'>
		&lt;denchmark-link:https://github.com/rcurtin&gt;@rcurtin&lt;/denchmark-link&gt;
, I tried working up a solution as per your thought but it didn't workout as expected in case I implemented it correctly :-} . I think here reaching leaf node might not be a problem as this same thing is possible in single tree traverser which is working perfectly fine.
		</comment>
		<comment id='2' author='rcurtin' date='2018-02-04T22:27:11Z'>
		The issue should also occur in single-tree mode.  The reality is that if you use a tree that only holds points in the leaves (for instance, the kd tree), and the search goes to a leaf that has fewer than k points (given k, the number of nearest neighbors to be found), then fewer than k base cases will be calculated and it is not possible to get enough results.  Let me know if I can clarify.
		</comment>
		<comment id='3' author='rcurtin' date='2018-02-05T05:48:20Z'>
		The same thing is happening even if k&lt;l  i.e. if leaf size is greater than number of nearest neighbors to be found but the results are fully wrong in case of l=1 where as it's partially incorrect in case of other value of l. I can also reproduce the results if wanted!
		</comment>
		<comment id='4' author='rcurtin' date='2018-02-05T06:47:04Z'>
		would something like if(!referenceNode.IsLeaf()&amp;&amp;referenceNode.NumPoints()&gt;rule.ReturnK()) would suffice?
		</comment>
		<comment id='5' author='rcurtin' date='2018-02-05T07:47:09Z'>
		&lt;denchmark-link:https://github.com/rcurtin&gt;@rcurtin&lt;/denchmark-link&gt;
 Thanks for explaining it. Your point is correct. Although, I again tried implementing your thought but wasn't able to get correct results with  greedy technique :(
But I found a different way which I think is not appropriate for this greedy algorithm :P . Anyways, what I am doing is traverse each child for which  and take base cases for leaf node.
Do you think we will get correct answers using greedy technique for all the k neighbours? Because what I got from applying your thought is opposite. I got different number of neighbours for each point and also there distance values were different.
Result using greedy:
&lt;denchmark-code&gt;0.1426321851 | 1.797693134862E+308 | 1.797693134862E+308
0.0753263502 | 0.1012564716 | 1.797693134862E+308
0.1014588982 | 0.1025114622 | 1.797693134862E+308
0.0207940565 | 0.0759762241 | 1.797693134862E+308
0.0708220678 | 0.1291132661 | 1.797693134862E+308
0.1114177921 | 1.797693134862E+308 | 1.797693134862E+308
1.797693134862E+308 | 1.797693134862E+308 | 1.797693134862E+308
0.070053216 | 0.0949824889 | 1.797693134862E+308
0.0529565413 | 0.0550987776 | 1.797693134862E+308
0.0399285992 | 1.797693134862E+308 | 1.797693134862E+308
0.0445750687 | 0.0573780001 | 1.797693134862E+308
0.0783245827 | 0.0907960025 | 1.797693134862E+308
0.0341310761 | 1.797693134862E+308 | 1.797693134862E+308
0.0552182708 | 0.1647518421 | 1.797693134862E+308
0.0395976904 | 0.062051631 | 1.797693134862E+308
1.797693134862E+308 | 1.797693134862E+308 | 1.797693134862E+308
0.0492744676 | 0.0968926214 | 1.797693134862E+308
0.1286613786 | 0.1495178253 | 1.797693134862E+308
0.0097581094 | 0.0570186396 | 1.797693134862E+308
0.1170229822 | 1.797693134862E+308 | 1.797693134862E+308


&lt;/denchmark-code&gt;

Result using idea mentioned above:
&lt;denchmark-code&gt;0.0598607616 | 0.0766492052 | 0.1116050962
0.0753263502 | 0.1012564716 | 0.1127846945
0.0765957155 | 0.1014588982 | 0.1025114622
0.0207940565 | 0.0471072452 | 0.0759762241
0.0708220678 | 0.090023555 | 0.1044181406
0.0568805649 | 0.0947807251 | 0.1085637707
0.0788226088 | 0.0945447408 | 0.0972449418
0.070053216 | 0.0913141722 | 0.0949824889
0.0529565413 | 0.0550987776 | 0.0810822737
0.0399285992 | 0.0447141865 | 0.073460539
0.0445750687 | 0.0573780001 | 0.0903679676
0.0783245827 | 0.0865191243 | 0.0907960025
0.0341310761 | 0.0799304928 | 0.1090530984
0.0552182708 | 0.0673529902 | 0.1021350414
0.0384530836 | 0.0395976904 | 0.04778194
0.1311033012 | 0.1320480172 | 0.1382127282
0.0348579863 | 0.0492744676 | 0.0859905221
0.0859324086 | 0.1005912597 | 0.1016001991
0.0097581094 | 0.0570186396 | 0.0904668918
0.0551791376 | 0.0681901447 | 0.0982536657


&lt;/denchmark-code&gt;

		</comment>
		<comment id='6' author='rcurtin' date='2018-02-05T16:45:24Z'>
		
would something like if(!referenceNode.IsLeaf()&amp;&amp;referenceNode.NumPoints()&gt;rule.ReturnK()) would suffice?

No, unfortunately it will be somewhat more complicated than that, since the type of rule won't always be NeighborSearchRules, so we have no idea what k will be.  Instead I think that we might have to modify the abstraction a little bit, or come up with some other idea.  Probably the first step is to go through and understand the abstractions, then think about how the change can fit in.
		</comment>
		<comment id='7' author='rcurtin' date='2018-02-05T16:47:46Z'>
		(sorry, I should have put both replies in one post)
&lt;denchmark-link:https://github.com/manish7294&gt;@manish7294&lt;/denchmark-link&gt;
: the greedy algorithm isn't guaranteed to return absolutely correct nearest neighbors, but the problem here is just that we return any neighbors at all.  For the greedy algorithm, the key is to terminate the recursion and evaluate all of the base cases of the descendant points the level before .  Let me know if I can clarify that at all.
		</comment>
		<comment id='8' author='rcurtin' date='2018-02-05T21:11:13Z'>
		&lt;denchmark-link:https://github.com/rcurtin&gt;@rcurtin&lt;/denchmark-link&gt;
  I've tried k nearest neighbour using   class and the results are good. Only the command line executables are giving this problem
&lt;denchmark-code&gt;`arma::mat data;
data::Load("/home/prabhat/mlpack/build/test_data_3_1000.csv", data, true);
 NeighborSearch&lt;NearestNeighborSort, ManhattanDistance&gt;      
  nn(data,GREEDY_SINGLE_TREE_MODE);

arma::Mat&lt;size_t&gt; neighbors;
arma::mat distances; 

nn.Search(3, neighbors, distances);

for (size_t i = 0; i &lt; neighbors.n_elem; ++i)
{
    std::cout&lt;&lt;neighbors[i]&lt;&lt;" ";
    if((i+1)%3==0)
        std::cout&lt;&lt;std::endl;
}`
&lt;/denchmark-code&gt;

$n.csv
344 224 318
703 499 373
867 972 472
397 277 47
840 775 110
461 981 492
222 563 858
361 97 928
547 695 774
982 689 634
446 325 630
775 742 110
265 151 532
285 590 760
411 789 792
489 554 692
585 224 417
748 881 195
728 413 841`
$d.csv
0.108488 0.138312 0.183545
0.109522 0.167148 0.177869
0.123432 0.146277 0.152833
0.0346786 0.0956617 0.15383
0.100885 0.196909 0.214491
0.149752 0.186696 0.19092
0.101661 0.120551 0.156204
0.0984242 0.115957 0.134515
0.0861133 0.0937623 0.227091
0.0677189 0.0981646 0.166398
0.0571608 0.0839075 0.133213
0.102084 0.103348 0.110483
0.0509384 0.12166 0.160973
0.0647059 0.134153 0.254589
0.0426185 0.0607748 0.0682006
0.175355 0.235243 0.249511
0.0655169 0.121572 0.136042
0.12405 0.158826 0.190838
0.0134429 0.0804903 0.131459
0.0704913 0.100843 0.163065
0.137371 0.160489 0.199709
0.123084 0.126913 0.141647
0.0979585 0.14858 0.158917
0.104071 0.155138 0.179754
What can be the possible explanation of this I wonder!
		</comment>
		<comment id='9' author='rcurtin' date='2018-02-05T21:30:44Z'>
		I am not sure what n.csv or d.csv are since you are not saving anything to a file in the code snippet (maybe I misunderstood?) but in any case you should build the tree with leaf size == 1, or set k higher (like 50; the default leaf size is 20).
		</comment>
		<comment id='10' author='rcurtin' date='2018-02-05T22:16:15Z'>
		Actually I've just written n.csv and d.csv for your reference to understand. I'm just printing on terminal. Do you know where I can pass the leafsize as I couldn't find this parameter in the declaration of search function in NeighbourSearch class 😅
		</comment>
		<comment id='11' author='rcurtin' date='2018-02-06T13:07:58Z'>
		&lt;denchmark-link:https://github.com/rcurtin&gt;@rcurtin&lt;/denchmark-link&gt;
 just one more question. Do you think the result below is even slightly near to what you expect from greedy?
&lt;denchmark-code&gt;0.1426321851 | 1.797693134862E+308 | 1.797693134862E+308
0.0753263502 | 0.1012564716 | 1.797693134862E+308
0.1014588982 | 0.1025114622 | 1.797693134862E+308
0.0207940565 | 0.0759762241 | 1.797693134862E+308
0.0708220678 | 0.1291132661 | 1.797693134862E+308
0.1114177921 | 1.797693134862E+308 | 1.797693134862E+308
1.797693134862E+308 | 1.797693134862E+308 | 1.797693134862E+308
0.070053216 | 0.0949824889 | 1.797693134862E+308
0.0529565413 | 0.0550987776 | 1.797693134862E+308
0.0399285992 | 1.797693134862E+308 | 1.797693134862E+308
0.0445750687 | 0.0573780001 | 1.797693134862E+308
0.0783245827 | 0.0907960025 | 1.797693134862E+308
0.0341310761 | 1.797693134862E+308 | 1.797693134862E+308
0.0552182708 | 0.1647518421 | 1.797693134862E+308
0.0395976904 | 0.062051631 | 1.797693134862E+308
1.797693134862E+308 | 1.797693134862E+308 | 1.797693134862E+308
0.0492744676 | 0.0968926214 | 1.797693134862E+308
0.1286613786 | 0.1495178253 | 1.797693134862E+308
0.0097581094 | 0.0570186396 | 1.797693134862E+308
0.1170229822 | 1.797693134862E+308 | 1.797693134862E+308
&lt;/denchmark-code&gt;

		</comment>
		<comment id='12' author='rcurtin' date='2018-02-06T13:08:44Z'>
		Except for the 1.797693134862E+308, yes. :)  The 1.797693134862E+308 represents that no neighbor was found.
		</comment>
		<comment id='13' author='rcurtin' date='2018-02-06T13:10:21Z'>
		@Prabhat-IIT: you'll have to build the tree by hand.  Take a look at the overload of the constructor of NeighborSearch that takes a pre-built reference tree.  Some example code for tree building and passing it to NeighborSearch can be found in the tests, like in src/mlpack/tests/knn_test.cpp.
		</comment>
		<comment id='14' author='rcurtin' date='2018-02-06T13:10:35Z'>
		yes absolutely, so do you think that we will definitely get neighbor for each point using greedy?
		</comment>
		<comment id='15' author='rcurtin' date='2018-02-06T13:12:54Z'>
		Right now, if you use the greedy algorithm, it traverses to a leaf which may not contain k points---this is the whole problem.  We need to modify the algorithm so that the base case (rule.BaseCase(...)) is called on at least k points, and then k results will be returned for each query point.  The trickiness here is figuring out the best way to modify the greedy traverser in such a way that the traverser does not have a specific dependency on NeighborSearchRules (i.e., we'll have to modify the abstractions a little bit).  I hope this clarifies the problem; let me know if I can explain more.
		</comment>
		<comment id='16' author='rcurtin' date='2018-02-06T13:16:25Z'>
		Thanks! I think this is what I needed to get a clear idea. Will let you know if I got stuck again :)
		</comment>
		<comment id='17' author='rcurtin' date='2018-02-06T15:23:25Z'>
		Thanks! I'll also try what I can :) &lt;denchmark-link:https://github.com/manish7294&gt;@manish7294&lt;/denchmark-link&gt;
 can I know how you are approaching this?
		</comment>
		<comment id='18' author='rcurtin' date='2018-02-06T15:50:15Z'>
		@Prabhat-IIT Currently recursion is taking us directly to the leaf node which consists of only one point (in case of leaf size equals 1), by this it can easily be seen that we will not be getting any neighbour. So what we can do is stop the recursion before  and take base cases for all the descendants points.
But here what is happening:
the number of descendants might never be exactly equal to  as in case of , using binary tree approach we may never get a point where  (NumDescendants equals number of points in descendants leaves), so using  will be a bit tricky here. Note: The above problem can be avoided if you just use the level before the condition occurs as mentioned by &lt;denchmark-link:https://github.com/rcurtin&gt;@rcurtin&lt;/denchmark-link&gt;
. It is not necessary that traversing the particular node will be useful as we may get .
In earlier comments I have written another approach which is kind of brute-force, it might help you get this understand better.
Let me know, if I can explain any further.
Please forgive me if you are going through it and I am just making changes again &amp; again.
		</comment>
		<comment id='19' author='rcurtin' date='2018-02-06T17:24:40Z'>
		Thanks &lt;denchmark-link:https://github.com/manish7294&gt;@manish7294&lt;/denchmark-link&gt;
 I've understood what's going on here but while implementing  would be a major problem as &lt;denchmark-link:https://github.com/rcurtin&gt;@rcurtin&lt;/denchmark-link&gt;
 informed us in one of the above comment that we have no idea of what  is!!
Please forgive me if I'm wrong!
		</comment>
		<comment id='20' author='rcurtin' date='2018-02-06T17:32:03Z'>
		Ya that's right as &lt;denchmark-link:https://github.com/rcurtin&gt;@rcurtin&lt;/denchmark-link&gt;
  mentioned rule will not be always  so using  will not be helpful in general. This need to be taken care of, may be as &lt;denchmark-link:https://github.com/rcurtin&gt;@rcurtin&lt;/denchmark-link&gt;
 suggested or through some other ways. But temporarily we may use that for testing of greedy functionality.
		</comment>
		<comment id='21' author='rcurtin' date='2018-02-06T17:36:05Z'>
		Thanks &lt;denchmark-link:https://github.com/manish7294&gt;@manish7294&lt;/denchmark-link&gt;
  but how can we force that the rule should be  so that we can test?
		</comment>
		<comment id='22' author='rcurtin' date='2018-02-06T17:39:45Z'>
		If I am not wrong for knn we are only using  NeighbourSearchRules so it won't be a problem to temporarily modify   NeighbourSearchRules.
		</comment>
		<comment id='23' author='rcurtin' date='2018-02-06T17:41:02Z'>
		Yup I'm doing the same thing!! Let's see if we can bust this bug :)
		</comment>
		<comment id='24' author='rcurtin' date='2018-02-06T17:43:21Z'>
		Sure, go ahead. Let me know if I can be of any help.
		</comment>
		<comment id='25' author='rcurtin' date='2018-02-10T14:37:04Z'>
		&lt;denchmark-link:https://github.com/rcurtin&gt;@rcurtin&lt;/denchmark-link&gt;
 today I again tried implementing this. And to my surprise I was missing a very silly point this whole time in my implementation. Finally here are the results :)
Command used:
$ bin/mlpack_knn -r test_data_3_1000.csv -k 5 -a greedy -n n.csv -d d.csv -l 1

d.csv

&lt;denchmark-code&gt;0.1116050962 | 0.1187074505 | 0.1426321851 | 0.1706267225 | 0.1797767659
0.0753263502 | 0.1012564716 | 0.1291527634 | 0.16034917 | 0.1704776116
0.1014588982 | 0.1025114622 | 0.1361913413 | 0.1414408652 | 0.2220772587
0.0207940565 | 0.0759762241 | 0.1037033341 | 0.1085003493 | 0.1142328496
0.0708220678 | 0.1291132661 | 0.1478772178 | 0.2103051454 | 0.2189397585
0.1114177921 | 0.1275344379 | 0.1416537759 | 0.19082305 | 0.2028769869
0.0788226088 | 0.0945447408 | 0.1066927014 | 0.1149650867 | 0.1335224606
0.070053216 | 0.0949824889 | 0.1479880708 | 0.1727041488 | 0.179725711
0.0529565413 | 0.0550987776 | 0.1608736456 | 0.2236602704 | 0.223910961
0.0399285992 | 0.073460539 | 0.0984307591 | 0.1136969833 | 0.1527181328
0.0445750687 | 0.0573780001 | 0.0903679676 | 0.0926166805 | 0.1433470752
0.0783245827 | 0.0907960025 | 0.0937336392 | 0.1398970946 | 0.2103051454
0.0341310761 | 0.0799304928 | 0.1090530984 | 0.1286985202 | 0.1405325623
0.0552182708 | 0.1021350414 | 0.148542384 | 0.1647518421 | 0.2309020886
0.0384530836 | 0.0395976904 | 0.04778194 | 0.0603772529 | 0.062051631
0.1410006562 | 0.1416190187 | 0.1615080157 | 0.1739060661 | 0.1791507218
0.0492744676 | 0.0877368068 | 0.0968926214 | 0.1706267225 | 0.1834784012
0.1286613786 | 0.131767587 | 0.1375280267 | 0.1495178253 | 0.1852383438
0.0097581094 | 0.0570186396 | 0.1001148879 | 0.1102911877 | 0.1177997657
0.0551791376 | 0.0681901447 | 0.1011956517 | 0.1170229822 | 0.1684497943

&lt;/denchmark-code&gt;


n.csv

&lt;denchmark-code&gt;
224 | 641 | 187 | 16 | 585
703 | 499 | 940 | 858 | 222
472 | 972 | 274 | 583 | 931
397 | 277 | 323 | 47 | 749
840 | 775 | 110 | 11 | 495
492 | 461 | 825 | 727 | 705
563 | 222 | 940 | 858 | 499
361 | 928 | 449 | 230 | 665
547 | 695 | 774 | 642 | 685
982 | 689 | 634 | 241 | 383
446 | 325 | 451 | 630 | 97
110 | 495 | 775 | 840 | 4
265 | 151 | 392 | 532 | 947
285 | 590 | 760 | 951 | 322
411 | 789 | 792 | 465 | 228
554 | 489 | 289 | 692 | 185
585 | 224 | 641 | 0 | 187
195 | 854 | 881 | 895 | 283
728 | 413 | 694 | 99 | 439
183 | 971 | 738 | 870 | 511


&lt;/denchmark-code&gt;

Will open a PR shortly, just need to work out few minor details.
		</comment>
		<comment id='26' author='rcurtin' date='2018-02-16T14:11:27Z'>
		Fixed since &lt;denchmark-link:https://github.com/mlpack/mlpack/pull/1234&gt;#1234&lt;/denchmark-link&gt;
 is merged.  &lt;denchmark-link:https://github.com/nvasil&gt;@nvasil&lt;/denchmark-link&gt;
: now the problem is gone; if you update your codebase and rebuild you shouldn't have any more issues with the greedy traverser. :)
		</comment>
	</comments>
</bug>