<bug id='2549' author='mrityunjay-tripathi' open_date='2020-07-31T11:35:07Z' closed_time='2020-09-06T12:48:24Z'>
	<summary>Probable error in gradient function of BatchNorm</summary>
	<description>
&lt;denchmark-h:h4&gt;Issue description&lt;/denchmark-h&gt;

I spotted a probable error in the Gradient test of the BatchNorm layer. Probably the following lines in  suppressed the errors.


I doubt if gradient error can ever be 0.1. Ideally, it should be somewhere around 1e-07, even then mlpack uses 1e-05 in most of the cases.
When I tried to get the original and estimated gradients, I got the &lt;denchmark-link:https://pastebin.com/YTVAY6df&gt;this&lt;/denchmark-link&gt;
 result. We can see that all gradients after the 20th element are correct to significant decimal places but before that none are matching. By this, I think maybe some part of the code is correct while some part has some error.
&lt;denchmark-h:h4&gt;Your environment&lt;/denchmark-h&gt;


operating system: Ubuntu 18.04
compiler: gcc 7.5.0
version of dependencies (Boost/Armadillo): Boost- 1.70 and Armadillo - 9.850.1

&lt;denchmark-h:h4&gt;Steps to reproduce&lt;/denchmark-h&gt;

Just put these lines in ann_test_tools.hpp after line 163.
printf("Original and Estimated Gradients:\n");
for (size_t i = 0; i &lt; estGradient.n_elem; ++i)
{
  printf("%zu) %.17lf    %.17lf\n", i, orgGradient(i), estGradient(i));
}
...then obviously build mlpack and test with following command:
bin/mlpack_test -t ANNLayerTest/GradientBatchNormWithMiniBatchesTest
&lt;denchmark-h:h4&gt;Expected behavior&lt;/denchmark-h&gt;

Gradient check should pass with a tolerance of at least 1e-05.
&lt;denchmark-h:h4&gt;Actual behavior&lt;/denchmark-h&gt;

Gradient check fails when tolerance of 1e-05 is used.
	</description>
	<comments>
		<comment id='1' author='mrityunjay-tripathi' date='2020-07-31T11:56:03Z'>
		I think the expression is correct and the model trains / converges well. I think Atrous Conv layer has an even higher tolerance so we can probably add that to the list above. Also in  the BatchNorm Test you can have a lower tolerance of 1e-2/3 if you don't use a Conv layer in the test.
		</comment>
		<comment id='2' author='mrityunjay-tripathi' date='2020-07-31T12:28:03Z'>
		&lt;denchmark-link:https://github.com/kartikdutt18&gt;@kartikdutt18&lt;/denchmark-link&gt;
 : I think &lt;denchmark-link:https://stackoverflow.com/a/47506918/9231123&gt;this&lt;/denchmark-link&gt;
 explains it well.
		</comment>
		<comment id='3' author='mrityunjay-tripathi' date='2020-08-30T12:38:55Z'>
		This issue has been automatically marked as stale because it has not had any recent activity.  It will be closed in 7 days if no further activity occurs.  Thank you for your contributions! üëç
		</comment>
	</comments>
</bug>