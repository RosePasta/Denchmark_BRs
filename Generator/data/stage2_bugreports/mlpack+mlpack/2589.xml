<bug id='2589' author='jknightmmcs' open_date='2020-08-28T15:32:08Z' closed_time='2020-10-17T21:35:32Z'>
	<summary>Problem with exceptions and OpenMP</summary>
	<description>
&lt;denchmark-h:h4&gt;Issue description&lt;/denchmark-h&gt;

I've managed to find a problem of a following sort:
Let's say that I create RandomForest object with dataset/labels parameters supplied.
For some reason (I didn't dig through that, incoming call parameters are correct - double-checked), once in 10-15 calls I get an std::logic_error exception instead of a trained object (Row::subvec illegal access out of range).
Because exception is thrown inside OpenMP context, there is no way for me to catch it and try again, program simply crashes.
Turning OpenMP off makes it possible, so I recompiled mlpack without it, and now everything works as desired. After an exception, second retraining with the same dataset usually ends up with a valid object.
I think that for each thread there should be a mechanism of catching exceptions and rethrowing them inside a caller thread, otherwise, multithreading shouldn't be used at all.
&lt;denchmark-h:h4&gt;Your environment&lt;/denchmark-h&gt;


version of mlpack: 3.3.2
operating system: debian stretch
compiler: gcc 9.3.0, compiled from source
version of dependencies (Boost/Armadillo): [will add that tomorrow]
any other environment information you think is relevant: nothing

&lt;denchmark-h:h4&gt;Steps to reproduce&lt;/denchmark-h&gt;

&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

&lt;denchmark-h:h4&gt;Expected behavior&lt;/denchmark-h&gt;

Exceptions should be rethrown inside a caller thread when calling ctrs and methods of objects.
&lt;denchmark-h:h4&gt;Actual behavior&lt;/denchmark-h&gt;

They can't be caught by a caller thread, program dies with SIGABRT.
	</description>
	<comments>
		<comment id='1' author='jknightmmcs' date='2020-09-01T23:16:13Z'>
		Hey &lt;denchmark-link:https://github.com/jknightmmcs&gt;@jknightmmcs&lt;/denchmark-link&gt;
, thanks for the report.  You are right that exceptions thrown inside of an OpenMP context are hard to deal with, and I want to leave this issue open until we handle that correctly.
But, if you are getting std::logic_error exceptions, maybe we should debug that?  Generally in mlpack, errors don't tend to be particularly recoverable (of course this is not an excuse!), so if an exception is being thrown during training, this is definitely not a normal thing and it's not desired.  Would you mind telling me more about the dataset?  If you can reproduce this, or provide a minimum working example, maybe we can find if something else is wrong, or if there is some edge case with the dataset that isn't being handled right or something like this.
		</comment>
		<comment id='2' author='jknightmmcs' date='2020-09-02T05:27:29Z'>
		&lt;denchmark-link:https://github.com/rcurtin&gt;@rcurtin&lt;/denchmark-link&gt;
, thanks for the response! This seems to be off-topic here, so, when I'll have enough time (in the next week or so), I'll create another issue with minimum working example and headerless dataset.
		</comment>
		<comment id='3' author='jknightmmcs' date='2020-10-10T21:35:28Z'>
		This issue has been automatically marked as stale because it has not had any recent activity.  It will be closed in 7 days if no further activity occurs.  Thank you for your contributions! üëç
		</comment>
	</comments>
</bug>