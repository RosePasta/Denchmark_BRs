<bug id='2111' author='qureshinomaan' open_date='2019-12-09T04:36:32Z' closed_time='2020-01-16T04:20:50Z'>
	<summary>Can compile time on loading modules be reduced?</summary>
	<description>
&lt;denchmark-h:h4&gt;Issue description&lt;/denchmark-h&gt;

Hey there, I am trying to use mlpack for making simple neural networks.
The compile time on including the ann modules is around 10sec. Can this time be imporved?
&lt;denchmark-link:https://user-images.githubusercontent.com/47175751/70407030-bf805100-1a68-11ea-820c-dcc77f856849.png&gt;&lt;/denchmark-link&gt;

&lt;denchmark-link:https://user-images.githubusercontent.com/47175751/70407115-0b32fa80-1a69-11ea-9e12-ada05927dfd9.png&gt;&lt;/denchmark-link&gt;

&lt;denchmark-h:h4&gt;Your environment&lt;/denchmark-h&gt;


version of mlpack: 3.2.1
operating system: macOS Catalina 10.15.1
compiler: g++
version of dependencies : Boost : 1.71.0

&lt;denchmark-h:h4&gt;Steps to reproduce&lt;/denchmark-h&gt;

Just compile the code given in screenshot.
&lt;denchmark-h:h4&gt;Question&lt;/denchmark-h&gt;

Can compile time be reduced?
	</description>
	<comments>
		<comment id='1' author='qureshinomaan' date='2019-12-10T03:31:05Z'>
		I wish I had a satisfying answer for you here.  The answer is yes---compile time can be reduced.  But the bad part of the answer is that it would be something of a massive undertaking.
Last time that I profiled the compilation process, about half the time was spent on includes.  So if you can use precompiled headers or something like this, you can reduce the footprint of parsing all the mlpack/ includes.  Inside of the mlpack code, the only way we can do this is by trying to reduce the number of files we are including---which is a really hard task.  I worked hard to make some improvement some time back by making the Boost program_options and spirit libraries not be included by mlpack/core.hpp... but there is still maybe more that can be done.
The other half of the time in compilation was spent instantiating templates and doing other parts of compilation.  I think it could be very difficult indeed to get any speedup there.
Unfortunately, although heavily templated C++ can get you fast code at runtime, we pay for it with long compile times. :(
Another thought is that if you are compiling more than one file, you can build in parallel (i.e. make -j4 or something).  You could also find that clang gives better performance than gcc, but I'm not sure which is better.
		</comment>
		<comment id='2' author='qureshinomaan' date='2020-01-09T04:20:20Z'>
		This issue has been automatically marked as stale because it has not had any recent activity.  It will be closed in 7 days if no further activity occurs.  Thank you for your contributions! üëç
		</comment>
	</comments>
</bug>