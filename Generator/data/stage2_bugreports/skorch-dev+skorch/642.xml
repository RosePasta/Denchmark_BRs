<bug id='642' author='stsievert' open_date='2020-05-25T20:52:56Z' closed_time='2020-05-25T21:21:19Z'>
	<summary>Model pickling raises a TypeError on loading CUDA attributes</summary>
	<description>
When I try to pickle a Skorch model on my own machine without a GPU (and not mentioning CUDA at all), a TypeError is raised:
import pickle
from torchvision.models import AlexNet

import torch.nn as nn
import torch.optim as optim
from skorch import NeuralNet

if __name__ == "__main__":
    net = NeuralNet(module=AlexNet,
                    criterion=nn.MSELoss,
                    optimizer=optim.Adagrad,
                    device="cpu")

    ir = pickle.dumps(net)
    net2 = pickle.loads(ir)
Error: TypeError: file must have 'read', 'readinto' and 'readline' attributes
Traceback:
&lt;denchmark-code&gt;Traceback (most recent call last):
  File "bug.py", line 15, in &lt;module&gt;
    net2 = pickle.loads(ir)
  File "/Users/scott/anaconda3/envs/adadamp/lib/python3.8/site-packages/skorch/net.py", line 1514, in __setstate__
    cuda_attrs = torch.load(f, **load_kwargs)
  File "/Users/scott/anaconda3/envs/adadamp/lib/python3.8/site-packages/torch/serialization.py", line 529, in load
    return _legacy_load(opened_file, map_location, pickle_module, **pickle_load_args)
  File "/Users/scott/anaconda3/envs/adadamp/lib/python3.8/site-packages/torch/serialization.py", line 692, in _legacy_load
    magic_number = pickle_module.load(f, **pickle_load_args)
TypeError: file must have 'read', 'readinto' and 'readline' attributes
&lt;/denchmark-code&gt;

Versions:

Python: 3.8.1
Skorch 0.8.0
PyTorch 1.4.0
Torchvision: 0.5.0

	</description>
	<comments>
		<comment id='1' author='stsievert' date='2020-05-25T21:03:03Z'>
		Thanks for reporting.
I did a quick check and couldn't reproduce:

Python 3.7.7
PyTorch 1.4.0
torchvision 0.5.0
skorch master

Edit: Note that we don't officially support Python 3.8 yet. There could be a relation here. Could you please dump your whole environment?
		</comment>
		<comment id='2' author='stsievert' date='2020-05-25T21:14:27Z'>
		I think it's a Python 3.8 issue too. When I test on 3.7 I don't get an error. Here's the commands I ran to make the enviroment:
(base) $ conda create -n skorch2 numpy scipy pandas python=3.8
(base) $ conda activate skorch2
(skorch2) $ conda install pytorch torchvision -c pytorch
(skorch2) $ pip install -r requirements.txt
(skorch2) $ python bug.py
(skorch2) $
Here's the enviroment:

name: skorch2
channels:
  - pytorch
  - anaconda-fusion
  - defaults
dependencies:
  - blas=1.0=mkl
  - ca-certificates=2020.1.1=0
  - certifi=2020.4.5.1=py38_0
  - freetype=2.9.1=hb4e5f40_0
  - intel-openmp=2019.4=233
  - jpeg=9b=he5867d9_2
  - libcxx=10.0.0=1
  - libedit=3.1.20181209=hb402a30_0
  - libffi=3.3=h0a44026_1
  - libgfortran=3.0.1=h93005f0_2
  - libpng=1.6.37=ha441bb4_0
  - libtiff=4.1.0=hcb84e12_0
  - mkl=2019.4=233
  - mkl-service=2.3.0=py38hfbe908c_0
  - mkl_fft=1.0.15=py38h5e564d8_0
  - mkl_random=1.1.0=py38h6440ff4_0
  - ncurses=6.2=h0a44026_1
  - ninja=1.9.0=py38h04f5b5a_0
  - numpy=1.18.1=py38h7241aed_0
  - numpy-base=1.18.1=py38h3304bdc_1
  - olefile=0.46=py_0
  - openssl=1.1.1g=h1de35cc_0
  - pandas=1.0.3=py38h6c726b0_0
  - pillow=7.1.2=py38h4655f20_0
  - pip=20.0.2=py38_3
  - python=3.8.3=h26836e1_1
  - python-dateutil=2.8.1=py_0
  - pytorch=1.5.0=py3.8_0
  - pytz=2020.1=py_0
  - readline=8.0=h1de35cc_0
  - scipy=1.4.1=py38h44e99c9_0
  - setuptools=46.4.0=py38_0
  - six=1.14.0=py38_0
  - sqlite=3.31.1=h5c1f38d_1
  - tk=8.6.8=ha441bb4_0
  - torchvision=0.6.0=py38_cpu
  - wheel=0.34.2=py38_0
  - xz=5.2.5=h1de35cc_0
  - zlib=1.2.11=h1de35cc_3
  - zstd=1.3.7=h5bba6e5_0
  - pip:
    - joblib==0.15.1
    - scikit-learn==0.23.1
    - tabulate==0.8.7
    - threadpoolctl==2.0.0
    - tqdm==4.46.0
prefix: /Users/scott/anaconda3/envs/skorch2


		</comment>
		<comment id='3' author='stsievert' date='2020-05-25T21:15:09Z'>
		Couldn't reproduce with Python 3.8.
&lt;denchmark-code&gt;$ conda create -n skorch38 python=3.8
$ conda activate skorch38
$ conda install scikit-learn tabulate
$ conda install pytorch=1.4 torchvision -c pytorch
$ conda search -c conda-forge skorch
$ pip install skorch
$ conda env export
name: skorch38
channels:
  - pytorch
  - defaults
dependencies:
  - _libgcc_mutex=0.1=main
  - blas=1.0=mkl
  - ca-certificates=2020.1.1=0
  - certifi=2020.4.5.1=py38_0
  - cudatoolkit=10.1.243=h6bb024c_0
  - freetype=2.9.1=h8a8886c_1
  - intel-openmp=2020.1=217
  - joblib=0.15.1=py_0
  - jpeg=9b=h024ee3a_2
  - ld_impl_linux-64=2.33.1=h53a641e_7
  - libedit=3.1.20181209=hc058e9b_0
  - libffi=3.3=he6710b0_1
  - libgcc-ng=9.1.0=hdf63c60_0
  - libgfortran-ng=7.3.0=hdf63c60_0
  - libpng=1.6.37=hbc83047_0
  - libstdcxx-ng=9.1.0=hdf63c60_0
  - libtiff=4.1.0=h2733197_0
  - mkl=2020.1=217
  - mkl-service=2.3.0=py38he904b0f_0
  - mkl_fft=1.0.15=py38ha843d7b_0
  - mkl_random=1.1.0=py38h962f231_0
  - ncurses=6.2=he6710b0_1
  - ninja=1.9.0=py38hfd86e86_0
  - numpy=1.18.1=py38h4f9e942_0
  - numpy-base=1.18.1=py38hde5b4d6_1
  - olefile=0.46=py_0
  - openssl=1.1.1g=h7b6447c_0
  - pillow=7.1.2=py38hb39fc2d_0
  - pip=20.0.2=py38_3
  - python=3.8.3=hcff3b4d_0
  - pytorch=1.4.0=py3.8_cuda10.1.243_cudnn7.6.3_0
  - readline=8.0=h7b6447c_0
  - scikit-learn=0.22.1=py38hd81dba3_0
  - scipy=1.4.1=py38h0b6359f_0
  - setuptools=46.4.0=py38_0
  - six=1.14.0=py38_0
  - sqlite=3.31.1=h62c20be_1
  - tabulate=0.8.3=py38_0
  - tk=8.6.8=hbc83047_0
  - torchvision=0.5.0=py38_cu101
  - wheel=0.34.2=py38_0
  - xz=5.2.5=h7b6447c_0
  - zlib=1.2.11=h7b6447c_3
  - zstd=1.3.7=h0b5b093_0
  - pip:
    - skorch==0.8.0
    - tqdm==4.46.0
&lt;/denchmark-code&gt;

		</comment>
		<comment id='4' author='stsievert' date='2020-05-25T21:19:46Z'>
		Whoops, here's the Python 3.8 environment that failed:

name: adadamp
channels:
  - pytorch
  - anaconda-fusion
  - defaults
dependencies:
  - appnope=0.1.0=py38_0
  - attrs=19.3.0=py_0
  - backcall=0.1.0=py38_0
  - blas=1.0=mkl
  - bokeh=2.0.0=py38_0
  - bzip2=1.0.8=h1de35cc_0
  - ca-certificates=2020.1.1=0
  - certifi=2020.4.5.1=py38_0
  - click=7.1.1=py_0
  - cloudpickle=1.3.0=py_0
  - cmake=3.14.0=haff7e42_0
  - cycler=0.10.0=py38_0
  - cytoolz=0.10.1=py38h1de35cc_0
  - decorator=4.4.2=py_0
  - entrypoints=0.3=py38_0
  - expat=2.2.6=h0a44026_0
  - freetype=2.9.1=hb4e5f40_0
  - fsspec=0.6.3=py_0
  - heapdict=1.0.1=py_0
  - intel-openmp=2019.4=233
  - ipykernel=5.1.4=py38h39e3cac_0
  - ipython=7.13.0=py38h5ca1d4c_0
  - ipython_genutils=0.2.0=py38_0
  - jedi=0.16.0=py38_1
  - jinja2=2.11.1=py_0
  - joblib=0.14.1=py_0
  - jpeg=9b=he5867d9_2
  - jupyter_client=6.1.3=py_0
  - jupyter_core=4.6.3=py38_0
  - kiwisolver=1.0.1=py38h0a44026_0
  - krb5=1.17.1=hddcf347_0
  - libcurl=7.69.1=h051b688_0
  - libcxx=4.0.1=hcfea43d_1
  - libcxxabi=4.0.1=hcfea43d_1
  - libedit=3.1.20181209=hb402a30_0
  - libffi=3.2.1=h475c297_4
  - libgfortran=3.0.1=h93005f0_2
  - libpng=1.6.37=ha441bb4_0
  - libsodium=1.0.16=h3efe00b_0
  - libssh2=1.9.0=ha12b0ac_1
  - libtiff=4.1.0=hcb84e12_0
  - llvm-openmp=4.0.1=hcfea43d_1
  - locket=0.2.0=py38_1
  - markupsafe=1.1.1=py38h1de35cc_0
  - matplotlib=3.1.3=py38_0
  - matplotlib-base=3.1.3=py38h9aa3819_0
  - mkl=2019.4=233
  - mkl-service=2.3.0=py38hfbe908c_0
  - mkl_fft=1.0.15=py38h5e564d8_0
  - mkl_random=1.1.0=py38h6440ff4_0
  - more-itertools=8.2.0=py_0
  - msgpack-python=1.0.0=py38h04f5b5a_1
  - ncurses=6.2=h0a44026_0
  - ninja=1.9.0=py38h04f5b5a_0
  - numpy=1.18.1=py38h7241aed_0
  - numpy-base=1.18.1=py38h6575580_1
  - olefile=0.46=py_0
  - openssl=1.1.1g=h1de35cc_0
  - packaging=20.3=py_0
  - pandas=1.0.3=py38h6c726b0_0
  - parso=0.6.2=py_0
  - partd=1.1.0=py_0
  - pcre=8.43=h0a44026_0
  - pexpect=4.8.0=py38_0
  - pickleshare=0.7.5=py38_1000
  - pillow=7.0.0=py38h4655f20_0
  - pip=20.0.2=py38_1
  - pluggy=0.13.1=py38_0
  - prompt_toolkit=3.0.3=py_0
  - psutil=5.7.0=py38h1de35cc_0
  - ptyprocess=0.6.0=py38_0
  - py=1.8.1=py_0
  - pygments=2.6.1=py_0
  - pyparsing=2.4.6=py_0
  - pytest=5.4.1=py38_0
  - python=3.8.1=h359304d_1
  - python-dateutil=2.8.1=py_0
  - python-snappy=0.5.4=py38h0a44026_0
  - pytorch=1.4.0=py3.8_0
  - pytz=2019.3=py_0
  - pyyaml=5.3.1=py38h1de35cc_0
  - pyzmq=18.1.1=py38h0a44026_0
  - readline=7.0=h1de35cc_5
  - rhash=1.3.8=ha12b0ac_0
  - scikit-learn=0.22.1=py38h27c97d8_0
  - scipy=1.4.1=py38h44e99c9_0
  - setuptools=46.1.1=py38_0
  - six=1.14.0=py38_0
  - snappy=1.1.7=he62c110_3
  - sortedcontainers=2.1.0=py38_0
  - sqlite=3.31.1=ha441bb4_0
  - swig=3.0.12=h1cb45b9_3
  - tblib=1.6.0=py_0
  - tk=8.6.8=ha441bb4_0
  - toolz=0.10.0=py_0
  - torchvision=0.5.0=py38_cpu
  - tornado=6.0.4=py38h1de35cc_1
  - traitlets=4.3.3=py38_0
  - typing_extensions=3.7.4.1=py38_0
  - wcwidth=0.1.8=py_0
  - wheel=0.34.2=py38_0
  - xz=5.2.4=h1de35cc_4
  - yaml=0.1.7=hc338f04_2
  - zeromq=4.3.1=h0a44026_3
  - zict=2.0.0=py_0
  - zlib=1.2.11=h1de35cc_3
  - zstd=1.3.7=h5bba6e5_0
  - pip:
    - absl-py==0.9.0
    - alabaster==0.7.12
    - astunparse==1.6.3
    - atari-py==0.2.6
    - babel==2.8.0
    - box2d==2.3.10
    - cachetools==4.1.0
    - chardet==3.0.4
    - dask==2.16.0
    - docutils==0.16
    - easyprocess==0.3
    - fastparquet==0.3.3
    - flaky==3.6.1
    - future==0.18.2
    - gast==0.3.3
    - google-auth==1.15.0
    - google-auth-oauthlib==0.4.1
    - google-pasta==0.2.0
    - grpcio==1.29.0
    - gym==0.17.2
    - h5py==2.10.0
    - hyperopt==0.2.3
    - idna==2.9
    - imagesize==1.2.0
    - keras-preprocessing==1.1.2
    - llvmlite==0.31.0
    - markdown==3.2.2
    - memory-profiler==0.57.0
    - networkx==2.2
    - nn-builder==1.0.5
    - numba==0.48.0
    - numpydoc==0.9.2
    - oauthlib==3.1.0
    - opencv-python==4.2.0.34
    - opt-einsum==3.2.1
    - protobuf==3.12.1
    - pyarrow==0.16.0
    - pyasn1==0.4.8
    - pyasn1-modules==0.2.8
    - pyglet==1.5.0
    - pytorch-ranger==0.1.1
    - pyvirtualdisplay==0.2.5
    - requests==2.23.0
    - requests-oauthlib==1.3.0
    - rope==0.16.0
    - ropemode==0.5
    - ropevim==0.8.0
    - rsa==4.0
    - seaborn==0.10.1
    - snowballstemmer==2.0.0
    - sphinx==2.4.4
    - sphinxcontrib-applehelp==1.0.2
    - sphinxcontrib-devhelp==1.0.2
    - sphinxcontrib-htmlhelp==1.0.3
    - sphinxcontrib-jsmath==1.0.1
    - sphinxcontrib-qthelp==1.0.3
    - sphinxcontrib-serializinghtml==1.1.4
    - tabulate==0.8.7
    - tensorboard==2.2.1
    - tensorboard-plugin-wit==1.6.0.post3
    - tensorboardx==2.0
    - tensorflow==2.2.0
    - tensorflow-estimator==2.2.0
    - termcolor==1.1.0
    - thrift==0.13.0
    - tqdm==4.44.1
    - urllib3==1.25.8
    - werkzeug==1.0.1
    - wrapt==1.12.1
prefix: /Users/scott/anaconda3/envs/adadamp


		</comment>
		<comment id='5' author='stsievert' date='2020-05-25T21:21:19Z'>
		I can't reproduce on 3.8 either with skorch 0.8 and Python 3.8. I'm closing this issue.
		</comment>
		<comment id='6' author='stsievert' date='2020-05-25T21:21:32Z'>
		Thanks for the help resolving this!
		</comment>
		<comment id='7' author='stsievert' date='2020-07-21T17:04:22Z'>
		I ran into this issue again. I resolved it by cleaning up my serialization practice. I implemented the following changes:

Inheriting from NeuralNet instead of Scikit-learn's BaseEstimator and setting the Skorch NeuralNet as an attribute.
Not using any decorators in the classes.
Ensuring the PyTorch/Python versions were officially supported (https://github.com/skorch-dev/skorch#pytorch, #642 (comment)).

Those changes helped resolve the issue.
		</comment>
		<comment id='8' author='stsievert' date='2020-07-21T18:16:57Z'>
		
Inheriting from NeuralNet instead of Scikit-learn's BaseEstimator and setting the Skorch NeuralNet as an attribute.

This is interesting. What kind of error are you getting when you inherit from BaseEstimator?
		</comment>
		<comment id='9' author='stsievert' date='2020-07-21T18:43:02Z'>
		
This is interesting. What kind of error are you getting when you inherit from BaseEstimator?

Something about  I think. IIRC, the reported error is the same as in &lt;denchmark-link:https://github.com/skorch-dev/skorch/issues/642#issue-624480784&gt;#642 (comment)&lt;/denchmark-link&gt;
: "TypeError: file must have 'read', 'readinto' and 'readline' attributes."
I do remember the error got raised on line 1618:



skorch/skorch/net.py


        Lines 1616 to 1618
      in
      7816c15






 f.write(state['__cuda_dependent_attributes__']) 



 f.seek(0) 



 cuda_attrs = torch.load(f, **load_kwargs) 





		</comment>
		<comment id='10' author='stsievert' date='2020-07-21T21:53:17Z'>
		&lt;denchmark-link:https://github.com/stsievert&gt;@stsievert&lt;/denchmark-link&gt;
 could it be possible that you try unpickle a model that was loaded with different code than it was saved with? E.g. by using a different skorch version? For that case, we unfortunately cannot give any guarantee of compatibility between versions. To be super save, you'd have to use  and  instead (of course that doesn't help with multiprocessing et al.).
We could consider adding the skorch.__version__ to the state and when unpickling, we could check if the same version is still used. If not, we could give a warning and point users to save_params and load_params.

Not using any decorators in the classes.


Decorators + pickling can be dicey sometimes. Do you always use functools.wraps for your decorators?
		</comment>
		<comment id='11' author='stsievert' date='2020-07-22T01:43:39Z'>
		
could it be possible that you try unpickle a model that was loaded with different code than it was saved with? E.g. by using a different skorch version?

No. Both processes had the same Python environment. I ran into this error while using Dask, and launched Dask in the same Python environment I launched my server in (they had too; I launch my server and Dask in the same Docker environment).

Do you always use functools.wraps for your decorators?

Thanks!
		</comment>
		<comment id='12' author='stsievert' date='2020-07-22T21:36:24Z'>
		
I ran into this error while using Dask

Okay, so the context is using dask, not loading a model stored at an earlier time. I only used dask a little bit with skorch, no custom stuff, so I never ran into any problems. It would be really nice if we could pin down the ultimate reason for the issue. Please keep us up-to-date if you find out something new.
		</comment>
	</comments>
</bug>