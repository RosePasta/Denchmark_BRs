<bug id='582' author='SdgJlbl' open_date='2020-01-28T11:05:57Z' closed_time='2020-02-08T12:24:13Z'>
	<summary>Attribute error when calling .classes_ on a loaded NeuralNetClassifier</summary>
	<description>
Hello,
I am not sure if I'm doing something wrong, if it is the intended behaviour or a bug.
The context:
I'm training a NeuralNetClassifier on some data, after using the fit method I can access the classes on which it was trained with the classes_ attribute.
I am then saving it and loading it again with the recommended save_params and load_params methods.
On the newly loaded object, trying to access the classes_ attribute gives the following traceback :
&lt;denchmark-code&gt;---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
&lt;ipython-input-13-25e182b6b60b&gt; in &lt;module&gt;
----&gt; 1 new_net.classes_

~/miniconda3/envs/doc_classif/lib/python3.7/site-packages/skorch/classifier.py in classes_(self)
    109                     self.__class__.__name__))
    110             return self.classes
--&gt; 111         return self.classes_inferred_
    112 
    113     # pylint: disable=signature-differs

AttributeError: 'NeuralNetClassifier' object has no attribute 'classes_inferred_'
&lt;/denchmark-code&gt;

As I said, not sure if it's the intended behaviour or not.
Minimal reproducible example (inspired from the basic tutorial) available here :
&lt;denchmark-link:https://gist.github.com/SdgJlbl/3fd51950ae4902277a5ebc50515e1e12&gt;https://gist.github.com/SdgJlbl/3fd51950ae4902277a5ebc50515e1e12&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='SdgJlbl' date='2020-01-28T14:56:44Z'>
		Thanks for reporting!
This is at least surprising behavior, so I'll label it as a bug for now. Indeed, save_params only saves the torch state dictionaries (model state, optimizer state) with the only exception being the history. This is problematic for parameters such as classes_ which is inferred during training time. We need to discuss whether save_params should save such attributes or if it is out of scope.
As a workaround, consider using pickle instead which will do the same thing as save_params but will also save class attributes such as classes_.
		</comment>
		<comment id='2' author='SdgJlbl' date='2020-01-28T22:31:55Z'>
		That's a difficult one. On the one hand, I agree that this could be unexpected. On the other hand, if we start persisting all kinds of attributes of the net during save_params, we actually end up re-implementing pickle and jeopardize compatibility (e.g. the classes_ attribute was only introduced recently).
My suggestion would be to improve the documentation instead. We could even think about some nice error message for cases like the one above (though it's not quite easy to guess all possible cases). Anyway, it should be crystal clear that save_params is only for the pytorch components and that pickle should be used for everything else.
		</comment>
		<comment id='3' author='SdgJlbl' date='2020-01-29T10:02:26Z'>
		I understand that this is an edge case; there is this dissonance between "oh sure save_params is just a wrapper around the PyTorch method" and "but if all my weights are saved, my network for sure knows how many neurons there are in my softmax layer". And to be honest, the Exception was not what I would have expected, but I understand how tricky it can be to determine the exact context that triggers a given exception.
FYI, I was considering the idea of using save_params instead of pickle because there were stuffs in my callbacks I didn't want to pickle, but I removed my callbacks before pickling instead :)
		</comment>
		<comment id='4' author='SdgJlbl' date='2020-01-29T17:54:08Z'>
		
My suggestion would be to improve the documentation instead.

Would the documentation say to "use pickle"? There is a use case of wanting the NeuralNet of just being a scikit-learn compatible estimator, used only for inference, thus not needing the callbacks. In this case, we tell users to manually remove the callbacks before pickling.
We can also have the documentation state that "set the classes_" manually.
		</comment>
		<comment id='5' author='SdgJlbl' date='2020-01-29T22:30:12Z'>
		
I understand that this is an edge case

Out of curiosity, why did you want to access the classes_ attribute on your model?

"but if all my weights are saved, my network for sure knows how many neurons there are in my softmax layer"

Your model still knows it. In theory, we could do without the classes_ attribute, it's not needed for training or predicting. However, some sklearn functions require it, which is why we added it recently.

because there were stuffs in my callbacks I didn't want to pickle

You could also override the __getstate__ method (which is used by pickle) on those callbacks and remove the offending attributes. It depends on your use case.

We can also have the documentation state that "set the classes_" manually.

Yes, we should do that. Also, we might consider preparing a list of attribute names that might get lost during save_params and to raise a nice error message when __getattr__ is called with any of them.
		</comment>
		<comment id='6' author='SdgJlbl' date='2020-01-30T16:47:18Z'>
		I am using the classes_ attribute of my model to do some sanity checks (I am using ensembles of PyTorch and sklearn classifiers, and skorch is just perfect for this use case); another use-case is to map the numerical labels to human-friendly class names (eg in plots). Neither use-cases is absolutely necessary, but that attribute provides definitely some nice syntactic sugar.
I didn't know about the __getstate__ method, I'll check it out, thanks for the tip.
As a end-user, I think that at least a mention in the documentation that using the save_params method will lose sklearn-like attributes, would be very helpful to make the right call when choosing a persistence method.
		</comment>
		<comment id='7' author='SdgJlbl' date='2020-02-01T20:33:22Z'>
		&lt;denchmark-link:https://github.com/SdgJlbl&gt;@SdgJlbl&lt;/denchmark-link&gt;
 I updated the docs in &lt;denchmark-link:https://github.com/skorch-dev/skorch/pull/585&gt;#585&lt;/denchmark-link&gt;
. Would this have helped you?
The PR does not include the discussed addition of error messages.
		</comment>
		<comment id='8' author='SdgJlbl' date='2020-02-02T18:23:56Z'>
		That would have been very helpful indeed.
Thanks for taking the issue into account, and for all the great work on skorch! üëç
		</comment>
		<comment id='9' author='SdgJlbl' date='2020-02-08T12:24:13Z'>
		&lt;denchmark-link:https://github.com/SdgJlbl&gt;@SdgJlbl&lt;/denchmark-link&gt;
 The update to the docs has been merged. If you find further issues, feel free to re-open this.
		</comment>
	</comments>
</bug>