<bug id='1850' author='ahmadsalim' open_date='2019-05-06T12:57:49Z' closed_time='2019-05-07T20:24:53Z'>
	<summary>[bug] Continuous autoguides do not take device into account</summary>
	<description>
&lt;denchmark-h:h3&gt;Issue Description&lt;/denchmark-h&gt;

Many of the AutoContinuous guides do not take into account that the model might be on the GPU instead of the CPU. For example, see the code snippet below, where it fails if I pass device='cuda' to the tensors I create.
It would of course be nice if it instead relied on the device given from the model trace.
Do you have any suggestions?
Thanks!
&lt;denchmark-h:h3&gt;Environment&lt;/denchmark-h&gt;


OS and python version: Windows 10, Python 3.7
PyTorch version: 1.1
Pyro version: 0.3.3

&lt;denchmark-h:h3&gt;Code Snippet&lt;/denchmark-h&gt;

import pyro
import pyro.distributions as dist
import torch
from pyro.contrib.autoguide import AutoDiagonalNormal
from pyro.infer import SVI, Trace_ELBO
from pyro.optim import Adam


def model(xs, prior_loc, prior_scale):
    mu = pyro.sample('mu', dist.Normal(prior_loc, prior_scale))
    return pyro.sample('obs', dist.Normal(mu, prior_scale), obs=xs)


def train():
    xs = torch.tensor([5, 5.5, 5.6, 5.8, 6.3], device='cuda')
    prior_loc = torch.tensor(0.0, device='cuda')
    prior_scale = torch.tensor(1.0, device='cuda')
    guide = AutoDiagonalNormal(model)
    optim = Adam({'lr': 1e-3})
    loss = Trace_ELBO()
    svi = SVI(model, guide, optim, loss)
    svi.step(xs, prior_loc, prior_scale)

if __name__ == "__main__":
  train()
Error:
&lt;denchmark-code&gt;Traceback (most recent call last):
  File "C:\tools\miniconda3\envs\scanner-pyro\lib\site-packages\IPython\core\interactiveshell.py", line 3265, in run_code
    exec(code_obj, self.user_global_ns, self.user_ns)
  File "&lt;ipython-input-6-68d49e4377f9&gt;", line 26, in &lt;module&gt;
    train()
  File "&lt;ipython-input-6-68d49e4377f9&gt;", line 23, in train
    svi.step(xs, prior_loc, prior_scale)
  File "C:\tools\miniconda3\envs\scanner-pyro\lib\site-packages\pyro\infer\svi.py", line 99, in step
    loss = self.loss_and_grads(self.model, self.guide, *args, **kwargs)
  File "C:\tools\miniconda3\envs\scanner-pyro\lib\site-packages\pyro\infer\trace_elbo.py", line 136, in loss_and_grads
    surrogate_loss_particle.backward(retain_graph=self.retain_graph)
  File "C:\tools\miniconda3\envs\scanner-pyro\lib\site-packages\torch\tensor.py", line 107, in backward
    torch.autograd.backward(self, gradient, retain_graph, create_graph)
  File "C:\tools\miniconda3\envs\scanner-pyro\lib\site-packages\torch\autograd\__init__.py", line 93, in backward
    allow_unreachable=True)  # allow_unreachable flag
RuntimeError: Function AddBackward0 returned an invalid gradient at index 1 - expected type torch.cuda.FloatTensor but got torch.FloatTensor
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='ahmadsalim' date='2019-05-06T18:53:12Z'>
		this seems to come from the &lt;denchmark-link:https://github.com/pyro-ppl/pyro/blob/dev/pyro/contrib/autoguide/__init__.py#L508&gt;initialization of the autoguide parameters&lt;/denchmark-link&gt;
.  i will make a fix for this but in the meantime you can set the default tensor type via  and it should work without the  kwarg to each tensor.
		</comment>
		<comment id='2' author='ahmadsalim' date='2019-05-06T19:24:37Z'>
		Awesome, thank you very much! ðŸ˜„
		</comment>
		<comment id='3' author='ahmadsalim' date='2019-05-06T19:42:44Z'>
		&lt;denchmark-link:https://github.com/jpchen&gt;@jpchen&lt;/denchmark-link&gt;
 I am refactoring autoguide initialization in &lt;denchmark-link:https://github.com/pyro-ppl/pyro/pull/1849&gt;#1849&lt;/denchmark-link&gt;
, so I will take care of this in that PR.
		</comment>
	</comments>
</bug>