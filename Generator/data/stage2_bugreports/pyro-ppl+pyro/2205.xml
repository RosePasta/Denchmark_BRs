<bug id='2205' author='fehiepsi' open_date='2019-12-04T06:57:15Z' closed_time='2019-12-13T23:14:28Z'>
	<summary>MCMC cannot jit_compile for a simple logistic regression model</summary>
	<description>
The script
import torch
import pyro
import pyro.distributions as dist
from pyro.infer import MCMC, NUTS

def model(data, labels):
    dim = data.shape[1]
    coefs = pyro.sample('coefs', dist.Normal(torch.zeros(dim), torch.ones(dim)))
    logits = torch.matmul(data, coefs.unsqueeze(-1)).squeeze(-1)
    return pyro.sample('obs', dist.Bernoulli(logits=logits), obs=labels)

mcmc = MCMC(NUTS(model, jit_compile=True), 10)
mcmc.run(torch.ones(3, 2), torch.ones(3))
will throw the following error with jit_compile=True

Warmup:   0%|          | 0/20 [00:00, ?it/s]

---------------------------------------------------------------------------
RuntimeError                              Traceback (most recent call last)
&lt;ipython-input-1-231624f93559&gt; in &lt;module&gt;
     11 
     12 mcmc = MCMC(NUTS(model, jit_compile=True), 10)
---&gt; 13 mcmc.run(torch.ones(3, 2), torch.ones(3))

~/pyro/pyro/poutine/messenger.py in _context_wrap(context, fn, *args, **kwargs)
      6 def _context_wrap(context, fn, *args, **kwargs):
      7     with context:
----&gt; 8         return fn(*args, **kwargs)
      9 
     10 

~/pyro/pyro/infer/mcmc/api.py in run(self, *args, **kwargs)
    352         z_flat_acc = [[] for _ in range(self.num_chains)]
    353         with pyro.validation_enabled(not self.disable_validation):
--&gt; 354             for x, chain_id in self.sampler.run(*args, **kwargs):
    355                 if num_samples[chain_id] == 0:
    356                     num_samples[chain_id] += 1

~/pyro/pyro/infer/mcmc/api.py in run(self, *args, **kwargs)
    163             for sample in _gen_samples(self.kernel, self.warmup_steps, self.num_samples, hook_w_logging,
    164                                        i if self.num_chains &gt; 1 else None,
--&gt; 165                                        *args, **kwargs):
    166                 yield sample, i  # sample, chain_id
    167             self.kernel.cleanup()

~/pyro/pyro/infer/mcmc/api.py in _gen_samples(kernel, warmup_steps, num_samples, hook, chain_id, *args, **kwargs)
    105 
    106 def _gen_samples(kernel, warmup_steps, num_samples, hook, chain_id, *args, **kwargs):
--&gt; 107     kernel.setup(warmup_steps, *args, **kwargs)
    108     params = kernel.initial_params
    109     # yield structure (key, value.shape) of params

~/pyro/pyro/infer/mcmc/hmc.py in setup(self, warmup_steps, *args, **kwargs)
    262         self._cache(self.initial_params, potential_energy, None)
    263         if self.initial_params:
--&gt; 264             self._initialize_adapter()
    265 
    266     def cleanup(self):

~/pyro/pyro/infer/mcmc/hmc.py in _initialize_adapter(self)
    253 
    254         if self._adapter.adapt_step_size:
--&gt; 255             self._adapter.reset_step_size_adaptation(self._initial_params)
    256 
    257     def setup(self, warmup_steps, *args, **kwargs):

~/pyro/pyro/infer/mcmc/adaptation.py in reset_step_size_adaptation(self, z)
     93         if self._find_reasonable_step_size is not None:
     94             with pyro.validation_enabled(False):
---&gt; 95                 self.step_size = self._find_reasonable_step_size(z)
     96         self._step_size_adapt_scheme.prox_center = math.log(10 * self.step_size)
     97         self._step_size_adapt_scheme.reset()

~/pyro/pyro/infer/mcmc/hmc.py in _find_reasonable_step_size(self, z)
    163         energy_current = self._kinetic_energy(r) + potential_energy
    164         z_new, r_new, z_grads_new, potential_energy_new = velocity_verlet(
--&gt; 165             z, r, self.potential_fn, self.inverse_mass_matrix, step_size)
    166         energy_new = self._kinetic_energy(r_new) + potential_energy_new
    167         delta_energy = energy_new - energy_current

~/pyro/pyro/ops/integrator.py in velocity_verlet(z, r, potential_fn, inverse_mass_matrix, step_size, num_steps, z_grads)
     32                                                                         inverse_mass_matrix,
     33                                                                         step_size,
---&gt; 34                                                                         z_grads)
     35     return z_next, r_next, z_grads, potential_energy
     36 

~/pyro/pyro/ops/integrator.py in _single_step_verlet(z, r, potential_fn, inverse_mass_matrix, step_size, z_grads)
     41     """
     42 
---&gt; 43     z_grads = potential_grad(potential_fn, z)[0] if z_grads is None else z_grads
     44 
     45     for site_name in r:

~/pyro/pyro/ops/integrator.py in potential_grad(potential_fn, z)
     81             raise e
     82 
---&gt; 83     grads = grad(potential_energy, z_nodes)
     84     for node in z_nodes:
     85         node.requires_grad_(False)

~/miniconda3/envs/pydata/lib/python3.6/site-packages/torch/autograd/__init__.py in grad(outputs, inputs, grad_outputs, retain_graph, create_graph, only_inputs, allow_unused)
    155     return Variable._execution_engine.run_backward(
    156         outputs, grad_outputs, retain_graph, create_graph,
--&gt; 157         inputs, allow_unused)
    158 
    159 

RuntimeError: Function torch::jit::(anonymous namespace)::DifferentiableGraphBackward returned an invalid gradient at index 0 - got [] but expected shape compatible with [2]


I think this is a PyTorch issue . See the upstream issue at &lt;denchmark-link:https://github.com/pytorch/pytorch/issues/30936&gt;pytorch/pytorch#30936&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='fehiepsi' date='2019-12-13T23:14:28Z'>
		This issue is fixed upstream. For those who use PyTorch 1.3.1, a quick solution is to call .contiguous() before .squeeze(-1).
		</comment>
	</comments>
</bug>