<bug id='1586' author='neerajprad' open_date='2018-11-29T18:57:08Z' closed_time='2018-12-02T16:35:13Z'>
	<summary>Perf bug in multivariate normal due to inefficient .expand</summary>
	<description>
Ref. &lt;denchmark-link:https://github.com/pyro-ppl/pyro/pull/1582&gt;#1582&lt;/denchmark-link&gt;
.
There is a perf bug in MVN, and lowrank MVN  methods on expanded instances (i.e. instances coming from ). &lt;denchmark-link:https://github.com/fehiepsi&gt;@fehiepsi&lt;/denchmark-link&gt;
 already has a patch for it. I am running our test suite to see if this might also affect other distributions.
	</description>
	<comments>
		<comment id='1' author='neerajprad' date='2018-11-29T20:54:24Z'>
		&lt;denchmark-link:https://github.com/pyro-ppl/pyro/pull/1588&gt;#1588&lt;/denchmark-link&gt;
 should fix some slowness. Another thing related to mvn (but I guess it also happens for other distributions too) which is not relevant to this bug, but I want to put here for record:

With event_shape &lt; 50, pytorch 0.4 is faster than pytorch 1.0
With event_shape &gt; 50, pytorch 1.0 is starting outperforming pytorch 0.4

		</comment>
		<comment id='2' author='neerajprad' date='2018-11-29T21:01:28Z'>
		
With event_shape &lt; 50, pytorch 0.4 is faster than pytorch 1.0

The pytorch devs did mention that there is some tensor overhead that was added after  due to which small models are likely to be slower. &lt;denchmark-link:https://github.com/pytorch/pytorch/pull/9320&gt;pytorch/pytorch#9320&lt;/denchmark-link&gt;
 was an attempt to rectify that.
		</comment>
		<comment id='3' author='neerajprad' date='2018-11-29T21:53:45Z'>
		Following your link, I can see there are many interesting stories about the performance of 0.4 vs 1.0. Thanks &lt;denchmark-link:https://github.com/neerajprad&gt;@neerajprad&lt;/denchmark-link&gt;
 !
		</comment>
		<comment id='4' author='neerajprad' date='2018-12-02T16:35:13Z'>
		This is already fixed.
		</comment>
	</comments>
</bug>