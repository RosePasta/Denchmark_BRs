<bug id='798' author='fritzo' open_date='2018-02-22T00:29:32Z' closed_time='2018-02-22T06:26:10Z'>
	<summary>Memory leak due to cyclic references in Trace</summary>
	<description>
&lt;denchmark-link:https://github.com/karalets&gt;@karalets&lt;/denchmark-link&gt;
 noticed memory growth when using Pyro.
We tracked the number of non-garbage-collected objects during SVI inference. We found that objects grow over iterations but are occasionally collected. This evidence points to a cyclic reference somewhere. Among the amassing objects were Variables and  Pyro Trace objects, suggesting that the cyclic reference is either in Pyro internals or in the networkx DiGraph object from which Trace inherits.
	</description>
	<comments>
		<comment id='1' author='fritzo' date='2018-02-22T06:12:36Z'>
		And I am happy to report that the changes in &lt;denchmark-link:https://github.com/pyro-ppl/pyro/pull/801&gt;#801&lt;/denchmark-link&gt;
 fix the memory leak that has been plaguing me for a month.
My garbage collection calls now safely report unique counts of Variables and memory consumption is constant across training.
Very happy this is resolved, this bug caused me grief for a while. Fantastic effort &lt;denchmark-link:https://github.com/fritzo&gt;@fritzo&lt;/denchmark-link&gt;
 and &lt;denchmark-link:https://github.com/eb8680&gt;@eb8680&lt;/denchmark-link&gt;

For reference: this bug made all the difference between being able to run some types of models and not being able to run them at all, it was not a little thing.
		</comment>
	</comments>
</bug>