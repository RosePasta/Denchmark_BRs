<bug id='175' author='fritzo' open_date='2017-09-30T00:08:58Z' closed_time='2017-12-17T20:45:04Z'>
	<summary>Clear pyro._param_store on error</summary>
	<description>
It would make it much easier to debug models and guides if we cleared the global _param_store() on error. E.g. I've been trying to get types to match in a model and guide, and errors don't surface until I run inference.step(). But on failure, some stale param values remain.
I suggest we wrap all inference methods in something like
try:
    ...do inference...
finally:
    pyro.get_param_store().clear()
	</description>
	<comments>
		<comment id='1' author='fritzo' date='2017-10-02T03:37:51Z'>
		automatically deleting the entire param store (which may e.g. contain the results of a previously completed and very expensive inference) seems too risky to me.
		</comment>
		<comment id='2' author='fritzo' date='2017-10-02T04:35:34Z'>
		Oh, that sounds reasonable. Do you think there's a less drastic safety measure we could take, or should I just add a Warning in the pyro.param docstring?
I'd at least like to add some warning docs; as a new user, I spent 30-45 minutes debugging a model that I had already fixed, but whose old bad values persisted in the param store.
		</comment>
		<comment id='3' author='fritzo' date='2017-10-02T07:16:49Z'>
		on an unrelated note, it may be useful to selectively clear the param store with a method that takes an iterable or maybe even regex
		</comment>
		<comment id='4' author='fritzo' date='2017-10-03T18:14:48Z'>
		We can also move the pyro primitives into a separate Pyro class with an __enter__ and __exit__ method for the context manager. The inference logic will need to be wrapped inside a with statement:
&lt;denchmark-code&gt;with pyro:
     # do inference
     # KLqp.step()..
&lt;/denchmark-code&gt;

We can always bind pyro to the class, so that pyro.sample or pyro.observe would work as is, but this will provide a contained scope within which the program runs, and any clean up operations can be easily performed.
We can do any clean-up necessary in the __exit__ method, or any setup related stuff in the __enter__ method. At some point, if we want to start using redis or some other KV store as the param store, we would not have to change our public API, but just have the setup/cleanup logic inside the class take care of this.
		</comment>
		<comment id='5' author='fritzo' date='2017-12-17T20:45:04Z'>
		let's close this for now because i don't think we have any demand for the kinds of enhancements/solutions proposed here
		</comment>
	</comments>
</bug>