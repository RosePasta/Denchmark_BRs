<bug id='1358' author='neerajprad' open_date='2018-09-04T02:35:26Z' closed_time='2018-09-19T18:40:09Z'>
	<summary>JitTrace*ELBO does not work with irregular batch sizes</summary>
	<description>
With &lt;denchmark-link:https://github.com/pytorch/pytorch/pull/10952&gt;pytorch/pytorch#10952&lt;/denchmark-link&gt;
, our VAE example becomes runnable, except that it fails on the last data batch in the epoch which has size  instead of the usual  (runs fine with regular batch sizes).
A minimal example that fails is below.
import torch
from torch.distributions import constraints

import pyro
import pyro.distributions as dist
from pyro.infer import SVI, JitTrace_ELBO
from pyro.optim import Adam


def model(data):
    loc = pyro.param("loc", torch.tensor(0.0))
    scale = pyro.param("scale", torch.tensor(1.0), constraint=constraints.positive)
    with pyro.iarange("data", data.shape[0], dim=-2):
        pyro.sample("x",
                    dist.Normal(loc, scale).expand([data.shape[0]]),
                    obs=data)


def guide(data):
    pass


pyro.clear_param_store()
elbo = JitTrace_ELBO()
inference = SVI(model, guide, Adam({"lr": 1e-6}), elbo)
inference.step(torch.ones(10))
inference.step(torch.ones(3))  # fails; see error below
which results in the same error:
 Stack Trace 
clang: error: unsupported option '-fopenmp'
clang: error: unsupported option '-fopenmp'
warning: pytorch jit fuser failed to compile with openmp, trying without it...
Traceback (most recent call last):
  File "examples/expand.py", line 61, in &lt;module&gt;
    svi()
  File "examples/expand.py", line 58, in svi
    inference.step(torch.ones(3))
  File "/Users/npradhan/workspace/pyro_dev/pyro/pyro/infer/svi.py", line 96, in step
    loss = self.loss_and_grads(self.model, self.guide, *args, **kwargs)
  File "/Users/npradhan/workspace/pyro_dev/pyro/pyro/infer/trace_elbo.py", line 202, in loss_and_grads
    loss, surrogate_loss = self._loss_and_surrogate_loss(*args)
  File "/Users/npradhan/workspace/pyro_dev/pyro/pyro/ops/jit.py", line 59, in __call__
    ret = self.compiled[argc](*params_and_args)
  File "/Users/npradhan/miniconda2/envs/pytorch-master/lib/python3.6/site-packages/torch/nn/modules/module.py", line 477, in __call__
    result = self.forward(*input, **kwargs)
  File "/Users/npradhan/miniconda2/envs/pytorch-master/lib/python3.6/site-packages/torch/jit/__init__.py", line 736, in forward
    return self._get_method('forward')(*args, **kwargs)
RuntimeError:
The expanded size of the tensor (10) must match the existing size (3) at non-singleton dimension 1 (inferExpandGeometry at /Users/npradhan/workspace/pyro_dev/pytorch/pytorch/aten/src/ATen/ExpandUtils.cpp:71)
frame #0: at::native::expand(at::Tensor const&amp;, at::ArrayRef&lt;long long&gt;, bool) + 2785 (0x11c6a6ae1 in libcaffe2.dylib)
frame #1: at::Type::expand(at::Tensor const&amp;, at::ArrayRef&lt;long long&gt;, bool) const + 100 (0x11c957aa4 in libcaffe2.dylib)
frame #2: torch::autograd::VariableType::expand(at::Tensor const&amp;, at::ArrayRef&lt;long long&gt;, bool) const + 1701 (0x11ea2cc65 in libtorch.dylib)
frame #3: at::Tensor::expand(at::ArrayRef&lt;long long&gt;, bool) const + 137 (0x11e7a1109 in libtorch.dylib)
frame #4: torch::jit::(anonymous namespace)::$_283::operator()(std::__1::vector&lt;torch::jit::IValue, std::__1::allocator&lt;torch::jit::IValue&gt; &gt;&amp;) const + 373 (0x11ee722f5 in libtorch.dylib)
frame #5: int std::__1::__invoke_void_return_wrapper&lt;int&gt;::__call&lt;torch::jit::(anonymous namespace)::$_283&amp;, std::__1::vector&lt;torch::jit::IValue, std::__1::allocator&lt;torch::jit::IValue&gt; &gt;&amp;&gt;(torch::jit::(anonymous namespace)::$_283&amp;&amp;&amp;, std::__1::vector&lt;torch::jit::IValue, std::__1::allocator&lt;torch::jit::IValue&gt; &gt;&amp;&amp;&amp;) + 77 (0x11ee7216d in libtorch.dylib)
frame #6: std::__1::__function::__func&lt;torch::jit::(anonymous namespace)::$_283, std::__1::allocator&lt;torch::jit::(anonymous namespace)::$_283&gt;, int (std::__1::vector&lt;torch::jit::IValue, std::__1::allocator&lt;torch::jit::IValue&gt; &gt;&amp;)&gt;::operator()(std::__1::vector&lt;torch::jit::IValue, std::__1::allocator&lt;torch::jit::IValue&gt; &gt;&amp;) + 68 (0x11ee72064 in libtorch.dylib)
frame #7: std::__1::function&lt;int (std::__1::vector&lt;torch::jit::IValue, std::__1::allocator&lt;torch::jit::IValue&gt; &gt;&amp;)&gt;::operator()(std::__1::vector&lt;torch::jit::IValue, std::__1::allocator&lt;torch::jit::IValue&gt; &gt;&amp;) const + 142 (0x11b628c4e in _C.cpython-36m-darwin.so)
frame #8: torch::jit::InterpreterStateImpl::runOneStage(std::__1::vector&lt;torch::jit::IValue, std::__1::allocator&lt;torch::jit::IValue&gt; &gt;&amp;) + 315 (0x11f14e5eb in libtorch.dylib)
frame #9: torch::jit::InterpreterState::runOneStage(std::__1::vector&lt;torch::jit::IValue, std::__1::allocator&lt;torch::jit::IValue&gt; &gt;&amp;) + 40 (0x11f14e4a8 in libtorch.dylib)
frame #10: torch::jit::GraphExecutorImpl::runFallback(std::__1::vector&lt;torch::jit::IValue, std::__1::allocator&lt;torch::jit::IValue&gt; &gt;&amp;) + 62 (0x11f0a251e in libtorch.dylib)
frame #11: torch::jit::GraphExecutorImpl::run(std::__1::vector&lt;torch::jit::IValue, std::__1::allocator&lt;torch::jit::IValue&gt; &gt;&amp;) + 2110 (0x11f09e4de in libtorch.dylib)
frame #12: torch::jit::GraphExecutor::run(std::__1::vector&lt;torch::jit::IValue, std::__1::allocator&lt;torch::jit::IValue&gt; &gt;&amp;) + 40 (0x11f09dc98 in libtorch.dylib)
frame #13: torch::jit::script::Method::run(std::__1::vector&lt;torch::jit::IValue, std::__1::allocator&lt;torch::jit::IValue&gt; &gt;&amp;) + 1144 (0x11b76b198 in _C.cpython-36m-darwin.so)
frame #14: torch::jit::invokeScriptMethodFromPython(torch::jit::script::Method&amp;, pybind11::args, pybind11::kwargs) + 175 (0x11b74d9df in _C.cpython-36m-darwin.so)
frame #15: pybind11::object pybind11::detail::argument_loader&lt;torch::jit::script::Method&amp;, pybind11::args, pybind11::kwargs&gt;::call_impl&lt;pybind11::object, pybind11::object (*&amp;)(torch::jit::script::Method&amp;, pybind11::args, pybind11::kwargs), 0ul, 1ul, 2ul, pybind11::detail::void_type&gt;(pybind11::object (*&amp;&amp;&amp;)(torch::jit::script::Method&amp;, pybind11::args, pybind11::kwargs), pybind11::detail::index_sequence&lt;0ul, 1ul, 2ul&gt;, pybind11::detail::void_type&amp;&amp;) + 276 (0x11b7b7624 in _C.cpython-36m-darwin.so)
frame #16: std::__1::enable_if&lt;!(std::is_void&lt;pybind11::object&gt;::value), pybind11::object&gt;::type pybind11::detail::argument_loader&lt;torch::jit::script::Method&amp;, pybind11::args, pybind11::kwargs&gt;::call&lt;pybind11::object, pybind11::detail::void_type, pybind11::object (*&amp;)(torch::jit::script::Method&amp;, pybind11::args, pybind11::kwargs)&gt;(pybind11::object (*&amp;&amp;&amp;)(torch::jit::script::Method&amp;, pybind11::args, pybind11::kwargs)) + 56 (0x11b7b6e68 in _C.cpython-36m-darwin.so)
frame #17: void pybind11::cpp_function::initialize&lt;pybind11::object (*&amp;)(torch::jit::script::Method&amp;, pybind11::args, pybind11::kwargs), pybind11::object, torch::jit::script::Method&amp;, pybind11::args, pybind11::kwargs, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(pybind11::object (*&amp;&amp;&amp;)(torch::jit::script::Method&amp;, pybind11::args, pybind11::kwargs), pybind11::object (*)(torch::jit::script::Method&amp;, pybind11::args, pybind11::kwargs), pybind11::name const&amp;, pybind11::is_method const&amp;, pybind11::sibling const&amp;)::'lambda'(pybind11::detail::function_call&amp;)::operator()(pybind11::detail::function_call&amp;) const + 225 (0x11b7b6d21 in _C.cpython-36m-darwin.so)
frame #18: void pybind11::cpp_function::initialize&lt;pybind11::object (*&amp;)(torch::jit::script::Method&amp;, pybind11::args, pybind11::kwargs), pybind11::object, torch::jit::script::Method&amp;, pybind11::args, pybind11::kwargs, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(pybind11::object (*&amp;&amp;&amp;)(torch::jit::script::Method&amp;, pybind11::args, pybind11::kwargs), pybind11::object (*)(torch::jit::script::Method&amp;, pybind11::args, pybind11::kwargs), pybind11::name const&amp;, pybind11::is_method const&amp;, pybind11::sibling const&amp;)::'lambda'(pybind11::detail::function_call&amp;)::__invoke(pybind11::detail::function_call&amp;) + 24 (0x11b7b6c28 in _C.cpython-36m-darwin.so)
frame #19: pybind11::cpp_function::dispatcher(_object*, _object*, _object*) + 6919 (0x11b0152b7 in _C.cpython-36m-darwin.so)
&lt;omitting python frames&gt;
:
operation failed in interpreter:
/Users/npradhan/workspace/pyro_dev/pyro/pyro/distributions/torch_distribution.py(350): log_prob
/Users/npradhan/workspace/pyro_dev/pyro/pyro/poutine/trace_struct.py(245): compute_log_prob
/Users/npradhan/workspace/pyro_dev/pyro/pyro/infer/enum.py(49): get_importance_trace
/Users/npradhan/workspace/pyro_dev/pyro/pyro/infer/trace_elbo.py(52): _get_trace
/Users/npradhan/workspace/pyro_dev/pyro/pyro/infer/elbo.py(111): _get_traces
/Users/npradhan/workspace/pyro_dev/pyro/pyro/infer/trace_elbo.py(168): loss_and_surrogate_loss
/Users/npradhan/workspace/pyro_dev/pyro/pyro/poutine/messenger.py(27): _wraps
/Users/npradhan/workspace/pyro_dev/pyro/pyro/ops/jit.py(49): compiled
/Users/npradhan/miniconda2/envs/pytorch-master/lib/python3.6/site-packages/torch/jit/__init__.py(290): wrapper
/Users/npradhan/workspace/pyro_dev/pyro/pyro/ops/jit.py(39): __call__
/Users/npradhan/workspace/pyro_dev/pyro/pyro/infer/trace_elbo.py(202): loss_and_grads
/Users/npradhan/workspace/pyro_dev/pyro/pyro/infer/svi.py(96): step
examples/expand.py(57): svi
examples/expand.py(61): &lt;module&gt;


  [pytorch-master] npradhan@npradhan:~/workspace/pyro_dev/pyro (pytorch-0.4.1)
  $ python examples/expand.py
clang: error: unsupported option '-fopenmp'
clang: error: unsupported option '-fopenmp'
warning: pytorch jit fuser failed to compile with openmp, trying without it...
Traceback (most recent call last):
  File "examples/expand.py", line 27, in &lt;module&gt;
    inference.step(torch.ones(3))
  File "/Users/npradhan/workspace/pyro_dev/pyro/pyro/infer/svi.py", line 96, in step
    loss = self.loss_and_grads(self.model, self.guide, *args, **kwargs)
  File "/Users/npradhan/workspace/pyro_dev/pyro/pyro/infer/trace_elbo.py", line 202, in loss_and_grads
    loss, surrogate_loss = self._loss_and_surrogate_loss(*args)
  File "/Users/npradhan/workspace/pyro_dev/pyro/pyro/ops/jit.py", line 59, in __call__
    ret = self.compiled[argc](*params_and_args)
  File "/Users/npradhan/miniconda2/envs/pytorch-master/lib/python3.6/site-packages/torch/nn/modules/module.py", line 477, in __call__
    result = self.forward(*input, **kwargs)
  File "/Users/npradhan/miniconda2/envs/pytorch-master/lib/python3.6/site-packages/torch/jit/__init__.py", line 736, in forward
    return self._get_method('forward')(*args, **kwargs)
RuntimeError:
The expanded size of the tensor (10) must match the existing size (3) at non-singleton dimension 1 (inferExpandGeometry at /Users/npradhan/workspace/pyro_dev/pytorch/pytorch/aten/src/ATen/ExpandUtils.cpp:71)
frame #0: at::native::expand(at::Tensor const&amp;, at::ArrayRef&lt;long long&gt;, bool) + 2785 (0x112601ae1 in libcaffe2.dylib)
frame #1: at::Type::expand(at::Tensor const&amp;, at::ArrayRef&lt;long long&gt;, bool) const + 100 (0x1128b2aa4 in libcaffe2.dylib)
frame #2: torch::autograd::VariableType::expand(at::Tensor const&amp;, at::ArrayRef&lt;long long&gt;, bool) const + 1701 (0x114987c65 in libtorch.dylib)
frame #3: at::Tensor::expand(at::ArrayRef&lt;long long&gt;, bool) const + 137 (0x1146fc109 in libtorch.dylib)
frame #4: torch::jit::(anonymous namespace)::$_283::operator()(std::__1::vector&lt;torch::jit::IValue, std::__1::allocator&lt;torch::jit::IValue&gt; &gt;&amp;) const + 373 (0x114dcd2f5 in libtorch.dylib)
frame #5: int std::__1::__invoke_void_return_wrapper&lt;int&gt;::__call&lt;torch::jit::(anonymous namespace)::$_283&amp;, std::__1::vector&lt;torch::jit::IValue, std::__1::allocator&lt;torch::jit::IValue&gt; &gt;&amp;&gt;(torch::jit::(anonymous namespace)::$_283&amp;&amp;&amp;, std::__1::vector&lt;torch::jit::IValue, std::__1::allocator&lt;torch::jit::IValue&gt; &gt;&amp;&amp;&amp;) + 77 (0x114dcd16d in libtorch.dylib)
frame #6: std::__1::__function::__func&lt;torch::jit::(anonymous namespace)::$_283, std::__1::allocator&lt;torch::jit::(anonymous namespace)::$_283&gt;, int (std::__1::vector&lt;torch::jit::IValue, std::__1::allocator&lt;torch::jit::IValue&gt; &gt;&amp;)&gt;::operator()(std::__1::vector&lt;torch::jit::IValue, std::__1::allocator&lt;torch::jit::IValue&gt; &gt;&amp;) + 68 (0x114dcd064 in libtorch.dylib)
frame #7: std::__1::function&lt;int (std::__1::vector&lt;torch::jit::IValue, std::__1::allocator&lt;torch::jit::IValue&gt; &gt;&amp;)&gt;::operator()(std::__1::vector&lt;torch::jit::IValue, std::__1::allocator&lt;torch::jit::IValue&gt; &gt;&amp;) const + 142 (0x111583c4e in _C.cpython-36m-darwin.so)
frame #8: torch::jit::InterpreterStateImpl::runOneStage(std::__1::vector&lt;torch::jit::IValue, std::__1::allocator&lt;torch::jit::IValue&gt; &gt;&amp;) + 315 (0x1150a95eb in libtorch.dylib)
frame #9: torch::jit::InterpreterState::runOneStage(std::__1::vector&lt;torch::jit::IValue, std::__1::allocator&lt;torch::jit::IValue&gt; &gt;&amp;) + 40 (0x1150a94a8 in libtorch.dylib)
frame #10: torch::jit::GraphExecutorImpl::runFallback(std::__1::vector&lt;torch::jit::IValue, std::__1::allocator&lt;torch::jit::IValue&gt; &gt;&amp;) + 62 (0x114ffd51e in libtorch.dylib)
frame #11: torch::jit::GraphExecutorImpl::run(std::__1::vector&lt;torch::jit::IValue, std::__1::allocator&lt;torch::jit::IValue&gt; &gt;&amp;) + 2110 (0x114ff94de in libtorch.dylib)
frame #12: torch::jit::GraphExecutor::run(std::__1::vector&lt;torch::jit::IValue, std::__1::allocator&lt;torch::jit::IValue&gt; &gt;&amp;) + 40 (0x114ff8c98 in libtorch.dylib)
frame #13: torch::jit::script::Method::run(std::__1::vector&lt;torch::jit::IValue, std::__1::allocator&lt;torch::jit::IValue&gt; &gt;&amp;) + 1144 (0x1116c6198 in _C.cpython-36m-darwin.so)
frame #14: torch::jit::invokeScriptMethodFromPython(torch::jit::script::Method&amp;, pybind11::args, pybind11::kwargs) + 175 (0x1116a89df in _C.cpython-36m-darwin.so)
frame #15: pybind11::object pybind11::detail::argument_loader&lt;torch::jit::script::Method&amp;, pybind11::args, pybind11::kwargs&gt;::call_impl&lt;pybind11::object, pybind11::object (*&amp;)(torch::jit::script::Method&amp;, pybind11::args, pybind11::kwargs), 0ul, 1ul, 2ul, pybind11::detail::void_type&gt;(pybind11::object (*&amp;&amp;&amp;)(torch::jit::script::Method&amp;, pybind11::args, pybind11::kwargs), pybind11::detail::index_sequence&lt;0ul, 1ul, 2ul&gt;, pybind11::detail::void_type&amp;&amp;) + 276 (0x111712624 in _C.cpython-36m-darwin.so)
frame #16: std::__1::enable_if&lt;!(std::is_void&lt;pybind11::object&gt;::value), pybind11::object&gt;::type pybind11::detail::argument_loader&lt;torch::jit::script::Method&amp;, pybind11::args, pybind11::kwargs&gt;::call&lt;pybind11::object, pybind11::detail::void_type, pybind11::object (*&amp;)(torch::jit::script::Method&amp;, pybind11::args, pybind11::kwargs)&gt;(pybind11::object (*&amp;&amp;&amp;)(torch::jit::script::Method&amp;, pybind11::args, pybind11::kwargs)) + 56 (0x111711e68 in _C.cpython-36m-darwin.so)
frame #17: void pybind11::cpp_function::initialize&lt;pybind11::object (*&amp;)(torch::jit::script::Method&amp;, pybind11::args, pybind11::kwargs), pybind11::object, torch::jit::script::Method&amp;, pybind11::args, pybind11::kwargs, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(pybind11::object (*&amp;&amp;&amp;)(torch::jit::script::Method&amp;, pybind11::args, pybind11::kwargs), pybind11::object (*)(torch::jit::script::Method&amp;, pybind11::args, pybind11::kwargs), pybind11::name const&amp;, pybind11::is_method const&amp;, pybind11::sibling const&amp;)::'lambda'(pybind11::detail::function_call&amp;)::operator()(pybind11::detail::function_call&amp;) const + 225 (0x111711d21 in _C.cpython-36m-darwin.so)
frame #18: void pybind11::cpp_function::initialize&lt;pybind11::object (*&amp;)(torch::jit::script::Method&amp;, pybind11::args, pybind11::kwargs), pybind11::object, torch::jit::script::Method&amp;, pybind11::args, pybind11::kwargs, pybind11::name, pybind11::is_method, pybind11::sibling&gt;(pybind11::object (*&amp;&amp;&amp;)(torch::jit::script::Method&amp;, pybind11::args, pybind11::kwargs), pybind11::object (*)(torch::jit::script::Method&amp;, pybind11::args, pybind11::kwargs), pybind11::name const&amp;, pybind11::is_method const&amp;, pybind11::sibling const&amp;)::'lambda'(pybind11::detail::function_call&amp;)::__invoke(pybind11::detail::function_call&amp;) + 24 (0x111711c28 in _C.cpython-36m-darwin.so)
frame #19: pybind11::cpp_function::dispatcher(_object*, _object*, _object*) + 6919 (0x110f702b7 in _C.cpython-36m-darwin.so)
&lt;omitting python frames&gt;
:
operation failed in interpreter:
/Users/npradhan/workspace/pyro_dev/pyro/pyro/distributions/torch_distribution.py(350): log_prob
/Users/npradhan/workspace/pyro_dev/pyro/pyro/poutine/trace_struct.py(245): compute_log_prob
/Users/npradhan/workspace/pyro_dev/pyro/pyro/infer/enum.py(49): get_importance_trace
/Users/npradhan/workspace/pyro_dev/pyro/pyro/infer/trace_elbo.py(52): _get_trace
/Users/npradhan/workspace/pyro_dev/pyro/pyro/infer/elbo.py(111): _get_traces
/Users/npradhan/workspace/pyro_dev/pyro/pyro/infer/trace_elbo.py(168): loss_and_surrogate_loss
/Users/npradhan/workspace/pyro_dev/pyro/pyro/poutine/messenger.py(27): _wraps
/Users/npradhan/workspace/pyro_dev/pyro/pyro/ops/jit.py(49): compiled
/Users/npradhan/miniconda2/envs/pytorch-master/lib/python3.6/site-packages/torch/jit/__init__.py(290): wrapper
/Users/npradhan/workspace/pyro_dev/pyro/pyro/ops/jit.py(39): __call__
/Users/npradhan/workspace/pyro_dev/pyro/pyro/infer/trace_elbo.py(202): loss_and_grads
/Users/npradhan/workspace/pyro_dev/pyro/pyro/infer/svi.py(96): step
examples/expand.py(26): &lt;module&gt;



PyTorch is able to generalize tensor expansion beyond the initial tensor sizes provided as arguments to torch.jit.trace, so I think it might just be a simple fix on our end (maybe something like providing *args in the call to torch.jit).
cc &lt;denchmark-link:https://github.com/eb8680&gt;@eb8680&lt;/denchmark-link&gt;
, &lt;denchmark-link:https://github.com/fritzo&gt;@fritzo&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='neerajprad' date='2018-09-04T20:27:44Z'>
		I believe the issue is that somewhere we are computing the batch size through pure python, and dependency is being hidden from the JIT.
An easy workaround is to ensure each batch size is compiled separately. This can be done by passing in batch size as a kwarg (our jit wrapper assumes all args are tensors and all kwargs are non-tensors; each kwargs dict triggers a separate compilation.
def model(data, batch_size):
    ...body ignores batch_size kwarg...
def guide(data, batch_size):
    ...body ignores batch_size kwarg...
...
inference.step(torch.ones(10), batch_size=10)
inference.step(torch.ones(3), batch_size=3)
		</comment>
		<comment id='2' author='neerajprad' date='2018-09-19T18:40:09Z'>
		Fixed in &lt;denchmark-link:https://github.com/pyro-ppl/pyro/pull/1392&gt;#1392&lt;/denchmark-link&gt;
.
		</comment>
	</comments>
</bug>