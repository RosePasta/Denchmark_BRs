<bug id='298' author='Henry-E' open_date='2017-09-25T11:15:16Z' closed_time='2017-12-05T17:44:59Z'>
	<summary>Bug with feature sorting</summary>
	<description>



OpenNMT-py/onmt/IO.py


        Lines 76 to 77
      in
      d748ad1






 features = sorted(batch.__dict__[k] 



 for k in batch.__dict__ if feat_start in k) 





Causes the error RuntimeError: bool value of Variable objects containing non-empty torch.cuda.ByteTensor is ambiguous Uncaught exception.
I broke apart the different steps and it appears that applying sorted() to the matrices themselves, rather than presumably the names, is what's causing the issue. I'm not going to submit a pull request yet in case there's some important reason for the sorting. And also quite embarrassingly I can't get the loop working as a list comprehension because of variable scoping or something.
Stack trace
&lt;denchmark-code&gt;Traceback (most recent call last):
  File "/home/henrye/anaconda3/envs/pytorch/lib/python3.6/site-packages/ipdb/__main__.py", line 198, in main
    pdb._runscript(mainpyfile)
  File "/home/henrye/anaconda3/envs/pytorch/lib/python3.6/pdb.py", line 1548, in _runscript
    self.run(statement)
  File "/home/henrye/anaconda3/envs/pytorch/lib/python3.6/bdb.py", line 431, in run
    exec(cmd, globals, locals)
  File "&lt;string&gt;", line 1, in &lt;module&gt;
  File "/home/henrye/downloads/OpenNMT-py/train.py", line 1, in &lt;module&gt;
    from __future__ import division
  File "/home/henrye/downloads/OpenNMT-py/train.py", line 284, in main
    train_model(model, train, valid, fields, optim)
  File "/home/henrye/downloads/OpenNMT-py/train.py", line 144, in train_model
    train_stats = trainer.train(epoch, report_func)
  File "/home/henrye/downloads/OpenNMT-py/onmt/Trainer.py", line 108, in train
    src = onmt.IO.make_features(batch, 'src')
  File "/home/henrye/downloads/OpenNMT-py/onmt/IO.py", line 77, in make_features
    for k in batch.__dict__ if feat_start in k)
  File "/home/henrye/anaconda3/envs/pytorch/lib/python3.6/site-packages/torch/autograd/variable.py", line 123, in __bool__
    torch.typename(self.data) + " is ambiguous")
RuntimeError: bool value of Variable objects containing non-empty torch.cuda.ByteTensor is ambiguous
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='Henry-E' date='2017-09-26T15:03:17Z'>
		&lt;denchmark-link:https://github.com/bpopeters&gt;@bpopeters&lt;/denchmark-link&gt;
 what is this code? I honestly kind of hate whatever trick this is. Are you trying to sort by the values of tensors somehow? Why do you need to do any sorting in this function?
		</comment>
		<comment id='2' author='Henry-E' date='2017-09-26T15:04:06Z'>
		oh, I guess it is trying to sort by the string of the key?
		</comment>
		<comment id='3' author='Henry-E' date='2017-09-26T15:20:29Z'>
		I would guess that's what it's supposed to do, but I don't know if it'll
succeed; it's sorting the values in the comprehension, not the keys of
`batch.__dict__`. But the documentation of what `batch` is does not appear
to be correct. I don't like this code either; it's one of several things in
IO.py that are fairly objectionable.

I'll have a closer look this evening CEST.
&lt;denchmark-link:#&gt;…&lt;/denchmark-link&gt;


On Tue, Sep 26, 2017 at 5:04 PM, srush ***@***.***&gt; wrote:
 oh, I guess it is trying to sort by the string of the key?

 —
 You are receiving this because you were mentioned.
 Reply to this email directly, view it on GitHub
 &lt;#298 (comment)&gt;,
 or mute the thread
 &lt;https://github.com/notifications/unsubscribe-auth/AJvP79kHKtd_0-8JEus7PKZeFFmPr3vuks5smRJpgaJpZM4Pikem&gt;
 .



		</comment>
		<comment id='4' author='Henry-E' date='2017-09-26T17:16:59Z'>
		Oh, haha thought you may have written it. Guess it was someone else. I'll take a look then.
		</comment>
		<comment id='5' author='Henry-E' date='2017-09-26T17:19:20Z'>
		I kind of wrote it, in the sense that I extended it to target features (and apparently added the sorted; I wish I'd left a comment), but the stuff with __dict__ was there before me.
		</comment>
		<comment id='6' author='Henry-E' date='2017-10-02T02:46:03Z'>
		did this get fixed in the io.py refactor?
		</comment>
		<comment id='7' author='Henry-E' date='2017-10-02T08:08:31Z'>
		This'll be in the next round of commits.
		</comment>
	</comments>
</bug>