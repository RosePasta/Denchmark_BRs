<bug id='1007' author='ericspod' open_date='2020-09-08T20:11:19Z' closed_time='2020-09-15T10:34:35Z'>
	<summary>LoadImage Fails to Load Certain JPEGs</summary>
	<description>
Describe the bug
LoadImage fails to correctly load certain JPEGs. The produced array contains streaked information. Test image included:
&lt;denchmark-link:https://user-images.githubusercontent.com/17726042/92523062-a3882680-f217-11ea-9e48-3ac644559ca9.jpg&gt;&lt;/denchmark-link&gt;

.
To Reproduce
im=LoadImage(image_only=True)("bad_image.jpg")
plt.imshow(im[0],cmap="gray")
This produces
&lt;denchmark-link:https://user-images.githubusercontent.com/17726042/92523153-cb778a00-f217-11ea-9ec9-30ef1313f3c8.png&gt;&lt;/denchmark-link&gt;

Expected behavior
Image should look like the attached image but comes out corrupted when viewed with matplotlib, using plt.imread does work.
Environment (please complete the following information):

Ubuntu
Python version 3.7
MONAI version 62903b6
CUDA/cuDNN version 11, 7.5
GPU Titan Xp

	</description>
	<comments>
		<comment id='1' author='ericspod' date='2020-09-09T01:48:08Z'>
		Hi &lt;denchmark-link:https://github.com/ericspod&gt;@ericspod&lt;/denchmark-link&gt;
 ,
Did you tried with LoadImage(image_only=True, reader=PILReader())("bad_image.jpg")?
Maybe something wrong with ITK reader.
Thanks.
		</comment>
		<comment id='2' author='ericspod' date='2020-09-09T12:42:20Z'>
		That doe work so it's an ITK issue.
		</comment>
		<comment id='3' author='ericspod' date='2020-09-09T18:09:39Z'>
		Hi &lt;denchmark-link:https://github.com/ericspod&gt;@ericspod&lt;/denchmark-link&gt;

Would you mind sending me one of the jpegs?   I'd like to test it using ITK directly.   Or perhaps you can try reading it using 3D Slicer (which also uses ITK)?
Thanks,
Stephen
		</comment>
		<comment id='4' author='ericspod' date='2020-09-09T19:28:03Z'>
		The test image I included above is one that doesn't work, you can click on it and save through the browser. Github might re-encode jpegs so if it still works for you I can try sending it through a different channel.
		</comment>
		<comment id='5' author='ericspod' date='2020-09-09T19:39:18Z'>
		&lt;denchmark-link:https://user-images.githubusercontent.com/279727/92644809-e72f6e80-f2b1-11ea-9529-ed67469ba885.jpg&gt;&lt;/denchmark-link&gt;

A simple ITK program loads and displays that jpeg perfectly fine:
Python 3.7.6 (default, Jan  8 2020, 20:23:39) [MSC v.1916 64 bit (AMD64)]
Type 'copyright', 'credits' or 'license' for more information
IPython 7.12.0 -- An enhanced Interactive Python. Type '?' for help.
In [1]: import itk
In [2]: img = itk.imread('92523062-a3882680-f217-11ea-9e48-3ac644559ca9.jpg')
In [3]: itk.imwrite(img, 'test.png')

ImageViewer test.png

		</comment>
		<comment id='6' author='ericspod' date='2020-09-09T21:44:09Z'>
		I think it's being caused by this call here: 


MONAI/monai/data/image_reader.py


         Line 222
      in
      d958ab5






 return itk.array_view_from_image(img, keep_axes=not self.c_order_axis_indexing) 




 This is called at some point by LoadImage which will use ITKReader by default.
To replicate with the current MONAI codebase:
import matplotlib.pyplot as plt
import monai

r=monai.data.ITKReader()
img=r.read("bad_image.jpg")

plt.imshow(img)  # works, shape is (909, 1082, 3)
plt.imshow(np.array(img))  # also works, shape is (909, 1082, 3)
plt.imshow(r._get_array_data(img)[0])  # shows distorted image, shape is (3, 1082, 909)
Is array_view_from_image meant to be used in this way to extract the array from an ITK image object, or is this incorrect API usage? I can get the array by using numpy.array so perhaps this should be used instead. Is the argument for keep_axis wrong? The problem is that some images load correctly like this, and some like the example do not which I don't think is related to the shape of the images.
		</comment>
		<comment id='7' author='ericspod' date='2020-09-09T22:47:12Z'>
		Eric,

Great detective work!

I could be wrong, but my quick experiments suggest that the following might
work:
 plt.imshow(r._get_array_data(img,keep_axis=True)[0])
All are valid uses.  It just changes axis are provided "first" in memory.
 See the discussion at:
&lt;denchmark-link:https://discourse.itk.org/t/importing-image-from-array-and-axis-reorder/1192/5&gt;https://discourse.itk.org/t/importing-image-from-array-and-axis-reorder/1192/5&lt;/denchmark-link&gt;


Hope this works!
&lt;denchmark-link:#&gt;…&lt;/denchmark-link&gt;


On Wed, Sep 9, 2020 at 5:44 PM Eric Kerfoot ***@***.***&gt; wrote:
 I think it's being caused by this call here:
 https://github.com/Project-MONAI/MONAI/blob/d958ab59903df436019b4aa742129e10a7499559/monai/data/image_reader.py#L222
 This is called at some point by LoadImage which will use ITKReader by
 default.

 To replicate with the current MONAI codebase:

 import matplotlib.pyplot as pltimport monai
 r=monai.data.ITKReader()img=r.read("bad_image.jpg")
 plt.imshow(img)  # works, shape is (909, 1082, 3)plt.imshow(np.array(img))  # also works, shape is (909, 1082, 3)plt.imshow(r._get_array_data(img)[0])  # shows distorted image, shape is (3, 1082, 909)

 Is array_view_from_image meant to be used in this way to extract the
 array from an ITK image object, or is this incorrect API usage? I can get
 the array by using numpy.array so perhaps this should be used instead.

 —
 You are receiving this because you commented.
 Reply to this email directly, view it on GitHub
 &lt;#1007 (comment)&gt;,
 or unsubscribe
 &lt;https://github.com/notifications/unsubscribe-auth/AACEJL4CTQT7OLGCSYMN55TSE7ZLPANCNFSM4RAOG4LQ&gt;
 .


-- 
Stephen R. Aylward, Ph.D.
Senior Director of Strategic Initiatives
---
Kitware: *Advancing the frontiers of understanding*
*by developing innovative open-source software platforms*
*and integrating them into research, processes, and products.*

		</comment>
		<comment id='8' author='ericspod' date='2020-09-10T00:18:31Z'>
		The method ITKReader._get_array_data doesn't have the argument keep_axis, I guess you meant for that to be set for itk.array_view_from_image? If so this is achieved by constructing the reader as ITKReader(c_order_axis_indexing=True) though I feel the intent of this argument is about the order of values in memory rather than the ordering of dimensions which is the effect it actually has. It now is a question of what the default values for ITKReader should be so that images are loaded correctly always.
		</comment>
		<comment id='9' author='ericspod' date='2020-09-10T15:41:21Z'>
		Hi &lt;denchmark-link:https://github.com/ericspod&gt;@ericspod&lt;/denchmark-link&gt;
 and &lt;denchmark-link:https://github.com/aylward&gt;@aylward&lt;/denchmark-link&gt;
 ,
I faced same issue when I develop NNUNet example based on Decathlon dataset, for example, if using , the output is:
&lt;denchmark-link:https://user-images.githubusercontent.com/27533405/92756131-1b448580-f3bf-11ea-8264-0792b1afc9d9.png&gt;&lt;/denchmark-link&gt;

If using , the output is:
&lt;denchmark-link:https://user-images.githubusercontent.com/27533405/92755885-dcaecb00-f3be-11ea-8a20-48a9af26432c.png&gt;&lt;/denchmark-link&gt;

What do you prefer to go for this problem? Change the default value to c_order_axis_indexing=True in ITKReader?
If so, I can fix it soon.
Thanks.
		</comment>
		<comment id='10' author='ericspod' date='2020-09-10T18:04:27Z'>
		Changing the default would work in this instance, but what is the purpose of the keep_axes argument in itk.array_view_from_image which you're setting? It rearranges the ordering of data in memory (or it's interpretation of what that ordering is) as well as rearranging the dimension order. Images like jpg and png are typically read as WHC dimension order, imread in various packages produces images in HWC ordering, if this is what we want from the reader then transposing explicitly is the way to do it. If we want to convert it to Pytorch CHW ordering then again using np.transpose is the way. Was this the intent of c_order_axis_indexing?
The specific problem I'm having beyond LoadImage producing the above issue is that the dimensions of images varies in that they may have no channel dimension, or have an RGB(A) channel dimension but be grayscale so the channels are duplicated. to regularize the inputs I have a transform sequence to do this explicitly:
Compose([
    LoadImage(image_only=True,reader=PILReader()),
    Lambda(lambda im: im if im.ndim==2 else im[...,0]),
    AddChannel(),
    ...
])
If c_order_axis_indexing was intended to help with this by making the first dimension RGB channels it isn't really doing that. The follow on question is if we load 2D color images do we want it converted to CHW ordering or leave it as HWC which imshow and other routines expect?
		</comment>
		<comment id='11' author='ericspod' date='2020-09-10T21:59:37Z'>
		The intent behind c_order_axis_indexing was the exact same as keep_axis.
 The thought was that "keep_axis" was not a descriptive name, so instead of
continuing to use the unclear ITK term, MONAI used c_order_axis_indexing to
indicate when HWC data indexing is being used.

The relevant code in ITK is in ITK/Modules/Bridge/NumPy/wrapping/
PyBuffer.i.in (lines 27-31):

        if(image.GetNumberOfComponentsPerPixel() &gt; 1):
            shape = [image.GetNumberOfComponentsPerPixel(), ] + shape

        if keep_axes == False:
            shape.reverse()

The data in memory is never reshaped/transposed.   However, we can easily
modify ITK to support transposing/reshaping the python data differently
based on the presence of channel data at each pixel, but (1) this would
require calling GetImageFromArray() instead of GetImageViewFrom Array()
since the data will need to be copied and (2) I am unclear on what options
we want supported by LoadImage (and ITKReader) in MONAI: CHW, HWC, CWH, ?
 For example, should LoadImage (and/or ITKReader and all other Readers)
always force output to use a specific index ordering?
&lt;denchmark-link:#&gt;…&lt;/denchmark-link&gt;


On Thu, Sep 10, 2020 at 2:04 PM Eric Kerfoot ***@***.***&gt; wrote:
 Changing the default would work in this instance, but what is the purpose
 of the keep_axes argument in itk.array_view_from_image which you're
 setting? It rearranges the ordering of data in memory (or it's
 interpretation of what that ordering is) as well as rearranging the
 dimension order. Images like jpg and png are typically read as WHC
 dimension order, imread in various packages produces images in HWC
 ordering, if this is what we want from the reader then transposing
 explicitly is the way to do it. If we want to convert it to Pytorch CHW
 ordering then again using np.transpose is the way. Was this the intent of
 c_order_axis_indexing?

 The specific problem I'm having beyond LoadImage producing the above
 issue is that the dimensions of images varies in that they may have no
 channel dimension, or have an RGB(A) channel dimension but be grayscale so
 the channels are duplicated. to regularize the inputs I have a transform
 sequence to do this explicitly:

 Compose([
     LoadImage(image_only=True,reader=PILReader()),
     Lambda(lambda im: im if im.ndim==2 else im[...,0]),
     AddChannel(),
     ...
 ])

 If c_order_axis_indexing was intended to help with this by making the
 first dimension RGB channels it isn't really doing that. The follow on
 question is if we load 2D color images do we want it converted to CHW
 ordering or leave it as HWC which imshow and other routines expect?

 —
 You are receiving this because you were mentioned.
 Reply to this email directly, view it on GitHub
 &lt;#1007 (comment)&gt;,
 or unsubscribe
 &lt;https://github.com/notifications/unsubscribe-auth/AACEJL3ZXIWFCAW6GFY3WGLSFEILXANCNFSM4RAOG4LQ&gt;
 .


-- 
Stephen R. Aylward, Ph.D.
Senior Director of Strategic Initiatives
---
Kitware: *Advancing the frontiers of understanding*
*by developing innovative open-source software platforms*
*and integrating them into research, processes, and products.*

		</comment>
		<comment id='12' author='ericspod' date='2020-09-10T23:49:31Z'>
		I think what's confused me is that keep_axes gets set to the inverse of c_order_axis_indexing: 


MONAI/monai/data/image_reader.py


         Line 222
      in
      1d2dce7






 return itk.array_view_from_image(img, keep_axes=not self.c_order_axis_indexing) 





For the image load to work I set c_order_axis_indexing to True so that keep_axes is False and this loads correctly. The layout of the loaded image in memory conforms to HWC ordering so reversing the shape causes it to be misinterpreted. We also don't want to reverse the shape since this would give us CWH ordering, I don't think we want to transpose the spatial dimensions like this. Using numpy.transpose to change the ordering from HWC to CHW doesn't have these problems, the following gives the results I'd expect:
import PIL.Image as pim

im = pim.open("bad_image.jpg")
im = np.array(im).transpose((2, 0, 1))
		</comment>
		<comment id='13' author='ericspod' date='2020-09-11T00:26:39Z'>
		Hi &lt;denchmark-link:https://github.com/ericspod&gt;@ericspod&lt;/denchmark-link&gt;
 ,
I agree with you, we should not just set c_order_axis_indexing=True, it will make 3D data to DWHC shape, which is not expected.
The expected shape should be HWDC, I think ITK can't support it so far, right?
Thanks.
		</comment>
		<comment id='14' author='ericspod' date='2020-09-14T00:02:04Z'>
		From looking at the ITK code further I think  should always be False. It would only be True if data was being read in Fortran-ordering as opposed to C-ordering, simply reversing the shape will just cause the memory view to be interpreted in a transposed order. In &lt;denchmark-link:https://github.com/InsightSoftwareConsortium/ITK/blob/631aeaebf82d2ce8a7d7e3b0165940c5c2f1a586/Modules/Bridge/NumPy/wrapping/PyBuffer.i.in#L4&gt;GetArrayViewFromImage &lt;/denchmark-link&gt;
 if  is True the ordering of the shape is reversed but the returned Numpy array still interprets the underlying memory segment in C-ordering, this is why we get the transposed image as I showed.
I think the  parameter is not explained correctly since it should only be True if &lt;denchmark-link:https://github.com/InsightSoftwareConsortium/ITK/blob/631aeaebf82d2ce8a7d7e3b0165940c5c2f1a586/Modules/Bridge/NumPy/wrapping/PyBuffer.i.in#L35&gt;memview&lt;/denchmark-link&gt;
 is a view into Fortran-ordered segments, the documentation does not state this. Further if this is the case it would be better to leave the shape reversed (ie. in HW(D)C ordering) and set the  argument for  to  to use Fortran-ordering internally.
		</comment>
		<comment id='15' author='ericspod' date='2020-09-14T08:46:54Z'>
		Hi &lt;denchmark-link:https://github.com/ericspod&gt;@ericspod&lt;/denchmark-link&gt;
 ,
Sounds good an idea, I am working on a PR to update it, will add your review soon.
Thanks.
		</comment>
		<comment id='16' author='ericspod' date='2020-10-27T15:24:51Z'>
		This issue has to due with the memory layout of the image data, i.e. whether the channels are contiguous in memory or interleaved. Image processing and visualization libraries like ITK or matplotlib usually work with the data where the channels are interleaved, i.e.

R1G1B1R2G2B2R3G3B3

versus

R1R2R3G1G2G3B1B2B3

used by PyTorch.
This is demonstrated in &lt;denchmark-link:https://nbviewer.jupyter.org/gist/thewtex/2e9aa95f7e65170082a606f26b49b482&gt;https://nbviewer.jupyter.org/gist/thewtex/2e9aa95f7e65170082a606f26b49b482&lt;/denchmark-link&gt;
 which includes the image provided by &lt;denchmark-link:https://github.com/ericspod&gt;@ericspod&lt;/denchmark-link&gt;
 after adding support in &lt;denchmark-link:https://github.com/Project-MONAI/MONAI/pull/1147&gt;#1147&lt;/denchmark-link&gt;

		</comment>
		<comment id='17' author='ericspod' date='2020-10-27T15:27:36Z'>
		The  referenced in the  argument to  are referencing the order of indexing of the spatial dimensions. We will add a new kwarg to  to specify whether the channels should be contiguous or interleaved.  Until that is released, we can use &lt;denchmark-link:https://github.com/Project-MONAI/MONAI/pull/1147&gt;#1147&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>