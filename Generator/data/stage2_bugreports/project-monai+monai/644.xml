<bug id='644' author='tangzhe0220' open_date='2020-06-29T10:09:12Z' closed_time='2020-06-29T15:07:49Z'>
	<summary>Jaccard (IOU) loss issue</summary>
	<description>
Describe the bug
I'm using dice loss and Jaccard (IOU) loss for segmentation tasks. However, I found the Jaccard(IOU) loss is lower than 0.0 , when I check the code at 'monai/losses/dice.py', class DiceLoss, line128-133, I found the function is implemented as follow:
ground_o = torch.sum(target, dim=reduce_axis)
pred_o = torch.sum(input, dim=reduce_axis)
denominator = ground_o + pred_o
if self.jaccard:
denominator -= intersection
f = 1.0 - (2.0 * intersection + smooth) / (denominator + smooth)
this means, the Jaccard loss function is written by:
jaccard loss function = 1.0 - 2.0 * A∩B/A∪B
but the actual jaccard loss should be:
jaccard loss function = 1.0 - A∩B/A∪B
To Reproduce
current code has no problem to run optimizer, the loss value reduced even the value is smaller than 0, but I think it is better to fix with standard Jaccard (IOU) function.
Expected behavior
I think the corrected code is :
ground_o = torch.sum(target, dim=reduce_axis)
pred_o = torch.sum(input, dim=reduce_axis)
denominator = ground_o + pred_o
if self.jaccard:
denominator = 2.0 * (denominator - intersection)
f = 1.0 - (2.0 * intersection + smooth) / (denominator + smooth)
Screenshots
None
Environment (please complete the following information):

OS: Centos7, windows10
Python version, 3.7
MONAI version #632
CUDA/cuDNN version, cuda 10.2
GPU models and configuration, None

	</description>
	<comments>
	</comments>
</bug>