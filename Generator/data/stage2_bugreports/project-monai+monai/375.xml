<bug id='375' author='murraycutforth' open_date='2020-05-11T08:20:55Z' closed_time='2020-05-11T13:52:56Z'>
	<summary>Bug in RandAffined transformations</summary>
	<description>
Describe the bug
When RandAffined is called on a dict containing more than one array (for example an image and a segmentation), and if self.rand_affine.do_transform is false, then the transformation returns the wrong result for everything after the first array.
To Reproduce
The transforms_demo_2d notebook can be easily repurposed to demonstrate this bug.
Screenshots
This is the output from two identical RandAffined transformations.
With prob = 1.0:
&lt;denchmark-link:https://user-images.githubusercontent.com/11088372/81538294-7b221580-9366-11ea-9556-582629de5e87.png&gt;&lt;/denchmark-link&gt;

With prob = 0.0:
&lt;denchmark-link:https://user-images.githubusercontent.com/11088372/81538487-b6244900-9366-11ea-938d-7a4eb11db9e2.png&gt;&lt;/denchmark-link&gt;

Environment (please complete the following information):

OS: Centos 7
Python version: 3.7
MONAI version [e.g. git commit hash]: 0.1.0+34.gad06dff.dirty

Additional context
I did some digging on this in my own fork of the code. The relevant code in RandAffined is:



MONAI/monai/transforms/spatial/dictionary.py


        Lines 313 to 330
      in
      ad06dff






 def __call__(self, data): 



 d = dict(data) 



 self.randomize() 



 



 spatial_size = self.rand_affine.spatial_size 



 if self.rand_affine.do_transform: 



 grid = self.rand_affine.rand_affine_grid(spatial_size=spatial_size) 



 else: 



 grid = create_grid(spatial_size) 



 



 if isinstance(self.mode, (tuple, list)): 



 for key, m in zip(self.keys, self.mode): 



 d[key] = self.rand_affine.resampler(d[key], grid, mode=m) 



 return d 



 



 for key in self.keys:  # same interpolation mode 



 d[key] = self.rand_affine.resampler(d[key], grid, self.rand_affine.mode) 



 return d 





The bug occurs because



MONAI/monai/transforms/spatial/dictionary.py


         Line 321
      in
      ad06dff






 grid = create_grid(spatial_size) 





returns a numpy array, whereas



MONAI/monai/transforms/spatial/dictionary.py


         Line 319
      in
      ad06dff






 grid = self.rand_affine.rand_affine_grid(spatial_size=spatial_size) 





returns a torch.Tensor. And the Resample class behaves differently with these different types of input. For torch.Tensor grids, Resample uses clone(), and operates on a copy, whereas with numpy inputs, torch.as_tensor() is called which then references the original data. Just changing the constructor from torch.as_tensor() to torch.tensor() ensures that torch makes a copy of the grid, which means future calls to Resample will have the correct grid values.
I'll submit a PR from my fork with the fix?
Note that this bug will also happen with Rand2DElasticd and Rand3DElasticd since they follow the same pattern, but this fix to Resample will also apply to them.
	</description>
	<comments>
		<comment id='1' author='murraycutforth' date='2020-05-11T08:35:55Z'>
		Hi &lt;denchmark-link:https://github.com/murraycutforth&gt;@murraycutforth&lt;/denchmark-link&gt;
 ,
Thanks very much for your bug report and detailed debug information!
Please submit your fix PR as you said.
Thanks in advance!
		</comment>
	</comments>
</bug>