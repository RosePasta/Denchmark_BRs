<bug id='208' author='jocaml' open_date='2019-05-29T11:36:14Z' closed_time='2019-06-01T18:26:06Z'>
	<summary>Segmentation fault when accessing output consumers</summary>
	<description>
Using version 0.13.0, when I try to call any method on members of the op.output_consumers(i)vector, I get a segmentation fault:
fn f(graph: &amp;Graph) {
    let placeholders = graph
        .operation_iter()
        .filter(|op| op.op_type() == Ok("Placeholder".into()));

    for op in placeholders {
        for i in 0..op.num_outputs() {
            for (consumer_op, input_index) in op.output_consumers(i) {
                consumer_op.input(input_index); // Segmentation fault (core dumped)
            }
        }
    }
}
Here is a &lt;denchmark-link:https://github.com/tensorflow/rust/files/3235555/valgrind.log&gt;valgrind log&lt;/denchmark-link&gt;
. Not sure if this should be submitted to the tensorflow repo.
Here is the cargo project: &lt;denchmark-link:https://github.com/tensorflow/rust/files/3235562/tf.zip&gt;tf.zip&lt;/denchmark-link&gt;

Edit: I've uploaded a new valgrind log, the last one had some garbage from other dependencies (though not sure how they ended up in there hm).
	</description>
	<comments>
		<comment id='1' author='jocaml' date='2019-05-30T05:19:12Z'>
		I tried it with all versions from 0.9.0 (tensorflow 1.7.0) and it's the same. On one run I managed to get
[src/tf.rs:104] consumer_op.input(input_index) = (
    Operation {
        inner: 0x0000000000000000,
        gimpl: GraphImpl {
            inner: 0x000056278c30bb50,
            owned: true,
        },
    },
    18446744073709551615,
)
Is prebuilt downloaded TensorFlow compiled with jemalloc?
		</comment>
		<comment id='2' author='jocaml' date='2019-05-31T03:34:03Z'>
		I've tracked it down to a bug in the Rust bindings.  I'll submit a fix.
		</comment>
		<comment id='3' author='jocaml' date='2019-06-01T18:31:44Z'>
		By the way, the prebuilt TensorFlow is compiled with jemalloc.  I have to disable it and compile TensorFlow from scratch (which takes quite a while) to check for memory leaks with valgrind.
		</comment>
	</comments>
</bug>