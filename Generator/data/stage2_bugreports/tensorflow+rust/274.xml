<bug id='274' author='Zvax' open_date='2020-09-16T20:40:47Z' closed_time='2020-10-20T02:27:23Z'>
	<summary>Associating the gnu/msvc toolchains with OS's prevents using gnu on Windows</summary>
	<description>
When compiling on Windows while using a gnu toolchain, the tensorflow-sys build file will try to download a file for Windows but with Unix compression. It happens here, when choosing the file extension:



rust/tensorflow-sys/build.rs


        Lines 160 to 163
      in
      c1a1f6b






 #[cfg(target_env = "msvc")] 



 let ext = ".zip"; 



 #[cfg(not(target_env = "msvc"))] 



 let ext = ".tar.gz"; 





These line assume that msvc will be Windows, and gnu Unix, however having a gnu toolchain activated on a Windows machine causes the build script to download the file https://storage.googleapis.com/tensorflow/libtensorflow/libtensorflow-gpu-windows-x86_64-1.15.0.tar.gz (notice the "windows" associated with ".tar.gz") which does not exist because the Windows files are zip files.
When looking at the actual files available from &lt;denchmark-link:https://www.tensorflow.org/install/lang_c&gt;tensorflow&lt;/denchmark-link&gt;
 it seems that the distinction is Windows / unix rather than msvc / gnu.
I have solved this locally by patching the extension lines as follows:
&lt;denchmark-code&gt;let ext = match os {
    "windows" =&gt; ".zip",
    _ =&gt; ".tar.gz",
};
&lt;/denchmark-code&gt;

and replacing all target_env = "msvc" checks with target_os = "windows" (the not conditions apply correctly to that new boolean).
Am I missing something that would make this break everything on other machines? Otherwise I believe that could be an improvement to the build script, as after this I can compile with both msvc and gnu, whereas before gnu will fail.
	</description>
	<comments>
		<comment id='1' author='Zvax' date='2020-09-30T03:28:32Z'>
		This looks like a straightforward improvement.  If you can submit a pull request, I'd be happy to accept it.
		</comment>
		<comment id='2' author='Zvax' date='2020-10-05T03:27:31Z'>
		Can someone on Windows verify that &lt;denchmark-link:https://github.com/tensorflow/rust/pull/277&gt;#277&lt;/denchmark-link&gt;
 fixes the issue?
		</comment>
		<comment id='3' author='Zvax' date='2020-10-05T14:14:28Z'>
		This fixes the initial download issue, but now I get the following error:
&lt;denchmark-link:https://gist.github.com/flaghacker/4e63671b7829e6d07e38ac0231c4fb70&gt;https://gist.github.com/flaghacker/4e63671b7829e6d07e38ac0231c4fb70&lt;/denchmark-link&gt;

I'm not sure if it's related or something else entirely, I'm not very familiar with how linkers work.
		</comment>
		<comment id='4' author='Zvax' date='2020-10-06T03:35:36Z'>
		I added a new commit.  Can you try again?
		</comment>
		<comment id='5' author='Zvax' date='2020-10-06T12:56:50Z'>
		That's &lt;denchmark-link:https://github.com/adamcrume/tensorflow-rust/commit/896bbb287dd0ced05c2f081f7b44fa408583b773&gt;this commit&lt;/denchmark-link&gt;
, right?
I still get the same error unfortunately.
		</comment>
		<comment id='6' author='Zvax' date='2020-10-07T03:55:52Z'>
		Yes, that commit.
I think I'll need help from someone developing on Windows.  I don't currently have a Windows environment to test in.
		</comment>
		<comment id='7' author='Zvax' date='2020-10-10T20:06:54Z'>
		I don't think using the env::consts::OS is a good idea in build.rs, because it will not work for a cross compile scenario. And maybe it is the case for @flaghacker under mingw32.
According to &lt;denchmark-link:https://doc.rust-lang.org/cargo/reference/environment-variables.html#environment-variables-cargo-sets-for-build-scripts&gt;cargo doc&lt;/denchmark-link&gt;
, the  should be used instead.
And using the CARGO_CFG_TARGET_ARCH relpace the env::consts::ARCH at



rust/tensorflow-sys/build.rs


         Line 68
      in
      896bbb2






 &amp;&amp; env::consts::ARCH == "x86_64" 





I would be happy to update the PR, or a new PR is preferred.
		</comment>
		<comment id='8' author='Zvax' date='2020-10-12T02:41:00Z'>
		Good point.  I switched to using the Cargo environment variables.  It'll take more to support cross-compilation when building TensorFlow from source, but this should work for using prebuilt TensorFlow binaries.
If you can fix the Windows build, I'd be happy with either the existing PR being updated or a new one being created.
		</comment>
		<comment id='9' author='Zvax' date='2020-10-18T08:31:39Z'>
		i tried &lt;denchmark-link:https://github.com/tensorflow/rust/pull/277&gt;#277&lt;/denchmark-link&gt;
 on target  on Ubunut. it complied without problems.
		</comment>
		<comment id='10' author='Zvax' date='2020-10-25T20:58:42Z'>
		It compiles fine now, thanks everyone!
		</comment>
	</comments>
</bug>