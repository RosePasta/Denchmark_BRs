<bug id='295' author='rewilson' open_date='2020-05-05T01:26:52Z' closed_time='2020-05-19T17:36:00Z'>
	<summary>Latitude and longitude data not imported from EXIF?</summary>
	<description>
Running photoprism on Ubuntu 18.04 LTS via the latest docker image (very cool project, by the way).
When importing a sample set of photos with GPS data in them, they don't appear on Places at all. The log says "no latitude and longitude in metadata". I confirmed via Exiftool that the GPS data is there. Any idea on what I might be doing wrong, or where the issue might be?
&lt;denchmark-link:https://user-images.githubusercontent.com/13723217/81028017-2c3a3300-8ec3-11ea-9e19-f411ac46dc45.jpg&gt;Sample photo with relevant exif data&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='rewilson' date='2020-05-05T16:59:03Z'>
		Strange, thanks for the bug report!
First time I notice a big-endian byte order in Exif, not sure if that means anything. Need some time to experiment. Can we add your image to our official test data files?
[{
  "SourceFile": "81028017-2c3a3300-8ec3-11ea-9e19-f411ac46dc45.jpg",
  "ExifTool": {
    "ExifToolVersion": 11.85
  },
  "File": {
    "FileName": "81028017-2c3a3300-8ec3-11ea-9e19-f411ac46dc45.jpg",
    "Directory": ".",
    "FileSize": "2.9 MB",
    "FileModifyDate": "2020:05:05 18:44:26+02:00",
    "FileAccessDate": "2020:05:05 18:52:11+02:00",
    "FileInodeChangeDate": "2020:05:05 18:52:09+02:00",
    "FilePermissions": "rw-r--r--",
    "FileType": "JPEG",
    "FileTypeExtension": "jpg",
    "MIMEType": "image/jpeg",
    "ExifByteOrder": "Big-endian (Motorola, MM)",
    "ImageWidth": 4940,
    "ImageHeight": 3272,
    "EncodingProcess": "Baseline DCT, Huffman coding",
    "BitsPerSample": 8,
    "ColorComponents": 3,
    "YCbCrSubSampling": "YCbCr4:2:0 (2 2)"
  },
  "JFIF": {
    "JFIFVersion": 1.01,
    "ResolutionUnit": "inches",
    "XResolution": 96,
    "YResolution": 96
  },
  "EXIF": {
    "ImageWidth": 4940,
    "ImageHeight": 3272,
    "Orientation": "Horizontal (normal)",
    "Software": "Perfectly Clear Complete v3 3.6.3.1351",
    "GPSVersionID": "2.0.0.0",
    "GPSLatitudeRef": "South",
    "GPSLatitude": "38 deg 24' 18.70\"",
    "GPSLongitudeRef": "East",
    "GPSLongitude": "144 deg 11' 20.25\"",
    "GPSMapDatum": "WGS-84",
    "Compression": "JPEG (old-style)",
    "XResolution": 0,
    "YResolution": 0,
    "ResolutionUnit": "inches",
    "ThumbnailOffset": 372,
    "ThumbnailLength": 7556,
    "ThumbnailImage": "(Binary data 7556 bytes, use -b option to extract)"
  },
  "XMP": {
    "XMPToolkit": "XMP Core 4.4.0-Exiv2",
    "GPSVersionID": "2.0.0.0",
    "GPSMapDatum": "WGS-84",
    "GPSLatitudeRef": "S",
    "GPSLatitude": "38 deg 24' 18.70\" S",
    "GPSLongitudeRef": "E",
    "GPSLongitude": "144 deg 11' 20.25\" E"
  },
  "Composite": {
    "ImageSize": "4940x3272",
    "Megapixels": 16.2,
    "GPSLatitude": "38 deg 24' 18.70\" S",
    "GPSLongitude": "144 deg 11' 20.25\" E",
    "GPSLatitudeRef": "South",
    "GPSLongitudeRef": "East",
    "GPSPosition": "38 deg 24' 18.70\" S, 144 deg 11' 20.25\" E"
  }
}]
		</comment>
		<comment id='2' author='rewilson' date='2020-05-05T22:11:39Z'>
		
Strange, thanks for the bug report!
First time I notice a big-endian byte order in Exif, not sure if that means anything. Need some time to experiment. Can we add your image to our official test data files?

Yep, no problem. Let me know if you want me to test / try anything else.
		</comment>
		<comment id='3' author='rewilson' date='2020-05-06T04:57:37Z'>
		Problem is the GPS version as the parser only accepts 2.2 and 2.3, not 2.0. Unclear what the difference is, probably easy to fix. I'll add a fallback parser, we'll also need that for parsing GPS coordinates in XMP and JSON.
		</comment>
		<comment id='4' author='rewilson' date='2020-05-06T06:07:25Z'>
		Once CI is complete, I'll start a master build which will automatically be pushed to Docker hub. Takes about one hour.
		</comment>
		<comment id='5' author='rewilson' date='2020-05-06T06:47:56Z'>
		Great, I'll give it a test later tonight and confirm.
		</comment>
		<comment id='6' author='rewilson' date='2020-05-06T09:10:54Z'>
		Can confirm this is now working perfectly with all the files in the sample. Nice work! :)
		</comment>
		<comment id='7' author='rewilson' date='2020-05-06T09:42:03Z'>
		Thanks for testing! I'll close this.
		</comment>
		<comment id='8' author='rewilson' date='2020-05-15T09:37:22Z'>
		Hello &lt;denchmark-link:https://github.com/lastzero&gt;@lastzero&lt;/denchmark-link&gt;

I am experiencing a similar problem with coordinates from EXIF.
The latest version of the photoprism - PhotoPrism 200514-871c5aa-Linux-x86_64 (running in docker)
Photo taken on Xiaomi Mi A1.
After indexing, longitude and latitude become empty.
In Exiftool data is:
&lt;denchmark-code&gt;GPS Altitude: 63.5 m Above Sea Level
GPS Date / Time: 2019: 05: 12 15: 13: 54Z
GPS Latitude: 53 deg 7 '24.56 "N
GPS Longitude: 18 deg 0 '5.47 "E
GPS Position: 53 deg 7 '24.56 "N, 18 deg 0' 5.47" E
&lt;/denchmark-code&gt;

I attach the photo. It can be used for testing.
There are no such problems with photos taken on the iPhone 11pro.
Thank you.
&lt;denchmark-link:https://user-images.githubusercontent.com/9675097/82035651-792ebe00-96a8-11ea-99f0-71e7b58e48e1.jpg&gt;photo sample&lt;/denchmark-link&gt;

		</comment>
		<comment id='9' author='rewilson' date='2020-05-15T10:48:01Z'>
		&lt;denchmark-link:https://github.com/shyshov&gt;@shyshov&lt;/denchmark-link&gt;
 A copy of your file (created with Photoshop) seems to work just fine. Maybe &lt;denchmark-link:https://github.com/dsoprea&gt;@dsoprea&lt;/denchmark-link&gt;

can help with the original, it's something with the GPS data parser.
		</comment>
		<comment id='10' author='rewilson' date='2020-05-15T17:40:39Z'>
		I'll take a look at it tonight (it's 13:40 right now).
		</comment>
		<comment id='11' author='rewilson' date='2020-05-17T06:38:18Z'>
		Resolved. The altitude-orientation tag (GPSAltitudeRef) spuriously appears more than once, and one of them with the wrong type :) . Now we discard anything that has a type other than what is reported for that tag in the tags registry that is loaded at the top of the process, which elegantly fixes this specific problem. We previously didn't actually implement this type information anywhere and relied on what was recorded in the stream. Simple enough solution.
&lt;denchmark-code&gt; - TAG: IfdTagEntry&lt;TAG-IFD-PATH=[IFD/GPSInfo] TAG-ID=(0x0005) TAG-TYPE=[RATIONAL] UNIT-COUNT=(1)&gt; NAME=[GPSAltitudeRef] VALUE=[[260/100]]
 - TAG: IfdTagEntry&lt;TAG-IFD-PATH=[IFD/GPSInfo] TAG-ID=(0x0001) TAG-TYPE=[ASCII] UNIT-COUNT=(2)&gt; NAME=[GPSLatitudeRef] VALUE=[N]
 - TAG: IfdTagEntry&lt;TAG-IFD-PATH=[IFD/GPSInfo] TAG-ID=(0x0002) TAG-TYPE=[RATIONAL] UNIT-COUNT=(3)&gt; NAME=[GPSLatitude] VALUE=[[53/1 7/1 245636/10000]]
 - TAG: IfdTagEntry&lt;TAG-IFD-PATH=[IFD/GPSInfo] TAG-ID=(0x0003) TAG-TYPE=[ASCII] UNIT-COUNT=(2)&gt; NAME=[GPSLongitudeRef] VALUE=[E]
 - TAG: IfdTagEntry&lt;TAG-IFD-PATH=[IFD/GPSInfo] TAG-ID=(0x0004) TAG-TYPE=[RATIONAL] UNIT-COUNT=(3)&gt; NAME=[GPSLongitude] VALUE=[[18/1 0/1 54736/10000]]
 - TAG: IfdTagEntry&lt;TAG-IFD-PATH=[IFD/GPSInfo] TAG-ID=(0x0005) TAG-TYPE=[BYTE] UNIT-COUNT=(1)&gt; NAME=[GPSAltitudeRef] VALUE=[00]
&lt;/denchmark-code&gt;

		</comment>
		<comment id='12' author='rewilson' date='2020-05-17T08:50:43Z'>
		Make sure to update go-exif, go-png-image-structure, and go-jpeg-image-structure so that everything is in sync with the latest changes.
		</comment>
		<comment id='13' author='rewilson' date='2020-05-17T09:14:44Z'>
		Done that: &lt;denchmark-link:https://github.com/photoprism/photoprism/commit/46f3f12da83a5a01a445cb729aea628359bebd0c&gt;46f3f12&lt;/denchmark-link&gt;

Errors / warnings are gone, thank you &lt;denchmark-link:https://github.com/dsoprea&gt;@dsoprea&lt;/denchmark-link&gt;
 :)
Observations:

Height and Width changed (which seems correct since we use smaller, resized versions of the original images, however in one case it is 0 now), see commit above.
CreateDate is still not extracted for image-2011.jpg, wasn't DateTimeDigitized as I hoped (but I've seen that field in other images). Guess we need to add some extra code for this?




photoprism/internal/meta/exif_test.go


         Line 180
      in
      46f3f12






 // assert.Equal(t, "2011-07-19T11:36:38Z", data.TakenAt.Format("2006-01-02T15:04:05Z")) // TODO 





		</comment>
		<comment id='14' author='rewilson' date='2020-05-17T13:22:56Z'>
		&lt;denchmark-link:https://github.com/rewilson&gt;@rewilson&lt;/denchmark-link&gt;
 Does our latest Docker build work for you?
		</comment>
		<comment id='15' author='rewilson' date='2020-05-18T00:46:54Z'>
		It turns out that several tags are in the wrong IFD, including  (0x9004). So, it's a malformed image. Once I add &lt;denchmark-link:https://github.com/dsoprea/go-exif/issues/38&gt;tag-guessing&lt;/denchmark-link&gt;
, you will see this show up in the results.
Before the fix:
&lt;denchmark-code&gt;2020/05/17 19:06:36 exif.tags: [DEBUG]  (302) tags loaded.
2020/05/17 19:06:36 exif.utility: [WARNING]  Tag with ID (0x9004) in IFD [IFD] is not recognized and will be ignored.
2020/05/17 19:06:36 exif.utility: [WARNING]  Tag with ID (0x9286) in IFD [IFD] is not recognized and will be ignored.
2020/05/17 19:06:36 exif.utility: [WARNING]  Tag with ID (0xa403) in IFD [IFD] is not recognized and will be ignored.
2020/05/17 19:06:36 exif.tags: [WARNING]  Type [SSHORT] for tag [XClipPathUnits] is not valid and will be ignored.
&lt;/denchmark-code&gt;

When I added validation for the types, yesterday, I discovered that several tags are allowed to be multiple types. As a result of the validation, we began skipping some tags. So, I added support for tags supporting multiple types and added the missing types to the PixelXDimension and PixelYDimension tags. It looks like there were more, and this explains why you are no longer getting ImageWidth and ImageLength. I'm guessing that whatever you are using for your backup plan to read the dimensions when not using go-exif does not return the correct result. Once I added this, it read the same dimensions as were previously asserted in your tests.
Before the fix:
&lt;denchmark-code&gt;2020/05/17 19:06:36 exif.tags: [DEBUG]  (302) tags loaded.
2020/05/17 19:06:36 exif.ifd_enumerate: [WARNING]  Skipping tag [IFD] (0x0100) [ImageWidth] with an unexpected type: SHORT ∉ [LONG]
2020/05/17 19:06:36 exif.ifd_enumerate: [WARNING]  Skipping tag [IFD] (0x0101) [ImageLength] with an unexpected type: SHORT ∉ [LONG]
2020/05/17 19:06:36 exif.ifd_enumerate: [WARNING]  Skipping tag [IFD] (0x829a) [ExposureTime] with an unexpected type: SRATIONAL ∉ [RATIONAL]
2020/05/17 19:06:36 exif.ifd_enumerate: [WARNING]  Skipping tag [IFD] (0x829d) [FNumber] with an unexpected type: SRATIONAL ∉ [RATIONAL]
2020/05/17 19:06:36 exif.ifd_enumerate: [WARNING]  Tag (0x8822) in IFD [IFD] at position (15) has invalid type (8) and will be skipped.
&lt;/denchmark-code&gt;

Please update the PNG- and JPEG-reader revisions. Make sure your indirect go-exif revision goes up as well.
		</comment>
		<comment id='16' author='rewilson' date='2020-05-18T02:41:03Z'>
		
@rewilson Does our latest Docker build work for you?

Yep, all still working well - I just pulled, and imported a new set of photos, and they all locate correctly.
		</comment>
		<comment id='17' author='rewilson' date='2020-05-19T17:36:00Z'>
		Thanks for testing! :)
		</comment>
		<comment id='18' author='rewilson' date='2020-05-27T19:38:16Z'>
		We now do some configured secondary lookups when tags aren't valid in the IFDs that they were found in. Using image-2011.jpg, three of the four tags are resolved and one is still skipped.
&lt;denchmark-code&gt;2020/05/27 15:31:40 exif.ifd_enumerate: [WARNING]  Tag (0x8822) in IFD [IFD] at position (15) has invalid type (8) and will be skipped.
2020/05/27 15:31:40 exif.ifd_enumerate: [WARNING]  Tag (0x8827) in IFD [IFD] at position (16) has invalid type (8) and will be skipped.
2020/05/27 15:31:40 exif.utility: [DEBUG]  Tag (0x9004) is not valid for IFD [IFD]. Attempting secondary lookup.
2020/05/27 15:31:40 exif.utility: [WARNING]  Tag with ID (0x9004) is not valid for IFD [IFD], but it *is* valid as tag [DateTimeDigitized] under IFD [IFD/Exif] and has the same type [ASCII], so we will use that. This EXIF blob was probably written by a buggy implementation.
2020/05/27 15:31:40 exif.utility: [DEBUG]  Tag (0x9286) is not valid for IFD [IFD]. Attempting secondary lookup.
2020/05/27 15:31:40 exif.utility: [WARNING]  Tag with ID (0x9286) in IFD [IFD] is not recognized and will be ignored.
2020/05/27 15:31:40 exif.utility: [DEBUG]  Tag (0xa403) is not valid for IFD [IFD]. Attempting secondary lookup.
2020/05/27 15:31:40 exif.utility: [WARNING]  Tag with ID (0xa403) is not valid for IFD [IFD], but it *is* valid as tag [WhiteBalance] under IFD [IFD/Exif] and has the same type [SHORT], so we will use that. This EXIF blob was probably written by a buggy implementation.
2020/05/27 15:31:40 exif.ifd_enumerate: [DEBUG]  Next IFD at offset: (00000380)
2020/05/27 15:31:40 exif.ifd_enumerate: [DEBUG]  Parsing IFD [IFD/Exif] (0) at offset (0x01e8) (Collect).
2020/05/27 15:31:40 exif.ifd_enumerate: [DEBUG]  IFD [IFD/Exif] tag-count: (18)
2020/05/27 15:31:40 exif.utility: [DEBUG]  Tag (0x0201) is not valid for IFD [IFD/Exif]. Attempting secondary lookup.
2020/05/27 15:31:40 exif.utility: [WARNING]  Tag with ID (0x0201) is not valid for IFD [IFD/Exif], but it *is* valid as tag [JPEGInterchangeFormat] under IFD [IFD] and has the same type [LONG], so we will use that. This EXIF blob was probably written by a buggy implementation.
2020/05/27 15:31:40 exif.utility: [DEBUG]  Tag (0x0202) is not valid for IFD [IFD/Exif]. Attempting secondary lookup.
2020/05/27 15:31:40 exif.utility: [WARNING]  Tag with ID (0x0202) is not valid for IFD [IFD/Exif], but it *is* valid as tag [JPEGInterchangeFormatLength] under IFD [IFD] and has the same type [LONG], so we will use that. This EXIF blob was probably written by a buggy implementation.
&lt;/denchmark-code&gt;

&lt;denchmark-link:https://github.com/lastzero&gt;@lastzero&lt;/denchmark-link&gt;
 Update at your convenience.
		</comment>
	</comments>
</bug>