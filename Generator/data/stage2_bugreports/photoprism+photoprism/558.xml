<bug id='558' author='CorneliousJD' open_date='2020-10-20T19:02:32Z' closed_time='2020-10-25T12:45:10Z'>
	<summary>SQLite: Automatically limit the number of workers</summary>
	<description>
This seems to happen either when adding new files to the originals folder, or when adding to via import.
The database ends up locked and not all files end up being indeded.
When importing it seems all the files get MOVED to the original folder successfully, but not all are successfully indexed.
This is happening with a small subset of sample images that I have (96 images).
I can seemingly recreate this all the time.
If I force a full re-scan it will get some more indexed, but sometimes I have to force a re-scan a few times to get it to be fully updated where the photos count in the UI matches my amount of originals.
Not sure what's happening or causing this. I'm running the photoprism/photoprism docker container.
I am attempting to use this as a replacement for Google Photos to get away from uploading my images to their servers.
Please let me know if I can test/contribute more to this case.
	</description>
	<comments>
		<comment id='1' author='CorneliousJD' date='2020-10-20T19:51:25Z'>
		We had this issue before, but it disappeared. Does this happen with SQLite or MariaDB/MySQL?
How many threads / cpu cores?
		</comment>
		<comment id='2' author='CorneliousJD' date='2020-10-20T19:54:01Z'>
		I actually just read this issue.
&lt;denchmark-link:https://github.com/photoprism/photoprism/issues/392&gt;#392&lt;/denchmark-link&gt;

I was using SQLite at first when this issue happened becuase the unRAID template for this docker container didn't actually mention anything a bout MySQL as an option at all.
for what it's worth i have dual Xeon E5-2650 v2's, total of 16 cores, 32 threads @ 2.60 GHz
128GB of RAM.
Fixed my issues by just swapping my MySQL (MariaDB).
SO MUCH FASTER too. Wow! :)
I've asked the maintainer of the unRAID template for this container to add in the option for using MySQL to the template as well.
EDIT: When indexing it does use a ton of CPU resources of course. Maxes it out when indexing. Perhaps that's part of the issue with SQLite and it's not able to recover the way MySQL is?
&lt;denchmark-link:https://user-images.githubusercontent.com/724777/96637544-d0d2f480-12ec-11eb-8386-da5725b6fd9f.png&gt;&lt;/denchmark-link&gt;

		</comment>
		<comment id='3' author='CorneliousJD' date='2020-10-20T20:03:05Z'>
		Excellent! We should automatically limit the number of workers when using SQLite as it doesn't scale well, at least not without optimizations. Thanks for reporting this.
Users who want to stick with SQLite may manually limit the number of workers via , see &lt;denchmark-link:https://docs.photoprism.org/getting-started/config-options/&gt;https://docs.photoprism.org/getting-started/config-options/&lt;/denchmark-link&gt;

		</comment>
		<comment id='4' author='CorneliousJD' date='2020-10-20T20:04:16Z'>
		
Excellent! We should automatically limit the number of workers when using SQLite as it doesn't scale well, at least not without optimizations. Thanks for reporting this.
Users who want to stick with SQLite may manually limit the number of workers via PHOTOPRISM_WORKERS, see https://docs.photoprism.org/getting-started/config-options/

Thanks, I'll pass the workers info along to them too to be included in the template, since it's not included it defaults to 0 which I assume is no-limit.
What would a suitable limit be for using SQLite?
		</comment>
		<comment id='5' author='CorneliousJD' date='2020-10-20T20:13:18Z'>
		The hard limit is &lt;denchmark-link:https://golang.org/pkg/runtime/#NumCPU&gt;https://golang.org/pkg/runtime/#NumCPU&lt;/denchmark-link&gt;
 in case there is no - or a higher -  limit.
I guess setting PHOTOPRISM_WORKERS to 8 should work in most cases. Needs to be tested. Our demo was built with 6 cores and I've never seen an error. May depend on storage performance and cpu architecture as well.
		</comment>
	</comments>
</bug>