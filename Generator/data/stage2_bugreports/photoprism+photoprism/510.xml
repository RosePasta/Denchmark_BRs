<bug id='510' author='Morl99' open_date='2020-09-24T19:48:39Z' closed_time='2020-10-07T19:38:56Z'>
	<summary>Individual photos that are part of a stack count against the total count of images for lazy loading</summary>
	<description>
At the top of my collection I have quite a few stacked photos, which led to the detection of this bug.  If I switch to the mosaic, only 15 tiles are shown, even though the api call is made with count=60 and offset=0. This is not only confusing, but this breaks the lazy loading, as there is no way to scroll down. See this screenshot for a better understanding (I removed the personal images from the screenshot and replaced it with the blue background, but you can see the stack markers).
&lt;denchmark-link:https://user-images.githubusercontent.com/475516/94192609-7a21f880-feaf-11ea-8b1b-4f39fd2af7ef.png&gt;&lt;/denchmark-link&gt;

I am running photoprism/photoprism:20200921.
I don't get what the frontend is doing here, I see the following 2 API Calls in short succession:
api/v1/photos?count=360&amp;offset=0&amp;merged=true&amp;country=&amp;camera=0&amp;lens=0&amp;label=&amp;year=0&amp;month=0&amp;color=&amp;order=newest&amp;q=&amp;public=true&amp;quality=3&amp;photo=true
api/v1/photos?count=60&amp;offset=60&amp;merged=true&amp;country=&amp;camera=0&amp;lens=0&amp;label=&amp;year=0&amp;month=0&amp;color=&amp;order=newest&amp;q=&amp;public=true&amp;quality=3&amp;photo=true
The result of the first call actually returns 220 photos, which makes it weird, that the UI only displays 15 items. The second request returns only 4 photos (with a total of 60files included). It looks like, this is a combination of an API bug (the limit should limit the number of photos not files, at least if the ui is set to show stacks as a single item) and a Frontend bug (why are 360 photos requested, but the result seems to be dismissed?)
After scrolling some more, the following sequence of API calls is made:
&lt;denchmark-link:https://user-images.githubusercontent.com/475516/94196654-fbc85500-feb4-11ea-8fe2-6ef4dbf8a16d.png&gt;&lt;/denchmark-link&gt;

The last api call is taking about 10 seconds, which really impacts performance. Is this a known behavior (e.g. simple implementation vs. good performance), or is here something amiss? It seems really unnessecary for the frontend to fetch all the photo data once we have significantly scrolled, and it looks like some part of the implementation tries to handle the offset correctly.
Is there something I can do to help?
	</description>
	<comments>
		<comment id='1' author='Morl99' date='2020-09-24T23:08:06Z'>
		That's a duplicate of &lt;denchmark-link:https://github.com/photoprism/photoprism/issues/507&gt;#507&lt;/denchmark-link&gt;
. Note that count refers to individual files, not photos / videos which may include multiple files like a RAW file and a JPEG. Our API may also return them unmerged.
		</comment>
		<comment id='2' author='Morl99' date='2020-10-02T18:27:28Z'>
		I don't feel that this is a duplicate, because &lt;denchmark-link:https://github.com/photoprism/photoprism/issues/507&gt;#507&lt;/denchmark-link&gt;
 specifically states, that this is a problem isolated to the video view, while this issue describes a problem in the main photos view. It might be true, that the root cause is the same, and if this is the case, it is possible to merge the issues, but in that case, I would add the first part of my description as a comment to the issue. But because &lt;denchmark-link:https://github.com/photoprism/photoprism/issues/507&gt;#507&lt;/denchmark-link&gt;
 really does not reveal the root cause, I am not sure if that is really the case.
The second part of this issue is something differnet, and I think it has nothing to do with the first part. I regret mixing those two issues. I also think I understand now, what is going on. The problem I describe is only observable, while I index new photos in the background. This constantly marks the whole collection as dirty, and the frontend reloads the whole image library up to the point of scrolling. So I think this is by design, and I would drop the issue for the time being, because I know it only happens during image ingestion. I still think that moving forward, that is something that should be improved upon, but it needs a redesign of the pagination of the api using cursors instead of offset (see &lt;denchmark-link:https://developer.twitter.com/en/docs/pagination&gt;https://developer.twitter.com/en/docs/pagination&lt;/denchmark-link&gt;
 for example). If you like, we could move this into its own separate issue.
		</comment>
		<comment id='3' author='Morl99' date='2020-10-04T02:58:00Z'>
		Hopefully I get to this today... I'm confident the root issue is the same.
		</comment>
		<comment id='4' author='Morl99' date='2020-10-04T07:30:34Z'>
		Alright! If you have a fix I will be happy to test it, just let me know.
		</comment>
		<comment id='5' author='Morl99' date='2020-10-04T10:18:00Z'>
		Will be deployed for testing with our next Docker image, hopefully later today.
		</comment>
		<comment id='6' author='Morl99' date='2020-10-05T07:04:23Z'>
		New Docker images available for testing! Note that the password will be reset to its initial state when upgrading. Our Docker images have been optimized for common NAS models. You can now set a specific user and group using the UID and GID environment variables. Feedback welcome.
		</comment>
		<comment id='7' author='Morl99' date='2020-10-07T19:38:55Z'>
		Thanks for fixing this. I tested it with the same images where I described the issue before, and now it works as expected.
Updating the docker image also was a no-brainer.
I still somehow feel, that the performance of fast scrolling could be improved by preloading a little bit, instead of waiting until the viewport has actually reached the bottom, but this is more of a tweak than a bugfix and has nothing to do with the original issue (so either use it as feedback, or ignore it for the moment).
		</comment>
	</comments>
</bug>