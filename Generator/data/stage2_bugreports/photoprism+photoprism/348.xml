<bug id='348' author='sam2kb' open_date='2020-06-04T19:24:54Z' closed_time='2020-06-08T03:21:40Z'>
	<summary>Some images with portrait orientation are rotated when previewed</summary>
	<description>
&lt;denchmark-link:https://user-images.githubusercontent.com/630374/83801591-67bd4e00-a677-11ea-9b99-b5810fb1f20a.png&gt;&lt;/denchmark-link&gt;

vs original
&lt;denchmark-link:https://user-images.githubusercontent.com/630374/83801629-773c9700-a677-11ea-8765-59144e9de5d4.png&gt;&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='sam2kb' date='2020-06-04T19:35:14Z'>
		Here's the metadata
&lt;denchmark-code&gt;Format: JPEG (Joint Photographic Experts Group JFIF format)
  Mime type: image/jpeg
  Class: DirectClass
  Geometry: 3264x1836+0+0
  Resolution: 72x72
  Print size: 45.3333x25.5
  Units: PixelsPerInch
  Colorspace: sRGB
  Type: TrueColor
  Base type: Undefined
  Endianess: Undefined
  Depth: 8-bit
  Channel depth:
    red: 8-bit
    green: 8-bit
    blue: 8-bit
  Channel statistics:
    Pixels: 5992704
    Red:
      min: 0  (0)
      max: 255 (1)
      mean: 95.2701 (0.373608)
      standard deviation: 79.6819 (0.312478)
      kurtosis: -0.7243
      skewness: 0.774183
      entropy: 0.952978
    Green:
      min: 0  (0)
      max: 255 (1)
      mean: 82.8737 (0.324995)
      standard deviation: 74.3663 (0.291633)
      kurtosis: -0.240315
      skewness: 0.959709
      entropy: 0.937123
    Blue:
      min: 0  (0)
      max: 255 (1)
      mean: 69.808 (0.273757)
      standard deviation: 70.8386 (0.277799)
      kurtosis: 0.642607
      skewness: 1.24218
      entropy: 0.909482
  Image statistics:
    Overall:
      min: 0  (0)
      max: 255 (1)
      mean: 82.6506 (0.32412)
      standard deviation: 74.9623 (0.29397)
      kurtosis: -0.204298
      skewness: 0.979855
      entropy: 0.933194
  Rendering intent: Perceptual
  Gamma: 0.454545
  Chromaticity:
    red primary: (0.64,0.33)
    green primary: (0.3,0.6)
    blue primary: (0.15,0.06)
    white point: (0.3127,0.329)
  Background color: white
  Border color: srgb(223,223,223)
  Matte color: grey74
  Transparent color: black
  Interlace: None
  Intensity: Undefined
  Compose: Over
  Page geometry: 3264x1836+0+0
  Dispose: Undefined
  Iterations: 0
  Compression: JPEG
  Quality: 96
  Orientation: RightTop
  Properties:
    date:create: 2011-11-11T11:11:11-00:00
    date:modify: 2011-11-11T11:11:11-00:00
    exif:ApertureValue: 227/100
    exif:BrightnessValue: 736/100
    exif:ColorSpace: 1
    exif:ComponentsConfiguration: 1, 2, 3, 0
    exif:DateTime: 2011-11-11 11:11:11
    exif:DateTimeDigitized: 2011-11-11 11:11:11
    exif:DateTimeOriginal: 2011-11-11 11:11:11
    exif:ExifOffset: 238
    exif:ExifVersion: 48, 50, 50, 48
    exif:ExposureBiasValue: 0/10
    exif:ExposureMode: 0
    exif:ExposureProgram: 2
    exif:ExposureTime: 1/546
    exif:Flash: 1
    exif:FlashPixVersion: 48, 49, 48, 48
    exif:FNumber: 220/100
    exif:FocalLength: 413/100
    exif:FocalLengthIn35mmFilm: 31
    exif:GPSInfo: 2976
    exif:GPSVersionID: 2, 2, 0, 0
    exif:ImageLength: 1836
    exif:ImageUniqueID: ZZZZZZZZZZZ
    exif:ImageWidth: 3264
    exif:InteroperabilityOffset: 2946
    exif:LightSource: 0
    exif:Make: SAMSUNG
    exif:MakerNote: 7, 0, 1, 0, 7, 0, 4, 0, 0, 0, 48, 49, 48, 48, 2, 0, 4, 0, 1, 0, 0, 0, 0, 32, 1, 0, 12, 0, 4, 0, 1, 0, 0, 0, 0, 0, 0, 0, 16, 0, 5, 0, 1, 0, 0, 0, 90, 0, 0, 0, 64, 0, 4, 0, 1, 0, 0, 0, 0, 0, 0, 0, 80, 0, 4, 0, 1, 0, 0, 0, 1, 0, 0, 0, 0, 1, 3, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
    exif:MaxApertureValue: 228/100
    exif:MeteringMode: 1
    exif:Model: SM-N900T
    exif:Orientation: 6
    exif:PhotographicSensitivity: 50
    exif:PixelXDimension: 3264
    exif:PixelYDimension: 1836
    exif:ResolutionUnit: 2
    exif:SceneCaptureType: 0
    exif:SceneType: 1
    exif:SensingMethod: 2
    exif:ShutterSpeedValue: 909/100
    exif:Software: ZZZZZZZZZZZZZz
    exif:thumbnail:Compression: 6
    exif:thumbnail:ImageLength: 288
    exif:thumbnail:ImageWidth: 512
    exif:thumbnail:InteroperabilityIndex: R98
    exif:thumbnail:InteroperabilityVersion: 48, 49, 48, 48
    exif:thumbnail:JPEGInterchangeFormat: 3124
    exif:thumbnail:JPEGInterchangeFormatLength: 24102
    exif:thumbnail:Orientation: 6
    exif:thumbnail:ResolutionUnit: 2
    exif:thumbnail:XResolution: 72/1
    exif:thumbnail:YResolution: 72/1
    exif:UserComment: removed
    exif:WhiteBalance: 0
    exif:XResolution: 72/1
    exif:YCbCrPositioning: 1
    exif:YResolution: 72/1
    jpeg:colorspace: 2
    jpeg:sampling-factor: 2x2,1x1,1x1
    signature: zzzzzzzzzzzzzz
  Profiles:
    Profile-exif: 27232 bytes
  Artifacts:
    filename: pic.jpg
    verbose: true
  Tainted: False
  Filesize: 2.99274MiB
  Number pixels: 5.9927M
  Pixels per second: 74.9088MB
  User time: 0.080u
  Elapsed time: 0:01.080
  Version: ImageMagick 6.9.10-23 Q16 x86_64 20190101 https://imagemagick.org
&lt;/denchmark-code&gt;

		</comment>
		<comment id='2' author='sam2kb' date='2020-06-05T09:33:47Z'>
		Might be related to &lt;denchmark-link:https://github.com/dsoprea/go-exif/issues/40#event-3409064214&gt;dsoprea/go-exif#40 (comment)&lt;/denchmark-link&gt;

		</comment>
		<comment id='3' author='sam2kb' date='2020-06-05T09:38:26Z'>
		Added a workaround yesterday. If we find the orientation in a JSON sidecar file (automatically created by Exiftool), we use that instead of the one we find directly in the Exif headers. You need to enable JSON sidecar files for this.
		</comment>
		<comment id='4' author='sam2kb' date='2020-06-05T14:32:33Z'>
		Unfortunately I'm running in read only mode. This is another reason for storing all generated content like thumbnails, raw previews and json sidecar files in a universal cache directory.
I think setups like this should be pretty common too - a small SSD for OS and cache, one or more HDDs with the original files.
		</comment>
		<comment id='5' author='sam2kb' date='2020-06-05T14:33:44Z'>
		We're working on it...
		</comment>
		<comment id='6' author='sam2kb' date='2020-06-07T08:18:54Z'>
		&lt;denchmark-link:https://github.com/sam2kb&gt;@sam2kb&lt;/denchmark-link&gt;
 Done, ready for testing. Where else do you get a wish like this fulfilled for free within 2 days? 
		</comment>
		<comment id='7' author='sam2kb' date='2020-06-07T08:24:34Z'>
		These images you posted are PNG files without orientation / exif information. Can't debug it like that.
Use this command to see all orientation tags within your JPEG file:
&lt;denchmark-code&gt;exiftool -a -all -G1  -n filename.jpg | grep Orientation
&lt;/denchmark-code&gt;

Some files contain multiple tags, which was the case last time we had this issue. You'll have to fix the files then or use JSON sidecar files, if exiftool shows the right orientation. Since you can now use a separate root for sidecar files, this is possible even in readonly mode (might have to remove the readonly check which I will do now).
		</comment>
		<comment id='8' author='sam2kb' date='2020-06-07T10:14:39Z'>
		That's awesome! I'll reindex in the morning.
		</comment>
		<comment id='9' author='sam2kb' date='2020-06-07T10:28:27Z'>
		
These images you posted are PNG files without orientation / exif information. Can't debug it like that.

Those are just screenshots, I'll check the orientation, I simply assumed it's was somewhere in the metadata.
		</comment>
		<comment id='10' author='sam2kb' date='2020-06-07T10:55:01Z'>
		Make sure to start with a fresh database when testing.
		</comment>
		<comment id='11' author='sam2kb' date='2020-06-07T11:56:45Z'>
		I'm running with the absolute path, directory was created, but it's empty. I only tried on a subset of photos. Is it suppose to create both json files and raw &gt; jpg in that same path?
PHOTOPRISM_SIDECAR_PATH: "/photoprism/storage/cache/sidecar"
		</comment>
		<comment id='12' author='sam2kb' date='2020-06-07T12:00:44Z'>
		Yes, it should create all sidecar files incl JSON, YAML and JPEG there... to be honest, I haven't tested with readonly flag set to true, maybe there is an additional check I've missed. Don't have time to continue working on this right now, would be great if you can figure it out. Fix should be quick if needed.
Edit: Make sure your docker-compose.yml contains the following environment variables...
&lt;denchmark-code&gt;PHOTOPRISM_SIDECAR_JSON: "true"
PHOTOPRISM_SIDECAR_YAML: "true" 
&lt;/denchmark-code&gt;

		</comment>
		<comment id='13' author='sam2kb' date='2020-06-07T12:02:54Z'>
		You don't have to set the path, /photoprism/storage/sidecar is default. That way, you can clear the cache without losing other data.
		</comment>
		<comment id='14' author='sam2kb' date='2020-06-07T12:03:38Z'>
		Current configuration values can be checked with photoprism config
		</comment>
		<comment id='15' author='sam2kb' date='2020-06-07T12:35:16Z'>
		This should fix it, there were in fact additional checks. Hope I found everything. Our unit tests currently don't cover read-only mode in every aspect, that's something we need to improve.
		</comment>
		<comment id='16' author='sam2kb' date='2020-06-07T12:36:22Z'>
		Started a master / docker build: &lt;denchmark-link:https://travis-ci.org/github/photoprism/photoprism/builds/695653006&gt;https://travis-ci.org/github/photoprism/photoprism/builds/695653006&lt;/denchmark-link&gt;

		</comment>
		<comment id='17' author='sam2kb' date='2020-06-07T13:55:01Z'>
		FYI: There was another issue that prevented JSON data from RAW and video files to be indexed &lt;denchmark-link:https://github.com/photoprism/photoprism/commit/c2b60d340b5441fd4ae61afc4981e55723eb136b&gt;c2b60d3&lt;/denchmark-link&gt;

		</comment>
		<comment id='18' author='sam2kb' date='2020-06-07T16:05:15Z'>
		Thanks, I'm testing it now. I thought those two params defaulted to yes.
		</comment>
		<comment id='19' author='sam2kb' date='2020-06-07T16:07:17Z'>
		All bool flags should default to no / false.
		</comment>
		<comment id='20' author='sam2kb' date='2020-06-07T16:37:39Z'>
		It's now creating sidecar files!
Quick question, how does it handle this use case? Am I gonna have two independent images imported or does it somehow detect a duplicate using meta tags, file name and parent folder name?
/dir/raw/samefile.nef
/dir/jpg/samefile.jpg
		</comment>
		<comment id='21' author='sam2kb' date='2020-06-07T16:49:47Z'>
		If you've set a proper Document and Instance ID or Unique Image ID, it would group it as one photo. Otherwise they need to be in the same directory and use a common prefix.
		</comment>
		<comment id='22' author='sam2kb' date='2020-06-07T16:51:58Z'>
		
Document and Instance ID or Unique Image ID

Are you talking about meta tags in the images?
		</comment>
		<comment id='23' author='sam2kb' date='2020-06-07T16:54:41Z'>
		Yes, that's XMP. Exif only has a unique image ID which is like the document ID in XMP.
		</comment>
		<comment id='24' author='sam2kb' date='2020-06-07T16:56:04Z'>
		In addition, images will also be grouped if they were made at the same time and location.
		</comment>
		<comment id='25' author='sam2kb' date='2020-06-07T17:06:57Z'>
		That's really cool. Let me check
		</comment>
		<comment id='26' author='sam2kb' date='2020-06-07T21:53:18Z'>
		I think this can be closed now. Thanks for adding the features!
		</comment>
		<comment id='27' author='sam2kb' date='2020-06-08T03:21:40Z'>
		Thanks for testing 👍
		</comment>
	</comments>
</bug>