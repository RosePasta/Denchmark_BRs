<bug id='219' author='linosgian' open_date='2020-01-24T12:19:49Z' closed_time='2020-01-27T23:20:08Z'>
	<summary>[Exif]: "Date/Time Original"/"Create Date" parsed incorrectly</summary>
	<description>
Indexing did not get exif's "Date/Time Original" or "Create Date" right for some of my photos. exiftool seems to be able to parse everything correctly on all photos. As a result, the photo appears to be taken in 2020, as (I guess) indexing falls back to the file's mtime
I'd be willing to provide you with a sample by some other means (than this GH issue). Any suggestions?
	</description>
	<comments>
		<comment id='1' author='linosgian' date='2020-01-24T12:22:37Z'>
		&lt;denchmark-link:mailto:hello@photoprism.org&gt;hello@photoprism.org&lt;/denchmark-link&gt;
 either as link or attachment if files are not too big
		</comment>
		<comment id='2' author='linosgian' date='2020-01-24T12:26:41Z'>
		Make sure to use our latest build so that you can see date / time details in the edit dialog. Last build had an issue with the time zone there, but it's fixed now.
		</comment>
		<comment id='3' author='linosgian' date='2020-01-24T12:29:53Z'>
		Thank you for testing! ‚ù§Ô∏è
		</comment>
		<comment id='4' author='linosgian' date='2020-01-24T13:16:17Z'>
		I pulled develop and the issue persists. I've sent you the sample through mail
		</comment>
		<comment id='5' author='linosgian' date='2020-01-24T13:21:36Z'>
		Received! Thought you're using our pre-built Docker image, but makes sense you have a dev environment...
		</comment>
		<comment id='6' author='linosgian' date='2020-01-24T13:22:21Z'>
		No error messages or warnings in the log?
		</comment>
		<comment id='7' author='linosgian' date='2020-01-24T14:53:38Z'>
		Oh damn, I forgot to include those in my original description. Yes, all of the photos that get the wrong date throw the following:
ERRO[2020-01-24T14:50:34Z] ascii not terminated with nul as expected
		</comment>
		<comment id='8' author='linosgian' date='2020-01-24T17:46:33Z'>
		&lt;denchmark-link:https://github.com/linosgian&gt;@linosgian&lt;/denchmark-link&gt;
 May I forward your test file to &lt;denchmark-link:https://github.com/dsoprea&gt;@dsoprea&lt;/denchmark-link&gt;
? Hope he can help with this.
		</comment>
		<comment id='9' author='linosgian' date='2020-01-24T18:02:12Z'>
		It sounds like the timestamp couldn't even be recovered from the file, much less parsed. Can you share what the raw strings from the file should be and what PP is showing?
There are nul-terminated and non-oil terminated strings in EXIF. Each tag specifies this in the standard. I previously had forgiveness for this when not correct but switched to be more strict in the big refactor that just happened.
If you can actually give me the timestamps and one or more files that experienced this (you said there were many examples), then I can look into it.
		</comment>
		<comment id='10' author='linosgian' date='2020-01-24T18:08:11Z'>
		This JPEG file should "work": &lt;denchmark-link:https://dl.photoprism.org/fixtures/testdata/import/QSYC4981.JPG&gt;https://dl.photoprism.org/fixtures/testdata/import/QSYC4981.JPG&lt;/denchmark-link&gt;

		</comment>
		<comment id='11' author='linosgian' date='2020-01-24T18:11:43Z'>
		&lt;denchmark-link:https://github.com/linosgian&gt;@linosgian&lt;/denchmark-link&gt;
 Is it possible that you received the "broken" file via WhatsApp?
		</comment>
		<comment id='12' author='linosgian' date='2020-01-24T18:45:36Z'>
		This is well tested against JPEGs. I'm assuming his are nonconforming, though may turn out to be a common case. At this point, we just need to reproduce.
		</comment>
		<comment id='13' author='linosgian' date='2020-01-24T18:51:21Z'>
		&lt;denchmark-link:https://github.com/dsoprea&gt;@dsoprea&lt;/denchmark-link&gt;
 Can you test with the JPEG file I provided? Could be a WhatsApp bug or something...
I also have other photos of regular people but don't want to share them. Doesn't happen only because the image is ugly. They all came via WhatsApp.
		</comment>
		<comment id='14' author='linosgian' date='2020-01-24T23:37:24Z'>
		&lt;denchmark-link:https://github.com/lastzero&gt;@lastzero&lt;/denchmark-link&gt;
 you can share it. I don't recall whether I downloaded it from Whatsapp, but it could be, since all of the problematic images are very low quality JPG. OTOH  seems to be parsing it correctly.
		</comment>
		<comment id='15' author='linosgian' date='2020-01-26T06:14:02Z'>
		Good to go. Looks like the code I added the strictness to was general string-handling code, which leads me to believe that this is going to have a very large impact. I reverted it to the previous state and confirmed that it worked with v1, broke with v2, and worked after the fix.
		</comment>
		<comment id='16' author='linosgian' date='2020-01-26T10:45:38Z'>
		Master build is running (takes ~30 minutes): &lt;denchmark-link:https://travis-ci.org/photoprism/photoprism/builds/641978947&gt;https://travis-ci.org/photoprism/photoprism/builds/641978947&lt;/denchmark-link&gt;

Also updated our docs and test files along the way.
&lt;denchmark-link:https://github.com/linosgian&gt;@linosgian&lt;/denchmark-link&gt;
 When the new image is pushed to Docker hub (or you build from develop), you can test again and are free to close this issue :)
		</comment>
		<comment id='17' author='linosgian' date='2020-01-27T23:20:08Z'>
		I've tested this with the latest build and now all the photos seem to be parsed correctly. I think we can close this one.
üéâ
		</comment>
	</comments>
</bug>