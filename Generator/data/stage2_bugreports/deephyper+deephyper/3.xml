<bug id='3' author='masalim2' open_date='2019-01-09T21:13:50Z' closed_time='2019-04-29T18:31:20Z'>
	<summary>AssertionError in AMBS optimization when there are no continuous hyperparameters</summary>
	<description>
Bethany ran a custom hps search resulting in
&lt;denchmark-code&gt;File "/Users/blusch/Documents/deephyper/deephyper/deephyper/search/optimizers/optimizer.py", line 91, in tell
    assert len(XX) == len(YY) == self.counter
AssertionError
&lt;/denchmark-code&gt;

&lt;denchmark-link:https://github.com/deephyper/deephyper/files/2742624/deephyper.log&gt;deephyper.log&lt;/denchmark-link&gt;

This invariant seems to break only after the first repeated evaluation; which makes sense because this code path was not exercised in prior AMBS experiments that always had at least one continuous h.p.  In this case, all h.p. are discrete which causes repeat evaluations near convergence.
	</description>
	<comments>
		<comment id='1' author='masalim2' date='2019-01-11T15:50:06Z'>
		&lt;denchmark-link:https://github.com/masalim2&gt;@masalim2&lt;/denchmark-link&gt;
 is it due to discrete h.p. or can that happen with continuous h.p. as well but it's more "difficult" ?
		</comment>
		<comment id='2' author='masalim2' date='2019-01-11T19:22:25Z'>
		I think it’s much more likely with discrete h.p; at least I have never seen it happen after probably tens of thousands of AMBS evaluations with some other benchmarks

On Jan 11, 2019, at 9:50 AM, Romain Egele &lt;notifications@github.com&lt;mailto:notifications@github.com&gt;&gt; wrote:


&lt;denchmark-link:https://github.com/masalim2&gt;@masalim2&lt;/denchmark-link&gt;
&lt;&lt;denchmark-link:https://github.com/masalim2&gt;https://github.com/masalim2&lt;/denchmark-link&gt;
&gt; is it really related with discrete h.p. or can that happen with continuous h.p. as well but it's more "difficult" ?

—
You are receiving this because you were mentioned.
Reply to this email directly, view it on GitHub&lt;&lt;denchmark-link:https://github.com/deephyper/deephyper/issues/3#issuecomment-453561318&gt;#3 (comment)&lt;/denchmark-link&gt;
&gt;, or mute the thread&lt;&lt;denchmark-link:https://github.com/notifications/unsubscribe-auth/AT_d06LV3ICFA9fyKmVXbET75Iv7uhnnks5vCLKvgaJpZM4Z4UVh&gt;https://github.com/notifications/unsubscribe-auth/AT_d06LV3ICFA9fyKmVXbET75Iv7uhnnks5vCLKvgaJpZM4Z4UVh&lt;/denchmark-link&gt;
&gt;.
		</comment>
		<comment id='3' author='masalim2' date='2019-04-29T16:59:37Z'>
		Issue is due to the fact that the Optimizer stores a copy of the evals in a dict mapping {hps : objective}.  When a duplicate hps value is passed on optimizer.tell() the dict entry is overwritten.  However, on optimizer.ask(),  the counter is incremented by the total number of returned hps values, even if some are duplicates.  This breaks the invariant between ask() &amp; tell() calls.  Can fix either by removing optimizer.counter value, or incrementing the counter by number of unique and unevaluated hps values.
		</comment>
		<comment id='4' author='masalim2' date='2019-04-29T17:01:22Z'>
		I think the second option is better: "or incrementing the counter by number of unique and unevaluated hps values" because we could use it to collect statistics from the run and have some analysis.
		</comment>
	</comments>
</bug>