<bug id='734' author='lutzroeder' open_date='2020-06-24T02:48:25Z' closed_time='2020-07-28T05:24:27Z'>
	<summary>'Object' in VisionFeaturePrint.proto is invalid in JavaScript</summary>
	<description>
&lt;denchmark-h:h2&gt;üêûDescribe the bug&lt;/denchmark-h&gt;

&lt;denchmark-link:https://github.com/apple/coremltools/blob/master/mlmodel/format/VisionFeaturePrint.proto&gt;VisionFeaturePrint.proto&lt;/denchmark-link&gt;
 in &lt;denchmark-link:https://github.com/apple/coremltools/pull/731&gt;#731&lt;/denchmark-link&gt;
 defines a new message called . Since  is a keyword in JavaScript, code generated in protobuf.js will fail with the following error:
&lt;denchmark-code&gt;TypeError: Object.create is not a function
    at ~/Projects/netron/src/coreml-proto.js:617:66
    at ~/Projects/netron/src/coreml-proto.js:621:27
    at ~/Projects/netron/src/coreml-proto.js:624:23
&lt;/denchmark-code&gt;

This is blocking adoption of the new Core ML .proto in JavaScript.
&lt;denchmark-h:h2&gt;To Reproduce&lt;/denchmark-h&gt;


Install Node.js and npm
git clone https://github.com/lutzroeder/netron.git
cd netron
npm install
./tools/coreml sync schema - this will sync and update ./src/coreml-proto.js to latest
npx electron . - launches the app
Open Core ML model

&lt;denchmark-link:https://user-images.githubusercontent.com/438516/85492592-453d9700-b58a-11ea-9ecc-e3f20a0df9ad.png&gt;&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='lutzroeder' date='2020-06-24T22:40:18Z'>
		I think the problem is actually a bug in the protobuf.js code generator -- it's allowing name collision at different scopes. So the following generated code is fundamentally broken, because the name Object refers to the local Object here (defined by proto), not the global Object, but Object.create needs to refer to the global:
                        Object.ObjectVersion = (function() {
                            var valuesById = {}, values = Object.create(valuesById);
                            values[valuesById[0] = "OBJECT_VERSION_INVALID"] = 0;
                            values[valuesById[1] = "OBJECT_VERSION_1"] = 1;
                            return values;
                        })();
This generated code could instead use window.Object.create (to explicitly refer to the global instead of lexical scope) in a web browser; or a better fix that would work outside of a browser environment might be to grab a reference to the global Object in an outer lexical scope using a non-colliding name, and use that name here instead:
var globalObjectWithUniqueName = Object;
...
                        Object.ObjectVersion = (function() {
                            var valuesById = {}, values = globalObjectWithUniqueName.create(valuesById);
                            values[valuesById[0] = "OBJECT_VERSION_INVALID"] = 0;
                            values[valuesById[1] = "OBJECT_VERSION_1"] = 1;
                            return values;
                        })();
The command used by netron to generate this is:
pbjs -t static-module -w closure --no-encode --no-delimited --no-comments --no-convert --no-verify --no-create --keep-case -r coreml -o ./src/coreml-proto.js ./third_party/src/coremltools/mlmodel/format/Model.proto
Which appears to be using &lt;denchmark-link:https://github.com/protobufjs/protobuf.js&gt;this 3rd party library for using Protobuf in JavaScript&lt;/denchmark-link&gt;
, not the official Protobuf library from Google (both seem to support JavaScript, but protobuf.js seems more popular for this use case). So my conclusion is that this is a bug in this library, and should be fixed there.
&lt;denchmark-link:https://github.com/lutzroeder&gt;@lutzroeder&lt;/denchmark-link&gt;
, as a workaround, I think you could try one of the following:


Use a different mode of protobuf.js to consume the .proto - one of the reflection based approaches may not have the same bug as this bug may be specific to the static code approach.


Use Google's protobuf instead of protobuf.js. It claims to have JS support built-in. Since it is a different implementation it may not have the same bug.


		</comment>
		<comment id='2' author='lutzroeder' date='2020-06-24T22:44:44Z'>
		nice :)
&lt;denchmark-link:#&gt;‚Ä¶&lt;/denchmark-link&gt;


 On Jun 24, 2020, at 3:40 PM, Zach Nation ***@***.***&gt; wrote:


 I think the problem is actually a bug in the protobuf.js code generator -- it's allowing name collision at different scopes. So the following generated code is fundamentally broken, because the name Object refers to the local Object here (defined by proto), not the global Object, but Object.create needs to refer to the global:

                         Object.ObjectVersion = (function() {
                             var valuesById = {}, values = Object.create(valuesById);
                             values[valuesById[0] = "OBJECT_VERSION_INVALID"] = 0;
                             values[valuesById[1] = "OBJECT_VERSION_1"] = 1;
                             return values;
                         })();
 This generated code could instead use window.Object.create (to explicitly refer to the global instead of lexical scope) in a web browser; or a better fix that would work outside of a browser environment might be to grab a reference to the global Object in an outer lexical scope using a non-colliding name, and use that name here instead:

 var globalObjectWithUniqueName = Object;
 ...
                         Object.ObjectVersion = (function() {
                             var valuesById = {}, values = globalObjectWithUniqueName.create(valuesById);
                             values[valuesById[0] = "OBJECT_VERSION_INVALID"] = 0;
                             values[valuesById[1] = "OBJECT_VERSION_1"] = 1;
                             return values;
                         })();
 The command used by netron to generate this is:

 pbjs -t static-module -w closure --no-encode --no-delimited --no-comments --no-convert --no-verify --no-create --keep-case -r coreml -o ./src/coreml-proto.js ./third_party/src/coremltools/mlmodel/format/Model.proto

 Which appears to be using this 3rd party library for using Protobuf in JavaScript &lt;https://github.com/protobufjs/protobuf.js&gt;, not the official Protobuf library from Google (both seem to support JavaScript, but protobuf.js seems more popular for this use case). So my conclusion is that this is a bug in this library, and should be fixed there.

 @lutzroeder &lt;https://github.com/lutzroeder&gt;, as a workaround, I think you could try one of the following:

 Use a different mode of protobuf.js to consume the .proto - one of the reflection based &lt;https://github.com/protobufjs/protobuf.js#reflection-vs-static-code&gt; approaches may not have the same bug as this bug may be specific to the static code approach.

 Use Google's protobuf &lt;https://github.com/protocolbuffers/protobuf&gt; instead of protobuf.js. It claims to have JS support built-in. Since it is a different implementation it may not have the same bug.

 ‚Äî
 You are receiving this because you are subscribed to this thread.
 Reply to this email directly, view it on GitHub &lt;#734 (comment)&gt;, or unsubscribe &lt;https://github.com/notifications/unsubscribe-auth/ABGPTFOWPZ67HL76W5AUTPTRYJ6GHANCNFSM4OGHM3ZQ&gt;.



		</comment>
		<comment id='3' author='lutzroeder' date='2020-06-24T22:54:01Z'>
		&lt;denchmark-link:https://github.com/znation&gt;@znation&lt;/denchmark-link&gt;
 Having been in those discussions a few times my recommendation would be to consider renaming the API. It should be a non-breaking change and would be easier to do now when things aren't set in stone. Otherwise you'd have to work with the folks who maintain protobuf.js in their spare time to get this fixed. In the bigger scheme of things I'd rather have them pay attention to other items like merging JavaScript  support. Switching to the other implementations isn't an option as it has other limitations and would be a very expensive task in the context of having to support 10+ protobuf formats for no reason other than working around this naming issue.  is such an overloaded term in programming, using it tends to lead to problems and confusion that can be avoided.
		</comment>
		<comment id='4' author='lutzroeder' date='2020-06-24T23:11:05Z'>
		&lt;denchmark-link:https://github.com/lutzroeder&gt;@lutzroeder&lt;/denchmark-link&gt;
 that's a fair point. We will address this in Core ML. I will let you know once we have a fix for you to try.
		</comment>
	</comments>
</bug>