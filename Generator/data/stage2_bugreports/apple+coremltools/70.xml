<bug id='70' author='andriikrupka' open_date='2017-11-29T17:13:22Z' closed_time='2018-03-02T19:29:50Z'>
	<summary>Incorrect input shape</summary>
	<description>
I have keras model like that:
&lt;denchmark-code&gt;inputlayer = Input(shape=(126,12))

model = BatchNormalization()(inputlayer)
model = Conv1D(16, 25, activation='relu')(model)
model = Flatten()(model)
model = Dense(output_size, activation='sigmoid')(model)

model = Model(inputs=inputlayer, outputs=model)
&lt;/denchmark-code&gt;

Which I convert to coreml:
&lt;denchmark-code&gt;coreml_model = coremltools.converters.keras.convert(model,
                                                    class_labels=classes)
coreml_model.save('speech_model.mlmodel')
&lt;/denchmark-code&gt;

So, I expect to see MultiArray (Double 126x12), but I see MultiArray (Double 12)
&lt;denchmark-link:https://i.stack.imgur.com/AH5rV.png&gt;&lt;/denchmark-link&gt;

Could you help to say what I'm doing wrong?
	</description>
	<comments>
		<comment id='1' author='andriikrupka' date='2017-11-29T21:36:33Z'>
		since your input dimension length is 2, according to &lt;denchmark-link:https://github.com/apple/coremltools/blob/master/coremltools/converters/keras/_keras2_converter.py#L227&gt;https://github.com/apple/coremltools/blob/master/coremltools/converters/keras/_keras2_converter.py#L227&lt;/denchmark-link&gt;
, it assumes your input shape is , and therefore returns  where dim would be  in your case.
To get around this, you could try:
&lt;denchmark-code&gt;inputlayer = Input(shape=(126 * 12,))

model = Reshape((126,12))(inputlayer)
model = BatchNormalization()(model)
model = Conv1D(16, 25, activation='relu')(model)
model = Flatten()(model)
model = Dense(output_size, activation='sigmoid')(model)

model = Model(inputs=inputlayer, outputs=model)
&lt;/denchmark-code&gt;

where in your coreML app, input a flattened input thats of shape (126 * 12,), and the mlmodel will handle the reshaping to (126, 12) within the model.
		</comment>
		<comment id='2' author='andriikrupka' date='2018-01-23T05:51:50Z'>
		Looks like this was fixed.
		</comment>
		<comment id='3' author='andriikrupka' date='2018-02-26T18:00:36Z'>
		This seems to be happening still. I worked around the problem with the Reshape layer suggested above, but I get errors printed to the console for every prediction call at runtime.
BNNS FULLY: input batch stride doesn't make sense (32 &lt; 32576)
For context, my first layer without the workaround is a Conv1D with input shape (4096,1).
		</comment>
		<comment id='4' author='andriikrupka' date='2018-03-01T14:24:35Z'>
		&lt;denchmark-link:https://github.com/srikris&gt;@srikris&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/slin07&gt;@slin07&lt;/denchmark-link&gt;
 this is definitely not fixed. I tried with the latest (master) branch and the problem appears to still be occurring. The workaround suggested by &lt;denchmark-link:https://github.com/G-mel&gt;@G-mel&lt;/denchmark-link&gt;
 does work but I think that the reshape operation is unnecessarily expensive on GPU.
Could this issue be reopened?
		</comment>
		<comment id='5' author='andriikrupka' date='2018-03-02T02:02:48Z'>
		&lt;denchmark-link:https://github.com/andriikrupka&gt;@andriikrupka&lt;/denchmark-link&gt;
 (126,12) is interpreted as (Seq, Channel) by CoreML. CoreML treats Seq. dimension similar to a batch dimension hence it does not hard code it into the mlmodel. So the mlmodel for the input just says 12 corresponding to the number of channels. This way you can change the value of the sequence dimension at run time when you call predict in your app. At that time CoreML can be given a multi array of 3 dimensions, which maps to (Seq,B,C). You just need to create an array of shape (126,1,12) and pass it to the predict call. In fact you can also call predict on an input which has a different seq dimension (say 100 instead of 126) by passing in (100,1,12) sized input. You do not need to change the mlmodel by adding a reshape layer.
Please see discussion in issue &lt;denchmark-link:https://github.com/apple/coremltools/issues/142&gt;#142&lt;/denchmark-link&gt;
 for more details.
If in you case you only work on 126 length sequences, you can do a 2D conv such that the height dimension is 1 and the width dimension corresponds to the sequence dimension. Something like this:
&lt;denchmark-code&gt;inputlayer = Input(shape=(1,126,12)) #Keras interpretation: (H,W,C)
model = BatchNormalization()(inputlayer)
model = Conv2D(16, (1,25), activation='relu')(model)
model = Flatten()(model)
model = Dense(10, activation='sigmoid')(model)
model = Model(inputs=inputlayer, outputs=model)
print(model.summary())
&lt;/denchmark-code&gt;

		</comment>
		<comment id='6' author='andriikrupka' date='2018-03-02T16:53:55Z'>
		&lt;denchmark-link:https://github.com/aseemw&gt;@aseemw&lt;/denchmark-link&gt;
 I tried passing an input of size  to &lt;denchmark-link:https://github.com/andriikrupka&gt;@andriikrupka&lt;/denchmark-link&gt;
's model and the result was an error complaining that rank-5 inputs were not supported.
&lt;denchmark-code&gt;inputlayer = Input(shape=(126,12))
output_size=30
model = BatchNormalization()(inputlayer)
model = Conv1D(16, 25, activation='relu')(model)
model = Flatten()(model)
model = Dense(output_size, activation='sigmoid')(model)

model = Model(inputs=inputlayer, outputs=model)
coreml_model = coremltools.converters.keras.convert(model)

X = np.random.rand(126,1,12,1,1)
coreml_model.predict({'input1':X})

RuntimeError                              Traceback (most recent call last)
&lt;ipython-input-62-692012ab6531&gt; in &lt;module&gt;()
----&gt; 1 coreml_model.predict({'input1':X})

~/dev/coreml_experiments/.venv/lib/python3.6/site-packages/coremltools/models/model.py in predict(self, data, useCPUOnly, **kwargs)
    262 
    263         if self.__proxy__:
--&gt; 264             return self.__proxy__.predict(data,useCPUOnly)
    265         else:
    266             if _macos_version() &lt; (10, 13):

RuntimeError: {
    NSLocalizedDescription = "Input input1 is an array of rank 5, but this model only supports single vector inputs (rank 1) or a sequence of batches of vectors (rank 3).";
}

&lt;/denchmark-code&gt;

		</comment>
		<comment id='7' author='andriikrupka' date='2018-03-02T19:29:50Z'>
		&lt;denchmark-link:https://github.com/vellamike&gt;@vellamike&lt;/denchmark-link&gt;
 I erred in my description of the input shapes. Please see comments in issue &lt;denchmark-link:https://github.com/apple/coremltools/issues/142&gt;#142&lt;/denchmark-link&gt;
.
		</comment>
	</comments>
</bug>