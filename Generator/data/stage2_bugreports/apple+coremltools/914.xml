<bug id='914' author='j-paulus' open_date='2020-09-08T12:20:51Z' closed_time='2020-10-13T14:02:34Z'>
	<summary>Torch model with a dynamic reshape converted wrong</summary>
	<description>
&lt;denchmark-h:h2&gt;üêûDescribe the bug&lt;/denchmark-h&gt;

Converting a pytorch model containing a single reshape() results into an intermediate model with a wrong behaviour. Depending on what the arguments to reshape() are, the failure is different:

Leaving a dimension free:

&lt;denchmark-code&gt;s1 = x.shape[0] * x.shape[1]
return x.reshape((s1, -1))
&lt;/denchmark-code&gt;

The conversion creates a rankPreservingReshape from this with a fixed size in the first dimension (the one which we define explicitly) and a free second dimension:

rankPreservingReshape {
targetShape: 20
targetShape: -1
}

If now called with an input of different shape, the layer attempts to reshape it to the target shape (20, -1) instead of flattening the first two dimensions.

Fixing the dimensions:

&lt;denchmark-code&gt;s1 = x.shape[0] * x.shape[1]
return x.reshape((s1, 1))
&lt;/denchmark-code&gt;

The conversion creates now a reshapeStatic with a fixed output size:

reshapeStatic {
targetShape: 20
targetShape: 1
}

When now called with a different input shape, the output cannot be forced into the defined shape and the execution fails.
This looks as if the dynamic input shape to the network is ignored in the conversion of reshape() and only the given default size is converted and everything else will fail.
See below for a minimal complete code example.
&lt;denchmark-h:h2&gt;Trace&lt;/denchmark-h&gt;


File "/Users/name/opt/anaconda3/envs/coreml_test/lib/python3.8/site-packages/coremltools/models/model.py", line 329, in predict
return self.proxy.predict(data, useCPUOnly)
RuntimeError: {
NSLocalizedDescription = "Error computing NN outputs.";
}

&lt;denchmark-h:h2&gt;To Reproduce&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;import torch
import coremltools as ct

class TriggerBug(torch.nn.Module):
    def __init__(self):
        super(TriggerBug, self).__init__()

    def forward(self, x):
        s1 = x.shape[0] * x.shape[1]
        #return x.reshape((s1, -1))  # =&gt; crash with different input shape
        return x.reshape((s1, 1))  # =&gt; wrong output shape

model = TriggerBug()
x = torch.randn((2, 10))
traced_model = torch.jit.trace(model, (x,))
in_shape = ct.Shape(shape=(2, ct.RangeDim(1, -1)), default=x.shape)
model_ct = ct.convert(traced_model, inputs=[ct.TensorType(shape=in_shape, name='x')])
print(model_ct.get_spec())

# same shape input as during translation =&gt; works
out_dict = model_ct.predict({'x': x.detach().numpy()})

# different shape input as during translation =&gt; wrong result
out_dict = model_ct.predict({'x': torch.cat((x, x), dim=1).detach().numpy()})

&lt;/denchmark-code&gt;

&lt;denchmark-h:h2&gt;System environment (please complete the following information):&lt;/denchmark-h&gt;


PyTorch version: 1.7.0.dev20200823
Is debug build: False
CUDA used to build PyTorch: None
OS: Mac OSX 10.15.6 (x86_64)
GCC version: Could not collect
Clang version: 11.0.3 (clang-1103.0.32.62)
CMake version: version 3.18.2
Python version: 3.8 (64-bit runtime)
Is CUDA available: False
CUDA runtime version: No CUDA
GPU models and configuration: No CUDA
Nvidia driver version: No CUDA
cuDNN version: No CUDA
Versions of relevant libraries:
[pip3] numpy==1.19.1
[pip3] torch==1.7.0.dev20200823
[conda] blas 1.0 mkl
[conda] mkl 2019.4 233
[conda] mkl-service 2.3.0 py38hfbe908c_0
[conda] mkl_fft 1.1.0 py38hc64f4ea_0
[conda] mkl_random 1.1.1 py38h959d312_0
[conda] numpy 1.19.1 py38h3b9f5b6_0
[conda] numpy-base 1.19.1 py38hcfb5961_0
[conda] pytorch 1.7.0.dev20200823 py3.8_0 pytorch-nightly
coremltools 4.0b3

Exactly same behaviour also with PyTorch version: 1.5.1 (since CoreML Tools officially supports only this).
&lt;denchmark-h:h2&gt;Additional context&lt;/denchmark-h&gt;

Possibly related to &lt;denchmark-link:https://github.com/apple/coremltools/issues/276&gt;#276&lt;/denchmark-link&gt;

(edit: added related issue)
	</description>
	<comments>
		<comment id='1' author='j-paulus' date='2020-09-09T20:13:56Z'>
		&lt;denchmark-link:https://github.com/j-paulus&gt;@j-paulus&lt;/denchmark-link&gt;
 Can you try scripting instead of tracing the pytorch model before running the conversion?
&lt;denchmark-link:https://coremltools.readme.io/docs/model-scripting&gt;https://coremltools.readme.io/docs/model-scripting&lt;/denchmark-link&gt;

		</comment>
		<comment id='2' author='j-paulus' date='2020-09-10T07:26:06Z'>
		&lt;denchmark-link:https://github.com/DawerG&gt;@DawerG&lt;/denchmark-link&gt;
 Sure. Though in the real model I'm converting this is currently not an option since there is a problem with scripting and BatchNorm layers due to modifying member attributes in : &lt;denchmark-link:https://github.com/pytorch/pytorch/issues/43948&gt;pytorch:43948&lt;/denchmark-link&gt;
.
I made tests with tracing and scripting, using pytorch versions 1.5.1, 1.6, and 1.7-dev20200909. The only combinations working at all are 1.6/1.7 + tracing, and in those cases only using the exact default input shape works.
&lt;denchmark-h:h3&gt;1.51 + tracing&lt;/denchmark-h&gt;


Traceback (most recent call last):
File "bug_torch2coreml_dynamic_reshape.py", line 32, in 
model_ct = ct.convert(traced_model, inputs=[ct.TensorType(shape=in_shape, name='x')])
File "/Users/name/opt/anaconda3/envs/torch2coreml/lib/python3.7/site-packages/coremltools/converters/_converters_entry.py", line 310, in convert
**kwargs
File "/Users/name/opt/anaconda3/envs/torch2coreml/lib/python3.7/site-packages/coremltools/converters/mil/converter.py", line 134, in _convert
prog = frontend_converter(model, **kwargs)
File "/Users/name/opt/anaconda3/envs/torch2coreml/lib/python3.7/site-packages/coremltools/converters/mil/converter.py", line 84, in call
return load(*args, **kwargs)
File "/Users/name/opt/anaconda3/envs/torch2coreml/lib/python3.7/site-packages/coremltools/converters/mil/frontend/torch/load.py", line 86, in load
raise e
File "/Users/name/opt/anaconda3/envs/torch2coreml/lib/python3.7/site-packages/coremltools/converters/mil/frontend/torch/load.py", line 76, in load
prog = converter.convert()
File "/Users/name/opt/anaconda3/envs/torch2coreml/lib/python3.7/site-packages/coremltools/converters/mil/frontend/torch/converter.py", line 224, in convert
convert_nodes(self.context, self.graph)
File "/Users/name/opt/anaconda3/envs/torch2coreml/lib/python3.7/site-packages/coremltools/converters/mil/frontend/torch/ops.py", line 55, in convert_nodes
_add_op(context, node)
File "/Users/name/opt/anaconda3/envs/torch2coreml/lib/python3.7/site-packages/coremltools/converters/mil/frontend/torch/ops.py", line 771, in view
view = mb.reshape(x=x, shape=shape, name=node.name)
File "/Users/name/opt/anaconda3/envs/torch2coreml/lib/python3.7/site-packages/coremltools/converters/mil/mil/ops/registry.py", line 62, in add_op
return cls._add_op(op_cls, **kwargs)
File "/Users/name/opt/anaconda3/envs/torch2coreml/lib/python3.7/site-packages/coremltools/converters/mil/mil/builder.py", line 187, in _add_op
op_cls.input_spec, kwargs["name"], op_cls, before_op, kwargs
File "/Users/name/opt/anaconda3/envs/torch2coreml/lib/python3.7/site-packages/coremltools/converters/mil/mil/builder.py", line 146, in _create_input_vars
var = cls._add_const(val, new_var_name, before_op)
File "/Users/name/opt/anaconda3/envs/torch2coreml/lib/python3.7/site-packages/coremltools/converters/mil/mil/builder.py", line 83, in _add_const
raise ValueError("Cannot add const {}".format(val))
ValueError: Cannot add const [&lt;coremltools.converters.mil.mil.var.Var object at 0x7f9739012750&gt;, &lt;coremltools.converters.mil.mil.var.Var object at 0x7f97390127c0&gt;]

&lt;denchmark-h:h3&gt;1.5.1 + scripting&lt;/denchmark-h&gt;


Traceback (most recent call last):
File "bug_torch2coreml_dynamic_reshape.py", line 32, in 
model_ct = ct.convert(traced_model, inputs=[ct.TensorType(shape=in_shape, name='x')])
File "/Users/name/opt/anaconda3/envs/torch2coreml/lib/python3.7/site-packages/coremltools/converters/_converters_entry.py", line 310, in convert
**kwargs
File "/Users/name/opt/anaconda3/envs/torch2coreml/lib/python3.7/site-packages/coremltools/converters/mil/converter.py", line 134, in _convert
prog = frontend_converter(model, **kwargs)
File "/Users/name/opt/anaconda3/envs/torch2coreml/lib/python3.7/site-packages/coremltools/converters/mil/converter.py", line 84, in call
return load(*args, **kwargs)
File "/Users/name/opt/anaconda3/envs/torch2coreml/lib/python3.7/site-packages/coremltools/converters/mil/frontend/torch/load.py", line 84, in load
raise e
File "/Users/name/opt/anaconda3/envs/torch2coreml/lib/python3.7/site-packages/coremltools/converters/mil/frontend/torch/load.py", line 76, in load
prog = converter.convert()
File "/Users/name/opt/anaconda3/envs/torch2coreml/lib/python3.7/site-packages/coremltools/converters/mil/frontend/torch/converter.py", line 224, in convert
convert_nodes(self.context, self.graph)
File "/Users/name/opt/anaconda3/envs/torch2coreml/lib/python3.7/site-packages/coremltools/converters/mil/frontend/torch/ops.py", line 52, in convert_nodes
"PyTorch convert function for op '{}' not implemented.".format(node.kind)
RuntimeError: PyTorch convert function for op 'shape' not implemented.

&lt;denchmark-h:h3&gt;1.6 / 1.7-nightly + tracing: The only ones working at all&lt;/denchmark-h&gt;


INFO: Predicting with a different input shape...
Traceback (most recent call last):
File "bug_torch2coreml_dynamic_reshape.py", line 45, in 
out_dict = model_ct.predict({'x': torch.cat((x, x), dim=1).detach().numpy()})
File "/Users/name/opt/anaconda3/envs/coreml_torch1.7/lib/python3.7/site-packages/coremltools/models/model.py", line 329, in predict
return self.proxy.predict(data, useCPUOnly)
RuntimeError: {
NSLocalizedDescription = "Error computing NN outputs.";
}

&lt;denchmark-h:h3&gt;1.6 + scripting&lt;/denchmark-h&gt;


Traceback (most recent call last):
File "bug_torch2coreml_dynamic_reshape.py", line 32, in 
model_ct = ct.convert(traced_model, inputs=[ct.TensorType(shape=in_shape, name='x')])
File "/Users/name/opt/anaconda3/envs/coreml_test/lib/python3.7/site-packages/coremltools/converters/_converters_entry.py", line 303, in convert
proto_spec = _convert(
File "/Users/name/opt/anaconda3/envs/coreml_test/lib/python3.7/site-packages/coremltools/converters/mil/converter.py", line 134, in _convert
prog = frontend_converter(model, **kwargs)
File "/Users/name/opt/anaconda3/envs/coreml_test/lib/python3.7/site-packages/coremltools/converters/mil/converter.py", line 84, in call
return load(*args, **kwargs)
File "/Users/name/opt/anaconda3/envs/coreml_test/lib/python3.7/site-packages/coremltools/converters/mil/frontend/torch/load.py", line 86, in load
raise e
File "/Users/name/opt/anaconda3/envs/coreml_test/lib/python3.7/site-packages/coremltools/converters/mil/frontend/torch/load.py", line 76, in load
prog = converter.convert()
File "/Users/name/opt/anaconda3/envs/coreml_test/lib/python3.7/site-packages/coremltools/converters/mil/frontend/torch/converter.py", line 224, in convert
convert_nodes(self.context, self.graph)
File "/Users/name/opt/anaconda3/envs/coreml_test/lib/python3.7/site-packages/coremltools/converters/mil/frontend/torch/ops.py", line 55, in convert_nodes
_add_op(context, node)
File "/Users/name/opt/anaconda3/envs/coreml_test/lib/python3.7/site-packages/coremltools/converters/mil/frontend/torch/ops.py", line 756, in size
inputs = _get_inputs(context, node, expected=2)
File "/Users/name/opt/anaconda3/envs/coreml_test/lib/python3.7/site-packages/coremltools/converters/mil/frontend/torch/ops.py", line 124, in _get_inputs
raise ValueError(
ValueError: node 3 (size) got 1 input(s), expected 2

&lt;denchmark-h:h3&gt;1.7-nightly + scripting&lt;/denchmark-h&gt;


Traceback (most recent call last):
File "bug_torch2coreml_dynamic_reshape.py", line 32, in 
model_ct = ct.convert(traced_model, inputs=[ct.TensorType(shape=in_shape, name='x')])
File "/Users/name/opt/anaconda3/envs/coreml_torch1.7/lib/python3.7/site-packages/coremltools/converters/_converters_entry.py", line 310, in convert
**kwargs
File "/Users/name/opt/anaconda3/envs/coreml_torch1.7/lib/python3.7/site-packages/coremltools/converters/mil/converter.py", line 134, in _convert
prog = frontend_converter(model, **kwargs)
File "/Users/name/opt/anaconda3/envs/coreml_torch1.7/lib/python3.7/site-packages/coremltools/converters/mil/converter.py", line 84, in call
return load(*args, **kwargs)
File "/Users/name/opt/anaconda3/envs/coreml_torch1.7/lib/python3.7/site-packages/coremltools/converters/mil/frontend/torch/load.py", line 86, in load
raise e
File "/Users/name/opt/anaconda3/envs/coreml_torch1.7/lib/python3.7/site-packages/coremltools/converters/mil/frontend/torch/load.py", line 76, in load
prog = converter.convert()
File "/Users/name/opt/anaconda3/envs/coreml_torch1.7/lib/python3.7/site-packages/coremltools/converters/mil/frontend/torch/converter.py", line 224, in convert
convert_nodes(self.context, self.graph)
File "/Users/name/opt/anaconda3/envs/coreml_torch1.7/lib/python3.7/site-packages/coremltools/converters/mil/frontend/torch/ops.py", line 55, in convert_nodes
_add_op(context, node)
File "/Users/name/opt/anaconda3/envs/coreml_torch1.7/lib/python3.7/site-packages/coremltools/converters/mil/frontend/torch/ops.py", line 751, in size
inputs = _get_inputs(context, node, expected=2)
File "/Users/name/opt/anaconda3/envs/coreml_torch1.7/lib/python3.7/site-packages/coremltools/converters/mil/frontend/torch/ops.py", line 126, in _get_inputs
node.name, node.kind, len(inputs), expected
ValueError: node 3 (size) got 1 input(s), expected 2

		</comment>
		<comment id='3' author='j-paulus' date='2020-10-13T14:02:33Z'>
		This problem seems to have been fixed in the release 4.0, so I will close the issue.
		</comment>
	</comments>
</bug>