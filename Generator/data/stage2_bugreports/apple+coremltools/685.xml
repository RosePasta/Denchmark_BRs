<bug id='685' author='danvargg' open_date='2020-04-11T21:13:35Z' closed_time='2020-05-09T17:58:56Z'>
	<summary>KeyError: 'begin_masks'</summary>
	<description>
&lt;denchmark-h:h2&gt;üêûDescribe the bug&lt;/denchmark-h&gt;

This is a continuation of issue &lt;denchmark-link:https://github.com/apple/coremltools/issues/623&gt;#623&lt;/denchmark-link&gt;
 . The change was merged into master. I upgraded  and ran the conversion, but it threw out the below error. Should I open a separate issue? It does convert a big chunk of the ops.
&lt;denchmark-h:h2&gt;Trace&lt;/denchmark-h&gt;

Traceback (most recent call last):
  File "tf2coreml.py", line 103, in &lt;module&gt;
    convertModel(model=_TRAIN_MODEL, ml_model=_ML_MODEL)
  File "tf2coreml.py", line 94, in convertModel
    minimum_ios_deployment_target='13')
  File "/home/ubuntu/anaconda3/envs/tensorflow_p36/lib/python3.6/site-packages/coremltools/converters/tensorflow/_tf_converter.py", line 193, in convert
    optional_inputs=optional_inputs)
  File "/home/ubuntu/anaconda3/envs/tensorflow_p36/lib/python3.6/site-packages/coremltools/converters/nnssa/coreml/ssa_converter.py", line 154, in ssa_convert
    converter.convert()
  File "/home/ubuntu/anaconda3/envs/tensorflow_p36/lib/python3.6/site-packages/coremltools/converters/nnssa/coreml/ssa_converter.py", line 581, in convert
    convert_func(node)
  File "/home/ubuntu/anaconda3/envs/tensorflow_p36/lib/python3.6/site-packages/coremltools/converters/nnssa/coreml/ssa_converter.py", line 801, in _convert_slice
    begin_masks = [True if i in node.attr['begin_masks'] else False for i in range(rank)]
  File "/home/ubuntu/anaconda3/envs/tensorflow_p36/lib/python3.6/site-packages/coremltools/converters/nnssa/coreml/ssa_converter.py", line 801, in &lt;listcomp&gt;
    begin_masks = [True if i in node.attr['begin_masks'] else False for i in range(rank)]
KeyError: 'begin_masks'
&lt;denchmark-h:h2&gt;To Reproduce&lt;/denchmark-h&gt;

Same as issue &lt;denchmark-link:https://github.com/apple/coremltools/issues/623&gt;#623&lt;/denchmark-link&gt;
 .
tf.keras.backend.clear_session()
tf.keras.backend.set_learning_phase(0)

# model is a .h5 file produced from a model.fit callback (modelcheckpoint)
# I have a custom dense layer that has __init__, build, call and config implemented
model = tf.keras.models.load_model(model, custom_objects = {'DenseLayer': DenseLayer})

tf.saved_model.save(model, export_dir = pb_model) # save the model as pb for conversion

# my target ios is 12
coremltools_model = coremltools.converters.tensorflow.convert(
        _PB_MODEL,
        input_name_shape_dict={
            'B': [1, 20, 40, 1],
            'G': [1, 20, 40, 1],
            'R': [1, 20, 40, 1],
            'X': [1, 2],
            'Y': [1, 4]},
        output_feature_names=['dense_layer_18/Identity'],
        minimum_ios_deployment_target='12'
    )

coremltools_model.save(ml_model)
&lt;denchmark-h:h2&gt;System environment (please complete the following information):&lt;/denchmark-h&gt;


coremltools version  (e.g., 3.0b5): 3.2
OS (e.g., MacOS, Linux): Ubuntu 18.04 (AWS EC2)
How you install python: pip
python version (e.g. 3.7): 3.6.5
tensorflow version: 1.15.0 (tf.keras)

	</description>
	<comments>
		<comment id='1' author='danvargg' date='2020-05-02T06:52:53Z'>
		Thanks for reporting the issue. It seems like the fix didn't quite work. We will looking into it again.
		</comment>
		<comment id='2' author='danvargg' date='2020-05-04T20:04:33Z'>
		I switched to tfcroreml and don't have that error anymore, now I'm getting:
The problem seems to be with a batch_norm: [SSAConverter] [334/871] Converting op type: 'Mul', name: 'model_1/model/iNorm-0/batchnorm/mul_1', output_shape: (0, 64).
Traceback (most recent call last):
  File "tf2coreml.py", line 116, in &lt;module&gt;
    saved_model=_SAVED_MODEL, ml_model=_ML_MODEL)
  File "tf2coreml.py", line 107, in convertModel
    minimum_ios_deployment_target='13')  # TODO: implement all prints
  File "/home/ubuntu/anaconda3/envs/tensorflow2_p36/lib/python3.6/site-packages/tfcoreml/_tf_coreml_converter.py", line 691, in convert
    custom_shape_functions=custom_shape_functions)
  File "/home/ubuntu/anaconda3/envs/tensorflow2_p36/lib/python3.6/site-packages/coremltools/converters/tensorflow/_tf_converter.py", line 193, in convert
    optional_inputs=optional_inputs)
  File "/home/ubuntu/anaconda3/envs/tensorflow2_p36/lib/python3.6/site-packages/coremltools/converters/nnssa/coreml/ssa_converter.py", line 154, in ssa_convert
    converter.convert()
  File "/home/ubuntu/anaconda3/envs/tensorflow2_p36/lib/python3.6/site-packages/coremltools/converters/nnssa/coreml/ssa_converter.py", line 581, in convert
    convert_func(node)
  File "/home/ubuntu/anaconda3/envs/tensorflow2_p36/lib/python3.6/site-packages/coremltools/converters/nnssa/coreml/ssa_converter.py", line 2461, in _convert_binary
    if not _convert_binary_elementwise(node):
  File "/home/ubuntu/anaconda3/envs/tensorflow2_p36/lib/python3.6/site-packages/coremltools/converters/nnssa/coreml/ssa_converter.py", line 2356, in _convert_binary_elementwise
    input_nodes, input_names, input_types = self._get_input_tensors(node)
  File "/home/ubuntu/anaconda3/envs/tensorflow2_p36/lib/python3.6/site-packages/coremltools/converters/nnssa/coreml/ssa_converter.py", line 639, in _get_input_tensors
    self.__compare_propagated_and_inferred_shape(name, input_type)
  File "/home/ubuntu/anaconda3/envs/tensorflow2_p36/lib/python3.6/site-packages/coremltools/converters/nnssa/coreml/ssa_converter.py", line 684, in __compare_propagated_and_inferred_shape
    raise ValueError(mismatch)
ValueError: [SSAConverter] Shape mismatch for model_1/model/dense_layer_21/add: inferred (0, 51) vs. propagated (1, 51).
		</comment>
		<comment id='3' author='danvargg' date='2020-05-09T17:58:52Z'>
		I was able to solve the issue by loading the model old model, re-building the new one (from a function that replicates the architecture), loading the weights, saving it, and converting it (with tfcoreml, which just calls coremltools.converters.tensorflow.convert).
Here's a high level example of the procedure (TensorFlow 2.0.0).
tf.keras.models.load_model(old_model)
new_model = create_model(...)
new_model.set_weights(olde_model.get_weights())
new_model.save(...)
tfcoreml.convert(new_model)
		</comment>
	</comments>
</bug>