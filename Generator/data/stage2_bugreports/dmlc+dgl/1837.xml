<bug id='1837' author='BarclayII' open_date='2020-07-20T15:15:16Z' closed_time='2020-08-18T01:29:06Z'>
	<summary>Number of nodes wrong when batching blocks</summary>
	<description>
&lt;denchmark-h:h2&gt;üêõ Bug&lt;/denchmark-h&gt;

See the following reproduction code
&lt;denchmark-h:h2&gt;To Reproduce&lt;/denchmark-h&gt;

plays_spmat = ssp.coo_matrix(([1, 1, 1, 1], ([0, 1, 2, 1], [0, 0, 1, 1])))
wishes_nx = nx.DiGraph()
wishes_nx.add_nodes_from(['u0', 'u1', 'u2'], bipartite=0)
wishes_nx.add_nodes_from(['g0', 'g1'], bipartite=1)
wishes_nx.add_edge('u0', 'g1', id=0)
wishes_nx.add_edge('u2', 'g0', id=1)

follows_g = dgl.graph([(0, 1), (1, 2)], 'user', 'follows')
plays_g = dgl.bipartite(plays_spmat, 'user', 'plays', 'game')
wishes_g = dgl.bipartite(wishes_nx, 'user', 'wishes', 'game')
develops_g = dgl.bipartite([(0, 0), (1, 1)], 'developer', 'develops', 'game')
g = dgl.hetero_from_relations([follows_g, plays_g, wishes_g, develops_g])
g2 = dgl.hetero_from_relations([follows_g, plays_g, wishes_g, develops_g])

block1 = dgl.to_block(g, {'user': [1, 2], 'game': [0, 1], 'developer': []})
block2 = dgl.to_block(g2, {'user': [1, 2], 'game': [0, 1], 'developer': []})
batched_block = dgl.batch_hetero([block1, block2])
assert block1.number_of_src_nodes('developer') == 2             # passes
assert block2.number_of_src_nodes('developer') == 2             # passes
assert batched_block.number_of_src_nodes('developer') == 4      # fails, = 0
&lt;denchmark-h:h2&gt;Expected behavior&lt;/denchmark-h&gt;

The last test should return pass.
&lt;denchmark-h:h2&gt;Environment&lt;/denchmark-h&gt;


DGL Version (e.g., 1.0): master
Backend Library &amp; Version (e.g., PyTorch 0.4.1, MXNet/Gluon 1.3):
OS (e.g., Linux):
How you installed DGL (conda, pip, source):
Build command you used (if compiling from source):
Python version:
CUDA/cuDNN version (if applicable):
GPU models and configuration (e.g. V100):
Any other relevant information:

	</description>
	<comments>
		<comment id='1' author='BarclayII' date='2020-07-21T01:34:23Z'>
		It seems batching of block is not well tested
		</comment>
		<comment id='2' author='BarclayII' date='2020-08-06T19:20:10Z'>
		I also came across a batching problem, directly with heterographs:
&lt;denchmark-code&gt;g0 = dgl.heterograph({
     ('user', 'plays', 'game'): [(0, 0), (1, 0), (1, 1), (2, 1)],
     }, num_nodes_dict={"foo":1, "user":3, "game":2})
g1 = dgl.heterograph({
     ('user', 'plays', 'game'): [(0, 0), (1, 0), (1, 1), (2, 1)],
     }, num_nodes_dict={"foo": 2, "user":3, "game":2})
gall = dgl.batch_hetero([g0, g1])
print(g0)
print(g1)
print(gall)
&lt;/denchmark-code&gt;

prints:
&lt;denchmark-code&gt;Graph(num_nodes={'foo': 1, 'game': 2, 'user': 3},
      num_edges={('user', 'plays', 'game'): 4},
      metagraph=[('user', 'game')])
Graph(num_nodes={'foo': 2, 'game': 2, 'user': 3},
      num_edges={('user', 'plays', 'game'): 4},
      metagraph=[('user', 'game')])
Graph(num_nodes={'foo': 0, 'game': 4, 'user': 6},
      num_edges={('user', 'plays', 'game'): 8},
      metagraph=[('user', 'game')])
&lt;/denchmark-code&gt;

So it seems that nodes without edges get dropped when batching heterographs
		</comment>
	</comments>
</bug>