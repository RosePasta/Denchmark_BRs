<bug id='1356' author='zheng-da' open_date='2020-03-13T06:20:44Z' closed_time='2020-03-22T08:33:16Z'>
	<summary>weird behavior of edge_ids</summary>
	<description>
&lt;denchmark-h:h2&gt;üêõ Bug&lt;/denchmark-h&gt;

The behavior of edge_ids is different with or without calling is_multigraph before it. If is_multigraph is called before, edge_ids returns a tensor. If not, it returns a tuple of tensors.
import numpy as np
import dgl
from dgl.graph_index import from_scipy_sparse_matrix
from scipy import sparse as spsp

def create_large_graph_index(num_nodes):
    row = np.random.choice(num_nodes, num_nodes * 10)
    col = np.random.choice(num_nodes, num_nodes * 10)
    spm = spsp.coo_matrix((np.ones(len(row)), (row, col)))
    return from_scipy_sparse_matrix(spm, True)

g = dgl.DGLGraph(create_large_graph_index(1000), readonly=True)
src, dst = g.all_edges(form='uv', order='eid')
#print('multigraph:', g.is_multigraph)
orig_eid = g.edge_ids([0, 1, 2, 3], [2, 5, 7, 8])
print(orig_eid)
&lt;denchmark-h:h2&gt;To Reproduce&lt;/denchmark-h&gt;

Steps to reproduce the behavior:





&lt;denchmark-h:h2&gt;Expected behavior&lt;/denchmark-h&gt;

&lt;denchmark-h:h2&gt;Environment&lt;/denchmark-h&gt;


DGL Version (e.g., 1.0):
Backend Library &amp; Version (e.g., PyTorch 0.4.1, MXNet/Gluon 1.3):
OS (e.g., Linux):
How you installed DGL (conda, pip, source):
Build command you used (if compiling from source):
Python version:
CUDA/cuDNN version (if applicable):
GPU models and configuration (e.g. V100):
Any other relevant information:

&lt;denchmark-h:h2&gt;Additional context&lt;/denchmark-h&gt;

	</description>
	<comments>
		<comment id='1' author='zheng-da' date='2020-03-13T06:23:57Z'>
		This is intended: if it is a simple graph we return a single tensor of edge IDs.  Otherwise it will return a triplet of source, destination, and edge IDs.  If you want consistent behaviors, set force_multi to True.
Or maybe you want to have force_multi to be True as default?
		</comment>
	</comments>
</bug>