<bug id='2528' author='noncomputable' open_date='2021-01-13T19:38:41Z' closed_time='2021-01-17T02:32:52Z'>
	<summary>When an ntype is empty, g.add_nodes() overwrites prior features instead of initializing them</summary>
	<description>
&lt;denchmark-h:h2&gt;üêõ Bug&lt;/denchmark-h&gt;

If there are no nodes or edges of a particular type, adding them with g.add_nodes() or g.add_edges() with data will result in the feature schema for that type being erased and overwritten.
&lt;denchmark-h:h2&gt;To Reproduce&lt;/denchmark-h&gt;

Steps to reproduce the behavior:
g = dgl.graph(([], []))
g.ndata["x"] = torch.tensor([])
g.ndata["y"] = torch.tensor([])
g.ndata
&gt; {'x': tensor([]), 'y': torch.tensor([])}
g.add_nodes(1, {'y': torch.tensor([0])})
g.ndata
{'y': tensor([0])
Same thing for edges.
&lt;denchmark-h:h2&gt;Expected behavior&lt;/denchmark-h&gt;

If a graph specifies features for an ntype or etype, even if there are no nodes or edges yet, new nodes and edges added to the graph should initialize those features instead of erasing them.
&lt;denchmark-h:h2&gt;Environment&lt;/denchmark-h&gt;


DGL Version (e.g., 1.0): 0.5.3
Backend Library &amp; Version (e.g., PyTorch 0.4.1, MXNet/Gluon 1.3): PyTorch 1.6.0
How you installed DGL (conda, pip, source): conda
Python version: 3.7

	</description>
	<comments>
	</comments>
</bug>