<bug id='2166' author='violet-sto' open_date='2020-09-09T16:08:49Z' closed_time='2020-09-10T09:41:53Z'>
	<summary>Error when call apply_edges for dec_graph</summary>
	<description>
&lt;denchmark-h:h2&gt;üêõ Bug&lt;/denchmark-h&gt;

When I'm reading the code in user guide's Chapter 5.2, I got error that ''the method shouldn't be called for UnitGraph graph. The relation graph is simply this graph itself.'' when I called apply_edges for dec_graph.
&lt;denchmark-h:h2&gt;To Reproduce&lt;/denchmark-h&gt;


creat a decoder graph

&lt;denchmark-code&gt;dec_graph = hetero_graph['user', :, 'item']
&lt;/denchmark-code&gt;


define a model

&lt;denchmark-code&gt;class Model(nn.Module):  
    def __init__(self, in_features, hidden_features, out_features, rel_names):
        super().__init__()
        self.sage = RGCN(in_features, hidden_features, out_features, rel_names)
        self.pred = HeteroMLPPredictor(out_features, len(rel_names))
    def forward(self, g, x, dec_graph):
        h = self.sage(g, x)
        return self.pred(dec_graph, h)
&lt;/denchmark-code&gt;


forward pass

&lt;denchmark-code&gt;model=Model(10,20,5,hetero_graph.etpyes)
logits = model(hetero_graph, node_features, dec_graph)
&lt;/denchmark-code&gt;

here is the Error Traceback
&lt;denchmark-code&gt;DGLError                                  Traceback (most recent call last)
&lt;ipython-input-22-58fb5a6d1b35&gt; in &lt;module&gt;
      1 opt = torch.optim.Adam(model.parameters())
      2 for epoch in range(10):
----&gt; 3     logits = model(hetero_graph, node_features, dec_graph)
      4     loss = F.cross_entropy(logits, edge_label)
      5     opt.zero_grad()

D:\anaconda\lib\site-packages\torch\nn\modules\module.py in _call_impl(self, *input, **kwargs)
    720             result = self._slow_forward(*input, **kwargs)
    721         else:
--&gt; 722             result = self.forward(*input, **kwargs)
    723         for hook in itertools.chain(
    724                 _global_forward_hooks.values(),

&lt;ipython-input-20-11c8c20b9ec1&gt; in forward(self, g, x, dec_graph)
      6     def forward(self, g, x, dec_graph):
      7         h = self.sage(g, x)
----&gt; 8         return self.pred(dec_graph, h)

D:\anaconda\lib\site-packages\torch\nn\modules\module.py in _call_impl(self, *input, **kwargs)
    720             result = self._slow_forward(*input, **kwargs)
    721         else:
--&gt; 722             result = self.forward(*input, **kwargs)
    723         for hook in itertools.chain(
    724                 _global_forward_hooks.values(),

&lt;ipython-input-19-25eb5ab390c5&gt; in forward(self, graph, h)
     15         # Avoids changing the graph features when exiting the function. However, In-place operations will still reflect to the original graph.
     16             graph.ndata['h'] = h   # assigns 'h' of all node types in one shot
---&gt; 17             graph.apply_edges(self.apply_edges)
     18             return graph.edata['score']

D:\anaconda\lib\site-packages\dgl\heterograph.py in apply_edges(self, func, edges, etype, inplace)
   4054         etid = self.get_etype_id(etype)
   4055         etype = self.canonical_etypes[etid]
-&gt; 4056         g = self if etype is None else self[etype]
   4057         if is_all(edges):
   4058             eid = ALL

D:\anaconda\lib\site-packages\dgl\heterograph.py in __getitem__(self, key)
   1919             etid = self.get_etype_id((srctype, etype, dsttype))
   1920             dtid = self.get_ntype_id_from_dst(dsttype)
-&gt; 1921             new_g = self._graph.get_relation_graph(etid)
   1922 
   1923             if stid == dtid:

D:\anaconda\lib\site-packages\dgl\heterograph_index.py in get_relation_graph(self, etype)
     91             The unitgraph graph.
     92         """
---&gt; 93         return _CAPI_DGLHeteroGetRelationGraph(self, int(etype))
     94 
     95     def flatten_relations(self, etypes):

D:\anaconda\lib\site-packages\dgl\_ffi\_ctypes\function.py in __call__(self, *args)
    188         check_call(_LIB.DGLFuncCall(
    189             self.handle, values, tcodes, ctypes.c_int(num_args),
--&gt; 190             ctypes.byref(ret_val), ctypes.byref(ret_tcode)))
    191         _ = temp_args
    192         _ = args

D:\anaconda\lib\site-packages\dgl\_ffi\base.py in check_call(ret)
     60     """
     61     if ret != 0:
---&gt; 62         raise DGLError(py_str(_LIB.DGLGetLastError()))
     63 
     64 

DGLError: [19:15:55] c:\users\administrator\dgl-0.5\src\graph\./unit_graph.h:61: The method shouldn't be called for UnitGraph graph. The relation graph is simply this graph itself.
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='violet-sto' date='2020-09-10T06:41:54Z'>
		&lt;denchmark-link:https://github.com/BarclayII&gt;@BarclayII&lt;/denchmark-link&gt;
 Is it still encouraged to use slicing for heterographs? At least for the graph chapter we recommended  followed by .
		</comment>
		<comment id='2' author='violet-sto' date='2020-09-10T06:45:32Z'>
		
@BarclayII Is it still encouraged to use slicing for heterographs? At least for the graph chapter we recommended edge_type_subgraph followed by to_homogeneous.

This is kinda different.  We are not expecting a homogeneous graph, but a bipartite graph with all edge types "combined" to one edge type.
		</comment>
		<comment id='3' author='violet-sto' date='2020-09-10T06:54:31Z'>
		

@BarclayII Is it still encouraged to use slicing for heterographs? At least for the graph chapter we recommended edge_type_subgraph followed by to_homogeneous.

This is kinda different. We are not expecting a homogeneous graph, but a bipartite graph with all edge types "combined" to one edge type.

Got it. Thanks.
		</comment>
		<comment id='4' author='violet-sto' date='2020-09-10T07:50:27Z'>
		&lt;denchmark-link:https://github.com/BarclayII&gt;@BarclayII&lt;/denchmark-link&gt;
 Excuse me, I'm willing to know what's wrong with the code in the question. If I construct a new graph with the attributes of dec_graph, it works, What's the difference?
&lt;denchmark-code&gt;graph=dgl.heterograph({('user','click+dislike','item'):dec_graph.edges()})`
graph.edata['_TYPE']=dec_graph.edata['_TYPE']
logits = model(hetero_graph, node_features, graph)
&lt;/denchmark-code&gt;

		</comment>
		<comment id='5' author='violet-sto' date='2020-09-10T09:08:18Z'>
		That's because of a bug in our implementation of g[...] in the C++ backend.  Basically the graph construction of g[...] is implemented in C, which returns a pointer of the wrong type that does not allow further slicing with g[...].  Your code is correct.
		</comment>
		<comment id='6' author='violet-sto' date='2020-09-10T09:42:44Z'>
		The fix will go into 0.5.2.
		</comment>
	</comments>
</bug>