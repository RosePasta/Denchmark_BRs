<bug id='354' author='mufeili' open_date='2019-01-11T17:00:33Z' closed_time='2019-01-12T13:37:32Z'>
	<summary>[Bug in Example] Multi-head features not properly handled</summary>
	<description>
&lt;denchmark-h:h2&gt;üêõ Bug&lt;/denchmark-h&gt;

&lt;denchmark-h:h2&gt;To Reproduce&lt;/denchmark-h&gt;

Steps to reproduce the behavior:

python examples/pytorch/gat/train.py --dataset cora --residual

&lt;denchmark-h:h2&gt;Expected behavior&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;/Users/MufeiLi/Desktop/research/projects/dgl/python/dgl/base.py:17: UserWarning: Initializer is not set. Use zero initializer instead. To suppress this warning, use `set_initializer` to explicitly specify which initializer to use.
  warnings.warn(msg)
Traceback (most recent call last):
  File "/Applications/PyCharm.app/Contents/helpers/pydev/pydevd.py", line 1664, in &lt;module&gt;
    main()
  File "/Applications/PyCharm.app/Contents/helpers/pydev/pydevd.py", line 1658, in main
    globals = debugger.run(setup['file'], None, None, is_module)
  File "/Applications/PyCharm.app/Contents/helpers/pydev/pydevd.py", line 1068, in run
    pydev_imports.execfile(file, globals, locals)  # execute the script
  File "/Applications/PyCharm.app/Contents/helpers/pydev/_pydev_imps/_pydev_execfile.py", line 18, in execfile
    exec(compile(contents+"\n", file, 'exec'), glob, loc)
  File "/Users/MufeiLi/Desktop/research/projects/dgl/examples/pytorch/gat/train.py", line 275, in &lt;module&gt;
    main(args)
  File "/Users/MufeiLi/Desktop/research/projects/dgl/examples/pytorch/gat/train.py", line 216, in main
    logits = model(features)
  File "/Users/MufeiLi/miniconda3/envs/dgl/lib/python3.5/site-packages/torch/nn/modules/module.py", line 489, in __call__
    result = self.forward(*input, **kwargs)
  File "/Users/MufeiLi/Desktop/research/projects/dgl/examples/pytorch/gat/train.py", line 135, in forward
    logits = self.gat_layers[-1](h).sum(1)
  File "/Users/MufeiLi/miniconda3/envs/dgl/lib/python3.5/site-packages/torch/nn/modules/module.py", line 489, in __call__
    result = self.forward(*input, **kwargs)
  File "/Users/MufeiLi/Desktop/research/projects/dgl/examples/pytorch/gat/train.py", line 84, in forward
    ret = self.residual_fc(h) + ret
RuntimeError: The size of tensor a (56) must match the size of tensor b (7) at non-singleton dimension 2
&lt;/denchmark-code&gt;

&lt;denchmark-h:h2&gt;Environment&lt;/denchmark-h&gt;


DGL Version (e.g., 1.0): 0.1.3
Backend Library &amp; Version (e.g., PyTorch 0.4.1, MXNet/Gluon 1.3): PyTorch 1.0.0
OS (e.g., Linux): Mac
How you installed DGL (conda, pip, source): source
Build command you used (if compiling from source): by setting the environment variables
Python version:
CUDA/cuDNN version (if applicable):
GPU models and configuration (e.g. V100):
Any other relevant information:

&lt;denchmark-h:h2&gt;Proposed Fix&lt;/denchmark-h&gt;

Comparing to &lt;denchmark-link:https://github.com/PetarV-/GAT/blob/master/utils/layers.py&gt;the official TensorFlow implementation&lt;/denchmark-link&gt;
, I think there are two differences:

L56, dgl should be self.residual_fc = nn.Linear(in_dim, out_dim, bias=False) according to L30, official
An additional aggregation across heads (concatenation and sum) as in L15, L23, L29, official is missing, which should be placed around L133, L135, PyTorch.

	</description>
	<comments>
	</comments>
</bug>