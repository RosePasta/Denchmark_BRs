<bug id='2135' author='BarclayII' open_date='2020-08-31T09:40:51Z' closed_time='2020-09-03T04:49:00Z'>
	<summary>[Bug] Pickling a subgraph stores the feature of the original graph</summary>
	<description>
&lt;denchmark-h:h2&gt;üêõ Bug&lt;/denchmark-h&gt;

See reproducing code below.
This affects (1) pickling a graph as a file , and (2) multiprocess neighborhood sampling.
&lt;denchmark-h:h2&gt;To Reproduce&lt;/denchmark-h&gt;

import dgl
import torch
import pickle
g = dgl.graph(([], []), num_nodes=10000000)
g.ndata['x'] = torch.randn(10000000, 100)
sg = g.subgraph([0])
with open('a.pkl', 'wb') as f:
    pickle.dump(sg, f)     # Gives a pickle file of 4GB
sg.ndata['x']              # Reads the feature
with open('b.pkl', 'wb') as f:
    pickle.dump(sg, f)     # Gives a pickle file of 3KB
The reason is in the implementation of lazy feature slicing for node and edge features.
&lt;denchmark-h:h2&gt;Expected behavior&lt;/denchmark-h&gt;

Pickle file of sg should take a small amount of space.
	</description>
	<comments>
		<comment id='1' author='BarclayII' date='2020-09-01T06:11:15Z'>
		We cannot simply evaluate the slicing in Column.__getstate__ because that will make the sampled subgraphs always eagerly slice the features due to inter-process communication going through pickle, slowing down execution while consuming more shared memory.
		</comment>
	</comments>
</bug>