<bug id='1036' author='BarclayII' open_date='2019-11-22T10:05:17Z' closed_time='2019-11-29T03:53:30Z'>
	<summary>[Bug] Edges bucketed wrong in group_apply_edges after triggering `g.in_degrees()`</summary>
	<description>
&lt;denchmark-h:h2&gt;üêõ Bug&lt;/denchmark-h&gt;

Apparently the edges being bucketed and sent into UDF of group_apply_edges
See the following test case.
&lt;denchmark-h:h2&gt;To Reproduce&lt;/denchmark-h&gt;

import dgl
import torch
import scipy.sparse as ssp

m = ssp.random(10, 10, 0.2)
g = dgl.DGLGraph(m, readonly=True)
g.ndata['deg'] = g.in_degrees()     # removing this line would pass the test
g.ndata['id'] = torch.arange(g.number_of_nodes())
g.edata['id'] = torch.arange(g.number_of_edges())

# This function checks whether the edge IDs in the bucket indeed match those of the
# inbound edges
def apply(edges):
    w = edges.data['id']
    n_nodes, deg = w.shape

    dst = edges.dst['id'][:, 0]
    eid1 = g.in_edges(dst, 'eid').view(n_nodes, deg).sort(1)[0]
    eid2 = edges.data['id'].sort(1)[0]
    print(dst)
    print(eid1)
    print(eid2)
    assert torch.equal(eid1, eid2)
    return {'id2': w}

print(g.all_edges(order='eid'))
g.group_apply_edges('dst', apply, inplace=True)
&lt;denchmark-h:h2&gt;Expected behavior&lt;/denchmark-h&gt;

The test above should pass.
&lt;denchmark-h:h2&gt;Environment&lt;/denchmark-h&gt;


DGL Version (e.g., 1.0): master
Backend Library &amp; Version (e.g., PyTorch 0.4.1, MXNet/Gluon 1.3):
OS (e.g., Linux):
How you installed DGL (conda, pip, source):
Build command you used (if compiling from source):
Python version:
CUDA/cuDNN version (if applicable):
GPU models and configuration (e.g. V100):
Any other relevant information:

&lt;denchmark-h:h2&gt;Additional context&lt;/denchmark-h&gt;

In &lt;denchmark-link:https://github.com/dmlc/dgl/blob/master/python/dgl/graph.py#L2211&gt;https://github.com/dmlc/dgl/blob/master/python/dgl/graph.py#L2211&lt;/denchmark-link&gt;
, adding  to the  call would solve the problem.  But could anybody explain why this happens only if  is there (before I figure it out myself)?
send() and those in heterographs may also have the same problem.
	</description>
	<comments>
		<comment id='1' author='BarclayII' date='2019-11-22T15:06:22Z'>
		I also curious about why in_degrees() cause the problem.
		</comment>
		<comment id='2' author='BarclayII' date='2019-11-25T14:43:28Z'>
		Maybe we should force g.edges() to return edges in the eid orders
		</comment>
	</comments>
</bug>