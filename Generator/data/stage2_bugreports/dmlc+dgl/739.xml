<bug id='739' author='yzh119' open_date='2019-08-05T11:43:21Z' closed_time='2020-03-05T10:08:10Z'>
	<summary>[Bug] local_var does not correctly handle BatchedDGLGraph</summary>
	<description>
&lt;denchmark-h:h2&gt;üêõ Bug&lt;/denchmark-h&gt;

local_var would create a new DGLGraph object with the same graph structure of the original graph. However, when the graph is a BatchedDGLGraph, local_var would not return a BatchedDGLGraph accordingly. I think for SubGraph there is a similar issue.
&lt;denchmark-h:h2&gt;To Reproduce&lt;/denchmark-h&gt;

&gt;&gt;&gt; import dgl
&gt;&gt;&gt; g = dgl.DGLGraph()
&gt;&gt;&gt; g.add_nodes(5)
&gt;&gt;&gt; bg = dgl.batch([g, g, g])
&gt;&gt;&gt; type(bg)
&lt;class 'dgl.batched_graph.BatchedDGLGraph'&gt;
&gt;&gt;&gt; bg = bg.local_var()
&gt;&gt;&gt; type(bg)
&lt;class 'dgl.graph.DGLGraph'&gt;
&lt;denchmark-h:h2&gt;Expected behavior&lt;/denchmark-h&gt;

local_var should return an object of the same class as the caller.
&lt;denchmark-h:h2&gt;Environment&lt;/denchmark-h&gt;


DGL Version (e.g., 1.0): 0.3
Backend Library &amp; Version (e.g., PyTorch 0.4.1, MXNet/Gluon 1.3): 1.1
OS (e.g., Linux): mac
How you installed DGL (conda, pip, source): source
Build command you used (if compiling from source): USE_CUDA=OFF
Python version: 3.7
CUDA/cuDNN version (if applicable):
GPU models and configuration (e.g. V100):
Any other relevant information:

&lt;denchmark-h:h2&gt;Additional context&lt;/denchmark-h&gt;

local_scope does not have such problem because it does not create a new object.
	</description>
	<comments>
		<comment id='1' author='yzh119' date='2019-08-06T22:57:16Z'>
		Yeah, that's a problem. In general, I blame this to having the extra BatchedGraph and Subgraph classes. In tensor world, there is one data structure Tensor. Easy to understand, low learning curve. By contrast, we have so many different classes. This raises issues in many cases. For example, many operations need to check the input type and use different routines (such as in glob.py). My question: could we merge these classes as one and only one DGLGraph? It can maintain some extra members such as the num_nodes and num_edges tensors (if there is only one graph, the tensor is [0]), and also the mapping (none if the graph is not a subgraph). What do you guys think? We could write a RFC to discuss this more.
		</comment>
		<comment id='2' author='yzh119' date='2019-08-07T05:29:43Z'>
		Yeah, I think to have one class will make the world a better place.
		</comment>
		<comment id='3' author='yzh119' date='2019-08-07T06:28:19Z'>
		I think it's fine to merge Subgraph with DGLGraph. And DGLGraph can be considered as a mutable BatchedDGLGraph with batch size 1. So DGLGraph will be a subclass of BatchedDGLGraph? (not sure, seems a bit weird)
However, my only concern is these designs should be encapsulated within the implementation, and should not break the intuition of the API, i.e. we don't want to educate user DGLGraph is a BatchedDGLGraph with batch size 1.
		</comment>
		<comment id='4' author='yzh119' date='2019-08-07T08:00:58Z'>
		
we don't want to educate user DGLGraph is a BatchedDGLGraph with batch size 1.

That's a legit concern. Another way is to return these auxiliary data structure to the user so we don't maintain it. In such way, the operations on the BatchedGraph (such as the ones in glob.py) need to be changed to take into these extra arguments.
		</comment>
		<comment id='5' author='yzh119' date='2019-08-07T09:00:42Z'>
		I think can still let DGL hold the auxiliary data structure, and provide a downcast mechanism when needed. Hold auxiliary data sometimes is painful, especially when you want to use them in different scope/function/files.
		</comment>
		<comment id='6' author='yzh119' date='2020-02-27T05:53:14Z'>
		I guess this issue is still on progress. Does anyone know whether it is actually updated to return dgl.BatchedDGLgraph when input is dgl.BatchedDGLgraph?
		</comment>
		<comment id='7' author='yzh119' date='2020-02-27T08:44:15Z'>
		Hi &lt;denchmark-link:https://github.com/Junyoungpark&gt;@Junyoungpark&lt;/denchmark-link&gt;
 I'm gonna fix it soon, I apologize for being lazy.
The  class would be deprecated, we would introduce a  field for all 's and  is a special case where  is greater than one.
		</comment>
		<comment id='8' author='yzh119' date='2020-03-05T10:08:10Z'>
		&lt;denchmark-link:https://github.com/Junyoungpark&gt;@Junyoungpark&lt;/denchmark-link&gt;
 I think the problem has been fixed in &lt;denchmark-link:https://github.com/dmlc/dgl/pull/1216&gt;#1216&lt;/denchmark-link&gt;
 . You can try using the latest version of DGL by install from source code in the master branch and see if it works.
		</comment>
	</comments>
</bug>