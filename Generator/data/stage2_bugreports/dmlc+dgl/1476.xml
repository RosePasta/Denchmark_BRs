<bug id='1476' author='jermainewang' open_date='2020-04-27T08:24:04Z' closed_time='2020-09-21T04:45:47Z'>
	<summary>Number of edges mismatches after add_edges with empty list</summary>
	<description>
&lt;denchmark-h:h2&gt;üêõ Bug&lt;/denchmark-h&gt;

If an empty list is provided to DGLGraph.add_edges, the graph correctly ignores such request but the frame to store edge data got one extra row, causing problem when assigning edge data.
&lt;denchmark-h:h2&gt;To Reproduce&lt;/denchmark-h&gt;

Minimal reproducible example:
import dgl
import torch

g = dgl.DGLGraph()
g.add_nodes(10)
g.add_edges(0, [1, 2, 3])
g.add_edges(1, [])
print(g)
g.edata['h'] = torch.randn((g.number_of_edges(), 5))
&lt;denchmark-h:h2&gt;Expected behavior&lt;/denchmark-h&gt;

Shall not raise error.
&lt;denchmark-h:h2&gt;Environment&lt;/denchmark-h&gt;


DGL Version (e.g., 1.0): 0.4.3.post2
Backend Library &amp; Version (e.g., PyTorch 0.4.1, MXNet/Gluon 1.3): PyTorch
OS (e.g., Linux): Linux
How you installed DGL (conda, pip, source): pip
Build command you used (if compiling from source):
Python version: 3.7
CUDA/cuDNN version (if applicable):
GPU models and configuration (e.g. V100):
Any other relevant information:

	</description>
	<comments>
		<comment id='1' author='jermainewang' date='2020-09-21T04:45:47Z'>
		The bug has been fixed in 0.5.
		</comment>
	</comments>
</bug>