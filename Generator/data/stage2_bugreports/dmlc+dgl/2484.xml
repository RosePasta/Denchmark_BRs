<bug id='2484' author='bkong999' open_date='2021-01-04T03:31:19Z' closed_time='2021-01-06T09:18:37Z'>
	<summary>dgl.prop_nodes_topo Message Passing Error</summary>
	<description>
&lt;denchmark-h:h2&gt;üêõ Bug&lt;/denchmark-h&gt;

Clearly, there is something wrong with the message passing in the following example, either because source nodes' features are passed to the wrong dst nodes or the final updated features are written to different nodes.
Basically, I use this function to aggregate the non-negative predictions (or sum the upstreaming features including the current node's feature) from the root to the leaves in a tree. As the graph is tree-structured and the predictions are non-negative, the aggregated value should monotonically increase from the root to the leaves. The following shows the result of an 8-path tree using DGL v0.4.3. x-axis means the indices in each path. y-axis is the aggregated value.
&lt;denchmark-link:https://user-images.githubusercontent.com/61814189/103498209-ca86eb80-4df8-11eb-8a4b-5cae38ac4860.png&gt;&lt;/denchmark-link&gt;

However, when I switched from v0.4.3 to v0.5.3, the aggregated values are not monotonically increasing anymore. The following shows the result using DGL v0.5.3. Apparently, there is something wrong with this function. Tried both the built-in message passing functions and writing by myself, the results are inconsistent for these versions.
&lt;denchmark-link:https://user-images.githubusercontent.com/61814189/103498273-002bd480-4df9-11eb-8573-a8ad60098dd6.png&gt;&lt;/denchmark-link&gt;

&lt;denchmark-h:h2&gt;To Reproduce&lt;/denchmark-h&gt;

Steps to reproduce the behavior:

Create a large tree-structured graph (the nodes have either one or zero in degrees).
Write non-negative feature into the node data.
Propagate the messages among the graph as follows:

&lt;denchmark-code&gt;dgl.prop_nodes_topo(
      graph,
      message_func=dgl.function.u_add_v('data', 'data', 'data'),
      reduce_func=dgl.function.sum('data', 'data'))
&lt;/denchmark-code&gt;

The synthetic data and script to reproduce this issue can be found in the attached zip file.
&lt;denchmark-link:https://github.com/dmlc/dgl/files/5762879/reproduce.zip&gt;reproduce.zip&lt;/denchmark-link&gt;

&lt;denchmark-h:h2&gt;Expected behavior&lt;/denchmark-h&gt;

the aggregated values should be monotonically increasing from the root to the leaves.
&lt;denchmark-h:h2&gt;Environment&lt;/denchmark-h&gt;


DGL Version: 0.5.3
Backend Library &amp; Version: PyTorch 1.7.0
OS (Linux): Linux
How you installed DGL (conda): conda install -c dglteam dgl-cuda10.1
Python version: 3.7.4
CUDA/cuDNN version (if applicable): 10.1
GPU models and configuration (e.g. V100): Tesla P40
Any other relevant information: The synthetic data and script to reproduce this issue can be found in the zip file.

	</description>
	<comments>
		<comment id='1' author='bkong999' date='2021-01-06T07:15:18Z'>
		I guess you need a large enough tree. I have already attached the data and
the script to reproduce it in the issue:
&lt;denchmark-link:https://github.com/dmlc/dgl/files/5762879/reproduce.zip&gt;https://github.com/dmlc/dgl/files/5762879/reproduce.zip&lt;/denchmark-link&gt;


Best
&lt;denchmark-link:#&gt;‚Ä¶&lt;/denchmark-link&gt;


On Tue, Jan 5, 2021 at 11:07 PM Quan (Andy) Gan ***@***.***&gt; wrote:
 Seems to work for me. Although I'm not sure if it matches your case:

 import dglimport torchg = dgl.graph(([0,0,1,1,2,2,3,3,4,4,5,5,6,6],[1,2,3,4,5,6,7,8,9,10,11,12,13,14]))x = torch.rand(15)g.ndata['x'] = xdgl.prop_nodes_topo(g, dgl.function.u_add_v('x', 'x', 'm'), dgl.function.sum('m', 'x'))print(g.ndata['x'])for i in range(1, 15):
     assert g.ndata['x'][i] &gt; g.ndata['x'][(i - 1) // 2]

 Could you give an example code so that I can reproduce your problem?
 Thanks.

 ‚Äî
 You are receiving this because you authored the thread.
 Reply to this email directly, view it on GitHub
 &lt;#2484 (comment)&gt;, or
 unsubscribe
 &lt;https://github.com/notifications/unsubscribe-auth/AOXTLLMP3JXG53A2TU5AANTSYQD4LANCNFSM4VSNTHJA&gt;
 .



		</comment>
		<comment id='2' author='bkong999' date='2021-01-06T07:26:32Z'>
		Yeah I noticed that.  Bug confirmed.  Seems that there is a mistake in message passing graph generation.
EDIT: a minimal example reproducing the same issue with pull:
g = dgl.graph(([0,1,2],[1,2,3]))
x = torch.rand(4)
x
# tensor([0.4403, 0.7392, 0.1357, 0.9197])

g.ndata['x'] = x
g.pull([1, 2], dgl.function.u_add_v('x', 'x', 'm'), dgl.function.sum('m', 'x'))
g.ndata['x']
# tensor([0.4403, 1.1795, 0.8749, 0.9197])   &lt;-- right

g.ndata['x'] = x
g.pull([2, 1], dgl.function.u_add_v('x', 'x', 'm'), dgl.function.sum('m', 'x'))
g.ndata['x']
# tensor([0.4403, 0.8749, 1.1795, 0.9197])   &lt;-- wrong
		</comment>
		<comment id='3' author='bkong999' date='2021-01-06T09:19:40Z'>
		Should be fixed and ready in the next nightly build.  Please feel free to reopen if it does not work for you.
		</comment>
	</comments>
</bug>