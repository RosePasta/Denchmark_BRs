<bug id='245' author='acarl005' open_date='2019-08-22T14:41:15Z' closed_time='2020-02-23T00:01:21Z'>
	<summary>Lots of Swap memory being used.</summary>
	<description>
Describe the bug
A lot of swap memory being used when calling profile_report, killing the performance. The method never finishes running. It starts off okay, but after waiting a while the memory usage increases and starts using several GB of swap once physical memory runs out. My dataframe only consumes about 3GB so I should have enough physical memory.
I'm on MacOS with 32GB memory. Here is the output of the vm_stat command:
&lt;denchmark-code&gt;Mach Virtual Memory Statistics: (page size of 4096 bytes)
Pages free:                                3863.
Pages active:                           3000736.
Pages inactive:                         2997470.
Pages speculative:                         1788.
Pages throttled:                              0.
Pages wired down:                        821945.
Pages purgeable:                         129215.
"Translation faults":                 271893566.
Pages copy-on-write:                    6226790.
Pages zero filled:                    144764110.
Pages reactivated:                     30710011.
Pages purged:                            307657.
File-backed pages:                       308333.
Anonymous pages:                        5691661.
Pages stored in compressor:             6917563.
Pages occupied by compressor:           1561834.
Decompressions:                        17006094.
Compressions:                          32959299.
Pageins:                                7909687.
Pageouts:                                 67065.
Swapins:                                5660534.
Swapouts:                              10134638.
&lt;/denchmark-code&gt;

To Reproduce
I have a dataframe with 32 columns and 12,849,862 rows. It takes up about 3GB of memory.
data.info()
&lt;denchmark-code&gt;RangeIndex: 12849862 entries, 0 to 12849861
Data columns (total 32 columns):
DataSourceID                   object
ClientID                       object
LocationID                     object
CreationDateKey                datetime64[ns]
ChargeCount                    int64
PqrsChargeCount                int64
TotalRelativeValueUnits        float64
Charges                        float64
ProcedureId                    object
PrimaryDiagnosisKey            int64
DiagnosisCode                  object
PrimaryCarrierKey              int64
CarrierID                      object
CarrierName                    object
CurrentCarrierKey              int64
DimChargeStatusKey             int64
DimCampaignKey                 int64
DateOfServiceDate              datetime64[ns]
LoadDate                       datetime64[ns]
ToBeCodedDate                  datetime64[ns]
CodedDate                      datetime64[ns]
CreationDate                   datetime64[ns]
PrimaryFileDate                datetime64[ns]
FirstPaymentDate               datetime64[ns]
GuarantorResponsibilityDate    datetime64[ns]
CloseDate                      datetime64[ns]
WorkfileCreationDate           datetime64[ns]
DimWorkfileReasonKey           int64
Workfilereason                 object
PrimaryDenialReasonKey         int64
DenialReason                   object
DenialReasonCode               object
dtypes: datetime64[ns](11), float64(2), int64(9), object(10)
memory usage: 3.1+ GB
&lt;/denchmark-code&gt;

I tried running profile_report with the most frugal config, but to no avail.
report = data.profile_report(
    check_correlation_pearson=False,
    correlations={
        'pearson': False,
        'spearman': False,
        'kendall': False,
        'phi_k': False,
        'cramers': False,
        'recoded': False
    },
    plot={'histogram':{'bayesian_blocks_bins': False}},
    missing_diagrams={
        'bar': True,
        'matrix': False,
        'heatmap': False,
        'dendrogram': False
    },
    check_recoded=False
)
Version information:
Version information is essential in reproducing and resolving bugs. Please report:

Python version: Python 3.7.3
Environment: Local Jupyter Lab
pip: If you are using pip, run pip freeze in your environment and report the results. The list of packages can be rather long, you can use the snippet below to collapse the output.

Click to expand Version information

appnope==0.1.0
asn1crypto==0.24.0
astroid==2.2.5
astropy==3.2.1
atomicwrites==1.3.0
attrs==19.1.0
backcall==0.1.0
bleach==3.1.0
cachetools==3.1.1
certifi==2019.6.16
cffi==1.12.3
chardet==3.0.4
confuse==1.0.0
convertdate==2.1.3
cryptography==2.7
cycler==0.10.0
Cython==0.29.13
decorator==4.4.0
defusedxml==0.6.0
entrypoints==0.3
enum34==1.1.6
ephem==3.7.6.0
fbprophet==0.5
fsspec==0.4.1
gcsfs==0.3.0
google-auth==1.6.3
google-auth-oauthlib==0.4.0
graphviz==0.10.1
holidays==0.9.11
htmlmin==0.1.12
idna==2.8
importlib-metadata==0.18
ipykernel==5.1.2
ipython==7.7.0
ipython-genutils==0.2.0
isort==4.3.21
jedi==0.14.1
Jinja2==2.10.1
json5==0.8.5
jsonschema==3.0.2
jupyter-client==5.3.1
jupyter-core==4.5.0
jupyter-http-over-ws==0.0.6
jupyterlab==1.0.4
jupyterlab-server==1.0.0
kiwisolver==1.1.0
lazy-object-proxy==1.4.1
llvmlite==0.29.0
lunardate==0.2.0
MarkupSafe==1.1.1
matplotlib==3.1.1
mccabe==0.6.1
missingno==0.4.2
mistune==0.8.4
mkl-fft==1.0.12
mkl-random==1.0.2
mkl-service==2.2.0
more-itertools==7.2.0
nbconvert==5.6.0
nbformat==4.4.0
notebook==6.0.0
numba==0.45.1
numpy==1.16.4
oauthlib==3.1.0
packaging==19.0
pandas==0.25.0
pandas-profiling==2.3.0
pandocfilters==1.4.2
parso==0.5.1
patsy==0.5.1
pexpect==4.7.0
phik==0.9.8
pickleshare==0.7.5
pip-autoremove==0.9.1
plotly==4.1.0
pluggy==0.12.0
prometheus-client==0.7.1
prompt-toolkit==2.0.9
protobuf==3.7.1
psutil==5.6.3
ptyprocess==0.6.0
py==1.8.0
pyasn1==0.4.6
pyasn1-modules==0.2.6
pycparser==2.19
Pygments==2.4.2
pylint==2.3.1
pyOpenSSL==19.0.0
pyparsing==2.4.2
pyrsistent==0.15.4
PySocks==1.7.0
pystan==2.19.0.0
pytest==5.1.0
pytest-arraydiff==0.3
pytest-astropy==0.5.0
pytest-doctestplus==0.3.0
pytest-openfiles==0.4.0
pytest-pylint==0.14.1
pytest-remotedata==0.3.1
pytest-runner==5.1
python-dateutil==2.8.0
pytz==2019.1
PyYAML==5.1.2
pyzmq==18.1.0
requests==2.22.0
requests-oauthlib==1.2.0
retrying==1.3.3
rpy2==2.9.4
rsa==4.0
scipy==1.3.1
seaborn==0.9.0
Send2Trash==1.5.0
setuptools-git==1.2
simplegeneric==0.8.1
six==1.12.0
statsmodels==0.10.1
terminado==0.8.2
testpath==0.4.2
tornado==6.0.3
traitlets==4.3.2
tzlocal==2.0.0
urllib3==1.25.3
wcwidth==0.1.7
webencodings==0.5.1
wrapt==1.11.2
zipp==0.5.2



Additional context
Add any other context about the problem here.
	</description>
	<comments>
		<comment id='1' author='acarl005' date='2020-02-15T00:01:34Z'>
		Stale issue
		</comment>
	</comments>
</bug>