<bug id='500' author='pybokeh' open_date='2020-06-15T15:24:00Z' closed_time='2020-09-02T21:51:34Z'>
	<summary>Index Out of Bounds Error when explicitly setting data type of non-numeric columns</summary>
	<description>
Platform: Windows 10 16GB RAM
Python Version 3.8.3 installed with Miniconda3
numpy==1.18.5
pandas==1.0.4
pandas-profiling==2.8.0
While in the process of generating the report, it crashes and reports an IndexError per stack trace:
IndexError: index 4 is out of bounds for axis 0 with size 1:
&lt;denchmark-code&gt;---------------------------------------------------------------------------
IndexError                                Traceback (most recent call last)
&lt;ipython-input-9-f89cf0f37c1f&gt; in &lt;module&gt;
----&gt; 1 naps_gpcs_profile.to_widgets()

D:\Miniconda3\envs\packaging_dev\lib\site-packages\pandas_profiling\profile_report.py in to_widgets(self)
    391         from IPython.core.display import display
    392 
--&gt; 393         display(self.widgets)
    394 
    395     def _repr_html_(self):

D:\Miniconda3\envs\packaging_dev\lib\site-packages\pandas_profiling\profile_report.py in widgets(self)
    178     def widgets(self):
    179         if self._widgets is None:
--&gt; 180             self._widgets = self._render_widgets()
    181         return self._widgets
    182 

D:\Miniconda3\envs\packaging_dev\lib\site-packages\pandas_profiling\profile_report.py in _render_widgets(self)
    301         from pandas_profiling.report.presentation.flavours import WidgetReport
    302 
--&gt; 303         report = self.report
    304 
    305         disable_progress_bar = not config["progress_bar"].get(bool)

D:\Miniconda3\envs\packaging_dev\lib\site-packages\pandas_profiling\profile_report.py in report(self)
    160     def report(self):
    161         if self._report is None:
--&gt; 162             self._report = get_report_structure(self.description_set)
    163         return self._report
    164 

D:\Miniconda3\envs\packaging_dev\lib\site-packages\pandas_profiling\profile_report.py in description_set(self)
    141     def description_set(self):
    142         if self._description_set is None:
--&gt; 143             self._description_set = describe_df(self.title, self.df)
    144         return self._description_set
    145 

D:\Miniconda3\envs\packaging_dev\lib\site-packages\pandas_profiling\model\describe.py in describe(title, df)
     61         total=number_of_tasks, desc="Summarize dataset", disable=disable_progress_bar
     62     ) as pbar:
---&gt; 63         series_description = get_series_descriptions(df, pbar)
     64 
     65         pbar.set_postfix_str("Get variable types")

D:\Miniconda3\envs\packaging_dev\lib\site-packages\pandas_profiling\model\summary.py in get_series_descriptions(df, pbar)
    470         # TODO: use `Pool` for Linux-based systems
    471         with multiprocessing.pool.ThreadPool(pool_size) as executor:
--&gt; 472             for i, (column, description) in enumerate(
    473                 executor.imap_unordered(multiprocess_1d, args)
    474             ):

D:\Miniconda3\envs\packaging_dev\lib\multiprocessing\pool.py in next(self, timeout)
    866         if success:
    867             return value
--&gt; 868         raise value
    869 
    870     __next__ = next                    # XXX

D:\Miniconda3\envs\packaging_dev\lib\multiprocessing\pool.py in worker(inqueue, outqueue, initializer, initargs, maxtasks, wrap_exception)
    123         job, i, func, args, kwds = task
    124         try:
--&gt; 125             result = (True, func(*args, **kwds))
    126         except Exception as e:
    127             if wrap_exception and func is not _helper_reraises_exception:

D:\Miniconda3\envs\packaging_dev\lib\site-packages\pandas_profiling\model\summary.py in multiprocess_1d(args)
    448         """
    449         column, series = args
--&gt; 450         return column, describe_1d(series)
    451 
    452     # Multiprocessing of Describe 1D for each column

D:\Miniconda3\envs\packaging_dev\lib\site-packages\pandas_profiling\model\summary.py in describe_1d(series)
    391         # Make sure pd.NA is not in the series
    392 
--&gt; 393     series.fillna(np.nan, inplace=True)
    394 
    395     # Infer variable types

D:\Miniconda3\envs\packaging_dev\lib\site-packages\pandas\core\series.py in fillna(self, value, method, axis, inplace, limit, downcast)
   4151         downcast=None,
   4152     ) -&gt; Optional["Series"]:
-&gt; 4153         return super().fillna(
   4154             value=value,
   4155             method=method,

D:\Miniconda3\envs\packaging_dev\lib\site-packages\pandas\core\generic.py in fillna(self, value, method, axis, inplace, limit, downcast)
   6243 
   6244         if inplace:
-&gt; 6245             self._update_inplace(new_data)
   6246             return None
   6247         else:

D:\Miniconda3\envs\packaging_dev\lib\site-packages\pandas\core\series.py in _update_inplace(self, result, **kwargs)
    409     def _update_inplace(self, result, **kwargs):
    410         # we want to call the generic version and not the IndexOpsMixin
--&gt; 411         return generic.NDFrame._update_inplace(self, result, **kwargs)
    412 
    413     # ndarray compatibility

D:\Miniconda3\envs\packaging_dev\lib\site-packages\pandas\core\generic.py in _update_inplace(self, result, verify_is_copy)
   4011         self._clear_item_cache()
   4012         self._data = getattr(result, "_data", result)
-&gt; 4013         self._maybe_update_cacher(verify_is_copy=verify_is_copy)
   4014 
   4015     def add_prefix(self: FrameOrSeries, prefix: str) -&gt; FrameOrSeries:

D:\Miniconda3\envs\packaging_dev\lib\site-packages\pandas\core\generic.py in _maybe_update_cacher(self, clear, verify_is_copy)
   3280                 #  case where it will raise.  (Uh, not clear why)
   3281                 try:
-&gt; 3282                     ref._maybe_cache_changed(cacher[0], self)
   3283                 except AssertionError:
   3284                     # ref._data.setitem can raise

D:\Miniconda3\envs\packaging_dev\lib\site-packages\pandas\core\generic.py in _maybe_cache_changed(self, item, value)
   3239         """The object has called back to us saying maybe it has changed.
   3240         """
-&gt; 3241         self._data.set(item, value)
   3242 
   3243     @property

D:\Miniconda3\envs\packaging_dev\lib\site-packages\pandas\core\internals\managers.py in set(self, item, value)
   1090                 blk.set(blk_locs, value_getitem(val_locs))
   1091             else:
-&gt; 1092                 unfit_mgr_locs.append(blk.mgr_locs.as_array[blk_locs])
   1093                 unfit_val_locs.append(val_locs)
   1094 

IndexError: index 4 is out of bounds for axis 0 with size 1
&lt;/denchmark-code&gt;

I apologize, I can't provide the actual data set as it is company info, but I can provide the output when invoking the df.info() method:
&lt;denchmark-code&gt;&lt;class 'pandas.core.frame.DataFrame'&gt;
RangeIndex: 4150 entries, 0 to 4149
Data columns (total 32 columns):
 #   Column              Non-Null Count  Dtype         
---  ------              --------------  -----         
 0   RCMID               4150 non-null   object        
 1   PACK-RANK           4150 non-null   object        
 2   PACK-TYPE           4150 non-null   object        
 3   STANDARD-CONTAINER  4150 non-null   int64         
 4   PLANT-CD            4150 non-null   object        
 5   SUPP-CD             4150 non-null   category      
 6   SUPP-LOC            4150 non-null   category      
 7   PART-NO             4150 non-null   object        
 8   CNTNR-ID            4150 non-null   object        
 9   CNTNR-DESC          4150 non-null   object        
 10  CNTNR-LENGTH-INCH   4078 non-null   float64       
 11  CNTNR-WIDTH-INCH    4078 non-null   float64       
 12  CNTNR-HEIGHT-INCH   4078 non-null   float64       
 13  CNTNR-WEIGHT-LBS    4078 non-null   float64       
 14  PALLET-TYPE         2977 non-null   object        
 15  PALLET-DESC         4150 non-null   object        
 16  EFCT-DT             4150 non-null   datetime64[ns]
 17  NUM-CONT-PER-PLT    4150 non-null   int64         
 18  QTY-PER-CNTNR       4150 non-null   int64         
 19  PUR-UNIT-QTY        4150 non-null   int64         
 20  RTAB-TOTE-FLAG      4150 non-null   int64         
 21  RECORD-STATUS       3617 non-null   float64       
 22  OUTER-PCK-LEN-INS   3763 non-null   float64       
 23  OUTER-PCK-WID-INS   3763 non-null   float64       
 24  OUTER-PCK-HGHT-INS  3763 non-null   float64       
 25  MAX-PALLET-QTY      2375 non-null   float64       
 26  PALLET-TRLR-STACK   4150 non-null   int64         
 27  OVRALL-PCK-WT-LBS   3763 non-null   float64       
 28  EMP-PALLET-WT-LBS   3658 non-null   float64       
 29  PART-WT-LBS         4009 non-null   float64       
 30  DUNNAGE-WT-LBS      3718 non-null   float64       
 31  PACK-COST           3827 non-null   float64       
dtypes: category(2), datetime64[ns](1), float64(14), int64(6), object(9)
memory usage: 997.4+ KB
&lt;/denchmark-code&gt;

How to Duplicate Problem:
I did have to override or provide specific data types to 2 of the columns, namely: SUPP-CD as 'category' type and SUPP-LOC as 'category' type because they have leading zeros.  Otherwise, pandas will recognize them as numeric columns, which I don't want.
On a different attempt, I assigned SUPP-CD as 'string' data type and get a different error:
IndexError: tuple index out of range:
&lt;denchmark-code&gt;---------------------------------------------------------------------------
IndexError                                Traceback (most recent call last)
&lt;ipython-input-5-f89cf0f37c1f&gt; in &lt;module&gt;
----&gt; 1 naps_gpcs_profile.to_widgets()

D:\Miniconda3\envs\packaging_dev\lib\site-packages\pandas_profiling\profile_report.py in to_widgets(self)
    391         from IPython.core.display import display
    392 
--&gt; 393         display(self.widgets)
    394 
    395     def _repr_html_(self):

D:\Miniconda3\envs\packaging_dev\lib\site-packages\pandas_profiling\profile_report.py in widgets(self)
    178     def widgets(self):
    179         if self._widgets is None:
--&gt; 180             self._widgets = self._render_widgets()
    181         return self._widgets
    182 

D:\Miniconda3\envs\packaging_dev\lib\site-packages\pandas_profiling\profile_report.py in _render_widgets(self)
    301         from pandas_profiling.report.presentation.flavours import WidgetReport
    302 
--&gt; 303         report = self.report
    304 
    305         disable_progress_bar = not config["progress_bar"].get(bool)

D:\Miniconda3\envs\packaging_dev\lib\site-packages\pandas_profiling\profile_report.py in report(self)
    160     def report(self):
    161         if self._report is None:
--&gt; 162             self._report = get_report_structure(self.description_set)
    163         return self._report
    164 

D:\Miniconda3\envs\packaging_dev\lib\site-packages\pandas_profiling\profile_report.py in description_set(self)
    141     def description_set(self):
    142         if self._description_set is None:
--&gt; 143             self._description_set = describe_df(self.title, self.df)
    144         return self._description_set
    145 

D:\Miniconda3\envs\packaging_dev\lib\site-packages\pandas_profiling\model\describe.py in describe(title, df)
     61         total=number_of_tasks, desc="Summarize dataset", disable=disable_progress_bar
     62     ) as pbar:
---&gt; 63         series_description = get_series_descriptions(df, pbar)
     64 
     65         pbar.set_postfix_str("Get variable types")

D:\Miniconda3\envs\packaging_dev\lib\site-packages\pandas_profiling\model\summary.py in get_series_descriptions(df, pbar)
    470         # TODO: use `Pool` for Linux-based systems
    471         with multiprocessing.pool.ThreadPool(pool_size) as executor:
--&gt; 472             for i, (column, description) in enumerate(
    473                 executor.imap_unordered(multiprocess_1d, args)
    474             ):

D:\Miniconda3\envs\packaging_dev\lib\multiprocessing\pool.py in next(self, timeout)
    866         if success:
    867             return value
--&gt; 868         raise value
    869 
    870     __next__ = next                    # XXX

D:\Miniconda3\envs\packaging_dev\lib\multiprocessing\pool.py in worker(inqueue, outqueue, initializer, initargs, maxtasks, wrap_exception)
    123         job, i, func, args, kwds = task
    124         try:
--&gt; 125             result = (True, func(*args, **kwds))
    126         except Exception as e:
    127             if wrap_exception and func is not _helper_reraises_exception:

D:\Miniconda3\envs\packaging_dev\lib\site-packages\pandas_profiling\model\summary.py in multiprocess_1d(args)
    448         """
    449         column, series = args
--&gt; 450         return column, describe_1d(series)
    451 
    452     # Multiprocessing of Describe 1D for each column

D:\Miniconda3\envs\packaging_dev\lib\site-packages\pandas_profiling\model\summary.py in describe_1d(series)
    391         # Make sure pd.NA is not in the series
    392 
--&gt; 393     series.fillna(np.nan, inplace=True)
    394 
    395     # Infer variable types

D:\Miniconda3\envs\packaging_dev\lib\site-packages\pandas\core\series.py in fillna(self, value, method, axis, inplace, limit, downcast)
   4151         downcast=None,
   4152     ) -&gt; Optional["Series"]:
-&gt; 4153         return super().fillna(
   4154             value=value,
   4155             method=method,

D:\Miniconda3\envs\packaging_dev\lib\site-packages\pandas\core\generic.py in fillna(self, value, method, axis, inplace, limit, downcast)
   6243 
   6244         if inplace:
-&gt; 6245             self._update_inplace(new_data)
   6246             return None
   6247         else:

D:\Miniconda3\envs\packaging_dev\lib\site-packages\pandas\core\series.py in _update_inplace(self, result, **kwargs)
    409     def _update_inplace(self, result, **kwargs):
    410         # we want to call the generic version and not the IndexOpsMixin
--&gt; 411         return generic.NDFrame._update_inplace(self, result, **kwargs)
    412 
    413     # ndarray compatibility

D:\Miniconda3\envs\packaging_dev\lib\site-packages\pandas\core\generic.py in _update_inplace(self, result, verify_is_copy)
   4011         self._clear_item_cache()
   4012         self._data = getattr(result, "_data", result)
-&gt; 4013         self._maybe_update_cacher(verify_is_copy=verify_is_copy)
   4014 
   4015     def add_prefix(self: FrameOrSeries, prefix: str) -&gt; FrameOrSeries:

D:\Miniconda3\envs\packaging_dev\lib\site-packages\pandas\core\generic.py in _maybe_update_cacher(self, clear, verify_is_copy)
   3280                 #  case where it will raise.  (Uh, not clear why)
   3281                 try:
-&gt; 3282                     ref._maybe_cache_changed(cacher[0], self)
   3283                 except AssertionError:
   3284                     # ref._data.setitem can raise

D:\Miniconda3\envs\packaging_dev\lib\site-packages\pandas\core\generic.py in _maybe_cache_changed(self, item, value)
   3239         """The object has called back to us saying maybe it has changed.
   3240         """
-&gt; 3241         self._data.set(item, value)
   3242 
   3243     @property

D:\Miniconda3\envs\packaging_dev\lib\site-packages\pandas\core\internals\managers.py in set(self, item, value)
   1085         removed_blknos = []
   1086         for blkno, val_locs in libinternals.get_blkno_placements(blknos, group=True):
-&gt; 1087             blk = self.blocks[blkno]
   1088             blk_locs = blklocs[val_locs.indexer]
   1089             if blk.should_store(value):

IndexError: tuple index out of range
&lt;/denchmark-code&gt;

Furthermore, if I restart my jupyter server or restart the kernel, then re-run the notebook, the report will generate fine most of the time (this does not always work).  So it seems like it could be a CPU or memory resource issue although, when I view my Windows task manager, my memory isn't maxed it, it is the CPU that maxes out.
However, if I don't specify data types, the non-numeric columns' data type become 'object', I do not get errors and the report generates fine pretty much all the time.  The errors typically occurs if I explicitly assign data types to non-numeric columns.  Not so with numeric data types.  I can change the data types for numeric columns to my heart's content and the reports will generate fine.  For example, going from 'int64' to 'int32', etc, the reports generates fine.
The data set provided to me is Excel .xlsx which I unfortunately can't control for now.  So I am using the xlrd package to read in the Excel file.  Definitely prefer CSV than Excel!
Platform Info: My company's 16GB laptop Windows 10
Installed Python Packages:
&lt;denchmark-code&gt;astropy==4.01
attrs==19.3.0                                                                                           
backcall==0.2.0                                                                                         
bleach==3.1.5                                                                                           
Bottleneck==1.3.2
certifi==2020.4.5.2                                                                                     
chardet==3.0.4                                                                                          
colorama==0.4.3                                                                                         
confuse==1.1.0                                                                                          
cycler==0.10.0                                                                                          
decorator==4.4.2                                                                                        
defusedxml==0.6.0                                                                                       
entrypoints==0.3                                                                                        
htmlmin==0.1.12                                                                                         
idna==2.9                                                                                               
ImageHash==4.1.0                                                                                        
ipykernel==5.3.0                                                                                        
ipython==7.15.0                                                                                         
ipython-genutils==0.2.0                                                                                 
ipywidgets==7.5.1                                                                                       
jedi==0.17.0                                                                                            
Jinja2==2.11.2                                                                                          
joblib==0.15.1                                                                                          
jsonschema==3.2.0                                                                                       
jupyter-client==6.1.3                                                                                   
jupyter-core==4.6.3                                                                                     
kiwisolver==1.2.0                                                                                       
llvmlite==0.33.0                                                                                        
MarkupSafe==1.1.1                                                                                       
matplotlib==3.2.1                                                                                       
missingno==0.4.2                                                                                        
mistune==0.8.4                                                                                          
nbconvert==5.6.1                                                                                        
nbformat==5.0.7                                                                                         
networkx==2.4                                                                                           
notebook==6.0.3                                                                                         
numba==0.50.0                                                                                           
numexpr==2.7.1
numpy==1.18.5
packaging==20.4                                                                                         
pandas==1.0.4                                                                                        
pandas-profiling==2.8.0                                                                         
pandocfilters==1.4.2                                                                                    
parso==0.7.0                                                                                            
patsy==0.5.1                                                                                            
phik==0.10.0                                                                                            
pickleshare==0.7.5                                                                                      
Pillow==7.1.2                                                                                           
prometheus-client==0.8.0                                                                                
prompt-toolkit==3.0.5                                                                                   
Pygments==2.6.1                                                                                         
pyparsing==2.4.7                                                                                        
pyrsistent==0.16.0                                                                                      
python-dateutil==2.8.1                                                                                  
pytz==2020.1                                                                                            
PyWavelets==1.1.1                                                                                       
pywin32==228                                                                                            
pywinpty==0.5.7                                                                                         
PyYAML==5.3.1                                                                                           
pyzmq==19.0.1                                                                                           
requests==2.23.0                                                                                        
scipy==1.4.1                                                                                            
seaborn==0.10.1                                                                                         
Send2Trash==1.5.0                                                                                       
six==1.15.0                                                                                             
statsmodels==0.11.1                                                                                     
tangled-up-in-unicode==0.0.6                                                                            
terminado==0.8.3                                                                                        
testpath==0.4.4                                                                                         
tornado==6.0.4                                                                                          
tqdm==4.46.1                                                                                            
traitlets==4.3.3                                                                                        
urllib3==1.25.9                                                                                         
visions==0.4.4                                                                                          
wcwidth==0.2.4                                                                                          
webencodings==0.5.1                                                                                     
widgetsnbextension==3.5.1                                                                               
wincertstore==0.2                                                                                       
xlrd==1.2.0
&lt;/denchmark-code&gt;

I have duplicated similar Python environment at my home's Ubuntu 18.04 laptop and get similar errors.
Perhaps there is documentation somewhere that recommends not using 'category' or 'string' data types for non-numeric columns?  What should I do or use instead?  Thanks in advance!
	</description>
	<comments>
		<comment id='1' author='pybokeh' date='2020-06-15T17:55:10Z'>
		Just wanted to report that if I convert the Excel data to CSV file and then read in the CSV file, the profile report seems to generate ok, at least after trying 4 or 5 times.  Perhaps this is a workaround that I should pursue.
EDIT: After further testing, I may change the title to reflect that this appears to be a problem with Excel files or perhaps xlrd.  I may test using openpyxl and see if I get similar errors.
		</comment>
		<comment id='2' author='pybokeh' date='2020-06-17T23:02:23Z'>
		After further testing, I can duplicate the failure with csv file, but failure occurs less frequently than reading in Excel file.  Therefore, I will keep the title the same or as is.  If others can't duplicate or nothing much can be done with the limited amount of info I have provided (understandably so!), this issue can be closed.  I will definitely not be offended as I understand that not having the actual data set make things difficult to investigate.
		</comment>
		<comment id='3' author='pybokeh' date='2020-07-15T22:06:03Z'>
		Thanks for all your efforts so far to find the root cause of this error.
For resolving the issue (and testing so that it won't occur again), it's essential that we can reproduce the issue.
We can't use the data that caused this error, as that is proprietary. The second best option is to create a minimal synthetic dataset that produces the same error. Would you have time to delve into that &lt;denchmark-link:https://github.com/pybokeh&gt;@pybokeh&lt;/denchmark-link&gt;
 ?
		</comment>
		<comment id='4' author='pybokeh' date='2020-08-02T19:23:38Z'>
		Any updates on this?
		</comment>
		<comment id='5' author='pybokeh' date='2020-08-22T06:11:55Z'>
		I was following this tutorial about pandas-profiling: &lt;denchmark-link:https://benjaminberhault.com//post/2018/10/27/data-profiling-in-python.html&gt;https://benjaminberhault.com//post/2018/10/27/data-profiling-in-python.html&lt;/denchmark-link&gt;
 and experienced similar errors when running ProfileReport(df):
IndexError:index 2 is out of bounds for axis 0 with size 1
though ProfileReport(df, minimal=True) works or commenting out the three data conversion statements works.
dataset:  &lt;denchmark-link:https://benjaminberhault.com/data/crime_and_communities.csv&gt;https://benjaminberhault.com/data/crime_and_communities.csv&lt;/denchmark-link&gt;

environment:
windows10 (AMD64)
Miniconda3, Python Version: 3.7.7
pandas           : 1.0.5 (initially installed 1.1.0, but due to this bug &lt;denchmark-link:https://github.com/pandas-profiling/pandas-profiling/issues/545&gt;#545&lt;/denchmark-link&gt;
, reinstalled 1.0.5)
numpy            : 1.19.1
		</comment>
		<comment id='6' author='pybokeh' date='2020-09-02T21:51:34Z'>
		This issue should be resolved in the v2.9.0 release (just tested &lt;denchmark-link:https://github.com/yiwsun&gt;@yiwsun&lt;/denchmark-link&gt;
's data and it works fine with the fixes in the latest release )
		</comment>
	</comments>
</bug>