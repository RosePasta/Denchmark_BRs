<bug id='463' author='leezu' open_date='2018-12-12T05:39:47Z' closed_time='2019-01-12T03:37:41Z'>
	<summary>Flaky test_weight_drop</summary>
	<description>
&lt;denchmark-code&gt;=================================== FAILURES ===================================
_______________________________ test_weight_drop _______________________________
[gw2] linux -- Python 3.6.7 /var/lib/jenkins/workspace/gluon-nlp-py3/conda/py3/bin/python

    def test_weight_drop():
        class RefBiLSTM(gluon.Block):
            def __init__(self, size, **kwargs):
                super(RefBiLSTM, self).__init__(**kwargs)
                with self.name_scope():
                    self._lstm_fwd = gluon.rnn.LSTM(size, bidirectional=False, prefix='l0')
                    self._lstm_bwd = gluon.rnn.LSTM(size, bidirectional=False, prefix='r0')
    
            def forward(self, inpt):
                fwd = self._lstm_fwd(inpt)
                bwd_inpt = mx.nd.flip(inpt, 0)
                bwd = self._lstm_bwd(bwd_inpt)
                bwd = mx.nd.flip(bwd, 0)
                return mx.nd.concat(fwd, bwd, dim=2)
        net1 = RefBiLSTM(10)
        shared_net1 = RefBiLSTM(10, params=net1.collect_params())
    
        net2 = gluon.rnn.LSTM(10)
        shared_net2 = gluon.rnn.LSTM(10, params=net2.collect_params())
    
        net3 = gluon.nn.HybridSequential()
        net3.add(gluon.rnn.LSTM(10))
        shared_net3 = gluon.nn.HybridSequential(params=net3.collect_params())
        shared_net3.add(gluon.rnn.LSTM(10, params=net3[0].collect_params()))
    
        x = mx.nd.ones((3, 4, 5))
        nets = [(net1, shared_net1),
                (net2, shared_net2),
                (net3, shared_net3)]
        for net, shared_net in nets:
            net.initialize('ones')
            mx.test_utils.assert_almost_equal(net(x).asnumpy(),
                                              shared_net(x).asnumpy())
            with mx.autograd.train_mode():
                mx.test_utils.assert_almost_equal(net(x).asnumpy(),
                                                  shared_net(x).asnumpy())
    
            grads = {}
            with mx.autograd.record():
                y = net(x)
            y.backward()
            for name, param in net.collect_params().items():
                grads[name] = param.grad().copy()
            with mx.autograd.record():
                y = shared_net(x)
            y.backward()
            for name, param in shared_net.collect_params().items():
                mx.test_utils.assert_almost_equal(grads[name].asnumpy(), param.grad().asnumpy())
    
            drop_rate = 0.5
            nlp.model.utils.apply_weight_drop(net, '.*h2h_weight', drop_rate)
            net.initialize('ones')
    
            mx.test_utils.assert_almost_equal(net(x).asnumpy(),
                                              shared_net(x).asnumpy())
            with mx.autograd.train_mode():
&gt;               assert not mx.test_utils.almost_equal(net(x).asnumpy(),
                                                      shared_net(x).asnumpy())
E               AssertionError: assert not True
E                +  where True = &lt;function almost_equal at 0x7ff5eb456268&gt;(array([[[0.7536527 , 0.7536527 , 0.7536527 , 0.7536527 , 0.7536527 ,\n         0.7536527 , 0.7536527 , 0.7536527 , 0.75...3, 0.99498713, 0.9949861 ,\n         0.9949871 , 0.9949858 , 0.99498725, 0.9949858 , 0.9949871 ]]],\n      dtype=float32), array([[[0.7536527 , 0.7536527 , 0.7536527 , 0.7536527 , 0.7536527 ,\n         0.7536527 , 0.7536527 , 0.7536527 , 0.75... , 0.9949869 , 0.9949869 ,\n         0.9949869 , 0.9949869 , 0.9949869 , 0.9949869 , 0.9949869 ]]],\n      dtype=float32))
E                +    where &lt;function almost_equal at 0x7ff5eb456268&gt; = &lt;module 'mxnet.test_utils' from '/var/lib/jenkins/workspace/gluon-nlp-py3/conda/py3/lib/python3.6/site-packages/mxnet/test_utils.py'&gt;.almost_equal
E                +      where &lt;module 'mxnet.test_utils' from '/var/lib/jenkins/workspace/gluon-nlp-py3/conda/py3/lib/python3.6/site-packages/mxnet/test_utils.py'&gt; = mx.test_utils
E                +    and   array([[[0.7536527 , 0.7536527 , 0.7536527 , 0.7536527 , 0.7536527 ,\n         0.7536527 , 0.7536527 , 0.7536527 , 0.75...3, 0.99498713, 0.9949861 ,\n         0.9949871 , 0.9949858 , 0.99498725, 0.9949858 , 0.9949871 ]]],\n      dtype=float32) = &lt;bound method NDArray.asnumpy of \n[[[0.7536527  0.7536527  0.7536527  0.7536527  0.7536527  0.7536527\n   0.7536527  0.... 0.99498713 0.99498713 0.9949861  0.9949871\n   0.9949858  0.99498725 0.9949858  0.9949871 ]]]\n&lt;NDArray 3x4x10 @cpu(0)&gt;&gt;()
E                +      where &lt;bound method NDArray.asnumpy of \n[[[0.7536527  0.7536527  0.7536527  0.7536527  0.7536527  0.7536527\n   0.7536527  0.... 0.99498713 0.99498713 0.9949861  0.9949871\n   0.9949858  0.99498725 0.9949858  0.9949871 ]]]\n&lt;NDArray 3x4x10 @cpu(0)&gt;&gt; = \n[[[0.7536527  0.7536527  0.7536527  0.7536527  0.7536527  0.7536527\n   0.7536527  0.7536527  0.7536527  0.7536527 ]\n ...  0.99498713 0.99498713 0.9949861  0.9949871\n   0.9949858  0.99498725 0.9949858  0.9949871 ]]]\n&lt;NDArray 3x4x10 @cpu(0)&gt;.asnumpy
E                +        where \n[[[0.7536527  0.7536527  0.7536527  0.7536527  0.7536527  0.7536527\n   0.7536527  0.7536527  0.7536527  0.7536527 ]\n ...  0.99498713 0.99498713 0.9949861  0.9949871\n   0.9949858  0.99498725 0.9949858  0.9949871 ]]]\n&lt;NDArray 3x4x10 @cpu(0)&gt; = HybridSequential(\n  (0): LSTM(5 -&gt; 10, TNC)\n)(\n[[[1. 1. 1. 1. 1.]\n  [1. 1. 1. 1. 1.]\n  [1. 1. 1. 1. 1.]\n  [1. 1. 1. 1. 1.]]\n\n [[1. 1. 1. 1. 1.]\n  [1. 1. 1. 1. 1.]\n ...1. 1. 1. 1. 1.]]\n\n [[1. 1. 1. 1. 1.]\n  [1. 1. 1. 1. 1.]\n  [1. 1. 1. 1. 1.]\n  [1. 1. 1. 1. 1.]]]\n&lt;NDArray 3x4x5 @cpu(0)&gt;)
E                +    and   array([[[0.7536527 , 0.7536527 , 0.7536527 , 0.7536527 , 0.7536527 ,\n         0.7536527 , 0.7536527 , 0.7536527 , 0.75... , 0.9949869 , 0.9949869 ,\n         0.9949869 , 0.9949869 , 0.9949869 , 0.9949869 , 0.9949869 ]]],\n      dtype=float32) = &lt;bound method NDArray.asnumpy of \n[[[0.7536527  0.7536527  0.7536527  0.7536527  0.7536527  0.7536527\n   0.7536527  0.... 0.9949869  0.9949869  0.9949869  0.9949869\n   0.9949869  0.9949869  0.9949869  0.9949869 ]]]\n&lt;NDArray 3x4x10 @cpu(0)&gt;&gt;()
E                +      where &lt;bound method NDArray.asnumpy of \n[[[0.7536527  0.7536527  0.7536527  0.7536527  0.7536527  0.7536527\n   0.7536527  0.... 0.9949869  0.9949869  0.9949869  0.9949869\n   0.9949869  0.9949869  0.9949869  0.9949869 ]]]\n&lt;NDArray 3x4x10 @cpu(0)&gt;&gt; = \n[[[0.7536527  0.7536527  0.7536527  0.7536527  0.7536527  0.7536527\n   0.7536527  0.7536527  0.7536527  0.7536527 ]\n ...  0.9949869  0.9949869  0.9949869  0.9949869\n   0.9949869  0.9949869  0.9949869  0.9949869 ]]]\n&lt;NDArray 3x4x10 @cpu(0)&gt;.asnumpy
E                +        where \n[[[0.7536527  0.7536527  0.7536527  0.7536527  0.7536527  0.7536527\n   0.7536527  0.7536527  0.7536527  0.7536527 ]\n ...  0.9949869  0.9949869  0.9949869  0.9949869\n   0.9949869  0.9949869  0.9949869  0.9949869 ]]]\n&lt;NDArray 3x4x10 @cpu(0)&gt; = HybridSequential(\n  (0): LSTM(5 -&gt; 10, TNC)\n)(\n[[[1. 1. 1. 1. 1.]\n  [1. 1. 1. 1. 1.]\n  [1. 1. 1. 1. 1.]\n  [1. 1. 1. 1. 1.]]\n\n [[1. 1. 1. 1. 1.]\n  [1. 1. 1. 1. 1.]\n ...1. 1. 1. 1. 1.]]\n\n [[1. 1. 1. 1. 1.]\n  [1. 1. 1. 1. 1.]\n  [1. 1. 1. 1. 1.]\n  [1. 1. 1. 1. 1.]]]\n&lt;NDArray 3x4x5 @cpu(0)&gt;)

tests/unittest/test_models.py:408: AssertionError
&lt;/denchmark-code&gt;

&lt;denchmark-link:http://ci.mxnet.io/blue/rest/organizations/jenkins/pipelines/gluon-nlp/branches/PR-462/runs/3/nodes/23/steps/46/log/?start=0&gt;http://ci.mxnet.io/blue/rest/organizations/jenkins/pipelines/gluon-nlp/branches/PR-462/runs/3/nodes/23/steps/46/log/?start=0&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='leezu' date='2018-12-12T05:40:29Z'>
		&lt;denchmark-link:https://github.com/szha&gt;@szha&lt;/denchmark-link&gt;
 I think you added the test
		</comment>
	</comments>
</bug>