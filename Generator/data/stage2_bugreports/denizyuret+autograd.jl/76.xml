<bug id='76' author='baggepinnen' open_date='2018-07-27T09:13:50Z' closed_time='2018-08-23T11:03:58Z'>
	<summary>StackOverflowError in grad on broadcasted function</summary>
	<description>
Minimal NWE
using AutoGrad
f(x) = x.^2
jf = AutoGrad.grad(f)
jf(1)
Note that f is a scalar function for scalar inputs
Somewhat related to &lt;denchmark-link:https://github.com/denizyuret/AutoGrad.jl/issues/67&gt;#67&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='baggepinnen' date='2018-08-15T14:47:07Z'>
		This is the current behaviour on julia 0.7 for the MWE
julia&gt; using AutoGrad

julia&gt; f(x) = x.^2
f (generic function with 1 method)

julia&gt; jf = AutoGrad.grad(f)
(::getfield(AutoGrad, Symbol("#gradfun#3")){getfield(AutoGrad, Symbol("##gradfun#1#2")){typeof(f),Int64}}) (generic function with 1 method)

julia&gt; jf(1)
┌ Warning: broadcast will default to iterating over its arguments in the future. Wrap arguments of
│ type `x::Rec{Int64}` with `Ref(x)` to ensure they broadcast as "scalar" elements.
│   caller = ip:0x0
└ @ Core :-1
2
While the result is correct, the warning is hinting at some pitfall in our current implementation of broadcast for recorded scalars.
This example works smoothly though:
julia&gt; f(x) = sum(x.*[1,2,3])
f (generic function with 1 method)

julia&gt; grad(f)(1)
6
		</comment>
		<comment id='2' author='baggepinnen' date='2018-08-22T22:51:36Z'>
		This should be fixed in latest master, please test and close.
		</comment>
		<comment id='3' author='baggepinnen' date='2018-08-23T11:03:58Z'>
		Works, thanks!
		</comment>
	</comments>
</bug>