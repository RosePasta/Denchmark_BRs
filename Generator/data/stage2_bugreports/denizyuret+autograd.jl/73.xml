<bug id='73' author='ylxdzsw' open_date='2018-06-26T03:30:35Z' closed_time='2018-08-24T02:22:58Z'>
	<summary>incorrect gradient when indexing into a matrix of vectors</summary>
	<description>
I'm using latest master of AutoGrad.jl in Julia 0.6.3 on Windows and it gives an unexpected gradient when indexing into a matrix of vectors:
&lt;denchmark-code&gt;julia&gt; a = Matrix{Array{Float32}}(2, 1)
2×1 Array{Array{Float32,N} where N,2}:
 #undef
 #undef

julia&gt; a[1] = [2,3,4]
3-element Array{Int64,1}:
 2
 3
 4

julia&gt; a[2] = [4,5,6]
3-element Array{Int64,1}:
 4
 5
 6

julia&gt; g = grad(x-&gt;x[1]' * x[2])
(::gradfun) (generic function with 1 method)

julia&gt; g(a)
2×1 Array{Any,2}:
 Float32[4.0, 5.0, 6.0]
 Float32[2.0, 3.0, 4.0]

julia&gt; g = grad(x-&gt;x[1, 1]' * x[2, 1])
(::gradfun) (generic function with 1 method)

julia&gt; g(a)
2×1 Array{Any,2}:
 4.0
 2.0
&lt;/denchmark-code&gt;

The two functions are identical in my opinion, but the latter one gives only the gradient of the first element in each vector.
	</description>
	<comments>
		<comment id='1' author='ylxdzsw' date='2018-08-15T15:02:17Z'>
		Also, ideally in both definitions the result should be a 2×1 Array{Array{Float32,N} where N,2}  (note that the first definition of g instead is an Array{Any,2})
		</comment>
		<comment id='2' author='ylxdzsw' date='2018-08-23T14:37:45Z'>
		&lt;denchmark-link:https://github.com/ylxdzsw&gt;@ylxdzsw&lt;/denchmark-link&gt;
 fixed in latest master, please test.
&lt;denchmark-link:https://github.com/CarloLucibello&gt;@CarloLucibello&lt;/denchmark-link&gt;
 I cannot do this in general because I want to be able to represent zero gradients for large arrays using . So non-bitstype arrays may get converted to Any arrays.
		</comment>
		<comment id='3' author='ylxdzsw' date='2018-08-24T02:31:35Z'>
		Yes it works, thanks.
		</comment>
	</comments>
</bug>