<bug id='608' author='ChristophAlt' open_date='2017-12-13T14:08:30Z' closed_time='2018-01-08T17:17:35Z'>
	<summary>Data pipeline tutorial incorrectly describes vocab namespace issues</summary>
	<description>
Issue:
The keys of the "token_indexers" dict passed to TextField aren't used to create the vocabulary namespace (I'm not entirely sure that this is the intended behavior but the tutorial on &lt;denchmark-link:http://allennlp.org/tutorials/data-pipeline&gt;http://allennlp.org/tutorials/data-pipeline&lt;/denchmark-link&gt;
 suggests so). Instead the TokenIndexers internal namespace is used, which leads to the behavior as shown in the example code. The specified namespace is "some_namespace" but the index is stored under the namespace "tokens", which is the default namespace for SingleIdTokenIndexer.
Example code:
&lt;denchmark-code&gt;from allennlp.data import Token
from allennlp.data.fields import TextField
from allennlp.data.token_indexers import SingleIdTokenIndexer
from allennlp.data import Instance
from allennlp.data import Dataset

from allennlp.data import Vocabulary

text_field = TextField(list(map(Token, ["Here", "are", "some", "longer", "words", "."])),
                       token_indexers={"some_namespace": SingleIdTokenIndexer()})
dataset = Dataset([Instance({"sentence": text_field})])

vocab = Vocabulary.from_dataset(dataset)
dataset.index_instances(vocab)

print('Namespaces:', vocab._index_to_token)
print('Namespace content:', vocab.get_index_to_token_vocabulary("some_namespace"))
&lt;/denchmark-code&gt;

Output:
&lt;denchmark-code&gt;Namespaces: defaultdict(None, {'tokens': {0: '@@PADDING@@', 1: '@@UNKNOWN@@', 2: 'Here', 3: 'are', 4: 'some', 5: 'longer', 6: 'words', 7: '.'}})
Namespace content: {0: '@@PADDING@@', 1: '@@UNKNOWN@@'}
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='ChristophAlt' date='2017-12-13T17:05:12Z'>
		The behavior you're describing is the intended behavior.  The keys in the indexer dictionary are totally unrelated to the vocabulary namespaces.  This gives you some flexibility in sharing vocabulary namespaces across different indexers, though, honestly, I'm having a hard time right now thinking of a use case where you would actually want to do this.  But more practically, it's hard from an implementation perspective to get those two keys to always match, because they are parameters specified for different objects in the class hierarchy.
To set the namespace for an indexer you do: token_indexers={"some_key": SingleIdTokenIndexer("some_namespace")}.
What part of the tutorial made you think the behavior was different?  A pointer would be nice, so we can clarify the wording.
		</comment>
		<comment id='2' author='ChristophAlt' date='2017-12-13T17:06:58Z'>
		Ah, here's a use case: using byte encoding for representing characters.  This doesn't use a vocabulary at all, so it doesn't really make sense to impose a vocabulary namespace on it.
		</comment>
		<comment id='3' author='ChristophAlt' date='2017-12-13T23:47:01Z'>
		Ok, then I misinterpreted the tutorial, because:
&lt;denchmark-code&gt;word_and_character_text_field = TextField(list(map(Token, ["Here", "are", "some", "longer", "words", "."])), token_indexers={"tokens": SingleIdTokenIndexer(), "chars": TokenCharactersIndexer()})
.
.
vocab.get_index_to_token_vocabulary("chars")
&lt;/denchmark-code&gt;

implied, that the character index resides under the namespace "chars", which is given as the key to "token_indexers". This actually results in an empty index being returned, containing only the unknown token and padding token, because the actual character index is stored under the "token_characters" namespace.
		</comment>
		<comment id='4' author='ChristophAlt' date='2017-12-13T23:51:47Z'>
		Yep, that's a problem with the tutorial.  Thanks for pointing it out!  We'll get it fixed.
		</comment>
	</comments>
</bug>