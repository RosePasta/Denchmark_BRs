<bug id='4614' author='epwalsh' open_date='2020-08-28T22:49:32Z' closed_time='2020-08-31T19:57:54Z'>
	<summary>FromParams doesn't handle kwargs on base class</summary>
	<description>
&lt;denchmark-h:h2&gt;Checklist&lt;/denchmark-h&gt;


 I have verified that the issue exists against the master branch of AllenNLP.
 I have read the relevant section in the contribution guide on reporting bugs.
 I have checked the issues list for similar or identical bug reports.
 I have checked the pull requests list for existing proposed fixes.
 I have checked the CHANGELOG and the commit log to find out if the bug was already fixed in the master branch.
 I have included in the "Description" section below a traceback from any exceptions related to this bug.
 I have included in the "Related issues or possible duplicates" section beloew all related issues and possible duplicate issues (If there are none, check this box anyway).
 I have included in the "Environment" section below the name of the operating system and Python version that I was using when I discovered this bug.
 I have included in the "Environment" section below the output of pip freeze.
 I have included in the "Steps to reproduce" section below a minimally reproducible example.

&lt;denchmark-h:h2&gt;Description&lt;/denchmark-h&gt;

If your create class that inherits from FromParams, and this class takes **kwargs in its constructor, then calling the .from_params method on this class will fail. See "Steps to reproduce" below.
&lt;denchmark-h:h2&gt;Related issues or possible duplicates&lt;/denchmark-h&gt;


This issue is similar: #4592

&lt;denchmark-h:h2&gt;Environment&lt;/denchmark-h&gt;

OS: OS X
Python version: Python 3.7

Output of pip freeze:

-e git+git@github.com:allenai/allennlp.git@e840a589afc4bfdac0165a8650145259a7603807#egg=allennlp
-e git+git@github.com:allenai/allennlp-models.git@2e5444997f416c112c0c6e02cc33175c24982049#egg=allennlp_models
apipkg==1.5
appdirs==1.4.4
appnope==0.1.0
attrs==20.1.0
backcall==0.2.0
black==20.8b1
bleach==3.1.5
blis==0.4.1
boto3==1.14.51
botocore==1.17.51
catalogue==1.0.0
certifi==2020.6.20
chardet==3.0.4
click==7.1.2
codecov==2.1.9
colorama==0.4.3
conllu==4.0
coverage==5.2.1
cycler==0.10.0
cymem==2.0.3
decorator==4.4.2
docutils==0.15
execnet==1.7.1
filelock==3.0.12
flake8==3.8.3
flaky==3.7.0
ftfy==5.8
future==0.18.2
greenlet==0.4.16
h5py==2.10.0
idna==2.10
importlib-metadata==1.7.0
iniconfig==1.0.1
ipython==7.18.0
ipython-genutils==0.2.0
jedi==0.17.2
Jinja2==2.11.2
jmespath==0.10.0
joblib==0.16.0
jsonnet==0.16.0
jsonpickle==1.4.1
keyring==21.3.1
kiwisolver==1.2.0
livereload==2.6.3
lunr==0.5.8
Markdown==3.2.2
markdown-include==0.5.1
MarkupSafe==1.1.1
matplotlib==3.3.1
mccabe==0.6.1
mkdocs==1.1.2
mkdocs-material==5.5.11
mkdocs-material-extensions==1.0
more-itertools==8.5.0
msgpack==0.5.6
murmurhash==1.0.2
mypy==0.782
mypy-extensions==0.4.3
neovim==0.2.6
nltk==3.5
nr.collections==0.0.1
nr.databind.core==0.0.16
nr.databind.json==0.0.13
nr.interface==0.0.3
nr.metaclass==0.0.5
nr.parsing.date==0.3.0
nr.pylang.utils==0.0.3
nr.stream==0.0.4
nr.utils.re==0.1.0
numpy==1.19.1
overrides==3.1.0
packaging==20.4
parso==0.7.1
pathspec==0.8.0
pathtools==0.1.2
pexpect==4.8.0
pickleshare==0.7.5
Pillow==7.2.0
pkginfo==1.5.0.1
plac==1.1.3
pluggy==0.13.1
preshed==3.0.2
prompt-toolkit==3.0.6
protobuf==3.13.0
ptyprocess==0.6.0
py==1.9.0
py-cpuinfo==7.0.0
py-rouge==1.1
pycodestyle==2.6.0
pydoc-markdown @ git+https://github.com/NiklasRosenstein/pydoc-markdown.git@f0bf8af1db4f11581c19d206d4ed1ab34b4854c1
pydocstyle==5.1.0
pyflakes==2.2.0
Pygments==2.6.1
pymdown-extensions==8.0
pyparsing==2.4.7
pytest==6.0.1
pytest-benchmark==3.2.3
pytest-cov==2.10.1
pytest-forked==1.3.0
pytest-xdist==2.1.0
python-dateutil==2.8.1
PyYAML==5.3.1
readme-renderer==26.0
regex==2020.7.14
requests==2.24.0
requests-toolbelt==0.9.1
responses==0.11.0
rfc3986==1.4.0
ruamel.yaml==0.16.10
ruamel.yaml.clib==0.2.0
s3transfer==0.3.3
sacremoses==0.0.43
scikit-learn==0.23.2
scipy==1.5.2
sentencepiece==0.1.91
six==1.15.0
snowballstemmer==2.0.0
spacy==2.3.2
srsly==1.0.2
tensorboardX==2.1
thinc==7.4.1
threadpoolctl==2.1.0
tokenizers==0.8.1rc1
toml==0.10.1
torch==1.6.0
tornado==6.0.4
tqdm==4.48.2
traitlets==4.3.3
transformers==3.0.2
twine==3.2.0
typed-ast==1.4.1
typing-extensions==3.7.4.3
urllib3==1.25.10
wasabi==0.8.0
watchdog==0.10.3
wcwidth==0.2.5
webencodings==0.5.1
word2number==1.1
zipp==3.1.0



&lt;denchmark-h:h2&gt;Steps to reproduce&lt;/denchmark-h&gt;


Example source:

from allennlp.common.from_params import FromParams, Params

class Foo(FromParams):
    def __init__(self, a: int, b: str = None, **kwargs) -&gt; None:
        self.a = a
        self.b = b

Foo.from_params(Params({"a": 2, "b": "hi"}))



Python traceback:

Traceback (most recent call last):
  File "tmp.py", line 10, in &lt;module&gt;
    Foo.from_params(Params({"a": 2, "b": "hi"}))
  File "/Users/evanw/AllenAI/allennlp/allennlp/common/from_params.py", line 610, in from_params
    kwargs = create_kwargs(constructor_to_inspect, cls, params, **extras)
  File "/Users/evanw/AllenAI/allennlp/allennlp/common/from_params.py", line 163, in create_kwargs
    parameters = infer_params(cls, constructor)
  File "/Users/evanw/AllenAI/allennlp/allennlp/common/from_params.py", line 140, in infer_params
    super_parameters = infer_params(super_class)
  File "/Users/evanw/AllenAI/allennlp/allennlp/common/from_params.py", line 139, in infer_params
    raise RuntimeError("found a kwargs parameter with no inspectable super class")
RuntimeError: found a kwargs parameter with no inspectable super class



I would expect Foo.from_params(Params({"a": 2, "b": "hi"})) to work just fine. And if additional keyword argument were passed to .from_params, I would expect those to be passed on to Foo's constructor as is.
	</description>
	<comments>
		<comment id='1' author='epwalsh' date='2020-09-06T09:33:43Z'>
		Hi, I still have a related issue in the following (edge) case:
A child class with **kwargs in its constructor, that inherits from a class that doesn't have an explicit constructor.
The cause is that inspect.signature considers the signature to be def __init__(self, *args, **kwargs) when the constructor is not explicitly defined, and therefore FromParams think *args is required.
This simple fix ignores the  argument: &lt;denchmark-link:https://github.com/allenai/allennlp/pull/4629&gt;#4629&lt;/denchmark-link&gt;

&lt;denchmark-h:h2&gt;Steps to reproduce&lt;/denchmark-h&gt;


Example source:
from allennlp.common.from_params import FromParams, Params

class Foo(FromParams):
    pass

class Bar(Foo):
    def __init__(self, a: int, **kwargs) -&gt; None:
        self.a = a

Bar.from_params(Params({"a": 2}))


Python traceback:
Traceback (most recent call last):
  File ".../allennlp/allennlp/common/params.py", line 238, in pop
    value = self.params.pop(key)
KeyError: 'args'

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File ".../allennlp/allennlp/common/from_params.py", line 622, in from_params
    kwargs = create_kwargs(constructor_to_inspect, cls, params, **extras)
  File ".../allennlp/allennlp/common/from_params.py", line 193, in create_kwargs
    cls.__name__, param_name, annotation, param.default, params, **extras
  File ".../allennlp/allennlp/common/from_params.py", line 295, in pop_and_construct_arg
    popped_params = params.pop(name, default) if default != _NO_DEFAULT else params.pop(name)
  File ".../allennlp/allennlp/common/params.py", line 243, in pop
    raise ConfigurationError(msg)
allennlp.common.checks.ConfigurationError: key "args" is required


		</comment>
	</comments>
</bug>