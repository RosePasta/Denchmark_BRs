<bug id='291' author='filipecosta90' open_date='2020-02-20T09:22:03Z' closed_time='2020-03-05T20:59:36Z'>
	<summary>memleak on RedisAI_Run_Reply rstats</summary>
	<description>
commit &lt;denchmark-link:https://github.com/RedisAI/RedisAI/commit/e4f45f6268bb7a4b51d1170c28a590f6f628072e&gt;e4f45f6&lt;/denchmark-link&gt;
 (HEAD -&gt; coverage)
leak on
rstats = RedisModule_Calloc(1, sizeof(struct RedisAI_RunStats));
&lt;denchmark-code&gt;=28808== 77 (56 direct, 21 indirect) bytes in 1 blocks are definitely lost in loss record 101,584 of 125,331
==28808==    at 0x4C31B25: calloc (in /usr/lib/valgrind/vgpreload_memcheck-amd64-linux.so)
==28808==    by 0x144DB6: zcalloc (zmalloc.c:131)
==28808==    by 0x1C6FAC: RM_Calloc (module.c:335)
==28808==    by 0x67D8D20: RedisAI_Run_Reply (redisai.c:835)
==28808==    by 0x1CE072: moduleHandleBlockedClients (module.c:3895)
==28808==    by 0x13A84E: beforeSleep (server.c:1412)
==28808==    by 0x1344EB: aeMain (ae.c:500)
==28808==    by 0x141FD3: main (server.c:4234)
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='filipecosta90' date='2020-02-20T10:17:57Z'>
		Not sure this is an actual leak. rstats will survive indefinitely until a) Redis is terminated or b) the model is DEL'd. In the tests we never call DEL, maybe we should?
		</comment>
		<comment id='2' author='filipecosta90' date='2020-02-20T10:33:16Z'>
		
ybe w

&lt;denchmark-link:https://github.com/lantiga&gt;@lantiga&lt;/denchmark-link&gt;
 with the current RLTest + valgrind redis is shutdown correctly thus cleaning after himself. The report is only after the server was shutdown and valgrind analysing that the memory was not freed even tought all keys are deleted on shutdown.
imho this is a real leak.
		</comment>
		<comment id='3' author='filipecosta90' date='2020-02-20T10:34:06Z'>
		How are keys deleted though? Only DEL is not sufficient, you need MODELDEL.
		</comment>
		<comment id='4' author='filipecosta90' date='2020-02-20T10:39:16Z'>
		I'll be looking into the module API for a cleanup function
		</comment>
		<comment id='5' author='filipecosta90' date='2020-02-20T10:54:12Z'>
		
I'll be looking into the module API for a cleanup function

&lt;denchmark-link:https://github.com/lantiga&gt;@lantiga&lt;/denchmark-link&gt;
 the free on the model datatype should do that:
&lt;denchmark-code&gt;free: A callback function pointer that can free a type value
&lt;/denchmark-code&gt;

So, doing MODELDEL and DEL on a model key should have the same outcome.
		</comment>
		<comment id='6' author='filipecosta90' date='2020-02-20T16:02:34Z'>
		&lt;denchmark-link:https://github.com/filipecosta90&gt;@filipecosta90&lt;/denchmark-link&gt;
 it should, although I'm storing the stats in a global dict indexed by key (so we don't have to touch keyspace when updating stats, plus they are specific to the redis instance), and currently the model itself doesn't know about the key (and I believe it shouldn't)
		</comment>
		<comment id='7' author='filipecosta90' date='2020-02-29T16:52:38Z'>
		I can't reproduce this with
&lt;denchmark-code&gt;make -C opt test NO_LFS=1 GEN=0 AOF=0 SLAVES=0 VALGRIND=1 TEST=tests_pytorch:test_pytorch_modelinfo
&lt;/denchmark-code&gt;

/cc &lt;denchmark-link:https://github.com/filipecosta90&gt;@filipecosta90&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>