<bug id='208' author='filipecosta90' open_date='2019-09-07T19:52:47Z' closed_time='2020-02-23T20:35:02Z'>
	<summary>RedisAI_ModelRun_RedisCommand RedisAI_RunInfo *rinfo memory leak</summary>
	<description>
we don't free the RedisAI_RunInfo *rinfo  after RedisAI_ModelRun_RedisCommand.
valgrind command within redis root dir
&lt;denchmark-code&gt;valgrind --track-origins=yes --suppressions=src/valgrind.sup --show-reachable=no --show-possibly-lost=no --leak-check=full src/redis-server --loadmodule ../RedisAI/build/redisai.so
&lt;/denchmark-code&gt;

excerpt of Leak report:
&lt;denchmark-code&gt;==47471== 46,609,888 (5,276,928 direct, 41,332,960 indirect) bytes in 109,936 blocks are definitely lost in loss record 77,261 of 77,262
==47471==    at 0x10025F130: calloc (in /usr/local/Cellar/valgrind/HEAD-60ab74a/lib/valgrind/vgpreload_memcheck-amd64-darwin.so)
==47471==    by 0x1000197FA: zcalloc (zmalloc.c:131)
==47471==    by 0x1000A7EC0: RM_Calloc (module.c:324)
==47471==    by 0x10158AB4F: RedisAI_ModelRun_RedisCommand (redisai.c:962)
==47471==    by 0x1000A87CC: RedisModuleCommandDispatcher (module.c:542)
==47471==    by 0x100010C25: call (server.c:2439)
==47471==    by 0x100011A99: processCommand (server.c:2733)
==47471==    by 0x100025E95: processInputBuffer (networking.c:1470)
==47471==    by 0x1000260AA: processInputBufferAndReplicate (networking.c:1505)
==47471==    by 0x100021FA9: readQueryFromClient (networking.c:1587)
==47471==    by 0x100005698: aeProcessEvents (ae.c:443)
==47471==    by 0x100005DED: aeMain (ae.c:501)
&lt;/denchmark-code&gt;

location in code
redisai.c:962
&lt;denchmark-code&gt;struct RedisAI_RunInfo *rinfo = RedisModule_Calloc(1, sizeof(struct RedisAI_RunInfo));
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='filipecosta90' date='2019-09-12T20:12:17Z'>
		Hi &lt;denchmark-link:https://github.com/filipecosta90&gt;@filipecosta90&lt;/denchmark-link&gt;
, I took a closer look.
We do free run info, it goes like this:

We allocate rinfo in RedisAI_ModelRun_RedisCommand, we push it as a value on the queue and return (without deallocating)
The processing thread pops the item from the queue, gets the value (the pointer to rinfo) and calls RedisAI_RunSession with the item as the argument and returns
When the processing thread has finished processing, RedisAI_Run_Reply is called, with rinfo returned by RedisModule_GetBlockedClientPrivateData(ctx). At that point we get the outputs from rinfo and free the associated memory.

It might be that we don't deallocate all of it (it doesn't look like it) or that there's a codepath for which we don't free it up. Do we have other indications from valgrind?
		</comment>
		<comment id='2' author='filipecosta90' date='2020-02-23T20:35:02Z'>
		closing this since all leaks are already being taken care on separate issues and this leak does not showup anymore üëç
		</comment>
	</comments>
</bug>