<bug id='323' author='filipecosta90' open_date='2020-04-15T00:34:46Z' closed_time='2020-04-16T18:28:42Z'>
	<summary>Segmentation fault at RAI_ModelRunTF -&amp;gt; TF_DeleteSession, and RAI_ModelRunTF -&amp;gt; TF_GraphOperationByName</summary>
	<description>
&lt;denchmark-link:https://github.com/lantiga&gt;@lantiga&lt;/denchmark-link&gt;
 just confirmed that this issue was introduced with the batching PR (&lt;denchmark-link:https://github.com/RedisAI/RedisAI/commit/8752589d1835109ee51b3d96743a42bc557bafae&gt;8752589&lt;/denchmark-link&gt;
) and it happens deterministically. Was not able yet to make this crash happen with less load and using RLTest.
gdb bactrace showing issues on  RAI_ModelRunTF -&gt; TF_DeleteSession:
&lt;denchmark-code&gt;Thread 2 "redis-server" received signal SIGSEGV, Segmentation fault.
[Switching to Thread 0x7f3864bf2700 (LWP 4669)]
0x0000000000000000 in ?? ()
(gdb) bt
#0  0x0000000000000000 in ?? ()
#1  0x00007f385813f2c3 in tensorflow::OpSegment::ShouldOwnKernel(tensorflow::FunctionLibraryRuntime*, std::string const&amp;) ()
   from /home/filipe/redislabs/RedisAI/./bin/linux-x64-debug/install-cpu/backends/redisai_tensorflow/lib/libtensorflow_framework.so.1
#2  0x00007f385f764ab6 in std::_Function_handler&lt;void (tensorflow::OpKernel*), tensorflow::DirectSession::CreateExecutors(tensorflow::CallableOptions const&amp;, std::unique_ptr&lt;tensorflow::DirectSession::ExecutorsAndKeys, std::default_delete&lt;tensorflow::DirectSession::ExecutorsAndKeys&gt; &gt;*, std::unique_ptr&lt;tensorflow::DirectSession::FunctionInfo, std::default_delete&lt;tensorflow::DirectSession::FunctionInfo&gt; &gt;*, tensorflow::DirectSession::RunStateArgs*)::{lambda(tensorflow::OpKernel*)#2}&gt;::_M_invoke(std::_Any_data const&amp;, tensorflow::OpKernel*) ()
   from /home/filipe/redislabs/RedisAI/./bin/linux-x64-debug/install-cpu/backends/redisai_tensorflow/lib/libtensorflow.so.1
#3  0x00007f3858382d67 in tensorflow::(anonymous namespace)::ExecutorImpl::~ExecutorImpl() ()
   from /home/filipe/redislabs/RedisAI/./bin/linux-x64-debug/install-cpu/backends/redisai_tensorflow/lib/libtensorflow_framework.so.1
#4  0x00007f385f777ebf in std::_Sp_counted_deleter&lt;tensorflow::DirectSession::ExecutorsAndKeys*, std::default_delete&lt;tensorflow::DirectSession::ExecutorsAndKeys&gt;, std::allocator&lt;void&gt;, (__gnu_cxx::_Lock_policy)2&gt;::_M_dispose() () from /home/filipe/redislabs/RedisAI/./bin/linux-x64-debug/install-cpu/backends/redisai_tensorflow/lib/libtensorflow.so.1
#5  0x00007f38598fef39 in std::_Sp_counted_base&lt;(__gnu_cxx::_Lock_policy)2&gt;::_M_release() ()
   from /home/filipe/redislabs/RedisAI/./bin/linux-x64-debug/install-cpu/backends/redisai_tensorflow/lib/libtensorflow.so.1
#6  0x00007f385f77162e in tensorflow::DirectSession::~DirectSession() () from /home/filipe/redislabs/RedisAI/./bin/linux-x64-debug/install-cpu/backends/redisai_tensorflow/lib/libtensorflow.so.1
#7  0x00007f385f771db1 in tensorflow::DirectSession::~DirectSession() () from /home/filipe/redislabs/RedisAI/./bin/linux-x64-debug/install-cpu/backends/redisai_tensorflow/lib/libtensorflow.so.1
#8  0x00007f385990b846 in TF_DeleteSession () from /home/filipe/redislabs/RedisAI/./bin/linux-x64-debug/install-cpu/backends/redisai_tensorflow/lib/libtensorflow.so.1
#9  0x00007f38621e2c30 in ?? ()
#10 0x00007f3864bf0570 in ?? ()
#11 0x00007f3865c29000 in ?? ()
#12 0x0000000000000000 in ?? ()
&lt;/denchmark-code&gt;

Backtrace on another crash, this time reported via redis-server output:
&lt;denchmark-code&gt;EIP:
/home/filipe/redislabs/RedisAI/./bin/linux-x64-debug/install-cpu/backends/redisai_tensorflow/lib/libtensorflow_framework.so.1(_ZN5nsync13nsync_mu_lockEPNS_11nsync_mu_s_E+0x17)[0x7fa4c1ff7db7]

Backtrace:
redis-server *:6379(logStackTrace+0x5a)[0x563616c68f8a]
redis-server *:6379(sigsegvHandler+0xb1)[0x563616c69741]
/lib/x86_64-linux-gnu/libpthread.so.0(+0x12890)[0x7fa4cf80c890]
/home/filipe/redislabs/RedisAI/./bin/linux-x64-debug/install-cpu/backends/redisai_tensorflow/lib/libtensorflow_framework.so.1(_ZN5nsync13nsync_mu_lockEPNS_11nsync_mu_s_E+0x17)[0x7fa4c1ff7db7]
/home/filipe/redislabs/RedisAI/./bin/linux-x64-debug/install-cpu/backends/redisai_tensorflow/lib/libtensorflow.so.1(TF_GraphOperationByName+0x1c)[0x7fa4c52b2f9c]
./bin/linux-x64-debug/install-cpu/backends/redisai_tensorflow/redisai_tensorflow.so(RAI_ModelRunTF+0x63e)[0x7fa4cb5e63e4]
./bin/linux-x64-debug/install-cpu/redisai.so(RAI_ModelRun+0x89)[0x7fa4ce011cc1]
./bin/linux-x64-debug/install-cpu/redisai.so(RedisAI_RunSession+0x127)[0x7fa4ce006d3c]
./bin/linux-x64-debug/install-cpu/redisai.so(RedisAI_Run_ThreadMain+0x370)[0x7fa4ce009840]
/lib/x86_64-linux-gnu/libpthread.so.0(+0x76db)[0x7fa4cf8016db]
/lib/x86_64-linux-gnu/libc.so.6(clone+0x3f)[0x7fa4cf52a88f]
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='filipecosta90' date='2020-04-15T00:37:49Z'>
		&lt;denchmark-link:https://github.com/lantiga&gt;@lantiga&lt;/denchmark-link&gt;
 one more clue, and probably the reason we're not catching it on RLTest. It only happens with more than one client (2 is enough)
		</comment>
		<comment id='2' author='filipecosta90' date='2020-04-15T06:47:57Z'>
		Hi &lt;denchmark-link:https://github.com/filipecosta90&gt;@filipecosta90&lt;/denchmark-link&gt;
, do you have a script or setup to reproduce this?
		</comment>
		<comment id='3' author='filipecosta90' date='2020-04-15T08:21:00Z'>
		
Hi @filipecosta90, do you have a script or setup to reproduce this?

Will try to reproduce solely with rltest and update back here
		</comment>
		<comment id='4' author='filipecosta90' date='2020-04-15T09:16:53Z'>
		

Hi @filipecosta90, do you have a script or setup to reproduce this?

Will try to reproduce solely with rltest and update back here

The added test case in &lt;denchmark-link:https://github.com/RedisAI/RedisAI/pull/324&gt;#324&lt;/denchmark-link&gt;
 deterministically crashes redisai :)
		</comment>
		<comment id='5' author='filipecosta90' date='2020-04-16T13:42:58Z'>
		So I think I identified the issue. This is due to shallow copying happening in the processing thread. I need to refactor model run so that we are not shallow copying anything.
		</comment>
		<comment id='6' author='filipecosta90' date='2020-04-16T13:45:17Z'>
		I'll push the fix to this branch as soon as I have it ready
		</comment>
		<comment id='7' author='filipecosta90' date='2020-04-16T13:47:57Z'>
		&lt;denchmark-link:https://github.com/filipecosta90&gt;@filipecosta90&lt;/denchmark-link&gt;
 actually, I'll push a minimal fix in the meantime so that at least non-batched operations do not crash
		</comment>
		<comment id='8' author='filipecosta90' date='2020-04-16T14:53:47Z'>
		
@filipecosta90 actually, I'll push a minimal fix in the meantime so that at least non-batched operations do not crash

thank you &lt;denchmark-link:https://github.com/lantiga&gt;@lantiga&lt;/denchmark-link&gt;
 :)
		</comment>
	</comments>
</bug>