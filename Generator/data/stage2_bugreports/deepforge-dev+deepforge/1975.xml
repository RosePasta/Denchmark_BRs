<bug id='1975' author='brollb' open_date='2020-11-10T22:08:56Z' closed_time='2020-11-11T14:45:52Z'>
	<summary>Create multiple plots in a single operation</summary>
	<description>
Currently, this does not appear to be supported...
	</description>
	<comments>
		<comment id='1' author='brollb' date='2020-11-10T22:22:41Z'>
		This is the code that I was running and expecting to see two plots generated:
from matplotlib import pyplot as plt 
from tensorflow.keras.optimizers import Adam

class TrainNodePredictor():
    def __init__(self, model, learning_rate=0.005, epochs=50):
        self.model = model
        self.epochs = epochs
        self.learning_rate = learning_rate
    def execute(self, data, val_data):
        optimizer = Adam(lr=self.learning_rate)
        self.model.compile(optimizer=optimizer, loss='categorical_crossentropy', weighted_metrics=['acc'])
        self.model.summary()
        X, A, y = data
        val_X, val_A, val_y = val_data
        val_data = ([val_X, val_A], val_y)
        unknowns = X.argmin(2)
        history = self.model.fit([X, A],
                        y,
                        sample_weight=unknowns,
                        epochs=self.epochs,
                        validation_data=val_data,
                        shuffle=True)
        plt.figure(0)
        plt.plot(history.history['acc'], label='train')
        plt.plot(history.history['val_acc'], label='val')
        plt.title('Accuracy')
        plt.xlabel('epoch')
        plt.ylabel('accuracy')
        plt.legend(['train', 'val'])
        plt.show()

        plt.figure(1)
        plt.plot(history.history['loss'], label='train')
        plt.plot(history.history['val_loss'], label='val')
        plt.title('Loss')
        plt.xlabel('epoch')
        plt.ylabel('loss')
        plt.legend(['train', 'val'])
        plt.show()
        return self.model
		</comment>
		<comment id='2' author='brollb' date='2020-11-10T22:54:20Z'>
		This needs a fix in upstream webgme-plotly, opening an issue there.
The above comment is not correct. The widget already handles array of PlotlyJSONs.
		</comment>
	</comments>
</bug>