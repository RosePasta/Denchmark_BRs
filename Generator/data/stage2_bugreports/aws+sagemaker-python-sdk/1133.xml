<bug id='1133' author='javemar' open_date='2019-11-24T19:05:36Z' closed_time='2020-05-21T00:12:03Z'>
	<summary>Export directory already exists in Tensorflow 1.14 Sagemaker</summary>
	<description>
&lt;denchmark-h:h3&gt;System Information&lt;/denchmark-h&gt;


Framework (e.g. TensorFlow) / Algorithm (e.g. KMeans): tensorflow sagemaker
Framework Version: 1.14
Python Version:  3.6
CPU or GPU: cpu
Python SDK Version: lastest
Are you using a custom image: No

&lt;denchmark-h:h3&gt;Describe the problem&lt;/denchmark-h&gt;

When I run in the script mode with the framework version 1.14 of tensorflow, i  got the following error
AssertionError: Export directory already exists, and isn't empty. Please choose a different export directory, or delete all the contents of the specified directory: /opt/ml/model
It's weird,  because if I use the  framework version 1.13 it worked.
(There is something more that i really dont understand well, but when I use the the argument ouput_path then sagemaker will use this information to change the model_dir variable and it  gave another error. I  don't know if this is related)
&lt;denchmark-h:h3&gt;Minimal repro / logs&lt;/denchmark-h&gt;

Traceback (most recent call last):
File "train.py", line 88, in 
tf.contrib.saved_model.save_keras_model(model, model_dir)
File "/usr/local/lib/python3.6/site-packages/tensorflow/python/keras/saving/saved_model.py", line 119, in export_saved_model
input_signature)
File "/usr/local/lib/python3.6/site-packages/tensorflow/python/keras/saving/saved_model.py", line 166, in _save_v1_format
builder = saved_model_builder._SavedModelBuilder(path)
File "/usr/local/lib/python3.6/site-packages/tensorflow/python/saved_model/builder_impl.py", line 102, in init
"specified directory: %s" % export_dir)
AssertionError: Export directory already exists, and isn't empty. Please choose a different export directory, or delete all the contents of the specified directory: /opt/ml/model

Exact command to reproduce:
I use two files:

##----------------------------------------##-------------------------------------------------
#train.py:
&lt;denchmark-code&gt;
import tensorflow as tf
import os
import argparse
from tensorflow.contrib.eager.python import tfe

tf.enable_eager_execution()

def pack(features, label):
    return tf.stack(list(features.values()), axis=-1), label

def get_data(train_dir,name, batch_size):
    data =  tf.data.experimental.make_csv_dataset(
                os.path.join(train_dir, name), label_name="0", 
                  num_epochs=1,batch_size=batch_size)
    data = data.map(pack)
    return data

def create_model():
    model = tf.keras.models.Sequential(
          [tf.keras.layers.Dense( 5, activation='relu'   ),
          tf.keras.layers.Dense( 4 , activation='relu'  ),
           tf.keras.layers.Dense( 1  ,activation='sigmoid' ) ]   
       )
    return model
    
    
    
    

parser = argparse.ArgumentParser()

#  hyperparameters sent by the client are passed as command-line arguments to the script
parser.add_argument('--epochs', type=int, default=1)
parser.add_argument('--batch_size', type=int, default=64)
#parser.add_argument('--learning_rate', type=float, default=0.1)

# data directories
parser.add_argument('--train', type=str, default=os.environ.get('SM_CHANNEL_TRAIN'))
parser.add_argument('--test', type=str, default=os.environ.get('SM_CHANNEL_TEST'))



# model directory: we will use the default set by SageMaker, /opt/ml/model
parser.add_argument('--model_dir', type=str, default = os.environ.get('SM_MODEL_DIR'))
#parser.add_argument('--output-data-dir', type=str, default=os.environ['SM_OUTPUT_DATA_DIR'])

args = parser.parse_args()

if __name__ == '__main__':
    
    
    
    train_dir = args.train
    test_dir = args.test
    batch_size =  args.batch_size
    epochs = args.epochs
    #model_dir = args.model_dir
    model_dir = "/opt/ml/model"
    output_data = os.environ['SM_OUTPUT_DATA_DIR']
    
    
    
    model = create_model() 
    model.compile(loss='binary_crossentropy', optimizer='adam', metrics=["accuracy"])
    
    train_data = get_data(train_dir, "train.csv",  batch_size)
    test_data = get_data(test_dir,"test.csv", batch_size)
    
    model.fit(train_data, epochs=epochs, steps_per_epoch=50)
    
    #saver = tfe.Saver(model.variables)
    #saver.save(os.path.join(model_dir , 'weights.ckpt'))
    print ("file is:" + model_dir)
    #print (model_dir)
    
    #model.save(os.path.join(model_dir, "model.h5"))
    saver = tfe.Saver(model.variables)
    saver.save(model_dir + '/weights.ckpt')
    
    #print(r"sdfsdff\n")
    #scores = model.evaluate(test_data)
    #print (f"the accuracy score was: {scores}")
    tf.contrib.saved_model.save_keras_model(model, model_dir)


&lt;/denchmark-code&gt;

##----------------------------------------##-------------------------------------------------
#I and have a jupyter notebook with following code:
&lt;denchmark-code&gt;import tensorflow as tf
import sagemaker
import os
import pandas as pd
import numpy as np
from sklearn.model_selection import train_test_split
from sklearn.datasets import make_moons
x , y = make_moons(n_samples=300,  noise=0)
datos = pd.DataFrame( np.hstack([ y.reshape(-1,1), x   ])   )
train, test = train_test_split(datos)
train.head()
train.to_csv("train.csv", index=False)
test.to_csv("test.csv", index=False)
role =  sagemaker.get_execution_role()
sagemaker_session = sagemaker.Session()

key_prefix = "data/moons"
train_data = sagemaker_session.upload_data("train.csv", key_prefix=key_prefix)
test_data = sagemaker_session.upload_data("test.csv", key_prefix=key_prefix)
from sagemaker.tensorflow import TensorFlow

estimator = TensorFlow(sagemaker_session= sagemaker_session, 
                       role=role,entry_point='train.py',
                       train_instance_type="ml.c4.xlarge",
                       hyperparameters={"epochs":20,"batch_size":32},
                       train_instance_count=1,
                       output_path = output_path,
                       #model_dir = '/opt/ml/model',
                      framework_version="1.14", # **if I changed to 1.13, it worked**

                       py_version='py3',
                       script_mode=True
                      )

estimator.fit({"train":train_data, "test":test_data})

&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='javemar' date='2019-12-05T21:43:03Z'>
		Hello &lt;denchmark-link:https://github.com/javemar&gt;@javemar&lt;/denchmark-link&gt;
,
I apologize for the late response.
This certainly looks like a bug on our end. I'll investigate and see what happened in between the versions to better understand what is going on.
I apologize for the experience.
Thanks!
		</comment>
		<comment id='2' author='javemar' date='2019-12-17T21:53:56Z'>
		Do you still experience the same issue with Tensorflow 1.15?
		</comment>
		<comment id='3' author='javemar' date='2020-05-21T00:12:03Z'>
		closing due to lack of activity
		</comment>
	</comments>
</bug>