<bug id='123' author='mihi-r' open_date='2018-04-03T18:53:08Z' closed_time='2018-07-26T19:04:45Z'>
	<summary>Getting incorrect random string values from prediction output</summary>
	<description>
I've deployed a model which will return various things when making a prediction, including string values. Now, the int and float values are coming back fine, but my string outputs (defined as labels in my code) are returning as random strings.
For example, the string "DEV01" will return as "REVWMDQ=" instead.
Here is my prediction block:
&lt;denchmark-code&gt;  if mode == tf.estimator.ModeKeys.PREDICT:
    s3 = boto3.resource('s3')
    content_object = s3.Object('sagemaker-blah', 'labels.json')
    file_content = content_object.get()['Body'].read().decode('utf-8')
    labels = json.loads(file_content)
    labels = tf.convert_to_tensor(labels, dtype=tf.string)
    predictions={
      'index': predicted_class_index,
      'classes': labels,
      'predictions': tf.nn.softmax(scores)
    }
    export_outputs = {SIGNATURE_NAME: tf.estimator.export.PredictOutput(predictions)}
    return tf.estimator.EstimatorSpec(mode=mode, predictions=predictions, export_outputs=export_outputs)
&lt;/denchmark-code&gt;

When I just run the block of code below locally, my string values are normal:
&lt;denchmark-code&gt;s3 = boto3.resource('s3')
content_object = s3.Object('sagemaker-tcclassification', 'labels.json')
file_content = content_object.get()['Body'].read().decode('utf-8')
labels = json.loads(file_content)
labels = tf.convert_to_tensor(labels, dtype=tf.string)
&lt;/denchmark-code&gt;

Why do the string values change when outputting through tf.estimator.EstimatorSpec and SageMaker? Are they getting serialized? If so, how can I deserialize them after getting the predictions back?
	</description>
	<comments>
		<comment id='1' author='mihi-r' date='2018-04-04T01:49:13Z'>
		Hello,
I am not too sure why the string values change when outputting through tf.estimator.EstimatorSpec.
Yes, they are getting serialized before being returned. This is defined in the output_fn, which can be found in our README, &lt;denchmark-link:https://github.com/aws/sagemaker-python-sdk/blob/master/README.rst&gt;https://github.com/aws/sagemaker-python-sdk/blob/master/README.rst&lt;/denchmark-link&gt;
.
You can define your own output_fn or change the response_content_type, to see if the serialization may be causing this.
For deserializing, you can write your own deserializer or use the current existing one, &lt;denchmark-link:https://github.com/aws/sagemaker-python-sdk/blob/master/src/sagemaker/tensorflow/predictor.py&gt;https://github.com/aws/sagemaker-python-sdk/blob/master/src/sagemaker/tensorflow/predictor.py&lt;/denchmark-link&gt;
. This is specified in the predictor, &lt;denchmark-link:https://github.com/aws/sagemaker-python-sdk/blob/master/src/sagemaker/tensorflow/model.py#L22&gt;https://github.com/aws/sagemaker-python-sdk/blob/master/src/sagemaker/tensorflow/model.py#L22&lt;/denchmark-link&gt;
.
To help me further investigate this issue, can you please provide a minimum repro case?
I believe that the serialization/deserialization shouldn't be causing this issue, so I am not too sure why this is happening.
Thank you!
		</comment>
		<comment id='2' author='mihi-r' date='2018-04-05T14:08:07Z'>
		I will try a few of these suggestions out and see if I can solve the issue. Since I'm calling the endpoint through a Lambda function, I can temporarily  get around this issue by just loading the JSON file there and tacking it onto the JSON response from SageMaker.
Ideally, I'd like use a JSON response_content_type.
I'll see if I can provide a minimum repro case by next week. Thanks for the suggestions!
		</comment>
		<comment id='3' author='mihi-r' date='2018-04-19T13:11:22Z'>
		&lt;denchmark-link:https://github.com/ChoiByungWook&gt;@ChoiByungWook&lt;/denchmark-link&gt;
 Here's &lt;denchmark-link:https://github.com/mihi-r/amazon-sagemaker-stringval-repro&gt;the minimum reproduction case&lt;/denchmark-link&gt;
 you've requested.
		</comment>
		<comment id='4' author='mihi-r' date='2018-07-16T18:14:55Z'>
		The problem is in the tf_json_deserializer is returned the protobuf message parsed as JSON.
The json_formatter from protobuf is encoding the labels. I reproduced the bug with the following experiment:
import tensorflow as tf
import numpy as np

# Update with your own path
prediction_set = tf.contrib.learn.datasets.base.load_csv_without_header(
    filename=os.path.join('data/abalone_predict.csv'), target_dtype=np.int, features_dtype=np.float32)
&lt;denchmark-h:h3&gt;JSON -&gt; JSON&lt;/denchmark-h&gt;

from sagemaker.predictor import RealTimePredictor

data = prediction_set.data[0]
tensor_proto = tf.make_tensor_proto(values=np.asarray(data), shape=[1, len(data)], dtype=tf.float32)

print(abalone_predictor.predict(tensor_proto))
{'outputs': {'example_strings': {'stringVal': ['YXBwbGU=', 'YmFuYW5h', 'b3Jhbmdl'], 'tensorShape': {'dim': [{'size': '3'}]}, 'dtype': 'DT_STRING'}, 'ages': {'floatVal': [4.954165935516357], 'tensorShape': {'dim': [{'size': '1'}]}, 'dtype': 'DT_FLOAT'}}, 'modelSpec': {'version': '1531758457', 'name': 'generic_model', 'signatureName': 'serving_default'}}
&lt;denchmark-h:h3&gt;JSON -&gt; PB&lt;/denchmark-h&gt;

from sagemaker.predictor import RealTimePredictor

    
predictor = RealTimePredictor(endpoint=abalone_predictor.endpoint,
                              deserializer=tf_json_deserializer, 
                              serializer=tf_json_serializer,
                              content_type='application/json')

data = prediction_set.data[0]
tensor_proto = tf.make_tensor_proto(values=np.asarray(data), shape=[1, len(data)], dtype=tf.float32)

predictor.predict(tensor_proto)
{'modelSpec': {'name': 'generic_model',
  'signatureName': 'serving_default',
  'version': '1531758457'},
 'outputs': {'ages': {'dtype': 'DT_FLOAT',
   'floatVal': [4.954165935516357],
   'tensorShape': {'dim': [{'size': '1'}]}},
  'example_strings': {'dtype': 'DT_STRING',
   'stringVal': ['YXBwbGU=', 'YmFuYW5h', 'b3Jhbmdl'],
   'tensorShape': {'dim': [{'size': '3'}]}}}}
I have a pr with the fix &lt;denchmark-link:https://github.com/aws/sagemaker-python-sdk/pull/294&gt;#294&lt;/denchmark-link&gt;

Thanks for reporting this issue!
		</comment>
		<comment id='5' author='mihi-r' date='2018-07-20T14:47:43Z'>
		Interesting. Thanks for taking care of the issue &lt;denchmark-link:https://github.com/mvsusp&gt;@mvsusp&lt;/denchmark-link&gt;
!
		</comment>
	</comments>
</bug>