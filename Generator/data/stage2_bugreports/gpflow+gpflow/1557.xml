<bug id='1557' author='joelberkeley-secondmind' open_date='2020-09-09T12:06:12Z' closed_time='2020-10-02T14:21:05Z'>
	<summary>cryptic error for VGP with no data</summary>
	<description>
&lt;denchmark-h:h1&gt;Bug&lt;/denchmark-h&gt;

VGP produces cryptic error when provided empty data
&lt;denchmark-h:h2&gt;To reproduce&lt;/denchmark-h&gt;

Minimal, reproducible example
&lt;denchmark-code&gt;Python 3.7.5 (default, Nov  7 2019, 10:50:52) 
[GCC 8.3.0] on linux
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import gpflow
&gt;&gt;&gt; import numpy as np
&gt;&gt;&gt; kernel = gpflow.kernels.SquaredExponential(1.0, 0.1 * np.ones([2]))
&gt;&gt;&gt; likelihood = gpflow.likelihoods.Bernoulli()
&gt;&gt;&gt; gpflow.models.VGP((np.ones([0, 2]), np.ones([0, 1])), kernel, likelihood)
2020-09-09 13:04:58.751898: W tensorflow/core/framework/op_kernel.cc:1767] OP_REQUIRES failed at strided_slice_op.cc:108 : Invalid argument: slice index -1 of dimension 1 out of bounds.
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/home/joel.berkeley/git/GPflow/GPflow/gpflow/models/vgp.py", line 77, in __init__
    self.q_sqrt = Parameter(q_sqrt, transform=triangular())
  File "/home/joel.berkeley/git/GPflow/GPflow/gpflow/base.py", line 110, in __init__
    _validate_unconstrained_value(value, transform, dtype)
  File "/home/joel.berkeley/git/GPflow/GPflow/gpflow/base.py", line 217, in _validate_unconstrained_value
    unconstrained_value = _to_unconstrained(value, transform)
  File "/home/joel.berkeley/git/GPflow/GPflow/gpflow/base.py", line 234, in _to_unconstrained
    return transform.inverse(value)
  File "/home/joel.berkeley/.venv/GPflow/dev/lib/python3.7/site-packages/tensorflow_probability/python/bijectors/bijector.py", line 864, in inverse
    return self._call_inverse(y, name, **kwargs)
  File "/home/joel.berkeley/.venv/GPflow/dev/lib/python3.7/site-packages/tensorflow_probability/python/bijectors/bijector.py", line 844, in _call_inverse
    return self._cache.inverse(y, **kwargs)
  File "/home/joel.berkeley/.venv/GPflow/dev/lib/python3.7/site-packages/tensorflow_probability/python/internal/cache_util.py", line 268, in __call__
    return self.lookup(input, **kwargs)[0]
  File "/home/joel.berkeley/.venv/GPflow/dev/lib/python3.7/site-packages/tensorflow_probability/python/internal/cache_util.py", line 356, in lookup
    self._invoke(input, kwargs, attrs))
  File "/home/joel.berkeley/.venv/GPflow/dev/lib/python3.7/site-packages/tensorflow_probability/python/internal/cache_util.py", line 393, in _invoke
    return self._func(input, **kwargs)
  File "/home/joel.berkeley/.venv/GPflow/dev/lib/python3.7/site-packages/tensorflow_probability/python/bijectors/bijector.py", line 523, in &lt;lambda&gt;
    inverse_impl=(lambda y, **kwargs: self._inverse(y, **kwargs)),  # pylint: disable=unnecessary-lambda
  File "/home/joel.berkeley/.venv/GPflow/dev/lib/python3.7/site-packages/tensorflow_probability/python/bijectors/fill_triangular.py", line 95, in _inverse
    return fill_triangular_inverse(y, upper=self._upper)
  File "/home/joel.berkeley/.venv/GPflow/dev/lib/python3.7/site-packages/tensorflow_probability/python/math/linalg.py", line 993, in fill_triangular_inverse
    initial_elements = tf.reverse(x[..., -1, :], axis=[ndims - 2])
  File "/home/joel.berkeley/.venv/GPflow/dev/lib/python3.7/site-packages/tensorflow/python/util/dispatch.py", line 201, in wrapper
    return target(*args, **kwargs)
  File "/home/joel.berkeley/.venv/GPflow/dev/lib/python3.7/site-packages/tensorflow/python/ops/array_ops.py", line 1024, in _slice_helper
    name=name)
  File "/home/joel.berkeley/.venv/GPflow/dev/lib/python3.7/site-packages/tensorflow/python/util/dispatch.py", line 201, in wrapper
    return target(*args, **kwargs)
  File "/home/joel.berkeley/.venv/GPflow/dev/lib/python3.7/site-packages/tensorflow/python/ops/array_ops.py", line 1196, in strided_slice
    shrink_axis_mask=shrink_axis_mask)
  File "/home/joel.berkeley/.venv/GPflow/dev/lib/python3.7/site-packages/tensorflow/python/ops/gen_array_ops.py", line 10320, in strided_slice
    _ops.raise_from_not_ok_status(e, name)
  File "/home/joel.berkeley/.venv/GPflow/dev/lib/python3.7/site-packages/tensorflow/python/framework/ops.py", line 6843, in raise_from_not_ok_status
    six.raise_from(core._status_to_exception(e.code, message), None)
  File "&lt;string&gt;", line 3, in raise_from
tensorflow.python.framework.errors_impl.InvalidArgumentError: slice index -1 of dimension 1 out of bounds. [Op:StridedSlice] name: fill_triangular/inverse/fill_triangular_inverse/strided_slice/
&lt;/denchmark-code&gt;

&lt;denchmark-h:h2&gt;Expected behavior&lt;/denchmark-h&gt;

Either support empty data, or detail the problem in the error message
&lt;denchmark-h:h2&gt;System information&lt;/denchmark-h&gt;


GPflow version: latest develop as of writing (commit hash 7b2a0c8)
GPflow installed from: pip install -e . from a GitHub clone on the develop branch
TensorFlow version: 2.3.0
Operating system: ubuntu 18.04

	</description>
	<comments>
		<comment id='1' author='joelberkeley-secondmind' date='2020-09-09T12:39:40Z'>
		Hm, this seems more an issue of the implementation of the underlying tensorflow_probability FillTriangular bijector:
import numpy as np
import tensorflow_probability as tfp
bij = tfp.bijectors.FillTriangular()
q_sqrt = np.ones([1, 0, 0])
bij.inverse(q_sqrt)  # fails
Whereas ideally the FillTriangular bijector would return an empty array of shape (1, 0). Note that forward mode works correctly:
assert bij.forward(np.ones([1, 0])).shape == (1, 0, 0)  # works
How often (and in what use-cases) do we expect users to provide empty data to a VGP model? What would "support empty data" look like, in a meaningful way?
		</comment>
		<comment id='2' author='joelberkeley-secondmind' date='2020-09-09T13:31:02Z'>
		ok. maybe a bug I should raise with tfp

How often (and in what use-cases) do we expect users to provide empty data to a VGP model? What would "support empty data" look like, in a meaningful way?

I'm not entirely sure, I was briefly looking at how to define GPflow models as pure priors (with no initial data). I'm not sure if there's a use case for that yet
		</comment>
		<comment id='3' author='joelberkeley-secondmind' date='2020-10-02T14:21:04Z'>
		Closing as this is an underlying tensorflow-probability issue
		</comment>
	</comments>
</bug>