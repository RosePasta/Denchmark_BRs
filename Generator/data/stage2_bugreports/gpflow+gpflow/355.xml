<bug id='355' author='john-bradshaw' open_date='2017-02-25T13:12:44Z' closed_time='2017-03-07T15:11:14Z'>
	<summary>Question about `predict_density` for MultiClass likelihood</summary>
	<description>
Hey,
I had a question about lines 445-451 of GPflow/likelihoods.py, ie
    def predict_density(self, Fmu, Fvar, Y):
        if isinstance(self.invlink, RobustMax):
            gh_x, gh_w = hermgauss(self.num_gauss_hermite_points)
            p = self.invlink.prob_is_largest(Y, Fmu, Fvar, gh_x, gh_w)
            return p * (1. - self.invlink.epsilon) + (1. - p) * self.invlink._eps_K1
        else:
            raise NotImplementedError
So as I understand it this function will be called by the GPmodel class's predict_density method, which states that it returns log probabilities. I just wanted to check that this was the case and that if so that the corresponding method of the MultiClass likelihood class did log the probabilities?
(Also as an aside this method does not affect the training though I think?)
I'm asking as I'm getting odd looking density values and also cannot work out why the variational_expectations method ends with return p * np.log(1 - self.invlink.epsilon) + (1. - p) * np.log(self.invlink._eps_K1) whereas the predict_density method ends with an almost identical statement but missing the logs: return p * (1. - self.invlink.epsilon) + (1. - p) * self.invlink._eps_K1.
Thanks for your help!
	</description>
	<comments>
		<comment id='1' author='john-bradshaw' date='2017-02-27T09:28:51Z'>
		Good spot. That is a bug. Would you like to try fixing it? We should check why this isn't picked up in the unit tests also.
		</comment>
		<comment id='2' author='john-bradshaw' date='2017-02-27T09:29:30Z'>
		&lt;denchmark-link:https://github.com/jameshensman&gt;@jameshensman&lt;/denchmark-link&gt;
 I'm surprised this hasn't caused trouble sooner?
		</comment>
		<comment id='3' author='john-bradshaw' date='2017-02-27T10:46:35Z'>
		Me too. Let's make sure there's a regression test.

How about changing predict_density for predict_log_density, for clarity? With suitable deprecation warnings of course
&lt;denchmark-link:#&gt;…&lt;/denchmark-link&gt;


Sent from my iPhone
 On 27 Feb 2017, at 09:29, Alexander G. de G. Matthews ***@***.***&gt; wrote:

 @jameshensman I'm surprised this hasn't caused trouble sooner?

 —
 You are receiving this because you were mentioned.
 Reply to this email directly, view it on GitHub, or mute the thread.



		</comment>
		<comment id='4' author='john-bradshaw' date='2017-02-28T10:14:24Z'>
		So I think the testSymmetric method of TestRobustMaxMulticlass was incorrect, which was why it was passing. Some of the test methods of the TestPredictConditional class were also indirectly testing this method too through their call of predict_mean_and_var, however, I assume as the variance for the f values for these calls were 0 that the p calculated would be either almost exactly 1.0 or 0.0. And then
exp(1 * ln(1-10^-3) + 0* ...) = 1* (1 - 10^-3) + 0 * ...
(although I haven't checked for sure this is actually what is happening.)
I've created a pull request:
&lt;denchmark-link:https://github.com/GPflow/GPflow/pull/359&gt;#359&lt;/denchmark-link&gt;

Please let me know what you think. I haven't changed all the predict_density to predict_log_density, but happy to do so in a follow up PR if you want?
		</comment>
		<comment id='5' author='john-bradshaw' date='2017-03-07T15:11:14Z'>
		Fixed in &lt;denchmark-link:https://github.com/GPflow/GPflow/pull/359&gt;#359&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>