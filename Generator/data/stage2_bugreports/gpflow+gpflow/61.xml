<bug id='61' author='jameshensman' open_date='2016-04-29T15:44:06Z' closed_time='2016-05-27T15:11:11Z'>
	<summary>autoflow fails after reset_default_graph</summary>
	<description>
Sometimes it's necessary to reseat tensorflow's graph for memory reasons. This can be done with tf.reset_default_graph().
Problem is, this breaks all out AutoFlow functions! Here's a MWE:
tf.reset_default_graph()
k = GPflow.kernels.Matern32(1)
X, Y = np.random.randn(2, 10, 1)
m = GPflow.gpr.GPR(X, Y, kern=k)
m.predict_f(m.X)
This is because the Autoflow constructor takes placeholders as arguments. After reset_default_graph, those placeholders are not on the same graph as everything else.  I'm going to propose a fix where we just give AutoFlow enough information to make the placeholders, not the placeholders themselves.
	</description>
	<comments>
		<comment id='1' author='jameshensman' date='2016-05-23T18:11:07Z'>
		Could this be related to the following bug? If I recompile a model, suddenly the predictions go out the window!
&lt;denchmark-code&gt;import numpy as np
import numpy.random as rnd
import matplotlib.pyplot as plt
import GPflow

X = rnd.rand(100, 1)
Y = np.sin(X*4) + rnd.randn(100, 1)*0.1

# mod = GPflow.sgpr.GPRFITC(X, Y, GPflow.kernels.RBF(1), rnd.rand(10, 1))
mod = GPflow.sgpr.SGPR(X, Y, GPflow.kernels.RBF(1), rnd.rand(10, 1))
mod.optimize(max_iters=100)

pX = np.linspace(0, 1, 100)[:, None]
pY1, pYv1 = mod.predict_y(pX)

mod._compile()
pY2, pYv2 = mod.predict_y(pX)

plt.plot(X, Y, 'x')
plt.plot(pX, pY1)
plt.plot(pX, pY2)
&lt;/denchmark-code&gt;

		</comment>
		<comment id='2' author='jameshensman' date='2016-05-24T07:38:02Z'>
		Oh dear, what horrible behaviour.
You'll be pleased to know that it seems to be fixed by &lt;denchmark-link:https://github.com/GPflow/GPflow/pull/62&gt;#62&lt;/denchmark-link&gt;
 (try git checkout autoflow_graph_bug_bugfix)
I've not merged &lt;denchmark-link:https://github.com/GPflow/GPflow/pull/62&gt;#62&lt;/denchmark-link&gt;
 yet because the tests timeout on the codeship server. I could really do with some help making the tests run faster.
		</comment>
		<comment id='3' author='jameshensman' date='2016-05-24T09:55:35Z'>
		Do you have any pointers as to where speedups could be made? And how much faster are we talking?
		</comment>
		<comment id='4' author='jameshensman' date='2016-05-24T12:49:47Z'>
		I have a hypothesis: using an InteractiveSession() might help.
If that worked, I'd be really happy. If not, we might have to either look
at merging some tests (Alex has done this a bit in the past) or just
running the tests on a bigger machine, or in parallel. eek.
On Tue, 24 May 2016 at 10:55 Mark van der Wilk &lt;denchmark-link:mailto:notifications@github.com&gt;notifications@github.com&lt;/denchmark-link&gt;

wrote:

Do you have any pointers as to where speedups could be made?
â€”
You are receiving this because you authored the thread.
Reply to this email directly or view it on GitHub
#61 (comment)

		</comment>
		<comment id='5' author='jameshensman' date='2016-05-24T14:51:19Z'>
		&lt;denchmark-link:https://github.com/markvdw&gt;@markvdw&lt;/denchmark-link&gt;
 I'm talking to &lt;denchmark-link:https://github.com/jameshensman&gt;@jameshensman&lt;/denchmark-link&gt;
 about the slow tests on &lt;denchmark-link:https://github.com/GPflow/GPflow/issues/67&gt;#67&lt;/denchmark-link&gt;

		</comment>
		<comment id='6' author='jameshensman' date='2016-05-24T14:53:21Z'>
		&lt;denchmark-link:https://github.com/markvd&gt;@markvd&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/jameshensman&gt;@jameshensman&lt;/denchmark-link&gt;
 I think that the problem might be that _compile() calls tf.initialize_all_variables() which will set all the variables back to their pre-optimized values.
This refers specifically to Mark's code snippet.
		</comment>
		<comment id='7' author='jameshensman' date='2016-05-24T15:05:35Z'>
		I don't think that an InteractiveSession will help. Effectively that just sets up the one session object which is used by default and automatically under the hood.
		</comment>
	</comments>
</bug>