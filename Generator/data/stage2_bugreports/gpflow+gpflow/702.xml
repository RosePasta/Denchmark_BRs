<bug id='702' author='mrksr' open_date='2018-04-04T11:59:33Z' closed_time='2018-05-02T10:40:36Z'>
	<summary>An action's watcher is not initialized properly</summary>
	<description>
I have been playing around with the new actions interface and it seems like the watcher of an action is not initialized properly. I think the problem is here:



GPflow/gpflow/actions.py


         Line 128
      in
      f5d8cc4






 return _get_attr(self, _watcher=Watcher()) 





This example fails:
import gpflow

class ElapsedLogger(gpflow.actions.Action):
    def run(self, context):
        print(context.time_spent)

loop = gpflow.actions.Loop(
    [
        ElapsedLogger(),
    ],
    stop=500
)

#loop._watcher = gpflow.actions.Watcher()
loop()
It raises a TypeError:
&lt;denchmark-code&gt;---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
&lt;ipython-input-2-d1c5550c8771&gt; in &lt;module&gt;()
     13 
     14 #loop._watcher = gpflow.actions.Watcher()
---&gt; 15 loop()

/bam-job-inputs/lib/gpflow/gpflow/actions.py in __call__(self, context)
    141         try:
    142             self.watcher.start()
--&gt; 143             self.run(context)
    144         finally:
    145             self.watcher.stop()

/bam-job-inputs/lib/gpflow/gpflow/actions.py in run(self, context)
    238                 break
    239             try:
--&gt; 240                 self._action(context)
    241             except Loop.Continue:
    242                 continue

/bam-job-inputs/lib/gpflow/gpflow/actions.py in __call__(self, context)
    141         try:
    142             self.watcher.start()
--&gt; 143             self.run(context)
    144         finally:
    145             self.watcher.stop()

/bam-job-inputs/lib/gpflow/gpflow/actions.py in run(self, context)
    261         """
    262         for action in self._actions:
--&gt; 263             action(context)
    264 
    265 

/bam-job-inputs/lib/gpflow/gpflow/actions.py in __call__(self, context)
    141         try:
    142             self.watcher.start()
--&gt; 143             self.run(context)
    144         finally:
    145             self.watcher.stop()

&lt;ipython-input-2-d1c5550c8771&gt; in run(self, context)
      3 class ElapsedLogger(gpflow.actions.Action):
      4     def run(self, context):
----&gt; 5         print(context.time_spent)
      6 
      7 loop = gpflow.actions.Loop(

/bam-job-inputs/lib/gpflow/gpflow/actions.py in time_spent(self)
     98             :return: Spent time [Âµs] by owner on running up to the call.
     99         """
--&gt; 100         return self.owner.watcher.elapsed
    101 
    102 

/bam-job-inputs/lib/gpflow/gpflow/actions.py in elapsed(self)
     60         """
     61         if self._stop is None:
---&gt; 62             return timer() - self._start
     63         return self._stop - self._start
     64 

TypeError: unsupported operand type(s) for -: 'float' and 'NoneType'
&lt;/denchmark-code&gt;

In the end the problem is that self._start is None which I think is due to the fact that the watcher on which start() was called is not the watcher which is found by the context.
If I explicitly set the watcher by uncommenting the line in the example everything works.
	</description>
	<comments>
		<comment id='1' author='mrksr' date='2018-04-04T12:23:29Z'>
		I ran into this bug yesterday as well! It will be fixed very soon -- we're merging gpflow_monitor into GPflow, using the actions framework.
		</comment>
		<comment id='2' author='mrksr' date='2018-04-06T19:08:36Z'>
		&lt;denchmark-link:https://github.com/markvdw&gt;@markvdw&lt;/denchmark-link&gt;
, can you cover this case in your branch by simple test?
		</comment>
		<comment id='3' author='mrksr' date='2018-05-02T10:40:36Z'>
		This is fixed.
		</comment>
	</comments>
</bug>