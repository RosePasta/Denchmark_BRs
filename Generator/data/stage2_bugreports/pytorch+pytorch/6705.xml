<bug id='6705' author='ezyang' open_date='2018-04-18T13:59:12Z' closed_time='2020-10-20T14:46:29Z'>
	<summary>valgrind chokes on rdrand from gcc libstdc++</summary>
	<description>
I've attempted to use valgrind on PyTorch in the past and ran into &lt;denchmark-link:https://bugs.kde.org/show_bug.cgi?id=387940&gt;https://bugs.kde.org/show_bug.cgi?id=387940&lt;/denchmark-link&gt;

Apparently, the culprit was -march=native. If you're going to valgrind your PyTorch, you shouldn't build with this flag.
This issue is to track:

Testing that this indeed resolves the issue
Making it easy to turn of -march=native in case you are doing a valgrind run

cc &lt;denchmark-link:https://github.com/VitalyFedyunin&gt;@VitalyFedyunin&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='ezyang' date='2018-04-18T14:34:40Z'>
		When and what do we build with -march=native? ðŸ˜®
		</comment>
		<comment id='2' author='ezyang' date='2018-04-18T14:40:29Z'>
		Maybe it's not actually -march=native, but explicit requests for funny instructions, e.g., in our CPU kernels.
		</comment>
		<comment id='3' author='ezyang' date='2018-04-18T17:30:26Z'>
		That's possible. We should just make it possible to control the implementation selector via env vars, so you can disable those paths for debugging and testing.
		</comment>
		<comment id='4' author='ezyang' date='2018-04-18T22:20:10Z'>
		I ran into this exact same issue when I was running &lt;denchmark-link:https://github.com/pytorch/pytorch/blob/master/aten/tools/run_tests.sh#L24&gt;https://github.com/pytorch/pytorch/blob/master/aten/tools/run_tests.sh#L24&lt;/denchmark-link&gt;
 with CUDA enabled, although there is no error if the CUDA path is avoided and  is not called. I wondered if this is Valgrind's incompatibility with CUDA?
		</comment>
		<comment id='5' author='ezyang' date='2018-04-24T21:14:24Z'>
		You can disable the AVX and AVX2 kernels by setting both environment variables ATEN_DISABLE_AVX2=1 ATEN_DISABLE_AVX=1.
But that's NOT the issue you're seeing. The issue is that GCC's libstdc++ uses RDRAND for std::random_device on Linux. I suspect that's in the library and doesn't depend on any compiler flag we provide. (We're not compiling the relevant code with -march=...)
&lt;denchmark-link:http://www.pcg-random.org/posts/cpps-random_device.html&gt;http://www.pcg-random.org/posts/cpps-random_device.html&lt;/denchmark-link&gt;

On Linux, we could switch to reading from /dev/urandom instead of std::random_device.
		</comment>
		<comment id='6' author='ezyang' date='2020-10-20T14:46:29Z'>
		Upstream reports this bug is fixed &lt;denchmark-link:https://bugs.kde.org/show_bug.cgi?id=353370&gt;https://bugs.kde.org/show_bug.cgi?id=353370&lt;/denchmark-link&gt;
 so I'm gonna assume that you can get a recent enough version valgrind to work aroudn this problem
		</comment>
	</comments>
</bug>