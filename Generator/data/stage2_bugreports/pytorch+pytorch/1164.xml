<bug id='1164' author='bunelr' open_date='2017-03-31T21:05:26Z' closed_time='2017-04-08T00:25:05Z'>
	<summary>Incorrect output for remainder function on integer type tensors</summary>
	<description>
Reproduction code:
import torch

nb_elts = 3

coords = torch.range(0, nb_elts-1, 1)
x_coord = coords.unsqueeze(1).expand(nb_elts, nb_elts)
y_coord = coords.unsqueeze(0).expand(nb_elts, nb_elts)

to_diagonal = (x_coord - y_coord)

print("To diagonal:")
print(to_diagonal)

print("Remainder - Floating point:")
print(to_diagonal.remainder(nb_elts))
print("Fmod - Floating point:")
print(to_diagonal.fmod(nb_elts))


to_diagonal = to_diagonal.long()
print("Remainder - Long:")
print(to_diagonal.remainder(nb_elts))
print("Fmod - Long:")
print(to_diagonal.fmod(nb_elts))
Generated output:
&lt;denchmark-code&gt;$ python bug.py 
To diagonal:

 0 -1 -2
 1  0 -1
 2  1  0
[torch.FloatTensor of size 3x3]

Remainder - Floating point:

 0  2  1
 1  0  2
 2  1  0
[torch.FloatTensor of size 3x3]

Fmod - Floating point:

 0 -1 -2
 1  0 -1
 2  1  0
[torch.FloatTensor of size 3x3]

Remainder - Long:

 0 -1 -2
 1  0 -1
 2  1  0
[torch.LongTensor of size 3x3]

Fmod - Long:

 0 -1 -2
 1  0 -1
 2  1  0
[torch.LongTensor of size 3x3]
&lt;/denchmark-code&gt;

The interesting section to look at is Remainder - Long. You observe that it gets the same output as with fmod, while for a floating point tensor, you get different results.
According to the docs, The remainder has the same sign as the divisor., which is not the case here.
The weekend is coming up, so I can look at fixing + adding test to avoid regression if you want.
I imagine that looking around the neighbourhood of &lt;denchmark-link:https://github.com/pytorch/pytorch/commit/f16a624b35dd28fbd4cdcd3bd08dfc2421c3e2b0&gt;f16a624&lt;/denchmark-link&gt;
 would be the place to start.
	</description>
	<comments>
		<comment id='1' author='bunelr' date='2017-03-31T21:11:10Z'>
		Forgot to mention:
Tested on both a pip install and a source install from commit &lt;denchmark-link:https://github.com/pytorch/pytorch/commit/e4b4e515cd5bd0246b38f6a41e38c6fe285eb084&gt;e4b4e51&lt;/denchmark-link&gt;

OS is Ubuntu 16.04
		</comment>
		<comment id='2' author='bunelr' date='2017-04-01T19:26:49Z'>
		Identified the problem, it's lying &lt;denchmark-link:https://github.com/pytorch/pytorch/blob/master/torch/lib/TH/generic/THTensorMath.c#L726&gt;here&lt;/denchmark-link&gt;

To compute the remainder like this, you would want to have the floor of the result of the division between *t_data and value. However, C integer division works on a "truncation towards zero basis".
What this means is that the the current implementation is going to be incorrect when:

*t_data and value are of a different sign
the result of their division is not an integer.

I'm looking at what is the cleanest way to fix this without adding unnecessary computation.
		</comment>
	</comments>
</bug>