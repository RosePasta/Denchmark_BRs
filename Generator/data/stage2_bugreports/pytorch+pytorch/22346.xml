<bug id='22346' author='jamesr66a' open_date='2019-06-28T17:58:28Z' closed_time='2019-12-07T09:20:39Z'>
	<summary>Build with MKLDNN broken</summary>
	<description>
&lt;denchmark-h:h2&gt;üêõ Bug&lt;/denchmark-h&gt;

Source build fails because of MKL-DNN's use of -Werror and there being a warning thrown in the code
&lt;denchmark-h:h2&gt;To Reproduce&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;export CMAKE_PREFIX_PATH=${CONDA_PREFIX:-"$(dirname $(which conda))/../"}
REL_WITH_DEB_INFO=1 NO_CAFFE2_OPS=1 NO_CUDA=1 USE_FBGEMM=1 time python setup.py develop
&lt;/denchmark-code&gt;

&lt;denchmark-code&gt;[2/1073] Building CXX object third_party/ideep/mkl-dnn/src/CMakeFiles/mkldnn.dir/common/utils.cpp.o
FAILED: third_party/ideep/mkl-dnn/src/CMakeFiles/mkldnn.dir/common/utils.cpp.o 
/usr/lib64/ccache/c++  -DMKLDNN_DLL -DMKLDNN_DLL_EXPORTS -DMKLDNN_THR=MKLDNN_THR_OMP -DONNX_ML=1 -DONNX_NAMESPACE=onnx_torch -DTH_BLAS_MKL -DUSE_C11_ATOMICS=1 -DUSE_MKL -D__STDC_CONSTANT_MACROS -D__STDC_LIMIT_MACROS -I../third_party/protobuf/src -I../cmake/../third_party/benchmark/include -I../third_party/onnx -Ithird_party/onnx -I../third_party/foxi -Ithird_party/foxi -I../third_party/ideep/mkl-dnn/include -Ithird_party/ideep/mkl-dnn/include -I../third_party/ideep/mkl-dnn/src -I../third_party/ideep/mkl-dnn/src/common -I../third_party/ideep/mkl-dnn/src/cpu -I../third_party/ideep/mkl-dnn/src/cpu/xbyak -I../third_party/ideep/mkl-dnn/src/../include -isystem third_party/gloo -isystem ../cmake/../third_party/gloo -isystem ../cmake/../third_party/googletest/googlemock/include -isystem ../cmake/../third_party/googletest/googletest/include -isystem /home/jamesreed/miniconda3/include -isystem ../third_party/gemmlowp -isystem ../third_party/neon2sse -isystem ../third_party -isystem ../cmake/../third_party/eigen -isystem /home/jamesreed/miniconda3/include/python3.7m -isystem /home/jamesreed/miniconda3/lib/python3.7/site-packages/numpy/core/include -isystem ../torch/include -Wno-deprecated -fvisibility-inlines-hidden -fopenmp -std=c++11 -fvisibility-inlines-hidden  -Wall -Wno-unknown-pragmas -Werror -fvisibility=internal -march=native -mtune=native -fPIC -Wformat -Wformat-security -fstack-protector-strong  -fopenmp -Wmissing-field-initializers  -Wno-strict-overflow  -O2 -g -DNDEBUG -fPIC   -DCAFFE2_USE_GLOO -DHAVE_GCC_GET_CPUID -DUSE_AVX -DUSE_AVX2 -Wno-maybe-uninitialized -Wno-strict-overflow -Wno-error=strict-overflow -Wno-tautological-compare -std=gnu++11 -MD -MT third_party/ideep/mkl-dnn/src/CMakeFiles/mkldnn.dir/common/utils.cpp.o -MF third_party/ideep/mkl-dnn/src/CMakeFiles/mkldnn.dir/common/utils.cpp.o.d -o third_party/ideep/mkl-dnn/src/CMakeFiles/mkldnn.dir/common/utils.cpp.o -c ../third_party/ideep/mkl-dnn/src/common/utils.cpp
../third_party/ideep/mkl-dnn/src/common/utils.cpp: In function ‚Äòint mkldnn::impl::mkldnn_getenv(char*, const char*, int)‚Äô:
../third_party/ideep/mkl-dnn/src/common/utils.cpp:50:24: error: ‚Äòchar* strncpy(char*, const char*, size_t)‚Äô output truncated before terminating nul copying as many bytes from a string as its length [-Werror=stringop-truncation]
                 strncpy(value, buffer, value_length);
                 ~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~
../third_party/ideep/mkl-dnn/src/common/utils.cpp:46:34: note: length computed here
             value_length = strlen(buffer);
                            ~~~~~~^~~~~~~~
cc1plus: all warnings being treated as errors
&lt;/denchmark-code&gt;

Build works fine with USE_MKLDNN=0.
&lt;denchmark-h:h2&gt;Expected behavior&lt;/denchmark-h&gt;

Builds successfully
&lt;denchmark-h:h2&gt;Environment&lt;/denchmark-h&gt;

Collecting environment information...
PyTorch version: N/A
Is debug build: N/A
CUDA used to build PyTorch: N/A
OS: Fedora release 29 (Twenty Nine)
GCC version: (GCC) 8.2.1 20180801 (Red Hat 8.2.1-2)
CMake version: version 3.14.0
Python version: 3.7
Is CUDA available: N/A
CUDA runtime version: 10.1.168
GPU models and configuration: GPU 0: GeForce RTX 2080
Nvidia driver version: 430.26
cuDNN version: Could not collect
Versions of relevant libraries:
[pip] numpy==1.16.4
[conda] blas                      1.0                         mkl
[conda] mkl                       2019.4                      243
[conda] mkl-include               2019.4                      243
[conda] mkl_fft                   1.0.12           py37ha843d7b_0
[conda] mkl_random                1.0.2            py37hd81dba3_0
&lt;denchmark-h:h2&gt;Additional context&lt;/denchmark-h&gt;

	</description>
	<comments>
		<comment id='1' author='jamesr66a' date='2019-07-02T21:28:02Z'>
		It looks like having already been fixed long time ago, probably should ask ideep to update submodule. &lt;denchmark-link:https://github.com/oneapi-src/oneDNN/commit/983e097a93a47ad3ffa0815c9c9b6eb7c610b732&gt;oneapi-src/oneDNN@983e097&lt;/denchmark-link&gt;

		</comment>
		<comment id='2' author='jamesr66a' date='2019-07-09T23:46:57Z'>
		&lt;denchmark-link:https://github.com/xuhdev&gt;@xuhdev&lt;/denchmark-link&gt;
 Yes. The issue was fixed with MKL-DNN 0.19 and later releases. We will upgrade from IDEEP side to fix the problem. Thanks for the reminder.
		</comment>
		<comment id='3' author='jamesr66a' date='2019-08-07T02:50:31Z'>
		Is the problem fixed ? I download the latest version of pytorch, the problem is exists.
		</comment>
		<comment id='4' author='jamesr66a' date='2019-08-07T03:26:14Z'>
		&lt;denchmark-link:https://github.com/mdreammao&gt;@mdreammao&lt;/denchmark-link&gt;
 PR &lt;denchmark-link:https://github.com/pytorch/pytorch/pull/22910&gt;#22910&lt;/denchmark-link&gt;
 should solve the problem and it is being reviewed.
		</comment>
		<comment id='5' author='jamesr66a' date='2019-08-07T04:56:56Z'>
		
@mdreammao PR #22910 should solve the problem and it is being reviewed.

so which version should I download and to build with?
		</comment>
		<comment id='6' author='jamesr66a' date='2019-08-07T06:17:46Z'>
		&lt;denchmark-link:https://github.com/mdreammao&gt;@mdreammao&lt;/denchmark-link&gt;

Pls try to apply the patch in &lt;denchmark-link:https://github.com/pytorch/pytorch/pull/22910&gt;#22910&lt;/denchmark-link&gt;
 , then run "git submodule update --init --recursive".
Thanks.
		</comment>
		<comment id='7' author='jamesr66a' date='2019-08-07T07:59:20Z'>
		Thank you! I'll try to build by your branch.&lt;denchmark-link:https://github.com/gujinghui&gt;@gujinghui&lt;/denchmark-link&gt;

		</comment>
		<comment id='8' author='jamesr66a' date='2019-08-16T23:02:10Z'>
		Just wanted to let you know that Intel MKL-DNN does not use -Werror in the builds by default starting from v0.20.
		</comment>
		<comment id='9' author='jamesr66a' date='2019-12-07T09:20:39Z'>
		 in  is currently at . It enable  only if  is set to , which is not default. &lt;denchmark-link:https://github.com/pytorch/pytorch/pull/22910&gt;gh-22910&lt;/denchmark-link&gt;
 was merged, and I can no longer reproduce this issue. So pretty sure it was fixed, closing.
		</comment>
	</comments>
</bug>