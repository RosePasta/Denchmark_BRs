<bug id='1904' author='vectorzeroinc' open_date='2019-07-17T18:07:11Z' closed_time='2020-02-07T16:16:49Z'>
	<summary>Support for OpenDRIVE spiral (clothoid) curves</summary>
	<description>
CARLA currently crashes if the OpenDRIVE data contains spiral curves.  In issue &lt;denchmark-link:https://github.com/carla-simulator/carla/issues/1335&gt;#1335&lt;/denchmark-link&gt;
, it is mentioned that these are unsupported because RoadRunner does not generate spirals.
The &lt;denchmark-link:https://tracetransit.atlassian.net/wiki/spaces/SIM/pages/621707265/RoadRunner+Release+Notes+History&gt;latest version of RoadRunner&lt;/denchmark-link&gt;
 now supports all OpenDRIVE curve types (including spirals), so it would be awesome if support could be added to CARLA.
Here's a couple options for evaluating clothoid curves that have worked well for us:

Sample code on the OpenDRIVE website
G1fitting library

	</description>
	<comments>
		<comment id='1' author='vectorzeroinc' date='2019-07-22T09:28:31Z'>
		Thanks for the samples &lt;denchmark-link:https://github.com/vectorzeroinc&gt;@vectorzeroinc&lt;/denchmark-link&gt;

Do you guys know any efficient "nearest point to clothoid" function around?
		</comment>
		<comment id='2' author='vectorzeroinc' date='2019-07-22T22:03:05Z'>
		We don't have a specific library/algorithm for "nearest point to clothoid". Internally, we implement our point-to-curve functionality in a curve-independent manner.
Roughly, we use the following approach:

Adaptively tessellate the curve into a polyline based on a minimum error threshold. This is typically performed once per curve and cached (so it can be re-used for visualization, etc.)
Find the nearest location on the polyline. Each vertex on our polyline also stores the parameter (s-value) of the corresponding point on the curve, so we can linearly interpolate those parameters to get an initial guess of the s-value for the closest point on the curve.
If needed, we locally refine the guess (limiting our search range to the s-values of the nearby polyline points).

		</comment>
		<comment id='3' author='vectorzeroinc' date='2019-07-22T22:26:48Z'>
		It looks like CARLA also doesn't support the "paramPoly3" geometry type, which RoadRunner can now create as well. These are fairly typical cubic curves, and we're happy to answer any questions about our support for that type.
We have found that both the 'spiral' type and the 'paramPoly3' type are quite widely-used in existing industry data, so it would be quite beneficial if CARLA could support both.
Note that RoadRunner does not export the 'poly3' type (and likely never will). That geometry type is quite odd, and I have always considered it as obsolete with the introduction of paramPoly3.
By the way: You can test both curve types in RoadRunner using the new "explicit" road curve representation.  &lt;denchmark-link:https://tracetransit.atlassian.net/wiki/spaces/VS/pages/742096931/Road+Plan+Tool#RoadPlanTool-ToMakeaRoadCurveExplicit&gt;Here's&lt;/denchmark-link&gt;
 some documentation on that feature.
The &lt;denchmark-link:http://opendrive.org/download.html&gt;OpenDRIVE samples&lt;/denchmark-link&gt;
 also include examples of these geometry types. Eg:

The Crossing8Course example (and others) includes spirals.
The Atlatec example includes paramPoly3.

		</comment>
		<comment id='4' author='vectorzeroinc' date='2019-07-26T08:36:53Z'>
		Hey there,
I tried to implement such support for the last couple of days in the context of my bachelor-thesis.
As i far as I understand the existing code, the DistanceTo() method in Geometry.cpp has to be implemented. What I don't get is why it returns a pair&lt;float,float&gt; and what distance is beeing calculated.
My approach  was kind of close to what &lt;denchmark-link:https://github.com/vectorzeroinc&gt;@vectorzeroinc&lt;/denchmark-link&gt;
  wrote. I filled a vector with points on the spiral ( using PosFromDist() ), then calculated the Distance and returned the shortest one.
A problem I had was, that the missing of laneoffsets in the .xodr-file lead to prohibited memory access. So i couldn't test my solution properly.
The result is me getting routePlanner-objects that contain NaN-values, which i haven't been able to trace until now.
I would appreciateit, if you could red through and maybe help me find the "error's root".
Kind regards,
Mike
My code for DistanceTo() :
&lt;denchmark-code&gt;std::pair&lt;float, float&gt; GeometrySpiral::DistanceTo(const geom::Location &amp;location) const
{
  const double step_size = 1;//stepsize in meter


  std::cout &lt;&lt; "=====================DEBUG====================&gt;Geometry.cpp Spiral::DistanceTo  I WAS HERE " &lt;&lt; std::endl;

  //number of vertices by stepsize (s)
  u_long vertex_count =  static_cast&lt;u_long&gt;(_length/step_size);

  std::vector&lt;std::pair&lt;int, double&gt;&gt; verts;
  std::pair&lt;int, double&gt; shortest_distance;

  //port to poly-line (one vertex per meter)
  for (u_long s = 0; s &lt;= vertex_count; s++)
  {
    //compute vertex array
    DirectedPoint point_on_spiral = PosFromDist(s);
    std::pair&lt;u_long, double&gt; push_back_pair;


    //compute distanceToPoint
    double Xs = point_on_spiral.location.x;
    double Ys = point_on_spiral.location.y;
    double Xp = location.x;
    double Yp = location.y;

    push_back_pair.first = s;
    push_back_pair.second = std::sqrt(std::pow(Xs - Xp, 2) + std::pow(Ys - Yp, 2));
    verts.push_back(push_back_pair);

    //store shortest;
    if (s==0)
    {
      shortest_distance.first = verts.at(s).first;
      shortest_distance.second = verts.at(s).second;
    }
    else
    {
      if(verts[s].second &lt; shortest_distance.second)
      {
        shortest_distance.first = verts.at(s).first;
        shortest_distance.second = verts.at(s).second;
      }
    }
      
  }
  
  std::cout &lt;&lt; "=====================DEBUG====================&gt;Geometry.cpp Spiral::DistanceTo  shortest_distance  -&gt; s: "&lt;&lt;shortest_distance.first&lt;&lt; " | dist: "&lt;&lt;shortest_distance.second &lt;&lt; std::endl;
  
  return shortest_distance;
}

&lt;/denchmark-code&gt;

		</comment>
		<comment id='5' author='vectorzeroinc' date='2019-07-29T11:10:05Z'>
		Hi, &lt;denchmark-link:https://github.com/vectorzeroinc&gt;@vectorzeroinc&lt;/denchmark-link&gt;

Awesome! Thanks for your valuable explanation and your references. We will focus on this in some time.
Also, hi &lt;denchmark-link:https://github.com/MikeTroppmann&gt;@MikeTroppmann&lt;/denchmark-link&gt;
,
Thanks for your interest in solving this :)
It's true that we missed the docs on that one! You can find more about that  in  on the equivalent  functions for the other geometries. It returns a pair containing:

First:  distance to the nearest point in this line from the beginning of the shape (s OpenDRIVE value).
Second: Euclidean distance from the nearest point in this geometry to the actual point.

Also, you could consider using our geom::Math::DistanceSegmentToPoint() to compute even a more accurate value!
I'm not sure what is your problem regarding the lane offsets, but I guess that is that we store all of them regarding the start of the road, not the lane segment (if I remember correctly). This is an optimization where we precompute the addition of all the cubic polynomials (see LibCarla/source/carla/geom/CubicPolynomial.h) using all the offsets that are affecting the road, so we can evaluate a single polynomial instead of the addition of all of them.
Hope this helps!
Cheers!
		</comment>
		<comment id='6' author='vectorzeroinc' date='2019-09-23T08:23:12Z'>
		Hey there &lt;denchmark-link:https://github.com/marcgpuig&gt;@marcgpuig&lt;/denchmark-link&gt;
 and &lt;denchmark-link:https://github.com/vectorzeroinc&gt;@vectorzeroinc&lt;/denchmark-link&gt;
 !
After finding myself confronted with more and more problems on my way to implementing the features and compatibility i need, i had to suspend my work until geometry support is implemented in a standardized way.
That leads me to this question:
Are there plans or deadlines when ParamPoly3- and Clothoidsupport is going to be implemented?
Greetings,
Mike
		</comment>
		<comment id='7' author='vectorzeroinc' date='2019-11-14T10:27:55Z'>
		Any update on the possibility to have ParamPoly3 or Spiral supported by Carla? Dates?
		</comment>
		<comment id='8' author='vectorzeroinc' date='2019-12-18T05:19:19Z'>
		Are there any list of supported OpenDRIVE tags in Carla? I can only see that of OpenSCENARIO.
		</comment>
		<comment id='9' author='vectorzeroinc' date='2019-12-18T08:08:10Z'>
		&lt;denchmark-link:https://github.com/kino3&gt;@kino3&lt;/denchmark-link&gt;
 Yes, &lt;denchmark-link:http://www.opendrive.org/&gt;OpenDrive&lt;/denchmark-link&gt;
 manual explains all of them.
		</comment>
		<comment id='10' author='vectorzeroinc' date='2020-02-11T17:03:15Z'>
		Awesome! Our customers will be thrilled by this, and we're looking forward to trying it out!
		</comment>
	</comments>
</bug>