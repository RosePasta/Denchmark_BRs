<bug id='1894' author='bernatx' open_date='2019-07-16T09:29:01Z' closed_time='2019-09-23T11:29:38Z'>
	<summary>Build problem on Windows (Shipping mode)</summary>
	<description>
Windows build is broken with the last changes for shipping mode.
AHUD::DrawText() shows as unresolved external link error.
	</description>
	<comments>
		<comment id='1' author='bernatx' date='2019-07-18T10:16:13Z'>
		Hi,
We fixed the problem.
It seems that windows manage Unicode functions in his API in a way that affect globally.
All functions that use strings (Unicode and ANSI) are splitted in two version, one for Unicode end with 'W', and other version for ANSI end with 'A'. From the point of view of the user exist only one function, but internally the compiler needs to use one or the other. If the compiler has the flag UNICODE then it will use the version of the function end with 'W'. In other case, it will use the version end with 'A'.
For example, when the user wants to use the API function DrawText(), the compiler will use the function DrawTextW() or DrawTextA() instead depending of the UNICODE flag.
To accomplish that, windows has in some headers a piece of code like this:
&lt;denchmark-code&gt;#ifdef UNICODE
  #define DrawText  DrawTextW
#else
  #define DrawText  DrawTextA
#endif
&lt;/denchmark-code&gt;

The problem is that Unreal has a function called DrawText also, that is not related with the Windows API function DrawText(). But because the windows headers will change that name globally (by preprocessor), in our project, each use of DrawText() function will be translated to any of the versions the compiler chooses (Unreal is Unicode only, so it will take the 'W' version always). The error will become at the linker step, because that function will not be found in the modules of Unreal (Engine.dll in our case), resulting in a linker error like this:
error LNK2019: unresolved external symbol "__declspec(dllimport) public: void __cdecl AHUD::DrawTextW(...)"
The linker is trying to find the DrawTextW() function instead of DrawText().
The solution found, is just undefine the definition Windows does in headers automatically:
#undef DrawText
We should do that for any function that is in conflict with the Windows API.
The undesired result is that you can not use the Windows API DrawText() at the same time, unless you directly use the DrawTextW() or DrawTextA() version.
		</comment>
		<comment id='2' author='bernatx' date='2019-09-16T10:48:01Z'>
		This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.
		</comment>
	</comments>
</bug>