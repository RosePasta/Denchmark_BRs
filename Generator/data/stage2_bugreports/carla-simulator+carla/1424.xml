<bug id='1424' author='germanros1987' open_date='2019-03-21T02:20:17Z' closed_time='2019-05-28T10:17:00Z'>
	<summary>Unexpected behavior at vehicle initialization</summary>
	<description>

CARLA version(s): 0.9.4 , overnight 2019-03-19 and probably others
Platform: Ubuntu 16.04

&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

When spawning a vehicle, some of the calls are asynchronous and get_location (and probably other methods) return wrong values for a while.
Code to reproduce the issue:
&lt;denchmark-code&gt;import carla
import time

client = carla.Client('localhost', 2000)
client.set_timeout(10)
world = client.load_world('Town04')

blueprint_library = world.get_blueprint_library()
blueprint = blueprint_library.filter('vehicle.lincoln.mkz2017')[0]
actor = world.try_spawn_actor(blueprint, carla.Transform(carla.Location(131, -182, 0.1)))

loc = actor.get_location()
print(loc)
time.sleep(2)
loc2 = actor.get_location()
print(loc2)
&lt;/denchmark-code&gt;

Output:
&lt;denchmark-code&gt;Location(x=0, y=0, z=0)
Location(x=131, y=-182, z=0.0295535)
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='germanros1987' date='2019-03-21T06:12:55Z'>
		I observed that also in an older version of CARLA. The solution was to put a world.wait_for_tick() right after the load command.
		</comment>
		<comment id='2' author='germanros1987' date='2019-03-21T09:06:57Z'>
		This is a consequence of the optimization we do:  instead of calling the simulator returns the transform that was received last tick. If we ask for the transform right after spawning an actor, this actor was not yet present in the last tick and it returns a defaulted actor state. The system is explained &lt;denchmark-link:https://github.com/carla-simulator/carla/issues/1274#issuecomment-465567495&gt;here&lt;/denchmark-link&gt;
. Also related &lt;denchmark-link:https://github.com/carla-simulator/carla/issues/1151&gt;#1151&lt;/denchmark-link&gt;
, we found a workaround for this one, but it's giving some issues with synchronous mode.
It is difficult to solve this internally without affecting performance.
But as &lt;denchmark-link:https://github.com/fabianoboril&gt;@fabianoboril&lt;/denchmark-link&gt;
 mentioned, doing a  after spawning actors is probably the best workaround.
actor0 = world.spawn_actor(...)
actor1 = world.spawn_actor(...)
actor2 = world.spawn_actor(...)
world.wait_for_tick()
transform = actor0.get_transform()
		</comment>
		<comment id='3' author='germanros1987' date='2019-03-21T18:22:13Z'>
		Some additional tests.
Running this code snippet:
&lt;denchmark-code&gt;import carla
import time

client = carla.Client('localhost', 2000)
client.set_timeout(10)
world = client.load_world('Town04')
world.wait_for_tick()

blueprint_library = world.get_blueprint_library()
blueprint = blueprint_library.filter('vehicle.lincoln.mkz2017')[0]
actor = world.try_spawn_actor(blueprint, carla.Transform(carla.Location(131, -182, 0.1)))

loc = actor.get_location()
print(loc)
time.sleep(2)
loc2 = actor.get_location()
print(loc2)

&lt;/denchmark-code&gt;

I get:
&lt;denchmark-code&gt;Location(x=0, y=0, z=0)
Location(x=131, y=-182, z=0.0295535)

&lt;/denchmark-code&gt;

Running this one:
&lt;denchmark-code&gt;import carla
import time

client = carla.Client('localhost', 2000)
client.set_timeout(10)
world = client.load_world('Town04')
world.wait_for_tick()

blueprint_library = world.get_blueprint_library()
blueprint = blueprint_library.filter('vehicle.lincoln.mkz2017')[0]
actor = world.try_spawn_actor(blueprint, carla.Transform(carla.Location(131, -182, 0.1)))
world.wait_for_tick()
loc = actor.get_location()
print(loc)
time.sleep(2)
loc2 = actor.get_location()
print(loc2)

&lt;/denchmark-code&gt;

I get
&lt;denchmark-code&gt;Location(x=131, y=-182, z=0.1)
Location(x=131, y=-182, z=0.0295535)

&lt;/denchmark-code&gt;

So indeed it seems we need a wait_for_tick after the spawning of a set of agents.
		</comment>
		<comment id='4' author='germanros1987' date='2019-03-22T08:49:09Z'>
		In fact you don't need a wait_for_tick after load_world, that function does not return until we receive a world tick from the newly created world (to make sure we skip any remaining tick from the old world).
		</comment>
		<comment id='5' author='germanros1987' date='2019-05-21T09:28:05Z'>
		This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.
		</comment>
	</comments>
</bug>