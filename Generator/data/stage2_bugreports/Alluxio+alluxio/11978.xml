<bug id='11978' author='gwnet' open_date='2020-08-13T06:33:37Z' closed_time='2020-10-21T04:38:28Z'>
	<summary>there is no latency output of mini benchmark for alluxio</summary>
	<description>
Alluxio Version:
What version of Alluxio are you using? latest stable
Describe the bug
A clear and concise description of what the bug is.
there is no latency output.
intel@wcp116:/wayne/alluxio-2.3.0$ sudo ./bin/alluxio runClass alluxio.cli.MiniBenchmark -concurrency 1 -fileSize 4k -iterations 1 -type READ
intel@wcp116:/wayne/alluxio-2.3.0$ sudo ./bin/alluxio runClass alluxio.cli.MiniBenchmark -concurrency 1 -fileSize 4k -iterations 1 -type WRITE
Iteration: 0; Duration: 0.310072 seconds; Aggregated throughput: 0.000012 GB/second.
intel@wcp116:/wayne/alluxio-2.3.0$ sudo ./bin/alluxio runClass alluxio.cli.MiniBenchmark -concurrency 1 -fileSize 4k -iterations 1 -type READ
Iteration: 0; Duration: 0.947970 seconds; Aggregated throughput: 0.000004 GB/second.
intel@wcp116:/wayne/alluxio-2.3.0$ sudo ./bin/alluxio runClass alluxio.cli.MiniBenchmark -concurrency 1 -fileSize 4k -iterations 2 -type READ
Iteration: 0; Duration: 0.944971 seconds; Aggregated throughput: 0.000004 GB/second.
Iteration: 1; Duration: 0.054396 seconds; Aggregated throughput: 0.000070 GB/second.
intel@wcp116:/wayne/alluxio-2.3.0$ sudo ./bin/alluxio runClass alluxio.cli.MiniBenchmark -concurrency 1 -fileSize 4k -iterations 2 -type READ
Iteration: 0; Duration: 0.931539 seconds; Aggregated throughput: 0.000004 GB/second.
Iteration: 1; Duration: 0.058415 seconds; Aggregated throughput: 0.000065 GB/second.
intel@wcp116:/wayne/alluxio-2.3.0$
To Reproduce
Steps to reproduce the behavior (as minimally and precisely as possible)
Expected behavior
A clear and concise description of what you expected to happen.
Urgency
Describe the impact and urgency of the bug.
Additional context
Add any other context about the problem here.
	</description>
	<comments>
		<comment id='1' author='gwnet' date='2020-08-13T07:26:06Z'>
		for another example performance tool, I tried below command but it did not create meaning output.
&lt;denchmark-code&gt;intel@wcp116:~/wayne/alluxio-2.3.0$ sudo ./bin/alluxio runClass alluxio.examples.Performance 127.0.0.1:30000 test 4096 64 true 1 1 3 100
0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
intel@wcp116:~/wayne/alluxio-2.3.0$ sudo ./bin/alluxio runClass alluxio.examples.Performance 127.0.0.1:30000 test 4096 64 true 1 1 4 100
63 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
intel@wcp116:~/wayne/alluxio-2.3.0$ sudo ./bin/alluxio runClass alluxio.examples.Performance 127.0.0.1:19999 test 4096 64 true 1 1 4 100
63 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
intel@wcp116:~/wayne/alluxio-2.3.0$ sudo ./bin/alluxio runClass alluxio.examples.Performance 127.0.0.1:19999 test 4096 64 true 1 1 4 100
63 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 
intel@wcp116:~/wayne/alluxio-2.3.0$ 

&lt;/denchmark-code&gt;

		</comment>
		<comment id='2' author='gwnet' date='2020-08-14T07:40:46Z'>
		hello expert, I see very high latency when I run golang client.
the latency looks like 4K read latency is 3539289 ns. it is 3 ms, too big latency. there is no network overhead here too.
&lt;denchmark-code&gt;4K read latency ------------ this is super strange.
        0.00511 ns/op
BenchmarkReadFile-88    	Latency: 3539289 /nLatency: 3766643 /nLatency: 3567036 /nLatency: 3593209 /nLatency: 3731586 /nLatency: 3843222 /n100000000         0.00532 ns/op
BenchmarkReadFile-88    	Latency: 3759910 /nLatency: 3624876 /nLatency: 3654230 /nLatency: 3615086 /nLatency: 3728906 /nLatency: 3743587 /n100000000         0.00524 ns/op
BenchmarkReadFile-88    	Latency: 3803959 /nLatency: 3845906 /nLatency: 3948330 /nLatency: 3522843 /nLatency: 3849537 /nLatency: 3678879 /n100000000         0.00520 ns/op
BenchmarkReadFile-88    	Latency: 3937989 /nLatency: 3615993 /nLatency: 3769939 /nLatency: 3773853 /nLatency: 3715976 /nLatency: 3699920 /n100000000         0.00523 ns/op
BenchmarkReadFile-88    	Latency: 3741089 /nLatency: 3906993 /nLatency: 3754943 /nLatency: 3914606 /nLatency: 3979083 /nLatency: 3706276 /n100000000         0.00522 ns/op
BenchmarkReadFile-88    	Latency: 3696703 /nLatency: 3839049 /nLatency: 3830483 /nLatency: 3517583 /nLatency: 3820396 /nLatency: 3928310 /n100000000         0.00551 ns/op
BenchmarkReadFile-88    	Latency: 3388406 /nLatency: 3404486 /nLatency: 3341116 /nLatency: 3446663 /nLatency: 3556129 /nLatency: 3488179 /n100000000         0.00484 ns/op
BenchmarkReadFile-88    	Latency: 3648630 /nLatency: 3628653 /nLatency: 3593683 /nLatency: 3699110 /nLatency: 3903916 /nLatency: 3703346 /n100000000         0.00508 ns/op
BenchmarkReadFile-88    	Latency: 3759963 /nLatency: 3668372 /nLatency: 3608356 /nLatency: 3331196 /nLatency: 3609253 /nLatency: 3511503 /n100000000         0.00484 ns/op
BenchmarkReadFile-88    	Latency: 3710366 /nLatency: 3385516 /nLatency: 3727113 /nLatency: 3673247 /nLatency: 3531859 /nLatency: 3726729 /n100000000         0.00519 ns/op
BenchmarkReadFile-88    	Latency: 3658269 /nLatency: 3709977 /nLatency: 3687966 /nLatency: 3707806 /nLatency: 3564980 /nLatency: 3305376 /n100000000         0.00471 ns/op
BenchmarkReadFile-88    	Latency: 3702383 /nLatency: 3804989 /nLatency: 3905267 /nLatency: 3761669 /nLatency: 3656796 /nLatency: 3460463 /n100000000         0.00487 ns/op
BenchmarkReadFile-88    	Latency: 3920706 /nLatency: 3704499 /nLatency: 3696923 /nLatency: 3813713 /nLatency: 3612766 /nLatency: 3633536 /n100000000         0.00502 ns/op
BenchmarkReadFile-88    	Latency: 3756103 /nLatency: 3600796 /n^Csignal: interrupt
FAIL	test1	11.804s
intel@wcp116:~/wayne/go/alluxio/benchmark/2$ 
&lt;/denchmark-code&gt;

my golang test code is here, I use golang benchmark tool to run this code.
&lt;denchmark-code&gt;package test1

import (
	"testing"
	"fmt"
	"io/ioutil"
	"log"
	"strings"
	"time"
	
	alluxio "github.com/Alluxio/alluxio-go"
	"github.com/Alluxio/alluxio-go/option"
)

func write(fs *alluxio.Client, path, s string) error {
	id, err := fs.CreateFile(path, &amp;option.CreateFile{})
	if err != nil {
		return err
	}
	defer fs.Close(id)
	_, err = fs.Write(id, strings.NewReader(s))
	return err
}

func read(fs *alluxio.Client, path string) (string, error) {
	id, err := fs.OpenFile(path, &amp;option.OpenFile{})
	if err != nil {
		return "", err
	}
	defer fs.Close(id)
	r, err := fs.Read(id)
	if err != nil {
		return "", err
	}
	defer r.Close()
	content, err := ioutil.ReadAll(r)
	if err != nil {
		return "", err
	}
	return string(content), err
}




func BenchmarkReadFile(b *testing.B) {

	fs := alluxio.NewClient("localhost", 39999, 10*time.Second)
	path := "/test_path1"
	exists, err := fs.Exists(path, &amp;option.Exists{})
	if err != nil {
		log.Fatal(err)
	}
	if exists {
	
		//for n := 0; n &lt; b.N; n++ {
		    now1 := time.Now()
		    nsec1 := now1.UnixNano()
			content, err := read(fs, path)
			if err != nil {
				log.Fatal(err)
			}
			now2 := time.Now()
			nsec2 := now2.UnixNano()

			var str1 string = content + "OK"
			content = str1
			
		//}
		fmt.Printf("Latency: %d /n", nsec2 - nsec1)

	}

}
&lt;/denchmark-code&gt;

		</comment>
		<comment id='3' author='gwnet' date='2020-10-20T02:15:03Z'>
		Hi &lt;denchmark-link:https://github.com/gwnet&gt;@gwnet&lt;/denchmark-link&gt;
 , thanks for report this issue.


As the title there is no latency output of mini benchmark for alluxio and the description of this issue, I guess you want to see the latency of mini benchmark, is the Duration the output you want? If not, would you please explain what other output you want when execute mini benchmark, it would be better if there are an example.


For the ./bin/alluxio runClass alluxio.examples.Performance, you can get the output in the log dir, default path is logs/user_xxx.log


For the golang client test report of yours, the latency is bigger than your imagine is that the Alluxio golang client talk to alluxio through alluxio proxy, the protocol is HTTP, alluxio proxy request the meta data from alluxio master, and data from alluxio worker, so there are a batch request behind the openFile and read operation, not sure 3ms is reasonable, but it should be expensive than using alluxio java client talking to alluxio cluster directly.


		</comment>
		<comment id='4' author='gwnet' date='2020-10-21T04:38:28Z'>
		&lt;denchmark-link:https://github.com/gwnet&gt;@gwnet&lt;/denchmark-link&gt;
  currently  is not well maintained. you are welcome to improve this tool
The code is here &lt;denchmark-link:https://github.com/Alluxio/alluxio/blob/master/examples/src/main/java/alluxio/cli/MiniBenchmark.java&gt;https://github.com/Alluxio/alluxio/blob/master/examples/src/main/java/alluxio/cli/MiniBenchmark.java&lt;/denchmark-link&gt;

for the other questions, agree with what &lt;denchmark-link:https://github.com/maobaolong&gt;@maobaolong&lt;/denchmark-link&gt;
  explained.
Close this issue for now. let me know if you have further questions and feel free to reopen it.
		</comment>
	</comments>
</bug>