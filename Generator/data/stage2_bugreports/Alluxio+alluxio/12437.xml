<bug id='12437' author='TrafalgarZZZ' open_date='2020-10-30T12:17:40Z' closed_time='2020-11-06T07:59:05Z'>
	<summary>Performance degradation when accessing large amounts of small files through Fuse</summary>
	<description>

What version of Alluxio are you using?
&lt;denchmark-link:https://github.com/Alluxio/alluxio/tree/branch-2.3-fuse&gt;https://github.com/Alluxio/alluxio/tree/branch-2.3-fuse&lt;/denchmark-link&gt;

Describe the bug
I mounted a localpath as an UFS to Alluxio, and attempted to iterate the dataset stored in the UFS through Alluxio Fuse and run my deep learning model. The model training took me about 6 and a half hours. By contrast, if I iterate the dataset directly through localpath instead of through Alluxio Fuse, the same model training process took only 43min, so I believe there's something that which leads to such a huge performance degradation.
My dataset consists of millions of small files (about 3.8million files with an average size of 20kB, and 92GB in total), I'm using Alluxio JNI Fuse, here's my fuse opts:
&lt;denchmark-code&gt;Starting AlluxioFuse process: mounting alluxio path "/" to local mount point "/alluxio-mnt/default/insightface-test/alluxio-fuse" with options="big_writes,kernel_cache,ro,max_read=131072,attr_timeout=7200,entry_
timeout=7200,nonempty,allow_other"
&lt;/denchmark-code&gt;

and my Alluxio was set with the following customized properties:
&lt;denchmark-code&gt;  alluxio.fuse.cached.paths.max: "1000000"
  alluxio.fuse.debug.enabled: "false"
  alluxio.fuse.jnifuse.enabled: "true"
  alluxio.fuse.logging.threshold: 1000ms
  alluxio.fuse.user.group.translation.enabled: "true"
  alluxio.job.master.rpc.port: "20013"
  alluxio.job.master.web.port: "20014"
  alluxio.job.worker.data.port: "20017"
  alluxio.job.worker.rpc.port: "20015"
  alluxio.job.worker.threadpool.size: "164"
  alluxio.job.worker.web.port: "20016"
  alluxio.master.journal.folder: /journal
  alluxio.master.journal.log.size.bytes.max: 500MB
  alluxio.master.journal.type: UFS
  alluxio.master.metadata.sync.concurrency.level: "128"
  alluxio.master.metadata.sync.executor.pool.size: "128"
  alluxio.master.metadata.sync.ufs.prefetch.pool.size: "128"
  alluxio.master.metastore: ROCKS
  alluxio.master.metastore.inode.cache.max.size: "10000000"
  alluxio.master.mount.table.root.ufs: /underFSStorage
  alluxio.master.rpc.executor.core.pool.size: "128"
  alluxio.master.rpc.executor.max.pool.size: "1024"
  alluxio.master.rpc.port: "20009"
  alluxio.master.security.impersonation.root.groups: '*'
  alluxio.master.security.impersonation.root.users: '*'
  alluxio.master.web.port: "20010"
  alluxio.security.authorization.permission.enabled: "false"
  alluxio.security.stale.channel.purge.interval: 365d
  alluxio.user.block.avoid.eviction.policy.reserved.size.bytes: 2GB
  alluxio.user.block.master.client.pool.gc.threshold: 2day
  alluxio.user.block.master.client.threads: "1024"
  alluxio.user.block.size.bytes.default: 16MB
  alluxio.user.block.worker.client.pool.min: "512"
  alluxio.user.block.write.location.policy.class: alluxio.client.block.policy.LocalFirstAvoidEvictionPolicy
  alluxio.user.client.cache.enabled: "false"
  alluxio.user.direct.memory.io.enabled: "true"
  alluxio.user.file.create.ttl.action: FREE
  alluxio.user.file.master.client.threads: "1024"
  alluxio.user.file.passive.cache.enabled: "false"
  alluxio.user.file.readtype.default: CACHE
  alluxio.user.file.replication.max: "1"
  alluxio.user.file.writetype.default: MUST_CACHE
  alluxio.user.local.reader.chunk.size.bytes: 32MB
  alluxio.user.logging.threshold: 1000ms
  alluxio.user.metadata.cache.enabled: "true"
  alluxio.user.metadata.cache.expiration.time: 2day
  alluxio.user.metadata.cache.max.size: "1000000"
  alluxio.user.metrics.collection.enabled: "false"
  alluxio.user.streaming.reader.chunk.size.bytes: 32MB
  alluxio.user.ufs.block.read.location.policy: alluxio.client.block.policy.LocalFirstPolicy
  alluxio.user.update.file.accesstime.disabled: "true"
  alluxio.user.worker.list.refresh.interval: 2min
  alluxio.web.ui.enabled: "false"
  alluxio.worker.allocator.class: alluxio.worker.block.allocator.GreedyAllocator
  alluxio.worker.block.heartbeat.interval: 10sec
  alluxio.worker.block.master.client.pool.size: "1024"
  alluxio.worker.file.buffer.size: 320MB
  alluxio.worker.network.reader.buffer.size: 32MB
  alluxio.worker.rpc.port: "20011"
  alluxio.worker.web.port: "20012"
&lt;/denchmark-code&gt;

Plus, I've also tried to run another DL model on another dataset but with much less files(1100 files with an average size of 140MB, 143GB in total), and this time I got nearly training time whether I access data through fuse or not. So I think it's also a small file related problem.
To Reproduce
Mount a UFS with large amounts of files. Access it through Fuse.
Expected behavior
Reading data through Alluxio Fuse or not should have a similar performance. A slight performance degradation with Fuse is also acceptable for me.
Urgency
Urgent
Additional context
Add any other context about the problem here.
	</description>
	<comments>
		<comment id='1' author='TrafalgarZZZ' date='2020-11-01T23:54:03Z'>
		I notice there is a small overhead. The client checks the uid by executing shell every time. I think we can cache it in map.
&lt;denchmark-code&gt;--- 15150000000 ns (0.11%), 1515 samples
  [ 0] vfork
  [ 1] /usr/lib/jvm/java-8-openjdk-amd64/jre/lib/amd64/libjava.so (deleted)
  [ 2] java.lang.UNIXProcess.forkAndExec
  [ 3] java.lang.UNIXProcess.&lt;init&gt;
  [ 4] java.lang.ProcessImpl.start
  [ 5] java.lang.ProcessBuilder.start
  [ 6] alluxio.shell.ShellCommand.run
  [ 7] alluxio.util.ShellUtils.execCommand
  [ 8] alluxio.fuse.AlluxioFuseUtils.getIdInfo
  [ 9] alluxio.fuse.AlluxioFuseUtils.getUid
  [10] alluxio.fuse.AlluxioJniFuseFileSystem.getattrInternal
  [11] alluxio.fuse.AlluxioJniFuseFileSystem.lambda$getattr$1
  [12] alluxio.fuse.AlluxioJniFuseFileSystem$$Lambda$51.1362858644.call
  [13] alluxio.fuse.AlluxioFuseUtils.call
  [14] alluxio.fuse.AlluxioJniFuseFileSystem.getattr
  [15] alluxio.jnifuse.AbstractFuseFileSystem.getattrCallback

&lt;/denchmark-code&gt;

		</comment>
		<comment id='2' author='TrafalgarZZZ' date='2020-11-05T17:43:39Z'>
		Created &lt;denchmark-link:https://github.com/Alluxio/alluxio/commit/42a0cf7df85be3225d226a36b37908d04e8cb595&gt;a fix&lt;/denchmark-link&gt;
 to this issue by caching Gid/Uid query from OS. Please let me know if this patch fixed your issue &lt;denchmark-link:https://github.com/TrafalgarZZZ&gt;@TrafalgarZZZ&lt;/denchmark-link&gt;

		</comment>
		<comment id='3' author='TrafalgarZZZ' date='2020-11-06T07:59:05Z'>
		&lt;denchmark-link:https://github.com/apc999&gt;@apc999&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/cheyang&gt;@cheyang&lt;/denchmark-link&gt;
  Thanks for your help. The patch did fix my problem. I will close this.
		</comment>
	</comments>
</bug>