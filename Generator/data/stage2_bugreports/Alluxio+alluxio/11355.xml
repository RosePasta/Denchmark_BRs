<bug id='11355' author='ZacBlanco' open_date='2020-04-26T21:04:55Z' closed_time='2020-04-27T04:52:02Z'>
	<summary>Copycat transport continuously cycles connections causing memory leak</summary>
	<description>
Alluxio Version:
2.3.0-SNAPSHOT
Describe the bug
When starting the master, if monitoring the number of threads and heap memory you should see spikes in the thread count as well as an associated increase in memory. After a while, if using a tool like VisualVM to force GC, eventually no more GC will occur, but the heap still grows.
This memory leak is due to the fact that the copycat client and server transport implementations (GrpcMessagingClient, GrpcMessagingServer) store an unbounded list of previous connections. Those lists are not purged until the client or server is closed. In the case of a single master deployment, that seems to only be on the startup and shutdown of the servers.
The memory leak is a product of many connections being opened and closed by the copycat client. After some debugging, it is clear that the GrpcMessagingConnections are constantly opened and closed due to the leader address in the copycat server not matching the address reported by the keepalive response (localhost:19200 and localhost/127.0.0.1:19200). The difference is a resolved InetSocketAddress vs an unresolved one.
To fix the issue we need the serialization logic in the copycat protocol for KeepAliveResponse to respect whether or not the address is resolved. This is fixed in copycat 1.2.15
To Reproduce

Compile on 2.3.0-SNAPSHOT (as of the day this issue was created)
Run

$ ./bin/alluxio-start master

Monitor heap+threads in VisualVM

Expected behavior
Number of threads should be closer to constant. Memory should not increase indefinitely.
Urgency
High. Master is unusable after a few hours.
Additional context
This behavior was most recently introduced due to changes in how we handle gRPC resources in &lt;denchmark-link:https://github.com/Alluxio/alluxio/pull/11335&gt;#11335&lt;/denchmark-link&gt;

	</description>
	<comments>
	</comments>
</bug>