<bug id='10643' author='ZacBlanco' open_date='2019-12-17T20:21:06Z' closed_time='2019-12-20T20:35:14Z'>
	<summary>Client threads hang when they cannot connect to master with high contention</summary>
	<description>
Alluxio Version:
v2.1.0
Describe the bug
Threads accessing the Alluxio FileSystem object may hang when there is high contention for resources and the client cannot connect to the master.
To Reproduce
Attached is a patch containing an executable that can be run from the Alluxio examples folder
&lt;denchmark-link:https://github.com/Alluxio/alluxio/files/3975253/maxfile.patch.txt&gt;maxfile.patch.txt&lt;/denchmark-link&gt;

Apply the above patch onto master or branch-2.1 and then compile Alluxio
./bin/alluxio runClass alluxio.cli.MaxFile --threads 64 &amp;
Let the above program run for 1-2 minutes. CPU should be high. Then, kill the Alluxio master
&lt;denchmark-code&gt;./bin/alluxio-stop.sh master
&lt;/denchmark-code&gt;

The MaxFile process should still be running at this point. A few threads might throw an exception and finish their task. What I notice is that most times after about 10 minutes anywhere from 1/2 to 3/4 of the 64 threads will finish, but about 10 will remain in a state with the following stack trace
&lt;denchmark-code&gt;java.lang.Thread.State: RUNNABLE
	  at alluxio.AbstractClient.connect(AbstractClient.java:269)
	  - locked &lt;0x174e&gt; (a alluxio.client.file.RetryHandlingFileSystemMasterClient)
	  at alluxio.client.file.BaseFileSystem.rpc(BaseFileSystem.java:610)
	  at alluxio.client.file.BaseFileSystem.createFile(BaseFileSystem.java:179)
	  at alluxio.client.file.BaseFileSystem.createFile(BaseFileSystem.java:172)
	  at alluxio.cli.MaxFile.lambda$run$0(MaxFile.java:70)
	  at alluxio.cli.MaxFile$$Lambda$43.992086987.call(Unknown Source:-1)
	  at java.util.concurrent.FutureTask.run$$$capture(FutureTask.java:266)
	  at java.util.concurrent.FutureTask.run(FutureTask.java:-1)
	  at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	  at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	  at java.lang.Thread.run(Thread.java:748)
&lt;/denchmark-code&gt;

Once in this state, it seems the threads never actually get past this. It simply hangs forever.
A note that this deadlock does not seem to occur 100% of the time. It seems that it happens 20-30% of the time based on my tests.
Expected behavior
Clients in the program should eventually time out due to not being able to connect. The program should exit within 1-2 minutes. Each thread should print a stack trace.
Urgency
Can impact long running clients in cases where the Alluxio master goes down or fails over. Threads could get stuck.
Additional context
Present in v2.1.0 and on the latest branch-2.1 at the time of writing.
	</description>
	<comments>
		<comment id='1' author='ZacBlanco' date='2019-12-17T23:24:27Z'>
		hrmmm, I ran it over 10 times on my machine, sometimes with 256 threads, and I still cannot reproduce the hang.
		</comment>
		<comment id='2' author='ZacBlanco' date='2019-12-20T20:35:14Z'>
		Going to close this until I get a better repro.
		</comment>
	</comments>
</bug>