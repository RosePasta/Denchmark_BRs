<bug id='9744' author='realknorke' open_date='2019-08-19T11:55:08Z' closed_time='2019-09-05T23:20:46Z'>
	<summary>Wrong "ps" parameter in start/stop scripts when using alpine based docker image</summary>
	<description>
In file $ALLUXIO_HOME/bin/alluxio in line 83 the call ps -Aww fails because busybox doesn't know the 'w' flag.
busybox is used when the environment is alpine (docker image!)
I suggest using pgrep instead of parsing the output of ps like this:
replace
for pid in $(ps -Aww -o pid,command | grep -i "[j]ava" | grep ${keyword} | awk '{print $1}'); do
with
for pid in $(pgrep -f "[j]ava.*$keyword"); do
	</description>
	<comments>
		<comment id='1' author='realknorke' date='2019-08-19T16:47:27Z'>
		&lt;denchmark-link:https://github.com/realknorke&gt;@realknorke&lt;/denchmark-link&gt;
 We kindly ask you to follow our bug template supplied when you create the issue
		</comment>
		<comment id='2' author='realknorke' date='2019-08-19T17:01:38Z'>
		Additionally, with respect to the proposed solution; while pgrep may be available in busybox, I don't think it as portable as ps.
 is a command defined in the UNIX specification: &lt;denchmark-link:http://pubs.opengroup.org/onlinepubs/7990989775/xcuix.html&gt;http://pubs.opengroup.org/onlinepubs/7990989775/xcuix.html&lt;/denchmark-link&gt;

The actual command specification can be found here: &lt;denchmark-link:http://pubs.opengroup.org/onlinepubs/7990989775/xcu/ps.html&gt;http://pubs.opengroup.org/onlinepubs/7990989775/xcu/ps.html&lt;/denchmark-link&gt;

I think it would be most portable if we are to only use ps and the arguments defined in the page above. What do you think?
		</comment>
		<comment id='3' author='realknorke' date='2019-08-20T08:12:54Z'>
		Sorry, &lt;denchmark-link:https://github.com/ZacBlanco&gt;@ZacBlanco&lt;/denchmark-link&gt;
, I could not find a template. There is no pinned issue showing a template nor could I find an example under &lt;denchmark-link:https://docs.alluxio.io/os/user/stable/en/contributor/Contributor-Getting-Started.html&gt;https://docs.alluxio.io/os/user/stable/en/contributor/Contributor-Getting-Started.html&lt;/denchmark-link&gt;

Alluxio Version:
2.0
Describe the bug
In file $ALLUXIO_HOME/bin/alluxio in line 83 the call ps -Aww fails because busybox doesn't know the 'w' flag.
busybox is used when the environment is alpine (docker image!)
Additional context
I suggest using pgrep instead of parsing the output of ps like this:
replace
for pid in $(ps -Aww -o pid,command | grep -i "[j]ava" | grep ${keyword} | awk '{print $1}'); do
with
for pid in $(pgrep -f "[j]ava.*$keyword"); do
portability of ps


If you're providing dockerhub with your own base image you do not have to be portable. The complete idea behind docker is to NOT rely on the availability of certain tools or certain versions of tools. When writing a Dockerfile you are 100% in charge of the environment and it (the container) will run (almost) everywhere. You don't have to care about the difference between GNU, UNIX, busybox, Mac, Wintendo, etc.
Long story short: For your Docker image it is irrelevant what is installed on some computer somehere in the world.


You are right, there are still a lot of local installations and "on premise" installations. You want to use the "least common denominator" between all relevant platforms. But that would not be BASH. It should be SH. And as you pointed out, the -w flag is not part of the UNIX specification of ps. And then you have GNU and GNU is not UNIX. ;) But GNU is a more popular than UNIX. So why stick with the UNIX specification? And what about Windows? There are a lot more Windows installations. Why not stick with Microsoft's WSL then?
You got the pictureâ€¦


It is always a bad idea to parse CLI tools which are intended to print out human readable stuff like ls (use stat or find instead), ps (use pgrep and/or pkill or pid files), free, etc., because these tools are formatting the output according to the values they print (e.g. count the whitespaces in ls -l output for different directories).


Disclaimer: I'm not here to start a flame war. Its your choice completely how to fix the ps -Aww issue. I don't want to change the way you write code or anything. I don't want to offend you in any way. The points above are just remarks. Nothing more. Please feel free to NOT comment everything of my way too long text. I'm sure that your fix, whatever it is, will work just fine. :)


		</comment>
		<comment id='4' author='realknorke' date='2019-08-20T16:58:40Z'>
		After selecting the "New Issue" button on github, you should be prompted for 3 different types of tickets, and based on the one you select it should auto-fill a template. Otherwise, the bug template can be found here: &lt;denchmark-link:https://github.com/Alluxio/alluxio/blob/master/.github/ISSUE_TEMPLATE/bug_report.md&gt;https://github.com/Alluxio/alluxio/blob/master/.github/ISSUE_TEMPLATE/bug_report.md&lt;/denchmark-link&gt;
 - No worries though
Thanks for the detailed response! Discussion like this is a good thing, no flaming necessary ðŸ˜„


I agree that since we maintain the environment that we can be picky about what tools we use, that being said the ps -Aww line exists in our ./bin/alluxio script with which I can tell you with 99% certainty is currently used more outside of containers than inside of them. Because of that, we need to support many UNIX-like environments.
Another option would be to split the script; one for "standard" deployments and one for containers, but that doesn't seem like an ideal solution


I would argue that while many systems are not entirely compliant with UNIX standards, many of them will adhere somewhat (how close they adhere is a whole other discussion). As far as standard operating system utilities go, ps is a very common one and I would expect that most operating systems containing this utility to support the very minimal set of arguments that are described in the standard. I don't know this for a fact, so maybe I should just do my research- but I think using the arguments specified in the standard gives us the highest probability of guaranteeing portability across a variety of UNIX-like platforms.


I agree, it's not the most elegant command. I wish I could come up with an elegant (and more portable!) solution. I don't see another way off the top of my head though.


		</comment>
		<comment id='5' author='realknorke' date='2019-08-20T17:25:57Z'>
		Here's my proposed solution btw:
My MacOS BSD command manual has
&lt;denchmark-code&gt; -w      Use 132 columns to display information, instead of the default which is your window size.
             If the -w option is specified more than once, ps will use as many columns as necessary with-
             out regard for your window size.  When output is not to a terminal, an unlimited number of
             columns are always used.
&lt;/denchmark-code&gt;

The man for ps on Ubuntu 18.04 has:
&lt;denchmark-code&gt;-w      Wide output. Use this option twice for unlimited width.
&lt;/denchmark-code&gt;

In the BSD manual they specify that if we are sending output to something other than a tty, the width will always be unlimited. Unfortunately, the man page from Ubuntu doesn't specify anything about that behavior, however upon some manual testing in Ubuntu/CentOS I found that it follows the exact same behavior as prescribed by the BSD manual.
My proposed solution is to simply remove the -ww option in the script and everything should work fine because the output from that ps is not being sent to a tty anyways.
Edit: the command output actually has a limited length - or at least did at some point. Relevant stackoverflow while digging around: &lt;denchmark-link:https://stackoverflow.com/questions/199130/how-do-i-increase-the-proc-pid-cmdline-4096-byte-limit&gt;https://stackoverflow.com/questions/199130/how-do-i-increase-the-proc-pid-cmdline-4096-byte-limit&lt;/denchmark-link&gt;

		</comment>
		<comment id='6' author='realknorke' date='2019-08-20T20:08:38Z'>
		So before getting any change in I decided to do a bit more reading:
First, I went and read &lt;denchmark-link:http://pubs.opengroup.org/onlinepubs/7990989775/xcu/ps.html&gt;the spec for ps&lt;/denchmark-link&gt;
 again:
Under the formatting for the COMMAND (or args) column it reads

The command with all its arguments as a string. The implementation may truncate this value to the field width; it is implementation-dependent whether any further truncation occurs. It is unspecified whether the string represented is a version of the argument list as it was passed to the command when it started, or is a version of the arguments as they may have been modified by the application. Applications cannot depend on being able to modify their argument list and having that modification be reflected in the output of ps

So right off the bat, our script depends on the implementation dependent behavior of ps that isn't specified in the standard.
Next, in the &lt;denchmark-link:http://manpages.ubuntu.com/manpages/xenial/man1/ps.1.html&gt;Ubuntu manual the behavior for output is undefined&lt;/denchmark-link&gt;
:
&lt;denchmark-code&gt;args        COMMAND   command with all its arguments as a string. Modifications to the arguments may be
                             shown.  The output in this column may contain spaces.  A process marked &lt;defunct&gt; is
                             partly dead, waiting to be fully destroyed by its parent.  Sometimes the process args
                             will be unavailable; when this happens, ps will instead print the executable name in
                             brackets.  (alias cmd, command).  See also the comm format keyword, the -f option,
                             and the c option.
                             When specified last, this column will extend to the edge of the display.  If ps can
                             not determine display width, as when output is redirected (piped) into a file or
                             another command, the output width is undefined (it may be 80, unlimited, determined
                             by the TERM variable, and so on).  The COLUMNS environment variable or --cols option
                             may be used to exactly determine the width in this case.  The w or -w option may be
                             also be used to adjust width.
&lt;/denchmark-code&gt;

In CentOS, the description in the manpages is equivalent to what's in the UNIX description above (couldn't find a link, sorry :( )
Now the real kicker, is that I took  a look at the &lt;denchmark-link:https://busybox.net/downloads/BusyBox.html&gt;busybox man page&lt;/denchmark-link&gt;
.
&lt;denchmark-code&gt;ps

    ps

    Report process status

    Options:

            -o col1,col2=header     Select columns for display
            -T                      Show threads


&lt;/denchmark-code&gt;

Here, I'm finding it only describes support for the -o options, not even the -A. This is hardly UNIX compliant! However, if you're to try to use busybox and pass the -A flag, it doesn't complain, and seems to just ignore it. Passing -w however causes an error. Seems like a case of undocumented behavior :/
So the real question now: Should we even attempt to support busybox? Little to no common option support compounded with seemingly undocumented behavior doesn't seem like a good recipe to me. Within containers, we're not expecting users to run our scripts. If you want to start/stop Alluxio processes, then you should start/stop the container - not use any of the scripts in the standard install.
Additionally, we could opt to use something other than busybox, as its behavior and supported options seem to be the root of the issue here.
I think the most portable option would actually be for the Alluxio processes to write out a PID file that the script can read to determine the PID to kill. That's a bit hefty of a change for right now, though I prefer it over using any fancy terminal commands.
TL;DR: Output from ps is undefined for command/arguments field in UNIX. BusyBox isn't UNIX compliant and has undocumented behavior. I think the best way is to avoid shell commands altogether and write PID files instead, but that's a larger change than I'd like.
&lt;denchmark-link:https://github.com/realknorke&gt;@realknorke&lt;/denchmark-link&gt;
 is there a specific reason that you need the  to work? Were you calling it directly, or was it being invoked indirectly by ? I'm curious about the use case as it seems non-standard.
		</comment>
		<comment id='7' author='realknorke' date='2019-08-21T07:15:58Z'>
		&lt;denchmark-link:https://github.com/ZacBlanco&gt;@ZacBlanco&lt;/denchmark-link&gt;
 I'm using Alluxio on Kubernetes. And as Alluxio seems not to catch (and handle) Signal15 the termination is really slow (and hard because after a timeout SIGKILL will shutdown the processes).
Therefore I tried to use a shutdown hook where kubernetes sends a (user defined) shutdown command before it fires the SIGTERM. In my case kubernetes called the shutdown script with the local flavor (to just kill the local/container process). And that's where the ps -Aww is triggered.
I have another possible solution for the busybox problem: use an official debian base image instead of alpine. ;)
It's 114mb instead of 6mb but you will not run into compatibility problems. Instead of Debian you can choose any other of your favorite (like in best supported) platform.
		</comment>
		<comment id='8' author='realknorke' date='2019-08-21T07:23:09Z'>
		
After selecting the "New Issue" button on github, you should be prompted for 3 different types of tickets, and based on the one you select it should auto-fill a template. Otherwise, the bug template can be found here: https://github.com/Alluxio/alluxio/blob/master/.github/ISSUE_TEMPLATE/bug_report.md

I know how I could bypass the template. I was not signed in into github when I clicked on the NEW ISSUE button. Now the login process starts and I clicked on the SIGN IN on the upper right corner of the webpage. After that I was forwarded to an empty new issue form. :)
Now I know how to do better the next time. :)
		</comment>
		<comment id='9' author='realknorke' date='2019-08-21T16:48:54Z'>
		
I know how I could bypass the template. I was not signed in into github when I clicked on the NEW ISSUE button. Now the login process starts and I clicked on the SIGN IN on the upper right corner of the webpage. After that I was forwarded to an empty new issue form. :)

Ah, interesting. I wasn't aware that users could create a new issue without being signed in. The fact it doesn't prompt any of our templates seems like a bug to me. Thanks for the info!
Maybe we should try to have our bot enforce the templates....
		</comment>
		<comment id='10' author='realknorke' date='2019-08-21T21:18:36Z'>
		
I'm using Alluxio on Kubernetes. And as Alluxio seems not to catch (and handle) Signal15 the termination is really slow (and hard because after a timeout SIGKILL will shutdown the processes).
Therefore I tried to use a shutdown hook where kubernetes sends a (user defined) shutdown command before it fires the SIGTERM. In my case kubernetes called the shutdown script with the local flavor (to just kill the local/container process). And that's where the ps -Aww is triggered.

Ah, I see. I did some more digging and took a hard look at our docker container (which is used in k8s). I think solving the underlying cause for needing to run alluxio-stop.sh to kill the containers should be the real issue that we aim to fix.
The alluxio container has an entrypoint script that has the following run options

master-only (only alluxio master)
job-master (only alluxio master)
master (alluxio master &amp; job master, 2 processes)
worker-only (alluxio worker only)
worker (alluxio worker &amp; job worker, 2 processes)
job worker (alluxio job worker)

I've found two things that cause the container to not handle the signals properly

The entrypoint calls special scripts in ./integration/docker/bin which launches each prcess with a command similar to

&lt;denchmark-code&gt;${JAVA} -cp ${ALLUXIO_SERVER_CLASSPATH} &lt;java opts&gt; &lt;main class&gt;
&lt;/denchmark-code&gt;

Note, that when we call this script it is really a bash terminal which hangs waiting for the java process to exit - but if we send a Ctrl-C (or SIGTERM) to the container, it will actually signal to the bash process - but not the Alluxio process. The shell doesn't know it's really meant for the java process - so the signal just kind of gets eaten and nothing happens.  This is a bug in our scripts.
The proper way to do this is to have our ./integration/docker/bin scripts use exec ${JAVA} .... so that the shell process is replaced with the java process. That also means the entrypoint will need to use exec integration/docker/bin/alluxio-*.sh within the entrypoint as well.
Fortunately, we've recently added some better support for launching processes through  so they aren't wrapped by a shell process. See &lt;denchmark-link:https://github.com/Alluxio/alluxio/issues/9389&gt;#9389&lt;/denchmark-link&gt;
 for more on that.

Then we also raise the other issue that we have a container which has the ability to launch two processes and that if one of them exits, or we get a SIGTERM, we should exit. I would call this an anti-pattern for containers, but I think it also makes life easier for the user because the job* processes are pretty tightly integrated within Alluxio. Docker recommends a few options for containers with multiple processes here: https://docs.docker.com/config/containers/multi-service_container/

We could probably do something like
(pseudo-bash)
&lt;denchmark-code&gt;launch worker &amp;
worker_pid &lt;- $!
launch job worker &amp;
job_worker_pid &lt;- $!

while sleep 60; do
  ps | grep $worker_pid
  PROCESS_1_STATUS=$?
  ps |grep $job_worker_pid
  PROCESS_2_STATUS=$?
  # If the greps above find anything, they exit with 0 status
  # If they are not both 0, then something is wrong
  if [ $PROCESS_1_STATUS -ne 0 -o $PROCESS_2_STATUS -ne 0 ]; then
    echo "One of the processes has already exited."
    exit 1
  fi
done
&lt;/denchmark-code&gt;

And additionally, we could forward signals on child processes to both processes within the container. Example here: &lt;denchmark-link:https://unix.stackexchange.com/questions/146756/forward-sigterm-to-child-in-bash&gt;https://unix.stackexchange.com/questions/146756/forward-sigterm-to-child-in-bash&lt;/denchmark-link&gt;

If we hit all of those points I think we can get SIGTERM working properly within our containers. A bunch of the work done in &lt;denchmark-link:https://github.com/Alluxio/alluxio/issues/9389&gt;#9389&lt;/denchmark-link&gt;
 helps us get to the goal, but we'll need to update our entrypoint script to properly exec and/or track the multi-process containers.
&lt;denchmark-link:https://github.com/madanadit&gt;@madanadit&lt;/denchmark-link&gt;
 any thoughts on this?
		</comment>
		<comment id='11' author='realknorke' date='2019-08-21T22:28:57Z'>
		I agree that we should change our entrypoint (to use exec) and get rid of the docker bin directory
		</comment>
	</comments>
</bug>