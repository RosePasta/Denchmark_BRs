<bug id='11258' author='ggezer' open_date='2020-04-10T06:42:54Z' closed_time='2020-04-22T17:43:36Z'>
	<summary>BlockWorker leaking locks after hitting pool limits</summary>
	<description>
Alluxio Version:
2.2.+
Describe the bug
BlockWorker leaks locks when RPCs can't make progress due to the internal thread pool limit.
These leaked locks then hold reader executor threads alive.
Expected behavior
Internal resources of failed/timed-out RPCs must be properly disposed of.
Urgency
??
Additional context
&lt;denchmark-code&gt;2020-04-09 23:25:23,776 WARN  AbstractReadHandler - Exception occurred while processing read request block_id: 16777216000,........
alluxio.worker.grpc.GrpcExecutors$ImpersonateThreadPoolExecutor$$Lambda$107/1844138271@411da9ab **rejected from java.util.concurrent.ThreadPoolExecutor**@40399233[Running, pool size = 2048, active threads = 2048, queued tasks = 0, completed tasks = 63803]
&lt;/denchmark-code&gt;

Followed by stuck threads with below stack trace:
&lt;denchmark-code&gt;"BlockDataReaderExecutor-3263" #4125 daemon prio=5 os_prio=0 tid=0x00007f14840c6000 nid=0x2632 waiting on condition [0x00007f0cdbe42000]
   java.lang.Thread.State: WAITING (parking)
	at sun.misc.Unsafe.park(Native Method)
	- parking to wait for  &lt;0x00000006c1bda788&gt; (a java.util.concurrent.Semaphore$NonfairSync)
	at java.util.concurrent.locks.LockSupport.park(LockSupport.java:175)
	at java.util.concurrent.locks.AbstractQueuedSynchronizer.parkAndCheckInterrupt(AbstractQueuedSynchronizer.java:836)
	at java.util.concurrent.locks.AbstractQueuedSynchronizer.doAcquireShared(AbstractQueuedSynchronizer.java:967)
	at java.util.concurrent.locks.AbstractQueuedSynchronizer.acquireShared(AbstractQueuedSynchronizer.java:1283)
	at java.util.concurrent.Semaphore.acquireUninterruptibly(Semaphore.java:494)
	at alluxio.worker.block.ClientRWLock$SessionLock.lock(ClientRWLock.java:92)
	at alluxio.worker.block.BlockLockManager.lockBlock(BlockLockManager.java:114)
	at alluxio.worker.block.TieredBlockStore.**lockBlock**(TieredBlockStore.java:149)
	at alluxio.worker.block.DefaultBlockWorker.moveBlock(DefaultBlockWorker.java:464)
	at alluxio.worker.grpc.BlockReadHandler$BlockDataReader.openBlock(BlockReadHandler.java:134)
	at alluxio.worker.grpc.BlockReadHandler$BlockDat0x00000006c1bda788aReader.getDataBuffer(BlockReadHandler.java:105)
	at alluxio.worker.grpc.BlockReadHandler$BlockDataReader.getDataBuffer(BlockReadHandler.java:70)
	at alluxio.worker.grpc.AbstractReadHandler$DataReader.runInternal(AbstractReadHandler.java:355)
	at alluxio.worker.grpc.AbstractReadHandler$DataReader.run(AbstractReadHandler.java:323)
	at alluxio.worker.grpc.BlockReadHandler$BlockDataReader.run(BlockReadHandler.java:70)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at alluxio.worker.grpc.GrpcExecutors$ImpersonateThreadPoolExecutor.lambda$execute$0(GrpcExecutors.java:82)
	at alluxio.worker.grpc.GrpcExecutors$ImpersonateThreadPoolExecutor$$Lambda$107/1844138271.run(Unknown Source)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
&lt;/denchmark-code&gt;

	</description>
	<comments>
	</comments>
</bug>