<bug id='12338' author='Xenorith' open_date='2020-10-17T05:19:15Z' closed_time='2020-10-23T17:44:02Z'>
	<summary>Maven fails to build after ozone ufs upgrade to 1.0.0</summary>
	<description>
Alluxio Version:
2.4.0

After merging the PR to bump ozone ufs version (&lt;denchmark-link:https://github.com/Alluxio/alluxio/pull/12226&gt;#12226&lt;/denchmark-link&gt;
), the following maven command hangs:

When I run jstack on the process, the one running thread approximately has the following stacktrace:
&lt;denchmark-code&gt;"BuilderThread 17" #60 prio=5 os_prio=0 tid=0x00007fcea0106800 nid=0xbaa runnable [0x00007fcdb9c2a000]
   java.lang.Thread.State: RUNNABLE
        at org.jdom2.Element.isAncestor(Element.java:1052)
        at org.jdom2.ContentList.checkPreConditions(ContentList.java:222)
        at org.jdom2.ContentList.add(ContentList.java:244)
        at org.jdom2.Element.addContent(Element.java:950)
        at org.apache.maven.plugins.shade.pom.MavenJDOMWriter.insertAtPreferredLocation(MavenJDOMWriter.java:292)
        at org.apache.maven.plugins.shade.pom.MavenJDOMWriter.iterateExclusion(MavenJDOMWriter.java:488)
        at org.apache.maven.plugins.shade.pom.MavenJDOMWriter.updateDependency(MavenJDOMWriter.java:1335)
        at org.apache.maven.plugins.shade.pom.MavenJDOMWriter.iterateDependency(MavenJDOMWriter.java:386)
        at org.apache.maven.plugins.shade.pom.MavenJDOMWriter.updateModel(MavenJDOMWriter.java:1623)
        at org.apache.maven.plugins.shade.pom.MavenJDOMWriter.write(MavenJDOMWriter.java:2156)
        at org.apache.maven.plugins.shade.pom.PomWriter.write(PomWriter.java:75)
        at org.apache.maven.plugins.shade.mojo.ShadeMojo.rewriteDependencyReducedPomIfWeHaveReduction(ShadeMojo.java:1049)
        at org.apache.maven.plugins.shade.mojo.ShadeMojo.createDependencyReducedPom(ShadeMojo.java:978)
        at org.apache.maven.plugins.shade.mojo.ShadeMojo.execute(ShadeMojo.java:538)
        at org.apache.maven.plugin.DefaultBuildPluginManager.executeMojo(DefaultBuildPluginManager.java:137)
        at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:208)
        at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:154)
        at org.apache.maven.lifecycle.internal.MojoExecutor.execute(MojoExecutor.java:146)
        at org.apache.maven.lifecycle.internal.LifecycleModuleBuilder.buildProject(LifecycleModuleBuilder.java:117)
        at org.apache.maven.lifecycle.internal.builder.multithreaded.MultiThreadedBuilder$1.call(MultiThreadedBuilder.java:200)
        at org.apache.maven.lifecycle.internal.builder.multithreaded.MultiThreadedBuilder$1.call(MultiThreadedBuilder.java:196)
        at java.util.concurrent.FutureTask.run(FutureTask.java:266)
        at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
        at java.util.concurrent.FutureTask.run(FutureTask.java:266)
        at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
        at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
        at java.lang.Thread.run(Thread.java:748)
&lt;/denchmark-code&gt;

This seems to be an issue with the maven shading plugin. Looking up         at org.apache.maven.plugins.shade.pom.MavenJDOMWriter.insertAtPreferredLocation(MavenJDOMWriter.java:292), I found that other people have encountered a similar issue:

https://stackoverflow.com/questions/52221326/maven-shade-plugin-failed-to-execute-goal

but it seems like our plugin version is sufficiently up to date


apache/spark#23061

this seems to avoid the issue by removing parallelism, but this would drastically slow down our builds



To Reproduce
See above mvn command
Expected behavior
Maven command completes

Offending PR has been reverted to avoid build issues (&lt;denchmark-link:https://github.com/Alluxio/alluxio/pull/12337&gt;#12337&lt;/denchmark-link&gt;
)
	</description>
	<comments>
		<comment id='1' author='Xenorith' date='2020-10-19T15:18:12Z'>
		&lt;denchmark-link:https://github.com/Xenorith&gt;@Xenorith&lt;/denchmark-link&gt;
 Thank you for report this issue, it seems is the same issue like this &lt;denchmark-link:https://issues.apache.org/jira/browse/MSHADE-148&gt;https://issues.apache.org/jira/browse/MSHADE-148&lt;/denchmark-link&gt;
.
I think the root cause of this issue is Shade plugin using the wrong project while building the dependency reduced pom in parallel builds. Reference &lt;denchmark-link:https://www.mail-archive.com/dev@maven.apache.org/msg122620.html&gt;https://www.mail-archive.com/dev@maven.apache.org/msg122620.html&lt;/denchmark-link&gt;

&lt;denchmark-link:https://user-images.githubusercontent.com/17329931/96492509-55366080-1276-11eb-8e7b-adf841de8da7.png&gt;&lt;/denchmark-link&gt;

The above screenshot is snapped while I debug the maven shaded plugin under the parallel build, It makes me feel strange that the current project is different with the result.getProject(), since maybe we cannot depend the update of the maven-shade-plugin,  There are 4 options to work around:

Add &lt;createDependencyReducedPom&gt;false&lt;/createDependencyReducedPom&gt; to the alluxio/shaded/client/pom.xml to avoid generated DependencyReducedPom.xml
Removing parallelism build
Add provide scope dependency between shade/client, shade/hadoop and shade/ozone to make them sequential.
Patch apache/maven-shade-plugin#16 and use the patched version maven-shade-plugin.

After an overview underfs/ozone and underfs/wasb, I don't find a way can avoid ClassCastException if do not shade ozone.
The reason is that there are a class cast in org.apache.hadoop.ipc.ProtobufRpcEngine#invoke
      final Message theRequest = (Message) args[1];
The Message is loaded by as shaded version, so it is alluxio.shaded.hdfs.com.google.protobuf.Message, but the args[1] is from Ozone server, so it is com.google.protobuf.Message if without shaded.
		</comment>
		<comment id='2' author='Xenorith' date='2020-10-19T18:41:40Z'>
		Thanks for looking into this so quickly &lt;denchmark-link:https://github.com/maobaolong&gt;@maobaolong&lt;/denchmark-link&gt;

I am not familiar enough with maven to help decide which option is best to work around the issue. I would strongly prefer we avoid Removing parallelism because it would drastically slow down build times. Otherwise, I cannot say much about the other options you proposed.
&lt;denchmark-link:https://github.com/apc999&gt;@apc999&lt;/denchmark-link&gt;
 Can you provide some guidance on what is the best way to proceed with this issue?
		</comment>
		<comment id='3' author='Xenorith' date='2020-10-19T23:59:55Z'>
		&lt;denchmark-link:https://github.com/Xenorith&gt;@Xenorith&lt;/denchmark-link&gt;
 Sure, we need to support parallelism build, there are one more option
The SPARK project is suffering from this issue too, &lt;denchmark-link:https://issues.apache.org/jira/browse/SPARK-8819&gt;https://issues.apache.org/jira/browse/SPARK-8819&lt;/denchmark-link&gt;
 this is a option to support parallelism build with  let  default, but support a  to let  and non-parallelism build for release build, this is we don't need to create dependency deduced pom file every time, when we need, just with .
		</comment>
		<comment id='4' author='Xenorith' date='2020-10-20T18:07:30Z'>
		&lt;denchmark-link:https://github.com/maobaolong&gt;@maobaolong&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/Xenorith&gt;@Xenorith&lt;/denchmark-link&gt;
  Thanks for getting to the bottom of this problem!
To me removing reduced pom (like &lt;denchmark-link:https://stackoverflow.com/a/11322920/3161750&gt;https://stackoverflow.com/a/11322920/3161750&lt;/denchmark-link&gt;
) is a good way to go as it seems not really used at all (&lt;denchmark-link:https://stackoverflow.com/a/35155294/3161750&gt;https://stackoverflow.com/a/35155294/3161750&lt;/denchmark-link&gt;
)
&lt;denchmark-link:https://github.com/calvinjia&gt;@calvinjia&lt;/denchmark-link&gt;
  any input?
		</comment>
		<comment id='5' author='Xenorith' date='2020-10-21T04:54:32Z'>
		&lt;denchmark-link:https://github.com/apc999&gt;@apc999&lt;/denchmark-link&gt;
 The dependency reduced pom is relevant when published so I think &lt;denchmark-link:https://github.com/maobaolong&gt;@maobaolong&lt;/denchmark-link&gt;
 â€™s proposed solution is the best of both worlds.
		</comment>
		<comment id='6' author='Xenorith' date='2020-10-21T05:44:44Z'>
		I actually think the generated pom in src dir is not relevant to depending modules. There will be a pom in  which is identical to the reduced dependency pom. maybe we can test it to have  and see if  is identical to initial pom or the generated pom &lt;denchmark-link:https://github.com/calvinjia&gt;@calvinjia&lt;/denchmark-link&gt;

		</comment>
		<comment id='7' author='Xenorith' date='2020-10-21T17:17:54Z'>
		Sure, my understanding is with false it will have the original pom
		</comment>
		<comment id='8' author='Xenorith' date='2020-10-22T13:46:31Z'>
		&lt;denchmark-link:https://github.com/apc999&gt;@apc999&lt;/denchmark-link&gt;
 I have checked that if we set , the  will be the same as 
		</comment>
		<comment id='9' author='Xenorith' date='2020-10-23T17:44:02Z'>
		This issue has been fixed by  &lt;denchmark-link:https://github.com/Alluxio/alluxio/pull/12367&gt;#12367&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>