<bug id='11421' author='ZacBlanco' open_date='2020-05-12T06:43:17Z' closed_time='2020-05-19T20:34:01Z'>
	<summary>Worker can hang on shutdown if master is not available</summary>
	<description>
Alluxio Version:
2.3.0-SNAPSHOT
Describe the bug
A worker may hang on shutdown if the master isn't available.
To Reproduce
Bring up a local alluxio cluster (just master and worker). Stop the master and then stop the worker. The worker will hang for an undesireable amount of time during the shutdown sequence
Expected behavior
Quick worker shutdown.
Urgency
medium
Additional context
This seems to be due to an issue with the pin list sync not being able to connect to the master which prevents shutdown. I took a jstack of the worker while it was hanging. Here are the stacks of interest.
&lt;denchmark-code&gt;"SIGINT handler": awaiting notification on [0x000000076e4ee4e8], holding [0x00000006c0a00080]
	at java.lang.Object.wait(Native Method)
	at java.lang.Thread.join(Thread.java:1252)
	at java.lang.Thread.join(Thread.java:1326)
	at java.lang.ApplicationShutdownHooks.runHooks(ApplicationShutdownHooks.java:107)
	at java.lang.ApplicationShutdownHooks$1.run(ApplicationShutdownHooks.java:46)
	at java.lang.Shutdown.runHooks(Shutdown.java:123)
	at java.lang.Shutdown.sequence(Shutdown.java:167)
	at java.lang.Shutdown.exit(Shutdown.java:212)
	at java.lang.Terminator$1.handle(Terminator.java:52)
	at sun.misc.Signal$1.run(Signal.java:212)
	at java.lang.Thread.run(Thread.java:748)
&lt;/denchmark-code&gt;

The SIGINT handler runs the shutdown hooks and waits for them to execute. This triggers the following thread:
&lt;denchmark-code&gt;"alluxio-process-shutdown-hook": waiting to acquire [0x00000006c00174e0]
	at alluxio.AbstractClient.close(AbstractClient.java:310)
	at com.google.common.io.Closer.close(Closer.java:214)
	at alluxio.worker.block.DefaultBlockWorker.stop(DefaultBlockWorker.java:255)
	at alluxio.Registry.stop(Registry.java:148)
	at alluxio.worker.AlluxioWorkerProcess.stopWorkers(AlluxioWorkerProcess.java:287)
	at alluxio.worker.AlluxioWorkerProcess.stop(AlluxioWorkerProcess.java:275)
	at alluxio.ProcessUtils.lambda$stopProcessOnShutdown$0(ProcessUtils.java:96)
	at alluxio.ProcessUtils$$Lambda$84/1966670937.run(Unknown Source)
	at java.lang.Thread.run(Thread.java:748)
&lt;/denchmark-code&gt;

It is waiting to acquire 0x00000006c00174e0 which is held by:
&lt;denchmark-code&gt;
"Worker Pin List Sync": sleeping, holding [0x00000006c00174e0]
	at java.lang.Thread.sleep(Native Method)
	at alluxio.time.ThreadSleeper.sleep(ThreadSleeper.java:26)
	at alluxio.retry.TimeBoundedRetry.attempt(TimeBoundedRetry.java:67)
	at alluxio.AbstractClient.connect(AbstractClient.java:209)
	at alluxio.AbstractClient.retryRPCInternal(AbstractClient.java:397)
	at alluxio.AbstractClient.retryRPC(AbstractClient.java:365)
	at alluxio.worker.file.FileSystemMasterClient.getPinList(FileSystemMasterClient.java:87)
	at alluxio.worker.block.PinListSync.heartbeat(PinListSync.java:54)
	at alluxio.heartbeat.HeartbeatThread.run(HeartbeatThread.java:119)
	at java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:511)
	at java.util.concurrent.FutureTask.run(FutureTask.java:266)
	at java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1149)
	at java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:624)
	at java.lang.Thread.run(Thread.java:748)
&lt;/denchmark-code&gt;

This thread retries connecting to the master (I think 44 times?) before finally giving up and ceding the lock to the shutdown hook. I don't think this wait time is acceptable to users. Worker shutdown should be near-instantaneous for a fresh worker.
	</description>
	<comments>
		<comment id='1' author='ZacBlanco' date='2020-05-13T18:19:34Z'>
		I think the fix here is that during any AbstractClient retryRpc we need to propagate the interrupted exception all the way up to at least the client object layer, and then possibly wrap it in an IO exception?
		</comment>
		<comment id='2' author='ZacBlanco' date='2020-05-14T23:52:59Z'>
		I've also found that the property alluxio.worker.network.netty.shutdown.quiet.period gives a minimum time bound on how long it takes the server to shut down. Currently the default is 2 seconds.
		</comment>
	</comments>
</bug>