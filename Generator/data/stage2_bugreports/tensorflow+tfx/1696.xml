<bug id='1696' author='yantriks-edi-bice' open_date='2020-04-28T20:34:47Z' closed_time='2020-05-07T18:19:56Z'>
	<summary>TFX taxi template KubeflowDagRunner Transform throws "ModuleNotFoundError"</summary>
	<description>
I built a TFX pipeline based on the taxi template. All components run okay when using the BeamDagRunner. When using the KubeflowDagRunner all but Transform run okay. I build the pipeline on Kubeflow notebook, upload the packaged pipeline via UI, or run via KFP.Client().create_run_from_pipeline_package directly.
The Kubeflow Pipelines UI shows all the components but Transform run okay. I see the respective DataFlow jobs in the DataFlow UI. Transform fails with the error below and I do not even see a respective DataFlow job in the DataFlow UI.
INFO:absl:Nonempty beam arg setup_file already includes dependency
WARNING:tensorflow:From /tfx-src/tfx/components/transform/executor.py:511: Schema (from tensorflow_transform.tf_metadata.dataset_schema) is deprecated and will be removed in a future version.
Instructions for updating:
Schema is a deprecated, use schema_utils.schema_from_feature_spec to create a Schema
Traceback (most recent call last):
File "/tfx-src/tfx/orchestration/kubeflow/container_entrypoint.py", line 382, in 
main()
File "/tfx-src/tfx/orchestration/kubeflow/container_entrypoint.py", line 375, in main
execution_info = launcher.launch()
File "/tfx-src/tfx/orchestration/launcher/base_component_launcher.py", line 205, in launch
execution_decision.exec_properties)
File "/tfx-src/tfx/orchestration/launcher/in_process_component_launcher.py", line 67, in _run_executor
executor.Do(input_dict, output_dict, exec_properties)
File "/tfx-src/tfx/components/transform/executor.py", line 391, in Do
self.Transform(label_inputs, label_outputs, status_file)
File "/tfx-src/tfx/components/transform/executor.py", line 833, in Transform
preprocessing_fn = self._GetPreprocessingFn(inputs, outputs)
File "/tfx-src/tfx/components/transform/executor.py", line 775, in _GetPreprocessingFn
preprocessing_fn_path_split[-1])
File "/tfx-src/tfx/utils/import_utils.py", line 77, in import_func_from_module
user_module = importlib.import_module(module_path)
File "/opt/venv/lib/python3.6/importlib/init.py", line 126, in import_module
return _bootstrap._gcd_import(name[level:], package, level)
File "", line 994, in _gcd_import
File "", line 971, in _find_and_load
File "", line 953, in _find_and_load_unlocked
ModuleNotFoundError: No module named 'preprocessing'
BEAM_PIPELINE_ARGS = [
'--project=' + GCP_PROJECT_ID,
'--runner=DataflowRunner',
# '--experiments=shuffle_mode=auto',
'--temp_location=' + os.path.join('gs://', GCS_BUCKET_NAME, 'tmp'),
'--setup_file=./setup.py',
#'--requirements_file=./requirements.txt',
'--region=' + GCP_REGION,
]
Here's the setup.py where I attempted to include the preprocessing module explicitly to no avail
import setuptools
setuptools.setup(
name='markdowns-tfx-pipeline',
version='0.2',
py_modules=['configs', 'features', 'hparams', 'model', 'pipeline', 'preprocessing'],
install_requires=['tfx'],
packages=setuptools.find_packages(),
)
	</description>
	<comments>
		<comment id='1' author='yantriks-edi-bice' date='2020-04-28T21:24:56Z'>
		Hi &lt;denchmark-link:https://github.com/yantriks-edi-bice&gt;@yantriks-edi-bice&lt;/denchmark-link&gt;

If I understand it correctly the reason is perhaps in the container entrypoint running on KFP, the setup_file will be overriden by the code &lt;denchmark-link:https://github.com/tensorflow/tfx/blob/0fb096ff605f9b45f29a9f93621c57c682cac4ac/tfx/orchestration/kubeflow/container_entrypoint.py#L118&gt;here&lt;/denchmark-link&gt;
.
Perhaps we can try fixing this by detecting the collision before constructing the beam pipeline args? WDYT &lt;denchmark-link:https://github.com/neuromage&gt;@neuromage&lt;/denchmark-link&gt;
 ?
		</comment>
		<comment id='2' author='yantriks-edi-bice' date='2020-04-29T16:06:06Z'>
		Yes, that looks like a bug. &lt;denchmark-link:https://github.com/numerology&gt;@numerology&lt;/denchmark-link&gt;
 do you mind sending out a fix for ensuring user setup.py takes precedence over the default for Beam?
		</comment>
		<comment id='3' author='yantriks-edi-bice' date='2020-04-29T16:17:54Z'>
		Yes &lt;denchmark-link:https://github.com/numerology&gt;@numerology&lt;/denchmark-link&gt;
 that does look like the reason. I could see from the logs that the TFX setup.py was being used and all things TFX were working as expected but anything from my code (and I believe the Transform component is the first one which refers to anything from my code) was failing.
Now the code you pointed to does give you access to the provided arguments and could easily check if user supplied a setup.py file however it cannot simply override the TFX setup.py one, right? Isn't that required as well, or would it work if user supplies tfx as a requirement in user setup.py file like I do above?
		</comment>
		<comment id='4' author='yantriks-edi-bice' date='2020-04-29T16:20:32Z'>
		
Yes, that looks like a bug. @numerology do you mind sending out a fix for ensuring user setup.py takes precedence over the default for Beam?

Sure

Isn't that required as well, or would it work if user supplies tfx as a requirement in user setup.py file like I do above?

I believe you'll need to declare tfx as a requirement in your setup.py to make sure TFX library works correctly in Dataflow worker as well.
		</comment>
		<comment id='5' author='yantriks-edi-bice' date='2020-04-30T21:06:42Z'>
		I applied the patch to my TFX container entry point in my Kubeflow notebook but not seeing the effect. In fact, I'm not sure if my notebook local tfx package is being called at all as I added some other logging info and not seeing it. Dataflow worker may be using an image with tfx in it or installing a clean (not my patched) one but the orchestration part I was expecting to be done locally on the Kubeflow notebook container - is that true?
		</comment>
		<comment id='6' author='yantriks-edi-bice' date='2020-04-30T21:33:04Z'>
		
I applied the patch to my TFX container entry point in my Kubeflow notebook but not seeing the effect.

Did you rebuild and push an container image, and use that in the KubeflowDagRunner? Thanks
		</comment>
		<comment id='7' author='yantriks-edi-bice' date='2020-05-01T14:14:33Z'>
		No, I did not but I do see now how I can pass a custom container to KubeflowDagRunner. How is the default tfx container image put together, and what's the best way for me to build a patched one while waiting for this to be merged and an image released?
		</comment>
		<comment id='8' author='yantriks-edi-bice' date='2020-05-01T15:55:31Z'>
		&lt;denchmark-link:https://github.com/yantriks-edi-bice&gt;@yantriks-edi-bice&lt;/denchmark-link&gt;

The Dockerfile of the default TFX container released by TFX team can be found at [1], which is built based on a base image (containing some heavy and common dependencies) [2]. We have a helper script for building image at [3].
TFX official release usually comes at biweek cadence, but we have a nightly release at [3], for example, docker pull tensorflow/tfx:0.22.0.dev20200428 will give you the nightly release image built on April 28.
[1] &lt;denchmark-link:https://github.com/tensorflow/tfx/blob/master/tfx/tools/docker/Dockerfile&gt;https://github.com/tensorflow/tfx/blob/master/tfx/tools/docker/Dockerfile&lt;/denchmark-link&gt;

[2] &lt;denchmark-link:https://github.com/tensorflow/tfx/blob/master/tfx/tools/docker/base/Dockerfile&gt;https://github.com/tensorflow/tfx/blob/master/tfx/tools/docker/base/Dockerfile&lt;/denchmark-link&gt;

[3] &lt;denchmark-link:https://github.com/tensorflow/tfx/blob/master/tfx/tools/docker/build_docker_image.sh&gt;https://github.com/tensorflow/tfx/blob/master/tfx/tools/docker/build_docker_image.sh&lt;/denchmark-link&gt;

[4] &lt;denchmark-link:https://hub.docker.com/r/tensorflow/tfx/tags&gt;https://hub.docker.com/r/tensorflow/tfx/tags&lt;/denchmark-link&gt;

		</comment>
		<comment id='9' author='yantriks-edi-bice' date='2020-05-01T15:58:10Z'>
		Thanks &lt;denchmark-link:https://github.com/numerology&gt;@numerology&lt;/denchmark-link&gt;
, I just came across that script [3] now as well. Will give it a try.
		</comment>
		<comment id='10' author='yantriks-edi-bice' date='2020-05-01T23:16:43Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tfx/issues/1696&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tfx/issues/1696&gt;No&lt;/denchmark-link&gt;

		</comment>
		<comment id='11' author='yantriks-edi-bice' date='2020-05-05T15:52:06Z'>
		&lt;denchmark-link:https://github.com/numerology&gt;@numerology&lt;/denchmark-link&gt;
 I finally managed to build a patched image but noticed the fix has been merged into master and there are a few images since the merge. So I modified my Kubeflow pipeline pointing the runner to the tfx:latest image and re-ran only to find the same error message during the Transform step
`    tfx_image = "tensorflow/tfx:latest"
&lt;denchmark-code&gt;runner_config = kubeflow_dag_runner.KubeflowDagRunnerConfig(
    kubeflow_metadata_config=metadata_config,
    tfx_image=tfx_image
)

kubeflow_dag_runner.KubeflowDagRunner(config=runner_config).run(`
&lt;/denchmark-code&gt;

Here's the Transform step error again
INFO:absl:Running executor for Transform
INFO:absl:Nonempty beam arg setup_file already includes dependency
WARNING:tensorflow:From /tfx-src/tfx/components/transform/executor.py:511: Schema (from tensorflow_transform.tf_metadata.dataset_schema) is deprecated and will be removed in a future version.
Instructions for updating:
Schema is a deprecated, use schema_utils.schema_from_feature_spec to create a Schema
Traceback (most recent call last):
File "/tfx-src/tfx/orchestration/kubeflow/container_entrypoint.py", line 382, in 
main()
File "/tfx-src/tfx/orchestration/kubeflow/container_entrypoint.py", line 375, in main
execution_info = launcher.launch()
File "/tfx-src/tfx/orchestration/launcher/base_component_launcher.py", line 205, in launch
execution_decision.exec_properties)
File "/tfx-src/tfx/orchestration/launcher/in_process_component_launcher.py", line 67, in _run_executor
executor.Do(input_dict, output_dict, exec_properties)
File "/tfx-src/tfx/components/transform/executor.py", line 391, in Do
self.Transform(label_inputs, label_outputs, status_file)
File "/tfx-src/tfx/components/transform/executor.py", line 833, in Transform
preprocessing_fn = self._GetPreprocessingFn(inputs, outputs)
File "/tfx-src/tfx/components/transform/executor.py", line 775, in _GetPreprocessingFn
preprocessing_fn_path_split[-1])
File "/tfx-src/tfx/utils/import_utils.py", line 77, in import_func_from_module
user_module = importlib.import_module(module_path)
File "/opt/venv/lib/python3.6/importlib/init.py", line 126, in import_module
return _bootstrap._gcd_import(name[level:], package, level)
File "", line 994, in _gcd_import
File "", line 971, in _find_and_load
File "", line 953, in _find_and_load_unlocked
ModuleNotFoundError: No module named 'preprocessing'
And for comparison here's the CsvExampleGen step output showing a successful Dataflow job with the same pipeline and setup.py beam args - I believe there's something wrong with the Transform component as all the other components work fine. It's possible they succeed as they don't refer to any modules but at least from the logs they do "python setup.py sdist" whereas Transform does not
INFO:root:Executing command: ['/opt/venv/bin/python', 'setup.py', 'sdist', '--dist-dir', '/tmp/tmp6dpegkxd']
INFO:root:Starting GCS upload to gs://kf-poc-edi/tmp/beamapp-root-0428183625-124221.1588098985.124689/workflow.tar.gz...
INFO:root:Completed GCS upload to gs://kf-poc-edi/tmp/beamapp-root-0428183625-124221.1588098985.124689/workflow.tar.gz in 0 seconds.
INFO:root:Downloading source distribution of the SDK from PyPi
INFO:root:Executing command: ['/opt/venv/bin/python', '-m', 'pip', 'download', '--dest', '/tmp/tmp6dpegkxd', 'apache-beam==2.17.0', '--no-deps', '--no-binary', ':all:']
		</comment>
		<comment id='12' author='yantriks-edi-bice' date='2020-05-05T15:59:06Z'>
		&lt;denchmark-link:https://github.com/yantriks-edi-bice&gt;@yantriks-edi-bice&lt;/denchmark-link&gt;
  so to isolate the problem do you mind trying the following:

using in-cluster direct runner instead of dataflow runner;
Did you pass the module file as a uri to the Transform component or use the preprocessing_fn?

		</comment>
		<comment id='13' author='yantriks-edi-bice' date='2020-05-05T16:06:53Z'>
		&lt;denchmark-link:https://github.com/numerology&gt;@numerology&lt;/denchmark-link&gt;

Here's the complete KubeflowDagRunner.run
`    tfx_image = "tensorflow/tfx:latest"
&lt;denchmark-code&gt;runner_config = kubeflow_dag_runner.KubeflowDagRunnerConfig(
    kubeflow_metadata_config=metadata_config,
    tfx_image=tfx_image
)

kubeflow_dag_runner.KubeflowDagRunner(config=runner_config).run(
#kubeflow_dag_runner.KubeflowDagRunner().run(
    pipeline.create_pipeline(
        pipeline_name=configs.PIPELINE_NAME,
        pipeline_root=PIPELINE_ROOT,
        data_path=DATA_PATH,
        # TODO(step 7): (Optional) Uncomment below to use BigQueryExampleGen.
        # query=configs.BIG_QUERY_QUERY,
        preprocessing_fn=configs.PREPROCESSING_FN,
        trainer_fn=configs.TRAINER_FN,
        train_args=configs.TRAIN_ARGS,
        eval_args=configs.EVAL_ARGS,
        serving_model_dir=SERVING_MODEL_DIR,
        # TODO(step 7): (Optional) Uncomment below to use provide GCP related
        #               config for BigQuery.
        # beam_pipeline_args=configs.BIG_QUERY_BEAM_PIPELINE_ARGS,
        # TODO(step 8): (Optional) Uncomment below to use Dataflow.
        beam_pipeline_args=configs.BEAM_PIPELINE_ARGS,
        # TODO(step 9): (Optional) Uncomment below to use Cloud AI Platform.
        # ai_platform_training_args=configs.GCP_AI_PLATFORM_TRAINING_ARGS,
        # TODO(step 9): (Optional) Uncomment below to use Cloud AI Platform.
        # ai_platform_serving_args=configs.GCP_AI_PLATFORM_SERVING_ARGS,
    ))`
&lt;/denchmark-code&gt;

and the relevant configs.py snippet
PREPROCESSING_FN = 'preprocessing.preprocessing_fn'
I'll try the in-cluster direct runner next. I guess just comment out the beam_pipeline_args in the code above?
		</comment>
		<comment id='14' author='yantriks-edi-bice' date='2020-05-05T16:09:09Z'>
		
I'll try the in-cluster direct runner next. I guess just comment out the beam_pipeline_args in the code above?

Yep, thanks
		</comment>
		<comment id='15' author='yantriks-edi-bice' date='2020-05-05T16:10:10Z'>
		/assign &lt;denchmark-link:https://github.com/jiyongjung0&gt;@jiyongjung0&lt;/denchmark-link&gt;

To provide inputs regarding Taxi template.
		</comment>
		<comment id='16' author='yantriks-edi-bice' date='2020-05-05T16:14:49Z'>
		Failed again with what seems almost the same output (line about non-empty beam args is no longer there)
INFO:absl:Running driver for Transform
INFO:absl:MetadataStore with gRPC connection initialized
INFO:absl:Adding KFP pod name markdowns-tfx-pipeline-zxqjb-3171395185 to execution
INFO:absl:Adding KFP pod name markdowns-tfx-pipeline-zxqjb-3171395185 to execution
INFO:absl:Running executor for Transform
WARNING:tensorflow:From /tfx-src/tfx/components/transform/executor.py:511: Schema (from tensorflow_transform.tf_metadata.dataset_schema) is deprecated and will be removed in a future version.
Instructions for updating:
Schema is a deprecated, use schema_utils.schema_from_feature_spec to create a Schema
Traceback (most recent call last):
File "/tfx-src/tfx/orchestration/kubeflow/container_entrypoint.py", line 360, in 
main()
File "/tfx-src/tfx/orchestration/kubeflow/container_entrypoint.py", line 353, in main
execution_info = launcher.launch()
File "/tfx-src/tfx/orchestration/launcher/base_component_launcher.py", line 205, in launch
execution_decision.exec_properties)
File "/tfx-src/tfx/orchestration/launcher/in_process_component_launcher.py", line 67, in _run_executor
executor.Do(input_dict, output_dict, exec_properties)
File "/tfx-src/tfx/components/transform/executor.py", line 391, in Do
self.Transform(label_inputs, label_outputs, status_file)
File "/tfx-src/tfx/components/transform/executor.py", line 849, in Transform
preprocessing_fn = self._GetPreprocessingFn(inputs, outputs)
File "/tfx-src/tfx/components/transform/executor.py", line 791, in _GetPreprocessingFn
preprocessing_fn_path_split[-1])
File "/tfx-src/tfx/utils/import_utils.py", line 77, in import_func_from_module
user_module = importlib.import_module(module_path)
File "/opt/venv/lib/python3.6/importlib/init.py", line 126, in import_module
return _bootstrap._gcd_import(name[level:], package, level)
File "", line 994, in _gcd_import
File "", line 971, in _find_and_load
File "", line 953, in _find_and_load_unlocked
ModuleNotFoundError: No module named 'preprocessing'
		</comment>
		<comment id='17' author='yantriks-edi-bice' date='2020-05-05T16:16:18Z'>
		FYI, this is how I run the built pipeline via Kubeflow notebook
import kfp run_result = kfp.Client().create_run_from_pipeline_package( configs.PIPELINE_NAME + '.tar.gz',  arguments={})
		</comment>
		<comment id='18' author='yantriks-edi-bice' date='2020-05-05T16:25:05Z'>
		Okay so the problem is actually Transform cannot correctly find the preprocessing function.
Took a quick look at the taxi template code (sorry I was not familiar with that part), given that the Transform (and if you proceed successfully, Trainer) is using a local reference to preprocessing function, you'll have to rebuild and push your image and use that image in KubeflowDagRunner. I think in the template notebook it's done by scaffolding, as mentioned in step 4 in &lt;denchmark-link:https://github.com/tensorflow/tfx/blob/master/docs/tutorials/tfx/template.ipynb&gt;https://github.com/tensorflow/tfx/blob/master/docs/tutorials/tfx/template.ipynb&lt;/denchmark-link&gt;

One way to workaround that, if you do not want to rebuild and push your image, is to put your preprocessing function into a python file (which we call a module file) and upload it to a GCS path. Then you can pass the GCS uri to the module_file parameter of the Transform component. I guess you'll need to do the same thing for Trainer as well.
		</comment>
		<comment id='19' author='yantriks-edi-bice' date='2020-05-05T18:08:26Z'>
		Yes, I've seen step 4 before and have actually tried it but I suppose the image was based on the tfx version which ignored the user supplied setup.py file. Will try now supplying tfx:latest to the skaffold Dockerfile before kicking off "tfx pipeline create --build-target-image={CUSTOM_TFX_IMAGE}" which uses skaffold to build CUSTOM_TFX_IMAGE which I suppose I will have to then supply to the KubefloDagRunner config.
The kubeflow_dag_runner.py code says the following which doesn't seem to be the case any more (is this custom image discovery only possible via tfx create&amp;run?)
# This pipeline automatically injects the Kubeflow TFX image if the
# environment variable 'KUBEFLOW_TFX_IMAGE' is defined. Currently, the tfx
# cli tool exports the environment variable to pass to the pipelines.
# tfx_image = os.environ.get('KUBEFLOW_TFX_IMAGE', None)
		</comment>
		<comment id='20' author='yantriks-edi-bice' date='2020-05-05T18:13:48Z'>
		
(is this custom image discovery only possible via tfx create&amp;run?)

I think yes, it's only automatically injected in the taxi template experience. If you look at the basic &lt;denchmark-link:https://github.com/tensorflow/tfx/blob/master/tfx/orchestration/kubeflow/kubeflow_dag_runner.py&gt;KubeflowDagRunner&lt;/denchmark-link&gt;
 it does not have such function.
		</comment>
		<comment id='21' author='yantriks-edi-bice' date='2020-05-05T18:14:07Z'>
		&lt;denchmark-link:https://github.com/jiyongjung0&gt;@jiyongjung0&lt;/denchmark-link&gt;
 can provide more details regarding the template experience.
		</comment>
		<comment id='22' author='yantriks-edi-bice' date='2020-05-05T19:15:43Z'>
		After building a custom TFX image via tfx pipeline create and using tfx run, the pipeline now fails at the very first component which used to work okay.
Traceback (most recent call last):
File "/tfx-src/tfx/orchestration/kubeflow/container_entrypoint.py", line 360, in 
main()
File "/tfx-src/tfx/orchestration/kubeflow/container_entrypoint.py", line 351, in main
telemetry_utils.LABEL_TFX_RUNNER: 'kfp',
AttributeError: module 'tfx.utils.telemetry_utils' has no attribute 'LABEL_TFX_RUNNER'
It's likely due to my existing Dockerfile which does pip install requirements.txt at the end and that file has an older tfx version 0.21.4. I don't think there's a pip package yet which includes the beam args fix. Also saw somewhere about not using requirements.txt for Dataflow. Renamed Dockerfile and reran tfx pipeline create and this time it generated a Dockerfile with python setup.py install as the last step. The custom TFX image failed with
File "/home/jovyan/.local/lib/python3.6/site-packages/tfx/tools/cli/handler/kubeflow_handler.py", line 291, in _build_pipeline_image
skaffold_cmd=skaffold_cmd).build()
File "/home/jovyan/.local/lib/python3.6/site-packages/tfx/tools/cli/container_builder/builder.py", line 95, in build
image_sha = skaffold_cli.build(buildspec_filename=self._buildspec.filename)
File "/home/jovyan/.local/lib/python3.6/site-packages/tfx/tools/cli/container_builder/skaffold_cli.py", line 52, in build
buildspec_filename
File "/usr/lib/python3.6/subprocess.py", line 356, in check_output
**kwargs).stdout
File "/usr/lib/python3.6/subprocess.py", line 438, in run
output=stdout, stderr=stderr)
subprocess.CalledProcessError: Command '['skaffold', 'build', '-q', '--output={{json .}}', '-f', 'build.yaml']' returned non-zero exit status 1.
It's possible the setup.py requires part needs to include a lot more required packages than just tfx so I'll do that and see where it gets me.
I feel caught in a roundabout of dependencies and specifications for various stages of this process, from building custom images for the Kubeflow orchestration to the Dataflow workers etc.  Appreciate the help though!
		</comment>
		<comment id='23' author='yantriks-edi-bice' date='2020-05-05T20:07:55Z'>
		
It's likely due to my existing Dockerfile which does pip install requirements.txt at the end and that file has an older tfx version 0.21.4.

Actually we have a nightly build wheel which you can install by running
!pip3 install --index-url https://test.pypi.org/simple/ tfx==tfx-0.22.0.dev20200504 --user

subprocess.CalledProcessError: Command '['skaffold', 'build', '-q', '--output={{json .}}', '-f', 'build.yaml']' returned non-zero exit status 1.

For this specific error, I think it's possible due to missing scaffold in the current environment. Perhaps you would like to check that as well.

I feel caught in a roundabout of dependencies and specifications for various stages of this process, from building custom images for the Kubeflow orchestration to the Dataflow workers etc.

Indeed, Kubernetes relies on container image to package custom dependencies so that various heterogeneous workloads can all be supported by the distributed workers. This brings up the question (especially for TFX because it's both a library and a SDK) of supporting a portable dependencies/environment resolution at runtime, which is a tricky engineering problem.
We're actively working on improving this department and I think it will be much better soon.
		</comment>
		<comment id='24' author='yantriks-edi-bice' date='2020-05-07T18:19:56Z'>
		I installed the latest tfx wheel as you instructed (though it required --extra-index-url &lt;denchmark-link:https://pypi.org/simple/&gt;https://pypi.org/simple/&lt;/denchmark-link&gt;
  in order to find all the dependencies)
skaffold is there (as I had installed) and is found okay:
Reading build spec from build.yaml
Use skaffold to build the container image.
/home/jovyan/.local/bin/skaffold
FATA[0126] build failed: building [gcr.io/saas-ml-dev/markdowns-tfx-pipeline]: cloud build failed: FAILURE
No container image is built.
Traceback (most recent call last):
Since I'm using Cloud Build in the skaffold build spec, I realized I could look at the build job for any clues, and yes it was a dependency conflict:
Installed /opt/venv/lib/python3.6/site-packages/markdowns_tfx_pipeline-0.2-py3.6.egg
Processing dependencies for markdowns-tfx-pipeline==0.2
error: PyYAML 5.3.1 is installed but pyyaml~=3.12 is required by {'kubernetes'}
The command '/bin/sh -c python3 setup.py install' returned a non-zero code: 1
ERROR
ERROR: build step 0 "gcr.io/cloud-builders/docker" failed: step exited with non-zero status: 1
I repeated this process many times, upgrading some requirements, deleting some - there are quite a lot since the requirements.txt are frozen from the Kubeflow notebook. Eventually got the image and then tons of fun trying to figure out whether it had all my pipeline code and where and why it wasn't being found.
Figured out I had to override the entrypoint in order to be able to shell into it and inspect. Once in the shell it was quick work to add the right steps to the Dockerfile in order to make my pipeline code accessible from the executor code - simply installed it via pip.
Resubmitted the pipeline and all the cached steps got bypassed okay and it is now running the Transform step on DataFlow.
Thanks for all your help!
		</comment>
		<comment id='25' author='yantriks-edi-bice' date='2020-05-07T18:19:58Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tfx/issues/1696&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tfx/issues/1696&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>