<bug id='1567' author='AlirezaSadeghi' open_date='2020-04-01T15:03:55Z' closed_time='2020-04-06T17:37:35Z'>
	<summary>Code formatting can affect the semantic behavior of tfx pipelines (DagRunner not being registered)</summary>
	<description>



tfx/tfx/tools/cli/handler/base_handler.py


        Lines 106 to 117
      in
      bfbc958






 """Check if runner in dsl is same as engine flag.""" 



 engine_flag = self.flags_dict[labels.ENGINE_FLAG] 



 with open(self.flags_dict[labels.PIPELINE_DSL_PATH], 'r') as f: 



 dsl_contents = f.read() 



 regexes = { 



 labels.AIRFLOW_ENGINE: r'AirflowDagRunner\(.*\)', 



 labels.KUBEFLOW_ENGINE: r'KubeflowDagRunner\(.*\)', 



 labels.BEAM_ENGINE: r'BeamDagRunner\(.*\)' 



   } 



 match = re.search(regexes[engine_flag], dsl_contents) 



 if not match: 



 sys.exit('{} runner not found in dsl.'.format(engine_flag)) 





The referenced code is where the issue happens.
As can be seen, it checks for existence of a KubeflowDagRunner(...) in the contents, but that's a naive assumption since the opening and closing parenthesis can be in separate lines and in that case the regex won't match.
&lt;denchmark-h:h3&gt;Steps to reproduce the issue:&lt;/denchmark-h&gt;

The following piece of code works just fine.
 kf_config = KubeflowDagRunnerConfig(
        kubeflow_metadata_config=kf_metadata,
        tfx_image=os.environ.get("KUBEFLOW_TFX_IMAGE", None),
 )

KubeflowDagRunner(config=kf_config)
The following piece of code though, fails with kubeflow runner not found in dsl.
KubeflowDagRunner(
    config=KubeflowDagRunnerConfig(
           kubeflow_metadata_config=kf_metadata,
           tfx_image=os.environ.get("KUBEFLOW_TFX_IMAGE", None),
     )
)
Output of the tfx pipeline create cli command is as follows:
&lt;denchmark-code&gt;CLI
Updating pipeline
Detected Kubeflow.
Use --engine flag if you intend to use a different orchestrator.
Reading build spec from build.yaml
Use skaffold to build the container image.
/usr/local/bin/skaffold
kubeflow runner not found in dsl.
New container image is built. Target image is available in the build spec file.
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='AlirezaSadeghi' date='2020-04-03T03:23:23Z'>
		Yeap this is problematic. Sorry for your inconvenience.
		</comment>
		<comment id='2' author='AlirezaSadeghi' date='2020-04-06T17:37:36Z'>
		Are you satisfied with the resolution of your issue?
&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tfx/issues/1567&gt;Yes&lt;/denchmark-link&gt;

&lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tfx/issues/1567&gt;No&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>