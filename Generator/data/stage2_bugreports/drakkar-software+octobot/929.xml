<bug id='929' author='dterg' open_date='2019-06-19T19:04:04Z' closed_time='2019-12-30T15:24:39Z'>
	<summary>[Bug] Kraken starting portfolio ignores config for EUR</summary>
	<description>
&lt;denchmark-h:h2&gt;Step 1: Have you search for this issue before posting it?&lt;/denchmark-h&gt;

If you have discovered a bug in the bot, please &lt;denchmark-link:https://github.com/Drakkar-Software/OctoBot/issues?q=is%3Aissue&gt;search our issue tracker&lt;/denchmark-link&gt;
.
If it hasn't been reported, please create a new issue.
&lt;denchmark-h:h2&gt;Step 2: Describe your environment&lt;/denchmark-h&gt;


OS : Windows, MacOS
Python Version: 3.7
In case you are not using a binary version:

Branch: Dev



&lt;denchmark-h:h2&gt;Step 3: Describe the problem:&lt;/denchmark-h&gt;

Describe the bug
When the starting portfolio is defined in the config, this loads fine in the UI, but when backtesting, the EUR fiat currency values are ignored and default to 1000 (which I found hard-coded).
Expected behavior
Backtesting (and trading simulator) should use the true original EUR portfolio value rather than default 1000 value.
&lt;denchmark-h:h3&gt;Steps to reproduce:&lt;/denchmark-h&gt;


Set Kraken as exchange
Set 0.22 eur as starting portfolio
Backtest something, and the starting portfolio EUR value becomes 1,000

	</description>
	<comments>
		<comment id='1' author='dterg' date='2019-06-19T19:05:35Z'>
		Hi again &lt;denchmark-link:https://github.com/dterg&gt;@dterg&lt;/denchmark-link&gt;
 !
It seems that you started the bot in simulation mode don't you ?
&lt;denchmark-link:https://github.com/Drakkar-Software/OctoBot/wiki/Simulator&gt;https://github.com/Drakkar-Software/OctoBot/wiki/Simulator&lt;/denchmark-link&gt;

		</comment>
		<comment id='2' author='dterg' date='2019-06-19T19:06:31Z'>
		Correct. This is all simulated and without api configs defined for Kraken (similarly when tested with binance but binance actually works with the starting portfolio values)
		</comment>
		<comment id='3' author='dterg' date='2019-06-19T19:10:53Z'>
		
Correct. This is all simulated and without api configs defined for Kraken (similarly when tested with binance but binance actually works with the starting portfolio values)

So Binance worked with the same simulated portfolio ? You didn't change EUR to USDT for binance ?
		</comment>
		<comment id='4' author='dterg' date='2019-06-19T19:13:22Z'>
		Sorry I should have specified; I did change EUR to USDT for binance. I wasn't too sure whether this is a fiat coin config issue or specifically EUR but with Kraken, its only EUR that's the issue. I changed the hardcoded 1000 to 0.22 eur (forgot the .py file and can't seem to find it now!) and when I re-ran the backtest, it showed 0.22 eur (i.e. success).
		</comment>
		<comment id='5' author='dterg' date='2019-06-19T19:16:52Z'>
		
Sorry I should have specified; I did change EUR to USDT for binance. I wasn't too sure whether this is a fiat coin config issue or specifically EUR but with Kraken, its only EUR that's the issue. I changed the hardcoded 1000 to 0.22 eur (forgot the .py file and can't seem to find it now!) and when I re-ran the backtest, it showed 0.22 eur (i.e. success).

Yes binance doesn't support EUR so you did well.
By changing the hardcoded  you mean that you modified your  file ?
-&gt; Because your starting portfolio should be set in your  as explained (&lt;denchmark-link:https://github.com/Drakkar-Software/OctoBot/wiki/Simulator#setup-the-trader_simulator&gt;here&lt;/denchmark-link&gt;
)
		</comment>
		<comment id='6' author='dterg' date='2019-06-19T19:20:27Z'>
		So the config.json was changed when specifying the starting portfolio. This is what didn't work because it seemed to be defaulting back to what is defined in config/__init__.py with the constant CONFIG_BACKTESTING_OTHER_MARKETS_STARTING_PORTFOLIO during backtesting. This constant is set to 1000 so when I change it to another value, backtesting EUR value becomes whatever I change it to there (i.e. config.json values for EUR are ignored).
		</comment>
		<comment id='7' author='dterg' date='2019-06-19T19:29:11Z'>
		Possibly related to this issue is the fact that when using kraken as exchange, portfolio doesn't show all altcoins &lt;denchmark-link:https://imgur.com/4Z2xjaA&gt;see screenie&lt;/denchmark-link&gt;

		</comment>
		<comment id='8' author='dterg' date='2019-06-19T19:30:48Z'>
		
So the config.json was changed when specifying the starting portfolio. This is what didn't work because it seemed to be defaulting back to what is defined in config/__init__.py with the constant CONFIG_BACKTESTING_OTHER_MARKETS_STARTING_PORTFOLIO. This constant is set to 1000 so when I change it to another value, backtesting EUR value becomes whatever I change it to there (i.e. config.json values for EUR are ignored).

Here is the code from backtesting/backtesting_util.py :
DEFAULT_REFERENCE_MARKET = "BTC"
&lt;denchmark-code&gt;if DEFAULT_REFERENCE_MARKET != base:
        _switch_reference_market(config, base)
&lt;/denchmark-code&gt;

&lt;denchmark-code&gt;def _switch_reference_market(config_to_use, market):
    config_to_use[CONFIG_TRADING][CONFIG_TRADER_REFERENCE_MARKET] = market
    config_to_use[CONFIG_SIMULATOR][CONFIG_STARTING_PORTFOLIO][market] = \
        CONFIG_BACKTESTING_OTHER_MARKETS_STARTING_PORTFOLIO)
&lt;/denchmark-code&gt;

So here we can see that if DEFAULT_REFERENCE_MARKET is not BTC it'll automatically set your EUR portfolio to  CONFIG_BACKTESTING_OTHER_MARKETS_STARTING_PORTFOLIO.
It seems that it shouldn't have to be DEFAULT_REFERENCE_MARKET in the first condition but you current reference market. I'll fix this soon. Thanks for reporting.
		</comment>
		<comment id='9' author='dterg' date='2019-06-19T19:34:11Z'>
		This shouldn't effect the performance of the trader, right?
		</comment>
		<comment id='10' author='dterg' date='2019-06-19T19:35:11Z'>
		Hum... finally I'm not sure about it.
Can't you give me your current reference_market in your config.json ?
		</comment>
		<comment id='11' author='dterg' date='2019-06-19T19:35:42Z'>
		
This shouldn't effect the performance of the trader, right?

No. It only concerns the backtesting.
		</comment>
		<comment id='12' author='dterg' date='2019-06-19T19:36:33Z'>
		
Hum... finally I'm not sure about it.
Can't you give me your current reference_market in your config.json ?

"ETH" atm
		</comment>
		<comment id='13' author='dterg' date='2019-06-19T19:37:40Z'>
		

This shouldn't effect the performance of the trader, right?

No. It only concerns the backtesting.

Does it effect the performance of the backtest? Being skeptic about the performance reported as its always very high % gain for any altcoin/EUR pair I try. Trying the same strategies with binance (different pairs obviously because EUR not available), strategy always loses.
		</comment>
		<comment id='14' author='dterg' date='2019-06-19T19:37:46Z'>
		

Hum... finally I'm not sure about it.
Can't you give me your current reference_market in your config.json ?

"ETH" atm

Ok. Currently OctoBot only supports 1 reference market. So if you want to use EUR as reference market when you use backtesting you should first modify your reference_market to EUR and then run a backtesting.
		</comment>
		<comment id='15' author='dterg' date='2019-06-19T19:41:36Z'>
		


This shouldn't effect the performance of the trader, right?

No. It only concerns the backtesting.

Does it effect the performance of the backtest? Being skeptic about the performance reported as its always very high % gain for any altcoin/EUR pair I try. Trying the same strategies with binance (different pairs obviously because EUR not available), strategy always loses.

Currently you can't totally backtest some strategies. OctoBot implement different type of evaluators and you can only backtest technical indicators ones. For example, a lot of strategies use real time evaluators that currently can't be backtested. So your backtesting may be false sometimes.
		</comment>
		<comment id='16' author='dterg' date='2019-06-19T19:50:48Z'>
		If you can explain to me or direct me to the source code for the % bot profitability, % market average profitability and % symbol profitability would be great to help with debugging :) Kraken seems to give very optimal results even with evaluators that use technical indicators. The same strategies that also use technical indicators perform very poorly with binance.
Seems like when choosing Kraken, its not doing any orders/trades: &lt;denchmark-link:https://imgur.com/599ab6y&gt;screenshot&lt;/denchmark-link&gt;
. This is not the case with same strategy for binance.
		</comment>
		<comment id='17' author='dterg' date='2019-06-19T20:46:58Z'>
		
If you can explain to me or direct me to the source code for the % bot profitability, % market average profitability and % symbol profitability would be great to help with debugging :) Kraken seems to give very optimal results even with evaluators that use technical indicators. The same strategies that also use technical indicators perform very poorly with binance.
Seems like when choosing Kraken, its not doing any orders/trades: screenshot. This is not the case with same strategy for binance.



% bot profitability corresponds to OctoBot's gains in reference market.
Ex: if OctoBot begins with 1000USD, trade multiple times, and ends with 1200USD.

Your % bot profitability with USD as reference market will be 20%
Your % bot profitability with BTC as reference market will be linked to BTC/USD variations

If BTC gains 20% against USD your % bot profitability will be 0 BTC
If BTC lost 20% against USD your % bot profitability will be +50% BTC





% market average profitability is the average % symbol profitability


% symbol profitability is the raw delta between symbol starting price and stopping price.


I'll need your logs to understand why there was no trades during your backtestings.


		</comment>
		<comment id='18' author='dterg' date='2019-06-19T21:06:26Z'>
		

If you can explain to me or direct me to the source code for the % bot profitability, % market average profitability and % symbol profitability would be great to help with debugging :) Kraken seems to give very optimal results even with evaluators that use technical indicators. The same strategies that also use technical indicators perform very poorly with binance.
Seems like when choosing Kraken, its not doing any orders/trades: screenshot. This is not the case with same strategy for binance.



% bot profitability corresponds to OctoBot's gains in reference market.
Ex: if OctoBot begins with 1000USD, trade multiple times, and ends with 1200USD.


Your % bot profitability with USD as reference market will be 20%


Your % bot profitability with BTC as reference market will be linked to BTC/USD variations

If BTC gains 20% against USD your % bot profitability will be 0 BTC
If BTC lost 20% against USD your % bot profitability will be +50% BTC





% market average profitability is the average % symbol profitability


% symbol profitability is the raw delta between symbol starting price and stopping price.


I'll need your logs to understand why there was no trades during your backtestings.



This is all that is logged:
&lt;denchmark-code&gt;2019-06-19 22:03:04 INFO   StrategyOptimizer    logging_util.py:54       Trying to find an optimized configuration for FullMixedStrategiesEvaluator strategy using DailyTradingMode trading mode, ['KlingerOscillatorReversalConfirmationMomentumEvaluator', 'DoubleMovingAverageTrendEvaluator', 'RSIMomentumEvaluator'] technical evaluator(s), [&lt;TimeFrames.THIRTY_MINUTES: '30m'&gt;, &lt;TimeFrames.ONE_HOUR: '1h'&gt;, &lt;TimeFrames.ONE_DAY: '1d'&gt;] time frames and [1.0, 0.5] risk(s).
2019-06-19 22:03:04 INFO   StrategyOptimizer    logging_util.py:54       Setting logging level to logging.ERROR to limit messages.
&lt;/denchmark-code&gt;

while the results shows &lt;denchmark-link:https://imgur.com/a/8eEMpVz&gt;this&lt;/denchmark-link&gt;
.
&lt;denchmark-code&gt;1/98 Run with: evaluators: {'KlingerOscillatorReversalConfirmationMomentumEvaluator': True, 'FullMixedStrategiesEvaluator': True}, time frames :['30m'], risk: 1.0
| ###### | =&gt; Result: ['KlingerOscillatorReversalConfirmationMomentumEvaluator'] on ['30m'] at risk: 1.0 score: 0.000000 (the higher the better) average trades: 0.000000
2/98 Run with: evaluators: {'KlingerOscillatorReversalConfirmationMomentumEvaluator': True, 'FullMixedStrategiesEvaluator': True}, time frames :['1h', '30m'], risk: 1.0
| ###### | =&gt; Result: ['KlingerOscillatorReversalConfirmationMomentumEvaluator'] on ['1h', '30m'] at risk: 1.0 score: 0.000000 (the higher the better) average trades: 0.000000
3/98 Run with: evaluators: {'KlingerOscillatorReversalConfirmationMomentumEvaluator': True, 'FullMixedStrategiesEvaluator': True}, time frames :['1d', '30m'], risk: 1.0
| ###### | =&gt; Result: ['KlingerOscillatorReversalConfirmationMomentumEvaluator'] on ['1d', '30m'] at risk: 1.0 score: 0.000000 (the higher the better) average trades: 0.000000
4/98 Run with: evaluators: {'KlingerOscillatorReversalConfirmationMomentumEvaluator': True, 'FullMixedStrategiesEvaluator': True}, time frames :['1d', '1h', '30m'], risk: 1.0
| ###### | =&gt; Result: ['KlingerOscillatorReversalConfirmationMomentumEvaluator'] on ['1d', '1h', '30m'] at risk: 1.0 score: 0.000000 (the higher the better) average trades: 0.000000
5/98 Run with: evaluators: {'KlingerOscillatorReversalConfirmationMomentumEvaluator': True, 'FullMixedStrategiesEvaluator': True}, time frames :['1h'], risk: 1.0
| ###### | =&gt; Result: ['KlingerOscillatorReversalConfirmationMomentumEvaluator'] on ['1h'] at risk: 1.0 score: 0.000000 (the higher the better) average trades: 0.000000
6/98 Run with: evaluators: {'KlingerOscillatorReversalConfirmationMomentumEvaluator': True, 'FullMixedStrategiesEvaluator': True}, time frames :['1d', '1h'], risk: 1.0
| ###### | =&gt; Result: ['KlingerOscillatorReversalConfirmationMomentumEvaluator'] on ['1d', '1h'] at risk: 1.0 score: 0.000000 (the higher the better) average trades: 0.000000
7/98 Run with: evaluators: {'KlingerOscillatorReversalConfirmationMomentumEvaluator': True, 'FullMixedStrategiesEvaluator': True}, time frames :['1d'], risk: 1.0
| ###### | =&gt; Result: ['KlingerOscillatorReversalConfirmationMomentumEvaluator'] on ['1d'] at risk: 1.0 score: 0.000000 (the higher the better) average trades: 0.000000
8/98 Run with: evaluators: {'KlingerOscillatorReversalConfirmationMomentumEvaluator': True, 'FullMixedStrategiesEvaluator': True, 'DoubleMovingAverageTrendEvaluator': True}, time frames :['30m'], risk: 1.0
| ###### | =&gt; Result: ['KlingerOscillatorReversalConfirmationMomentumEvaluator', 'DoubleMovingAverageTrendEvaluator'] on ['30m'] at risk: 1.0 score: 0.000000 (the higher the better) average trades: 0.000000
9/98 Run with: evaluators: {'KlingerOscillatorReversalConfirmationMomentumEvaluator': True, 'FullMixedStrategiesEvaluator': True, 'DoubleMovingAverageTrendEvaluator': True}, time frames :['1h', '30m'], risk: 1.0
| ###### | =&gt; Result: ['KlingerOscillatorReversalConfirmationMomentumEvaluator', 'DoubleMovingAverageTrendEvaluator'] on ['1h', '30m'] at risk: 1.0 score: 0.000000 (the higher the better) average trades: 0.000000
10/98 Run with: evaluators: {'KlingerOscillatorReversalConfirmationMomentumEvaluator': True, 'FullMixedStrategiesEvaluator': True, 'DoubleMovingAverageTrendEvaluator': True}, time frames :['1d', '30m'], risk: 1.0
| ###### | =&gt; Result: ['KlingerOscillatorReversalConfirmationMomentumEvaluator', 'DoubleMovingAverageTrendEvaluator'] on ['1d', '30m'] at risk: 1.0 score: 0.000000 (the higher the better) average trades: 0.000000
11/98 Run with: evaluators: {'KlingerOscillatorReversalConfirmationMomentumEvaluator': True, 'FullMixedStrategiesEvaluator': True, 'DoubleMovingAverageTrendEvaluator': True}, time frames :['1d', '1h', '30m'], risk: 1.0
| ###### | =&gt; Result: ['KlingerOscillatorReversalConfirmationMomentumEvaluator', 'DoubleMovingAverageTrendEvaluator'] on ['1d', '1h', '30m'] at risk: 1.0 score: 0.000000 (the higher the better) average trades: 0.000000
12/98 Run with: evaluators: {'KlingerOscillatorReversalConfirmationMomentumEvaluator': True, 'FullMixedStrategiesEvaluator': True, 'DoubleMovingAverageTrendEvaluator': True}, time frames :['1h'], risk: 1.0
| ###### | =&gt; Result: ['KlingerOscillatorReversalConfirmationMomentumEvaluator', 'DoubleMovingAverageTrendEvaluator'] on ['1h'] at risk: 1.0 score: 0.000000 (the higher the better) average trades: 0.000000
13/98 Run with: evaluators: {'KlingerOscillatorReversalConfirmationMomentumEvaluator': True, 'FullMixedStrategiesEvaluator': True, 'DoubleMovingAverageTrendEvaluator': True}, time frames :['1d', '1h'], risk: 1.0
| ###### | =&gt; Result: ['KlingerOscillatorReversalConfirmationMomentumEvaluator', 'DoubleMovingAverageTrendEvaluator'] on ['1d', '1h'] at risk: 1.0 score: 0.000000 (the higher the better) average trades: 0.000000
14/98 Run with: evaluators: {'KlingerOscillatorReversalConfirmationMomentumEvaluator': True, 'FullMixedStrategiesEvaluator': True, 'DoubleMovingAverageTrendEvaluator': True}, time frames :['1d'], risk: 1.0
&lt;/denchmark-code&gt;

		</comment>
		<comment id='19' author='dterg' date='2019-06-25T22:15:08Z'>
		Hi,
Here, you are using the Strategy optimizer, it is currently a POC as &lt;denchmark-link:https://github.com/Drakkar-Software/OctoBot/issues/928#issuecomment-503685463&gt;Herklos said&lt;/denchmark-link&gt;
, the starting portfolio in this specific mode is preset to work with the dataset (which is in the test folder, it's the same dataset we use to experiment strategies internally).
If you want to test strategies on specific markets, it's better to collect the data yourself and run a regular backtesting directly on them.
		</comment>
		<comment id='20' author='dterg' date='2019-12-30T15:24:39Z'>
		Closed for no update from owner.
		</comment>
	</comments>
</bug>