<bug id='15339' author='jczaja' open_date='2019-01-15T11:12:43Z' closed_time='2019-01-16T10:26:58Z'>
	<summary>minor  memory leak in op creation</summary>
	<description>
When working on &lt;denchmark-link:https://github.com/PaddlePaddle/Paddle/issues/15032&gt;#15032&lt;/denchmark-link&gt;
 I noticed potential  memory leak when ops are created. It introduce lots of noise when analysing memory problems in Paddle.  Problem seems to be that lambda assigned to creator_ is allocating memory , but I cannot find location of releasing it.



Paddle/paddle/fluid/framework/details/op_registry.h


        Lines 85 to 89
      in
      d055b1d






 info-&gt;creator_ = [](const std::string&amp; type, const VariableNameMap&amp; inputs, 



 const VariableNameMap&amp; outputs, 



 const AttributeMap&amp; attrs) { 



 return new T(type, inputs, outputs, attrs); 



 }; 





&lt;denchmark-code&gt;Here is some callstack (test_analyzer_small_dam) from valgrind/memcheck reflecting quoted code:

==2565== 4,557 (120 direct, 4,437 indirect) bytes in 1 blocks are definitely lost in loss record 18,636 of 18,684
==2565==    at 0x65C2255: operator new(unsigned long) (vg_replace_malloc.c:334)
==2565==    by 0x3B476F0: paddle::framework::details::OpInfoFiller&lt;paddle::operators::BatchNormOpMaker, (paddle::framework::details::OpInfoFillType)1&gt;::operator()(char const*, paddle::framework::OpInfo*) const (op_registry.h:96)
==2565==    by 0x3B42C98: paddle::framework::details::OperatorRegistrarRecursive&lt;1ul, false, paddle::operators::BatchNormOp, paddle::operators::BatchNormOpMaker, paddle::operators::BatchNormOpInferVarType, paddle::operators::BatchNormGradMaker&gt;::OperatorRegistrarRecursive(char const*, paddle::framework::OpInfo*) (op_registry.h:68)
==2565==    by 0x3B4272F: paddle::framework::details::OperatorRegistrarRecursive&lt;0ul, false, paddle::operators::BatchNormOp, paddle::operators::BatchNormOpMaker, paddle::operators::BatchNormOpInferVarType, paddle::operators::BatchNormGradMaker&gt;::OperatorRegistrarRecursive(char const*, paddle::framework::OpInfo*) (op_registry.h:71)
==2565==    by 0x3B4216A: paddle::framework::OperatorRegistrar&lt;paddle::operators::BatchNormOp, paddle::operators::BatchNormOpMaker, paddle::operators::BatchNormOpInferVarType, paddle::operators::BatchNormGradMaker&gt;::OperatorRegistrar(char const*) (op_registry.h:61)
==2565==    by 0x3B3A958: __static_initialization_and_destruction_0(int, int) (batch_norm_op.cc:609)
==2565==    by 0x3B3A9C2: _GLOBAL__sub_I_batch_norm_op.cc (batch_norm_op.cc:619)
==2565==    by 0x462211C: __libc_csu_init (in /home/jczaja/paddle/build-debug/paddle/fluid/inference/tests/api/test_analyzer_small_dam)
==2565==    by 0x82B5F6E: (below main) (in /usr/lib64/libc-2.20.so)
&lt;/denchmark-code&gt;

&lt;denchmark-link:https://github.com/reyoung&gt;@reyoung&lt;/denchmark-link&gt;
 , &lt;denchmark-link:https://github.com/luotao1&gt;@luotao1&lt;/denchmark-link&gt;

Please advice (explain where this memory is released) or if it is a memory leak, please consider fixing it.
	</description>
	<comments>
		<comment id='1' author='jczaja' date='2019-01-15T12:52:26Z'>
		Is this the reason of &lt;denchmark-link:https://github.com/PaddlePaddle/Paddle/issues/15032&gt;#15032&lt;/denchmark-link&gt;
? Or it's another problem?
Anyway, we will look at it.
		</comment>
		<comment id='2' author='jczaja' date='2019-01-15T13:01:14Z'>
		&lt;denchmark-link:https://github.com/luotao1&gt;@luotao1&lt;/denchmark-link&gt;
 This problem came out when looking at &lt;denchmark-link:https://github.com/PaddlePaddle/Paddle/issues/15032&gt;#15032&lt;/denchmark-link&gt;
, but it is  reason for timeout exceeding it just makes analysis a bit more difficult , so I reported it. F
		</comment>
		<comment id='3' author='jczaja' date='2019-01-15T15:02:48Z'>
		&lt;denchmark-link:https://github.com/jczaja&gt;@jczaja&lt;/denchmark-link&gt;
 The return of  is a , so there are no  memory leak when ops are created.


		</comment>
		<comment id='4' author='jczaja' date='2019-01-16T10:26:58Z'>
		&lt;denchmark-link:https://github.com/chengduoZH&gt;@chengduoZH&lt;/denchmark-link&gt;
 Thanks for explanation. look like my memcheck's false positive.
		</comment>
	</comments>
</bug>