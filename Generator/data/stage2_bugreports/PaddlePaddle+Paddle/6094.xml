<bug id='6094' author='JiayiFeng' open_date='2017-11-30T07:35:09Z' closed_time='2017-12-06T04:43:50Z'>
	<summary>An error in building the OG of `while_op`</summary>
	<description>
In the current code, we build the OG of while_op like this:
    std::unordered_set&lt;std::string&gt; block_ins;
    {
      for (auto &amp;p : Input(kParameters)) {
        block_ins.insert(p);
      }
      for (auto &amp;o : Output(kOutputs)) {
        block_ins.insert(o);
      }
    }
    std::unordered_set&lt;std::string&gt; extra_inputs;
    for (size_t i = 0; i &lt; grad_block_[0]-&gt;OpSize(); ++i) {
      for (auto &amp;input_name : grad_block_[0]-&gt;Op(i)-&gt;InputArgumentNames()) {
        if (block_ins.find(input_name) != block_ins.end()) {
          continue;
        }
        extra_inputs.insert(input_name);
      }

      for (auto &amp;output_name : grad_block_[0]-&gt;Op(i)-&gt;OutputArgumentNames()) {
        block_ins.insert(output_name);
      }
    }
We traverse all the gradient op in the gradient block, if some input variable is not in I nor G, nor generated by some precious op in the gradient block, it will be marked as OG.
However, this assumption is not correct. For while_op's forward op and backward op are in two different blocks, all variables generated in forward block can meet all the above criteria while they are obviously not OG.
This will lead to a runtime error. In
&lt;denchmark-link:https://github.com/PaddlePaddle/Paddle/blob/develop/paddle/operators/while_op.cc#L127&gt;https://github.com/PaddlePaddle/Paddle/blob/develop/paddle/operators/while_op.cc#L127&lt;/denchmark-link&gt;

we try to find the variable of OG in the higher level scope. However, if the variable is generated in 's forward block, it will be in the current scope, not higher level scope.
	</description>
	<comments>
		<comment id='1' author='JiayiFeng' date='2017-12-06T04:43:50Z'>
		Closed since it has been fixed.
		</comment>
	</comments>
</bug>