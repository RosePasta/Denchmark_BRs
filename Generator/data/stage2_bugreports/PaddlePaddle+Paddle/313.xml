<bug id='313' author='lernanto' open_date='2016-11-02T08:42:18Z' closed_time='2017-07-16T03:41:22Z'>
	<summary>DoubleBuffer::asyncLoader_ 未初始化</summary>
	<description>
DoubleBuffer::asyncLoader_ 成员变量由函数 DoubleBuffer::startAsyncLoad() (DataProvider.cpp:149) 赋初值。但在析构函数 DoubleBuffer::~DoubleBuffer() 中会调用 DoubleBuffer::finishAsyncLoad()，该函数又调用 DoubleBuffer::asyncLoader_-&gt;join() (DataProvider.h:273)。由于 DoubleBuffer::asyncLoader_ 不是随 DoubleBuffer 的构造函数初始化，析构时可能存在该成员变量未初始化的情况，此时会引发段错误。
该问题可能在 paddle test 时触发。具体地，在 Trainer::init() (Trainer.cpp:197) 通过 DataProvider::create() 创建了 DataProvider 对象，该对象的构造函数会创建 DoubleBuffer 对象。但后续并没有调用 DoubleBuffer::startAsyncLoad() 初始化。当程序结束时，连串析构函数最终会调用 DoubleBuffer::~DoubleBuffer()，从而调用 DoubleBuffer::finishAsyncLoad() 结束不存在的线程，导致崩溃。
paddle train 因为会调用 DataProvider::reset() (Trainer.cpp:273) 初始化 DoubleBuffer::asyncLoader_，因此没有这个问题。
	</description>
	<comments>
		<comment id='1' author='lernanto' date='2016-11-02T08:53:54Z'>
		Related PR &lt;denchmark-link:https://github.com/PaddlePaddle/Paddle/pull/291&gt;#291&lt;/denchmark-link&gt;

这个析构错误目前如果使用PyDataProvider2应该不会出现，原理的话test也会在某些时候调用reset。
不清楚 &lt;denchmark-link:https://github.com/lernanto&gt;@lernanto&lt;/denchmark-link&gt;
 您使用的是什么Provider。
同时，这块code也足够恶心了，正在考虑完全重构掉。直接使用装饰者模式，写一个 BufferedDataProvider比较好。
&lt;denchmark-link:https://github.com/lernanto&gt;@lernanto&lt;/denchmark-link&gt;
 有兴趣一起搞一下么？
		</comment>
		<comment id='2' author='lernanto' date='2016-11-06T09:05:47Z'>
		我是在试用的时候遇到这个崩溃才稍稍 debug 了一下代码，发现这个问题。用的是 paddle.trainer.PyDataProvider2，gdb 显示确实存在未初始化的 asyncLoader_，不清楚问题出在哪里。
重构的话，我接触才不久，代码很不熟悉。而且当前确实也没有精力。
		</comment>
		<comment id='3' author='lernanto' date='2017-07-16T03:41:20Z'>
		close via #&lt;denchmark-link:https://github.com/PaddlePaddle/Paddle/pull/291&gt;#291&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>