<bug id='20866' author='Meiyim' open_date='2019-10-29T03:59:16Z' closed_time='2019-11-12T03:29:53Z'>
	<summary>Paddle1.6与Multiprocessing冲突</summary>
	<description>
运行环境： cuda9.0 cudnn7.3 linux
测试代码：
import paddle as p
import paddle.fluid as f

import multiprocessing as mp


def func(a):
    print('helloworld')
    return a + 1

print(p.__version__)
pool = mp.Pool(3)
pool.map(func, [1,2,3])
pool.terminate()
使用PaddlePaddle1.5运行输出：
&lt;denchmark-code&gt;1.5.2
helloworld
helloworld
helloworld
&lt;/denchmark-code&gt;

使用PaddlePaddle1.6运行输出：
&lt;denchmark-code&gt;1.6.0
helloworld
helloworld
helloworld
W1029 11:58:31.022197 48625 init.cc:212] *** Aborted at 1572321511 (unix time) try "date -d @1572321511" if you are using GNU date ***
W1029 11:58:31.022197 48624 init.cc:212] *** Aborted at 1572321511 (unix time) try "date -d @1572321511" if you are using GNU date ***
W1029 11:58:31.023936 48625 init.cc:212] PC: @                0x0 (unknown)
W1029 11:58:31.023952 48624 init.cc:212] PC: @                0x0 (unknown)
W1029 11:58:31.024592 48625 init.cc:212] *** SIGTERM (@0x1f40000b7a7) received by PID 48625 (TID 0x7f80151cd700) from PID 47015; stack trace: ***
W1029 11:58:31.024598 48624 init.cc:212] *** SIGTERM (@0x1f40000b7a7) received by PID 48624 (TID 0x7f80151cd700) from PID 47015; stack trace: ***
W1029 11:58:31.025892 48625 init.cc:212]     @     0x7f8014da4160 (unknown)
W1029 11:58:31.025919 48624 init.cc:212]     @     0x7f8014da4160 (unknown)
W1029 11:58:31.027094 48625 init.cc:212]     @     0x7f8014fbfb7a _dl_fixup
W1029 11:58:31.027129 48624 init.cc:212]     @     0x7f8014fbfc70 _dl_fixup
W1029 11:58:31.028278 48625 init.cc:212]     @     0x7f8014fc6105 _dl_runtime_resolve
W1029 11:58:31.028327 48624 init.cc:212]     @     0x7f8014fc6105 _dl_runtime_resolve
W1029 11:58:31.028442 48625 init.cc:212]     @           0x586e7f os__exit
W1029 11:58:31.028475 48624 init.cc:212]     @           0x586e7f os__exit
W1029 11:58:31.028676 48625 init.cc:212]     @           0x4ab673 _PyCFunction_FastCallKeywords
W1029 11:58:31.028695 48624 init.cc:212]     @           0x4ab673 _PyCFunction_FastCallKeywords
W1029 11:58:31.028724 48625 init.cc:212]     @           0x542e84 call_function
W1029 11:58:31.028745 48624 init.cc:212]     @           0x542e84 call_function
W1029 11:58:31.028944 48625 init.cc:212]     @           0x547cdc _PyEval_EvalFrameDefault
W1029 11:58:31.028961 48624 init.cc:212]     @           0x547cdc _PyEval_EvalFrameDefault
W1029 11:58:31.028991 48625 init.cc:212]     @           0x541e31 _PyFunction_FastCall
W1029 11:58:31.029008 48624 init.cc:212]     @           0x541e31 _PyFunction_FastCall
W1029 11:58:31.029037 48625 init.cc:212]     @           0x542fc7 call_function
W1029 11:58:31.029055 48624 init.cc:212]     @           0x542fc7 call_function
W1029 11:58:31.029260 48625 init.cc:212]     @           0x547cdc _PyEval_EvalFrameDefault
W1029 11:58:31.029274 48624 init.cc:212]     @           0x547cdc _PyEval_EvalFrameDefault
W1029 11:58:31.029309 48625 init.cc:212]     @           0x541e31 _PyFunction_FastCall
W1029 11:58:31.029321 48624 init.cc:212]     @           0x541e31 _PyFunction_FastCall
W1029 11:58:31.029505 48625 init.cc:212]     @           0x54bd76 _PyFunction_FastCallDict
W1029 11:58:31.029515 48624 init.cc:212]     @           0x54bd76 _PyFunction_FastCallDict
W1029 11:58:31.029692 48625 init.cc:212]     @           0x45304f _PyObject_FastCallDict
W1029 11:58:31.029698 48624 init.cc:212]     @           0x45304f _PyObject_FastCallDict
W1029 11:58:31.029875 48625 init.cc:212]     @           0x45314b _PyObject_Call_Prepend
W1029 11:58:31.029881 48624 init.cc:212]     @           0x45314b _PyObject_Call_Prepend
W1029 11:58:31.030092 48625 init.cc:212]     @           0x452d20 PyObject_Call
W1029 11:58:31.030095 48624 init.cc:212]     @           0x452d20 PyObject_Call
W1029 11:58:31.030200 48625 init.cc:212]     @           0x4c972b slot_tp_init
W1029 11:58:31.030203 48624 init.cc:212]     @           0x4c972b slot_tp_init
W1029 11:58:31.030299 48625 init.cc:212]     @           0x4c0e8a type_call
W1029 11:58:31.030303 48624 init.cc:212]     @           0x4c0e8a type_call
W1029 11:58:31.030493 48625 init.cc:212]     @           0x452f02 _PyObject_FastCallDict
W1029 11:58:31.030495 48624 init.cc:212]     @           0x452f02 _PyObject_FastCallDict
W1029 11:58:31.030544 48625 init.cc:212]     @           0x542bf5 call_function
W1029 11:58:31.030545 48624 init.cc:212]     @           0x542bf5 call_function
W1029 11:58:31.030768 48625 init.cc:212]     @           0x547cdc _PyEval_EvalFrameDefault
W1029 11:58:31.030771 48624 init.cc:212]     @           0x547cdc _PyEval_EvalFrameDefault
W1029 11:58:31.030817 48625 init.cc:212]     @           0x541e31 _PyFunction_FastCall
W1029 11:58:31.030820 48624 init.cc:212]     @           0x541e31 _PyFunction_FastCall
W1029 11:58:31.030867 48625 init.cc:212]     @           0x542fc7 call_function
W1029 11:58:31.030869 48624 init.cc:212]     @           0x542fc7 call_function
W1029 11:58:31.031098 48625 init.cc:212]     @           0x547cdc _PyEval_EvalFrameDefault
W1029 11:58:31.031100 48624 init.cc:212]     @           0x547cdc _PyEval_EvalFrameDefault
W1029 11:58:31.031148 48625 init.cc:212]     @           0x541e31 _PyFunction_FastCall
W1029 11:58:31.031150 48624 init.cc:212]     @           0x541e31 _PyFunction_FastCall
W1029 11:58:31.031206 48625 init.cc:212]     @           0x542fc7 call_function
W1029 11:58:31.031206 48624 init.cc:212]     @           0x542fc7 call_function
&lt;/denchmark-code&gt;

请问后面这堆log是什么原因导致的，是不是发生了内存泄露？
	</description>
	<comments>
		<comment id='1' author='Meiyim' date='2019-10-29T04:03:34Z'>
		当然，把import paddle相关代码去掉之后，是可以完美运行的
		</comment>
		<comment id='2' author='Meiyim' date='2019-10-29T07:01:57Z'>
		谢谢，问题已经复现，正在上报此Bug。
		</comment>
		<comment id='3' author='Meiyim' date='2019-11-12T03:29:44Z'>
		经debug定位问题原因是1.6会增加对捕捉到的Failure信号进行 LOG(WARNING) 输出相关代码在：



Paddle/paddle/fluid/platform/init.cc


         Line 220
      in
      e7d5e0e






 google::InstallFailureSignalHandler(); 





在 InitGoogleLogging 时，由于pool，teminate，应该把GoogleLogging的process都发送停掉信号了。
相应的抓住FailureSignal和输出warning在release 1.5是没有的。但是并不代表release 1.5没有该停止信号warning错误。经实验，在release 1.5同样加上warning输出后，也会打印出改错。
因此，这个应该不是bug，是process停止，paddle catch到的warning。
		</comment>
		<comment id='4' author='Meiyim' date='2019-12-12T02:30:44Z'>
		其实是1.5和1.6都有这个错，但是1.6增加报错信息，所以显示出来这个warning。
当前已经把1.6的报错信息更完备，使得上面log更友好
		</comment>
		<comment id='5' author='Meiyim' date='2019-12-12T02:31:10Z'>
		该issue应该算已解决，close it
		</comment>
	</comments>
</bug>