<bug id='799' author='jisantuc' open_date='2019-06-17T19:43:43Z' closed_time='2019-06-19T15:56:29Z'>
	<summary>Config builders cannot have type annotations in __init__</summary>
	<description>
Trying to build &lt;denchmark-link:https://github.com/raster-foundry/raster-vision-plugin/blob/996044a503d09d311105d07da98b31284b6a6e91/src/rf_raster_vision_plugin/raster_source/config.py&gt;a config class&lt;/denchmark-link&gt;
 with type annotations, you get:
&lt;denchmark-code&gt;In [7]: RfRasterSourceConfigBuilder(RfRasterSourceConfig).build()
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
&lt;ipython-input-7-2f92db6db3a6&gt; in &lt;module&gt;()
----&gt; 1 RfRasterSourceConfigBuilder(RfRasterSourceConfig).build()

/opt/src/rastervision/core/config.py in build(self)
     99         """
    100         self.validate()
--&gt; 101         arguments = set(inspect.getargspec(self.config_class).args)
    102         keys = set(self.config.keys())
    103         config = {k: self.config[k] for k in (arguments &amp; keys)}

/usr/lib/python3.5/inspect.py in getargspec(func)
   1043         getfullargspec(func)
   1044     if kwonlyargs or ann:
-&gt; 1045         raise ValueError("Function has keyword-only arguments or annotations"
   1046                          ", use getfullargspec() API which can support them")
   1047     return ArgSpec(args, varargs, varkw, defaults)

ValueError: Function has keyword-only arguments or annotations, use getfullargspec() API which can support them
&lt;/denchmark-code&gt;

&lt;denchmark-h:h2&gt;Reproduction&lt;/denchmark-h&gt;


docker/run from the linked repo
ipython

&gt;&gt;&gt; from rf_raster_vision_plugin.raster_source.config import RfRasterSourceConfig, RfRasterSourceConfigBuilder
&gt;&gt;&gt; RfRasterSourceConfigBuilder(RfRasterSourceConfig).build()
&lt;denchmark-h:h2&gt;Expected Behavior&lt;/denchmark-h&gt;

Config builder shouldn't choke on type annotations
	</description>
	<comments>
		<comment id='1' author='jisantuc' date='2019-06-18T13:54:58Z'>
		It turns out switching to comment-y annotations &lt;denchmark-link:https://github.com/raster-foundry/raster-vision-plugin/blob/2b58f1cfef93e9b529d5a6ccba8da0b30d4a0215/src/rf_raster_vision_plugin/raster_source/config.py#L18-L26&gt;is fine&lt;/denchmark-link&gt;
, but it's still a bit unfortunate that the api requires a specific style of code-formatting for anything extending a certain class
		</comment>
		<comment id='2' author='jisantuc' date='2019-06-18T17:30:01Z'>
		&lt;denchmark-link:https://github.com/jamesmcclain&gt;@jamesmcclain&lt;/denchmark-link&gt;
 Seems to come from &lt;denchmark-link:https://github.com/azavea/raster-vision/commit/5266a24320fb25954ee1b71b72b4914da29cc0b8#diff-83205f8430adad30169d000644c39a2eR94&gt;this change&lt;/denchmark-link&gt;
 - and I'm a bit unclear of what this is doing. Would reimplementing with  as the error message indicates be sufficient?
		</comment>
		<comment id='3' author='jisantuc' date='2019-06-18T17:40:25Z'>
		I am not able to immediately see what that code is doing either.

@jamesmcclain Seems to come from this change - and I'm a bit unclear of what this is doing. Would reimplementing with getfullargspec as the error message indicates be sufficient?

I am not able to immediately see what that code is doing right now, either.
I suspect that it is safe to re-implement it.  I will comment again if that view changes after looking at the whole PR that contains the changes that you are referencing above.
		</comment>
		<comment id='4' author='jisantuc' date='2019-06-18T17:49:33Z'>
		&lt;denchmark-code&gt;inspect.getargspec(func)
Get the names and default values of a Python functionâ€™s arguments. A tuple of four things is returned: (args, varargs, keywords, defaults). args is a list of the argument names (it may contain nested lists). varargs and keywords are the names of the * and ** arguments or None. defaults is a tuple of default argument values or None if there are no default arguments; if this tuple has n elements, they correspond to the last n elements listed in args.

Changed in version 2.6: Returns a named tuple ArgSpec(args, varargs, keywords, defaults).
&lt;/denchmark-code&gt;

It looks like what this is doing is insuring that the configuration consists only of things with keys that are valid arguments to the function.  I think that this is there because the ** turns a dictionary into function arguments, and there were instances when things were failing without it (as a result of other changes in that PR).
Please feel free to change with that in mind.
		</comment>
	</comments>
</bug>