<bug id='3127' author='dsteinman' open_date='2020-07-05T00:01:46Z' closed_time='2020-07-07T23:13:17Z'>
	<summary>Electron Windows build (electron-builder) is not finding the deepspeech.node binding</summary>
	<description>
I'm using electron-builder to package my electron app into an installer.  It's working great in Mac and Linux, but the Windows version cannot find the deepspeech native binding file.
I am not sure if this is a bug that would need to be resolved in the DeepSpeech module, or in electron-builder, or in electron itself.
I could follow up with a small test example to demonstrate the problem.
Basically, after creating the Windows exe installer (npm run dist from electron-builder), if I find the executable in my file system and run it directly from Git Bash, I can see the error messages in the console, and I receive this:
&lt;denchmark-code&gt;electron/js2c/asar.js:140
      if (!isAsar) return old.apply(this, arguments);
                              ^

Error: The specified module could not be found.
\\?\C:\Users\Dan\AppData\Local\Programs\mytestapp\resources\app.asar.unpacked\node_modules\deepspeech\lib\binding\v0.7.4\win32-x64\electron-v9.0\deepspeech.node
    at process.func [as dlopen] (electron/js2c/asar.js:140:31)
    at Object.Module._extensions..node (internal/modules/cjs/loader.js:1034:18)
    at Object.func [as .node] (electron/js2c/asar.js:149:18)
    at Module.load (internal/modules/cjs/loader.js:815:32)
    at Module._load (internal/modules/cjs/loader.js:727:14)
    at Function.Module._load (electron/js2c/asar.js:769:28)
    at Module.require (internal/modules/cjs/loader.js:852:19)
    at require (internal/modules/cjs/helpers.js:74:18)
    at Object.&lt;anonymous&gt; (C:\Users\Dan\AppData\Local\Programs\mytestapp\resources\app.asar\node_modules\deepspeech\index.js:18:17)
    at Module._compile (internal/modules/cjs/loader.js:967:30)
&lt;/denchmark-code&gt;

What's weird is this file actually does exist:
&lt;denchmark-code&gt;C:\Users\Dan\AppData\Local\Programs\mytestapp\resources\app.asar.unpacked\node_modules\deepspeech\lib\binding\v0.7.4\win32-x64\electron-v9.0\deepspeech.node
&lt;/denchmark-code&gt;

Maybe it's the junk at the start that causes a problem, I'm not sure.
&lt;denchmark-code&gt;\\?
\C:\
&lt;/denchmark-code&gt;

I kind of suspect electron-builder's app.asar package format is probably where the problem lies, and I may file another bug report there too and reference this one.
	</description>
	<comments>
		<comment id='1' author='dsteinman' date='2020-07-05T09:13:04Z'>
		
Basically, after creating the Windows exe installer (npm run dist from electron-builder), if I find the executable in my file system and run it directly from Git Bash, I can see the error messages in the console, and I receive this:

So the build process is fine ?
I'd suspect its the linker failing to find libdeepspeech.so,we have code somewhere to force set PATH on Windows to help with this, maybe its not being properly done with your setup ? It should be in index.ts/js
		</comment>
		<comment id='2' author='dsteinman' date='2020-07-05T14:08:30Z'>
		Yes it builds fine, this is a runtime error the moment I access require('deepspeech').
Everything works perfect in MacOS (dmg) and Linux (appimage).  And the Windows version works fine in development mode, but something related to how the DeepSpeech module is accessing the deepspeech.node file is not working when run inside an .exe -- either after installing, or running from the win-unpacked directory.
The way electron-builder uses the app.asar system to package the files is probably be the true culprit because that directly is involved with locating files in a package format.  But I don't know how to determine this.
I initially thought perhaps it was because I was running DeepSpeech inside a forked node processes, but I've just ruled that out, it also occurs when loading require('deepspeech') directly from my main electron javascript launcher file public/electron.js.
I'm am relying on other native modules, but they work and all get rebuilt so they are not in the same \resources\app.asar.unpacked\node_modules\ directory where deepspeech resides.  That directory only contains one other module which I am not using, so deepspeech is the only module that is working in this manner.
I'll try make a small electron project that duplicate the problem outside the rest of my app.
		</comment>
		<comment id='3' author='dsteinman' date='2020-07-05T17:15:07Z'>
		I'm sorry but i know nothing about this, i dont use electronjs nor Windows. I shared you hints, but again i don't know how to debug the linker under Windows.
Please investigate ans verify what i suggested earlier.
		</comment>
		<comment id='4' author='dsteinman' date='2020-07-05T17:18:17Z'>
		
but something related to how the DeepSpeech module is accessing the deepspeech.node file is not working when run inside an .exe -- either after installing, or running from the win-unpacked directory.

So yeah, please verify / investigate how index.ts/js loads deepspeech.node using node-pre-gyp and how we set PATH.
		</comment>
		<comment id='5' author='dsteinman' date='2020-07-05T17:32:03Z'>
		Yeah I'll need to debug a bit and find out what the actual file path it's looking for deepspeech.node, either the file isn't there or needs to be fixed/changed for electron-builder.
I'm going to add an electron example to the &lt;denchmark-link:https://github.com/mozilla/DeepSpeech-examples&gt;DeepSpeech-examples&lt;/denchmark-link&gt;
 repository and make sure it replicates this problem.
		</comment>
		<comment id='6' author='dsteinman' date='2020-07-05T17:46:17Z'>
		We already have test coverage for electron, but not using this.
		</comment>
		<comment id='7' author='dsteinman' date='2020-07-05T17:50:36Z'>
		Perhaps we could add electron-builder to the test coverage?  The whole reason to use Electron is to be able to produce a .exe/.dmg/.appimage that can be distributed and installed -- and this does not appear to be working for Windows, but does work for Mac and Linux.
		</comment>
		<comment id='8' author='dsteinman' date='2020-07-05T17:54:21Z'>
		
Perhaps we could add electron-builder to the test coverage? The whole reason to use Electron is to be able to produce a .exe/.dmg/.appimage that can be distributed and installed -- and this does not appear to be working for Windows, but does work for Mac and Linux.

Again, i know nothing about electron-builder.
		</comment>
		<comment id='9' author='dsteinman' date='2020-07-05T18:14:20Z'>
		
Again, i know nothing about electron-builder.

It might not be required to know much about electron-builder to be able to fix the problem -- I don't know much about it other than I'm trying to use it to create a packaged version of my electron app.  Electron-builder is one of only 2 ways to do this, the other being Electron Forge.
My example app is already done, it has electron-builder set up, and does duplicate the issue.  It's here:
&lt;denchmark-link:https://github.com/dsteinman/deepspeech-electron&gt;https://github.com/dsteinman/deepspeech-electron&lt;/denchmark-link&gt;

It's actually a pretty good example, it's kind of similar to the JS examples I provided earlier but doesn't rely on sox.
If you try this example on Windows, using npm run dist-win and run the executable it will show the error:
&lt;denchmark-link:https://user-images.githubusercontent.com/3894317/86539124-3cbd5880-bec8-11ea-9b39-51a03659f0d8.png&gt;&lt;/denchmark-link&gt;

And if you run npm run dist on Mac or Linux it will work just fine.
		</comment>
		<comment id='10' author='dsteinman' date='2020-07-06T09:13:41Z'>
		
It might not be required to know much about electron-builder to be able to fix the problem -- I don't know much about it other than I'm trying to use it to create a packaged version of my electron app. Electron-builder is one of only 2 ways to do this, the other being Electron Forge.

My point being that, as you says, there are "only two ways to do it", but us not being users of Electron, we can't spend all our time learning all the oddities of each ecosystem, so your feedback is valuable.

It's actually a pretty good example, it's kind of similar to the JS examples I provided earlier but doesn't rely on sox.

Then maybe it should be run next to our current code for testing ElectronJS ?
If you add that to DeepSpeech-examples with a test.sh file similar to existing ones, it would help

If you try this example on Windows, using npm run dist-win and run the executable it will show the error:

I don't know if it's meaningful, but it's like there is no mention of our code being ran. You relaly need to check if 


DeepSpeech/native_client/javascript/index.ts


        Lines 4 to 20
      in
      66d1f16






 // 'lib', 'binding', 'v0.1.1', ['node', 'v' + process.versions.modules, process.platform, process.arch].join('-'), 'deepspeech-bindings.node') 



 const binding_path = binary.find(path.resolve(path.join(__dirname, 'package.json'))); 



 



 // On Windows, we can't rely on RPATH being set to $ORIGIN/../ or on 



 // @loader_path/../ but we can change the PATH to include the proper directory 



 // for the dynamic linker 



 if (process.platform === 'win32') { 



 const dslib_path = path.resolve(path.join(binding_path, '../..')); 



 var oldPath = process.env.PATH; 



 process.env['PATH'] = `${dslib_path};${process.env.PATH}`; 



 } 



 



 const binding = require(binding_path); 



 



 if (process.platform === 'win32') { 



 process.env['PATH'] = oldPath; 



 } 




 is doing the right expected thing.
		</comment>
		<comment id='11' author='dsteinman' date='2020-07-06T11:23:09Z'>
		I see what you mean about the Path variable.  Just looking at this code, I am pretty sure something is wrong here:
&lt;denchmark-code&gt;if (process.platform === 'win32') {
    const dslib_path = path.resolve(path.join(binding_path, '../..'));
    var oldPath = process.env.PATH;
    process.env['PATH'] = `${dslib_path};${process.env.PATH}`;
}
&lt;/denchmark-code&gt;

It looks like deepspeech module trying to modify the system PATH variable?  Why?
		</comment>
		<comment id='12' author='dsteinman' date='2020-07-06T11:53:56Z'>
		
I see what you mean about the Path variable. Just looking at this code, I am pretty sure something is wrong here:
if (process.platform === 'win32') {
    const dslib_path = path.resolve(path.join(binding_path, '../..'));
    var oldPath = process.env.PATH;
    process.env['PATH'] = `${dslib_path};${process.env.PATH}`;
}

It looks like deepspeech module trying to modify the system PATH variable? Why?

Because we can't set rpath on Windows, and because without that it's unable to properly find the library where it is, the Windows linker searches in the same directory as deepspeech.node and in PATH. But deepspeech-node is dependant on the version, and so expecting the linker to find libdeepspeech.so next to it would mean a lot of copies of libdeepspeech.so, ending up in use space wasting. And given how npm works for publishing modules, it would explode because the package is too big (it already did when we were bundling more CUDA compute compatibility versions).
		</comment>
		<comment id='13' author='dsteinman' date='2020-07-06T14:12:38Z'>
		At Line 16, I did this:
&lt;denchmark-code&gt;try {
    const binding = require(binding_path);
}
catch(e) {
    console.log('binding error', binding_path);
    console.log('binding_path exists?', require('fs').existsSync(binding_path));
    console.error(e);
    process.exit();
}
&lt;/denchmark-code&gt;

So it's finding the deepspeech.node file just fine, I think the error must be coming from within it not because of it.
&lt;denchmark-code&gt;binding error C:\Users\Dan\dev\deepspeech-electron\dist\win-unpacked\resources\app.asar\node_modules\deepspeech\lib\binding\v0.7.4\win32-x64\electron-v9.0\deepspeech.node
binding_path exists? true
Error: The specified module could not be found.
\\?\C:\Users\Dan\dev\deepspeech-electron\dist\win-unpacked\resources\app.asar.unpacked\node_modules\deepspeech\lib\binding\v0.7.4\win32-x64\electron-v9.0\deepspeech.node
    at process.func [as dlopen] (electron/js2c/asar.js:140:31)
    at Object.Module._extensions..node (internal/modules/cjs/loader.js:1034:18)
    at Object.func [as .node] (electron/js2c/asar.js:149:18)
    at Module.load (internal/modules/cjs/loader.js:815:32)
    at Module._load (internal/modules/cjs/loader.js:727:14)
    at Function.Module._load (electron/js2c/asar.js:769:28)
    at Module.require (internal/modules/cjs/loader.js:852:19)
    at require (internal/modules/cjs/helpers.js:74:18)
    at Object.&lt;anonymous&gt; (C:\Users\Dan\dev\deepspeech-electron\dist\win-unpacked\resources\app.asar\node_modules\deepspeech\index.js:33:21)
    at Module._compile (internal/modules/cjs/loader.js:967:30)
&lt;/denchmark-code&gt;

I'm not sure which module this is referring to Error: The specified module could not be found..  Could this mean the C binding cannot find the JS module?  And if so, maybe it's because in this scenario the path being added onto process.env['PATH'] isn't valid.
		</comment>
		<comment id='14' author='dsteinman' date='2020-07-06T15:00:38Z'>
		
I'm not sure which module this is referring to Error: The specified module could not be found.. Could this mean the C binding cannot find the JS module? And if so, maybe it's because in this scenario the path being added onto process.env['PATH'] isn't valid.

Please verify that, I don't use Windows and I could not find proper documentation on how to get useful informations from the Windows linker (like ld with LD_DEBUG=all). So far, we still don't know if your deepspeech.node loading code can actually see libdeepspeech.so, i.e., PATH is properly populated and the windows linker sees it.
Maybe you should use sysinternals's depends.exe and check if deepspeech.node has extra deps that we missed, or if libdeepspeech.so has, etc.
		</comment>
		<comment id='15' author='dsteinman' date='2020-07-06T15:45:33Z'>
		&lt;denchmark-link:https://github.com/dsteinman&gt;@dsteinman&lt;/denchmark-link&gt;
 We'd like to find a fix for that by 0.8, so your help is more than valuable: in the worst case, if you can pop up with a very simple and dumb-proof example to repro, that would help. But please remember we don't use Windows, so it really needs to be dump-proof to avoid making us loose any time.
		</comment>
		<comment id='16' author='dsteinman' date='2020-07-06T17:08:47Z'>
		Yeah I'd like to submit this example to the 0.8 release.
&lt;denchmark-link:https://github.com/dsteinman/deepspeech-electron&gt;https://github.com/dsteinman/deepspeech-electron&lt;/denchmark-link&gt;

I can also add a better version of the &lt;denchmark-link:https://github.com/mozilla/DeepSpeech-examples/tree/r0.7/nodejs_wav&gt;nodejs_wav&lt;/denchmark-link&gt;
 example code.
That way we can all get on the same page about what actually going wrong when the .exe is packaged.  I don't have really any experience in debugging C code and not in Windows either, so it'll be tough for me to make much progress on my own.
Right now I'm just trying to adjust that electron example so the package does build correctly for Mac and Linux platforms -- at the moment it's not working on any.
		</comment>
		<comment id='17' author='dsteinman' date='2020-07-06T17:24:14Z'>
		&lt;denchmark-link:https://github.com/carlfm01&gt;@carlfm01&lt;/denchmark-link&gt;
 i know you are super busy, would you have suggestions to debug linkage issues at runtime ?
		</comment>
		<comment id='18' author='dsteinman' date='2020-07-07T12:41:27Z'>
		The pull request is there.
To replicate the issue in Windows:
&lt;denchmark-code&gt;npm install
npm run rebuild
export BROWSER=none
npm run dev-win
npm run dist-win
&lt;/denchmark-code&gt;

Click the resulting installer exe file in the dist directory.  Then running the "deepspeech-electron" app from the system menu will fail with the error in the screenshot above.
This process works on Mac and Windows (using npm run dev and npm run dist).  And I'm still confused about exactly why this isn't working in Windows, but it sure looks like it might be because of some incompatibility with that the PATH handling and the "app.asar" package forrmat that electron-builder uses.
		</comment>
		<comment id='19' author='dsteinman' date='2020-07-07T13:29:14Z'>
		
Click the resulting installer exe file in the dist directory. Then running the "deepspeech-electron" app from the system menu will fail with the error in the screenshot above.

What else do I need to install on a Windows machine to do that? NodeJS ? What version ? Any Visual Studio stuff ?
		</comment>
		<comment id='20' author='dsteinman' date='2020-07-07T13:31:56Z'>
		
but it sure looks like it might be because of some incompatibility with that the PATH handling and the "app.asar" package forrmat that electron-builder uses.

Have you verified the PATH value ? Does the code adds a valid path to that ?
		</comment>
		<comment id='21' author='dsteinman' date='2020-07-07T13:38:19Z'>
		

Click the resulting installer exe file in the dist directory. Then running the "deepspeech-electron" app from the system menu will fail with the error in the screenshot above.

What else do I need to install on a Windows machine to do that? NodeJS ? What version ? Any Visual Studio stuff ?

I installed Git Bash to provide a bash terminal.  I'd have to reboot to give you the NodeJS version, but I think it's the latest version (v14).
Yes there are some other Visual Studio and Python dependencies as well to be able to compile native NodeJS modules.  I would probably have to start again from a fresh Windows machine to be able to give exact instructions.
Basically I started with the Windows instructions here:
&lt;denchmark-link:https://github.com/nodejs/node-gyp&gt;https://github.com/nodejs/node-gyp&lt;/denchmark-link&gt;

		</comment>
		<comment id='22' author='dsteinman' date='2020-07-07T13:42:33Z'>
		

but it sure looks like it might be because of some incompatibility with that the PATH handling and the "app.asar" package forrmat that electron-builder uses.

Have you verified the PATH value ? Does the code adds a valid path to that ?

I only did a console log on the PATH variable, it does appear to be adding the directory that the code intends to.  But I think that directory isn't the one that's necessary for  the app.asar package.  I don't know know a whole lot about that format but it does appear to be troublesome for locating other files as well.  This really where my comprehension of the problem breaks down because I don't know enough about electron, electron-builder, and deepspeech.
		</comment>
		<comment id='23' author='dsteinman' date='2020-07-07T13:46:43Z'>
		
I only did a console log on the PATH variable, it does appear to be adding the directory that the code intends to. But I think that directory isn't the one that's necessary for the app.asar package.

Can you share a built package, maybe I can investigate and check how it should be built?
		</comment>
		<comment id='24' author='dsteinman' date='2020-07-07T13:47:49Z'>
		
Yes there are some other Visual Studio and Python dependencies as well to be able to compile native NodeJS modules. I would probably have to start again from a fresh Windows machine to be able to give exact instructions.

Okay, that's going to take me hours ...
		</comment>
		<comment id='25' author='dsteinman' date='2020-07-07T13:49:49Z'>
		Yeah it actually took me more like a whole day to get it all working.
I could provide the .exe, I just need to regenerate it, and a place to upload it.
		</comment>
		<comment id='26' author='dsteinman' date='2020-07-07T13:51:34Z'>
		Why do we have app.asar.unpacked VS app.asar
&lt;denchmark-code&gt;\\?\C:\Users\Dan\dev\deepspeech-electron\dist\win-unpacked\resources\app.asar.unpacked\node_modules\deepspeech\lib\binding\v0.7.4\win32-x64\electron-v9.0\deepspeech.node
&lt;/denchmark-code&gt;

VS
&lt;denchmark-code&gt;    at Object.&lt;anonymous&gt; (C:\Users\Dan\dev\deepspeech-electron\dist\win-unpacked\resources\app.asar\node_modules\deepspeech\index.js:33:21)
&lt;/denchmark-code&gt;

		</comment>
		<comment id='27' author='dsteinman' date='2020-07-07T13:59:23Z'>
		
Why do we have app.asar.unpacked VS app.asar

I can't actually answer this very well.  But the asar format is what electron-builder uses, and when you make a build, it creates the unpacked version and the packed version.  And when you install it, it unpacks it before running it.  I'm not exactly very clear on what's going on, but it is almost certainly involved in why a module not found error is occurring.
		</comment>
		<comment id='28' author='dsteinman' date='2020-07-07T14:06:55Z'>
		

Why do we have app.asar.unpacked VS app.asar

I can't actually answer this very well. But the asar format is what electron-builder uses, and when you make a build, it creates the unpacked version and the packed version. And when you install it, it unpacks it before running it. I'm not exactly very clear on what's going on, but it is almost certainly involved in why a module not found error is occurring.

that's also my reading of the issue so far, especially since your console.log. Could we please try and hack a hardcoded PATH here to app.asar maybe? If it's just about computing the proper path, it can be an easy fix ...
		</comment>
		<comment id='29' author='dsteinman' date='2020-07-07T16:31:27Z'>
		

Somehow I ended up with ElectronJS v9.1 when we only have support for 9.0 ...

Yes I noticed that as well. I thought I fixed it in the DeepSpeech-examples/electron Pull request.
The version of electron had to be set to exactly 9.0.5, and not ^9.0.5
"devDependencies": {
    "concurrently": "^5.0.0",
    "electron": "9.0.5",


Right, that seems to work better. Let's see how much I'll hate the nodejs ecosystem after that :)
		</comment>
		<comment id='30' author='dsteinman' date='2020-07-07T16:36:03Z'>
		


Somehow I ended up with ElectronJS v9.1 when we only have support for 9.0 ...

Yes I noticed that as well. I thought I fixed it in the DeepSpeech-examples/electron Pull request.
The version of electron had to be set to exactly 9.0.5, and not ^9.0.5
"devDependencies": {
    "concurrently": "^5.0.0",
    "electron": "9.0.5",


Right, that seems to work better. Let's see how much I'll hate the nodejs ecosystem after that :)

npm run dev-win explodes with an error:
TypeError: Cannot read property 'filter' of undefined from create-window.js:50
		</comment>
		<comment id='31' author='dsteinman' date='2020-07-07T16:37:15Z'>
		You're missing the audio files.  They need to be in public/audio
It sounds like you've already got it pretty much working.
		</comment>
		<comment id='32' author='dsteinman' date='2020-07-07T16:37:47Z'>
		
You're missing the audio files. They need to be in public/audio

That was not part of your instructions, sorry, and since it downloads models ...
		</comment>
		<comment id='33' author='dsteinman' date='2020-07-07T16:40:28Z'>
		

You're missing the audio files. They need to be in public/audio

That was not part of your instructions, sorry, and since it downloads models ...

Oh I forgot to mention it above, but I did add it to the readme.  I should probably add a proper error message for this.
		</comment>
		<comment id='34' author='dsteinman' date='2020-07-07T16:43:53Z'>
		dist-win depends on yarn ?
		</comment>
		<comment id='35' author='dsteinman' date='2020-07-07T16:45:37Z'>
		
dist-win depends on yarn ?

No, nothing here relies on yarn.
FYI I'm using node v13.13.0 and npm 6.14.4 on Windows.
		</comment>
		<comment id='36' author='dsteinman' date='2020-07-07T16:46:06Z'>
		&lt;denchmark-code&gt;User@WinDev2006Eval MINGW64 ~/deepspeech-electron (master)
$ npm run dist-win

&gt; deepspeech-electron@1.0.0 dist-win C:\Users\User\deepspeech-electron
&gt; yarn run build &amp;&amp; electron-builder --x64

yarn run v1.22.4
$ react-scripts build
Creating an optimized production build...
Compiled successfully.

File sizes after gzip:

  40.05 KB  build\static\js\2.0472d069.chunk.js
  781 B     build\static\js\runtime-main.b2c498fc.js
  670 B     build\static\js\main.09f8e380.chunk.js

The project was built assuming it is hosted at ./.
You can control this with the homepage field in your package.json.

The build folder is ready to be deployed.

Find out more about deployment here:

  bit.ly/CRA-deploy

Done in 20.99s.
  ΓÇó electron-builder  version=22.7.0 os=10.0.19041
  ΓÇó loaded configuration  file=package.json ("build" field)
  ΓÇó loaded parent configuration  preset=react-cra
  ΓÇó author is missed in the package.json  appPackageFile=C:\Users\User\deepspeech-electron\package.json
  ΓÇó electron-rebuild not required if you use electron-builder, please consider to remove excess dependency from devDependencies

To ensure your native dependencies are always matched electron version, simply add script `"postinstall": "electron-builder install-app-deps" to your `package.json`
  Γ¿» Package "electron" is only allowed in "devDependencies". Please remove it from the "dependencies" section in your package.json.
npm ERR! code ELIFECYCLE
npm ERR! errno 1
npm ERR! deepspeech-electron@1.0.0 dist-win: `yarn run build &amp;&amp; electron-builder --x64`
npm ERR! Exit status 1
npm ERR!
npm ERR! Failed at the deepspeech-electron@1.0.0 dist-win script.
npm ERR! This is probably not a problem with npm. There is likely additional logging output above.

npm ERR! A complete log of this run can be found in:
npm ERR!     C:\Users\User\AppData\Roaming\npm-cache\_logs\2020-07-07T16_45_10_499Z-debug.log

User@WinDev2006Eval MINGW64 ~/deepspeech-electron (master)
&lt;/denchmark-code&gt;

		</comment>
		<comment id='37' author='dsteinman' date='2020-07-07T16:50:53Z'>
		Oops, that's a mistake on my part.  The package.json scripts can be changed from yarn to npm, I've pushed a change in:
&lt;denchmark-link:https://github.com/dsteinman/DeepSpeech-examples/commit/c729f983f4219a69a480a642e166018710169ec9&gt;dsteinman/DeepSpeech-examples@c729f98&lt;/denchmark-link&gt;

		</comment>
		<comment id='38' author='dsteinman' date='2020-07-07T17:03:09Z'>
		&lt;denchmark-link:https://github.com/dsteinman&gt;@dsteinman&lt;/denchmark-link&gt;
 So, from the begining I was right ?
The following in deepspeech/index.js works with ./deepspeech-electron.exe:
&lt;denchmark-code&gt;if (process.platform === 'win32') {
    const dslib_path_o = path_1.default.resolve(path_1.default.join(binding_path, '../..'));
	const dslib_path = dslib_path_o.replace("app.asar", "app.asar.unpacked");
console.log("dslib_path:",  dslib_path);
console.log("process:", process.env.PATH);
    var oldPath = process.env.PATH;
    process.env['PATH'] = `${dslib_path};${process.env.PATH}`;
console.log("process:", process.env.PATH);
}
&lt;/denchmark-code&gt;

		</comment>
		<comment id='39' author='dsteinman' date='2020-07-07T17:07:19Z'>
		
@dsteinman So, from the begining I was right ?
The following in deepspeech/index.js works with ./deepspeech-electron.exe:
if (process.platform === 'win32') {
    const dslib_path_o = path_1.default.resolve(path_1.default.join(binding_path, '../..'));
	const dslib_path = dslib_path_o.replace("app.asar", "app.asar.unpacked");
console.log("dslib_path:",  dslib_path);
console.log("process:", process.env.PATH);
    var oldPath = process.env.PATH;
    process.env['PATH'] = `${dslib_path};${process.env.PATH}`;
console.log("process:", process.env.PATH);
}


Can you verify that this works on the whole workflow ? If so, it means it's just the PATH that is broken, as I was suggesting.
		</comment>
		<comment id='40' author='dsteinman' date='2020-07-07T17:07:48Z'>
		&lt;denchmark-code&gt;User@WinDev2006Eval MINGW64 ~/deepspeech-electron/dist/win-unpacked (master)
$ ./deepspeech-electron.exe

TensorFlow: v1.15.0-24-gceb46aae58
DeepSpeech: v0.7.4-0-gfcd9563f
2020-07-07 10:07:32.672680: I tensorflow/core/platform/cpu_feature_guard.cc:142] Your CPU supports instructions that this TensorFlow binary was not compiled to use: AVX2
model loaded

&lt;/denchmark-code&gt;

		</comment>
		<comment id='41' author='dsteinman' date='2020-07-07T17:15:07Z'>
		Looks like that's working!!!  Both from the win-unpacked and the installer.  This is terrific.
I just never clued into that replacement because both the packed and unpacked asar were always there and thought that's how it needed to be.  So sorry for all the trouble.   I'm glad it didn't take too long to figure out.
		</comment>
		<comment id='42' author='dsteinman' date='2020-07-07T17:17:19Z'>
		
I just never clued into that replacement because both the packed and unpacked asar were always there and thought that's how it needed to be. So sorry for all the trouble. I'm glad it didn't take too long to figure out.

Well, I really don't get what you don't get, because it feels to be what I repeated. Anyway, thanks for the confirmation, I'm preparing a """better""" fix.
		</comment>
		<comment id='43' author='dsteinman' date='2020-07-07T17:20:05Z'>
		&lt;denchmark-link:https://github.com/dsteinman&gt;@dsteinman&lt;/denchmark-link&gt;
 If you can suggest a better solution than replacing  with  it'd be great
		</comment>
		<comment id='44' author='dsteinman' date='2020-07-07T17:37:51Z'>
		
@dsteinman If you can suggest a better solution than replacing app.asar with app.asar.unpacked it'd be great

Looks good to me.  I can't think of a much better way to do it.
Thank you very much for all the help.
		</comment>
		<comment id='45' author='dsteinman' date='2020-07-07T20:12:07Z'>
		It's taking more time than I would have hoped because of infra issues on our CI.
		</comment>
		<comment id='46' author='dsteinman' date='2020-07-07T20:17:55Z'>
		
It's taking more time than I would have hoped because of infra issues on our CI.

No problem, there isn't any particular rush on my end.  I've made these same changes locally for now which gets me unstuck for the time being.
Will there be a DeepSpeech 0.7.5 release for this, or will it be part of 0.8?
		</comment>
		<comment id='47' author='dsteinman' date='2020-07-07T20:19:32Z'>
		
Will there be a DeepSpeech 0.7.5 release for this, or will it be part of 0.8?

no, it will be 0.8+, but you can easily pick the fix for your own use
		</comment>
	</comments>
</bug>