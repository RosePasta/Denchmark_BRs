<bug id='239' author='Paperone80' open_date='2018-12-15T16:15:15Z' closed_time='2019-01-09T12:19:56Z'>
	<summary>utils.coco.convert.py returns wrong bbox coordinates</summary>
	<description>
Hi,
I am using the version as of 2018-11-19.
I noticed that the 'bbox' coordinates after converting cvat-xml are wrong. At least in the cases where objects are overlapping.
Here are the polygon points in the CVAT-XML example:

&lt;polygon label="label_1" points="1231.64,1390.72;1215.49,1318.05;1213.88,1295.44;1218.72,1271.21;1236.49,1251.83;1257.48,1242.14;1281.71,1237.29;1309.16,1237.29;1333.39,1240.52;1351.16,1255.06;1357.62,1280.90;1373.77,1379.42;1485.21,1713.74;1565.96,1901.08;1590.18,1988.30;1729.24,2640.45;1869.10,3122.71;2057.26,3739.98;2100.54,3836.40;2105.39,3903.91;2052.41,3961.73;1980.06,3937.67;1922.24,3884.69;1907.70,3865.31;1608.76,2770.63;1526.71,2558.41;1492.96,2269.15;1382.00,1883.32;1261.52,1502.32" 
&lt;polygon label="label_2" points="2196.28,1268.33;2197.79,1289.48;2203.98,1315.17;2210.02,1337.83;2210.02,1351.43;399.91,1620.35;384.81,1532.72;437.68,1523.66;445.39,1543.30;465.03,1555.39;487.54,1562.94;510.20,1556.90;526.97,1540.28;533.02,1516.11;533.02,1511.57;939.43,1451.14;948.34,1466.25;971.15,1484.38;993.66,1485.89;1014.97,1476.82;1031.59,1458.69;1043.67,1437.54;1045.03,1436.03;1332.09,1389.20;2046.86,1292.50;2057.43,1312.15;2078.58,1319.70;2102.76,1321.21;2125.27,1313.66;2132.82,1297.04;2140.53,1275.89"


From the output annotation file via:
&lt;denchmark-code&gt;with open('cvat_coco_test.txt', 'r') as cocofile:
    df = json.load((cocofile))

pd.DataFrame(df['annotations'])
&lt;/denchmark-code&gt;

bbox - which is wrong, visually tested with cv2.rectangle()
0: [1214.0, 1237.0, 161.0, 167.0]
1: [385.0, 1268.0, 1825.0, 352.0]
'segmentation'
0: [[1237.0, 1404.5, 1234.5, 1404.0, 1232.5, 1397.0, 1214.5, 1317.0, 1213.5, 1292.0, 1218.5, 1270.0, 1237.0, 1250.5, 1257.0, 1241.5, 1280.0, 1236.5, 1310.0, 1236.5, 1334.0, 1240.5, 1351.5, 1256.0, 1357.5, 1280.0, 1374.5, 1382.0, 1373.0, 1383.5, 1330.0, 1388.5, 1237.0, 1404.5], [2052.0, 3961.5, 1980.0, 3937.5, 1920.5, 3883.0, 1908.5, 3867.0, 1905.5, 3860.0, 1609.5, 2773.0, 1526.5, 2559.0, 1492.5, 2267.0, 1385.5, 1895.0, 1264.5, 1514.0, 1258.5, 1493.0, 1260.0, 1491.5, 1404.5, 1471.0, 1483.5, 1711.0, 1567.5, 1906.0, 1591.5, 1994.0, 1729.5, 2644.0, 1868.5, 3123.0, 2055.5, 3737.0, 2100.5, 3836.0, 2104.5, 3904.0, 2052.0, 3961.5]]
1: [[2196.28, 1268.33, 2197.79, 1289.48, 2203.98, 1315.17, 2210.02, 1337.83, 2210.02, 1351.43, 399.91, 1620.35, 384.81, 1532.72, 437.68, 1523.66, 445.39, 1543.3, 465.03, 1555.39, 487.54, 1562.94, 510.2, 1556.9, 526.97, 1540.28, 533.02, 1516.11, 533.02, 1511.57, 939.43, 1451.14, 948.34, 1466.25, 971.15, 1484.38, 993.66, 1485.89, 1014.97, 1476.82, 1031.59, 1458.69, 1043.67, 1437.54, 1045.03, 1436.03, 1332.09, 1389.2, 2046.86, 1292.5, 2057.43, 1312.15, 2078.58, 1319.7, 2102.76, 1321.21, 2125.27, 1313.66, 2132.82, 1297.04, 2140.53, 1275.89]]
Correct 'bbox' should have been - visually tested:
0: [1214, 1236, 2104, 3962]
1: [385, 1268, 2210, 1620]
	</description>
	<comments>
		<comment id='1' author='Paperone80' date='2018-12-15T16:22:13Z'>
		As an interim fix I did the following - visually tested and working:
&lt;denchmark-code&gt;def calc_bbox_from_coco_segments(segments):
    # segments is list of list of segments points. segment points are sequences of x1, y1, x2, y2, ... 
    bbox = [None, None, None, None]
    for segment in segments:
        x = []
        y = []
        # sort every 2nd element in x, y lists
        for i,k in zip(segment[::2], segment[1::2]): 
            x.append(i), y.append(k)

        xmin, ymin, xmax, ymax = round(float(min(x))), round(float(min(y))), round(float(max(x))), round(float(max(y))) 

        if bbox[0] == None: bbox[0] = xmin
        elif bbox[0] != None: bbox[0] = min(bbox[0], xmin)

        if bbox[1] == None: bbox[1] = ymin
        elif bbox[1] != None: bbox[1] = min(bbox[1], ymin)

        if bbox[2] == None: bbox[2] = xmax
        elif bbox[2] != None: bbox[2] = max(bbox[2], xmax)

        if bbox[3] == None: bbox[3] = ymax
        elif bbox[3] != None: bbox[3] = max(bbox[3], ymax)
    return bbox
&lt;/denchmark-code&gt;

&lt;denchmark-code&gt;with open('cvat_coco_test.txt', 'r') as cocofile:
    df = json.load((cocofile))

cvat_coco_annotations = pd.DataFrame(df['annotations'])
cvat_coco_annotations['bbox_v2'] = cvat_coco_annotations['segmentation'].apply(
    lambda x: calc_bbox_from_coco_segments(x))
&lt;/denchmark-code&gt;

In case 'xmin','ymin','xmax','ymax' are needed:
&lt;denchmark-code&gt;cvat_coco_annotations[['xmin','ymin','xmax','ymax']] = cvat_coco_annotations['bbox_v2'].apply(pd.Series)
&lt;/denchmark-code&gt;

		</comment>
		<comment id='2' author='Paperone80' date='2018-12-17T07:22:12Z'>
		Hi &lt;denchmark-link:https://github.com/Paperone80&gt;@Paperone80&lt;/denchmark-link&gt;
 ,
Thanks for the report. Could you please send us PR with necessary changes?
		</comment>
		<comment id='3' author='Paperone80' date='2018-12-18T09:05:21Z'>
		Hi!
The problem is related to an incorrect processing of bounding boxes coordinates (using method from cocoapi) when a polygon is separated into several independent parts and the script gets only the first box:
&lt;denchmark-code&gt;new_anno['bbox'] = [bbox[0][0], bbox[0][1], bbox[0][2], bbox[0][3]]
&lt;/denchmark-code&gt;

The fix is:
&lt;denchmark-code&gt;new_anno['bbox'] = [min(bbox[:, 0]),
                    min(bbox[:, 1]),
                    max(bbox[:, 0] + bbox[:, 2]) - min(bbox[:, 0]),
                    max(bbox[:, 1] + bbox[:, 3]) - min(bbox[:, 1])]
&lt;/denchmark-code&gt;

and the result bounding box tights all parts of a polygon. Btw, In COCO bounding boxes are represented as .
&lt;denchmark-link:https://github.com/Paperone80&gt;@Paperone80&lt;/denchmark-link&gt;
 could you please test this fix for your task? If it is OK I will create PR.
		</comment>
		<comment id='4' author='Paperone80' date='2018-12-23T23:31:20Z'>
		&lt;denchmark-link:https://github.com/nmanovic&gt;@nmanovic&lt;/denchmark-link&gt;
, thanks for looking into this.
&lt;denchmark-link:https://github.com/DmitriySidnev&gt;@DmitriySidnev&lt;/denchmark-link&gt;
, I totally missed that COCO bounding boxes are represented as .
I briefly checked:

The COCO script produces correct [x, y, w, h] if the segmentations-columns contains only 1 segment, i.e. list length == 1.
If segment list &gt;=2, the COCO script does not results correct bounding box.

I tried your fix but it doesn't work for me. Also, as far as I understand the fix also assumes always 2 segments so it breaks if only 1 segment. Here is an example list with 2 segments:
[[1413.0, 1468.5, 1406.5, 1468.0, 1383.5, 1385.0, 1386.0, 1383.5, 2187.0, 1265.5, 2193.5, 1266.0, 2201.5, 1282.0, 2205.0, 1349.5, 1413.0, 1468.5], [400.0, 1620.5, 397.5, 1620.0, 396.5, 1615.0, 384.5, 1537.0, 384.5, 1532.0, 389.0, 1530.5, 1230.0, 1406.5, 1232.0, 1406.5, 1233.5, 1409.0, 1252.5, 1492.0, 400.0, 1620.5]]
Erwartetes Resultat:
['xmin','ymin','xmax','ymax']  == [384 , 1266 , 2205 , 1620] 
Hope this helps.
		</comment>
		<comment id='5' author='Paperone80' date='2018-12-24T10:27:59Z'>
		&lt;denchmark-link:https://github.com/Paperone80&gt;@Paperone80&lt;/denchmark-link&gt;
,  for above example I get the next values ():  and it is  in  representation (difference by 1 pixel is related to function from cocoapi that returns bounding box from segment and I hope it is not so important). So, I visualized the result and seems that the fix works correctly:
&lt;denchmark-link:https://user-images.githubusercontent.com/26278045/50396876-c2156800-077d-11e9-8f1e-9775959587be.jpg&gt;&lt;/denchmark-link&gt;

But how do you understand that it does not work? If you use  for drawing rectangles, do not forget that its function takes coordinates of two points - left bottom and right down but not image's height and width which we obtain in coco format.
		</comment>
	</comments>
</bug>