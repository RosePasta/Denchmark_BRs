<bug id='1145' author='cstamatopoulos' open_date='2020-02-16T22:38:47Z' closed_time='2020-02-18T13:41:21Z'>
	<summary>Installation issue with postgres</summary>
	<description>
When trying to set up the user
docker exec -it cvat bash -ic 'python3 ~/manage.py createsuperuser'
I would get

~/cvat$ docker exec -it cvat bash -ic 'python3 ~/manage.py createsuperuser'
Traceback (most recent call last):
File "/usr/local/lib/python3.5/dist-packages/django/db/backends/base/base.py", line 217, in ensure_connection
self.connect()
File "/usr/local/lib/python3.5/dist-packages/django/db/backends/base/base.py", line 195, in connect
self.connection = self.get_new_connection(conn_params)
File "/usr/local/lib/python3.5/dist-packages/django/db/backends/postgresql/base.py", line 178, in get_new_connection
connection = Database.connect(**conn_params)
File "/usr/local/lib/python3.5/dist-packages/psycopg2/init.py", line 130, in connect
conn = connect(dsn, connection_factory=connection_factory, **kwasync)
psycopg2.OperationalError: could not translate host name "cvat_db" to address: Name or service not known
The above exception was the direct cause of the following exception:
Traceback (most recent call last):
File "/home/django/manage.py", line 21, in 
execute_from_command_line(sys.argv)
File "/usr/local/lib/python3.5/dist-packages/django/core/management/init.py", line 381, in execute_from_command
line
utility.execute()
File "/usr/local/lib/python3.5/dist-packages/django/core/management/init.py", line 375, in execute
self.fetch_command(subcommand).run_from_argv(self.argv)
File "/usr/local/lib/python3.5/dist-packages/django/core/management/base.py", line 323, in run_from_argv
self.execute(*args, **cmd_options)
File "/usr/local/lib/python3.5/dist-packages/django/contrib/auth/management/commands/createsuperuser.py", line 61, i
n execute
return super().execute(*args, **options)
File "/usr/local/lib/python3.5/dist-packages/django/core/management/base.py", line 363, in execute
self.check_migrations()
File "/usr/local/lib/python3.5/dist-packages/django/core/management/base.py", line 453, in check_migrations
executor = MigrationExecutor(connections[DEFAULT_DB_ALIAS])
File "/usr/local/lib/python3.5/dist-packages/django/db/migrations/executor.py", line 18, in init
self.loader = MigrationLoader(self.connection)
File "/usr/local/lib/python3.5/dist-packages/django/db/migrations/loader.py", line 49, in init
self.build_graph()
File "/usr/local/lib/python3.5/dist-packages/django/db/migrations/loader.py", line 212, in build_graph
self.applied_migrations = recorder.applied_migrations()

Docker logs would show

~/cvat$ docker logs cvat_db
Error: Database is uninitialized and superuser password is not specified.
You must specify POSTGRES_PASSWORD for the superuser. Use
"-e POSTGRES_PASSWORD=password" to set it in "docker run".
You may also use POSTGRES_HOST_AUTH_METHOD=trust to allow all connections
without a password. This is not recommended. See PostgreSQL
documentation about "trust":
https://www.postgresql.org/docs/current/auth-trust.html

I found this
&lt;denchmark-link:https://github.com/docker-library/postgres/pull/658&gt;docker-library/postgres#658&lt;/denchmark-link&gt;

Where it talks about the changes and says that to get the old behavior,
POSTGRES_HOST_AUTH_METHOD: 'trust'
should be added to the .yml.
Once that was done all was good.
	</description>
	<comments>
		<comment id='1' author='cstamatopoulos' date='2020-02-17T05:50:28Z'>
		I encouter the same problem. I strictly follow the installation-instruction 3 times, but the problem is the same. Error said the POSTGRES need to be initiated.
Maby the the images have been updated, but the src code does not follow these changes.
Could Somebody  solve the problem, Thank you!
		</comment>
		<comment id='2' author='cstamatopoulos' date='2020-02-17T05:51:25Z'>
		I've already provided a way to get around it.
Add to docker-compose.yml, where all the other postgres setings are, the line
POSTGRES_HOST_AUTH_METHOD: 'trust'
		</comment>
		<comment id='3' author='cstamatopoulos' date='2020-02-17T12:12:54Z'>
		
I've already provided a way to get around it.
Add to docker-compose.yml, where all the other postgres setings are, the line
POSTGRES_HOST_AUTH_METHOD: 'trust'

Thank you, solved it!
		</comment>
	</comments>
</bug>