<bug id='1141' author='petermlyon' open_date='2020-02-13T10:45:11Z' closed_time='2020-02-28T13:15:09Z'>
	<summary>3-4 second lag when modifying shapes</summary>
	<description>
Hi Guys,
First I wanted to say thanks for developing and maintaining this tool. It's invaluable for me :)
We are having a minor issue with lag when modifying existing shapes. These polygon annotations have quite a lot of points. The SVG definitions from one of my problem cases is attached, SvgjsPolygon22040 is the shape I am modifying when able to reliably reproduce this issue.
The issue precisely is that usually after moving 30-40 points in a session, there starts to be an occasional 3-4 second freeze when moving points (every 4-5 points or so). I can carry on clicking and moving points during the freeze, and the system catches up again afterwards.
The system is very responsive immediately before and after the lag.  It doesn't appear to be a resource issue on the machine that is being used, but it is reminiscent of hard-drive buffering. I've reproduced it in chrome 80 on windows and chrome 79 on Linux. I'm wondering if it could be some kind of chrome optimisation that needs to be disabled.
This isn't a major issue to productivity as saving the shape and refreshing the editor fixes the problem, but I'm just wondering if there is any trick to preventing this issue, I've tried running chrome options to disable disk buffering but to no avail.
Thanks in advance for all comments and suggestions.
&lt;denchmark-link:https://github.com/opencv/cvat/files/4197784/svgdefs2.txt&gt;svgdefs2.txt&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='petermlyon' date='2020-02-14T08:31:14Z'>
		&lt;denchmark-link:https://github.com/petermlyon&gt;@petermlyon&lt;/denchmark-link&gt;

Hi,
Could you please record a &lt;denchmark-link:https://developers.google.com/web/updates/2016/12/devtools-javascript-cpu-profile-migration&gt;profile in google chrome&lt;/denchmark-link&gt;
 and send it us to investigate?
		</comment>
		<comment id='2' author='petermlyon' date='2020-02-17T10:31:14Z'>
		Hi,
Between 28.49s and 36.49s there are several drag operations.

The first one is responsive, and can be seen occurring in the images from the captured profile.
The second and third drag operation are made around 31-32 seconds but don't update the UI until around the 36 second mark

If you need any more info let me know :)
Around
&lt;denchmark-link:https://github.com/opencv/cvat/files/4213005/chrome.debug.profile.cvat.17-02-2020.zip&gt;chrome debug profile cvat 17-02-2020.zip&lt;/denchmark-link&gt;

		</comment>
		<comment id='3' author='petermlyon' date='2020-02-17T14:38:34Z'>
		&lt;denchmark-link:https://github.com/petermlyon&gt;@petermlyon&lt;/denchmark-link&gt;

Hmm.
Yes, I see that event resizedone takes 2.32 sec.
And it is only scripting there.
Examples of polygons you attached actually is not very large. I usually can work with polygons where &gt; 100 points without any problems.
What about hardware of the computer? Mostly I am interested in CPU, but other parameters would not be extra information.
		</comment>
		<comment id='4' author='petermlyon' date='2020-02-17T15:29:58Z'>
		So the thing I've noticed with this is it seems to be related to the number of pending edits to a shape. I don't know how the underlying data-structure differs between editing and creation so not sure if that is helpful?
This test was done on a machine with an i7-7700HQ, 16GB of RAM and SSD. I've also reproduced this result on a machine with an AMD 6 core &amp; 6GB of RAM, as well as an i5 quad core with 8GB of RAM.
		</comment>
		<comment id='5' author='petermlyon' date='2020-02-19T09:28:01Z'>
		&lt;denchmark-link:https://github.com/petermlyon&gt;@petermlyon&lt;/denchmark-link&gt;

Investigated it.
Looks like a performance issue in svg.js library.
Array::indexOf is hotspot in this case.
&lt;denchmark-link:https://user-images.githubusercontent.com/40690378/74820088-7410db80-5312-11ea-881a-a143de3abf9e.png&gt;&lt;/denchmark-link&gt;

I am not sure about fast fix here. On the one hand I see wrong method of working with an array in the library. On the other hand we might use the library somehow else.
		</comment>
		<comment id='6' author='petermlyon' date='2020-02-26T07:04:06Z'>
		&lt;denchmark-link:https://github.com/petermlyon&gt;@petermlyon&lt;/denchmark-link&gt;

The patch &lt;denchmark-link:https://github.com/openvinotoolkit/cvat/pull/1197&gt;#1197&lt;/denchmark-link&gt;
 is expected to help.
Let me know if it does.
		</comment>
		<comment id='7' author='petermlyon' date='2020-02-28T13:15:09Z'>
		One more &lt;denchmark-link:https://github.com/opencv/cvat/issues/602#issuecomment-592062121&gt;problem&lt;/denchmark-link&gt;
 was found.
It has been introduced with the PR above.
Finally I would recommend to update with &lt;denchmark-link:https://github.com/openvinotoolkit/cvat/pull/1212&gt;#1212&lt;/denchmark-link&gt;
.
Also I will close the issue for now.
Do not hesitate reopen it if you still has problems with performance after update.
		</comment>
	</comments>
</bug>