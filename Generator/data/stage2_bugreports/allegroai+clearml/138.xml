<bug id='138' author='H4dr1en' open_date='2020-05-24T09:39:19Z' closed_time='2020-06-04T20:05:05Z'>
	<summary>Task.enqueue raises TypeError with default parameters</summary>
	<description>
With trains==0.15.0rc0
When calling Task.enqueue(task), user gets the following error:
&lt;denchmark-code&gt;File "piping.py", line 47, in main
    Task.enqueue(task)
  File "/Users/h4dr1en/miniconda3/envs/training-py36/lib/python3.6/site-packages/trains/task.py", line 710, in enqueue
    req = queues.GetAllRequest(name=exact_match_regex(queue_name), only_fields=["id"])
  File "/Users/h4dr1en/miniconda3/envs/training-py36/lib/python3.6/site-packages/trains/backend_interface/util.py", line 125, in exact_match_regex
    return '^%s$' % re.escape(name)
  File "/Users/h4dr1en/miniconda3/envs/training-py36/lib/python3.6/re.py", line 267, in escape
    for c in pattern:
TypeError: 'NoneType' object is not iterable
&lt;/denchmark-code&gt;

This is because both queue_name and queue_id were not specified when calling Task.enqueue(task). Nevertheless:

The error is not straightfoward (should raise ValueError("No queue_id/queue_name specified"))
Task.enqueue should not have queue=None(User should not expect a function to fail because of default values). Either:

Set default value of queue_name to "default" (which would make a lot of sense). queue_id should only be considered if it is not None and should take the predecence over queue_name.
Change signature: Task.enqueue(task, queue), where queue is either an id or an name. The detection of whether queue is a name or an id can be done under the hood.



	</description>
	<comments>
		<comment id='1' author='H4dr1en' date='2020-05-24T14:40:49Z'>
		Hi &lt;denchmark-link:https://github.com/H4dr1en&gt;@H4dr1en&lt;/denchmark-link&gt;
 , you are correct, bug is verified.
Regrading the suggestion, the previous behavior , if both  &amp;  are None, it will  select the first queue, and print a warning if there are multiple queues defined in the system.
We can:

preserve the current behavior
force either name or id
use "default" queue name if nothing is provided (and probably print a warning saying we selected queue name "default". The thing is, you can always rename a queue, so we cannot count on "default" queue to always exist.

I tend towards the second option, I think it makes more sense for the user to know what they are looking for...
What do you think?
		</comment>
		<comment id='2' author='H4dr1en' date='2020-05-26T13:13:52Z'>
		Force either name or id is OK as long as the error message is clear I would say, otherwise change the signature to enqueue(task, queue_name="default", queue_id=None).
Btw, any reason to have this function as classmethod and not just method?
It sounds more natural to do
&lt;denchmark-code&gt;my_task = Task()
my_task.enqueue()
&lt;/denchmark-code&gt;

But I can also live with the current implementation üëç
		</comment>
		<comment id='3' author='H4dr1en' date='2020-05-26T14:48:14Z'>
		Thanks &lt;denchmark-link:https://github.com/H4dr1en&gt;@H4dr1en&lt;/denchmark-link&gt;
 , I think that this is what we will do.
Regrading my_task.enqueue() , the problem is you can only enqueue a Task that is not running. The initial thought behind putting it as a class service was that we wanted to convey that you cannot just enqueue your running Task i.e. yourself.
Following a few discussions we had here &lt;denchmark-link:https://github.com/allegroai/clearml/issues/128&gt;#128&lt;/denchmark-link&gt;
 , we could actually add :
Task.enqueue(self, allow_cloning=True)
Which will do what you suggested, and in case the Task is not in "draft" mode, it will just clone it and enqueue the cloned Task. I think this will definitely make it easier to use, and will actually be quite consistent with the ideas that were suggested in &lt;denchmark-link:https://github.com/allegroai/clearml/issues/128&gt;#128&lt;/denchmark-link&gt;
 , What do you think?
		</comment>
		<comment id='4' author='H4dr1en' date='2020-05-26T15:23:18Z'>
		
Regrading my_task.enqueue() , the problem is you can only enqueue a Task that is not running. The initial thought behind putting it as a class service was that we wanted to convey that you cannot just enqueue your running Task i.e. yourself.

This definitely makes sense. After giving a second thought, I like it!

Task.enqueue(self, allow_cloning=True)


This would clone the task, send the clone to the queue and continue or break the current script? And when the agent will execute this experimentand this line in particular, will it also clone again the task or understand and skip this instruction? I am not sure it is "worth" creating a cloned task to run the same code remotely, right?
		</comment>
		<comment id='5' author='H4dr1en' date='2020-05-26T15:36:27Z'>
		
This would clone the task, send the clone to the queue and continue or break the current script? And when the agent will execute this experimentand this line in particular, will it also clone again the task or understand and skip this instruction? I am not sure it is "worth" creating a cloned task to run the same code remotely, right?

So I was thinking  will continue execution, as task is a general object, and you might have done ,
But it seems that what you have in mind is a code sending itself for execution.
Assuming this is the case, we either combine it with the context idea, per &lt;denchmark-link:https://github.com/allegroai/clearml/issues/128&gt;#128&lt;/denchmark-link&gt;
 suggestion, this will solve endless tasks creating one another (as you pointed out).
Now that I think about it, maybe we should combine the two, because what we have here is essentially a context call and with empty execution block, maybe:
with m_task.enqueue(queue='default', exit=True):
    # run some code locally
    # enqueue ourselves and leave the process
which also supports allow_cloning=False which implies, if we are enqueuing ourselves then Exit  must be True:
m_task.enqueue(queue='default', allow_cloning=False, exit=True):
		</comment>
		<comment id='6' author='H4dr1en' date='2020-06-02T14:07:56Z'>
		Hi &lt;denchmark-link:https://github.com/H4dr1en&gt;@H4dr1en&lt;/denchmark-link&gt;

Good news v0.15 is out with this feature &lt;denchmark-link:https://github.com/allegroai/trains/blob/master/trains/task.py#L2409&gt;added&lt;/denchmark-link&gt;

task.execute_remotely(self, queue_name=None, clone=False, exit_process=True)
Notice that Python cannot actually skip an execution block (i.e. with-block) (see discussion &lt;denchmark-link:https://stackoverflow.com/questions/12594148/skipping-execution-of-with-block&gt;here&lt;/denchmark-link&gt;
), so we decided not  go that route (well actually the hack suggested on the discussion works, but we thought it is just bad practice :))
We also added:
&lt;denchmark-link:https://github.com/allegroai/trains/blob/master/trains/backend_interface/task/task.py#L1116&gt;Task.running_locally()&lt;/denchmark-link&gt;
 if you need to have a conditional execution block
WDYT?
		</comment>
		<comment id='7' author='H4dr1en' date='2020-06-04T20:05:05Z'>
		Very cool! These two functions allow a lot of flexibility I think üëç
Regarding this issue: as of 0.15.0,
&lt;denchmark-code&gt;Task.enqueue(task)
&lt;/denchmark-code&gt;

will raise :
&lt;denchmark-code&gt;Exception: At least one of (queue_name, queue_id) is required
&lt;/denchmark-code&gt;

Which makes definitely sense! Closing here üëç
		</comment>
	</comments>
</bug>