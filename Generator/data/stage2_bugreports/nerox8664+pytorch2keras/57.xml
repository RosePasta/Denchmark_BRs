<bug id='57' author='lith0613' open_date='2019-02-10T15:45:05Z' closed_time='2019-03-11T15:12:32Z'>
	<summary>model.save error</summary>
	<description>
I convert the model from  pytroch to keras successfully, but I can't save it, which report the following error
&lt;denchmark-code&gt;k_model = pytorch_to_keras(trained_model, input_var, [(3, 32, 32,)],change_ordering=True, verbose=False)
  File "/root/anaconda3/envs/python3_lth2/lib/python3.6/site-packages/pytorch2keras/converter.py", line 341, in pytorch_to_keras
    conf = model.get_config()
  File "/root/anaconda3/envs/python3_lth2/lib/python3.6/site-packages/keras/engine/network.py", line 931, in get_config
    return copy.deepcopy(config)
  File "/root/anaconda3/envs/python3_lth2/lib/python3.6/copy.py", line 150, in deepcopy
    y = copier(x, memo)
  File "/root/anaconda3/envs/python3_lth2/lib/python3.6/copy.py", line 240, in _deepcopy_dict
    y[deepcopy(key, memo)] = deepcopy(value, memo)
  File "/root/anaconda3/envs/python3_lth2/lib/python3.6/copy.py", line 150, in deepcopy
    y = copier(x, memo)
  File "/root/anaconda3/envs/python3_lth2/lib/python3.6/copy.py", line 215, in _deepcopy_list
    append(deepcopy(a, memo))
  File "/root/anaconda3/envs/python3_lth2/lib/python3.6/copy.py", line 150, in deepcopy
    y = copier(x, memo)
  File "/root/anaconda3/envs/python3_lth2/lib/python3.6/copy.py", line 240, in _deepcopy_dict
    y[deepcopy(key, memo)] = deepcopy(value, memo)
  File "/root/anaconda3/envs/python3_lth2/lib/python3.6/copy.py", line 150, in deepcopy
    y = copier(x, memo)
  File "/root/anaconda3/envs/python3_lth2/lib/python3.6/copy.py", line 240, in _deepcopy_dict
    y[deepcopy(key, memo)] = deepcopy(value, memo)
  File "/root/anaconda3/envs/python3_lth2/lib/python3.6/copy.py", line 150, in deepcopy
    y = copier(x, memo)
  File "/root/anaconda3/envs/python3_lth2/lib/python3.6/copy.py", line 220, in _deepcopy_tuple
    y = [deepcopy(a, memo) for a in x]
  File "/root/anaconda3/envs/python3_lth2/lib/python3.6/copy.py", line 220, in &lt;listcomp&gt;
    y = [deepcopy(a, memo) for a in x]
  File "/root/anaconda3/envs/python3_lth2/lib/python3.6/copy.py", line 150, in deepcopy
    y = copier(x, memo)
  File "/root/anaconda3/envs/python3_lth2/lib/python3.6/copy.py", line 220, in _deepcopy_tuple
    y = [deepcopy(a, memo) for a in x]
  File "/root/anaconda3/envs/python3_lth2/lib/python3.6/copy.py", line 220, in &lt;listcomp&gt;
    y = [deepcopy(a, memo) for a in x]
  File "/root/anaconda3/envs/python3_lth2/lib/python3.6/copy.py", line 180, in deepcopy
    y = _reconstruct(x, memo, *rv)
  File "/root/anaconda3/envs/python3_lth2/lib/python3.6/copy.py", line 280, in _reconstruct
    state = deepcopy(state, memo)
  File "/root/anaconda3/envs/python3_lth2/lib/python3.6/copy.py", line 150, in deepcopy
    y = copier(x, memo)
  File "/root/anaconda3/envs/python3_lth2/lib/python3.6/copy.py", line 240, in _deepcopy_dict
    y[deepcopy(key, memo)] = deepcopy(value, memo)
  File "/root/anaconda3/envs/python3_lth2/lib/python3.6/copy.py", line 180, in deepcopy
    y = _reconstruct(x, memo, *rv)
  File "/root/anaconda3/envs/python3_lth2/lib/python3.6/copy.py", line 280, in _reconstruct
    state = deepcopy(state, memo)
  File "/root/anaconda3/envs/python3_lth2/lib/python3.6/copy.py", line 150, in deepcopy
    y = copier(x, memo)
  File "/root/anaconda3/envs/python3_lth2/lib/python3.6/copy.py", line 240, in _deepcopy_dict
    y[deepcopy(key, memo)] = deepcopy(value, memo)
  File "/root/anaconda3/envs/python3_lth2/lib/python3.6/copy.py", line 180, in deepcopy
    y = _reconstruct(x, memo, *rv)
  File "/root/anaconda3/envs/python3_lth2/lib/python3.6/copy.py", line 280, in _reconstruct
    state = deepcopy(state, memo)
  File "/root/anaconda3/envs/python3_lth2/lib/python3.6/copy.py", line 150, in deepcopy
    y = copier(x, memo)
  File "/root/anaconda3/envs/python3_lth2/lib/python3.6/copy.py", line 240, in _deepcopy_dict
    y[deepcopy(key, memo)] = deepcopy(value, memo)
  File "/root/anaconda3/envs/python3_lth2/lib/python3.6/copy.py", line 169, in deepcopy
    rv = reductor(4)
TypeError: can't pickle _thread.RLock objects
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='lith0613' date='2019-03-11T14:26:01Z'>
		I have the same / a similar problem with a simple repro for this error (which, for me, occurs in the change_ordering step):
&lt;denchmark-code&gt;from pytorch2keras.converter import pytorch_to_keras
from torch import nn
import torch

class MyTestNet(nn.Module):
    def forward(self, x):
        return x.view(1, 1, -1)

test_net = MyTestNet()
dummy_input = torch.ones([1, 3, 10])
t_model = pytorch_to_keras(test_net, dummy_input, [(3, 10)], verbose=True)
&lt;/denchmark-code&gt;

This converts fine with:
&lt;denchmark-code&gt;graph(%0 : Float(1, 3, 10)) {
  %2 : Tensor = onnx::Constant[value= 1  1 -1 [ CPULongType{3} ]](), scope: MyTestNet
  %3 : Float(1, 1, 30) = onnx::Reshape(%0, %2), scope: MyTestNet
  return (%3);
}

Graph inputs: ['0']
Graph outputs: ['3']
State dict: []
 ____ 
graph node: MyTestNet
node id: 2
type: onnx::Constant
inputs: []
outputs: ['MyTestNet']
name in state_dict: 
attrs: {'value': tensor([ 1,  1, -1])}
is_terminal: False
Converting constant ...
 ____ 
graph node: MyTestNet
node id: 3
type: onnx::Reshape
inputs: ['0', '2']
outputs: ['MyTestNet']
name in state_dict: 0.2
attrs: {}
is_terminal: True
Converting reshape ...
Your model was (probably) successfully converted! Please, follow the repository https://github.com/nerox8664/pytorch2keras and give a star :)
&lt;/denchmark-code&gt;

Now do:
&lt;denchmark-code&gt;print(model.get_config())
&lt;/denchmark-code&gt;

which is what happens in the ordering step as well. This will crash with the same TypeError: can't pickle _thread.RLock objects.
I've traced the reason to the constant layer which, in this case, is an input to the  op (unnecessarily in this case since the actual constants are available, but reshape is marked as untested so I'm not complaining ;)). The "wandering"  that's created because of this op is unserializable, as explained &lt;denchmark-link:https://github.com/keras-team/keras/issues/8343#issuecomment-470376703&gt;here&lt;/denchmark-link&gt;
.
In my case altering the converter to use the reshape size array directly rather than converting it to a constant solves the problem.
		</comment>
		<comment id='2' author='lith0613' date='2019-03-11T15:12:25Z'>
		&lt;denchmark-link:https://github.com/ElteHupkes&gt;@ElteHupkes&lt;/denchmark-link&gt;
 thank you for your research. I replaced tf.reshape operation with native keras alternative (and I actually have to write tests:) )
		</comment>
		<comment id='3' author='lith0613' date='2019-03-11T16:00:26Z'>
		&lt;denchmark-link:https://github.com/nerox8664&gt;@nerox8664&lt;/denchmark-link&gt;
 Anything I can do to help! You're putting in all the hard work, the least I can do is find out why something goes wrong when it does ;).
By the way, I may be mistaken (just tore down my debug env..), but I think that &lt;denchmark-link:https://github.com/nerox8664/pytorch2keras/blob/master/pytorch2keras/reshape_layers.py#L86&gt;this line&lt;/denchmark-link&gt;
 should also reference the  version, because right now it's just taking the first item of the  object, so I reckon that check will always be false.
		</comment>
	</comments>
</bug>