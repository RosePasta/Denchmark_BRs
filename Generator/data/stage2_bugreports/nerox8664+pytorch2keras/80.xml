<bug id='80' author='titi1109' open_date='2019-06-05T06:46:29Z' closed_time='2019-06-27T19:39:16Z'>
	<summary>when Converting convolution ...ï¼Œ get error:  if len(weights[weights_name].numpy().shape) == 5:  # 3D conv , KeyError: 'context_path.banch1.0.weight'</summary>
	<description>

the part of my code is as follows:

&lt;denchmark-code&gt;class InvertedResidual(torch.nn.Module):
    def __init__(self, inp, oup, stride, benchmodel):
        super(InvertedResidual, self).__init__()
        self.benchmodel = benchmodel
        self.stride = stride
        assert stride in [1, 2]
        oup_inc = oup // 2
        if self.benchmodel == 1:
            self.banch2 = nn.Sequential(
                nn.Conv2d(oup_inc, oup_inc, 1, 1, 0, bias=False),
                nn.BatchNorm2d(oup_inc),
                nn.ReLU(inplace=True),

                nn.Conv2d(oup_inc, oup_inc, 3, stride, 1, groups=oup_inc, bias=False),
                nn.BatchNorm2d(oup_inc),

                nn.Conv2d(oup_inc, oup_inc, 1, 1, 0, bias=False),
                nn.BatchNorm2d(oup_inc),
                nn.ReLU(inplace=True),
            )
        else:
            self.banch1 = nn.Sequential(

                nn.Conv2d(inp, inp, 3, stride, 1, groups=inp, bias=False),
                nn.BatchNorm2d(inp),

                nn.Conv2d(inp, oup_inc, 1, 1, 0, bias=False),
                nn.BatchNorm2d(oup_inc),
                nn.ReLU(inplace=True),
            )
            self.banch2 = nn.Sequential(

                nn.Conv2d(inp, oup_inc, 1, 1, 0, bias=False),
                nn.BatchNorm2d(oup_inc),
                nn.ReLU(inplace=True),

                nn.Conv2d(oup_inc, oup_inc, 3, stride, 1, groups=oup_inc, bias=False),
                nn.BatchNorm2d(oup_inc),

                nn.Conv2d(oup_inc, oup_inc, 1, 1, 0, bias=False),
                nn.BatchNorm2d(oup_inc),
                nn.ReLU(inplace=True),
            )
    @staticmethod
    def _concat(x, out):
        # concatenate along channel axis
        return torch.cat((x, out), 1)

    def forward(self, x):
        if 1 == self.benchmodel:
            out = self._concat(x[:, :(x.shape[1] // 2), :, :],self.banch2(x[:, (x.shape[1] // 2):, :, :]))
        elif 2 == self.benchmodel:
            out = self._concat(self.banch1(x), self.banch2(x))
            out = channel_shuffle(out.clone(), 2)
        return out
&lt;/denchmark-code&gt;


the error can be seen below:

graph node: BiSeNet/ShuffleNetV2[context_path]/Sequential[conv1]/Conv2d[0]
node id: 438
type: onnx::Conv
inputs: ['input', '42']
outputs: ['BiSeNet/ShuffleNetV2[context_path]/Sequential[conv1]/Conv2d[0]']
name in state_dict: context_path.conv1.0
attrs: {'pads': [1, 1, 1, 1], 'strides': [2, 2], 'kernel_shape': [3, 3], 'group': 1, 'dilations': [1, 1]}
is_terminal: False
Converting convolution ...
&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

graph node: BiSeNet/ShuffleNetV2[context_path]/Sequential[conv1]/BatchNorm2d[1]
node id: 439
type: onnx::BatchNormalization
inputs: ['438', '43', '44', '45', '46']
outputs: ['BiSeNet/ShuffleNetV2[context_path]/Sequential[conv1]/BatchNorm2d[1]']
name in state_dict: context_path.conv1.1
attrs: {'momentum': 1.0, 'epsilon': 1e-05, 'is_test': 1}
is_terminal: False
Converting batchnorm ...
&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

graph node: BiSeNet/ShuffleNetV2[context_path]/Sequential[conv1]/ReLU[2]
node id: 440
type: onnx::Relu
inputs: ['439']
outputs: ['BiSeNet/ShuffleNetV2[context_path]/Sequential[conv1]/ReLU[2]']
name in state_dict: context_path.conv1.2
attrs: {}
is_terminal: False
Converting relu ...
&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

graph node: BiSeNet/ShuffleNetV2[context_path]/MaxPool2d[maxpool]
node id: 441
type: onnx::MaxPool
inputs: ['440']
outputs: ['BiSeNet/ShuffleNetV2[context_path]/MaxPool2d[maxpool]']
name in state_dict: context_path.maxpool
attrs: {'pads': [1, 1, 1, 1], 'strides': [2, 2], 'kernel_shape': [3, 3]}
is_terminal: False
Converting pooling ...
&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

graph node: BiSeNet/ShuffleNetV2[context_path]/InvertedResidual/Sequential[banch1]/Conv2d[0]
node id: 442
type: onnx::Conv
inputs: ['441', '48']
outputs: ['BiSeNet/ShuffleNetV2[context_path]/InvertedResidual/Sequential[banch1]/Conv2d[0]']
name in state_dict: context_path.banch1.0
attrs: {'pads': [1, 1, 1, 1], 'strides': [2, 2], 'kernel_shape': [3, 3], 'group': 24, 'dilations': [1, 1]}
is_terminal: False
Converting convolution ...
Traceback (most recent call last):
File "torch2keras.py", line 18, in 
k_model = pytorch_to_keras(model, input_var, [(3, 224, 224,)], verbose=True,names='short')
File "/home/xxxx/anaconda3/envs/pytorch4/lib/python3.5/site-packages/pytorch2keras/converter.py", line 317, in pytorch_to_keras
names
File "/home/xxxx/anaconda3/envs/pytorch4/lib/python3.5/site-packages/pytorch2keras/convolution_layers.py", line 35, in convert_conv
if len(weights[weights_name].numpy().shape) == 5:  # 3D conv
KeyError: 'context_path.banch1.0.weight'
Environment (please complete the following information):

OS: [ubuntu16.04]
Python [Python 3]
Version [v0.1.17]
pytorch [0.4.1]

anyone can help me ?
	</description>
	<comments>
		<comment id='1' author='titi1109' date='2019-06-27T19:39:15Z'>
		&lt;denchmark-link:https://github.com/titi1109&gt;@titi1109&lt;/denchmark-link&gt;
 hello. I updated tracing module. You can try to convert your model with new version of the converter
		</comment>
	</comments>
</bug>