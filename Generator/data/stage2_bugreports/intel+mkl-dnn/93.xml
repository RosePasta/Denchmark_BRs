<bug id='93' author='quant' open_date='2017-07-25T11:05:16Z' closed_time='2017-08-11T20:29:08Z'>
	<summary>c_api: When primitive_desc_t objects may be destroyed?</summary>
	<description>
Hi all,
Could we clarify in documentation when the c_api mkldnn_primitive_desc_destroy() function should  be used? The examples make no use of this function and valgrind shows leaked memory for the primitive_desc objects (pd-objects) created with mkldnn_primitive_desc_create().
Of course, one can destroy the pd objects when all the net is built. However, destroying the pd objects right after their latest use has negative side effects. For instance, in the simple_net.c example, destroying relu_pd right after mkldnn_primitive_create(&amp;relu, relu_pd) causes subsequent mkldnn_lrn_forward_desc_init() fail with mkldnn_invalid_arguments error.
I apologize for complaining w/o proposing a patch, but maybe the issue is already known.
Thanks,
Dima
	</description>
	<comments>
		<comment id='1' author='quant' date='2017-08-04T17:55:02Z'>
		Hi Dima,
All the opaque objects might be destroyed as soon as they are not used anymore.
For example primitive_descs can be destroyed right after corresponding primitive is created.
I definitely agree the documentation doesn't state that point clear...

For instance, in the simple_net.c example, destroying relu_pd right after mkldnn_primitive_create(&amp;relu, relu_pd) causes subsequent mkldnn_lrn_forward_desc_init() fail with mkldnn_invalid_arguments error.

That happens because of the &lt;denchmark-link:https://github.com/01org/mkl-dnn/blob/master/examples/simple_net.c#L261&gt;following&lt;/denchmark-link&gt;
:
&lt;denchmark-code&gt;  const_mkldnn_primitive_desc_t relu_dst_pd = mkldnn_primitive_desc_query_pd(
    relu_pd, mkldnn_query_dst_pd, 0);
  ...
  /* here relu_pd destruction was put as far as i understand (*) */
  ...
  const mkldnn_memory_desc_t *lrn_src_md =
    mkldnn_primitive_desc_query_memory_d(relu_dst_pd);
&lt;/denchmark-code&gt;

As it is pointed in the &lt;denchmark-link:http://01org.github.io/mkl-dnn/group__c__api__types__query.html#ga6eebc661a8a3437b49d9c677f8972fc9&gt;queries documentation&lt;/denchmark-link&gt;
 constant references are alive only during the lifetime of the parent object. Hence here  is valid until  is alive.
As far as I understand you call  somewhere here (*).
That most likely caused lrn creation failure.
Anyway, you are absolutely right there is memory leakage in our examples.
I will mark this issue as a bug and we will fix that soon.
Thank you for pointing us!
// I am really sorry for the delay with response.
		</comment>
		<comment id='2' author='quant' date='2017-08-07T05:29:49Z'>
		Hi Evarist!
Thank you for response. I am sorry for having not provided a reproducer. Here it is. With &lt;denchmark-link:https://gist.github.com/quant/78d9124e49f96549c3456696b87e4986#file-simple_net-c-diff&gt;this patch&lt;/denchmark-link&gt;
 the sample fails thus:

[.../simple_net.c:300] error: mkldnn_lrn_forward_desc_init(&amp;lrn_desc, mkldnn_forward, mkldnn_lrn_across_channels, lrn_src_md, local_size, alpha, beta, k) returns 3

I see, the earliest place one can discard a primitive_desc_t object is where (1) it is not used anymore and (2) all the associated const_primitive_desc_t objects are not used anymore.
Regards
Dima
		</comment>
	</comments>
</bug>