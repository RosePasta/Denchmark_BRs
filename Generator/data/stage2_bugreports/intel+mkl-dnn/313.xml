<bug id='313' author='okapies' open_date='2018-09-06T11:16:58Z' closed_time='2018-10-12T21:44:41Z'>
	<summary>Both `iomp5` and `gomp` are linked with `mkldnn` if `gomp` is in `LD_LIBRARY_PATH`</summary>
	<description>
&lt;denchmark-h:h3&gt;Environment&lt;/denchmark-h&gt;


OS version: CentOS 6
Compiler version: GCC 4.9.4
CMake version: 3.12.1

&lt;denchmark-h:h3&gt;Steps to reproduce&lt;/denchmark-h&gt;


docker run -it okapies/buildenv:linux-x64-gcc-4.9 /bin/bash (Dockerfile)

This is just a CentOS 6 with GCC 4.9.4 and CMake 3.12.1


Build MKL-DNN

&lt;denchmark-code&gt;# curl -LO https://github.com/intel/mkl-dnn/archive/v0.16.tar.gz
# tar xvf v0.16.tar.gz

# cd mkl-dnn-0.16
# cd scripts &amp;&amp; ./prepare_mkl.sh &amp;&amp; cd ..

# printenv | grep PATH
PATH=/usr/local/gcc-4.9.4/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
LD_LIBRARY_PATH=/usr/local/gcc-4.9.4/lib64:/usr/local/gcc-4.9.4/lib:/usr/local/lib64:/usr/local/lib

# mkdir -p build
# cd build
# cmake -DCMAKE_C_COMPILER=/usr/local/gcc-4.9.4/bin/gcc \
    -DCMAKE_CXX_COMPILER=/usr/local/gcc-4.9.4/bin/g++ \
    -DWITH_TEST=OFF \
    -DWITH_EXAMPLE=OFF \
    ..
  The OLD behavior for policy CMP0048 will be removed from a future version
  of CMake.

  The cmake-policies(7) manual explains that the OLD behaviors of all
  policies are deprecated and that a policy should be set to OLD only under
  specific short-term circumstances.  Projects should be ported to the NEW
  behavior and not rely on setting a policy to OLD.


CMake Deprecation Warning at CMakeLists.txt:22 (cmake_policy):
  The OLD behavior for policy CMP0054 will be removed from a future version
  of CMake.

  The cmake-policies(7) manual explains that the OLD behaviors of all
  policies are deprecated and that a policy should be set to OLD only under
  specific short-term circumstances.  Projects should be ported to the NEW
  behavior and not rely on setting a policy to OLD.


-- The C compiler identification is GNU 4.9.4
-- The CXX compiler identification is GNU 4.9.4
-- Check for working C compiler: /usr/local/gcc-4.9.4/bin/gcc
-- Check for working C compiler: /usr/local/gcc-4.9.4/bin/gcc -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Detecting C compile features
-- Detecting C compile features - done
-- Check for working CXX compiler: /usr/local/gcc-4.9.4/bin/g++
-- Check for working CXX compiler: /usr/local/gcc-4.9.4/bin/g++ -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- CMAKE_BUILD_TYPE is unset, defaulting to Release
-- Detecting Intel(R) MKL: trying mklml_intel
-- Intel(R) MKL: include /root/mkl-dnn-0.16/external/mklml_lnx_2019.0.20180710/include
-- Intel(R) MKL: lib /root/mkl-dnn-0.16/external/mklml_lnx_2019.0.20180710/lib/libmklml_intel.so
-- Intel(R) MKL: OpenMP lib /root/mkl-dnn-0.16/external/mklml_lnx_2019.0.20180710/lib/libiomp5.so
-- Found OpenMP_C: -fopenmp (found version "4.0") 
-- Found OpenMP_CXX: -fopenmp (found version "4.0") 
-- Found OpenMP: TRUE (found version "4.0")  
-- Could NOT find Doxygen (missing: DOXYGEN_EXECUTABLE) 
-- VTune profiling environment is unset
-- Looking for pthread.h
-- Looking for pthread.h - found
-- Looking for pthread_create
-- Looking for pthread_create - found
-- Found Threads: TRUE  
-- Configuring done
-- Generating done
-- Build files have been written to: /root/mkl-dnn-0.16/build

# make
Scanning dependencies of target mkldnn
[  1%] Building CXX object src/CMakeFiles/mkldnn.dir/common/batch_normalization.cpp.o
&lt;snip&gt;
[100%] Linking CXX shared library libmkldnn.so
[100%] Built target mkldnn

# ldd src/libmkldnn.so
	linux-vdso.so.1 =&gt;  (0x00007ffd3fbc4000)
	/root/mkl-dnn-0.16/external/mklml_lnx_2019.0.20180710/lib/libiomp5.so (0x00007f029a91d000)
	libmklml_intel.so =&gt; /root/mkl-dnn-0.16/external/mklml_lnx_2019.0.20180710/lib/libmklml_intel.so (0x00007f0292d0b000)
	libdl.so.2 =&gt; /lib64/libdl.so.2 (0x00007f0292b07000)
	libstdc++.so.6 =&gt; /usr/local/gcc-4.9.4/lib64/libstdc++.so.6 (0x00007f02927ce000)
	libm.so.6 =&gt; /lib64/libm.so.6 (0x00007f029254a000)
	libgomp.so.1 =&gt; /usr/local/gcc-4.9.4/lib64/libgomp.so.1 (0x00007f0292334000)
	libgcc_s.so.1 =&gt; /usr/local/gcc-4.9.4/lib64/libgcc_s.so.1 (0x00007f029211e000)
	libpthread.so.0 =&gt; /lib64/libpthread.so.0 (0x00007f0291f01000)
	libc.so.6 =&gt; /lib64/libc.so.6 (0x00007f0291b6d000)
	/lib64/ld-linux-x86-64.so.2 (0x00007f029b51f000)
	librt.so.1 =&gt; /lib64/librt.so.1 (0x00007f0291965000)
&lt;/denchmark-code&gt;

&lt;denchmark-h:h3&gt;Actual behavior&lt;/denchmark-h&gt;

 is linked with both  and  if there is  in . It might be a problem as described in &lt;denchmark-link:https://github.com/intel/mkl-dnn/blob/master/README.md#linking-your-application&gt;this section&lt;/denchmark-link&gt;
.
&lt;denchmark-h:h3&gt;Expected behavior&lt;/denchmark-h&gt;

Only libiomp5 is used if there it is.
	</description>
	<comments>
		<comment id='1' author='okapies' date='2018-09-07T02:44:01Z'>
		I found that GOMP_* symbols exist in my build even if it is linked to libmklml_intel.so.
&lt;denchmark-code&gt;# readelf -sW src/libmkldnn.so | c++filt | grep GOMP
   224: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND GOMP_parallel@VERSION (7)
   420: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND GOMP_barrier@VERSION (7)
 45611: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND GOMP_parallel@@VERSION
 45807: 0000000000000000     0 FUNC    GLOBAL DEFAULT  UND GOMP_barrier@@VERSION
&lt;/denchmark-code&gt;

		</comment>
		<comment id='2' author='okapies' date='2018-09-08T00:54:56Z'>
		Thank you for the report. There indeed should be be a dependency on libgomp in that case.
		</comment>
		<comment id='3' author='okapies' date='2018-10-03T01:06:14Z'>
		Just was able to reproduce.
Seems like this is somehow related to cmake 3.12.1, not gcc. At least I wasn't able to reproduce the behavior with cmake 2.8 and 3.7, but was able with 3.12.1.
Also I don't see that LD_LIBRARY_PATH affects the resulting library -- it always depends on both gomp and libiomp5. Will be looking into that...
		</comment>
		<comment id='4' author='okapies' date='2018-10-03T01:46:09Z'>
		FYI, I slightly &lt;denchmark-link:https://github.com/okapies/buildenv/blob/82bda1c812c46d6a1d594b451abcac5b927622fd/linux-x64-gcc-4.9/Dockerfile&gt;changed&lt;/denchmark-link&gt;
 okapies/buildenv:linux-x64-gcc-4.9 docker image described in the comment. I added some &lt;denchmark-link:https://github.com/okapies/buildenv/blob/82bda1c812c46d6a1d594b451abcac5b927622fd/linux-x64-gcc-4.9/Dockerfile-base#L18-L37&gt;configurations&lt;/denchmark-link&gt;
 to gcc and bump cmake version to 3.12.2. Sorry for being late to tell you.
		</comment>
	</comments>
</bug>