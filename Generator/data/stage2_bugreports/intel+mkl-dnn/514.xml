<bug id='514' author='kruus' open_date='2019-07-18T14:53:18Z' closed_time='2019-07-19T20:12:58Z'>
	<summary>RNN gemm operations with leading dimension zero</summary>
	<description>
&lt;denchmark-h:h3&gt;Environment&lt;/denchmark-h&gt;

v1.0 compiled either with: (i) jit defaults, (ii) USE_CBLAS or (iii) forced to use ref_gemm
&lt;denchmark-h:h3&gt;Steps to reproduce&lt;/denchmark-h&gt;


Either let Intel MKL spew ERROR messages via USE_CBLAS,
or put add printfs in extended_sgemm and verify that rnn tests and examples often call extended_sgemm with matrix leading dimension lda==0.

&lt;denchmark-h:h3&gt;Actual behavior&lt;/denchmark-h&gt;


rnn tests and examples call extended_sgemm with leading dimension lda==0
tests and examples still pass.
Often happens right after a previous extended_sgemm call with identical dimensions for all other M,N,K,ldb,ldc dimensions

&lt;denchmark-h:h3&gt;Expected behavior&lt;/denchmark-h&gt;

Intel MKL's cblas_sgemm should not spew out ERROR messages with USE_CBLAS.
Are such calls be no-ops? Can these calls be avoided?
Sample outputs in &lt;denchmark-link:https://github.com/oneapi-src/oneDNN/issues/415&gt;#415&lt;/denchmark-link&gt;
.
	</description>
	<comments>
		<comment id='1' author='kruus' date='2019-07-19T17:44:50Z'>
		Hi &lt;denchmark-link:https://github.com/kruus&gt;@kruus&lt;/denchmark-link&gt;
 ,
First, a note on . This is expected. The  function supports packed layout for both matrices A and B. In those cases, the leading dimension is irrelevant as metadata with the physical layout of the packed matrix is part of the buffer containing the packed matrix itself.
Regarding the CBLAS use case, you are right, this is a bug, we should have a check to not call the cblas function if one of the matrix is packed. Could you try the patch below and tell me if it solves your issue?
diff --git a/src/cpu/gemm/gemm.cpp b/src/cpu/gemm/gemm.cpp
index 95f4228..ff10e79 100644
--- a/src/cpu/gemm/gemm.cpp
+++ b/src/cpu/gemm/gemm.cpp
@@ -110,7 +110,9 @@ mkldnn_status_t extended_sgemm(const char *transa, const char *transb,
         return status;

 #ifdef USE_CBLAS
-    if (!force_jit_nocopy_gemm) {
+    auto packed_A = *transa == 'p' || *transa == 'P';
+    auto packed_B = *transb == 'p' || *transb == 'P';
+    if (!(force_jit_nocopy_gemm || packed_A || packed_B)) {
         bool trA = *transa == 't' || *transa == 'T';
         bool trB = *transb == 't' || *transb == 'T';
         CBLAS_TRANSPOSE Cblas_trA = trA ? CblasTrans : CblasNoTrans;
		</comment>
		<comment id='2' author='kruus' date='2019-07-19T20:12:58Z'>
		tested with USE_CBLAS (and no sse, but this is irrelevant to this issue).
No warnings noted this time, so I think this lda==0 issue functions-as-expected (fixed)
Some test errors, but that concerns &lt;denchmark-link:https://github.com/oneapi-src/oneDNN/issues/515&gt;#515&lt;/denchmark-link&gt;
.
		</comment>
	</comments>
</bug>