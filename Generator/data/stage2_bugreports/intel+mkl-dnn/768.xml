<bug id='768' author='utsav-14' open_date='2020-06-29T16:15:24Z' closed_time='2020-08-24T20:34:28Z'>
	<summary>Build issue in Windows</summary>
	<description>
I am trying to build oneDNN1.4 on Windows, I'm encountering the issue:
Error copying file "C:/TEMP/batserve/win64/mklDNN/sources/src/Release/dnnl.lib" to "C:/TEMP/batserve/win64/mklDNN/sources/src/Release/mkldnn.lib"
Any help in fixing this will be appreciated.
	</description>
	<comments>
		<comment id='1' author='utsav-14' date='2020-06-29T16:17:24Z'>
		&lt;denchmark-link:https://github.com/utsav-14&gt;@utsav-14&lt;/denchmark-link&gt;
,
Could you please share the steps to reproduce the issue?
		</comment>
		<comment id='2' author='utsav-14' date='2020-06-29T16:26:28Z'>
		
Can you please show your cmake command line and output and note any relevant environment variables and setup (visual studio version, etc)?
log.txt

Here's the log file from build
		</comment>
		<comment id='3' author='utsav-14' date='2020-06-29T19:13:12Z'>
		&lt;denchmark-link:https://github.com/utsav-14&gt;@utsav-14&lt;/denchmark-link&gt;
,
I cannot reproduce the issue with the line you provided [1].
It is strange that in the log I see  mwdnnl instead of dnnl (e.g. mwdnnl.lib instead of dnnl.lib).
Did you change the name of the library or something?
&lt;denchmark-code&gt;  jitprofiling.c
  mwdnnl_cpu.vcxproj -&gt; C:\TEMP\batserve\win64\mklDNN\sources\src\cpu\mwdnnl_cpu.dir\Release\mwdnnl_cpu.lib
C:\Program Files (x86)\Microsoft Visual Studio\2017\Professional\Common7\IDE\VC\VCTargets\Microsoft.CppBuild.targets(399,5): warning MSB8029: The Intermediate directory or Output directory cannot reside under the Temporary directory as it could lead to issues with incremental build. [C:\TEMP\batserve\win64\mklDNN\sources\src\mwdnnl.vcxproj]
     Creating library C:/TEMP/batserve/win64/mklDNN/sources/src/Release/mwdnnl.lib and object C:/TEMP/batserve/win64/mklDNN/sources/src/Release/mwdnnl.exp
  mwdnnl.vcxproj -&gt; C:\TEMP\batserve\win64\mklDNN\sources\src\Release\mwdnnl.dll
&lt;/denchmark-code&gt;

Out of scope note. It is probably not a good idea to build the library in the same place where the sources are located. So far there are no conflicts, but I am not sure if in future build system won't create a file that will override the source one.
&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

[1] Repro line
cmake ^
-D CMAKE_SUPPRESS_REGENERATION:BOOL=ON ^
-G "Visual Studio 15 2017 Win64" ^
-D CMAKE_BUILD_TYPE:STRING="Release" ^
-D CMAKE_INSTALL_PREFIX:PATH=C:/work/emfomenk/ml/fw/ipl_mkl_dnn-master.git.tf/_install ^
-D BUILD_SHARED_LIBS:BOOL=ON  ^
-D MKLDNN_CPU_RUNTIME:STRING=OMP ^
-D MKLDNN_ARCH_OPT_FLAGS:STRING="" ^
-D CMAKE_CXX_FLAGS_RELEASE:STRING=" -DWIN32 -D_CRT_SECURE_NO_DEPRECATE -D_SCL_SECURE_NO_DEPRECATE -D_CRT_NONSTDC_NO_DEPRECATE   -D_SECURE_SCL=0 /D_WINDOWS /D_MBCS -D_WIN32_WINNT=0x0601 -DWINVER=0x0601 -D_WIN32_IE=0x0800   -D__SSE__ -D__SSE2__ -FC -MD -nologo -Z7 -GR -EHs -O2 -GS-"    ^
-D CMAKE_C_FLAGS_RELEASE:STRING=" -DWIN32 -D_CRT_SECURE_NO_DEPRECATE -D_SCL_SECURE_NO_DEPRECATE -D_CRT_NONSTDC_NO_DEPRECATE  -D_SECURE_SCL=0 /D_WINDOWS /D_MBCS -D_WIN32_WINNT=0x0601 -DWINVER=0x0601 -D_WIN32_IE=0x0800   -D__SSE__ -D__SSE2__ -FC -MD -nologo -Z7     -O2 -GS-" ^
-D CMAKE_CXX_FLAGS:STRING="    -DWIN32 -D_CRT_SECURE_NO_DEPRECATE -D_SCL_SECURE_NO_DEPRECATE -D_CRT_NONSTDC_NO_DEPRECATE     -D_SECURE_SCL=0 /D_WINDOWS /D_MBCS -D_WIN32_WINNT=0x0601 -DWINVER=0x0601 -D_WIN32_IE=0x0800     -D__SSE__ -D__SSE2__ -FC -MD -nologo -Z7 -GR -EHs -O2 -GS-"    ^
-D CMAKE_C_FLAGS:STRING="    -DWIN32 -D_CRT_SECURE_NO_DEPRECATE -D_SCL_SECURE_NO_DEPRECATE -D_CRT_NONSTDC_NO_DEPRECATE     -D_SECURE_SCL=0 /D_WINDOWS /D_MBCS -D_WIN32_WINNT=0x0601 -DWINVER=0x0601 -D_WIN32_IE=0x0800     -D__SSE__ -D__SSE2__ -FC -MD -nologo -Z7     -O2 -GS-" ^
-D CMAKE_EXE_LINKER_FLAGS:STRING="-incremental:NO -map -nologo -debug -largeaddressaware -errorReport:prompt  -retryonfileopenfailure /MACHINE:x64" ^
-D CMAKE_MODULE_LINKER_FLAGS:STRING="-incremental:NO -map -nologo -debug -largeaddressaware -errorReport:prompt  -retryonfileopenfailure /MACHINE:x64" ^
-D CMAKE_SHARED_LINKER_FLAGS:STRING="-incremental:NO -map -nologo -debug -largeaddressaware -errorReport:prompt  -retryonfileopenfailure /MACHINE:x64" ^
-D DNNL_BUILD_TESTS=OFF ^
-D IOMP5LIB:STRING=C:/work/emfomenk/mkl/lib/libiomp5md.lib ^
../CMakeLists.txt

cmake --build .. --config Release --target INSTALL
		</comment>
		<comment id='4' author='utsav-14' date='2020-06-30T05:20:00Z'>
		&lt;denchmark-link:https://github.com/emfomenk&gt;@emfomenk&lt;/denchmark-link&gt;
 Thank you for the response. I was wondering is there a way to avoid this copying of dnnl.lb to mkldnn.lib if I just wanted to keep dnnl.lib?
		</comment>
		<comment id='5' author='utsav-14' date='2020-06-30T14:50:15Z'>
		I see!
No, unfortunately, there is no option to disable building mkldnn.lib.
A quick patch you could apply to skip building mkldnn.lib:
diff --git a/src/CMakeLists.txt b/src/CMakeLists.txt
index e7490ba3e..43005491d 100644
--- a/src/CMakeLists.txt
+++ b/src/CMakeLists.txt
@@ -137,6 +137,8 @@ install(EXPORT ${LIB_EXPORT_NAME}
     NAMESPACE ${LIB_NAMESPACE}
     DESTINATION ${LIB_CONFIG_INSTALL_DIR})

+set(DNNL_BUILD_MKLDNN_COMPAT OFF)
+if(DNNL_BUILD_MKLDNN_COMPAT)
 # Intel MKL-DNN compat cmake files
 install(CODE "execute_process(COMMAND ${CMAKE_COMMAND}
     -DDIR=\$ENV{DESTDIR}${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR}/cmake
@@ -187,6 +189,7 @@ else()
         install(FILES ${compat_link} DESTINATION ${CMAKE_INSTALL_PREFIX}/${CMAKE_INSTALL_LIBDIR})
     endforeach()
 endif()
+endif()

 # Install custom find modules for transitive dependencies
 set(LIB_CONFIG_INSTALL_DIR_COMPAT "${CMAKE_INSTALL_LIBDIR}/cmake/mkldnn")
@@ -201,16 +204,20 @@ if(DNNL_CPU_RUNTIME STREQUAL "TBB")
         install(FILES "../cmake/lnx/TBBConfig.cmake" RENAME "FindTBB.cmake"
             DESTINATION ${LIB_CONFIG_INSTALL_DIR})
     endif()
+    if(DNNL_BUILD_MKLDNN_COMPAT)
     install(FILES "${CMAKE_INSTALL_PREFIX}/${LIB_CONFIG_INSTALL_DIR}/FindTBB.cmake"
             DESTINATION ${LIB_CONFIG_INSTALL_DIR_COMPAT})
+    endif()
 endif()

 if(DNNL_GPU_RUNTIME STREQUAL "OCL")
     install(FILES
         "../cmake/FindOpenCL.cmake"
         DESTINATION ${LIB_CONFIG_INSTALL_DIR})
+    if(DNNL_BUILD_MKLDNN_COMPAT)
     install(FILES "../cmake/FindOpenCL.cmake"
             DESTINATION ${LIB_CONFIG_INSTALL_DIR_COMPAT})
+    endif()
 endif()

 # On Windows we need to add dnnl.dll path to CTESTCONFIG_PATH which is later
		</comment>
		<comment id='6' author='utsav-14' date='2020-08-24T20:34:28Z'>
		Fixed by &lt;denchmark-link:https://github.com/oneapi-src/oneDNN/pull/806&gt;#806&lt;/denchmark-link&gt;
.
		</comment>
	</comments>
</bug>