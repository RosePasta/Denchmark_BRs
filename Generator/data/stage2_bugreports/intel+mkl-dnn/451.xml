<bug id='451' author='jianlongf' open_date='2019-04-08T09:22:48Z' closed_time='2019-04-19T17:09:11Z'>
	<summary>Ubuntu without openmp lead to segment fault</summary>
	<description>
I built the mkldnn.a without OpenMP(followed the issue &lt;denchmark-link:https://github.com/oneapi-src/oneDNN/issues/166&gt;#166&lt;/denchmark-link&gt;
, I uncomment the line shown below ), but got errors shown below(SegFault) when I run ctest.
&lt;denchmark-link:https://user-images.githubusercontent.com/12624852/55713201-bc891880-5a22-11e9-84ca-81281c34e962.png&gt;&lt;/denchmark-link&gt;

&lt;denchmark-link:https://user-images.githubusercontent.com/12624852/55712716-d0804a80-5a21-11e9-92b7-7a66570f7568.png&gt;&lt;/denchmark-link&gt;

BTW, it is right on macOS. I wonder why it caused SegFault on Ubuntu and how to build MKL-DNN without OpenMP.
	</description>
	<comments>
		<comment id='1' author='jianlongf' date='2019-04-08T16:13:15Z'>
		Hi @nwpu2fjl,
I wasn't able to reproduce the behavior you observe. Could you please manually run one of the tests (e.g. simple-net-c) and show how and where exactly it fails? (gdb backtrace would be useful, as well as build with debug -DCMAKE_BUILD_TYPE=Debug).
In general, changing the cmake files in any way is not supported model -- there might be some dependencies between the files and if you just comment few of them something might go wrong. If your intention to build the library w/o OpenMP and Intel MKL you can simply pass:
  cmake -DMKLDNN_THREADING=SEQ -DMKLDNN_USE_MKL=NONE &lt;other options&gt; ..
That should build sequential Intel MKL-DNN.
Out of curiosity, why do you want to use the library w/o OpenMP (or TBB)? Parallelization is quiet essential to get good performance. If you don't want to use external dependencies (like Intel OpenMP that we use by default), you can use:
  cmake -DMKLDNN_THREADING=OMP:COMP -DMKLDNN_USE_MKL=NONE &lt;other options&gt;  ..
which would make Intel MKL-DNN use compilers OpenMP (GNU OpenMP in case of gcc).
		</comment>
		<comment id='2' author='jianlongf' date='2019-04-09T02:02:50Z'>
		Thank for replying. There are two reasons why I wanna use MKL-DNN w/o OpenMP. The first is that I wanna compare performance in a single thread, and another is the error caused by importing libasan.so. BTW, How can I know the numbers of threads with OpenMP.
I set get OpenMP log by below command, but can't get related CPU thread information like  &lt;denchmark-link:https://github.com/oneapi-src/oneDNN/issues/401&gt;#401&lt;/denchmark-link&gt;


		</comment>
		<comment id='3' author='jianlongf' date='2019-04-09T02:12:14Z'>
		After using the below command and make on Ubuntu.
cmake -DMKLDNN_THREADING=SEQ -DMKLDNN_USE_MKL=NONE &lt;other options&gt; ..
After compiling on Ubuntu, I encountered compiling errors.
&lt;denchmark-code&gt;gtest/libmkldnn_gtest.a(gtest-all.cc.o): In function `testing::internal::ThreadLocal&lt;testing::TestPartResultReporterInterface*&gt;::~ThreadLocal()':
/root/volume/mkl-dnn/tests/gtests/gtest/../gtest/internal/gtest-port.h:1819: undefined reference to `pthread_getspecific'
/root/volume/mkl-dnn/tests/gtests/gtest/../gtest/internal/gtest-port.h:1823: undefined reference to `pthread_key_delete'
gtest/libmkldnn_gtest.a(gtest-all.cc.o): In function `testing::internal::ThreadLocal&lt;std::vector&lt;testing::internal::TraceInfo, std::allocator&lt;testing::internal::TraceInfo&gt; &gt; &gt;::~ThreadLocal()':
/root/volume/mkl-dnn/tests/gtests/gtest/../gtest/internal/gtest-port.h:1819: undefined reference to `pthread_getspecific'
/root/volume/mkl-dnn/tests/gtests/gtest/../gtest/internal/gtest-port.h:1823: undefined reference to `pthread_key_delete'
gtest/libmkldnn_gtest.a(gtest-all.cc.o): In function `testing::internal::ThreadLocal&lt;std::vector&lt;testing::internal::TraceInfo, std::allocator&lt;testing::internal::TraceInfo&gt; &gt; &gt;::GetOrCreateValue() const':
/root/volume/mkl-dnn/tests/gtests/gtest/../gtest/internal/gtest-port.h:1856: undefined reference to `pthread_getspecific'
/root/volume/mkl-dnn/tests/gtests/gtest/../gtest/internal/gtest-port.h:1863: undefined reference to `pthread_setspecific'
gtest/libmkldnn_gtest.a(gtest-all.cc.o): In function `testing::internal::ThreadLocal&lt;testing::TestPartResultReporterInterface*&gt;::CreateKey()':
/root/volume/mkl-dnn/tests/gtests/gtest/../gtest/internal/gtest-port.h:1849: undefined reference to `pthread_key_create'
gtest/libmkldnn_gtest.a(gtest-all.cc.o): In function `testing::internal::ThreadLocal&lt;std::vector&lt;testing::internal::TraceInfo, std::allocator&lt;testing::internal::TraceInfo&gt; &gt; &gt;::CreateKey()':
/root/volume/mkl-dnn/tests/gtests/gtest/../gtest/internal/gtest-port.h:1849: undefined reference to `pthread_key_create'
gtest/libmkldnn_gtest.a(gtest-all.cc.o): In function `testing::internal::ThreadLocal&lt;testing::TestPartResultReporterInterface*&gt;::GetOrCreateValue() const':
/root/volume/mkl-dnn/tests/gtests/gtest/../gtest/internal/gtest-port.h:1856: undefined reference to `pthread_getspecific'
/root/volume/mkl-dnn/tests/gtests/gtest/../gtest/internal/gtest-port.h:1863: undefined reference to `pthread_setspecific'
collect2: error: ld returned 1 exit status
tests/gtests/CMakeFiles/test_rnn_forward.dir/build.make:122: recipe for target 'tests/gtests/test_rnn_forward' failed
make[2]: *** [tests/gtests/test_rnn_forward] Error 1
CMakeFiles/Makefile2:750: recipe for target 'tests/gtests/CMakeFiles/test_rnn_forward.dir/all' failed
make[1]: *** [tests/gtests/CMakeFiles/test_rnn_forward.dir/all] Error 2
Makefile:138: recipe for target 'all' failed
make: *** [all] Error 2
&lt;/denchmark-code&gt;

		</comment>
		<comment id='4' author='jianlongf' date='2019-04-09T05:45:14Z'>
		Hi @nwpu2fjl,
Seems like pthread dependency hasn't been propagated for some reasons. However these are gtests only, maybe the library itself is fine. I will take a look tomorrow morning.
What Ubuntu version do you use?

BTW, How can I know the numbers of threads with OpenMP?

By default the number of threads would most likely be equal to the number of the logical cores in the system (see lscpu, /proc/cpuinfo, or numactl -H).
The KMP_AFFINITY=verbose works for Intel OpenMP only. You can check if you use it by calling ldd app.out and seeing libiomp5.so in the dependencies.
Also, once build with OpenMP you can force the library to use only 1 thread by exporting OMP_NUM_THREADS=1.
		</comment>
		<comment id='5' author='jianlongf' date='2019-04-09T09:14:07Z'>
		But the Segmentation fault hasn't been fixed yet.  When I use gdb to debug it, I got the below error.


&lt;denchmark-link:https://stackoverflow.com/questions/35860527/warning-error-disabling-address-space-randomization-operation-not-permitted&gt;https://stackoverflow.com/questions/35860527/warning-error-disabling-address-space-randomization-operation-not-permitted&lt;/denchmark-link&gt;

&lt;denchmark-link:https://github.com/emfomenk&gt;@emfomenk&lt;/denchmark-link&gt;
 Thanks very much.
P.S. I use Docker.
		</comment>
		<comment id='6' author='jianlongf' date='2019-04-09T10:00:35Z'>
		Solved the last problem, I have encountered a new problem(seen below picture). When I build MKL-DNN with Debug. I debug the simple_net_c(segmentation fault) step by step and find that line 122 of simple_net.c causes Segmentation fault.
&lt;denchmark-link:https://user-images.githubusercontent.com/12624852/55791361-ea3c9300-5af0-11e9-9ce4-427215af77cb.png&gt;&lt;/denchmark-link&gt;

The backtrace is as below.
&lt;denchmark-code&gt;Program received signal SIGSEGV, Segmentation fault.
0x0000000000000000 in ?? ()
(gdb) bt
#0  0x0000000000000000 in ?? ()
#1  0x0000555555b36e6d in loadiJIT_Funcs () at /root/volume/mkl-dnn/src/cpu/jit_utils/jitprofiling/jitprofiling.c:242
#2  0x0000555555b36da0 in iJIT_IsProfilingActive () at /root/volume/mkl-dnn/src/cpu/jit_utils/jitprofiling/jitprofiling.c:145
#3  0x0000555555ad6da5 in mkldnn::impl::cpu::jit_utils::register_jit_code_vtune (code=0x7ffff7f65000, code_size=395, code_name=0x555555c18b70 "jit_uni_reorder_kernel_f32", 
    source_file_name=0x555555c18b90 "/root/volume/mkl-dnn/src/cpu/jit_uni_reorder.cpp") at /root/volume/mkl-dnn/src/cpu/jit_utils/jit_utils.cpp:73
#4  0x0000555555ad6e84 in mkldnn::impl::cpu::jit_utils::register_jit_code (code=0x7ffff7f65000, code_size=395, code_name=0x555555c18b70 "jit_uni_reorder_kernel_f32", 
    source_file_name=0x555555c18b90 "/root/volume/mkl-dnn/src/cpu/jit_uni_reorder.cpp") at /root/volume/mkl-dnn/src/cpu/jit_utils/jit_utils.cpp:103
#5  0x00005555555dcd08 in mkldnn::impl::cpu::jit_generator::getCode (this=0x555555f3cb18) at /root/volume/mkl-dnn/src/cpu/rnn/../jit_generator.hpp:760
#6  0x0000555555b34202 in mkldnn::impl::cpu::tr::jit_uni_reorder_kernel_f32::jit_uni_reorder_kernel_f32 (this=0x555555f3c950, desc=...) at /root/volume/mkl-dnn/src/cpu/jit_uni_reorder.cpp:663
#7  0x0000555555b2e7c1 in mkldnn::impl::cpu::tr::kernel_t::create (desc=...) at /root/volume/mkl-dnn/src/cpu/jit_uni_reorder.cpp:719
#8  0x0000555555b34767 in mkldnn::impl::cpu::jit_uni_reorder_t::jit_uni_reorder_t (this=0x555555f36c80, apd=0x555555f37600) at /root/volume/mkl-dnn/src/cpu/jit_uni_reorder.cpp:883
#9  0x0000555555b34377 in mkldnn::impl::cpu::jit_uni_reorder_t::pd_t::create_primitive (this=0x555555f37600, p=0x7fffffffa578) at /root/volume/mkl-dnn/src/cpu/jit_uni_reorder.cpp:833
#10 0x00005555555bae53 in mkldnn_primitive_create (primitive=0x7fffffffa578, primitive_desc=0x555555f37600) at /root/volume/mkl-dnn/src/common/primitive.cpp:57
#11 0x00005555555b446f in prepare_reorder (user_memory=0x7fffffffa540, prim_memory_md=0x555555f3bf00, prim_engine=0x555555f36480, dir_is_user_to_prim=1, prim_memory=0x7fffffffa560, 
    reorder=0x7fffffffa578, net_index=0x7fffffffa490, net=0x7fffffffa780, net_args=0x7fffffffa7d0) at /root/volume/mkl-dnn/examples/simple_net.c:122
#12 0x00005555555b4d36 in simple_net () at /root/volume/mkl-dnn/examples/simple_net.c:227
#13 0x00005555555b5efe in main (argc=1, argv=0x7fffffffe658) at /root/volume/mkl-dnn/examples/simple_net.c:456
&lt;/denchmark-code&gt;

The line 242 of jitprofiling.c is as below.
&lt;denchmark-link:https://user-images.githubusercontent.com/12624852/55795239-e19c8a80-5af9-11e9-876b-fd971730da6c.png&gt;&lt;/denchmark-link&gt;

The DEFAULT_DLLNAME is as below.
&lt;denchmark-link:https://user-images.githubusercontent.com/12624852/55799772-c2572a80-5b04-11e9-9cbc-fbe73f72e2ad.png&gt;&lt;/denchmark-link&gt;

So what is libJitPI.so and How I find it? It seems that MKL-DNN can't open the libJitPI.so
		</comment>
		<comment id='7' author='jianlongf' date='2019-04-10T03:37:38Z'>
		Finally, I solved the dlopen errors(segmentation fault) by adding -DMKLDNN_ENABLE_JIT_PROFILING=0 in the configure process.
&lt;denchmark-code&gt;mkdir -p build &amp;&amp; cd build &amp;&amp; cmake $CMAKE_OPTIONS  -DMKLDNN_THREADING=SEQ -DMKLDNN_USE_MKL=NONE -DCMAKE_BUILD_TYPE=Debug -DMKLDNN_ENABLE_JIT_PROFILING=0 ..
&lt;/denchmark-code&gt;

		</comment>
		<comment id='8' author='jianlongf' date='2019-04-10T05:24:47Z'>
		This is weird. Which MKL-DNN version and which CMake version are these? The segfault above is due to missing -ldl on the libmkldnn.so link line.
		</comment>
		<comment id='9' author='jianlongf' date='2019-04-10T05:57:03Z'>
		I used the latest source code pulled by &lt;denchmark-link:https://github.com/intel/mkl-dnn&gt;https://github.com/intel/mkl-dnn&lt;/denchmark-link&gt;
. My CMake version is as below
cmake version 3.5.1.
It seems nothing to do with -ld1 and just turning off MKLDNN_ENABLE_JIT_PROFILING is OK.
		</comment>
		<comment id='10' author='jianlongf' date='2019-04-10T21:30:20Z'>
		This has everything to do with -ldl. The segfault is because dynamic linker loader library that provides dlopen() is not linked to libmkldnn.so. I have confirmed that this is not reproducible on Ubuntu 18.10 on unmodified master, so probably this is due to local modifications.
I'm closing the issue and marking it as invalid. Please feel free to reopen if you observe the issue without local modifications.
		</comment>
		<comment id='11' author='jianlongf' date='2019-04-10T22:55:11Z'>
		Taking that back... there is indeed a bug in CMake that causes -ldl to be ignored. Marking as a bug...
		</comment>
		<comment id='12' author='jianlongf' date='2019-04-11T19:20:28Z'>
		&lt;denchmark-link:https://github.com/rsdubtso&gt;@rsdubtso&lt;/denchmark-link&gt;
 There might be an issue with combining  (from ) with  as , , etc are declared as weak symbols in  (is there any reason?). In this case  library is discarded by the linker as there are no strong symbols from  library to resolve.
		</comment>
		<comment id='13' author='jianlongf' date='2019-04-11T22:25:10Z'>
		&lt;denchmark-link:https://github.com/echeresh&gt;@echeresh&lt;/denchmark-link&gt;
 Yes, it is exactly the problem, thanks for pointing me to . I will probably need to change the definitions there...
		</comment>
		<comment id='14' author='jianlongf' date='2019-04-19T17:09:11Z'>
		This is fixed in &lt;denchmark-link:https://github.com/oneapi-src/oneDNN/commit/277a32284d86f2ce4c1035d393b82c9ad9833e36&gt;277a322&lt;/denchmark-link&gt;
 and &lt;denchmark-link:https://github.com/oneapi-src/oneDNN/commit/f7a957e7ee3ed18f689a2e4cd265bf600b3bb4da&gt;f7a957e&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>