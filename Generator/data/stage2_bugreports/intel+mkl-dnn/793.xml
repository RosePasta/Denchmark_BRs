<bug id='793' author='Flamefire' open_date='2020-07-28T07:34:41Z' closed_time='2020-09-02T15:59:23Z'>
	<summary>ASAN failure "initialization-order-fiasco" in Xbyak::util::Cpu::getDataCacheLevels()</summary>
	<description>
&lt;denchmark-h:h1&gt;Summary&lt;/denchmark-h&gt;

Running a program using oneDNN under ASAN reports a "initialization-order-fiasco" with below data:
&lt;denchmark-code&gt;==8987==ERROR: AddressSanitizer: initialization-order-fiasco on address 0x7f9e7f471ae4 at pc 0x7f9e477c8510 bp 0x7fff3afd5790 sp 0x7fff3afd5788
READ of size 4 at 0x7f9e7f471ae4 thread T0
    #0 0x7f9e477c850f in Xbyak::util::Cpu::getDataCacheLevels() const /tmp/pytorch/build/../third_party/ideep/mkl-dnn/src/cpu/x64/xbyak/xbyak_util.h:275:51
    #1 0x7f9e477c808f in dnnl::impl::cpu::platform::get_per_core_cache_size(int) /tmp/pytorch/build/../third_party/ideep/mkl-dnn/src/cpu/platform.cpp:77:13
    #2 0x7f9e1e24472e in __cxx_global_var_init.347 /tmp/pytorch/build/../third_party/ideep/mkl-dnn/src/cpu/x64/jit_avx512_common_conv_kernel.cpp:43:30
    #3 0x7f9e1e244cbf in _GLOBAL__sub_I_jit_avx512_common_conv_kernel.cpp /tmp/pytorch/build/../third_party/ideep/mkl-dnn/src/cpu/x64/jit_avx512_common_conv_kernel.cpp
    #4 0x7f9f4af1e9b2 in _dl_init_internal (/lib64/ld-linux-x86-64.so.2+0xf9b2)
  [Python internals]
    #87 0x40079d in _start (/software/haswell/Python/3.7.4-GCCcore-8.3.0/bin/python3.7+0x40079d)

0x7f9e7f471ae4 is located 100 bytes inside of global variable 'dnnl::impl::cpu::x64::(anonymous namespace)::cpu' defined in '../third_party/ideep/mkl-dnn/src/cpu/x64/cpu_isa_traits.hpp:156:25' (0x7f9e7f471a80) of size 136
  registered at:
    #0 0x7f9f4a50501e in __asan_register_globals /tmp/s3248973-EasyBuild/Clang/8.0.1/GCC-8.3.0-CUDA-10.1.243/llvm-8.0.1.src/projects/compiler-rt/lib/asan/asan_globals.cc:362:3
    #1 0x7f9e477c844b in asan.module_ctor (/tmp/install_pt/lib/python3.7/site-packages/torch/lib/libtorch_cpu.so+0x4cea544b)
LLVMSymbolizer: error reading file: No such file or directory
    #2 0x7fff3afdad91  ([stack]+0x2bd91)

SUMMARY: AddressSanitizer: initialization-order-fiasco /tmp/pytorch/build/../third_party/ideep/mkl-dnn/src/cpu/x64/xbyak/xbyak_util.h:275:51 in Xbyak::util::Cpu::getDataCacheLevels() const
Shadow bytes around the buggy address:
  0x0ff44fe86300: f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6
  0x0ff44fe86310: f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6
  0x0ff44fe86320: f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6
  0x0ff44fe86330: f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6
  0x0ff44fe86340: f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6
=&gt;0x0ff44fe86350: f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6[f6]f6 f6 f6
  0x0ff44fe86360: f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6
  0x0ff44fe86370: f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6
  0x0ff44fe86380: f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6
  0x0ff44fe86390: f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6
  0x0ff44fe863a0: f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6 f6
Shadow byte legend (one shadow byte represents 8 application bytes):
  Addressable:           00
  Partially addressable: 01 02 03 04 05 06 07 
  Heap left redzone:       fa
  Freed heap region:       fd
  Stack left redzone:      f1
  Stack mid redzone:       f2
  Stack right redzone:     f3
  Stack after return:      f5
  Stack use after scope:   f8
  Global redzone:          f9
  Global init order:       f6
  Poisoned by user:        f7
  Container overflow:      fc
  Array cookie:            ac
  Intra object redzone:    bb
  ASan internal:           fe
  Left alloca redzone:     ca
  Right alloca redzone:    cb
  Shadow gap:              cc
==8987==ABORTING
&lt;/denchmark-code&gt;

To me this looks like a valid issue:




oneDNN/src/cpu/x64/jit_avx512_common_conv_kernel.cpp


         Line 43
      in
      49dcdb1






 unsigned int L1_cache_size = platform::get_per_core_cache_size(1); 




 inits a static global
This uses another static global: 


oneDNN/src/cpu/x64/cpu_isa_traits.hpp


         Line 185
      in
      49dcdb1






 static Xbyak::util::Cpu cpu; 





As initialization order of static global is unspecified it reads (or may read) uninitialized data as shown by the above memory map

&lt;denchmark-h:h1&gt;Version&lt;/denchmark-h&gt;

At least 1.5+ and still in current master: &lt;denchmark-link:https://github.com/oneapi-src/oneDNN/commit/49dcdb1d76bc43c058380f5697b75e2f7f2552a6&gt;49dcdb1&lt;/denchmark-link&gt;

&lt;denchmark-h:h1&gt;Environment&lt;/denchmark-h&gt;

oneDNN includes hardware-specific optimizations and may behave
differently on depending on the compiler and build environment. Include
the following information to help reproduce the issue:

CPU make and model (try lscpu; if your lscpu does not list CPU flags,
try running cat /proc/cpuinfo | grep flags | sort -u)
OS version (uname -a)
Compiler version (gcc --version)
CMake version (cmake --version)
CMake output log
git hash (git log -1 --format=%H)

&lt;denchmark-h:h1&gt;Steps to reproduce&lt;/denchmark-h&gt;

Install and run with ASAN
	</description>
	<comments>
		<comment id='1' author='Flamefire' date='2020-07-30T02:39:30Z'>
		Agree, seems like a bug indeed.
Interestingly enough we do run ASAN on weekly basis, and for whatever reason don't see this issue. Wonder why...
Anyways, thanks for the report!
We will look into this: the issue itself and why our ASAN test doesn't catch it.
		</comment>
		<comment id='2' author='Flamefire' date='2020-07-30T06:53:42Z'>
		If that helps: I discovered this while running PyTorch compiled from source with the referenced oneDNN (also compiled from source) under ASAN+UBSAN. I used Clang 8
		</comment>
		<comment id='3' author='Flamefire' date='2020-07-30T06:57:29Z'>
		&lt;denchmark-link:https://github.com/Flamefire&gt;@Flamefire&lt;/denchmark-link&gt;
, thank you!
		</comment>
		<comment id='4' author='Flamefire' date='2020-09-02T15:59:23Z'>
		Fixed with &lt;denchmark-link:https://github.com/oneapi-src/oneDNN/commit/8b1f3dafb9bca7e7f5df653677ebc2b9aed88944&gt;8b1f3da&lt;/denchmark-link&gt;
.
&lt;denchmark-link:https://github.com/Flamefire&gt;@Flamefire&lt;/denchmark-link&gt;
, thanks for the bug report!
		</comment>
	</comments>
</bug>