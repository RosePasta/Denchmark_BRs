<bug id='278' author='sadatnfs' open_date='2018-07-14T20:57:48Z' closed_time='2018-07-16T15:36:52Z'>
	<summary>Failing to build memory.cpp.o</summary>
	<description>
I'm trying to build MKL-DNN in my Docker (based on the GCC 8.1.0 image which is built on Debian:Stretch), and have been getting this issue (see below) where it fails to build the memory cpp object. Please let me know if any other information would be helpful!
(Note: I tried to use the -w flag to override all the warnings but it still treats them as errors)
&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

&lt;denchmark-h:h3&gt;Environment&lt;/denchmark-h&gt;


CPU

&lt;denchmark-code&gt;Architecture:          x86_64
CPU op-mode(s):        32-bit, 64-bit
Byte Order:            Little Endian
CPU(s):                8
On-line CPU(s) list:   0-7
Thread(s) per core:    1
Core(s) per socket:    1
Socket(s):             8
NUMA node(s):          1
Vendor ID:             GenuineIntel
CPU family:            6
Model:                 58
Model name:            Intel(R) Xeon(R) CPU E5-2660 v3 @ 2.60GHz
Stepping:              0
CPU MHz:               2599.998
BogoMIPS:              5199.99
Hypervisor vendor:     VMware
Virtualization type:   full
L1d cache:             32K
L1i cache:             32K
L2 cache:              256K
L3 cache:              25600K
NUMA node0 CPU(s):     0-7
Flags:                 fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts mmx fxsr sse sse2 ss syscall nx rdtscp lm constant_tsc arch_perfmon pebs bts nopl xtopology tsc_reliable nonstop_tsc pni pclmulqdq ssse3 cx16 pcid sse4_1 sse4_2 x2apic popcnt tsc_deadline_timer aes xsave avx f16c rdrand hypervisor lahf_lm spec_ctrl retpoline kaiser fsgsbase tsc_adjust smep arat
&lt;/denchmark-code&gt;


OS:

Linux 41b12110b15c 4.4.0-116-generic #140-Ubuntu SMP Mon Feb 12 21:23:04 UTC 2018 x86_64 GNU/Linux


GCC
gcc (GCC) 8.1.0


MKLROOT:
 /opt/intel/compilers_and_libraries/linux/mkl
(version is 2018.3.222)


CMake
Version: 3.7.2


&lt;denchmark-h:h3&gt;Steps to reproduce&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;     git clone https://github.com/intel/mkl-dnn.git &amp;&amp; \
     cd /opt/mkl-dnn &amp;&amp; cd scripts &amp;&amp; ./prepare_mkl.sh &amp;&amp; cd .. &amp;&amp; \ 
     mkdir -p build &amp;&amp; cd build &amp;&amp; cmake -w CMAKE_CXX_FLAGS='-w' .. &amp;&amp;   make CFLAGS="-w" "-Werror=format-truncation=" &amp;&amp; make install
&lt;/denchmark-code&gt;

&lt;denchmark-h:h3&gt;Behavior&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;-- The CXX compiler identification is GNU 8.1.0
-- Check for working C compiler: /usr/bin/cc
-- Check for working C compiler: /usr/bin/cc -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Detecting C compile features
-- Detecting C compile features - done
-- Check for working CXX compiler: /usr/bin/c++
-- Check for working CXX compiler: /usr/bin/c++ -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- CMAKE_BUILD_TYPE is unset, defaulting to Release
-- Detecting Intel(R) MKL: trying mklml_intel
-- Detecting Intel(R) MKL: trying mklml
-- Detecting Intel(R) MKL: trying mkl_rt
-- Intel(R) MKL: include /opt/intel/compilers_and_libraries/linux/mkl/include
-- Intel(R) MKL: lib /opt/intel/compilers_and_libraries/linux/mkl/lib/intel64/libmkl_rt.so
-- Intel(R) MKL: OpenMP lib /opt/intel/compilers_and_libraries/linux/lib/intel64/libiomp5.so
-- Try OpenMP C flag = [-fopenmp]
-- Performing Test OpenMP_FLAG_DETECTED
-- Performing Test OpenMP_FLAG_DETECTED - Success
-- Try OpenMP CXX flag = [-fopenmp]
-- Performing Test OpenMP_FLAG_DETECTED
-- Performing Test OpenMP_FLAG_DETECTED - Success
-- Found OpenMP: -fopenmp
-- Found Doxygen: /usr/bin/doxygen (found version "1.8.13")
-- VTune profiling environment is unset
-- Looking for pthread.h
-- Looking for pthread.h - found
-- Looking for pthread_create
-- Looking for pthread_create - found
-- Found Threads: TRUE
-- Configuring done
-- Generating done
-- Build files have been written to: /opt/mkl-dnn/build
&lt;/denchmark-code&gt;

&lt;denchmark-h:h3&gt;Error on make:&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;[  1%] Building CXX object src/CMakeFiles/mkldnn.dir/common/batch_normalization.cpp.o
[  1%] Building CXX object src/CMakeFiles/mkldnn.dir/common/convolution.cpp.o
[  1%] Building CXX object src/CMakeFiles/mkldnn.dir/common/convolution_relu.cpp.o
[  2%] Building CXX object src/CMakeFiles/mkldnn.dir/common/deconvolution.cpp.o
[  2%] Building CXX object src/CMakeFiles/mkldnn.dir/common/eltwise.cpp.o
[  3%] Building CXX object src/CMakeFiles/mkldnn.dir/common/engine.cpp.o
[  3%] Building CXX object src/CMakeFiles/mkldnn.dir/common/inner_product.cpp.o
[  3%] Building CXX object src/CMakeFiles/mkldnn.dir/common/lrn.cpp.o
[  4%] Building CXX object src/CMakeFiles/mkldnn.dir/common/memory.cpp.o
In file included from /opt/mkl-dnn/src/common/primitive_desc.hpp:26,
                 from /opt/mkl-dnn/src/common/primitive.hpp:27,
                 from /opt/mkl-dnn/src/common/engine.hpp:24,
                 from /opt/mkl-dnn/src/common/memory.cpp:24:
/opt/mkl-dnn/src/common/verbose.hpp: In function ‘void mkldnn::impl::init_info_mem(pd_t*, char*) [with pd_t = mkldnn::impl::concat_pd_t]’:
/opt/mkl-dnn/src/common/verbose.hpp:53:46: error: ‘%s’ directive output may be truncated writing up to 383 bytes into a region of size between 232 and 1019 [-Werror=format-truncation=]
     snprintf(buffer, MKLDNN_VERBOSE_BUF_LEN, "%s,%s,%s,%s,%s,%s",
                                              ^~~~~~~~~~~~~~~~~~~
/opt/mkl-dnn/src/common/verbose.hpp:215:22:
             aux_str, prb_str);
                      ~~~~~~~
In file included from /usr/include/stdio.h:938,
                 from /usr/local/include/c++/8.1.0/cstdio:42,
                 from /usr/local/include/c++/8.1.0/ext/string_conversions.h:43,
                 from /usr/local/include/c++/8.1.0/bits/basic_string.h:6361,
                 from /usr/local/include/c++/8.1.0/string:52,
                 from /usr/local/include/c++/8.1.0/stdexcept:39,
                 from /usr/local/include/c++/8.1.0/array:39,
                 from /usr/local/include/c++/8.1.0/tuple:39,
                 from /usr/local/include/c++/8.1.0/bits/stl_map.h:63,
                 from /usr/local/include/c++/8.1.0/map:61,
                 from /opt/mkl-dnn/src/common/nstl.hpp:25,
                 from /opt/mkl-dnn/src/common/event.hpp:20,
                 from /opt/mkl-dnn/src/common/engine.hpp:23,
                 from /opt/mkl-dnn/src/common/memory.cpp:24:
/usr/include/x86_64-linux-gnu/bits/stdio2.h:64:35: note: ‘__builtin___snprintf_chk’ output 6 or more bytes (assuming 1176) into a destination of size 1024
   return __builtin___snprintf_chk (__s, __n, __USE_FORTIFY_LEVEL - 1,
          ~~~~~~~~~~~~~~~~~~~~~~~~~^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
        __bos (__s), __fmt, __va_arg_pack ());
        ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
cc1plus: all warnings being treated as errors
src/CMakeFiles/mkldnn.dir/build.make:254: recipe for target 'src/CMakeFiles/mkldnn.dir/common/memory.cpp.o' failed
make[2]: *** [src/CMakeFiles/mkldnn.dir/common/memory.cpp.o] Error 1
CMakeFiles/Makefile2:117: recipe for target 'src/CMakeFiles/mkldnn.dir/all' failed
make[1]: *** [src/CMakeFiles/mkldnn.dir/all] Error 2
Makefile:138: recipe for target 'all' failed
make: *** [all] Error 2
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='sadatnfs' date='2018-07-15T03:09:02Z'>
		Hi &lt;denchmark-link:https://github.com/sadatnfs&gt;@sadatnfs&lt;/denchmark-link&gt;
,
Thanks for noting this. The fix is shown below.
We will promote it to master soon.
diff --git a/src/common/verbose.hpp b/src/common/verbose.hpp
index c55182a8..b57ebd3c 100644
--- a/src/common/verbose.hpp
+++ b/src/common/verbose.hpp
@@ -42,8 +42,8 @@ double get_msec();
 #define MKLDNN_VERBOSE_PRB_LEN 384

 #define DECL_DAT_AUX_PRB_STRS() \
-    char dat_str[MKLDNN_VERBOSE_PRB_LEN] = {'\0'}; MAYBE_UNUSED(dat_str); \
-    char aux_str[MKLDNN_VERBOSE_PRB_LEN] = {'\0'}; MAYBE_UNUSED(aux_str); \
+    char dat_str[MKLDNN_VERBOSE_DAT_LEN] = {'\0'}; MAYBE_UNUSED(dat_str); \
+    char aux_str[MKLDNN_VERBOSE_AUX_LEN] = {'\0'}; MAYBE_UNUSED(aux_str); \
     char prb_str[MKLDNN_VERBOSE_PRB_LEN] = {'\0'}; MAYBE_UNUSED(prb_str)

 inline void verbose_templ(char *buffer, mkldnn_primitive_kind_t prim_kind,
diff --git a/tests/benchdnn/common.cpp b/tests/benchdnn/common.cpp
index fa028a45..7d836ba0 100644
--- a/tests/benchdnn/common.cpp
+++ b/tests/benchdnn/common.cpp
@@ -299,7 +299,7 @@ FILE *open_batch_file(const char *fname) {
     const int max_paths = 4;

     static int n_paths = 0;
-    static char search_paths[max_paths][PATH_MAX] = {{0}};
+    static char search_paths[max_paths][PATH_MAX - 2] = {{0}};

     char *fdir = NULL;
     {
		</comment>
		<comment id='2' author='sadatnfs' date='2018-07-15T03:15:59Z'>
		Awesome, I'll just wait until Master is updated for my next build, thanks &lt;denchmark-link:https://github.com/emfomenk&gt;@emfomenk&lt;/denchmark-link&gt;
 !
		</comment>
		<comment id='3' author='sadatnfs' date='2018-07-16T02:49:15Z'>
		Oh, is there a PR in order for this fix? Wasn't sure how long I'd wait for Master to be updated, and whether I could just use a fork or a hack in my Dockerfile for this fix now. Thanks!
		</comment>
		<comment id='4' author='sadatnfs' date='2018-07-16T03:09:59Z'>
		I am going to promote the fix tomorrow. We already have the fix in the internal repo and just wait for some final checks to finish.
		</comment>
		<comment id='5' author='sadatnfs' date='2018-07-16T15:37:58Z'>
		Here we are.
The fix is in the master.
		</comment>
		<comment id='6' author='sadatnfs' date='2018-07-16T15:43:29Z'>
		Can confirm that memory.cpp compiles all good! Thanks!!!
		</comment>
		<comment id='7' author='sadatnfs' date='2018-07-16T15:45:19Z'>
		Glad to hear!
Thanks for the report! :)
		</comment>
	</comments>
</bug>