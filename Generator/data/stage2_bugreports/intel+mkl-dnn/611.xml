<bug id='611' author='wojtuss' open_date='2019-12-06T15:00:40Z' closed_time='2019-12-12T17:00:27Z'>
	<summary>Inner product bad performance in MKL-DNN 1.0 for s8 input and 20 threads</summary>
	<description>
&lt;denchmark-h:h1&gt;Summary&lt;/denchmark-h&gt;

Performance of inner product for s8 input and 20 threads dropped from MKL-DNN 0.20 to 1.0. There is no drop for u8 and f32 inputs. Also, there is no drop for single thread (actually, it is about 60% better). In 1.1 and master branch the issue no longer exist. Measured using benchdnn.
Would it be possible to get a backport fix in 1.0?
&lt;denchmark-h:h1&gt;Version&lt;/denchmark-h&gt;

1.0: &lt;denchmark-link:https://github.com/oneapi-src/oneDNN/commit/518a316a8cd6deb82dc7866bc04bd0355a25c3a4&gt;518a316&lt;/denchmark-link&gt;

&lt;denchmark-h:h1&gt;Environment&lt;/denchmark-h&gt;



CPU
Architecture:          x86_64
CPU op-mode(s):        32-bit, 64-bit
Byte Order:            Little Endian
CPU(s):                80
On-line CPU(s) list:   0-79
Thread(s) per core:    2
Core(s) per socket:    20
Socket(s):             2
NUMA node(s):          2
Vendor ID:             GenuineIntel
CPU family:            6
Model:                 85
Model name:            Intel(R) Xeon(R) Gold 6248 CPU @ 2.50GHz
Stepping:              7
CPU MHz:               999.908
CPU max MHz:           3900,0000
CPU min MHz:           1000,0000
BogoMIPS:              5000.00
Virtualization:        VT-x
L1d cache:             32K
L1i cache:             32K
L2 cache:              1024K
L3 cache:              28160K
NUMA node0 CPU(s):     0-19,40-59
NUMA node1 CPU(s):     20-39,60-79
Flags:                 fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush dts acpi mmx fxsr sse sse2 ss ht tm pbe syscall nx pdpe1gb rdtscp lm constant_tsc art arch_perfmon pebs bts rep_good nopl xtopology nonstop_tsc aperfmperf eagerfpu pni pclmulqdq dtes64 monitor ds_cpl vmx smx est tm2 ssse3 sdbg fma cx16 xtpr pdcm pcid dca sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand lahf_lm abm 3dnowprefetch epb cat_l3 cdp_l3 intel_pt ssbd mba ibrs ibpb stibp ibrs_enhanced tpr_shadow vnmi flexpriority ept vpid fsgsbase tsc_adjust bmi1 hle avx2 smep bmi2 erms invpcid rtm cqm mpx rdt_a avx512f avx512dq rdseed adx smap clflushopt clwb avx512cd avx512bw avx512vl xsaveopt xsavec xgetbv1 cqm_llc cqm_occup_llc cqm_mbm_total cqm_mbm_local dtherm ida arat pln pts hwp hwp_act_window hwp_epp hwp_pkg_req pku ospke avx512_vnni spec_ctrl intel_stibp flush_l1d arch_capabilities


OS
Linux aipg-server-1 3.10.0-957.el7.x86_64 #1 SMP Thu Nov 8 23:39:32 UTC 2018 x86_64 x86_64 x86_64 GNU/Linux


GCC
gcc (GCC) 4.8.5 20150623 (Red Hat 4.8.5-39)


cmake
cmake3 version 3.13.5


cmake command
cmake ..


cmake output for 1.0


&lt;denchmark-code&gt;-- The C compiler identification is GNU 4.8.5
-- The CXX compiler identification is GNU 4.8.5
-- Check for working C compiler: /usr/bin/cc
-- Check for working C compiler: /usr/bin/cc -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Detecting C compile features
-- Detecting C compile features - done
-- Check for working CXX compiler: /usr/bin/c++
-- Check for working CXX compiler: /usr/bin/c++ -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- CMAKE_BUILD_TYPE is unset, defaulting to Release
-- Detecting Intel(R) MKL: trying mklml_intel
-- Detecting Intel(R) MKL: trying mklml_gnu
-- Detecting Intel(R) MKL: trying mklml
-- Detecting Intel(R) MKL: trying mkl_rt
CMake Warning at cmake/MKL.cmake:295 (message):
  Intel(R) MKL not found.  Some performance features may not be available.
  Please run scripts/prepare_mkl.sh to download a minimal set of libraries or
  get a full version from https://software.intel.com/en-us/intel-mkl
Call Stack (most recent call first):
  cmake/OpenMP.cmake:25 (include)
  CMakeLists.txt:76 (include)


-- Found OpenMP_C: -fopenmp (found version "3.1") 
-- Found OpenMP_CXX: -fopenmp (found version "3.1") 
-- Found OpenMP: TRUE (found version "3.1")  
-- OpenMP lib: provided by compiler
-- Found Doxygen: /usr/bin/doxygen (found version "1.8.5") found components:  doxygen missing components:  dot
-- VTune profiling environment is unset
-- Found Git: /usr/bin/git (found version "2.16.5") 
-- Looking for pthread.h
-- Looking for pthread.h - found
-- Looking for pthread_create
-- Looking for pthread_create - found
-- Found Threads: TRUE  
-- Configuring done
-- Generating done
-- Build files have been written to: /home/wojtek/repos/intel/mkl-dnn/build_paddle1.0
&lt;/denchmark-code&gt;


git hash
0.20: aef88b7
1.0: 518a316
1.1: 28f4c96

&lt;denchmark-h:h1&gt;Steps to reproduce&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;#!/bin/bash
targets=(mb128ic768oc768 mb128ic3072oc768 mb128ic768oc3072)
export OMP_NUM_THREADS=20
for ip_desc in ${targets[@]}; do
    ./benchdnn --ip --mode=p --max-ms-per-prb=6000 --reset --dir=FWD_B --cfg=s8s8s32s32 ${ip_desc}
done
&lt;/denchmark-code&gt;

&lt;denchmark-h:h1&gt;Observed behavior&lt;/denchmark-h&gt;

Performance of the inner product on 1.0 version is much worse then for 0.20 and 1.1:



Â 
mb128ic768oc768
mb128ic3072oc768
mb128ic768oc3072




0.20
0.102495
0.326905
0.320389


1.0
0.206507
0.543959
0.539667


1.1
0.0450714
0.168055
0.137211


0.20 -&gt; 1.0 increase
-101%
-66%
-68%


0.20 -&gt; 1.1 increase
56%
49%
57%



Logs for MKLDNN_VERBOSE=2:
0.20
&lt;denchmark-code&gt;...
mkldnn_verbose,exec,inner_product,igemm_s8s8s32:jit,forward_training,fsrc:nwc fwei:wio fbia:x fdst:nc,,mb128ic768oc768,0.137939
...
mkldnn_verbose,exec,inner_product,igemm_s8s8s32:jit,forward_training,fsrc:nwc fwei:wio fbia:x fdst:nc,,mb128ic3072oc768,0.351074
...
mkldnn_verbose,exec,inner_product,igemm_s8s8s32:jit,forward_training,fsrc:nwc fwei:wio fbia:x fdst:nc,,mb128ic768oc3072,0.321045
...
&lt;/denchmark-code&gt;

1.0
&lt;denchmark-code&gt;...
mkldnn_verbose,exec,cpu,inner_product,igemm_s8s8s32:jit,forward_training,src_s8::blocked:abc:f0 wei_s8::blocked:bca:f0 bia_f32::blocked:a:f0 dst_s32::blocked:ab:f0,,mb128ic768oc768,0.205078
...
mkldnn_verbose,exec,cpu,inner_product,igemm_s8s8s32:jit,forward_training,src_s8::blocked:abc:f0 wei_s8::blocked:bca:f0 bia_f32::blocked:a:f0 dst_s32::blocked:ab:f0,,mb128ic3072oc768,0.548096
...
mkldnn_verbose,exec,cpu,inner_product,igemm_s8s8s32:jit,forward_training,src_s8::blocked:abc:f0 wei_s8::blocked:bca:f0 bia_f32::blocked:a:f0 dst_s32::blocked:ab:f0,,mb128ic768oc3072,0.591064
...
&lt;/denchmark-code&gt;

1.1
&lt;denchmark-code&gt;...
dnnl_verbose,exec,cpu,inner_product,igemm_s8s8s32:jit,forward_training,src_s8::blocked:abc:f0 wei_s8::blocked:bca:f0 bia_f32::blocked:a:f0 dst_s32::blocked:ab:f0,,,mb128ic768iw1oc768,0.0480957
...
dnnl_verbose,exec,cpu,inner_product,igemm_s8s8s32:jit,forward_training,src_s8::blocked:abc:f0 wei_s8::blocked:bca:f0 bia_f32::blocked:a:f0 dst_s32::blocked:ab:f0,,,mb128ic3072iw1oc768,0.197021
...
dnnl_verbose,exec,cpu,inner_product,igemm_s8s8s32:jit,forward_training,src_s8::blocked:abc:f0 wei_s8::blocked:bca:f0 bia_f32::blocked:a:f0 dst_s32::blocked:ab:f0,,,mb128ic768iw1oc3072,0.205078
...
&lt;/denchmark-code&gt;

&lt;denchmark-h:h1&gt;Expected behavior&lt;/denchmark-h&gt;

Performance of ip in 1.0 is expected to be similar or
	</description>
	<comments>
		<comment id='1' author='wojtuss' date='2019-12-06T16:31:42Z'>
		Hi &lt;denchmark-link:https://github.com/wojtuss&gt;@wojtuss&lt;/denchmark-link&gt;
,
Thank you for the detailed report. Considering that v1.1 is available what is preventing using this release instead of v1.0.x?
		</comment>
		<comment id='2' author='wojtuss' date='2019-12-09T10:33:57Z'>
		hi &lt;denchmark-link:https://github.com/vpirogov&gt;@vpirogov&lt;/denchmark-link&gt;
,
In PaddlePaddle MKL-DNN 1.0 is going to be merged first, then it is going to be bumped up to 1.1 very quickly (I hope). After consultation with &lt;denchmark-link:https://github.com/jczaja&gt;@jczaja&lt;/denchmark-link&gt;
 we will wait for 1.1 with performance benchmarking.
Thank you!
		</comment>
		<comment id='3' author='wojtuss' date='2019-12-12T17:00:27Z'>
		Thanks for confirmation. This will time necessary to dig up the patch and validate the result.
		</comment>
	</comments>
</bug>