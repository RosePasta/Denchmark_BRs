<bug id='77' author='kruus' open_date='2017-06-20T18:52:28Z' closed_time='2017-06-29T00:03:00Z'>
	<summary>fragile headers (depend on inclusion order)</summary>
	<description>
Via mkldnn.hpp, mkldnn_types.h appear under mkldnn::c_api::.  However, in implementation code,
mkldnn_types.h types sometimes appear in global namespace [see c_types_map.hpp].  This creates
issues with header inclusion order, where you basically don't really know where those types will end up, depending on whether you end up including [from global scope, at start of files, as customary]
mkldnn.hpp first or mkldnn_types.h first.  Depending on "proper" header inclusion order is fragile.
I think the namespace into which C++ puts mkldnn_types.h should be a single, uniform
decision (i.e. either always in :: or always in mkldnn::c_api::).
Probably it is good for mkldnn.h and mkldnn_types.h to put themselves into the correct C++
namespace, rather than having mkldnn.hpp try to "force" mkldnn.h and mkldnn_types.h underneath mkldnn::c_api::. I don't have any particular preference about which namespace is chosen, since they are already uniformly prefixed to avoid clashes.
Been a while -- tracking down a nasty compiler bug (sxcc).
	</description>
	<comments>
		<comment id='1' author='kruus' date='2017-06-21T02:52:22Z'>
		Ack.

Probably it is good for mkldnn.h and mkldnn_types.h to put themselves into the correct C++
namespace, rather than having mkldnn.hpp try to "force" mkldnn.h and mkldnn_types.h underneath mkldnn::c_api::.

Probably that's the best way to go.
		</comment>
		<comment id='2' author='kruus' date='2017-06-21T04:15:14Z'>
		Then the main choice is whether C++ should put mkldnn_types.h in global
namespace, or under mkldnn::c_api::
&lt;denchmark-link:#&gt;…&lt;/denchmark-link&gt;


On Tue, Jun 20, 2017 at 10:52 PM, Roma Dubtsov ***@***.***&gt; wrote:
 Ack.

 Probably it is good for mkldnn.h and mkldnn_types.h to put themselves into
 the correct C++
 namespace, rather than having mkldnn.hpp try to "force" mkldnn.h and
 mkldnn_types.h underneath mkldnn::c_api::.

 Probably that's the best way to go.

 —
 You are receiving this because you authored the thread.
 Reply to this email directly, view it on GitHub
 &lt;#77 (comment)&gt;, or mute
 the thread
 &lt;https://github.com/notifications/unsubscribe-auth/AFu-Es0QCVfjIQgZnTIyrpR_URAom7Nhks5sGIVngaJpZM4OAAXD&gt;
 .



		</comment>
		<comment id='3' author='kruus' date='2017-06-28T21:19:59Z'>
		Removing namespace c_api still leaves the problem.  There is a still a #include inside a namespace, and a non-unique way to have that header included.  This is eventually going to bite you.  (It already has bit me).
Consider a simpler question:
The library currently compiles the C api functions into global namespace,
(you should check with ldd, and verify by looking at src/common/ sources which put
all the mkldnn_foo functions in global namespace because they typically directly include mkldnn.h),
so why even try to misrepresent this in mkldnn.hpp?
&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

Fixing the problem by putting the C api in global namespace is easy.
Anything else, to fix properly, is a lot of work.
I had a go at really putting the C api under ```
namespace mkldnn {
extern "C" { ... }}
&lt;denchmark-code&gt;and got examples linking OK.  It required changes to many, many c api .cpp files in src/common/, and then it propagated into tests/ (and I quit). Things did link and run correctly and ldd show the C api under mkldnn. Now I don't even fully understand how the C linker finds the namespace-mangled symbols in the library, but it does.
&lt;/denchmark-code&gt;

		</comment>
		<comment id='4' author='kruus' date='2017-06-28T23:28:59Z'>
		Our bad, for some reasons the commit was incomplete.
Thanks for catching that! Will push the fix soon.
		</comment>
		<comment id='5' author='kruus' date='2017-06-28T23:36:12Z'>
		Why?

:wbr Roma

On 29 Jun 2017, at 06:29, Evarist &lt;notifications@github.com&lt;mailto:notifications@github.com&gt;&gt; wrote:


Reopened &lt;denchmark-link:https://github.com/oneapi-src/oneDNN/issues/77&gt;#77&lt;/denchmark-link&gt;
&lt;&lt;denchmark-link:https://github.com/oneapi-src/oneDNN/issues/77&gt;#77&lt;/denchmark-link&gt;
&gt;.

—
You are receiving this because you commented.
Reply to this email directly, view it on GitHub&lt;&lt;denchmark-link:https://github.com/oneapi-src/oneDNN/issues/77#event-1143319101&gt;#77 (comment)&lt;/denchmark-link&gt;
&gt;, or mute the thread&lt;&lt;denchmark-link:https://github.com/notifications/unsubscribe-auth/AOhTH6op7webax3R7FI7dn6aRkEMbO0yks5sIuG8gaJpZM4OAAXD&gt;https://github.com/notifications/unsubscribe-auth/AOhTH6op7webax3R7FI7dn6aRkEMbO0yks5sIuG8gaJpZM4OAAXD&lt;/denchmark-link&gt;
&gt;.
&lt;denchmark-link:#&gt;…&lt;/denchmark-link&gt;


--------------------------------------------------------------------
Joint Stock Company Intel A/O
Registered legal address: Krylatsky Hills Business Park,
17 Krylatskaya Str., Bldg 4, Moscow 121614,
Russian Federation

This e-mail and any attachments may contain confidential material for
the sole use of the intended recipient(s). Any review or distribution
by others is strictly prohibited. If you are not the intended
recipient, please contact the sender and delete all copies.

		</comment>
		<comment id='6' author='kruus' date='2017-06-28T23:38:28Z'>
		mkldnn.h is still included under namespace mkldnn:
&lt;denchmark-code&gt;namespace mkldnn {
...
#include "mkldnn.h"
...
}
&lt;/denchmark-code&gt;

		</comment>
	</comments>
</bug>