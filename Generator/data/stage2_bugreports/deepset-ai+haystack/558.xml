<bug id='558' author='iknoorjobs' open_date='2020-11-05T19:13:58Z' closed_time='2020-11-07T05:18:12Z'>
	<summary>Bug with top_k argument?</summary>
	<description>
Describe the bug
Hi
I am trying to retrieve documents with BM25. It seems that top_k is not working. I set top_k=10 and it returns 3 documents.
&lt;denchmark-code&gt;out = document_store.query(query="textual query", filters=None, top_k=4)

print (out)

[&lt;haystack.schema.Document at 0x7fc9c1f6b550&gt;,
 &lt;haystack.schema.Document at 0x7fc9b9121390&gt;,
 &lt;haystack.schema.Document at 0x7fc9b9121f28&gt;]


&lt;/denchmark-code&gt;

Expected behavior
It should return the top 10 documents.
	</description>
	<comments>
		<comment id='1' author='iknoorjobs' date='2020-11-05T19:38:30Z'>
		I suppose this is with the ElasticsearchDocumentStore? Is this consistently happening for all queries (e.g. query= "what is this?")?
		</comment>
		<comment id='2' author='iknoorjobs' date='2020-11-05T19:40:49Z'>
		Hi &lt;denchmark-link:https://github.com/tholor&gt;@tholor&lt;/denchmark-link&gt;

Yes, it's happening for almost all queries. I used ElasticsearchDocumentStore.
&lt;denchmark-code&gt;from haystack.document_store.elasticsearch import ElasticsearchDocumentStore
document_store = ElasticsearchDocumentStore(host="localhost", username="", password="", index="document")
&lt;/denchmark-code&gt;

Thanks
		</comment>
		<comment id='3' author='iknoorjobs' date='2020-11-05T19:47:41Z'>
		How many docs have you indexed? Have you connected an existing index or did you create one (automatically) via haystack?
		</comment>
		<comment id='4' author='iknoorjobs' date='2020-11-05T20:38:04Z'>
		I created a demo index with 6 docs in it. And now also whenever I put top_k greater than 3, it always returns top 3 docs. I am just trying to use haystack to build a simple bm25 document retrieval.
		</comment>
		<comment id='5' author='iknoorjobs' date='2020-11-06T07:51:46Z'>
		Ok got it, then it's very likely that only 3 of your 6 docs contain any of the words / tokens in your query.
The default behaviour of the ElasticsearchDocumentStore is to only return docs that have at least one shared token with the query. If you want to change this behaviour you can do that by specifying a "custom_query" in Elasticsearch syntax.
Here is an example to demonstrate the diff between default and custom query:
document_store = ElasticsearchDocumentStore(host="localhost", username="", password="", index="document")
dicts = [
    {"text": "some test"},
    {"text": "some test"},
    {"text": "some test"},
    {"text": "what test"},
    {"text": "what test"},
    {"text": "what test"},
         ]
document_store.write_documents(dicts)

document_store.query("test", top_k=6) # =&gt; 3 docs with "test"
document_store.query("some", top_k=6) # =&gt; 3 docs with "some"
document_store.query("what", top_k=6) # =&gt; 6 docs

custom_query =  """{
                "query": {
                    "bool": {
                        "should": [
                            {"multi_match": {"query": "${question}", "type": "most_fields", "fields": "text"}},
                            {"match_all": {}}
                            ]
                    }
                }
            }"""

document_store.query("what", custom_query=custom_query, top_k=6) #=&gt; all 6 docs

retriever = ElasticsearchRetriever(document_store=document_store, custom_query=custom_query)
		</comment>
		<comment id='6' author='iknoorjobs' date='2020-11-07T05:18:12Z'>
		Oh, got it. Thank you so much.
And great work &lt;denchmark-link:https://github.com/tholor&gt;@tholor&lt;/denchmark-link&gt;
.
Cheers
		</comment>
	</comments>
</bug>