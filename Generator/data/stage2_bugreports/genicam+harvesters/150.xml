<bug id='150' author='StefanD986' open_date='2020-04-24T11:02:39Z' closed_time='2020-08-16T04:01:12Z'>
	<summary>Multiple Single Frame acquisitions require StopAcquisition</summary>
	<description>
Describe the bug
The Genicam SFNC document mentions that executing the StopAcquisition() command is optional in Single Frame acquisition Mode. See following image from genicam SFNC page 165:
&lt;denchmark-link:https://user-images.githubusercontent.com/13921689/80200131-79481a80-8622-11ea-918f-1667af7db4af.png&gt;&lt;/denchmark-link&gt;

However when I try to run multiple singe frame acquisitions without a StopAcquisition(), I get an error.
To Reproduce
Execute the following snippet:
import os
from pathlib import Path
from importlib.util import find_spec

genicam_path = Path(find_spec("genicam").origin).parent
os.environ["PATH"] += os.pathsep + str(genicam_path)

from harvesters.core import Harvester

h = Harvester()

h.add_file(str(genicam_path / 'TLSimu.cti'))

h.update()

ia = h.create_image_acquirer(0)

ia.remote_device.node_map.get_node('AcquisitionMode').value = 'SingleFrame'

ia.start_acquisition() # Success

with ia.fetch_buffer() as buffer:
    pass # just return the buffer to queue

ia.start_acquisition() # fail: `GenTL exception: Operation cannot be performed. Responsible module is busy. (Message from the source: The acquisition process is running now.) (ID: -1022)`
Expected behavior
The second ia.start_acquisition() should not throw an error
Desktop (please complete the following information):

OS: Windows 10
Python: 3.7
Harvester: harvesters==1.2.0
genicam==1.0.0
GenTL Producer: TLSimu
Camera: TLSimu

Additional context
Could also very well be a misunderstanding by me of the genicam spec.
	</description>
	<comments>
		<comment id='1' author='StefanD986' date='2020-04-24T13:19:10Z'>
		&lt;denchmark-link:https://github.com/StefanD986&gt;@StefanD986&lt;/denchmark-link&gt;
 Thank you for the comment. Could you give me some time to think about that? It could be a bit delicate issue for Harvester. /Kazunari
		</comment>
		<comment id='2' author='StefanD986' date='2020-05-05T15:10:20Z'>
		&lt;denchmark-link:https://github.com/StefanD986&gt;@StefanD986&lt;/denchmark-link&gt;
 Hi, sorry having kept you waiting for such long. It's a very trivial question but you mean you would like to use the  method to acquire a single image? And does it mean you want an  object to keep holding the acquired image until the next  call?
		</comment>
		<comment id='3' author='StefanD986' date='2020-05-06T12:30:37Z'>
		I think the short answer is:

you would like to use the start_acquisition method to acquire a single image?

yes

you want an ImageAcquire object to keep holding the acquired image until the next star_acquisition call?

No, I only expect it to hold it until leaving the with ia.fetch_buffer() as buffer: construct. After that I expect the buffer would be returned to genicam so that it can be re-used.
Long answer would be: This is how I understand the Single Frame acquisition of genicam:

ImageAcquirer allocates multiple image buffers, which are then put in a queue for buffers that are free to use.
If I say start_acquisition, the camera will acquire a frame, one buffer is removed from the above mentioned queue, the image is saved in there. Then the (filled) buffer is put into another queue for buffers filled with image data.
With ia.fetch_buffer one buffer is pop'ed from the buffers filled with image data-queue
I do whatever needs to be done with the picture
If I am done with the picture, the buffer is returned to the buffers that are free to use-Queue (this is done automatically through the ia.fetch_buffer context manager)
The next start_acquire would repeat the process from 2.
Calling stop_acquisition would de-allocate all buffers

Essentially when in SingleFrame acquisition mode, I want to avoid to do start_acquisition do-something-with-the-image stop_acquisition repeatedly, because each start_acquisition needs to allocate and each stop_acquisition de-allocate the buffers each time. And the genicam standard seems to allow that.
Hope that clarifies it a bit?
		</comment>
		<comment id='4' author='StefanD986' date='2020-05-07T18:03:14Z'>
		Not all manufacturers support or require the same settings for using an external trigger, you may want to look for a manual specific to your camera instead of generic Genicam specs. As I recently commented on &lt;denchmark-link:https://github.com/genicam/harvesters/issues/77#issuecomment-625363356&gt;the closed issue 77&lt;/denchmark-link&gt;
 (repeating here since a closed issue may not get so much attention): I have a camera where repeated acquisitions by external trigger need to be done by using AcquisitionMode='SingleFrame', calling my patched

only once and ia.stop_acquisition() only once when I have as many frames as I want. This works also at high frame rates (tested 1 kHz). This camera has no 'MultiFrame' mode, which seems from Genicam docs to have been more expected/typical.
So if your camera behaves in the same way, the &lt;denchmark-link:https://github.com/genicam/harvesters/files/4594849/allow_SingleFrame_mode_without_actually_stopping_after_first.diff.txt&gt;patch&lt;/denchmark-link&gt;
 I attach may be a way to achieve what you want without needing to call start_acquisition() again, just

again as many times as you want. I also configured

(its default is 1 ms) but I didn't test if that was really needed.
I suspect that your approach of wanting to call start_acquisition() before every new frame could be a bit slower if made possible, since I guess it would "re-arm" (validate all settings again, maybe reallocate buffers too).
		</comment>
		<comment id='5' author='StefanD986' date='2020-05-08T06:38:48Z'>
		&lt;denchmark-link:https://github.com/StefanD986&gt;@StefanD986&lt;/denchmark-link&gt;
 Hi. Thank you for your clarification and it helped me to clearly understand your assertion in detail. One thing I can say now is it's just an issue about the design of Harvester and I would like to cover the usage that you expect in a natural way as much as possible. I know this is just an awkward excuse but Harvester is one of my purely private projects and it's done in my spare time that I can have when my family allows. It's been a while since you opened this ticket but I hope you can keep waiting a bit more. Could you? I hope you do not get disappointed with Harvester. /Kazunari
		</comment>
		<comment id='6' author='StefanD986' date='2020-05-08T08:04:12Z'>
		&lt;denchmark-link:https://github.com/kazunarikudo&gt;@kazunarikudo&lt;/denchmark-link&gt;
 yes no problem. Its not a blocking problem for me at the moment. As a workaround I am now doing a software-triggered multiframe acquisition, and I am simply using the software trigger to acquire a single frame.
		</comment>
		<comment id='7' author='StefanD986' date='2020-05-08T08:17:39Z'>
		&lt;denchmark-link:https://github.com/erik-mansson&gt;@erik-mansson&lt;/denchmark-link&gt;
 thanks a lot for the tip and the patch. Luckily the camera I need to support at the moment have multiframe acquisition, so I can use my workaround. But I also have another camera, which I have not tested yet, so you patch may still come in handy.

I suspect that your approach of wanting to call start_acquisition() before every new frame could be a bit slower if made possible, since I guess it would "re-arm" (validate all settings again, maybe reallocate buffers too).

If I understand the genicam standard correctly, re-allocating buffers should not be necessary I deduct that from GenTL standard section 5.2 Acquisition chain, where the allocation and announcing of the buffers is described before Start Acquisition. (Its a bit lengthy so I won't copy it here).
Re-validating settings should also not be necessary, if I understand the section about the AcquisitionStart command (section 5.5.3 in the GenICam SFNC) correctly:

AcquisitionStart command must validate all the current features for consistency before starting the Acquisition. This validation will not be repeated for the subsequent acquisitions unless a feature is changed in the device.

But yeah could also very well be that I am misunderstanding it or practice differs from theory.
		</comment>
		<comment id='8' author='StefanD986' date='2020-05-08T08:32:09Z'>
		&lt;denchmark-link:https://github.com/StefanD986&gt;@StefanD986&lt;/denchmark-link&gt;
, good that things are OK for you.
I saw the GenICam documentation about AcquisitionStart yesterday, and I remember it saying that somthing like Arm or ReArm exists too. If ReArm is done, I think it kind of forces a full initialization. I was just fearing that Harvesters might be causing a ReArm or maybe setting some parameter that causes the "feature change in device", or guessing that there are buffers allocated also on the Harvesters level when ImageAcquirer.start_acquisition() is called. So the allocation/performance part of my comment is just guesswork and apparently you are well aware of such risks.
		</comment>
		<comment id='9' author='StefanD986' date='2020-05-08T14:32:02Z'>
		&lt;denchmark-link:https://github.com/StefanD986&gt;@StefanD986&lt;/denchmark-link&gt;
 Hi, Stefan. I have just committed a change for your use case to  branch. Could you try that out when you can and let me know if there's something block you, please? I would appreciate it if you could try the development version with the possible AcquisitionMode values on camera models that you have to make the test result promising. Note that you must call  for at least every event that requires resource de-allocation such as a case where you changed the image size, pixel format, etc. /Kazunari
		</comment>
		<comment id='10' author='StefanD986' date='2020-05-18T07:23:35Z'>
		Hi, thank you for the fix. Unfortunately I do not have the camera available all the time (its a shared asset and its currently in use). So it might take a couple of weeks before I can try out the fix with a physical camera.
How shall we proceed? Do you want to wait with the merge until I can test it with the physical camera? (This would be fine for me, but I would understand if you want to merge it ASAP to prevent the branches diverging too much)
		</comment>
		<comment id='11' author='StefanD986' date='2020-05-18T14:01:48Z'>
		&lt;denchmark-link:https://github.com/StefanD986&gt;@StefanD986&lt;/denchmark-link&gt;
 Hi. Thank you for your reply. It's not urget so I'll wait for your feedback. I see a value in the suggested usage so lookeing forward to hearing from you again. Thank you. /Kazunari
		</comment>
		<comment id='12' author='StefanD986' date='2020-06-03T14:19:57Z'>
		&lt;denchmark-link:https://github.com/StefanD986&gt;@StefanD986&lt;/denchmark-link&gt;
 Hi. This is just a friendly reminder. I'm awaiting your feedback. ;-)
		</comment>
		<comment id='13' author='StefanD986' date='2020-06-18T00:07:05Z'>
		&lt;denchmark-link:https://github.com/StefanD986&gt;@StefanD986&lt;/denchmark-link&gt;
 How's it going? I'd appreciate if you could give me your feedback. Thank you!
		</comment>
		<comment id='14' author='StefanD986' date='2020-06-22T13:01:29Z'>
		Hi, I'm sorry I still need some more time :( . The camera feature is on our roadmap for this year, so I will definitely come back to it, however there are some other things planned in the meantime.
		</comment>
		<comment id='15' author='StefanD986' date='2020-08-14T10:35:34Z'>
		&lt;denchmark-link:https://github.com/kazunarikudo&gt;@kazunarikudo&lt;/denchmark-link&gt;
 Hi, I can finally confirm that this PR fixes the issue! 
Apologies that it took so long. The camera that I needed for testing is a scarce resource in our company. Thank you for your patience!
btw I tested with a Allied Vision GoldEye camera (and the TLSimu dummy camera)
		</comment>
		<comment id='16' author='StefanD986' date='2020-08-16T04:01:12Z'>
		&lt;denchmark-link:https://github.com/StefanD986&gt;@StefanD986&lt;/denchmark-link&gt;
 Thank you for your feedback!
		</comment>
	</comments>
</bug>