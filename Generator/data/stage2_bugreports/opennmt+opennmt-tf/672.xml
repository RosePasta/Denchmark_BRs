<bug id='672' author='abumafrim' open_date='2020-05-28T17:00:35Z' closed_time='2020-06-04T13:14:26Z'>
	<summary>Error when training a RNN model</summary>
	<description>
Hi,
When resuming training from a checkpoint, I encountered the following error:
Traceback (most recent call last):
File "/usr/local/bin/onmt-main", line 8, in 
sys.exit(main())
File "/usr/local/lib/python3.6/dist-packages/opennmt/bin/main.py", line 223, in main
hvd=hvd)
File "/usr/local/lib/python3.6/dist-packages/opennmt/runner.py", line 147, in train
model = self._init_model(config)
File "/usr/local/lib/python3.6/dist-packages/opennmt/runner.py", line 120, in _init_model
model = misc.clone_layer(self._model)
File "/usr/local/lib/python3.6/dist-packages/opennmt/utils/misc.py", line 200, in clone_layer
return copy.deepcopy(layer)
File "/usr/lib/python3.6/copy.py", line 180, in deepcopy
y = _reconstruct(x, memo, *rv)
File "/usr/lib/python3.6/copy.py", line 280, in _reconstruct
state = deepcopy(state, memo)
File "/usr/lib/python3.6/copy.py", line 150, in deepcopy
y = copier(x, memo)
File "/usr/lib/python3.6/copy.py", line 240, in _deepcopy_dict
y[deepcopy(key, memo)] = deepcopy(value, memo)
File "/usr/lib/python3.6/copy.py", line 150, in deepcopy
y = copier(x, memo)
File "/usr/lib/python3.6/copy.py", line 215, in _deepcopy_list
append(deepcopy(a, memo))
File "/usr/lib/python3.6/copy.py", line 180, in deepcopy
y = _reconstruct(x, memo, *rv)
File "/usr/lib/python3.6/copy.py", line 280, in _reconstruct
state = deepcopy(state, memo)
File "/usr/lib/python3.6/copy.py", line 150, in deepcopy
y = copier(x, memo)
File "/usr/lib/python3.6/copy.py", line 240, in _deepcopy_dict
y[deepcopy(key, memo)] = deepcopy(value, memo)
File "/usr/lib/python3.6/copy.py", line 150, in deepcopy
y = copier(x, memo)
File "/usr/lib/python3.6/copy.py", line 215, in _deepcopy_list
append(deepcopy(a, memo))
File "/usr/lib/python3.6/copy.py", line 180, in deepcopy
y = _reconstruct(x, memo, *rv)
File "/usr/lib/python3.6/copy.py", line 280, in _reconstruct
state = deepcopy(state, memo)
File "/usr/lib/python3.6/copy.py", line 150, in deepcopy
y = copier(x, memo)
File "/usr/lib/python3.6/copy.py", line 240, in _deepcopy_dict
y[deepcopy(key, memo)] = deepcopy(value, memo)
File "/usr/lib/python3.6/copy.py", line 150, in deepcopy
y = copier(x, memo)
File "/usr/lib/python3.6/copy.py", line 215, in _deepcopy_list
append(deepcopy(a, memo))
File "/usr/lib/python3.6/copy.py", line 180, in deepcopy
y = _reconstruct(x, memo, *rv)
File "/usr/lib/python3.6/copy.py", line 280, in _reconstruct
state = deepcopy(state, memo)
File "/usr/lib/python3.6/copy.py", line 150, in deepcopy
y = copier(x, memo)
File "/usr/lib/python3.6/copy.py", line 240, in _deepcopy_dict
y[deepcopy(key, memo)] = deepcopy(value, memo)
File "/usr/lib/python3.6/copy.py", line 180, in deepcopy
y = _reconstruct(x, memo, *rv)
File "/usr/lib/python3.6/copy.py", line 280, in _reconstruct
state = deepcopy(state, memo)
File "/usr/lib/python3.6/copy.py", line 150, in deepcopy
y = copier(x, memo)
File "/usr/lib/python3.6/copy.py", line 240, in _deepcopy_dict
y[deepcopy(key, memo)] = deepcopy(value, memo)
File "/usr/lib/python3.6/copy.py", line 150, in deepcopy
y = copier(x, memo)
File "/usr/lib/python3.6/copy.py", line 240, in _deepcopy_dict
y[deepcopy(key, memo)] = deepcopy(value, memo)
File "/usr/lib/python3.6/copy.py", line 180, in deepcopy
y = _reconstruct(x, memo, *rv)
File "/usr/lib/python3.6/copy.py", line 280, in _reconstruct
state = deepcopy(state, memo)
File "/usr/lib/python3.6/copy.py", line 150, in deepcopy
y = copier(x, memo)
File "/usr/lib/python3.6/copy.py", line 220, in _deepcopy_tuple
y = [deepcopy(a, memo) for a in x]
File "/usr/lib/python3.6/copy.py", line 220, in 
y = [deepcopy(a, memo) for a in x]
File "/usr/lib/python3.6/copy.py", line 150, in deepcopy
y = copier(x, memo)
File "/usr/lib/python3.6/copy.py", line 240, in _deepcopy_dict
y[deepcopy(key, memo)] = deepcopy(value, memo)
File "/usr/lib/python3.6/copy.py", line 180, in deepcopy
y = _reconstruct(x, memo, *rv)
File "/usr/lib/python3.6/copy.py", line 280, in _reconstruct
state = deepcopy(state, memo)
File "/usr/lib/python3.6/copy.py", line 150, in deepcopy
y = copier(x, memo)
File "/usr/lib/python3.6/copy.py", line 240, in _deepcopy_dict
y[deepcopy(key, memo)] = deepcopy(value, memo)
File "/usr/lib/python3.6/copy.py", line 150, in deepcopy
y = copier(x, memo)
File "/usr/lib/python3.6/copy.py", line 215, in _deepcopy_list
append(deepcopy(a, memo))
File "/usr/lib/python3.6/copy.py", line 180, in deepcopy
y = _reconstruct(x, memo, *rv)
File "/usr/lib/python3.6/copy.py", line 274, in _reconstruct
y = func(*args)
File "/usr/lib/python3.6/copy.py", line 273, in 
args = (deepcopy(arg, memo) for arg in args)
File "/usr/lib/python3.6/copy.py", line 161, in deepcopy
y = copier(memo)
File "/usr/local/lib/python3.6/dist-packages/tensorflow/python/training/tracking/data_structures.py", line 465, in deepcopy
copied = super(ListWrapper, self).deepcopy(memo)
File "/usr/local/lib/python3.6/dist-packages/tensorflow/python/training/tracking/data_structures.py", line 324, in deepcopy
return type(self)(copy.deepcopy(self._storage, memo))
File "/usr/lib/python3.6/copy.py", line 150, in deepcopy
y = copier(x, memo)
File "/usr/lib/python3.6/copy.py", line 215, in _deepcopy_list
append(deepcopy(a, memo))
File "/usr/lib/python3.6/copy.py", line 180, in deepcopy
y = _reconstruct(x, memo, *rv)
File "/usr/lib/python3.6/copy.py", line 280, in _reconstruct
state = deepcopy(state, memo)
File "/usr/lib/python3.6/copy.py", line 150, in deepcopy
y = copier(x, memo)
File "/usr/lib/python3.6/copy.py", line 240, in _deepcopy_dict
y[deepcopy(key, memo)] = deepcopy(value, memo)
File "/usr/lib/python3.6/copy.py", line 150, in deepcopy
y = copier(x, memo)
File "/usr/lib/python3.6/copy.py", line 215, in _deepcopy_list
append(deepcopy(a, memo))
File "/usr/lib/python3.6/copy.py", line 180, in deepcopy
y = _reconstruct(x, memo, *rv)
File "/usr/lib/python3.6/copy.py", line 280, in _reconstruct
state = deepcopy(state, memo)
File "/usr/lib/python3.6/copy.py", line 150, in deepcopy
y = copier(x, memo)
File "/usr/lib/python3.6/copy.py", line 240, in _deepcopy_dict
y[deepcopy(key, memo)] = deepcopy(value, memo)
File "/usr/lib/python3.6/copy.py", line 180, in deepcopy
y = _reconstruct(x, memo, *rv)
File "/usr/lib/python3.6/copy.py", line 280, in _reconstruct
state = deepcopy(state, memo)
File "/usr/lib/python3.6/copy.py", line 150, in deepcopy
y = copier(x, memo)
File "/usr/lib/python3.6/copy.py", line 240, in _deepcopy_dict
y[deepcopy(key, memo)] = deepcopy(value, memo)
File "/usr/lib/python3.6/copy.py", line 150, in deepcopy
y = copier(x, memo)
File "/usr/lib/python3.6/copy.py", line 240, in _deepcopy_dict
y[deepcopy(key, memo)] = deepcopy(value, memo)
File "/usr/lib/python3.6/copy.py", line 180, in deepcopy
y = _reconstruct(x, memo, *rv)
File "/usr/lib/python3.6/copy.py", line 280, in _reconstruct
state = deepcopy(state, memo)
File "/usr/lib/python3.6/copy.py", line 150, in deepcopy
y = copier(x, memo)
File "/usr/lib/python3.6/copy.py", line 220, in _deepcopy_tuple
y = [deepcopy(a, memo) for a in x]
File "/usr/lib/python3.6/copy.py", line 220, in 
y = [deepcopy(a, memo) for a in x]
File "/usr/lib/python3.6/copy.py", line 150, in deepcopy
y = copier(x, memo)
File "/usr/lib/python3.6/copy.py", line 240, in _deepcopy_dict
y[deepcopy(key, memo)] = deepcopy(value, memo)
File "/usr/lib/python3.6/copy.py", line 161, in deepcopy
y = copier(memo)
File "/usr/lib/python3.6/weakref.py", line 421, in deepcopy
new = self.class()
TypeError: init() missing 1 required positional argument: 'default_factory'
Please help.
	</description>
	<comments>
		<comment id='1' author='abumafrim' date='2020-05-28T17:13:05Z'>
		Can you give more information? OpenNMT-tf version, the model you are trying to train, command line, etc.
		</comment>
		<comment id='2' author='abumafrim' date='2020-05-28T17:34:32Z'>
		

I just used the command line to install the OpenNMT-tf without specifying any version:
!pip install OpenNMT-tf


I tried training the model using the following code:
!onmt-main --config config/pre-train-bt.yml --model_type NMTSmallV1 --auto_config train --with_eval --num_gpus 1


I ran the same code in the morning severally without encountering any problem but about an hour ago, the problem started after I installed OpenNMT-tf.
		</comment>
		<comment id='3' author='abumafrim' date='2020-05-28T17:44:14Z'>
		A new version was published today with TensorFlow 2.2. Maybe this is causing issues.
Can you try installing the previous version?
&lt;denchmark-code&gt;pip install OpenNMT-tf==2.9.*
&lt;/denchmark-code&gt;

		</comment>
		<comment id='4' author='abumafrim' date='2020-05-28T17:57:02Z'>
		Solved. Thanks.
		</comment>
		<comment id='5' author='abumafrim' date='2020-05-28T18:00:16Z'>
		Let's keep this issue open. It looks like there is a bug that needs fixing.
		</comment>
		<comment id='6' author='abumafrim' date='2020-05-29T06:25:20Z'>
		Alright.
		</comment>
		<comment id='7' author='abumafrim' date='2020-05-29T07:09:34Z'>
		This looks like a TensorFlow bug. I opened an issue: &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/39978&gt;tensorflow/tensorflow#39978&lt;/denchmark-link&gt;

Thanks for reporting. I will try to find a workaround.
		</comment>
		<comment id='8' author='abumafrim' date='2020-06-04T13:33:21Z'>
		The bug is fixed in TensorFlow and will be included in TensorFlow 2.3. In the meantime, I pushed a partial workaround in OpenNMT-tf 2.10.1 that should cover the standard use case of running models with onmt-main.
&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

The error can still happen in some niche usages but there are now ways to unblock the situation. For completeness, below is a list of such cases and the suggested workaround:

you need to upgrade a RNN-based V1 checkpoint: upgrade the V1 checkpoint with OpenNMT-tf 2.9 (or below) and then update to OpenNMT-tf 2.10.1.
you run RNN models directly with the Runner class: replace the model argument passed to Runner by a callable that returns a new model instance when called.

		</comment>
	</comments>
</bug>