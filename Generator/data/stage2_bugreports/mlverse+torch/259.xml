<bug id='259' author='skeydan' open_date='2020-09-25T08:28:26Z' closed_time='2020-10-12T21:19:45Z'>
	<summary>inconsistency in size() output</summary>
	<description>
There is an inconsistency in size() output depending whether you're calling it on the result returned from indexing or a newly created tensor:
&lt;denchmark-code&gt;&gt; t[1, 1]$size()
integer(0)

&gt; torch_tensor(1)$size()
[1] 1
&lt;/denchmark-code&gt;

In Python, the latter case results in an empty list as well as the former:
&lt;denchmark-code&gt;&gt;&gt;&gt; torch.tensor(1).size()
torch.Size([])
&lt;/denchmark-code&gt;

If you asked me, I'd actually prefer making this consistent by NOT doing what Python does - to me, returning a size of 1 in both cases seems intuitive...
	</description>
	<comments>
		<comment id='1' author='skeydan' date='2020-09-25T08:36:33Z'>
		Hm... actually not so sure which way is the intuitive one here... when I compare
&lt;denchmark-code&gt;&gt; m  &lt;- matrix(1:4, nrow = 2)
&gt; m[1,1] %&gt;% dim()
NULL
&gt; m[1,1, drop = FALSE] %&gt;% dim()
[1] 1 1
&lt;/denchmark-code&gt;

this really does look more like Python does it...
		</comment>
		<comment id='2' author='skeydan' date='2020-09-25T14:54:41Z'>
		The problem is that since R doesn't have a scalar type, we are converting a 1 element vector to a one element tensor (which makes sense) but currently there's no way to construct a scalar tensor (with no dimensions).
We could make torch_tensor(1) return a scalar tensor, but then there will be no way to construct a 1 element tensor directly from R.
t[1,1] returns a scalar tensor and this might be confusing... I don't know what's the best solution here... I found sometimes functions expecting scalar tensors and had to $squeeze before passing, I also know that a lot of functions expect 1-element tensors.
		</comment>
	</comments>
</bug>