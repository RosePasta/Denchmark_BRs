<bug id='381' author='skeydan' open_date='2020-12-07T09:13:33Z' closed_time='2020-12-09T13:28:27Z'>
	<summary>torch_roll without dims arg crashes R</summary>
	<description>
Hi,
from the documentation, it sounds like the third argument to torch_roll() were optional, and in gen_namespace.R it looks like that as well:
&lt;denchmark-code&gt;nd_args &lt;- c("self", "shifts")
&lt;/denchmark-code&gt;

However if I call the function without it, or with NULL or list(), R crashes.
	</description>
	<comments>
		<comment id='1' author='skeydan' date='2020-12-07T13:12:31Z'>
		What code crashes? The below works for me in the dev version:
library(torch)
torch_roll(1:10, shifts = 2)
#&gt; torch_tensor
#&gt;   9
#&gt;  10
#&gt;   1
#&gt;   2
#&gt;   3
#&gt;   4
#&gt;   5
#&gt;   6
#&gt;   7
#&gt;   8
#&gt; [ CPULongType{10} ]
Created on 2020-12-07 by the reprex package (v0.3.0)
		</comment>
		<comment id='2' author='skeydan' date='2020-12-07T14:36:58Z'>
		Updated to current head - still crashes for me:
&lt;denchmark-code&gt;#0  __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:50
50	  return ret;
(gdb) bt
#0  __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:50
#1  0x00007f4efd979895 in __GI_abort () at abort.c:79
#2  0x00007f4efae8dac8 in std::__replacement_assert (__file=&lt;optimized out&gt;, __line=&lt;optimized out&gt;, __function=&lt;optimized out&gt;, __condition=&lt;optimized out&gt;)
    at /usr/include/c++/10/x86_64-redhat-linux/bits/c++config.h:2552
#3  0x00007f4ee694c799 in std::vector&lt;long, std::allocator&lt;long&gt; &gt;::operator[] (this=0x7ffcb32f7e30, __n=0) at /usr/include/c++/10/bits/stl_vector.h:1045
#4  0x00007f4ee68d3203 in cpp_torch_namespace_roll_self_Tensor_shifts_IntArrayRef (self=..., shifts=std::vector of length 1, capacity 1 = {...}, 
    dims=std::vector of length 0, capacity 0) at gen-namespace.cpp:8100
#5  0x00007f4ee669eb5c in _torch_cpp_torch_namespace_roll_self_Tensor_shifts_IntArrayRef (selfSEXP=0x55b66f9ba038, shiftsSEXP=0x55b66d55d660, dimsSEXP=0x55b66d4b92c0)
    at RcppExports.cpp:18051

&lt;/denchmark-code&gt;

		</comment>
		<comment id='3' author='skeydan' date='2020-12-07T14:37:40Z'>
		R version is 4.0.3
		</comment>
		<comment id='4' author='skeydan' date='2020-12-07T14:38:17Z'>
		What code are you running?
		</comment>
		<comment id='5' author='skeydan' date='2020-12-07T14:39:03Z'>
		yours from above
		</comment>
		<comment id='6' author='skeydan' date='2020-12-08T13:13:34Z'>
		I can't reproduce this, tried on both macOS and Linux... I'm going to need more info. Can you paste your session info and compiler version?
		</comment>
		<comment id='7' author='skeydan' date='2020-12-08T20:19:07Z'>
		gcc version is 10.2.1
&lt;denchmark-code&gt;&gt; sessionInfo()
R version 4.0.3 (2020-10-10)
Platform: x86_64-redhat-linux-gnu (64-bit)
Running under: Fedora 32 (Workstation Edition)

Matrix products: default
BLAS/LAPACK: /usr/lib64/libopenblas-r0.3.12.so

locale:
 [1] LC_CTYPE=en_US.UTF-8       LC_NUMERIC=C               LC_TIME=en_US.UTF-8       
 [4] LC_COLLATE=en_US.UTF-8     LC_MONETARY=en_US.UTF-8    LC_MESSAGES=en_US.UTF-8   
 [7] LC_PAPER=en_US.UTF-8       LC_NAME=C                  LC_ADDRESS=C              
[10] LC_TELEPHONE=C             LC_MEASUREMENT=en_US.UTF-8 LC_IDENTIFICATION=C       

attached base packages:
[1] stats     graphics  grDevices utils     datasets  methods   base     

loaded via a namespace (and not attached):
[1] compiler_4.0.3 tools_4.0.3   
&lt;/denchmark-code&gt;

From the above stacktrace, seems to be that this assertion triggers it?
(in /usr/include/c++/10/bits/stl_vector.h)
&lt;denchmark-code&gt;operator[](size_type __n) _GLIBCXX_NOEXCEPT
      {
	__glibcxx_requires_subscript(__n);
	return *(this-&gt;_M_impl._M_start + __n);
      }
&lt;/denchmark-code&gt;

This is a dumb question for sure, but ... how come this piece of code
&lt;denchmark-code&gt;auto r_out = lantern_roll_tensor_intarrayref_intarrayref(self-&gt;get(), lantern_vector_int64_t(&amp;shifts[0], shifts.size()), lantern_vector_int64_t(&amp;dims[0], dims.size()));
&lt;/denchmark-code&gt;

normally works (for others) when dims is empty?
		</comment>
		<comment id='8' author='skeydan' date='2020-12-08T20:25:20Z'>
		A list() should be converted to a vector of size 0, so there shouldn't be any problem with it.
		</comment>
		<comment id='9' author='skeydan' date='2020-12-08T20:27:23Z'>
		It would be helpful to have your Rcpp version and torch commit too
		</comment>
		<comment id='10' author='skeydan' date='2020-12-08T20:30:55Z'>
		sure, and thanks!
1f8bfb14352b62b95b8a22c18136cdf87ae94483
&lt;denchmark-code&gt;&gt; packageVersion("Rcpp")
[1] ‘1.0.5’
&lt;/denchmark-code&gt;

		</comment>
		<comment id='11' author='skeydan' date='2020-12-09T12:49:35Z'>
		Turns out you were right! &amp;dims[0] is undefined if dims is an empty vector.
		</comment>
	</comments>
</bug>