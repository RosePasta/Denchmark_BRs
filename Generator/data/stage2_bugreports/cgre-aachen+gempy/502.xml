<bug id='502' author='alexanderzimmerman' open_date='2020-08-11T12:32:31Z' closed_time='2020-08-18T08:05:29Z'>
	<summary>Regression in master because of change in pandas</summary>
	<description>
The master branch isn't passing Travis tests, so PR branches are also failing. This shows up e.g. in this CRON build: &lt;denchmark-link:https://travis-ci.org/github/cgre-aachen/gempy/builds/714780814&gt;https://travis-ci.org/github/cgre-aachen/gempy/builds/714780814&lt;/denchmark-link&gt;
 , where the error was
&lt;denchmark-code&gt;____________ ERROR collecting test/test_core/test_data_mutation.py _____________
test/test_core/test_data_mutation.py:11: in &lt;module&gt;
    mm.add_surfaces(['surface1', 'foo1', 'foo2', 'foo3'])
gempy/core/model.py:737: in add_surfaces
    self._surfaces.add_surface(surface_list, update_df)
gempy/core/data.py:596: in add_surface
    self.map_series()
gempy/core/data.py:760: in map_series
    self.sort_surfaces()
gempy/core/data.py:678: in sort_surfaces
    self.df.sort_values(by=['series', 'order_surfaces'], inplace=True)
../../../miniconda/envs/tenv/lib/python3.7/site-packages/pandas/core/frame.py:5301: in sort_values
    indexer, axis=self._get_block_manager_axis(axis), verify=False
../../../miniconda/envs/tenv/lib/python3.7/site-packages/pandas/core/internals/managers.py:1415: in take
    new_axis=new_labels, indexer=indexer, axis=axis, allow_dups=True
../../../miniconda/envs/tenv/lib/python3.7/site-packages/pandas/core/internals/managers.py:1259: in reindex_indexer
    for blk in self.blocks
../../../miniconda/envs/tenv/lib/python3.7/site-packages/pandas/core/internals/managers.py:1259: in &lt;listcomp&gt;
    for blk in self.blocks
../../../miniconda/envs/tenv/lib/python3.7/site-packages/pandas/core/internals/blocks.py:1720: in take_nd
    new_values = self.values.take(indexer, fill_value=fill_value, allow_fill=True)
../../../miniconda/envs/tenv/lib/python3.7/site-packages/pandas/core/series.py:829: in take
    nv.validate_take(tuple(), kwargs)
../../../miniconda/envs/tenv/lib/python3.7/site-packages/pandas/compat/numpy/function.py:68: in __call__
    validate_kwargs(fname, kwargs, self.defaults)
../../../miniconda/envs/tenv/lib/python3.7/site-packages/pandas/util/_validators.py:148: in validate_kwargs
    _check_for_invalid_keys(fname, kwargs, compat_args)
../../../miniconda/envs/tenv/lib/python3.7/site-packages/pandas/util/_validators.py:122: in _check_for_invalid_keys
    raise TypeError(f"{fname}() got an unexpected keyword argument '{bad_arg}'")
E   TypeError: take() got an unexpected keyword argument 'fill_value'
&lt;/denchmark-code&gt;

&lt;denchmark-link:https://github.com/Leguark&gt;@Leguark&lt;/denchmark-link&gt;
 said he doesn't remember even using , so it might be a bug inside of . Anyway, I'll start digging into it.
	</description>
	<comments>
		<comment id='1' author='alexanderzimmerman' date='2020-08-11T13:13:23Z'>
		I get the same error locally after upgrading to pandas 1.1.0.
		</comment>
		<comment id='2' author='alexanderzimmerman' date='2020-08-11T14:45:39Z'>
		It's starting to look like there is an incompatibility between the pandas and numpy versions.
		</comment>
		<comment id='3' author='alexanderzimmerman' date='2020-08-11T15:15:46Z'>
		The problem line in pandas is new_values = self.values.take(indexer, fill_value=fill_value, allow_fill=True) in their pandas/core/internals/blocks.py . Their own validator, which checks keyword arguments passed to numpy functions (via the pandas interface), now says that allow_fill is not valid. But pandas 1.0 also passed fill_value here. numpy.take indeed has no fill_value keyword argument. So my understanding is that they added better internal validation in 1.1, but this take_nd method is not tested during pandas development.
		</comment>
		<comment id='4' author='alexanderzimmerman' date='2020-08-11T15:36:52Z'>
		I'm having a hard time writing a script (other than the existing gempy test) which can even manage to execute that line of code in pandas/core/internals/blocks.py. This is deep inside of pandas.
		</comment>
		<comment id='5' author='alexanderzimmerman' date='2020-08-11T15:40:37Z'>
		just fix the version of pandas in the requirements
		</comment>
		<comment id='6' author='alexanderzimmerman' date='2020-08-11T15:42:25Z'>
		
just fix the version of pandas in the requirements

Locally when I ran on pandas 1.0 it fixed this but it threw another error on a different test.
		</comment>
		<comment id='7' author='alexanderzimmerman' date='2020-08-11T15:45:52Z'>
		I'm kind of impressed that we get this error only with
&lt;denchmark-code&gt;import gempy as gp


def test_add_surfaces():

    mm = gp.ImplicitCoKriging()

    mm.add_surfaces(['surface1', 'foo1', 'foo2', 'foo3'])
&lt;/denchmark-code&gt;

so I just started looking into ImplicitCoKriging.add_surfaces, but yeah I'm running out of time to spend on this one.
		</comment>
		<comment id='8' author='alexanderzimmerman' date='2020-08-11T15:52:22Z'>
		Yeah I'm done with this for the day and will decide how to proceed in the morning. I wanted to raise an issue on the pandas side, but right now I can't even manage to write a MWE that reproduces the error without importing gempy. Probably there is a way to set up a minimal pandas.DataFrame such that the same error occurs.
Tomorrow morning I can try fixing pandas==1.0 and see if the bug on that front is easier to fix.
		</comment>
		<comment id='9' author='alexanderzimmerman' date='2020-08-12T06:57:13Z'>
		Looks like pandas==1.0.5 should be fine.
		</comment>
		<comment id='10' author='alexanderzimmerman' date='2020-08-13T12:06:42Z'>
		Probably pandas is central enough to gempy that we will want to figure out the root problem and get back to using the latest pandas, so I'll leave this open for now.
		</comment>
		<comment id='11' author='alexanderzimmerman' date='2020-08-18T08:05:29Z'>
		Fixed by &lt;denchmark-link:https://github.com/cgre-aachen/gempy/pull/504&gt;#504&lt;/denchmark-link&gt;

		</comment>
		<comment id='12' author='alexanderzimmerman' date='2020-08-28T19:31:07Z'>
		&lt;denchmark-link:https://github.com/alexanderzimmerman&gt;@alexanderzimmerman&lt;/denchmark-link&gt;
 is this fixed as of pandas 1.1.1?
		</comment>
		<comment id='13' author='alexanderzimmerman' date='2020-08-31T07:25:44Z'>
		we would have to try. If you are able to run anything with pandas 1.1.1 probably is fixed because the change broke a function we are using all the time. Next time I work in gempy I will check this out
		</comment>
		<comment id='14' author='alexanderzimmerman' date='2020-08-31T07:34:15Z'>
		&lt;denchmark-link:https://github.com/AndrewAnnex&gt;@AndrewAnnex&lt;/denchmark-link&gt;
 and &lt;denchmark-link:https://github.com/Leguark&gt;@Leguark&lt;/denchmark-link&gt;
 , Travis is checking this in &lt;denchmark-link:https://github.com/cgre-aachen/gempy/pull/515&gt;#515&lt;/denchmark-link&gt;
.
		</comment>
		<comment id='15' author='alexanderzimmerman' date='2020-08-31T07:41:23Z'>
		Ah, also &lt;denchmark-link:https://github.com/AndrewAnnex&gt;@AndrewAnnex&lt;/denchmark-link&gt;
 had already made &lt;denchmark-link:https://github.com/cgre-aachen/gempy/pull/514&gt;#514&lt;/denchmark-link&gt;
 to test   Travis passed &lt;denchmark-link:https://github.com/cgre-aachen/gempy/pull/514&gt;#514&lt;/denchmark-link&gt;
.
		</comment>
	</comments>
</bug>