<bug id='371' author='AlexanderJuestel' open_date='2020-04-11T07:45:55Z' closed_time='2020-07-15T13:24:00Z'>
	<summary>Fault Surface Colors in new 3D plotting API not displayed correctly</summary>
	<description>
Describe the bug
When using the new 3D plotting API it was noticed that the color of the fault interfaces do not match with the colors of the computed fault surfaces (see screenshot, the faults go from left to right). The colors for the stratigraphic interfaces are correct though. (The light blue interfaces have a dark blue surface, the purple interfaces a yellow surface, the yellow interfaces a (light) blue surface...)
Expected behavior
All surfaces should have the color that was attributed to the respective surface during surface mapping, especially when using different colors for fault and not just one color.

&lt;denchmark-link:https://user-images.githubusercontent.com/45469915/79038289-7ee04200-7bd8-11ea-8473-598080cc2895.png&gt;&lt;/denchmark-link&gt;

Desktop (please complete the following information):

OS: Windows 10
GemPy Version

if cloned from GitHub: 1.01-1193-gb934f07



Additional context
It is not a big issue but should be fixed at some point for consistency purposes
	</description>
	<comments>
		<comment id='1' author='AlexanderJuestel' date='2020-04-24T09:06:22Z'>
		In connection with issue &lt;denchmark-link:https://github.com/cgre-aachen/gempy/issues/386&gt;#386&lt;/denchmark-link&gt;
 I tried to manually add surfaces to the 3D visualition with the  argument in the -function (see code block 1). The code for plotting is shown in code block 2. The fmts argument seems not be taken in , hence the workaround. When applying the workaround, I would only like to display the "SandgewandFault" and "EasternGrabenJump", I noticed that the surface for "EasternGrabenJump" is in the wrong place and should actually be where the surface data is (purple points a little further down, screenshot 1). There seems to be a mix up with the attribution of surfaces. This mix up was also confirmed for other surfaces.
@pytzcarraldo
Code 1:
&lt;denchmark-code&gt;def plot_surfaces_all(self, fmts: Iterable[str] = None, **kwargs):
       """Plot all geomodel surfaces. If given an iterable containing surface
       strings, it will plot all surfaces specified in it.
       
       Args:
           fmts (List[str], optional): Names of surfaces to plot. 
               Defaults to None.
       """
&lt;/denchmark-code&gt;

Code 2:
&lt;denchmark-code&gt;# gp._plot.plot_3d(modelA2, render_topography = False,  ve =1, cpos = [[1. , 1. , 1], [0.0, 0.0, 0.0], [0, 0, 1]], fig_path = os.pardir+'/Data/Output/Models/ModelA%d/ModelA%d_3D_Plot2.png' % (model,model))

cpos = [[1. , 1. , 1], [0.0, 0.0, 0.0], [0, 0, 1]]
gpv = gp._plot.Vista(modelA2)
gpv.set_bounds()
#gpv.p.camera_position = cpos
# gpv.plot_structured_grid("lith")
gpv.plot_surfaces_all(fmts = ['EasternGrabenJump', 'SandgewandFault'])
gpv._plot_surface_points_all()
gpv._plot_orientations_all()
gpv.plot_topography()
gpv.p.show(screenshot = os.pardir+'/Data/Output/Models/ModelA%d/ModelA%d_3D_Plot2.png' % (model,model))
gpv.p.camera_position
&lt;/denchmark-code&gt;

Screenshot 1:
&lt;denchmark-link:https://user-images.githubusercontent.com/45469915/80193438-1900ab00-8619-11ea-9276-a42b50e52547.png&gt;&lt;/denchmark-link&gt;

		</comment>
		<comment id='2' author='AlexanderJuestel' date='2020-04-24T11:15:53Z'>
		Thanks for the info!
So with the faults being out of order seems to be a problem with how the faults are ordered in the solutions. In my implementation I assumed the same ordering as in the series dataframe - is this not correct &lt;denchmark-link:https://github.com/Leguark&gt;@Leguark&lt;/denchmark-link&gt;
?
gp._plot.plot_3d(geo_model) is supposed to be just a simple method to look at your model and we can only provide so much customisation options without going crazy. For anything more, the user should really use the granular plotting api using gp._plot.Vista, as they then have also direct and easy access to all pyvista functionality to fine tune their plots ðŸ¤”
Another tip for posting code &lt;denchmark-link:https://github.com/AlexanderJuestel&gt;@AlexanderJuestel&lt;/denchmark-link&gt;
 : best to avoid screenshotting code, as its not very legible when images are scaled - best use markdown code blocks like so &lt;denchmark-link:https://help.github.com/en/github/writing-on-github/creating-and-highlighting-code-blocks&gt;https://help.github.com/en/github/writing-on-github/creating-and-highlighting-code-blocks&lt;/denchmark-link&gt;

		</comment>
		<comment id='3' author='AlexanderJuestel' date='2020-04-24T11:26:34Z'>
		@pytzcarraldo thanks for the hint with the screenshots, I changed the comment now. I do like the Syntax highlighting with Ruby ;)
I agree with you with respect to fine tuning of the plot. Implementing everything possible would be a little too much.
		</comment>
		<comment id='4' author='AlexanderJuestel' date='2020-04-27T05:23:24Z'>
		&lt;denchmark-link:https://github.com/AlexanderJuestel&gt;@AlexanderJuestel&lt;/denchmark-link&gt;
 when you defining the surfaces as faults, did you have set  ? The last part should avoid changing the colour in 3D plot.
		</comment>
		<comment id='5' author='AlexanderJuestel' date='2020-04-27T05:43:06Z'>
		Yep, since I define custom colors for my faults, turned it off (I add them one by one in case I have to deactivate some for testing purposes).
modelA2.set_is_fault(['FeldbissFault'],         change_color =False)
modelA2.set_is_fault(['EasternGrabenJump'],     change_color =False)
modelA2.set_is_fault(['StolbergGrabenFault'],   change_color =False)
modelA2.set_is_fault(['WesternMainJump'],       change_color =False)
modelA2.set_is_fault(['SandgewandFault'],       change_color =False)
modelA2.set_is_fault(['WeisweilerJump'],        change_color =False)
modelA2.set_is_fault(['OmerbachFault'],         change_color =False)
modelA2.set_is_fault(['BettendorfJump'],        change_color =False)
modelA2.set_is_fault(['WeisweilerJumpTrench'],  change_color =False)
modelA2.set_is_fault(['MerodeFault'],           change_color =False)
modelA2.set_is_fault(['EilendorfThrust'],       change_color =False)
modelA2.set_is_fault(['BurtscheidThrust'],      change_color =False)
modelA2.set_is_fault(['VennThrust'],            change_color =False)
		</comment>
		<comment id='6' author='AlexanderJuestel' date='2020-04-27T06:22:15Z'>
		Yes, the problem happens when the faults are not on the top of the pile. We were using quite dumb code. In my branch it should work already (do not try yet because I am changing a lot).
closed by &lt;denchmark-link:https://github.com/cgre-aachen/gempy/pull/396&gt;#396&lt;/denchmark-link&gt;

		</comment>
		<comment id='7' author='AlexanderJuestel' date='2020-05-20T07:35:43Z'>
		can you check this one with the new update
		</comment>
		<comment id='8' author='AlexanderJuestel' date='2020-06-18T06:11:29Z'>
		Will be checked with other projects soonish and then closed :)
		</comment>
		<comment id='9' author='AlexanderJuestel' date='2020-07-14T09:05:11Z'>
		
Will be checked with other projects soonish and then closed :)

&lt;denchmark-link:https://github.com/AlexanderJuestel&gt;@AlexanderJuestel&lt;/denchmark-link&gt;
 did you check this yet?
		</comment>
		<comment id='10' author='AlexanderJuestel' date='2020-07-14T09:14:01Z'>
		&lt;denchmark-link:https://github.com/alexanderzimmerman&gt;@alexanderzimmerman&lt;/denchmark-link&gt;
, I am still working with GemPy 2.1.1 but I will ask someone who is already building models in 2.2.1
		</comment>
		<comment id='11' author='AlexanderJuestel' date='2020-07-15T13:24:00Z'>
		&lt;denchmark-link:https://github.com/alexanderzimmerman&gt;@alexanderzimmerman&lt;/denchmark-link&gt;
, I checked with someone else and the colors a correct now. Issue closed
		</comment>
		<comment id='12' author='AlexanderJuestel' date='2020-07-15T13:34:48Z'>
		
@alexanderzimmerman, I checked with someone else and the colors a correct now. Issue closed

Thanks!
		</comment>
	</comments>
</bug>