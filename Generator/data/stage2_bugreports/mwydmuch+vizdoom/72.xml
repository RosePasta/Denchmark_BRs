<bug id='72' author='cjdarken' open_date='2016-05-26T16:08:30Z' closed_time='2016-12-06T09:52:20Z'>
	<summary>sporadic incorrect depth data</summary>
	<description>
Zip archive:
&lt;denchmark-link:https://github.com/Marqt/ViZDoom/files/284792/depthbug.zip&gt;depthbug.zip&lt;/denchmark-link&gt;

These files document a sporadic depth buffer value problem that I have encountered running ViZDoom with Python bindings on a Windows 10 machine with an Intel HD 6000 graphics card. The symptom is that only two unique values appear in the depth image, one for the HUD bar at the bottom of the image, and one other value for the rest of the image. Two images are provided showing how the application renders good and bad depth buffer data.
Replication Instructions

Clone ViZDoom from github
Unpack the distributed Windows binaries (version 1.0.2) on top
Add freedoom2.wad to the scenarios directory
Unpack depthbug.zip to the examples directory
Copy vizdoom.pyd to the examples directory (or otherwise make sure Python can find it)
From the depthbug directory, execute "python depthbug.py"
You will need to run the application multiple times to see the problem. Note the histogram of depth buffer values that is printed to the console. This is the easiest path to verifying the bug (rather than verifying all the manipulations required to render the depth buffer to the screen).

	</description>
	<comments>
		<comment id='1' author='cjdarken' date='2016-05-27T15:32:35Z'>
		Without running your code I have experienced something similar.
In my case the output was either always correct or always incorrect.
Thus I have just repeatedly set up the game until I got the correct output on a test frame.
V dirty workaround...
		</comment>
		<comment id='2' author='cjdarken' date='2016-05-27T15:45:46Z'>
		When you say that you repeatedly set up the game, do you mean within a single run? If that can be made to work, I might give it a try. I have been just killing and restarting the app, hoping for a good run, but that is getting a bit old. And of course, that approach doesn't work for a competition.
		</comment>
		<comment id='3' author='cjdarken' date='2016-05-27T17:38:59Z'>
		The depth buffer is disallowed for the competition. Sorry if that was not
clear enough.
On May 27, 2016 5:45 PM, "cjdarken" &lt;denchmark-link:mailto:notifications@github.com&gt;notifications@github.com&lt;/denchmark-link&gt;
 wrote:

When you say that you repeatedly set up the game, do you mean within a
single run? If that can be made to work, I might give it a try. I have been
just killing and restarting the app, hoping for a good run, but that is
getting a bit old. And of course, that approach doesn't work for a
competition.
—
You are receiving this because you are subscribed to this thread.
Reply to this email directly, view it on GitHub
#72 (comment), or mute
the thread
https://github.com/notifications/unsubscribe/AEuSHVS4rp9k3xm8Cup-aeS58NAKbnEoks5qFxGrgaJpZM4Ins_v
.

		</comment>
		<comment id='4' author='cjdarken' date='2016-05-27T18:22:25Z'>
		Thanks for clarifying this point. That certainly makes sense though, given the goals of the competition.
		</comment>
		<comment id='5' author='cjdarken' date='2016-05-27T21:07:30Z'>
		I just checked and the hack didn't work anymore.
Used to check if the frame was just one color via numpy.std(self._cur_frame) == 0...
I understand that the depth buffer is not allowed during the competition;
what about the training phase?
Going down that road: simultaneous depth and image buffer readout without running
two instances on the same seed would be amazing!
		</comment>
		<comment id='6' author='cjdarken' date='2016-05-27T21:24:21Z'>
		During the training you can use  the depth buffer (even if we wanted to prohibit this we wouldn't have any way to enforce it).
You can use the proper image with ZBuffer, just use ScreenFormats: CRCGCBDB (4 channels of 8-bit values in RGB + depth buffer order) or CBCGCRDB ( 4 channels of 8-bit values in BGR + depth buffer order).
		</comment>
		<comment id='7' author='cjdarken' date='2016-05-27T22:05:06Z'>
		Thanks for the info! I'll give CRCGCBDB a try...
		</comment>
		<comment id='8' author='cjdarken' date='2016-05-28T04:44:52Z'>
		No restrictions on training.
On May 27, 2016 23:07, "oOo0oOo" &lt;denchmark-link:mailto:notifications@github.com&gt;notifications@github.com&lt;/denchmark-link&gt;
 wrote:

I just checked and the hack didn't work anymore.
Used to check if the frame was just one color via
numpy.std(self._cur_frame) == 0...
I understand that the depth buffer is not allowed during the competition;
what about the training phase?
Going down that road: simultaneous depth and image buffer readout without
running
two instances on the same seed would be amazing!
—
You are receiving this because you commented.
Reply to this email directly, view it on GitHub
#72 (comment), or mute
the thread
https://github.com/notifications/unsubscribe/AEuSHdUxWA4yxKzV8cJ9xpF8d9n1aX1Dks5qF10UgaJpZM4Ins_v
.

		</comment>
		<comment id='9' author='cjdarken' date='2016-05-31T09:36:44Z'>
		I cannot reproduce this problem either on Linux nor on OSX. I have no Windows to check but maybe it is Windows-related.
		</comment>
		<comment id='10' author='cjdarken' date='2016-05-31T22:09:08Z'>
		I've just tested all formats containing depth buffer (50 times each) on Windows 7 and it works totally fine for me (I used modified format.py example for this). Graphic card and drivers should be irrelevant, couse all rendering is made on cpu (on linux ViZDoom can even run without graphic card and xserver).
So it's strange...
Are you both using Windows 10?
		</comment>
		<comment id='11' author='cjdarken' date='2016-07-18T13:10:37Z'>
		I have had time to look at this again and keep running into the same issues.
Running a vizdoom version from around 2 weeks ago on Ubuntu 14.04..
It shows some really strange behaviour when using the CRCGCBDB screen format. Seemingly random but I have found some correlations..

The first three channels (normal image data) are always correct.
The depth data is either correct during the whole episode or only returns
a matrix of all equal values. (Usually either 1 or some large value).
I use this property to create (and close) new instances of DoomGame until I hit one that works.
The behaviour seems to be dependent on the scenario:
"basic" always (?) works, "health_gathering" and "cig" much less often, but if you keep trying they             eventually work.
set_window_visible(False) seems to improve the probability of correct depth buffer access.
This one I'm not too sure about but deleting vizdoom.ini &amp; _vizdoom.ini might also help...

If needed I can write a minimal example later on..
		</comment>
		<comment id='12' author='cjdarken' date='2016-12-06T09:52:20Z'>
		I cannot reproduce this bug anymore (tested on Linux and Windows) - closing.
		</comment>
	</comments>
</bug>