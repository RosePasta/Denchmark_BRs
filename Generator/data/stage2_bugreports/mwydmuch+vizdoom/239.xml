<bug id='239' author='AnEgg' open_date='2017-08-20T02:47:33Z' closed_time='2017-10-12T09:32:07Z'>
	<summary>Memory Leak</summary>
	<description>
python` version 3.5, running in jupyter notebook, ubuntu 16.04.2
&lt;denchmark-code&gt;from vizdoom import *
import tracemalloc 
import random

tracemalloc.start()

env = DoomGame()
env.load_config("scenarios/deathmatch.cfg")
env.set_window_visible(False)
env.set_screen_resolution(ScreenResolution.RES_160X120)
env.set_screen_format(ScreenFormat.RGB24)
env.set_render_hud(False)
env.set_render_crosshair(False)
env.set_render_weapon(False)
env.set_render_decals(False)
env.set_render_particles(False)
env.set_episode_start_time(10)
env.init()


games_played = 0
episodes = 10000

for i in range(episodes):
    while not env.is_episode_finished():
        action = [random.choice([True, False]) for i in range (17)]
        reward = env.make_action(action)
        state = env.get_state()
    env.new_episode()
    games_played += 1

    if games_played % 100 ==0:
        print(games_played)
        snapshot = tracemalloc.take_snapshot()
        top_stats = snapshot.statistics('lineno')

        print("[ Top 10 ]")
        for stat in top_stats[:10]:
            print(stat)
    
&lt;/denchmark-code&gt;

no memory leak without the state = env.get_state() line
	</description>
	<comments>
		<comment id='1' author='AnEgg' date='2017-08-21T11:02:18Z'>
		Seems related to &lt;denchmark-link:https://github.com/mwydmuch/ViZDoom/issues/173&gt;#173&lt;/denchmark-link&gt;
. Which version of VizDoom are you running?
@ebonyclock
&lt;denchmark-link:https://github.com/mwydmuch/ViZDoom/issues/173&gt;#173&lt;/denchmark-link&gt;
 fix is included in 1.1.2, correct? I too still leak memory but slower than when I originally reported &lt;denchmark-link:https://github.com/mwydmuch/ViZDoom/issues/173&gt;#173&lt;/denchmark-link&gt;
. Ubuntu 16.04 + Python 3.5 + VizDoom 1.1.2.
If anybody is running into trouble because of this, you can try closing VizDoom and rebooting the whole Python process (need to use multiprocessing). However this is not guaranteed to work, e.g. this works on one of my two training machines.
		</comment>
		<comment id='2' author='AnEgg' date='2017-09-07T20:03:13Z'>
		Sorry for the late reply
Updated to most recent version. However, now on the env.init() line, it's giving me ViZDoomUnexpectedExitException
		</comment>
		<comment id='3' author='AnEgg' date='2017-09-10T20:30:26Z'>
		just an update, now have the latest version working with no memory leak
		</comment>
		<comment id='4' author='AnEgg' date='2017-09-26T08:13:32Z'>
		&lt;denchmark-link:https://github.com/AnEgg&gt;@AnEgg&lt;/denchmark-link&gt;
 So we might safely assume that it's the memory leak we previously had that is already corrected?
		</comment>
	</comments>
</bug>