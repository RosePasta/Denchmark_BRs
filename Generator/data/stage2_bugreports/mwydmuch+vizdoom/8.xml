<bug id='8' author='mihahauke' open_date='2015-12-09T22:50:31Z' closed_time='2015-12-16T17:17:52Z'>
	<summary>Python wrapper causes segfault in strange circumstances</summary>
	<description>
this code causes a segfault in get_state() in about 50% cases:
game=vizia.DoomGame()
...
def do_nothing(self, dummy_arg):
pass
do_nothing(game.get_state())
but this is ok:
state = game.get_state()
	</description>
	<comments>
		<comment id='1' author='mihahauke' date='2015-12-12T12:13:01Z'>
		The circumstances described above aren't actually accurate but it seems that I found how to get rid of the segfault.
It seems that the following invocations should be in the BOOST_MODULE and the class being wrapped (I guess it's only necessary when their built from separate soruces?):
import_array();
boost::python::numeric::array::set_module_and_type("numpy", "ndarray");
		</comment>
		<comment id='2' author='mihahauke' date='2015-12-12T12:26:59Z'>
		aaaaaand I was wrong . . . pure coincidence that I succeeded in running it 20 times without segfault
		</comment>
		<comment id='3' author='mihahauke' date='2015-12-16T17:17:52Z'>
		It's gone. Most likely it was caused by mixed x and y axes order in the wrapper.
		</comment>
	</comments>
</bug>