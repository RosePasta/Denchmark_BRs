<bug id='69' author='ppwwyyxx' open_date='2016-05-23T17:52:08Z' closed_time='2016-05-28T19:38:39Z'>
	<summary>Cannot run in multiple processes</summary>
	<description>
The following code:
import vizdoom as vz
import time, random
import multiprocessing as mp

class TestPlayer():
    def __init__(self):
        self.game = vz.DoomGame()
        self.game.load_config('../config/basic.cfg')
        self.game.set_screen_resolution(vz.ScreenResolution.RES_320X240)
        self.game.set_screen_format(vz.ScreenFormat.CRCGCBDB)
        self.game.set_window_visible(True)
        self.game.init()

    def action(self):
        a = random.choice(range(3))
        act = [False, False, False]
        act[a] = True
        for _ in range(4): self.game.make_action(act)
        if self.game.is_episode_finished():
            self.game.new_episode()

def play():
    a = TestPlayer()
    while True:
        a.action()
        time.sleep(0.01)

# process 1
#x = mp.Process(target=play)
#x.start()

# process 2
play()
can run well.
But if I uncomment the two lines to start another process running the same thing, two windows poped up, but only one of them was running. The returned reward is also incorrect while I'm testing my model: so it's not just the GUI is freezing, it is really not running.
However, using thread instead of process will work.
If the vizdoom module itself is not fork-safe then it will be harder for us to run massive simulation in parallel.
	</description>
	<comments>
		<comment id='1' author='ppwwyyxx' date='2016-05-23T18:22:23Z'>
		Indeed. I confirm that on OSX. As a not elegant workaround put time.sleep(2) before the second play().
		</comment>
		<comment id='2' author='ppwwyyxx' date='2016-05-23T21:02:16Z'>
		The same on Linux. We'll have to check it.
		</comment>
		<comment id='3' author='ppwwyyxx' date='2016-05-28T19:38:39Z'>
		That was caused by srand(time(NULL)) and rand() being used to generate "unique" shared memory id for every instance (so that's why threads worked, processes didn't and sleep was workaround).
srand(time(NULL)) and rand() has been replaced with a better "multiply instances-safe" solution - so this issue is fixed.
&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

Of course separate DoomGame instances can be safely used in separate threads/processes - like in your code &lt;denchmark-link:https://github.com/ppwwyyxx&gt;@ppwwyyxx&lt;/denchmark-link&gt;
.
To use one instance of DoomGame between threads, some kind of locks before set_action, advance/make_action, new_episode will be needed (however, I recommend to control one DoomGame instance by one thread).
Sorry for the late reaction and thank you &lt;denchmark-link:https://github.com/ppwwyyxx&gt;@ppwwyyxx&lt;/denchmark-link&gt;
.
		</comment>
	</comments>
</bug>