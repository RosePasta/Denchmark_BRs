<bug id='691' author='jdvmi00' open_date='2019-11-20T20:36:32Z' closed_time='2019-11-21T07:26:32Z'>
	<summary>java.io.UTFDataFormatException: encoded string too long: 66948 bytes</summary>
	<description>
When creating a custom pipeline similar to the following, the tokenizer throws an error.
&lt;denchmark-code&gt;document_assembler = DocumentAssembler() \
    .setInputCol("NoteText") \
    .setOutputCol("document")
sentence_detector = SentenceDetector() \
    .setInputCols(["document"]) \
    .setOutputCol("sentence")
tokenizer = Tokenizer() \
    .setInputCols(["sentence"]) \
    .setOutputCol("token") \
    .addInfixPattern("(%\\d+)")
finisher = Finisher() \
    .setInputCols(["token"]) \
    .setOutputCols(["token_view"]) \
    .setCleanAnnotations(True) \

pipeline = Pipeline(
    stages = [
    document_assembler,
    sentence_detector,
    tokenizer,
    finisher
  ])

model = pipeline.fit(df)
output = model.transform(df)

output.show() throws the following error:
&lt;/denchmark-code&gt;

&lt;denchmark-code&gt;Py4JJavaError                             Traceback (most recent call last)
&lt;command-3682006980900352&gt; in &lt;module&gt;
----&gt; 1 output.show()

/databricks/spark/python/pyspark/sql/dataframe.py in show(self, n, truncate, vertical)
    379         """
    380         if isinstance(truncate, bool) and truncate:
--&gt; 381             print(self._jdf.showString(n, 20, vertical))
    382         else:
    383             print(self._jdf.showString(n, int(truncate), vertical))

/databricks/spark/python/lib/py4j-0.10.7-src.zip/py4j/java_gateway.py in __call__(self, *args)
   1255         answer = self.gateway_client.send_command(command)
   1256         return_value = get_return_value(
-&gt; 1257             answer, self.gateway_client, self.target_id, self.name)
   1258 
   1259         for temp_arg in temp_args:

/databricks/spark/python/pyspark/sql/utils.py in deco(*a, **kw)
     61     def deco(*a, **kw):
     62         try:
---&gt; 63             return f(*a, **kw)
     64         except py4j.protocol.Py4JJavaError as e:
     65             s = e.java_exception.toString()

/databricks/spark/python/lib/py4j-0.10.7-src.zip/py4j/protocol.py in get_return_value(answer, gateway_client, target_id, name)
    326                 raise Py4JJavaError(
    327                     "An error occurred while calling {0}{1}{2}.\n".
--&gt; 328                     format(target_id, ".", name), value)
    329             else:
    330                 raise Py4JError(

Py4JJavaError: An error occurred while calling o1651.showString.
: org.apache.spark.SparkException: Task not serializable
	at org.apache.spark.util.ClosureCleaner$.ensureSerializable(ClosureCleaner.scala:403)
	at org.apache.spark.util.ClosureCleaner$.org$apache$spark$util$ClosureCleaner$$clean(ClosureCleaner.scala:393)
	at org.apache.spark.util.ClosureCleaner$.clean(ClosureCleaner.scala:162)
	at org.apache.spark.SparkContext.clean(SparkContext.scala:2548)
	at org.apache.spark.rdd.RDD$$anonfun$mapPartitionsWithIndex$1.apply(RDD.scala:857)
	at org.apache.spark.rdd.RDD$$anonfun$mapPartitionsWithIndex$1.apply(RDD.scala:856)
	at org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:151)
	at org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:112)
	at org.apache.spark.rdd.RDD.withScope(RDD.scala:370)
	at org.apache.spark.rdd.RDD.mapPartitionsWithIndex(RDD.scala:856)
	at org.apache.spark.sql.execution.WholeStageCodegenExec.doExecute(WholeStageCodegenExec.scala:634)
	at org.apache.spark.sql.execution.SparkPlan$$anonfun$execute$1.apply(SparkPlan.scala:146)
	at org.apache.spark.sql.execution.SparkPlan$$anonfun$execute$1.apply(SparkPlan.scala:134)
	at org.apache.spark.sql.execution.SparkPlan$$anonfun$executeQuery$5.apply(SparkPlan.scala:187)
	at org.apache.spark.rdd.RDDOperationScope$.withScope(RDDOperationScope.scala:151)
	at org.apache.spark.sql.execution.SparkPlan.executeQuery(SparkPlan.scala:183)
	at org.apache.spark.sql.execution.SparkPlan.execute(SparkPlan.scala:134)
	at org.apache.spark.sql.execution.collect.Collector$.collect(Collector.scala:77)
	at org.apache.spark.sql.execution.collect.Collector$.collect(Collector.scala:86)
	at org.apache.spark.sql.execution.ResultCacheManager.getOrComputeResult(ResultCacheManager.scala:508)
	at org.apache.spark.sql.execution.CollectLimitExec.executeCollectResult(limit.scala:55)
	at org.apache.spark.sql.Dataset.org$apache$spark$sql$Dataset$$collectResult(Dataset.scala:2889)
	at org.apache.spark.sql.Dataset.org$apache$spark$sql$Dataset$$collectFromPlan(Dataset.scala:3501)
	at org.apache.spark.sql.Dataset$$anonfun$head$1.apply(Dataset.scala:2618)
	at org.apache.spark.sql.Dataset$$anonfun$head$1.apply(Dataset.scala:2618)
	at org.apache.spark.sql.Dataset$$anonfun$54.apply(Dataset.scala:3485)
	at org.apache.spark.sql.Dataset$$anonfun$54.apply(Dataset.scala:3480)
	at org.apache.spark.sql.execution.SQLExecution$$anonfun$withCustomExecutionEnv$1.apply(SQLExecution.scala:111)
	at org.apache.spark.sql.execution.SQLExecution$.withSQLConfPropagated(SQLExecution.scala:240)
	at org.apache.spark.sql.execution.SQLExecution$.withCustomExecutionEnv(SQLExecution.scala:97)
	at org.apache.spark.sql.execution.SQLExecution$.withNewExecutionId(SQLExecution.scala:170)
	at org.apache.spark.sql.Dataset.org$apache$spark$sql$Dataset$$withAction(Dataset.scala:3480)
	at org.apache.spark.sql.Dataset.head(Dataset.scala:2618)
	at org.apache.spark.sql.Dataset.take(Dataset.scala:2832)
	at org.apache.spark.sql.Dataset.getRows(Dataset.scala:265)
	at org.apache.spark.sql.Dataset.showString(Dataset.scala:302)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at py4j.reflection.MethodInvoker.invoke(MethodInvoker.java:244)
	at py4j.reflection.ReflectionEngine.invoke(ReflectionEngine.java:380)
	at py4j.Gateway.invoke(Gateway.java:295)
	at py4j.commands.AbstractCommand.invokeMethod(AbstractCommand.java:132)
	at py4j.commands.CallCommand.execute(CallCommand.java:79)
	at py4j.GatewayConnection.run(GatewayConnection.java:251)
	at java.lang.Thread.run(Thread.java:748)
Caused by: java.io.UTFDataFormatException: encoded string too long: 66948 bytes
	at java.io.DataOutputStream.writeUTF(DataOutputStream.java:364)
	at java.io.DataOutputStream.writeUTF(DataOutputStream.java:323)
	at com.typesafe.config.impl.SerializedConfigValue.writeValueData(SerializedConfigValue.java:301)
	at com.typesafe.config.impl.SerializedConfigValue.writeValue(SerializedConfigValue.java:375)
	at com.typesafe.config.impl.SerializedConfigValue.writeValueData(SerializedConfigValue.java:315)
	at com.typesafe.config.impl.SerializedConfigValue.writeValue(SerializedConfigValue.java:375)
	at com.typesafe.config.impl.SerializedConfigValue.writeValueData(SerializedConfigValue.java:315)
	at com.typesafe.config.impl.SerializedConfigValue.writeValue(SerializedConfigValue.java:375)
	at com.typesafe.config.impl.SerializedConfigValue.writeValueData(SerializedConfigValue.java:315)
	at com.typesafe.config.impl.SerializedConfigValue.writeValue(SerializedConfigValue.java:375)
	at com.typesafe.config.impl.SerializedConfigValue.writeExternal(SerializedConfigValue.java:441)
	at java.io.ObjectOutputStream.writeExternalData(ObjectOutputStream.java:1459)
	at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1430)
	at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1178)
	at java.io.ObjectOutputStream.defaultWriteFields(ObjectOutputStream.java:1548)
	at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1509)
	at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1432)
	at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1178)
	at java.io.ObjectOutputStream.writeArray(ObjectOutputStream.java:1378)
	at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1174)
	at java.io.ObjectOutputStream.defaultWriteFields(ObjectOutputStream.java:1548)
	at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1509)
	at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1432)
	at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1178)
	at java.io.ObjectOutputStream.defaultWriteFields(ObjectOutputStream.java:1548)
	at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1509)
	at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1432)
	at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1178)
	at java.io.ObjectOutputStream.defaultWriteFields(ObjectOutputStream.java:1548)
	at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1509)
	at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1432)
	at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1178)
	at java.io.ObjectOutputStream.writeArray(ObjectOutputStream.java:1378)
	at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1174)
	at java.io.ObjectOutputStream.defaultWriteFields(ObjectOutputStream.java:1548)
	at java.io.ObjectOutputStream.writeSerialData(ObjectOutputStream.java:1509)
	at java.io.ObjectOutputStream.writeOrdinaryObject(ObjectOutputStream.java:1432)
	at java.io.ObjectOutputStream.writeObject0(ObjectOutputStream.java:1178)
	at java.io.ObjectOutputStream.writeObject(ObjectOutputStream.java:348)
	at org.apache.spark.serializer.JavaSerializationStream.writeObject(JavaSerializer.scala:43)
	at org.apache.spark.serializer.JavaSerializerInstance.serialize(JavaSerializer.scala:100)
	at org.apache.spark.util.ClosureCleaner$.ensureSerializable(ClosureCleaner.scala:400)
&lt;/denchmark-code&gt;

Environment:
Azure Databricks
Apache Spark 2.4.4, Scala 2.11, Python 3.7.3
	</description>
	<comments>
		<comment id='1' author='jdvmi00' date='2019-11-20T20:59:17Z'>
		You failed to mention the Databricks ML version?
		</comment>
		<comment id='2' author='jdvmi00' date='2019-11-20T22:26:53Z'>
		6.1 ML (includes Apache Spark 2.4.4, Scala 2.11)
		</comment>
		<comment id='3' author='jdvmi00' date='2019-11-20T22:41:58Z'>
		There seems to be a problem with ML 6.x as it uses cluster-mode. Could you please try ML 5.x?
		</comment>
		<comment id='4' author='jdvmi00' date='2019-11-20T23:55:57Z'>
		Running it on ML 5.x worked.  So is the a bug on all spark sessions running in cluster-mode and not client-mode?
		</comment>
		<comment id='5' author='jdvmi00' date='2019-11-21T07:26:31Z'>
		I have observed that YARN cluster-mode has this issue. But I am not sure if ML 6.x problem is related to this or something else.
I can’t find anything about ML 6.x that says they are using cluster-mode.
		</comment>
		<comment id='6' author='jdvmi00' date='2020-04-02T18:13:21Z'>
		This has been resolved in 2.4.5 release: &lt;denchmark-link:https://github.com/JohnSnowLabs/spark-nlp/releases/tag/2.4.5&gt;https://github.com/JohnSnowLabs/spark-nlp/releases/tag/2.4.5&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>