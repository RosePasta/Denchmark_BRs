<bug id='101' author='Crisliu' open_date='2018-02-07T16:04:24Z' closed_time='2018-03-06T16:33:52Z'>
	<summary>Cannot find entity match in NerCrfApproach</summary>
	<description>
&lt;denchmark-h:h2&gt;Description&lt;/denchmark-h&gt;

When using NerCrfApproach, it returns error message below. I use a simple text data to test, which includes 'Walmart is in Germanyâ€˜, but it cannot find any matching on 'Germany', even that 'Germany' is contained in the test_ner_dataset.txt
&lt;denchmark-h:h2&gt;Expected Behavior&lt;/denchmark-h&gt;

It should find some match from the simple test data.
&lt;denchmark-h:h2&gt;Current Behavior&lt;/denchmark-h&gt;

Error message: java.util.NoSuchElementException: None.get
&lt;denchmark-h:h2&gt;Possible Solution&lt;/denchmark-h&gt;

&lt;denchmark-h:h2&gt;Steps to Reproduce&lt;/denchmark-h&gt;



Create sample data:


val data = Seq(
(1, "Apple is located in California . It is a great company."),
(2, "Google is located in California . It is a great company."),
(3, "The BBC is located in London . It is a great company."),
(5, "The Walmart is located in Germany  . It is a great company.")
).toDF("id", "text")


Create pipeline for pre-transformation before fitting into NER


import com.johnsnowlabs.nlp.annotators.sbd.pragmatic.SentenceDetector
import com.johnsnowlabs.nlp.annotators.sda.vivekn.ViveknSentimentApproach
val documentAssembler = new DocumentAssembler()
.setInputCol("text")
.setOutputCol("document")
val sentenceDetector = new SentenceDetector()
.setInputCols("document")
.setOutputCol("sentence")
val regexTokenizer = new com.johnsnowlabs.nlp.annotators.Tokenizer()  // it is imported twice in the same scope by import com.johnsnowlabs.nlp.annotators._ and import org.apache.spark.ml.feature.Tokenizer
.setInputCols(Array("sentence"))
.setOutputCol("token")
val positivePhrases = "/dbfs/FileStore/tables/positivePhrases.txt"
val negativePhrases = "/dbfs/FileStore/tables/negativePhrases.txt"
val ViveknSentiment = new ViveknSentimentApproach()
.setInputCols(Array("token", "sentence"))
.setOutputCol("vivekn")
.setPositiveSourcePath(positivePhrases)
.setNegativeSourcePath(negativePhrases)
val posTagger = new PerceptronApproach()  // &lt;denchmark-link:https://github.com/JohnSnowLabs/spark-nlp/issues/41&gt;#41&lt;/denchmark-link&gt;

.setInputCols(Array("sentence", "token"))
.setOutputCol("pos")
val finisher = new Finisher()
.setInputCols("token")
.setCleanAnnotations(false)
val pipeline2 = new Pipeline()
.setStages(Array(
documentAssembler,
sentenceDetector,
regexTokenizer ,  // works except for pattern
ViveknSentiment,
posTagger,
finisher
))
var result2 = pipeline2
.fit(data.select("id","text"))
.transform(data.select("id","text"))
3. Fit in NER, which produces error:
val res3 = new NerCrfApproach()
.setInputCols("sentence", "token", "pos")
.setDatasetPath("src/test/resources/ner-corpus/test_ner_dataset.txt")
.setOutputCol("ner")
.fit(result2)
Error meesage:  java.util.NoSuchElementException: None.get
&lt;denchmark-h:h2&gt;Context&lt;/denchmark-h&gt;

&lt;denchmark-h:h2&gt;Your Environment&lt;/denchmark-h&gt;


Version used:
Browser Name and version:
Operating System and version (desktop or mobile):
Link to your project:

	</description>
	<comments>
		<comment id='1' author='Crisliu' date='2018-02-13T14:17:59Z'>
		&lt;denchmark-link:https://github.com/Crisliu&gt;@Crisliu&lt;/denchmark-link&gt;
 May I ask you to attach full exception (with stack)?
		</comment>
		<comment id='2' author='Crisliu' date='2018-02-23T20:30:19Z'>
		I think I could reproduce it, this happens directly in our examples jupyter notebooks. I'll take a look
&lt;denchmark-code&gt;
Py4JJavaError: An error occurred while calling o56.fit.
: java.util.NoSuchElementException: None.get
	at scala.None$.get(Option.scala:347)
	at scala.None$.get(Option.scala:345)
	at com.johnsnowlabs.nlp.embeddings.ApproachWithWordEmbeddings.embeddings(ApproachWithWordEmbeddings.scala:75)
	at com.johnsnowlabs.nlp.annotators.ner.crf.NerCrfApproach.train(NerCrfApproach.scala:144)
	at com.johnsnowlabs.nlp.annotators.ner.crf.NerCrfApproach.train(NerCrfApproach.scala:25)
	at com.johnsnowlabs.nlp.AnnotatorApproach.fit(AnnotatorApproach.scala:33)
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at py4j.reflection.MethodInvoker.invoke(MethodInvoker.java:244)
	at py4j.reflection.ReflectionEngine.invoke(ReflectionEngine.java:357)
	at py4j.Gateway.invoke(Gateway.java:280)
	at py4j.commands.AbstractCommand.invokeMethod(AbstractCommand.java:132)
	at py4j.commands.CallCommand.execute(CallCommand.java:79)
	at py4j.GatewayConnection.run(GatewayConnection.java:214)
	at java.lang.Thread.run(Thread.java:748)
&lt;/denchmark-code&gt;

		</comment>
		<comment id='3' author='Crisliu' date='2018-02-23T21:30:48Z'>
		&lt;denchmark-link:https://github.com/aleksei-ai&gt;@aleksei-ai&lt;/denchmark-link&gt;
 this seems to happen because function embeddings() is being called even when sourceEmbeddingsPath has not been set. I'll need your help here, since this is being used by the external features.
This should be fixed by 1.4.1.
&lt;denchmark-link:https://github.com/JohnSnowLabs/spark-nlp/pull/117&gt;#117&lt;/denchmark-link&gt;

Thanks &lt;denchmark-link:https://github.com/Crisliu&gt;@Crisliu&lt;/denchmark-link&gt;
 for reporting it.
		</comment>
		<comment id='4' author='Crisliu' date='2018-02-24T11:49:36Z'>
		The bug is fixed. Thank you @saifjsl !
		</comment>
	</comments>
</bug>