<bug id='386' author='nshervt' open_date='2019-05-25T20:34:40Z' closed_time='2020-01-23T19:35:57Z'>
	<summary>Inverse fft in 2D backend</summary>
	<description>
EDIT by EO:

 Using the appropriate normalization for the ifft (ie both backend files)
 Adding a unit test in 2d/test for testing the fft, which is not currently tested
 Normalizing the wavelet in the Fourier domain (ie the file filter_bank.py) to avoid the new code to break and satisfy the previous unit tests
NOTE: this might lead to a small(not to say tiny) speed-up, because the dot-wise multiplication usually use quite some resources!

In 2D backend code, in
           output = torch.ifft(input, 2, normalized=False)*input.size(-2)*input.size(-3)
why is the inverse fft routine multiplied by the term *input.size(-2)*input.size(-3)? I was expecting that transforming a matrix back and forth to the Fourier domain give the same result. In other words, I was expecting outputs of the following test code match.
&lt;denchmark-code&gt;import torch
from kymatio.scattering2d import backend as bd2

pad = bd2.Pad(2 ** 0, pre_pad=False)

# -- parameters
M = 8
N = 8
L = 8
J = 4

# -- synthesise data
y = torch.rand(1, 1, M, N)
for i in range(M):
    for j in range(N):
        y[:,:,i,j] = i+j

y_pad = pad(y)                                    # pad to add complex dimension
y_fft = bd2.fft(y_pad, 'C2C')                     # fft
y_fft_inv = bd2.fft(y_fft, 'C2C', inverse=True)   # inverse fft
y_fft_inv_un = y_fft_inv[..., 1:-1, 1:-1, 0]      # unpad

# -- print
print(y)
print(y_fft_inv_un)
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='nshervt' date='2019-05-29T10:41:34Z'>
		Hi,
This is a very good point. It's due to a lack of testing of the FFT, however solving it is easy! I put a checklist to fix this! Would you mind doing a PR for solving this? Thanks!
		</comment>
		<comment id='2' author='nshervt' date='2019-06-02T23:24:20Z'>
		Just some questions before proceeding:


Using the appropriate normalization for the ifft (ie both backend files)


So we want to normalize output of fft after transform and revert this before inverse transform. Essentially we normalize when we are in the Fourier domain. I was expecting something in the form of
&lt;denchmark-code&gt;if direction == 'C2R':
    input *= input.size(-2)*input.size(-3) // 2**(2*j)
    output = torch.irfft(input, 2, normalized=False, onesided=False)
elif direction == 'C2C':
    if inverse:
        input *= input.size(-2)*input.size(-3) // 2**(2*j)
        output = torch.ifft(input, 2, normalized=False)
    else:
        output = torch.fft(input, 2, normalized=False)
	output /= input.size(-2)*input.size(-3) // 2**(2*j)
&lt;/denchmark-code&gt;

would work, but since we are discarding reminder of devision by using //, would this even be reversible? Also, why don’t we simply usenormalized=True ?


Normalizing the wavelet in the Fourier domain (ie the file filter_bank.py) to avoid the new code to break and satisfy the previous unit tests


In filter_bank.py, it seems wavelets are being normalized in lines 56
psi[res] /= M*N// 2**(2*j)
and 72
filters['phi'][res] /= M*N // 2 ** (2 * J)
Also, we don’t use fft from backend_, we are only using fft2 from utils.py. Do we still need to make changes on this?
		</comment>
		<comment id='3' author='nshervt' date='2019-06-03T11:20:00Z'>
		Hi

Just some questions before proceeding:


Using the appropriate normalization for the ifft (ie both backend files)


So we want to normalize output of fft after transform and revert this before inverse transform. Essentially we normalize when we are in the Fourier domain. I was expecting something in the form of
if direction == 'C2R':
    input *= input.size(-2)*input.size(-3) // 2**(2*j)
    output = torch.irfft(input, 2, normalized=False, onesided=False)
elif direction == 'C2C':
    if inverse:
        input *= input.size(-2)*input.size(-3) // 2**(2*j)
        output = torch.ifft(input, 2, normalized=False)
    else:
        output = torch.fft(input, 2, normalized=False)
	output /= input.size(-2)*input.size(-3) // 2**(2*j)

would work, but since we are discarding reminder of devision by using //, would this even be reversible? Also, why don’t we simply usenormalized=True ?

Well, that could actually sound like a hidden bug: feel free to remove the double slash. That's not a bug because normally the signal has been padded such that 2^j divides the dimensions. normalized=True might work and would be probably the most efficient!



Normalizing the wavelet in the Fourier domain (ie the file filter_bank.py) to avoid the new code to break and satisfy the previous unit tests


In filter_bank.py, it seems wavelets are being normalized in lines 56
psi[res] /= M*N// 2**(2*j)
and 72
filters['phi'][res] /= M*N // 2 ** (2 * J)
Also, we don’t use fft from backend_, we are only using fft2 from utils.py. Do we still need to make changes on this?

Here, this is intentional. For creating the filters, we wish to use only the numpy fft. The reason is that some days, the software might become compatible with tensorflow and thus, we can't hardcode this kind of dependancy for users not willing to install torch. Numpy is however pretty standard and almost installed by default
		</comment>
		<comment id='4' author='nshervt' date='2019-06-13T21:53:09Z'>
		Hi, can you propose a PR of what you did until now? I'm gonna finish this PR. Thanks
		</comment>
		<comment id='5' author='nshervt' date='2019-06-13T21:57:59Z'>
		Hi &lt;denchmark-link:https://github.com/edouardoyallon&gt;@edouardoyallon&lt;/denchmark-link&gt;
, will do by tomorrow. My changes break test_Scattering2D in unittests, and that I had to look into.
		</comment>
		<comment id='6' author='nshervt' date='2019-06-15T00:34:00Z'>
		&lt;denchmark-link:https://github.com/kymatio/kymatio/pull/397&gt;#397&lt;/denchmark-link&gt;
 . I also did couple changes that you might not be interested, feel free to discard:

In regularized inverse 2D test, I added tqdm for better illustration of enumerating batches
I added an if statement to automatically decide whether to move to CPU or GPU (I saw you suggested somewhere to set cuda.is_available() as a boolean variable, I just noticed that I forgot that here.)

		</comment>
		<comment id='7' author='nshervt' date='2020-01-23T19:35:56Z'>
		I forgot to close it, it's done.
		</comment>
	</comments>
</bug>