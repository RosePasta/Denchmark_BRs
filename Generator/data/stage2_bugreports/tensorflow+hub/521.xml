<bug id='521' author='StefanoFioravanzo' open_date='2020-02-26T19:50:13Z' closed_time='2020-06-24T09:58:41Z'>
	<summary>Unable to save model that contains a tf hub module</summary>
	<description>
Hello, I am bumping into issues when trying to save a model that contains a TF Hub Module. Here is an examples that I would expect to work, but instead raises an exception:
import tensorflow as tf
import tensorflow_hub as hub

from tensorflow.keras.models import Model
from tensorflow.keras import Input
from tensorflow.keras.layers import LSTM, Dense, Lambda

sess = tf.compat.v1.Session()
tf.compat.v1.keras.backend.set_session(sess)
tf.compat.v1.disable_eager_execution()

# random number, not important for this example
n_tags = 17
max_len = 50
batch_size = 32

elmo_model = hub.Module("https://tfhub.dev/google/elmo/2", trainable=True)

def ElmoEmbedding(x):
    return elmo_model(inputs={"tokens": tf.squeeze(tf.cast(x, tf.string)),
                              "sequence_len": tf.constant(
                                  batch_size * [max_len])
                              },
                      signature="tokens",
                      as_dict=True)["elmo"]


input_text = Input(shape=(max_len,), dtype=tf.string)
embedding = Lambda(ElmoEmbedding, output_shape=(max_len, 1024))(input_text)
x = LSTM(units=512, return_sequences=True, recurrent_dropout=0.2,
                       dropout=0.2)(embedding)
out = Dense(n_tags, activation="softmax")(x)

model = Model(input_text, out)
model.compile(optimizer="adam", loss="sparse_categorical_crossentropy")

model.save("saved_model")
I would expect for the model to be saved under the directory saved_model, but instead the following error is raised: "tensorflow_hub/module.py", line 245, in __call__: RuntimeError: Module must be applied in the graph it was instantiated for.
So, for some reason, the condition self._graph is not tf_v1.get_default_graph() fails.
My understanding (from &lt;denchmark-link:https://www.tensorflow.org/hub/tf2_saved_model&gt;https://www.tensorflow.org/hub/tf2_saved_model&lt;/denchmark-link&gt;
) is that TF Hub models are all , so I don't understand why saving a model that encapsulates a TF Hub model does not work. I am sure I am missing something. It would be great if someone could shed some light on this, as this is super critical for what we are trying to accomplish. Thanks!
&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

Current Environment:

Python v3.6.9
tensorflow==2.1.0
tensorflow-hub==0.7.0

	</description>
	<comments>
		<comment id='1' author='StefanoFioravanzo' date='2020-02-28T13:25:41Z'>
		&lt;denchmark-link:https://github.com/StefanoFioravanzo&gt;@StefanoFioravanzo&lt;/denchmark-link&gt;
,
The model you are trying to load is not compatible with TF 2.0. You can check for version compatibility  in the change log in this &lt;denchmark-link:https://tfhub.dev/google/elmo/2&gt;TF Hub Link&lt;/denchmark-link&gt;
. Screenshot of the same is given below.
&lt;denchmark-link:https://user-images.githubusercontent.com/57165142/75551667-b779f100-5a5a-11ea-980e-44723294728d.png&gt;&lt;/denchmark-link&gt;

Could you please try loading the model in TF 1.x. I was able to load the model with TF 1.15 without any issues. Please check the gist of it &lt;denchmark-link:https://colab.sandbox.google.com/gist/amahendrakar/4cebfc0e2db583fff761a72972553622/hub_521.ipynb&gt;here&lt;/denchmark-link&gt;
. Thanks!
		</comment>
		<comment id='2' author='StefanoFioravanzo' date='2020-02-28T13:52:52Z'>
		Hello &lt;denchmark-link:https://github.com/amahendrakar&gt;@amahendrakar&lt;/denchmark-link&gt;
 , thank you for the response!
So, I tried to save the model using tf=1.15 and it works, because it defaults to using the h5 save format. But, for this reason, when loading the module in another context, I get the error NameError: name 'elmo_model' is not defined
I guess that this is expected, as the elmo_model object is not serialised in the h5 file. When I try to save the model using the tf format, then I get the usual error: Module must be applied in the graph it was instantiated for.
Is there a way to save the model in a self contained way, in order to load it in another context without having to re-define the elmo_model object?
Is the answer to the previous question is no, then:

Will the conversion of the elmo model to TF2, and thus saving it with the tf file format, solve this?
If the above is yes, is there a roadmap for converting the model to TF2?

Thank you very much
		</comment>
		<comment id='3' author='StefanoFioravanzo' date='2020-02-28T14:08:42Z'>
		Was able to reproduce the issue. Please find the Gist &lt;denchmark-link:https://colab.sandbox.google.com/gist/amahendrakar/2b7270ce469c57571069482831418ba7/hub_521_load.ipynb&gt;here&lt;/denchmark-link&gt;
. Thanks!
		</comment>
		<comment id='4' author='StefanoFioravanzo' date='2020-03-04T08:56:58Z'>
		&lt;denchmark-link:https://github.com/amahendrakar&gt;@amahendrakar&lt;/denchmark-link&gt;
 So is this a bug that can be fixed? Is there any workaround? Can you give me a bit more context as to why this error is happening and, possibly, how it can be solved? Will the support to TF2 solve the issue? Thank you very much
		</comment>
		<comment id='5' author='StefanoFioravanzo' date='2020-03-15T08:17:32Z'>
		&lt;denchmark-link:https://github.com/StefanoFioravanzo&gt;@StefanoFioravanzo&lt;/denchmark-link&gt;
, I faced no problem in saving and loading model. Link of gist is &lt;denchmark-link:https://colab.research.google.com/gist/khimraj/c2d9c1d285aea79208ec31fcc592d097/hub.ipynb&gt;here&lt;/denchmark-link&gt;

		</comment>
		<comment id='6' author='StefanoFioravanzo' date='2020-03-15T08:26:31Z'>
		&lt;denchmark-link:https://github.com/khimraj&gt;@khimraj&lt;/denchmark-link&gt;
 The issue arises when you try to load the model in a  context. For example, try to save the model in one script and then load it in another one. The load model will fail because  is not defined.
See the above message by &lt;denchmark-link:https://github.com/amahendrakar&gt;@amahendrakar&lt;/denchmark-link&gt;
, who reproduced it &lt;denchmark-link:https://colab.research.google.com/gist/amahendrakar/2b7270ce469c57571069482831418ba7/hub_521_load.ipynb&gt;here&lt;/denchmark-link&gt;
.
		</comment>
		<comment id='7' author='StefanoFioravanzo' date='2020-03-15T14:47:06Z'>
		&lt;denchmark-link:https://github.com/StefanoFioravanzo&gt;@StefanoFioravanzo&lt;/denchmark-link&gt;
,  Approach to load a model when a custom object requires additional attribute . I have successfully loaded model. For your reference link of gist is &lt;denchmark-link:https://colab.research.google.com/gist/khimraj/2bab1838d870c2a8e6e63c6b96c44c28/hub1.ipynb&gt;here&lt;/denchmark-link&gt;
.
Hope it helps.
		</comment>
		<comment id='8' author='StefanoFioravanzo' date='2020-03-15T15:54:55Z'>
		&lt;denchmark-link:https://github.com/khimraj&gt;@khimraj&lt;/denchmark-link&gt;
 So there is not way at all to save the model and load it in another context  having to redefine the  function, basically having the saved model be a self contained package that can be loaded anywhere? Is this a current limitation of Tensorflow that could be solved in the future? Or is it the elmo model's fault, given that it does not support TF2 (as stated above?)
I would love to understand why redefining this function (ElmoEmbedding) is really needed. Thank you!
		</comment>
		<comment id='9' author='StefanoFioravanzo' date='2020-03-15T16:05:44Z'>
		&lt;denchmark-link:https://github.com/StefanoFioravanzo&gt;@StefanoFioravanzo&lt;/denchmark-link&gt;
, You can say it is limitation of tensorflow. It is not specific to elmo model as it is same for all model having any custom object. Basically tensorflow saves the name of the function. So Whenever you load model, you'll need to provide a dictionary that maps function name to the actual function.
		</comment>
		<comment id='10' author='StefanoFioravanzo' date='2020-03-15T16:14:09Z'>
		&lt;denchmark-link:https://github.com/khimraj&gt;@khimraj&lt;/denchmark-link&gt;
 Interesting, thank you very much. So, do you think that this limitation is sort of "definitive" in the TF design, or is there any plan to solve this? I.e. have tensorflow save these external functions (or whatever else it might be) alongside the rest of the model?
		</comment>
		<comment id='11' author='StefanoFioravanzo' date='2020-03-30T15:48:46Z'>
		&lt;denchmark-link:https://github.com/khimraj&gt;@khimraj&lt;/denchmark-link&gt;
 Hello, do you think it is possible to get references to the custom objects of a model programmatically? Say I wanted to know that  will not be saved alongside the model and that at load time that object will have to be specified in the  field. Is there a way to introspect the model to get this information before saving?
		</comment>
		<comment id='12' author='StefanoFioravanzo' date='2020-03-30T17:15:52Z'>
		&lt;denchmark-link:https://github.com/StefanoFioravanzo&gt;@StefanoFioravanzo&lt;/denchmark-link&gt;
, I am not aware about getting references to the custom objects of a model programmatically. You have to specify all your custom object(user defined). Another approach to save model is use  and  in which you do not require to define custom object again. For your reference link of gist is &lt;denchmark-link:https://gist.github.com/khimraj/e9540d1ff0eed33ccb4f593e01af88fc&gt;here&lt;/denchmark-link&gt;
.
Hope it helps you.
		</comment>
	</comments>
</bug>