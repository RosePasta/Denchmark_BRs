<bug id='390' author='artemmavrin' open_date='2019-10-18T18:48:31Z' closed_time='2019-10-21T12:14:00Z'>
	<summary>Can't load EfficientNet using TensorFlow 2</summary>
	<description>
I am unable to load EfficientNet models using

TensorFlow: 2.0.0
TensorFlow Hub: 0.6.0

For example, I tried the code stub at the &lt;denchmark-link:https://tfhub.dev/google/efficientnet/b0/feature-vector/1&gt;efficientnet/b0/feature-vector page&lt;/denchmark-link&gt;
:
import tensorflow_hub as hub
module = hub.Module("https://tfhub.dev/google/efficientnet/b0/feature-vector/1")
Error:
&lt;denchmark-code&gt;RuntimeError: Exporting/importing meta graphs is not supported when eager execution is enabled. No graph exists when eager execution is enabled.
&lt;/denchmark-code&gt;

If I try to load the model using hub.KerasLayer instead, I get a different error.
import tensorflow_hub as hub
layer = hub.KerasLayer("https://tfhub.dev/google/efficientnet/b0/feature-vector/1")
Error:
&lt;denchmark-code&gt;ValueError: Importing a SavedModel with tf.saved_model.load requires a 'tags=' argument if there is more than one MetaGraph. Got 'tags=None', but there are 2 MetaGraphs in the SavedModel with tag sets [['train'], []]. Pass a 'tags=' argument to load this SavedModel.
&lt;/denchmark-code&gt;

&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

The  error might be fixed by modifying &lt;denchmark-link:https://github.com/tensorflow/hub/blob/master/tensorflow_hub/keras_layer.py&gt;hub/tensorflow_hub/keras_layer.py&lt;/denchmark-link&gt;
 by adding a  argument to , so that



hub/tensorflow_hub/keras_layer.py


         Line 98
      in
      9bc54d7






 def __init__(self, handle, trainable=False, arguments=None, **kwargs): 





becomes
   def __init__(self, handle, trainable=False, arguments=None, tags=None, **kwargs):
and modifying the line



hub/tensorflow_hub/keras_layer.py


         Line 109
      in
      9bc54d7






 self._func = module_v2.load(handle) 





to
      self._func = module_v2.load(handle, tags=tags)
Then I could pass, for example, tags=['train'] to load the EfficientNet model as a KerasLayer, as in
import tensorflow_hub as hub
layer = hub.KerasLayer("https://tfhub.dev/google/efficientnet/b0/feature-vector/1",
                       tags=['train'])
	</description>
	<comments>
		<comment id='1' author='artemmavrin' date='2019-10-21T05:45:43Z'>
		Could reproduce the Error with Tensorflow Version 2.0 and TF Hub version 0.6. Here is the &lt;denchmark-link:https://colab.sandbox.google.com/gist/rmothukuru/c80d9ac5bf7cbf1b70c4e3a5ac79f92e/hub_390.ipynb&gt;Github Gist&lt;/denchmark-link&gt;
. Thanks!
		</comment>
		<comment id='2' author='artemmavrin' date='2019-10-21T12:13:59Z'>
		This EfficientNet module is an old SavedModel format, that can be loaded in TF2 for example with:
&lt;denchmark-code&gt;module = hub.load("https://tfhub.dev/google/efficientnet/b0/feature-vector/1", tags=[])
&lt;/denchmark-code&gt;

This is briefly documented in &lt;denchmark-link:https://www.tensorflow.org/hub/migration_tf2#loading_old_hubmodules&gt;https://www.tensorflow.org/hub/migration_tf2#loading_old_hubmodules&lt;/denchmark-link&gt;

To load it as a KerasLayer, one could write a wrapper, or making the change you suggested. The hub team is currently working on a fix for this (probably to be released with hub v0.7).
		</comment>
		<comment id='3' author='artemmavrin' date='2019-10-21T12:20:57Z'>
		Here is an example KerasLayer wrapper for the old SavedModels, if you need it right now:
&lt;denchmark-code&gt;class Wrapper(tf.train.Checkpoint):
  def __init__(self, spec):
    super(Wrapper, self).__init__()
    self.module = hub.load(spec, tags=[])
    self.variables = self.module.variables
    self.trainable_variables = []
  def __call__(self, x):
    return self.module.signatures["default"](x)["default"]

m = hub.KerasLayer(Wrapper("https://tfhub.dev/google/efficientnet/b0/feature-vector/1"))
&lt;/denchmark-code&gt;

Note that it's only a temporal fix and will probably not be required with hub v0.7.
		</comment>
	</comments>
</bug>