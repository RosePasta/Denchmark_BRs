<bug id='287' author='arnoegw' open_date='2019-05-03T15:54:11Z' closed_time='2019-05-10T11:38:36Z'>
	<summary>hub.KerasLayer crashes Model.save() in h5 format</summary>
	<description>
I'm consolidating various issues listed below to what I believe to be their common cause.
Problem:
In TF2 alpha, adding a hub.KerasLayer crashes Model.save() in h5 format with message "Unable to create link" from h5py. Hub authors need to follow up on ironing out that workflow.
How to repro (thanks &lt;denchmark-link:https://github.com/frogermcs&gt;@frogermcs&lt;/denchmark-link&gt;
):

Open https://colab.research.google.com/github/tensorflow/hub/blob/master/examples/colab/tf2_image_retraining.ipynb
Do one of

!pip install -U --pre tensorflow-gpu for 2.0.0-alpha0
!pip install -U --pre tf-nightly-gpu-2.0-preview for 2.0.0.dev20190503


!pip install tensorflow-hub for 0.4.0
At the very end, append a code block with the single line
model.save('path_to_my_model.h5')
Go "Runtime &gt; Restart and run all"

For me (and the other reporters), that crashes with
&lt;denchmark-code&gt;/usr/local/lib/python3.6/dist-packages/h5py/_hl/group.py in __setitem__(self, name, obj)
    286             if isinstance(obj, HLObject):
--&gt; 287                 h5o.link(obj.id, self.id, name, lcpl=lcpl, lapl=self._lapl)

h5py/_objects.pyx in h5py._objects.with_phil.wrapper()
h5py/_objects.pyx in h5py._objects.with_phil.wrapper()
h5py/h5o.pyx in h5py.h5o.link()
RuntimeError: Unable to create link (name already exists)
&lt;/denchmark-code&gt;

Issues that are likely subsumed by this:
tensorflow/hub &lt;denchmark-link:https://github.com/tensorflow/hub/issues/255&gt;#255&lt;/denchmark-link&gt;

&lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/26835&gt;tensorflow/tensorflow#26835&lt;/denchmark-link&gt;

&lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/27688&gt;tensorflow/tensorflow#27688&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='arnoegw' date='2019-05-03T15:57:17Z'>
		Note workaround in
&lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/26835#issuecomment-485534826&gt;tensorflow/tensorflow#26835 (comment)&lt;/denchmark-link&gt;

		</comment>
		<comment id='2' author='arnoegw' date='2019-05-10T10:09:09Z'>
		This appears to be caused by missing explicit variable names in the image modules tfhub.dev/google/tf2-preview/*/2. I'll see if re-exporting at head (i.e., past commit &lt;denchmark-link:https://github.com/tensorflow/tensorflow/commit/e479cf6a28a8f0706328c796365c7a82a63c7b4e&gt;tensorflow/tensorflow@e479cf6&lt;/denchmark-link&gt;
) helps.
		</comment>
		<comment id='3' author='arnoegw' date='2019-05-10T11:31:04Z'>
		I've just published
&lt;denchmark-link:https://tfhub.dev/google/tf2-preview/inception_v3/feature_vector/3&gt;https://tfhub.dev/google/tf2-preview/inception_v3/feature_vector/3&lt;/denchmark-link&gt;

&lt;denchmark-link:https://tfhub.dev/google/tf2-preview/mobilenet_v2/feature_vector/3&gt;https://tfhub.dev/google/tf2-preview/mobilenet_v2/feature_vector/3&lt;/denchmark-link&gt;

and updated &lt;denchmark-link:https://colab.research.google.com/github/tensorflow/hub/blob/master/examples/colab/tf2_image_retraining.ipynb&gt;tf2_image_retraining.ipynb&lt;/denchmark-link&gt;
 with a reference to them.
For me, that fixes the workflow from the initial comment (meaning, model.save('...h5') succeeds).
		</comment>
		<comment id='4' author='arnoegw' date='2019-05-13T03:06:19Z'>
		&lt;denchmark-link:https://github.com/arnoegw&gt;@arnoegw&lt;/denchmark-link&gt;
 just ran the notebook and it is giving the following error when compiling:
`Building model with &lt;denchmark-link:https://tfhub.dev/google/tf2-preview/mobilenet_v2/feature_vector/3&gt;https://tfhub.dev/google/tf2-preview/mobilenet_v2/feature_vector/3&lt;/denchmark-link&gt;

NotEncodableErrorTraceback (most recent call last)
 in ()
2 model = tf.keras.Sequential([
3     hub.KerasLayer(MODULE_HANDLE, output_shape=[FV_SIZE],
----&gt; 4                    trainable=do_fine_tuning),
5     tf.keras.layers.Dropout(rate=0.2),
6     tf.keras.layers.Dense(train_generator.num_classes, activation='softmax',
11 frames
/usr/local/lib/python2.7/dist-packages/tensorflow_hub/keras_layer.pyc in init(self, handle, trainable, arguments, **kwargs)
96       self._func = handle
97     else:
---&gt; 98       self._func = module_v2.load(handle)
99       if not callable(self._func):
100         raise ValueError("Non-callable result from hub.load('%s')" %
/usr/local/lib/python2.7/dist-packages/tensorflow_hub/module_v2.pyc in load(handle)
78                                 "format. Loading of the module using "
79                                 "hub.load() is not supported." % handle)
---&gt; 80     return tf_v1.saved_model.load_v2(module_handle)
81   else:
82     raise NotImplementedError("hub.load() is not implemented for TF &lt; 1.14.x, "
/usr/local/lib/python2.7/dist-packages/tensorflow/python/saved_model/load.pyc in load(export_dir, tags)
322       loader = _Loader(object_graph_proto,
323                        saved_model_proto,
--&gt; 324                        export_dir)
325       root = loader.get(0)
326   else:
/usr/local/lib/python2.7/dist-packages/tensorflow/python/saved_model/load.pyc in init(self, object_graph_proto, saved_model_proto, export_dir)
55         function_deserialization.load_function_def_library(
56             meta_graph.graph_def.library))
---&gt; 57     self._load_all()
58     # TODO(b/124045874): There are limitations with functions whose captures
59     # trigger other functions to be executed. For now it is only guaranteed to
/usr/local/lib/python2.7/dist-packages/tensorflow/python/saved_model/load.pyc in _load_all(self)
130     node_setters = []
131     for proto in self._proto.nodes:
--&gt; 132       node, setter = self._recreate(proto)
133       self._nodes.append(node)
134       node_setters.append(setter)
/usr/local/lib/python2.7/dist-packages/tensorflow/python/saved_model/load.pyc in _recreate(self, proto)
193     if kind not in factory:
194       raise ValueError("Unknown SavedObject type: %r" % kind)
--&gt; 195     return factory&lt;denchmark-link:&gt;kind&lt;/denchmark-link&gt;

196
197   def _recreate_user_object(self, proto):
/usr/local/lib/python2.7/dist-packages/tensorflow/python/saved_model/load.pyc in ()
182         "user_object": lambda: self._recreate_user_object(proto.user_object),
183         "asset": lambda: self._recreate_asset(proto.asset),
--&gt; 184         "function": lambda: self._recreate_function(proto.function),
185         "bare_concrete_function": functools.partial(
186             self._recreate_bare_concrete_function,
/usr/local/lib/python2.7/dist-packages/tensorflow/python/saved_model/load.pyc in _recreate_function(self, proto)
217   def _recreate_function(self, proto):
218     return function_deserialization.recreate_function(
--&gt; 219         proto, self._concrete_functions), setattr
220
221   def _recreate_bare_concrete_function(self, proto):
/usr/local/lib/python2.7/dist-packages/tensorflow/python/saved_model/function_deserialization.pyc in recreate_function(saved_function, concrete_functions)
184   coder = nested_structure_coder.StructureCoder()
185   function_spec = _deserialize_function_spec(saved_function.function_spec,
--&gt; 186                                              coder)
187
188   def restored_function_body(*args, **kwargs):
/usr/local/lib/python2.7/dist-packages/tensorflow/python/saved_model/function_deserialization.pyc in _deserialize_function_spec(function_spec_proto, coder)
118       annotations=typeless_fullargspec.annotations)
119   is_method = function_spec_proto.is_method
--&gt; 120   args_to_prepend = coder.decode_proto(function_spec_proto.args_to_prepend)
121   kwargs_to_include = coder.decode_proto(function_spec_proto.kwargs_to_include)
122   input_signature = coder.decode_proto(function_spec_proto.input_signature)
/usr/local/lib/python2.7/dist-packages/tensorflow/python/saved_model/nested_structure_coder.pyc in decode_proto(self, proto)
112       NotEncodableError: For values for which there are no encoders.
113     """
--&gt; 114     return self._map_structure(proto, self._get_decoders())
115
116
/usr/local/lib/python2.7/dist-packages/tensorflow/python/saved_model/nested_structure_coder.pyc in _map_structure(self, pyobj, coders)
69         return do(pyobj, recursion_fn)
70     raise NotEncodableError(
---&gt; 71         "No encoder for object [%s] of type [%s]." % (str(pyobj), type(pyobj)))
72
73   def encode_structure(self, nested_structure):
NotEncodableError: No encoder for object [] of type [&lt;class 'tensorflow.core.protobuf.struct_pb2.StructuredValue'&gt;].`
		</comment>
		<comment id='5' author='arnoegw' date='2019-05-13T08:39:34Z'>
		Let's continue in the separate issue &lt;denchmark-link:https://github.com/tensorflow/hub/issues/297&gt;#297&lt;/denchmark-link&gt;
 that you filed.
		</comment>
	</comments>
</bug>