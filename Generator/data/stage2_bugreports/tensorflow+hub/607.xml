<bug id='607' author='evyasonov' open_date='2020-06-08T18:59:40Z' closed_time='2020-08-12T18:22:16Z'>
	<summary>Can't chain an input layer to tensorflow-hub</summary>
	<description>
I want to classify text to 2 classes by using this embedding: &lt;denchmark-link:https://tfhub.dev/google/universal-sentence-encoder-multilingual/3&gt;https://tfhub.dev/google/universal-sentence-encoder-multilingual/3&lt;/denchmark-link&gt;

And I also want to add additional features after the embedding. So I have two inputs:
&lt;denchmark-code&gt;import tensorflow          as tf
import tensorflow_hub      as tfh
import tensorflow_datasets as tfds
import tensorflow_text     as tft


hp = {
    'embedding':     'https://tfhub.dev/google/universal-sentence-encoder-multilingual/3' EMBEDDINGS['senm'],
    'units':         64, 
    'learning_rate': 1e-3,
    'dropout':       0.2,
    'layers':        2
}

textInput     = tf.keras.Input(shape=(1, ),  name = 'text', dtype = tf.string)
featuresInput = tf.keras.Input(shape=(36, ), name = 'features')

x = tfh.KerasLayer(hp.get('embedding'), dtype = tf.string, trainable = False)(textInput)
x = tf.keras.layers.concatenate([x, featuresInput])

for index in range(hp.get('layers')):
    x = tf.keras.layers.Dense(hp.get('units'), activation = 'relu')(x)
    x = tf.keras.layers.Dropout(hp.get('dropout'))(x)

output = tf.keras.layers.Dense(
    1,
    activation       = 'sigmoid',
    bias_initializer = tf.keras.initializers.Constant(INITIAL_BIAS) if INITIAL_BIAS else None
)(x)

model = tf.keras.Model(inputs = [textInput, featuresInput], outputs = output)
model.compile(
    optimizer = tf.keras.optimizers.Adam(lr = hp.get('learning_rate')),
    loss      = tf.keras.losses.BinaryCrossentropy(),
    metrics   = METRICS,
)
&lt;/denchmark-code&gt;

And the code fails with error:
&lt;denchmark-code&gt;---------------------------------------------------------------------------
AssertionError                            Traceback (most recent call last)
&lt;ipython-input-17-61aed6f885c9&gt; in &lt;module&gt;
     10 featuresInput = tf.keras.Input(shape=(36, ), name = 'features')
     11 
---&gt; 12 x = tfh.KerasLayer(hp.get('embedding'), dtype = tf.string, trainable = False)(textInput)
     13 x = tf.keras.layers.concatenate([x, featuresInput])
     14 

~/.virtualenvs/python3/lib/python3.6/site-packages/tensorflow/python/keras/engine/base_layer.py in __call__(self, *args, **kwargs)
    920                     not base_layer_utils.is_in_eager_or_tf_function()):
    921                   with auto_control_deps.AutomaticControlDependencies() as acd:
--&gt; 922                     outputs = call_fn(cast_inputs, *args, **kwargs)
    923                     # Wrap Tensors in `outputs` in `tf.identity` to avoid
    924                     # circular dependencies.

~/.virtualenvs/python3/lib/python3.6/site-packages/tensorflow/python/autograph/impl/api.py in wrapper(*args, **kwargs)
    263       except Exception as e:  # pylint:disable=broad-except
    264         if hasattr(e, 'ag_error_metadata'):
--&gt; 265           raise e.ag_error_metadata.to_exception(e)
    266         else:
    267           raise

AssertionError: in user code:

    /home/e/.virtualenvs/python3/lib/python3.6/site-packages/tensorflow_hub/keras_layer.py:222 call  *
        result = f()
    /home/e/.virtualenvs/python3/lib/python3.6/site-packages/tensorflow/python/saved_model/load.py:486 _call_attribute  **
        return instance.__call__(*args, **kwargs)
    /home/e/.virtualenvs/python3/lib/python3.6/site-packages/tensorflow/python/eager/def_function.py:580 __call__
        result = self._call(*args, **kwds)
    /home/e/.virtualenvs/python3/lib/python3.6/site-packages/tensorflow/python/eager/def_function.py:650 _call
        return self._concrete_stateful_fn._filtered_call(canon_args, canon_kwds)  # pylint: disable=protected-access
    /home/e/.virtualenvs/python3/lib/python3.6/site-packages/tensorflow/python/eager/function.py:1665 _filtered_call
        self.captured_inputs)
    /home/e/.virtualenvs/python3/lib/python3.6/site-packages/tensorflow/python/eager/function.py:1759 _call_flat
        "StatefulPartitionedCall": self._get_gradient_function()}):
    /usr/lib/python3.6/contextlib.py:81 __enter__
        return next(self.gen)
    /home/e/.virtualenvs/python3/lib/python3.6/site-packages/tensorflow/python/framework/ops.py:4735 _override_gradient_function
        assert not self._gradient_function_map

    AssertionError: 

&lt;/denchmark-code&gt;

BUT it works if I use Sequential
&lt;denchmark-code&gt;    model = tf.keras.Sequential([
        hub.KerasLayer(embedding, input_shape=[], dtype = tf.string, trainable = True),
        tf.keras.layers.Dense(16, activation = 'relu', input_shape = (train_features.shape[-1],)),
        tf.keras.layers.Dropout(0.5),
        tf.keras.layers.Dense(1, activation = 'sigmoid', bias_initializer = output_bias),
    ])

    model.compile(optimizer = tf.keras.optimizers.Adam(lr=1e-3), loss = tf.keras.losses.BinaryCrossentropy(), metrics = metrics)
&lt;/denchmark-code&gt;

Is there anything I'm doing wrong with the functual api? Can you please help me with the error
	</description>
	<comments>
		<comment id='1' author='evyasonov' date='2020-06-17T17:08:31Z'>
		Reproduced in &lt;denchmark-link:https://colab.research.google.com/drive/10vGjOKqENsw1OqhuAUPv0nbAUA-WiVwG?usp=sharing&gt;colab&lt;/denchmark-link&gt;

		</comment>
		<comment id='2' author='evyasonov' date='2020-08-12T16:34:15Z'>
		I tried to modify one of our existing &lt;denchmark-link:https://github.com/tensorflow/hub/blob/master/examples/colab/tf2_text_classification.ipynb&gt;colabs&lt;/denchmark-link&gt;
 to use functional Keras API as oppose to sequential API, and the functional API works as expected (see colab for details in the dataset in question):
model = "&lt;denchmark-link:https://tfhub.dev/google/tf2-preview/gnews-swivel-20dim/1&gt;https://tfhub.dev/google/tf2-preview/gnews-swivel-20dim/1&lt;/denchmark-link&gt;
"
hub_layer = hub.KerasLayer(model, output_shape=[20], input_shape=[],
dtype=tf.string, trainable=True)
inputs = tf.keras.Input(shape=[], dtype=tf.string)
l = hub_layer(inputs)
l = tf.keras.layers.Dense(16, activation='relu')(l)
l = tf.keras.layers.Dense(1)(l)
model = tf.keras.Model(inputs=inputs, outputs=l, name="func_model")
model.summary()
model.compile(optimizer='adam',
loss=tf.losses.BinaryCrossentropy(from_logits=True),
metrics=[tf.metrics.BinaryAccuracy(threshold=0.0, name='accuracy')])
history = model.fit(partial_x_train,
partial_y_train,
epochs=40,
batch_size=512,
validation_data=(x_val, y_val),
verbose=1)
...
Epoch 40/40
30/30 [==============================] - 2s 61ms/step - loss: 0.0438 - accuracy: 0.9939 - val_loss: 0.3876 - val_accuracy: 0.8737
(The code above was tried with TF 2.3)
		</comment>
	</comments>
</bug>