<bug id='161' author='ertugrulsmz' open_date='2020-12-29T19:15:04Z' closed_time='2020-12-29T21:40:40Z'>
	<summary>Performance</summary>
	<description>
I have trained effdet model on my 5000 image dataset for object detection.
My initial loss was on  training 4.01, validation: 0.64
My loss at epoch 30 training 0.28 validation: 0.32 and it seems it does not make any further improvement.
I find my result disappointing when I have tested on images where I have only 2 classes such as head and helmet, I mean I got better results with FRCNN, Yolo. I don't see any error because training losses and validation losses were reasonably falling, but improvement is not enough.
Do you have any suggestions? Is it really completely pretrained ? Or do I miss something ?
I have used the configuration as :
--TRAINING---------------
`
def get_effdet():
config = get_efficientdet_config('tf_efficientdet_d5')
config.image_size = [512,512]
config.norm_kwargs=dict(eps=.001, momentum=.01)
net = EfficientDet(config, pretrained_backbone=True)
net.reset_head(num_classes=2)
net.class_net = HeadNet(config, num_outputs=config.num_classes)
return DetBenchTrain(net, config)
------INFERENCE----------------------------------------------------
from effdet.bench import DetBenchPredict
detbenchpredict = DetBenchPredict(model.model)
detbenchpredict.model.eval()
for images,targets in validation_data_loader:
images = torch.stack(images).float().to(device)
result = detbenchpredict(images)[0]
boxes = result[:,:4]
confidences = result[:,4]
labels = result[:,5]
`
	</description>
	<comments>
		<comment id='1' author='ertugrulsmz' date='2020-12-29T21:40:40Z'>
		&lt;denchmark-link:https://github.com/ertugrulsmz&gt;@ertugrulsmz&lt;/denchmark-link&gt;
 you're using a pretrained backbone, you are not using pretrained coco detection weights... you should follow the create_model usage example via train.py/validate.py as a reference.
I don't support 3rd party training scripts or datasets via issues. These models do work well but you'll have to find working hparams like any combo of model + dataset. Sharing questions / results for training on other datasets is best done via the discussions as this isn't a bug.
		</comment>
	</comments>
</bug>