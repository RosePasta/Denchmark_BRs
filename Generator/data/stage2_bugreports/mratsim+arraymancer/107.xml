<bug id='107' author='mratsim' open_date='2017-10-11T07:21:47Z' closed_time='2017-10-13T12:06:39Z'>
	<summary>OpenMP test suite crash</summary>
	<description>
The following tests crash with OpenMP (need to change parallelization const to 1)
This part of int matmul fallback
  test "Integer Matrix-Matrix Multiplication fallback":
    ## TODO: test with slices
    let a = [[1,2,3],
             [4,5,6]].toTensor()

    let b = [[7,  8],
             [9, 10],
             [11,12]].toTensor()

    let ab = [[ 58, 64],
              [139,154]].toTensor()

    check: a * b == ab
Furthermore, there is a delayed "attempt to read from nil" that seem to be trigger and happens some tests later. Maybe due to GC collecting the data?
==&gt; Todo: As OpenMP is deactivated for small matrices (&lt;1000 elements), it's probably better to just test that the common operations work on 40x40 matrices in test_openmp as the small size might be the trigger.
==&gt; Todo: a stress-test with large matrices that triggers OpenMP
	</description>
	<comments>
		<comment id='1' author='mratsim' date='2017-10-11T18:46:48Z'>
		A dedicated test suite has been added by &lt;denchmark-link:https://github.com/mratsim/Arraymancer/commit/d860cee7a2ef624e68f0bb5010a7257ff0a7db0f&gt;d860cee&lt;/denchmark-link&gt;
.
Note: OpenMP must be compiled with stacktraces off otherwise OpenMP segfaults in a popFrame.
The new test suite generates:

a segfault + core dump
Unhandled exception: Attempt to read from nil
Index out of bounds
rarely, a stack trace in gescal with Attempt to read from nil

From GDB:
&lt;denchmark-code&gt;[New LWP 23159]
[New LWP 23164]
[New LWP 23162]
[New LWP 23163]
[New LWP 23161]
[New LWP 23160]
[New LWP 23157]
[New LWP 23158]
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/usr/lib/libthread_db.so.1".
Core was generated by `./bin/test_load_openmp'.
Program terminated with signal SIGSEGV, Segmentation fault.
#0  0x00007f75f44d91cc in _IO_flush_all_lockp () from /usr/lib/libc.so.6
[Current thread is 1 (Thread 0x7f75ea297700 (LWP 23159))]
(gdb) bt
#0  0x00007f75f44d91cc in _IO_flush_all_lockp () from /usr/lib/libc.so.6
#1  0x00007f75f44d9336 in _IO_cleanup () from /usr/lib/libc.so.6
#2  0x00007f75f449442b in __run_exit_handlers () from /usr/lib/libc.so.6
#3  0x00007f75f44944da in exit () from /usr/lib/libc.so.6
#4  0x00005617b622d1e7 in signalHandler ()
#5  &lt;signal handler called&gt;
#6  0x00005617b62766bc in gescal_w7FGITPB9bUpM0qE1E4R7UQ ()
#7  0x00005617b627ade0 in gemm_macro_kernel_vwv9a8KfguRP4qtSQqvdYaQ._omp_fn.0 ()
#8  0x00007f75f4a488ee in gomp_thread_start (xdata=&lt;optimized out&gt;) at /build/gcc/src/gcc/libgomp/team.c:120
#9  0x00007f75f481b08a in start_thread () from /usr/lib/libpthread.so.0
#10 0x00007f75f45531bf in clone () from /usr/lib/libc.so.6
&lt;/denchmark-code&gt;

Second trace
&lt;denchmark-code&gt;#0  0x000055555555cdaf in lowGauge_3mwQtFaBTgevFrybZdgUNw ()
#1  0x000055555555ce45 in prepareForInteriorPointerChecking_Zqr3EQAAcehIfp3uSECEuQsystem ()
#2  0x000055555555e1a7 in collectCTBody_zoTIuavlrCHyw3B8MBaLJA_2 ()
#3  0x000055555555e3dc in collectCT_zoTIuavlrCHyw3B8MBaLJA ()
#4  0x000055555555e7ad in rawNewObj_QBPo5VW2O56Eeh8hPbQ7Pg ()
#5  0x000055555555e857 in newObj ()
#6  0x000055555556028f in sysFatal_xS3KIecQr1nm9bJJvI4nGRwsystem ()
#7  0x000055555556333f in raiseIndexError ()
#8  0x00005555555ad6aa in gescal_w7FGITPB9bUpM0qE1E4R7UQ ()
#9  0x00005555555b1de0 in gemm_macro_kernel_vwv9a8KfguRP4qtSQqvdYaQ._omp_fn.0 ()
#10 0x00007ffff74688ee in gomp_thread_start (xdata=&lt;optimized out&gt;) at /build/gcc/src/gcc/libgomp/team.c:120
#11 0x00007ffff723b08a in start_thread () from /usr/lib/libpthread.so.0
#12 0x00007ffff6f731bf in clone () from /usr/lib/libc.so.6
&lt;/denchmark-code&gt;

gescal code
N_NIMCALL(void, gescal_w7FGITPB9bUpM0qE1E4R7UQ)(NI m, NI n, NI alpha, tySequence_qwqHTkRvwhrRyENtudHQ7g** X, NI offX, NI incRowX, NI incColX) {
	{
		if (!!((alpha == ((NI) 0)))) goto LA3_;
		{
			NI j;
			NI i;
			j = (NI)0;
			i = ((NI) 0);
			{
				while (1) {
					NI TM_19bM2QWZhUjwRF8bIi3cQjA_24;
					if (!(i &lt; n)) goto LA7;
					j = i;
					{
						NI i_2;
						NI i_3;
						i_2 = (NI)0;
						i_3 = ((NI) 0);
						{
							while (1) {
								NI TM_19bM2QWZhUjwRF8bIi3cQjA_19;
								NI TM_19bM2QWZhUjwRF8bIi3cQjA_20;
								NI TM_19bM2QWZhUjwRF8bIi3cQjA_21;
								NI TM_19bM2QWZhUjwRF8bIi3cQjA_22;
								NI TM_19bM2QWZhUjwRF8bIi3cQjA_23;
								if (!(i_3 &lt; m)) goto LA10;
								i_2 = i_3;
								TM_19bM2QWZhUjwRF8bIi3cQjA_19 = mulInt(i_2, incRowX);
								TM_19bM2QWZhUjwRF8bIi3cQjA_20 = mulInt(j, incColX);
								TM_19bM2QWZhUjwRF8bIi3cQjA_21 = addInt((NI)(TM_19bM2QWZhUjwRF8bIi3cQjA_19), (NI)(TM_19bM2QWZhUjwRF8bIi3cQjA_20));
								TM_19bM2QWZhUjwRF8bIi3cQjA_22 = addInt((NI)(TM_19bM2QWZhUjwRF8bIi3cQjA_21), offX);
								if ((NU)((NI)(TM_19bM2QWZhUjwRF8bIi3cQjA_22)) &gt;= (NU)((*X)-&gt;Sup.len)) raiseIndexError();
								stareq__tk9bwZBdb9bO9baUcUN2AX89bQmetadataArray((&amp;(*X)-&gt;data[(NI)(TM_19bM2QWZhUjwRF8bIi3cQjA_22)]), alpha);
								TM_19bM2QWZhUjwRF8bIi3cQjA_23 = addInt(i_3, ((NI) 1));
								i_3 = (NI)(TM_19bM2QWZhUjwRF8bIi3cQjA_23);
							} LA10: ;
						}
					}
					TM_19bM2QWZhUjwRF8bIi3cQjA_24 = addInt(i, ((NI) 1));
					i = (NI)(TM_19bM2QWZhUjwRF8bIi3cQjA_24);
				} LA7: ;
			}
		}
	}
	goto LA1_;
	LA3_: ;
	{
		{
			NI j_2;
			NI i_4;
			j_2 = (NI)0;
			i_4 = ((NI) 0);
			{
				while (1) {
					NI TM_19bM2QWZhUjwRF8bIi3cQjA_30;
					if (!(i_4 &lt; n)) goto LA14;
					j_2 = i_4;
					{
						NI i_5;
						NI i_6;
						i_5 = (NI)0;
						i_6 = ((NI) 0);
						{
							while (1) {
								NI TM_19bM2QWZhUjwRF8bIi3cQjA_25;
								NI TM_19bM2QWZhUjwRF8bIi3cQjA_26;
								NI TM_19bM2QWZhUjwRF8bIi3cQjA_27;
								NI TM_19bM2QWZhUjwRF8bIi3cQjA_28;
								NI TM_19bM2QWZhUjwRF8bIi3cQjA_29;
								if (!(i_6 &lt; m)) goto LA17;
								i_5 = i_6;
								TM_19bM2QWZhUjwRF8bIi3cQjA_25 = mulInt(i_5, incRowX);
								TM_19bM2QWZhUjwRF8bIi3cQjA_26 = mulInt(j_2, incColX);
								TM_19bM2QWZhUjwRF8bIi3cQjA_27 = addInt((NI)(TM_19bM2QWZhUjwRF8bIi3cQjA_25), (NI)(TM_19bM2QWZhUjwRF8bIi3cQjA_26));
								TM_19bM2QWZhUjwRF8bIi3cQjA_28 = addInt((NI)(TM_19bM2QWZhUjwRF8bIi3cQjA_27), offX);
								if ((NU)((NI)(TM_19bM2QWZhUjwRF8bIi3cQjA_28)) &gt;= (NU)((*X)-&gt;Sup.len)) raiseIndexError();
								(*X)-&gt;data[(NI)(TM_19bM2QWZhUjwRF8bIi3cQjA_28)] = ((NI) 0);
								TM_19bM2QWZhUjwRF8bIi3cQjA_29 = addInt(i_6, ((NI) 1));
								i_6 = (NI)(TM_19bM2QWZhUjwRF8bIi3cQjA_29);
							} LA17: ;
						}
					}
					TM_19bM2QWZhUjwRF8bIi3cQjA_30 = addInt(i_4, ((NI) 1));
					i_4 = (NI)(TM_19bM2QWZhUjwRF8bIi3cQjA_30);
				} LA14: ;
			}
		}
	}
	LA1_: ;
}
		</comment>
		<comment id='2' author='mratsim' date='2017-10-11T19:38:50Z'>
		load test crashed fixed by &lt;denchmark-link:https://github.com/mratsim/Arraymancer/commit/d860cee7a2ef624e68f0bb5010a7257ff0a7db0f&gt;d860cee&lt;/denchmark-link&gt;
.
The full test suite has another crash though
&lt;denchmark-code&gt;[Suite] BLAS (Basic Linear Algebra Subprograms)
  [OK] GEMM - General Matrix to Matrix Multiplication
  [OK] GEMM - Bounds checking
  [OK] GEMV - General Matrix to Vector Multiplication
  [OK] GEMM and GEMV with transposed matrices
  [OK] Scalar/dot product
  [OK] Multiplication/division by scalar
  [OK] Multiplication/division by scalar (inplace)
  [OK] Tensor addition and substraction
  [OK] Tensor addition and substraction (inplace)
  [OK] Tensor negative
  [OK] Addition-Substraction - slices
  [OK] Addition-Substraction - Bounds checking
  [OK] Integer Matrix-Vector Multiplication fallback

Thread 1 "all_tests" received signal SIGSEGV, Segmentation fault.
0x0000555555575ca4 in forAllChildren_yHFnLgI7q81iFxRlb3Iqlw ()
(gdb) bt
#0  0x0000555555575ca4 in forAllChildren_yHFnLgI7q81iFxRlb3Iqlw ()
#1  0x0000555555576059 in markS_NZr5o3Ubzrci4OmK29cHBJA ()
#2  0x00005555555773b1 in collectCycles_zoTIuavlrCHyw3B8MBaLJA_3 ()
#3  0x00005555555775e3 in collectCTBody_zoTIuavlrCHyw3B8MBaLJA_2 ()
#4  0x000055555557775f in collectCT_zoTIuavlrCHyw3B8MBaLJA ()
#5  0x0000555555577b30 in rawNewObj_QBPo5VW2O56Eeh8hPbQ7Pg ()
#6  0x0000555555577bd1 in newObj ()
#7  0x00005555556ec592 in newBlasBuffer_x0D8OKvt9boCqliO2L4QNhQ ()
#8  0x00005555556f03f6 in gemm_nn_fallback_IN2Kc8PNfxSgziheTKVsFQ ()
#9  0x00005555556ec055 in star__2rJKjIl9aDJqJ0D89crYVqRg ()
#10 0x00005555555ccd01 in arraymancer_test_operators_blasInit000 ()
#11 0x0000555555568cbb in PreMainInner ()
#12 0x0000555555568d2e in PreMain ()
#13 0x0000555555568d6d in NimMain ()
#14 0x0000555555568dd8 in main ()
&lt;/denchmark-code&gt;

		</comment>
		<comment id='3' author='mratsim' date='2017-10-13T12:06:39Z'>
		closed by &lt;denchmark-link:https://github.com/mratsim/Arraymancer/commit/daa068c615c7fe16d7a549f21e0030771b64c6ce&gt;daa068c&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>