<bug id='91' author='mratsim' open_date='2017-10-07T10:02:01Z' closed_time='2017-10-13T12:05:38Z'>
	<summary>C++ codegen broken (i.e. CudaTensors broken)</summary>
	<description>
C++ codegen was broken by &lt;denchmark-link:https://github.com/mratsim/Arraymancer/commit/829d8b16935f66bc773d93c91e5579b6a35fd502&gt;829d8b1&lt;/denchmark-link&gt;
 and &lt;denchmark-link:https://github.com/mratsim/Arraymancer/pull/90&gt;#90&lt;/denchmark-link&gt;
.
This is blocking for Cuda as Cuda kernel relies on C++ templates.
(fails with or without release)
nim cpp -d:release --out:bin/all_tests --nimcache:./nimcache tests/all_tests.nim
&lt;denchmark-code&gt;Error: execution of an external compiler program 'clang++ -c  -w  -O3 -ffast-math   -I'/Users/tesuji/.choosenim/toolchains/nim-#devel/lib' -o ./nimcache/arraymancer_arraymancer.o ./nimcache/arraymancer_arraymancer.cpp' failed with exit code: 1

./nimcache/arraymancer_arraymancer.cpp:2608:19: error: declaration of reference variable 'x' requires an initializer
                NimStringDesc*&amp; x;
                                ^
./nimcache/arraymancer_arraymancer.cpp:2610:7: error: C-style cast from rvalue to reference type 'NimStringDesc *&amp;'
                x = (NimStringDesc*&amp;)0;
                    ^~~~~~~~~~~~~~~~~~
./nimcache/arraymancer_arraymancer.cpp:3192:21: error: declaration of reference variable 'x' requires an initializer
                                NimStringDesc*&amp; x;
                                                ^
./nimcache/arraymancer_arraymancer.cpp:3194:9: error: C-style cast from rvalue to reference type 'NimStringDesc *&amp;'
                                x = (NimStringDesc*&amp;)0;
                                    ^~~~~~~~~~~~~~~~~~
./nimcache/arraymancer_arraymancer.cpp:3636:21: error: declaration of reference variable 'x' requires an initializer
                                NimStringDesc*&amp; x;
                                                ^
./nimcache/arraymancer_arraymancer.cpp:3638:9: error: C-style cast from rvalue to reference type 'NimStringDesc *&amp;'
                                x = (NimStringDesc*&amp;)0;
                                    ^~~~~~~~~~~~~~~~~~
./nimcache/arraymancer_arraymancer.cpp:4446:9: error: declaration of reference variable 'x' requires an initializer
                                NI&amp; x;
                                    ^
./nimcache/arraymancer_arraymancer.cpp:4448:9: error: C-style cast from rvalue to reference type 'NI &amp;' (aka 'long long &amp;')
                                x = (NI&amp;)0;
                                    ^~~~~~
./nimcache/arraymancer_arraymancer.cpp:4901:21: error: declaration of reference variable 'x' requires an initializer
                                NimStringDesc*&amp; x;
                                                ^
./nimcache/arraymancer_arraymancer.cpp:4903:9: error: C-style cast from rvalue to reference type 'NimStringDesc *&amp;'
                                x = (NimStringDesc*&amp;)0;
                                    ^~~~~~~~~~~~~~~~~~
./nimcache/arraymancer_arraymancer.cpp:5827:7: error: declaration of reference variable 'old_val' requires an initializer
                NI&amp; old_val;
                    ^~~~~~~
./nimcache/arraymancer_arraymancer.cpp:5828:13: error: C-style cast from rvalue to reference type 'NI &amp;' (aka 'long long &amp;')
                old_val = (NI&amp;)0;
                          ^~~~~~
./nimcache/arraymancer_arraymancer.cpp:6013:7: error: declaration of reference variable 'x_2' requires an initializer
                NI&amp; x_2;
                    ^~~
./nimcache/arraymancer_arraymancer.cpp:6015:9: error: C-style cast from rvalue to reference type 'NI &amp;' (aka 'long long &amp;')
                x_2 = (NI&amp;)0;
                      ^~~~~~
./nimcache/arraymancer_arraymancer.cpp:6159:7: error: declaration of reference variable 'x' requires an initializer
                NI&amp; x;
                    ^
./nimcache/arraymancer_arraymancer.cpp:6161:7: error: C-style cast from rvalue to reference type 'NI &amp;' (aka 'long long &amp;')
                x = (NI&amp;)0;
                    ^~~~~~
./nimcache/arraymancer_arraymancer.cpp:7326:10: error: declaration of reference variable 'v' requires an initializer
                                        NF&amp; v;
                                            ^
./nimcache/arraymancer_arraymancer.cpp:7328:10: error: C-style cast from rvalue to reference type 'NF &amp;' (aka 'double &amp;')
                                        v = (NF&amp;)0;
                                            ^~~~~~
./nimcache/arraymancer_arraymancer.cpp:7766:10: error: declaration of reference variable 'v_2' requires an initializer
                                        NF&amp; v_2;
                                            ^~~
fatal error: too many errors emitted, stopping now [-ferror-limit=]
20 errors generated.
&lt;/denchmark-code&gt;

Zoom in on non-string - line 5827
N_NIMCALL(void, slicerMut_5HNBiHajzTdmOUheqCgr2A)(tyObject_Tensor_8gG034a4DEBvD9ctN8nyxaw&amp; t, tyObject_SteppedSlice_rJTlbLcKC9bpAJbFSrlwOrQ* slices, NI slicesLen_0, NI val$
        tyObject_Tensor_8gG034a4DEBvD9ctN8nyxaw sliced;
        tyObject_Tensor_8gG034a4DEBvD9ctN8nyxaw T1_;
        memset((void*)(&amp;sliced), 0, sizeof(sliced));
        memset((void*)(&amp;T1_), 0, sizeof(T1_));
        unsafeSlicer_SRZrYFq46KhcUYobS9bdI9cg_2((&amp;t), slices, slicesLen_0, (&amp;T1_));
        sliced.shape = T1_.shape;
        sliced.strides = T1_.strides;
        sliced.offset = T1_.offset;
        sliced.data = T1_.data;
        {
                NI&amp; old_val;        // &lt;------- here, needs initializer
                old_val = (NI&amp;)0;  // &lt;------- here, needs initializer
                NI* data = dataArray_v3eUw6FwA4Vs9cV5O3TkzvQtest_init((&amp;sliced));
                {
                        if (!is_C_contiguous_dDfDc3pbZUoFoNv6AVz18Atest_init((&amp;sliced))) goto LA5_;
{                       {
                                NI i;
                                NI colontmp_;
                                NI T8_;
                                ...
	</description>
	<comments>
		<comment id='1' author='mratsim' date='2017-10-07T11:29:59Z'>
		Reproduced and submitted upstream:
import sequtils

import future


type CustomSeq[T] = object
  data: seq[T]


iterator mitems[T](cs: var CustomSeq[T]): var T {.inline,noSideEffect.} =
  for val in cs.data.mitems:
    yield val

template map[T](cs: CustomSeq[T], op:untyped): untyped =
  var dest = cs

  for x {.inject.} in dest.mitems:
    x = op
  dest

let a = CustomSeq[int](data: toSeq(1..10))

let b = a.map(x * 2)

echo b
Solution is wait for upstream fix (only Cuda impacted) or rollback iterator change :/
		</comment>
	</comments>
</bug>