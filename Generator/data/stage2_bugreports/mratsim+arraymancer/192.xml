<bug id='192' author='mratsim' open_date='2018-03-03T23:55:44Z' closed_time='2018-03-14T12:55:54Z'>
	<summary>Templates should assign parameters to avoid side-effect/calling procs twice</summary>
	<description>
See: &lt;denchmark-link:https://github.com/nim-lang/opencl/pull/3#discussion_r171216853&gt;nim-lang/opencl#3 (comment)&lt;/denchmark-link&gt;

An example is map_inline
template map_inline*[T](t: Tensor[T], op:untyped): untyped =

  type outType = type((
    block:
      var x{.inject.}: type(items(t));
      op
  ))

  var dest = newTensorUninit[outType](t.shape)
  withMemoryOptimHints()
  let data{.restrict.} = dest.dataArray # Warning âš : data pointed to will be mutated

  omp_parallel_blocks(block_offset, block_size, dest.size):
    for i, x {.inject.} in enumerate(t, block_offset, block_size):
      data[i] = op
  dest
If the input t is the result of foo(a), foo(a) would be substituted in t.shape and enumerate(t, ...). If t does not have side-effects, the compiler will probably optimize the second call, but if there are they will be triggered twice.
	</description>
	<comments>
		<comment id='1' author='mratsim' date='2018-03-14T12:55:54Z'>
		Closed by &lt;denchmark-link:https://github.com/mratsim/Arraymancer/pull/193&gt;#193&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>