<bug id='61' author='edubart' open_date='2017-09-23T13:01:51Z' closed_time='2017-09-23T15:47:46Z'>
	<summary>Unable to use `_` operator in this example</summary>
	<description>
import arraymancer

proc foo[T](t: Tensor[T], x: int): Tensor[T] =
  t.unsafeSlice(x, _, _).unsafeReshape([t.shape[1], t.shape[2]])

echo zeros([2,2,2], int).foo(1)
in global_config.nim it works.
&lt;denchmark-code&gt;test2.nim(6, 25) template/generic instantiation from here
test2.nim(4, 25) Error: type mismatch: got (int, array[0..1, int])
but expected one of: 
proc unsafeReshape(t: Tensor; new_shape: varargs[int]): Tensor
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='edubart' date='2017-09-23T13:37:49Z'>
		It works on my machine with latest pull
You need to change unsafeView ==&gt; unsafeSlice
		</comment>
		<comment id='2' author='edubart' date='2017-09-23T14:45:29Z'>
		I've updated the test case, I doesn't work for me.
		</comment>
		<comment id='3' author='edubart' date='2017-09-23T14:53:01Z'>
		More in general
import arraymancer

proc foo[T](t: Tensor[T]): Tensor[T] =
  t.unsafeSlice(0, _, 0)

echo zeros([2,2,2], int).foo()
the problem isAllInt() if in slicer, _ is a int only inside generics
		</comment>
		<comment id='4' author='edubart' date='2017-09-23T15:24:27Z'>
		I think tests should have some complex case like:
import arraymancer

let t = zeros([2,2,2,2,2,2], int)
discard t[0..1|1, 0..&lt;2|1, 0..^1|1, ^1..0|-1, _, 1] # works

proc foo[T](t: Tensor[T]): Tensor[T] =
  discard t[0..1|1, 0..&lt;2|1, 0..^1|1, ^1..0|-1, _, 1] # doesnt work

t.foo()
there are other erros in generics when using 0..1, _, ^, all slicing operators...
		</comment>
	</comments>
</bug>