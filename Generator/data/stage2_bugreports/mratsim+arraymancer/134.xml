<bug id='134' author='mratsim' open_date='2017-10-29T18:46:49Z' closed_time='2017-10-31T08:43:55Z'>
	<summary>macOS OpenMP critically slow in specific circumstances</summary>
	<description>
&lt;denchmark-link:https://github.com/mratsim/Arraymancer/blob/853e4f01b14f8c9a3a3851c8c998e098506fd6d5/benchmarks/implementation/logsumexp.nim&gt;Benchmark file.&lt;/denchmark-link&gt;

Results on i5-5257U (dual-core mobile 2.7GHz, turbo 3.1)
Batch size 256
Compilation flag no OpenMP
nim c -d:native -d:release --out:bin/logsumexp --nimcache:./nimcache benchmarks/implementation/logsumexp.nim
Compilation flag OpenMP
nim c d:openmp -d:native -d:release --out:bin/logsumexp --nimcache:./nimcache benchmarks/implementation/logsumexp.nim



Implementation
Classes
OpenMP
epochTime (seconds)




Classic
1000
No
1.869992971420288


Streaming
1000
No
1.463253974914551


Classic
3
No
0.005753040313720703


Streaming
3
No
0.004420995712280273


Classic
1000
Yes
2.416302919387817


Streaming
1000
No*
1.478353023529053


Classic
3
Yes
0.005849123001098633


Streaming
3
No*
0.004467964172363281



No*: the streaming logsumexp is compiled with but does not use OpenMP
	</description>
	<comments>
		<comment id='1' author='mratsim' date='2017-10-30T08:35:47Z'>
		integer_matmul benchmark is also much slower with OpenMP than single threaded.
git bisect returns this commit &lt;denchmark-link:https://github.com/mratsim/Arraymancer/commit/218aa7bb0b412903847b8761cf6c266c53fc300d&gt;218aa7b&lt;/denchmark-link&gt;
:
on MacOS
&lt;denchmark-code&gt;    Move OpenMP parallel section to inner loop in GEMM fallback: fix https://github.com/mratsim/Arraymancer/issues/123
&lt;/denchmark-code&gt;

Before the commit, multithreaded speed was twice single-threaded speed on my dual core Mac.
After it was 3x slower.
Linux does not have the same issue.
		</comment>
		<comment id='2' author='mratsim' date='2017-10-30T12:09:41Z'>
		Further research shows that this is not isolated:
OpenMP forum:

OpenMP slower on OSX
Fast on Linux Slow on OSX

Stack overflow:


Reverse problem, slow on Linux, fast on OSX


OSX memory allocation kernel bug


Most interesting resources:

Does multithreading emphasize memory fragmentation
OpenMP: poor performance on heap arrays (stack arrays work fine)

Interesting read: &lt;denchmark-link:http://cs.umw.edu/~finlayson/class/fall16/cpsc425/notes/12-scheduling.html&gt;OpenMP scheduling&lt;/denchmark-link&gt;

So it may be that OSX mmap is suboptimal for shared memory access on the heap or there is a false sharing issue on OSX.
Solutions:

If false sharing: allocate disjoint chunks of memory that are atleast a cache line apart (align on 128 boundaries?)
If memory fragmentation: use a custom allocator for the BLAS fallback, like jemalloc or Hoard or tcmalloc
Probably impossible: revert 218aa7b and make sure "i" is declared private in OpenMP to avoid #123.

volatile int sum=0;
int foo(void) {
	int i,j;
	sum=0;
#pragma omp parallel for private(j)
	for (i=0;i&lt;1000;i++) 
	for (j=0;j&lt;1000;j++) {
		sum++;
	}
	return sum;
}

If all else fails: OpenMP on OSX is not supported/optimized
Other long-term alternatives: Intel TBB, Nim custom implementation (threadpool, Rust's rayon-like ...)

		</comment>
	</comments>
</bug>