<bug id='287' author='smounsav' open_date='2019-10-25T22:41:27Z' closed_time='2019-11-02T08:46:13Z'>
	<summary>[Bug] Incorrect documentation for adjust_contrast</summary>
	<description>
Hi,
I think the documentation for function adjust_contrast is incorrect.
The documentation states that a contrast factor of 0 generates a black image and 1 outputs the original image. However, with the current implementation, it is not the case, the original image is obtained with factor 0 and a factor 1 outputs a white image.
I think to obtain a black image, the factor to use would be -1 but this value is not permitted in the actual implementation as it expects a positive value.
	</description>
	<comments>
		<comment id='1' author='smounsav' date='2019-10-27T13:29:35Z'>
		&lt;denchmark-link:https://github.com/smounsav&gt;@smounsav&lt;/denchmark-link&gt;
 you are right. We should probably consider rethink about this adjusting operators. Just discovered torchvision already implement that in raw tensors. We could take it as reference. &lt;denchmark-link:https://github.com/pytorch/vision/blob/master/torchvision/transforms/functional_tensor.py&gt;https://github.com/pytorch/vision/blob/master/torchvision/transforms/functional_tensor.py&lt;/denchmark-link&gt;

we were discussing with &lt;denchmark-link:https://github.com/dvd42&gt;@dvd42&lt;/denchmark-link&gt;
 to also implement  from opencv, which is similar to this blending operator in torchvision. Check this: &lt;denchmark-link:https://github.com/kornia/kornia/issues/233&gt;#233&lt;/denchmark-link&gt;

		</comment>
		<comment id='2' author='smounsav' date='2019-10-30T14:37:41Z'>
		&lt;denchmark-link:https://github.com/edgarriba&gt;@edgarriba&lt;/denchmark-link&gt;
 Thanks for the links! It's good to know that torchvision is starting to implement operations handling tensors. However, they have a completely different implementation of adjust_contrast and adjust_saturation. I don't know if their approach and opencv's one are equivalent and which one is
better. Assuming their implementation is correct, their approach of adjust_saturation seems better as it avoids a conversion to hsv colorspace involving potential division by 0.
It would be nice to know which reference the torchvision used for their implementation.
I patched the actual implementation on my local machine to use adjust_contrast with factor values between -1 and 1 for my actual project, however, for a better correction to be integrated in the library, we should check if the torchvision implementation is based on a correct reference and then use the same reference and their implementation as reference for our code.
		</comment>
		<comment id='3' author='smounsav' date='2019-10-30T14:44:01Z'>
		&lt;denchmark-link:https://github.com/smounsav&gt;@smounsav&lt;/denchmark-link&gt;
 check this: &lt;denchmark-link:https://github.com/kornia/kornia/pull/304&gt;#304&lt;/denchmark-link&gt;
 and feel free to comment
		</comment>
		<comment id='4' author='smounsav' date='2019-11-02T08:46:13Z'>
		fixed
		</comment>
	</comments>
</bug>