<bug id='308' author='smounsav' open_date='2019-10-30T14:55:06Z' closed_time='2019-11-04T17:07:25Z'>
	<summary>[Bug] Potential bug in rgb_to_hsv</summary>
	<description>
Hi, I have some doubts about the implementation of rgb_to_hsv.
To avoid division by zero when dividing by deltac to calculate rc, gc and bc, 0 values are replaced by 1 by following command :
&lt;denchmark-code&gt;deltac: torch.Tensor = torch.where(
     deltac == 0, torch.ones_like(deltac), deltac)
&lt;/denchmark-code&gt;

What is the motivation to replace 0 by 1?
To avoid division by 0, I would rather go by adding a small epsilon to delta:
&lt;denchmark-code&gt;    rc: torch.Tensor = (maxc - r) / deltac + 1e-7
    gc: torch.Tensor = (maxc - g) / deltac + 1e-7
    bc: torch.Tensor = (maxc - b) / deltac + 1e-7
&lt;/denchmark-code&gt;

What do you think?
	</description>
	<comments>
		<comment id='1' author='smounsav' date='2019-11-02T08:45:27Z'>
		&lt;denchmark-link:https://github.com/dvd42&gt;@dvd42&lt;/denchmark-link&gt;
 followed this I guess: &lt;denchmark-link:https://gist.github.com/PolarNick239/691387158ff1c41ad73c#file-rgb_to_hsv_np-py-L36&gt;https://gist.github.com/PolarNick239/691387158ff1c41ad73c#file-rgb_to_hsv_np-py-L36&lt;/denchmark-link&gt;

your solution should work too. Does this really really change the performance ?
		</comment>
		<comment id='2' author='smounsav' date='2019-11-03T18:56:08Z'>
		Yeah I dont think this is a bug. Since the values where deltac is 0 will be replaced in the following lines anyways. You can try doing:
&lt;denchmark-code&gt;deltac: torch.Tensor = torch.where(deltac == 0, torch.full_like(deltac, 1e-7), deltac)
&lt;/denchmark-code&gt;

If you run this you will get the same results. I am closing this for now. Feel free to reopen if you get different results.
		</comment>
	</comments>
</bug>