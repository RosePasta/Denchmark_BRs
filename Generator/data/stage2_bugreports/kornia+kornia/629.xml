<bug id='629' author='pmeier' open_date='2020-08-14T20:18:40Z' closed_time='2020-12-25T14:01:52Z'>
	<summary>[Bug] _compute_shear_matrix and get_affine_matrix2d yield different results</summary>
	<description>
&lt;denchmark-h:h2&gt;üêõ Bug&lt;/denchmark-h&gt;

_compute_shear_matrix and get_affine_matrix2d yield different results.
&lt;denchmark-h:h2&gt;To Reproduce&lt;/denchmark-h&gt;

import functools
import torch
from kornia.geometry.transform.affwarp import _compute_shear_matrix
from kornia import get_affine_matrix2d

translations = torch.zeros(1, 2)
center = torch.zeros(1, 2)
scale = torch.ones(1)
angle = torch.zeros(1)
get_affine_matrix2d_shear = functools.partial(
    get_affine_matrix2d, translations, center, scale, angle
)

# just making sure that the defaults for the other parameters are correct
assert torch.norm(get_affine_matrix2d_shear() - torch.eye(3)) &lt; 1e-6


torch.manual_seed(0)
sx, sy = torch.rand(1), torch.rand(1)
shear = torch.stack((sx, sy), dim=1)

print(_compute_shear_matrix(shear))
print(get_affine_matrix2d_shear(sx=sx, sy=sy))
&lt;denchmark-code&gt;tensor([[[1.0000, 0.4963, 0.0000],
         [0.7682, 1.0000, 0.0000],
         [0.0000, 0.0000, 1.0000]]])
tensor([[[ 1.0000, -0.5415,  0.0000],
         [-0.9662,  1.5232,  0.0000],
         [ 0.0000,  0.0000,  1.0000]]])
&lt;/denchmark-code&gt;

&lt;denchmark-h:h2&gt;Expected behavior&lt;/denchmark-h&gt;

Maybe I'm missing something obvious, but I imagined both functions should yield the same results if fed with the same shear parameters.
&lt;denchmark-h:h2&gt;Environment&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;kornia == 0.4.1+86185fb
&lt;/denchmark-code&gt;

&lt;denchmark-code&gt;PyTorch version: 1.6.0
Is debug build: False
CUDA used to build PyTorch: 10.2

OS: Ubuntu 18.04.4 LTS (x86_64)
GCC version: (Ubuntu 7.5.0-3ubuntu1~18.04) 7.5.0
Clang version: Could not collect
CMake version: version 3.10.2

Python version: 3.6 (64-bit runtime)
Is CUDA available: True
CUDA runtime version: 10.2.89
GPU models and configuration: GPU 0: GeForce GTX 1080
Nvidia driver version: 440.33.01
cuDNN version: /usr/lib/x86_64-linux-gnu/libcudnn.so.7.6.5

Versions of relevant libraries:
[pip3] light-the-torch==0.2.0
[pip3] numpy==1.19.1
[pip3] torch==1.6.0
[conda] Could not collect
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='pmeier' date='2020-08-15T01:07:47Z'>
		This is expected. The previous math was wrong. You may refer to &lt;denchmark-link:https://github.com/kornia/kornia/pull/474/files#r466169643&gt;https://github.com/kornia/kornia/pull/474/files#r466169643&lt;/denchmark-link&gt;

		</comment>
		<comment id='2' author='pmeier' date='2020-08-16T07:16:30Z'>
		Shouldn't be updating and use get_affine_matrix2d ?
		</comment>
		<comment id='3' author='pmeier' date='2020-08-16T07:26:14Z'>
		Sorry. I double checked. _compute_shear_matrix is for 3d shearing, not 2d. It is a naming issue.
		</comment>
		<comment id='4' author='pmeier' date='2020-08-16T12:30:41Z'>
		_compute_shear_matrix is internally used by kornia.shear, which is documented as 2D function.
		</comment>
		<comment id='5' author='pmeier' date='2020-08-16T13:04:04Z'>
		Alright. I misunderstood that with the 3d one.
_compute_shear_matrix  computed the matrix to do the shearing on both axes at the same time, which is the pure shearing matrix mathematically.
get_affine_matrix2d  is ordered shearing that would first shear x-axis then y-axis, which is used to reproduce the TorchVision affine transformations.
		</comment>
		<comment id='6' author='pmeier' date='2020-08-18T05:59:17Z'>
		I'm under the impression that the order should have no effect on the outcome given the shear happens around a common center. Do you have a source for the different implementations?
		</comment>
		<comment id='7' author='pmeier' date='2020-08-18T07:40:44Z'>
		Yes. The order does not matter since they are diagonal matrices but it is not equivalent to the x-and-y shearing. They are different mathematically:
&lt;denchmark-link:https://user-images.githubusercontent.com/15955486/90484181-6ecd0600-e168-11ea-9b68-bd818214a934.png&gt;&lt;/denchmark-link&gt;

Not sure about the source implementations. &lt;denchmark-link:https://github.com/ducha-aiki&gt;@ducha-aiki&lt;/denchmark-link&gt;
 may know where to find it.
		</comment>
		<comment id='8' author='pmeier' date='2020-08-29T09:16:37Z'>
		is this fixed ?
		</comment>
		<comment id='9' author='pmeier' date='2020-08-29T16:10:45Z'>
		&lt;denchmark-link:https://github.com/edgarriba&gt;@edgarriba&lt;/denchmark-link&gt;
 It is an intended behaviour than a bug. I do not think it needs to be fixed.
		</comment>
		<comment id='10' author='pmeier' date='2020-08-30T11:20:05Z'>
		ok, then we should specify somewhere in docs or in the code itself.
		</comment>
		<comment id='11' author='pmeier' date='2020-09-01T09:59:18Z'>
		One inconsistency here is, by kornia.geometry.transform.affwarp._compute_shear_matrix, we used sx, sy directly. Like:
def _compute_shear_matrix(shear: torch.Tensor) -&gt; torch.Tensor:
    ...
    shx, shy = torch.chunk(shear, chunks=2, dim=-1)
    matrix[..., 0, 1:2] += shx
    matrix[..., 1, 0:1] += shy
    ...
while in kornia.geometry.transform.imgwarp.get_shear_matrix2d, we used tan(sx), tan(sy) instead.
def get_shear_matrix2d(center: torch.Tensor, sx: Optional[torch.Tensor] = None, sy: Optional[torch.Tensor] = None) -&gt; torch.Tensor:
    ...
    sx_tan = torch.tan(sx)  # type: ignore
    sy_tan = torch.tan(sy)  # type: ignore
    ...
I think I am more or less expecting:
sh1 = _compute_shear_matrix(shear)
sh2 = get_shear_matrix2d(center, sx, sy)
sh1[1, 1] += 1
allclose(sh1, sh2)
I believe we used the tangent one to align TorchVision, while I am not sure if to update the _compute_shear_matrix to align it as well?
		</comment>
		<comment id='12' author='pmeier' date='2020-10-19T13:38:21Z'>
		&lt;denchmark-link:https://github.com/pmeier&gt;@pmeier&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/shijianjian&gt;@shijianjian&lt;/denchmark-link&gt;
 any action to finally take on this ?
		</comment>
		<comment id='13' author='pmeier' date='2020-12-18T13:38:30Z'>
		This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions, and happy coding day üòé
		</comment>
	</comments>
</bug>