<bug id='572' author='theRealSuperMario' open_date='2020-05-14T08:36:25Z' closed_time='2020-05-14T09:58:51Z'>
	<summary>Unkown type name 'torch.device'</summary>
	<description>
&lt;denchmark-h:h2&gt;üêõ Bug&lt;/denchmark-h&gt;

I ran the one-liner to see if the library works
python -c "import kornia; print(kornia.__version__)"
But I got an error
&lt;denchmark-code&gt;Traceback (most recent call last):
  File "&lt;string&gt;", line 1, in &lt;module&gt;
  File "/home/sandro/anaconda3/envs/supermariopy/lib/python3.7/site-packages/kornia/__init__.py", line 18, in &lt;module&gt;
    from kornia import jit
  File "/home/sandro/anaconda3/envs/supermariopy/lib/python3.7/site-packages/kornia/jit/__init__.py", line 8, in &lt;module&gt;
    spatial_soft_argmax2d = torch.jit.script(K.geometry.spatial_soft_argmax2d)
  File "/home/sandro/anaconda3/envs/supermariopy/lib/python3.7/site-packages/torch/jit/__init__.py", line 1281, in script
    fn = torch._C._jit_script_compile(qualified_name, ast, _rcb, get_default_args(obj))
  File "/home/sandro/anaconda3/envs/supermariopy/lib/python3.7/site-packages/torch/jit/_recursive.py", line 555, in try_compile_fn
    return torch.jit.script(fn, _rcb=rcb)
  File "/home/sandro/anaconda3/envs/supermariopy/lib/python3.7/site-packages/torch/jit/__init__.py", line 1281, in script
    fn = torch._C._jit_script_compile(qualified_name, ast, _rcb, get_default_args(obj))
  File "/home/sandro/anaconda3/envs/supermariopy/lib/python3.7/site-packages/torch/jit/_recursive.py", line 555, in try_compile_fn
    return torch.jit.script(fn, _rcb=rcb)
  File "/home/sandro/anaconda3/envs/supermariopy/lib/python3.7/site-packages/torch/jit/__init__.py", line 1281, in script
    fn = torch._C._jit_script_compile(qualified_name, ast, _rcb, get_default_args(obj))
RuntimeError: 
Unknown type name 'torch.device':
  File "/home/sandro/anaconda3/envs/supermariopy/lib/python3.7/site-packages/kornia/utils/grid.py", line 10
        width: int,
        normalized_coordinates: bool = True,
        device: Optional[torch.device] = torch.device('cpu')) -&gt; torch.Tensor:
                         ~~~~~~~~~~~~ &lt;--- HERE
    """Generates a coordinate grid for an image.
'create_meshgrid' is being compiled since it was called from 'spatial_expectation2d'
  File "/home/sandro/anaconda3/envs/supermariopy/lib/python3.7/site-packages/kornia/geometry/dsnt.py", line 89

    # Create coordinates grid.
    grid: torch.Tensor = create_meshgrid(height, width, normalized_coordinates, input.device)
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ &lt;--- HERE
    grid = grid.to(input.dtype)
'spatial_expectation2d' is being compiled since it was called from 'spatial_soft_argmax2d'
  File "/home/sandro/anaconda3/envs/supermariopy/lib/python3.7/site-packages/kornia/geometry/spatial_soft_argmax.py", line 515
    """
    input_soft: torch.Tensor = dsnt.spatial_softmax2d(input, temperature)
    output: torch.Tensor = dsnt.spatial_expectation2d(input_soft, normalized_coordinates)
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ &lt;--- HERE
    return output

&lt;/denchmark-code&gt;

&lt;denchmark-h:h2&gt;Environment&lt;/denchmark-h&gt;


PyTorch Version:
torch==1.5.0
torchvision==0.5.0
torchviz==0.0.1
OS:
Linux
How you installed PyTorch:
pip
Python version:
python 3.7
CUDA/cuDNN version:
none (CPU)

I guess I am missing something trivial. It would be great if someone could help me figure out my problem.
Thanks
	</description>
	<comments>
		<comment id='1' author='theRealSuperMario' date='2020-05-14T09:58:51Z'>
		It looks like I was able to fix it by:

uninstall torch and torchvision.
run

conda install pytorch torchvision cpuonly -c pytorch
This should install torch==1.5.0 and torchvision=0.6.0
3. clone kornia code and run python setup.py install
I suppose that the cpuonly package was missing in my case.
		</comment>
		<comment id='2' author='theRealSuperMario' date='2020-05-14T10:33:22Z'>
		Right, kornia=0.3.0 is aligned with torch==1.5.0 and torchvision==0.6.0
		</comment>
		<comment id='3' author='theRealSuperMario' date='2020-05-14T14:35:14Z'>
		I guess it would be greate to note this somewhere on the readme, or did I just not find this piece of information because I was unable to search properly?
		</comment>
		<comment id='4' author='theRealSuperMario' date='2020-05-14T15:20:54Z'>
		&lt;denchmark-link:https://github.com/theRealSuperMario&gt;@theRealSuperMario&lt;/denchmark-link&gt;
 I will add it somewhere to the readme. This is actually a problem since pip doesn't solve well dependencies. The package was explicitly built with torch 1.5.0 as install dependency but apparently pip doesn't throw any error in case you have a different version during installation. It only uses version in case you don't have any torch in your system, then will download by default minimum required version.
		</comment>
		<comment id='5' author='theRealSuperMario' date='2020-05-17T18:03:39Z'>
		I'm getting this as well in a docker image built off of nvcr.io/nvidia/pytorch:20.02-py3
		</comment>
		<comment id='6' author='theRealSuperMario' date='2020-05-17T18:31:17Z'>
		&lt;denchmark-link:https://github.com/rdevon&gt;@rdevon&lt;/denchmark-link&gt;
 what's your output here ?

		</comment>
		<comment id='7' author='theRealSuperMario' date='2020-05-17T18:40:08Z'>
		&lt;denchmark-code&gt;Versions of relevant libraries:
[pip] msgpack-numpy==0.4.3.2
[pip] numpy==1.18.1
[pip] pytorch-transformers==1.1.0
[pip] torch==1.5.0a0+3bbb36e
[pip] torchtext==0.4.0
[pip] torchvideo==0.5.0a0+0f47057
[pip] torchvision==0.6.0a0
[conda] magma-cuda101             2.5.1                         1    local
[conda] mkl                       2019.1                      144
[conda] mkl-include               2019.1                      144
[conda] msgpack-numpy             0.4.3.2                  py36_0
[conda] nomkl                     3.0                           0
[conda] numpy                     1.18.1           py36h94c655d_0
[conda] numpy-base                1.18.1           py36h2f8d375_1
[conda] pytorch-transformers      1.1.0                    pypi_0    pypi
[conda] torch                     1.5.0a0+3bbb36e          pypi_0    pypi
[conda] torchtext                 0.4.0                    pypi_0    pypi
[conda] torchvideo                0.5.0a0+0f47057           dev_0    &lt;develop&gt;
[conda] torchvision               0.6.0a0                  pypi_0    pypi
&lt;/denchmark-code&gt;

Tried downgrading torchvision to 0.5, but same error. Torchvideo is a custom lib with just some pytorch methods (No C or CUDA compilation).
		</comment>
		<comment id='8' author='theRealSuperMario' date='2020-05-17T18:43:25Z'>
		The container info is here: &lt;denchmark-link:https://docs.nvidia.com/deeplearning/frameworks/pytorch-release-notes/rel_20-02.html#rel_20-02&gt;https://docs.nvidia.com/deeplearning/frameworks/pytorch-release-notes/rel_20-02.html#rel_20-02&lt;/denchmark-link&gt;

I just noticed that there's another version available now, so trying that.
		</comment>
		<comment id='9' author='theRealSuperMario' date='2020-05-18T15:35:58Z'>
		No dice on nvcr.io/nvidia/pytorch:20.03-py3. I should note that I'm installing via git: pip install git+https://github.com/kornia/kornia.git
Installing kornia from PyPI works, though it downgrades torch
It should be easy enough to reproduce:
Create a docker file with:
&lt;denchmark-code&gt;FROM nvcr.io/nvidia/pytorch:20.03-py3
RUN pip install git+https://github.com/kornia/kornia.git
&lt;/denchmark-code&gt;

Then start the container, and just run python -c "import kornia"
		</comment>
		<comment id='10' author='theRealSuperMario' date='2020-05-18T16:18:59Z'>
		OK, I was able to get it working by doing this:
install kornia from PyPI
edit out the install_requires line in setup.py on my fork
install upgrade my fork locally using pip.
If I don't edit out the install_requires line, I get this strange error:
ERROR: Could not find a version that satisfies the requirement torch==1.5.0a0+8f84ded (from kornia==0.3.2+df93618)
		</comment>
		<comment id='11' author='theRealSuperMario' date='2020-05-19T06:22:07Z'>
		When you install from pip, there's no predefined pytorch version, so pip will take an existing installed version or will download latest available release. Each time we release, we set PYTORCH_VERSION with the minimum required version. But even with this, pip doesn't solve at all depencies, for my experience it just uses the requirement in case there no torch version at all.
		</comment>
		<comment id='12' author='theRealSuperMario' date='2020-05-19T06:32:16Z'>
		My suggestion is that you pin pytorch==1.5 torchvision==0.6 through conda and kornia==0.3.1 using conda pip. Otherwise you are using non tested versions. We just give compatibility to pytorch released versions.
		</comment>
	</comments>
</bug>