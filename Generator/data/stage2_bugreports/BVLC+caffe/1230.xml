<bug id='1230' author='rodrigob' open_date='2014-10-07T07:51:12Z' closed_time='2015-01-16T06:00:50Z'>
	<summary>AbsVal returns backwards nan</summary>
	<description>
Currently testing my first non-trivial network, I find nan values on the very first iteration.
I1007 09:26:20.877076 25590 solver.cpp:263] Iteration 0, Testing net (#0)
First forward pass goes well, loss values are computed.
The on the way backward, I see the first nan at
I1007 09:26:20.945518 25590 net.cpp:599]     [Backward] Layer abs_z3, bottom blob z3_relu2_0_split_0 diff: nan
abs_z3 is simply and ABSVAL layer. Why would it have a nan diff ?
layers { name: "abs_z3" type: ABSVAL bottom: "z3" top: "abs_z3" }
I guess returning nan is a bug. Either it should check for "improper connections" and raise an error, or  return "sensical values".
Any clue of what might be going wrong are welcome.
ps: I am building over revision &lt;denchmark-link:https://github.com/BVLC/caffe/commit/b84009e168e6a2354540dff8fabbdc39f574d66f&gt;b84009e&lt;/denchmark-link&gt;
 of the caffe-dev branch.
	</description>
	<comments>
		<comment id='1' author='rodrigob' date='2014-10-07T08:48:37Z'>
		looking at the implementation, I think it will produce nans for zero
inputs, which is a bug.  Please send a PR if you fix it.  In the meantime,
you can use the [leaky] RELU layer with "negative_slope: -1" as a
replacement for an ABSVAL layer, which computes the gradients in a stable
way.
On Tue, Oct 7, 2014 at 12:51 AM, Rodrigo Benenson &lt;denchmark-link:mailto:notifications@github.com&gt;notifications@github.com&lt;/denchmark-link&gt;

wrote:

Currently testing my first non-trivial network, I find nan values on the
very first iteration.
I1007 09:26:20.877076 25590 solver.cpp:263] Iteration 0, Testing net (#0)
First forward pass goes well, loss values are computed.
The on the way backward, I see the first nan at
I1007 09:26:20.945518 25590 net.cpp:599] [Backward] Layer abs_z3, bottom
blob z3_relu2_0_split_0 diff: nan
abs_z3 is simply and ABSVAL layer. Why would it have a nan diff ?
layers {
name: "abs_z3"
type: ABSVAL
bottom: "z3"
top: "abs_z3"
}
I guess returning nan is a bug. Either it should check for "improper
connections" and raise an error, or return "sensical values".
Any clue of what might be going wrong are welcome.
â€”
Reply to this email directly or view it on GitHub
#1230.

		</comment>
		<comment id='2' author='rodrigob' date='2014-10-07T10:14:18Z'>
		Thanks for the quick reply. The relu workaround indeed does not give NaNs now.
		</comment>
		<comment id='3' author='rodrigob' date='2014-10-07T16:39:43Z'>
		&lt;denchmark-link:https://github.com/ashafaei&gt;@ashafaei&lt;/denchmark-link&gt;
 please submit a fix for the zero NaNs by PR to master. Thanks!
		</comment>
		<comment id='4' author='rodrigob' date='2014-10-07T19:19:34Z'>
		So I understand &lt;denchmark-link:https://github.com/ashafaei&gt;@ashafaei&lt;/denchmark-link&gt;
 has a fix to push ?
		</comment>
		<comment id='5' author='rodrigob' date='2014-10-07T19:37:02Z'>
		&lt;denchmark-link:https://github.com/rodrigob&gt;@rodrigob&lt;/denchmark-link&gt;
 if you have a fix please PR it. I only signaled &lt;denchmark-link:https://github.com/ashafaei&gt;@ashafaei&lt;/denchmark-link&gt;
 as the original author.
		</comment>
		<comment id='6' author='rodrigob' date='2015-01-16T06:00:50Z'>
		Fixed by &lt;denchmark-link:https://github.com/BVLC/caffe/pull/1326&gt;#1326&lt;/denchmark-link&gt;
.
		</comment>
	</comments>
</bug>