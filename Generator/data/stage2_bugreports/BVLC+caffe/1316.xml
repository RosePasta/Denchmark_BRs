<bug id='1316' author='ryotat' open_date='2014-10-17T20:17:48Z' closed_time='2015-01-16T04:48:15Z'>
	<summary>Memory leak in InternalThread::StartInternalThread()</summary>
	<description>
I think the following &lt;denchmark-link:https://github.com/BVLC/caffe/blob/dev/src/caffe/internal_thread.cpp#L19&gt;line&lt;/denchmark-link&gt;

&lt;denchmark-code&gt;thread_ = new caffe::Thread
        (&amp;InternalThread::InternalThreadEntry, this);
&lt;/denchmark-code&gt;

is causing a memory leak because this function is called &lt;denchmark-link:https://github.com/BVLC/caffe/blob/dev/src/caffe/layers/base_data_layer.cpp#L74&gt;every time&lt;/denchmark-link&gt;
 BasePrefetchingDataLayer::Forward_cpu() is called and the allocated memory is not freed.
	</description>
	<comments>
		<comment id='1' author='ryotat' date='2014-10-17T20:33:33Z'>
		Good point -- thread_ should probably be changed from a caffe::Thread* to a shared_ptr&lt;caffe::Thread&gt;.
		</comment>
		<comment id='2' author='ryotat' date='2014-10-17T20:44:27Z'>
		Thanks for your reply. How about this &lt;denchmark-link:https://github.com/BVLC/caffe/blob/dev/include/caffe/util/thread.hpp#L12&gt;line&lt;/denchmark-link&gt;

&lt;denchmark-code&gt;  this-&gt;thread_ = new boost::thread(func, a1);
&lt;/denchmark-code&gt;

Isn't this also leaking? caffe::Thread does not seem to have a destructor. By the way, why are the member functions of caffe::Thread class in include/caffe/util/thread.hpp?
		</comment>
		<comment id='3' author='ryotat' date='2014-10-17T20:57:38Z'>
		Yup, looks like a memory leak as well.

By the way, why are the member functions of caffe::Thread class in include/caffe/util/thread.hpp?

Not sure...this is my first time looking at all this code; seems it could use a good round of cleanups... (please feel free to send a PR).
		</comment>
		<comment id='4' author='ryotat' date='2014-10-17T21:49:31Z'>
		&lt;denchmark-link:https://github.com/ryotat&gt;@ryotat&lt;/denchmark-link&gt;
 thanks for the close look and catching these issues! A fix is certainly in order, so a PR would be welcome!
		</comment>
		<comment id='5' author='ryotat' date='2014-10-18T03:37:48Z'>
		hmmm, I think I fixed this but I still have a problem that the amount of memory consumed by caffe increases linearly with the number of iterations. Is this a normal behavior? I was looking at the output of valgrind and found the above leak.
My issue might be related to &lt;denchmark-link:https://github.com/BVLC/caffe/issues/13&gt;this&lt;/denchmark-link&gt;
, but I am having the issue with both leveldb and LMDB.
		</comment>
		<comment id='6' author='ryotat' date='2014-10-18T16:37:36Z'>
		&lt;denchmark-link:https://github.com/ryotat&gt;@ryotat&lt;/denchmark-link&gt;
 please PR your fix -- your cleanup is likely right but there is a recent issue with the data pipeline introduced in &lt;denchmark-link:https://github.com/BVLC/caffe/pull/1238&gt;#1238&lt;/denchmark-link&gt;
 that we are fixing now.
		</comment>
		<comment id='7' author='ryotat' date='2014-11-07T02:15:36Z'>
		After applying the fix suggested by ryotat, I still notice a leak on the latest master branch, supporting ryotat's observation that this may be a more complex leak. caffe memory usage increases on each iteration linearly, reaching tens of gigabytes and beyond.
The problem appears to be related to this line: &lt;denchmark-link:https://github.com/BVLC/caffe/blob/master/src/caffe/layers/data_layer.cpp#L167&gt;https://github.com/BVLC/caffe/blob/master/src/caffe/layers/data_layer.cpp#L167&lt;/denchmark-link&gt;
. If I comment it out, memory remains mostly constant. However, I find it very difficult to believe that this is a bug is due to Google's protobuf library!
		</comment>
		<comment id='8' author='ryotat' date='2014-11-08T02:37:53Z'>
		Thanks for confirming my observation. It would be great if somebody with a better understanding of how protobuf / LMDB works could look into this.
		</comment>
		<comment id='9' author='ryotat' date='2015-01-16T04:48:14Z'>
		Thread leak fixed by &lt;denchmark-link:https://github.com/BVLC/caffe/pull/1335&gt;#1335&lt;/denchmark-link&gt;
.
		</comment>
	</comments>
</bug>