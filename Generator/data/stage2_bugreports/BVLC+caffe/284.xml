<bug id='284' author='kmatzen' open_date='2014-04-02T02:57:47Z' closed_time='2014-04-08T01:48:24Z'>
	<summary>Non-square inputs - tested and supported?</summary>
	<description>
Has this system been tested on inputs that have unequal width and height?  If I use the provided DataLayer with both mirroring and cropping disabled on portrait inputs, the first convolution layer quickly tends towards (usually within the first 500 iterations) a set of filters with horizontal bands.  Sometimes the loss goes to nan (and many of the parameters in the first convolution layer have gone to nan).
I wrote a separate data layer that replaces cropsize with crop_height and crop_width so that I could manually specify a rectangular crop.  I've tried setting crop_height == crop_width and so far the issue hasn't shown up, but I haven't spent much time training (but still much longer than the rectangular cases).  If I set the aspect ratio to something other than 1, then the bands do appear and their width seems to depend on the aspect ratio of the crop.
I'm using the imagenet architecture applied to a different dataset.  The inputs from leveldb are 264x105x3 and the cropped inputs to the network are 220x88x3.
The issue is reproducible with both solver mode 0 and 1.
	</description>
	<comments>
		<comment id='1' author='kmatzen' date='2014-04-04T12:04:01Z'>
		The loss sometimes becomes nan when the samples in a mini-batch are of the same class. Enabling data shuffling to make the batches as diverse as possible would prevent this.
The ImageDataLayer automatically resizes the input images to be square. An example of it can be found in example/feature_extraction/imagenet_val.prototxt.
&lt;denchmark-code&gt;layers {
  name: "data"
  type: IMAGE_DATA
  top: "data"
  top: "label"
  image_data_param {
    source: "$CAFFE_DIR/examples/_temp/file_list.txt"
    mean_file: "$CAFFE_DIR/data/ilsvrc12/imagenet_mean.binaryproto"
    batch_size: 50
    crop_size: 227
    mirror: false
    new_height: 256
    new_width: 256
    shuffle: true
  }
}
&lt;/denchmark-code&gt;

		</comment>
		<comment id='2' author='kmatzen' date='2014-04-04T16:00:56Z'>
		&lt;denchmark-link:https://github.com/kmatzen/caffe/blob/master/src/caffe/util/im2col.cu#L32&gt;https://github.com/kmatzen/caffe/blob/master/src/caffe/util/im2col.cu#L32&lt;/denchmark-link&gt;

I think someone swapped height and width on this bounds check.
&lt;denchmark-code&gt;*data_col = (h &gt;= 0 &amp;&amp; w &gt;= 0 &amp;&amp; h &lt; width &amp;&amp; w &lt; height) ?
            data_im[i * width + j] : 0;
&lt;/denchmark-code&gt;

		</comment>
		<comment id='3' author='kmatzen' date='2014-04-04T17:41:45Z'>
		Oh wow, nice find.  I don't know of anybody spending much time doing things with non-square inputs so it's not altogether shocking we have a bug (being optimistic with my use of the singular).  Please do send a PR with the fix if you get a chance.  &lt;denchmark-link:https://github.com/shelhamer&gt;@shelhamer&lt;/denchmark-link&gt;
 we may want to fix this in master?
(Also got scared because git blame points to my massive lint change but the diff shows that bug was there already, whew.)
		</comment>
		<comment id='4' author='kmatzen' date='2014-04-04T17:48:07Z'>
		Agreed on PR to master or at least cherry-picking the bug fix. This is a specific fix without side effects, so straight to master it goes.
Thanks for the find &lt;denchmark-link:https://github.com/kmatzen&gt;@kmatzen&lt;/denchmark-link&gt;
!
		</comment>
		<comment id='5' author='kmatzen' date='2014-04-08T01:48:24Z'>
		Fixed in  by &lt;denchmark-link:https://github.com/BVLC/caffe/pull/298&gt;#298&lt;/denchmark-link&gt;
 and fix cherry-picked to master in &lt;denchmark-link:https://github.com/BVLC/caffe/commit/5528f5e&gt;5528f5e&lt;/denchmark-link&gt;
.
		</comment>
	</comments>
</bug>