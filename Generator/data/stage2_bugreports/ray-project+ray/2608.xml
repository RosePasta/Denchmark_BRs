<bug id='2608' author='stephanie-wang' open_date='2018-08-08T21:36:08Z' closed_time='2018-08-28T01:31:27Z'>
	<summary>Java and Python `UniqueID` generation does not match</summary>
	<description>
&lt;denchmark-h:h3&gt;Describe the problem&lt;/denchmark-h&gt;

The Java and Python frontends currently use different algorithms to generate TaskIDs and ObjectIDs. Ideally, they should both use the functions in src/ray/id.h to generate UniqueIDs. This is the code that is currently shared between the Python frontend and the Raylet backend.
This problem manifests itself when the Raylet backend tries to compute the  of the task that generated a given . It does this, for instance, when trying to decide whether to reconstruct an object. As of &lt;denchmark-link:https://github.com/ray-project/ray/pull/2526&gt;#2526&lt;/denchmark-link&gt;
, the exact sequence of steps is:

The ReconstructionPolicy is asked to reconstruct an object_id, which was computed with the code in java/runtime-common/src/main/java/org/ray/core/UniqueIdHelper.java.
The ReconstructionPolicy computes the task ID from object_id, but gets the wrong task ID, since it uses the ComputeTaskId helper function in src/ray/id.h to do so. It begins to listen for task lease notifications for the wrong task ID.
The ReconstructionPolicy soon times out the task since no notifications were received and attempts to reconstruct the task. However, it can't find the TaskSpec since it has the wrong task ID.

	</description>
	<comments>
		<comment id='1' author='stephanie-wang' date='2018-08-08T22:56:58Z'>
		&lt;denchmark-link:https://github.com/stephanie-wang&gt;@stephanie-wang&lt;/denchmark-link&gt;
 thanks for reporting this!
cc @kingchin1218 &lt;denchmark-link:https://github.com/salah-man&gt;@salah-man&lt;/denchmark-link&gt;

		</comment>
		<comment id='2' author='stephanie-wang' date='2018-08-09T03:07:48Z'>
		Thanks &lt;denchmark-link:https://github.com/stephanie-wang&gt;@stephanie-wang&lt;/denchmark-link&gt;
 . I am following this issue.
		</comment>
		<comment id='3' author='stephanie-wang' date='2018-08-09T04:18:15Z'>
		Thanks. It's a known issue. IIRC, there're also some dependencies on the task ID generation. So it might not be a very straightforward change. we'll look into this.
		</comment>
		<comment id='4' author='stephanie-wang' date='2018-08-09T04:35:15Z'>
		Great, thanks! @kingchin1218 and &lt;denchmark-link:https://github.com/raulchen&gt;@raulchen&lt;/denchmark-link&gt;
, as a first step, we should at least make sure that the function to compute the task ID that created an object matches in both frontends. That way, at least we can have reconstruction work for the Java frontend.
		</comment>
		<comment id='5' author='stephanie-wang' date='2018-08-09T14:12:53Z'>
		It is best that we can come up a manual id logic version defined in Java/Python/Core, respectively. And let's check their consistency upon every startup.
		</comment>
		<comment id='6' author='stephanie-wang' date='2018-08-28T01:26:42Z'>
		&lt;denchmark-link:https://github.com/robertnishihara&gt;@robertnishihara&lt;/denchmark-link&gt;

It's time to close this issue. :)
		</comment>
		<comment id='7' author='stephanie-wang' date='2018-08-28T01:31:27Z'>
		Thanks!
		</comment>
	</comments>
</bug>