<bug id='235' author='robertnishihara' open_date='2017-02-01T04:37:01Z' closed_time='2017-02-23T22:47:30Z'>
	<summary>Segfault when calling ray.put on a large numpy array.</summary>
	<description>
The following fails (on my laptop) with a bus error.
import ray
import numpy as np

ray.init()
x = np.zeros(10 ** 9)

ray.put(x)
This may be related to Arrow's lack of support for large arrays. However, even if we don't support it right away we need to throw a reasonable exception.
	</description>
	<comments>
		<comment id='1' author='robertnishihara' date='2017-02-01T04:39:42Z'>
		On my laptop, using x = np.zeros(150000000) gives the error
python(96354,0x7fffac2a63c0) malloc: *** mach_vm_map(size=18446744071562067968) failed (error code=3)
*** error: can't allocate region
*** set a breakpoint in malloc_error_break to debug
---------------------------------------------------------------------------
error                                     Traceback (most recent call last)
&lt;ipython-input-1-cd9f20402554&gt; in &lt;module&gt;()
      5 x = np.zeros(150000000)
      6 
----&gt; 7 ray.put(x)

/Users/rkn/ray/python/ray/worker.py in put(value, worker)
   1326       return value
   1327     object_id = photon.compute_put_id(worker.current_task_id, worker.put_index)
-&gt; 1328     worker.put_object(object_id, value)
   1329     worker.put_index += 1
   1330     return object_id

/Users/rkn/ray/python/ray/worker.py in put_object(self, objectid, value)
    421     # Serialize and put the object in the object store.
    422     try:
--&gt; 423       numbuf.store_list(objectid.id(), self.plasma_client.conn, [value])
    424     except plasma.plasma_object_exists_error as e:
    425       # The object already exists in the object store, so there is no need to

error: Out of memory: malloc of size -2147483648 failed
		</comment>
		<comment id='2' author='robertnishihara' date='2017-02-01T05:08:39Z'>
		The behavior is the same on Linux (except that it gives a segmentation fault instead of a bus error) with 10 ** 9.
		</comment>
		<comment id='3' author='robertnishihara' date='2017-02-16T05:15:34Z'>
		This is being worked on in &lt;denchmark-link:https://github.com/ray-project/ray/pull/287&gt;#287&lt;/denchmark-link&gt;
.
		</comment>
		<comment id='4' author='robertnishihara' date='2017-02-23T22:47:30Z'>
		This has been fixed for now by &lt;denchmark-link:https://github.com/ray-project/ray/pull/287&gt;#287&lt;/denchmark-link&gt;
, which replaces the segfault with an exception. The example with  now fails with
&lt;denchmark-code&gt;---------------------------------------------------------------------------
error                                     Traceback (most recent call last)
&lt;ipython-input-5-087e558296fe&gt; in &lt;module&gt;()
----&gt; 1 ray.put(x)

/Users/rkn/Workspace/ray/python/ray/worker.py in put(value, worker)
   1459       return value
   1460     object_id = photon.compute_put_id(worker.current_task_id, worker.put_index)
-&gt; 1461     worker.put_object(object_id, value)
   1462     worker.put_index += 1
   1463     return object_id

/Users/rkn/Workspace/ray/python/ray/worker.py in put_object(self, objectid, value)
    439     # Serialize and put the object in the object store.
    440     try:
--&gt; 441       numbuf.store_list(objectid.id(), self.plasma_client.conn, [value])
    442     except numbuf.numbuf_plasma_object_exists_error as e:
    443       # The object already exists in the object store, so there is no need to

error: NotImplemented: Sequence contains too many elements
&lt;/denchmark-code&gt;

Same with 150000000.
		</comment>
		<comment id='5' author='robertnishihara' date='2017-02-23T22:47:48Z'>
		Note that this is not a satisfactory solution, but it is better than a segfault.
		</comment>
	</comments>
</bug>