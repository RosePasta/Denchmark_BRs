<bug id='11765' author='aregm' open_date='2020-11-02T20:13:43Z' closed_time='2020-12-15T05:19:52Z'>
	<summary>[ray] Critical security vulnerabilities in Redis/Lua dependency</summary>
	<description>
&lt;denchmark-h:h3&gt;What is the problem?&lt;/denchmark-h&gt;


Ray version and other system information (Python version, TensorFlow version, OS):  1.x

3 Ray components have critical security vulnerabilities that prevent them from deploying into any enterprise or cloud infrastructures for production usage.


c-ares
Current version - 1.14.0 OUTDATED
Latest version  - 1.16.1
CVE-2016-5180
CVE-2007-3152
CVE-2007-3153


Lua
Current version - 5.1.5 OUTDATED
Latest version  - 5.4.1
CVE-2020-15889
CVE-2020-24342
CVE-2020-15888
CVE-2014-5461
CVE-2020-15945


Redis
Current version -5.0.9 OUTDATED
Latest version - 6.0.9
CVE-2020-14147


	</description>
	<comments>
		<comment id='1' author='aregm' date='2020-11-02T20:15:09Z'>
		Thanks, I believe all those dependencies come from Redis. &lt;denchmark-link:https://github.com/barakmich&gt;@barakmich&lt;/denchmark-link&gt;
 is already working on upgrading our redis dependency.
		</comment>
		<comment id='2' author='aregm' date='2020-11-02T20:23:32Z'>
		&lt;denchmark-link:https://github.com/wuisawesome&gt;@wuisawesome&lt;/denchmark-link&gt;
 We should include this update to 1.0.1?
		</comment>
		<comment id='3' author='aregm' date='2020-11-02T21:59:08Z'>
		&lt;denchmark-link:https://github.com/barakmich&gt;@barakmich&lt;/denchmark-link&gt;
 your call.
		</comment>
		<comment id='4' author='aregm' date='2020-11-04T02:46:41Z'>
		&lt;denchmark-link:https://github.com/barakmich&gt;@barakmich&lt;/denchmark-link&gt;
 any response?
		</comment>
		<comment id='5' author='aregm' date='2020-11-05T22:16:13Z'>
		Won't make the cut for 1.0.1
		</comment>
		<comment id='6' author='aregm' date='2020-11-05T22:32:54Z'>
		We have to fix a number of upgrade issues with the latest redis, but it should be available in nightlies soon.
		</comment>
		<comment id='7' author='aregm' date='2020-11-06T21:04:11Z'>
		As regards Redis: We've been fine this whole time.
Just because a newer version is available (a major version bump, which means upgrade issues), doesn't mean the CVE applies to the version we currently have. The issue quotes CVE-2020-14147.
According to the folks at Gentoo, it's fixed as of Redis 5.0.9: &lt;denchmark-link:https://security.gentoo.org/glsa/202008-17&gt;https://security.gentoo.org/glsa/202008-17&lt;/denchmark-link&gt;

And according to Debian, it's fixed upstream in 5.0.8: &lt;denchmark-link:https://security-tracker.debian.org/tracker/CVE-2020-14147&gt;https://security-tracker.debian.org/tracker/CVE-2020-14147&lt;/denchmark-link&gt;

(Specifically by commit: &lt;denchmark-link:https://github.com/redis/redis/commit/ef764dde1cca2f25d00686673d1bc89448819571&gt;redis/redis@ef764dd&lt;/denchmark-link&gt;
)
We have 5.0.9 in 1.0.1, 1.0.0, and 0.8.7: &lt;denchmark-link:https://github.com/ray-project/ray/blob/releases/1.0.0/bazel/ray_deps_setup.bzl&gt;https://github.com/ray-project/ray/blob/releases/1.0.0/bazel/ray_deps_setup.bzl&lt;/denchmark-link&gt;
 -- even by the issue's own statement.
Now, to be fair, our Windows version currently lags. So we could bump that relatively painlessly, even for 1.0.1 -- 5.0.9 is available.
Lua is used to build redis, sure, but we don't use it directly, and c-ares -- for resolving addresses -- is also not a direct dependency, but in both cases I welcome finding the dependency we might need to bump.
So this hasn't truly been a problem this whole time, and we can bump Redis at our leisure.
		</comment>
		<comment id='8' author='aregm' date='2020-11-06T21:39:53Z'>
		
So this hasn't truly been a problem this whole time, and we can bump Redis at our leisure.

&lt;denchmark-link:https://github.com/barakmich&gt;@barakmich&lt;/denchmark-link&gt;
 I am disappointed that this is your response, it is not an attitude that is friendly to enterprise users. Enterprise users are very sensitive to security issues, and, by extension, Ray developers will need to be sensitive too if enterprise adoption is expected. I am sure it is a big ask to update the Redis dependency, but we cannot suggest to our customers to use Ray when there are known vulnerabilities in the Redis version.
It does not matter if other groups have found that the vulnerabilities don't affect the version of Redis Ray depends on, it is in NVD as &lt;6.0.3 (&lt;denchmark-link:https://nvd.nist.gov/vuln/detail/CVE-2020-14147&gt;https://nvd.nist.gov/vuln/detail/CVE-2020-14147&lt;/denchmark-link&gt;
). As long as it continues to be flagged as a vulnerability in BDBA, we cannot recommend Ray to customers or release tools and products that build on Ray.
To be clear, we opened this issue so that we can recommend Ray to enterprise customers. Until these CVEs are resolved, we cannot.
		</comment>
		<comment id='9' author='aregm' date='2020-11-06T22:44:25Z'>
		Hey just to recap this conversation:
It seems like from a purely technical perspective, Ray has a different threat model than Redis, so a RCE vulnerability for Redis isn't a a dealbreaker (since the attacker that can connect to Redis would have a much easier time executing remote code by connecting as a Ray driver).
Using an old version of Redis is still a problem though because from a compliance perspective, downstream patches are not recognized by NVD. Therefore, we could think of upgrading to Redis &gt;= 6.0.3 as a high priority enterprise compliance feature?
&lt;denchmark-link:https://github.com/devin-petersohn&gt;@devin-petersohn&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/barakmich&gt;@barakmich&lt;/denchmark-link&gt;
 does this sound right?
		</comment>
		<comment id='10' author='aregm' date='2020-11-06T22:49:54Z'>
		
Therefore, we could think of upgrading to Redis &gt;= 6.0.3 as a high priority enterprise compliance feature?
@wuisawesome Thanks, that will solve the problem.

		</comment>
		<comment id='11' author='aregm' date='2020-11-10T02:11:19Z'>
		&lt;denchmark-link:https://github.com/wuisawesome&gt;@wuisawesome&lt;/denchmark-link&gt;
 +1 to upgrading to Redis &gt;= 6.0.3 to unblock our enterprise users. Maybe we should break out upgrading Redis as a separate issue for tracking since we've already got &lt;denchmark-link:https://github.com/ray-project/ray/pull/11371&gt;#11371&lt;/denchmark-link&gt;
 in progress. Perhaps I was hasty earlier; my focus was on the security risks to Ray's users and didn't account for enterprise requirements.
To be clear for the community; this vulnerability (CVE-2020-14147) is not present in current Ray and has not been since 2020-07-03 nightly or release &lt;denchmark-link:https://github.com/ray-project/ray/releases/tag/ray-0.8.6&gt;0.8.6&lt;/denchmark-link&gt;
.
Here is the work we did to support that conclusion:
Q: When was this vulnerability fixed in Redis?:

https://nvd.nist.gov/vuln/detail/CVE-2020-14147

Has references to the pull request that fixes this: redis/redis#6875
And the specific commit that does as well: redis/redis@ef764dd


This patch was backported to the 5.0 release branch on 2020-02-10.

Specifically this commit that exists in the 5.0.8 and 5.0.9 release branch: redis/redis@16b2d07


The release SHAs that contain that commit in Redis are:

5.0.8: redis/redis@1f7d08b
5.0.9: redis/redis@ce878b6



Q: How about Ray?

Ray was updated to build against Redis 5.0.9 on 2020-07-02

a8e4ddb


Before that it was on 5.0.3 -- which may still be vulnerable.

Q: How do we know Ray built the right Redis?

In the above commit, the SHA256 of the 5.0.9 source used was db9bf149e237126f9bb5f40fb72f33701819555d06f16e9a38b4949794214201 which matches the reported sha256sum of https://github.com/antirez/redis/archive/5.0.9.tar.gz (as of time of writing).
We can look in that archive and verify that the sha256 of the file inside matches that needed to fix the vulnerability:

From the git commit referenced in 5.0.9 (ce878b6):

57bc18e91a747a846ba76c070d9213452283c0ed9e652861ee7fabf87d590878  deps/lua/src/lua_struct.c


From the tarball with the exact sha256 that ray built against:

57bc18e91a747a846ba76c070d9213452283c0ed9e652861ee7fabf87d590878  deps/lua/src/lua_struct.c


Commit from the NIST page (ef764dde1cca2f25d00686673d1bc89448819571):

57bc18e91a747a846ba76c070d9213452283c0ed9e652861ee7fabf87d590878  deps/lua/src/lua_struct.c





		</comment>
		<comment id='12' author='aregm' date='2020-11-11T02:56:24Z'>
		
To be clear for the community; this vulnerability (CVE-2020-14147) is not present in current Ray and has not been since 2020-07-03 nightly or release 0.8.6.

This has not been independently verified by NIST. The links on the NVD are there for information only and are links to third party resources. It should be up to the user whether to accept these third party opinions, and we should be careful not to obfuscate the fact that NIST has this CVE classified as up to (excluding) Redis 6.0.3, which means Ray is currently vulnerable (scroll to the bottom of the &lt;denchmark-link:https://nvd.nist.gov/vuln/detail/CVE-2020-14147#vulnConfigurationsArea&gt;page&lt;/denchmark-link&gt;
 to see it). We do not yet know if the only changes necessary to fix the vulnerability are those found in the PR, NIST is currently reanalyzing the CVE.
According to the NVD this vulnerability is still present in Ray.
I do not think we should close this issue in favor of opening an issue for tracking an update to Redis. The issue is not resolved.
		</comment>
		<comment id='13' author='aregm' date='2020-11-12T02:16:16Z'>
		&lt;denchmark-link:https://github.com/aregm&gt;@aregm&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/ray-project/ray/pull/11371&gt;#11371&lt;/denchmark-link&gt;
 fixes this in nightly Ray; can you verify the issue no longer exists in the latest wheels?
		</comment>
		<comment id='14' author='aregm' date='2020-11-12T22:53:25Z'>
		Thanks &lt;denchmark-link:https://github.com/ericl&gt;@ericl&lt;/denchmark-link&gt;
, we began testing earlier today. It takes some time to get results back and we will share once we have them.
		</comment>
		<comment id='15' author='aregm' date='2020-11-14T03:31:22Z'>
		&lt;denchmark-link:https://github.com/ericl&gt;@ericl&lt;/denchmark-link&gt;
 , thanks for updating the dependencies, but only redis and c-ares are updated. Lua dependency vulnerability still persists. Can you please update Lua to version 5.4.1?
		</comment>
		<comment id='16' author='aregm' date='2020-11-17T13:35:32Z'>
		&lt;denchmark-link:https://github.com/ericl&gt;@ericl&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/richardliaw&gt;@richardliaw&lt;/denchmark-link&gt;
 The Lua version is still a problem, updating Lua to 5.4.1 will resolve the issue.
		</comment>
		<comment id='17' author='aregm' date='2020-11-18T07:23:42Z'>
		&lt;denchmark-link:https://github.com/devin-petersohn&gt;@devin-petersohn&lt;/denchmark-link&gt;
 does the tool provide any more info (e.g., location or file or something)? We don't directly use Lua in the project (and I can't find references to it in the codebase right now). Redis uses Lua for some stuff, so it must have something to do with Redis.
		</comment>
		<comment id='18' author='aregm' date='2020-11-18T22:56:40Z'>
		&lt;denchmark-link:https://github.com/robertnishihara&gt;@robertnishihara&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/zhe-thoughts&gt;@zhe-thoughts&lt;/denchmark-link&gt;
 The tool scans the binary and its dependencies, and as the Lua is a dynamic library loaded by redis-server and is a part of the Redis package dependencies, it triggers the scan and the list of vulnerabilities. Look for the file liblua.so and links liblua.so.5.1, liblua.so.5.1.5. It also could be installed in your build dependencies on a system level.
&lt;denchmark-h:h2&gt;Output from the tool&lt;/denchmark-h&gt;

Current version - 5.1.5 OUTDATED
Latest version - 5.4.1
CVE-2020-15889
CVE-2020-24342
CVE-2020-15888
CVE-2014-5461
CVE-2020-15945
So if you are not actively using it, then just the upgrade of the version should be sufficient. The scan tool needs to see a reference to the right version of the library and appropriate symbols.
		</comment>
		<comment id='19' author='aregm' date='2020-11-19T22:09:26Z'>
		&lt;denchmark-link:https://github.com/barakmich&gt;@barakmich&lt;/denchmark-link&gt;
 any idea why upgrading redis doesn't also pull in the newest Lua? I don't think we have a direct dependency.
		</comment>
		<comment id='20' author='aregm' date='2020-11-30T22:13:21Z'>
		&lt;denchmark-link:https://github.com/zhe-thoughts&gt;@zhe-thoughts&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/ericl&gt;@ericl&lt;/denchmark-link&gt;
 - ping. Any updates?
		</comment>
		<comment id='21' author='aregm' date='2020-12-01T22:04:09Z'>
		&lt;denchmark-link:https://github.com/aregm&gt;@aregm&lt;/denchmark-link&gt;
 seems like Redis team is not upgrading Lua, see &lt;denchmark-link:https://github.com/redis/redis/issues/7715&gt;redis/redis#7715&lt;/denchmark-link&gt;
. The issue linked says they they have patched their Lua so it is secure: "The Lua fix for CVE-2014-5461 is resolved by &lt;denchmark-link:https://github.com/ray-project/ray/pull/7733&gt;#7733&lt;/denchmark-link&gt;
."
So there's not much we can do other than removing our dependency on Redis entirely (which is impossible to do in the short term).
		</comment>
		<comment id='22' author='aregm' date='2020-12-01T22:32:59Z'>
		Eric, I think you wanted to link to the redis PR &lt;denchmark-link:https://github.com/redis/redis/pull/7733&gt;redis/redis#7733&lt;/denchmark-link&gt;
 instead of the Ray PR in the last post :)
		</comment>
		<comment id='23' author='aregm' date='2020-12-04T04:42:09Z'>
		&lt;denchmark-link:https://github.com/redis/redis/pull/7733&gt;redis/redis#7733&lt;/denchmark-link&gt;
 - is being reviewed by a security specialist.
		</comment>
		<comment id='24' author='aregm' date='2020-12-04T18:43:54Z'>
		Thanks for the update &lt;denchmark-link:https://github.com/aregm&gt;@aregm&lt;/denchmark-link&gt;
 . So in summary, the work we have done on this issue (upgrading the Redis version used in Ray), combined with &lt;denchmark-link:https://github.com/redis/redis/pull/7733&gt;redis/redis#7733&lt;/denchmark-link&gt;
, should be adequate to address the security concern your team identified, right?
I really appreciate everyone's work and collaboration on this so far.
		</comment>
		<comment id='25' author='aregm' date='2020-12-15T05:19:52Z'>
		For a given use case and context looks good, but should be updated for the next release.
		</comment>
		<comment id='26' author='aregm' date='2020-12-15T05:50:14Z'>
		OK great, thanks for following up &lt;denchmark-link:https://github.com/aregm&gt;@aregm&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>