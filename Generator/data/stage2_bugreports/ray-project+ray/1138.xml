<bug id='1138' author='robertnishihara' open_date='2017-10-18T23:10:01Z' closed_time='2017-11-09T07:56:33Z'>
	<summary>Segfault when using custom serializer that defines and returns an object.</summary>
	<description>
The last line causes a segfault (both Linux and Mac).
import numpy as np
import ray

ray.init()

class Bar(object):
    pass

def custom_serializer(obj):
    x = np.zeros(4)
    return x

def custom_deserializer(serialized_obj):
    return serialized_obj

ray.worker.global_worker.serialization_context.register_type(Bar, 20 * b"\xf0", pickle=False, custom_serializer=custom_serializer, custom_deserializer=custom_deserializer)

x_id = ray.put(Bar())
Compiling both Arrow and Ray in debug mode and without optimizations, doing ulimit -c unlimited, and loading the core file in lldb on a Mac, we see the following backtrace
&lt;denchmark-code&gt;(lldb) bt
* thread #1, stop reason = signal SIGSTOP
  * frame #0: 0x0000000103163260 libpython3.6m.dylib`PyGILState_Ensure
    frame #1: 0x0000000106061108 lib.cpython-36m-darwin.so`__pyx_f_7pyarrow_3lib_check_status(__pyx_v_status=0x00007fff5cba05c0) at lib.cxx:8301
    frame #2: 0x000000010df59e48 plasma.cpython-36m-darwin.so`__pyx_pf_7pyarrow_6plasma_12PlasmaClient_2create(__pyx_v_self=0x000000010e073c30, __pyx_v_object_id=0x000000010573af58, __pyx_v_data_size=2264, __pyx_v_metadata="") at plasma.cxx:4193
    frame #3: 0x000000010df579f0 plasma.cpython-36m-darwin.so`__pyx_pw_7pyarrow_6plasma_12PlasmaClient_3create(__pyx_v_self=0x000000010e073c30, __pyx_args=0x00000001056cffc8, __pyx_kwds=0x0000000000000000) at plasma.cxx:4153
    frame #4: 0x00000001030b6792 libpython3.6m.dylib`PyCFunction_Call + 98
    frame #5: 0x000000010df4c1d8 plasma.cpython-36m-darwin.so`__Pyx_PyObject_Call(func=0x000000010e0bc4c8, arg=0x00000001056cffc8, kw=0x0000000000000000) at plasma.cxx:9231
    frame #6: 0x000000010df5c7fe plasma.cpython-36m-darwin.so`__pyx_pf_7pyarrow_6plasma_12PlasmaClient_8put(__pyx_v_self=0x000000010e073c30, __pyx_v_value=0x0000000105765c18, __pyx_v_object_id=0x000000010573af58, __pyx_v_serialization_context=0x000000010e09fd18) at plasma.cxx:4904
    frame #7: 0x000000010df586b9 plasma.cpython-36m-darwin.so`__pyx_pw_7pyarrow_6plasma_12PlasmaClient_9put(__pyx_v_self=0x000000010e073c30, __pyx_args=0x000000010e0b0510, __pyx_kwds=0x0000000000000000) at plasma.cxx:4738
    frame #8: 0x00000001030b694a libpython3.6m.dylib`_PyCFunction_FastCallDict + 186
    frame #9: 0x0000000103138787 libpython3.6m.dylib`call_function + 439
    frame #10: 0x0000000103134f62 libpython3.6m.dylib`_PyEval_EvalFrameDefault + 27346
    frame #11: 0x00000001031391ef libpython3.6m.dylib`_PyEval_EvalCodeWithName + 2447
    frame #12: 0x0000000103139a91 libpython3.6m.dylib`fast_function + 545
    frame #13: 0x0000000103138761 libpython3.6m.dylib`call_function + 401
    frame #14: 0x0000000103134f62 libpython3.6m.dylib`_PyEval_EvalFrameDefault + 27346
    frame #15: 0x00000001031399ed libpython3.6m.dylib`fast_function + 381
    frame #16: 0x0000000103138761 libpython3.6m.dylib`call_function + 401
    frame #17: 0x0000000103134f62 libpython3.6m.dylib`_PyEval_EvalFrameDefault + 27346
    frame #18: 0x00000001031391ef libpython3.6m.dylib`_PyEval_EvalCodeWithName + 2447
    frame #19: 0x0000000103139a91 libpython3.6m.dylib`fast_function + 545
    frame #20: 0x0000000103138761 libpython3.6m.dylib`call_function + 401
    frame #21: 0x0000000103134f62 libpython3.6m.dylib`_PyEval_EvalFrameDefault + 27346
    frame #22: 0x00000001031391ef libpython3.6m.dylib`_PyEval_EvalCodeWithName + 2447
    frame #23: 0x000000010312e3d4 libpython3.6m.dylib`PyEval_EvalCode + 100
    frame #24: 0x000000010312bb54 libpython3.6m.dylib`builtin_exec + 548
    frame #25: 0x00000001030b6a81 libpython3.6m.dylib`_PyCFunction_FastCallDict + 497
    frame #26: 0x0000000103138787 libpython3.6m.dylib`call_function + 439
    frame #27: 0x0000000103134f62 libpython3.6m.dylib`_PyEval_EvalFrameDefault + 27346
    frame #28: 0x00000001031391ef libpython3.6m.dylib`_PyEval_EvalCodeWithName + 2447
    frame #29: 0x0000000103139a91 libpython3.6m.dylib`fast_function + 545
    frame #30: 0x0000000103138761 libpython3.6m.dylib`call_function + 401
    frame #31: 0x0000000103134f62 libpython3.6m.dylib`_PyEval_EvalFrameDefault + 27346
    frame #32: 0x00000001031391ef libpython3.6m.dylib`_PyEval_EvalCodeWithName + 2447
    frame #33: 0x0000000103139a91 libpython3.6m.dylib`fast_function + 545
    frame #34: 0x0000000103138761 libpython3.6m.dylib`call_function + 401
    frame #35: 0x0000000103135001 libpython3.6m.dylib`_PyEval_EvalFrameDefault + 27505
    frame #36: 0x00000001031391ef libpython3.6m.dylib`_PyEval_EvalCodeWithName + 2447
    frame #37: 0x0000000103139a91 libpython3.6m.dylib`fast_function + 545
    frame #38: 0x0000000103138761 libpython3.6m.dylib`call_function + 401
    frame #39: 0x0000000103135001 libpython3.6m.dylib`_PyEval_EvalFrameDefault + 27505
    frame #40: 0x00000001031391ef libpython3.6m.dylib`_PyEval_EvalCodeWithName + 2447
    frame #41: 0x0000000103139a91 libpython3.6m.dylib`fast_function + 545
    frame #42: 0x0000000103138761 libpython3.6m.dylib`call_function + 401
    frame #43: 0x0000000103134f62 libpython3.6m.dylib`_PyEval_EvalFrameDefault + 27346
    frame #44: 0x00000001031391ef libpython3.6m.dylib`_PyEval_EvalCodeWithName + 2447
    frame #45: 0x0000000103139a91 libpython3.6m.dylib`fast_function + 545
    frame #46: 0x0000000103138761 libpython3.6m.dylib`call_function + 401
    frame #47: 0x0000000103134f62 libpython3.6m.dylib`_PyEval_EvalFrameDefault + 27346
    frame #48: 0x00000001031399ed libpython3.6m.dylib`fast_function + 381
    frame #49: 0x0000000103138761 libpython3.6m.dylib`call_function + 401
    frame #50: 0x0000000103134f62 libpython3.6m.dylib`_PyEval_EvalFrameDefault + 27346
    frame #51: 0x00000001031391ef libpython3.6m.dylib`_PyEval_EvalCodeWithName + 2447
    frame #52: 0x0000000103139d92 libpython3.6m.dylib`_PyFunction_FastCallDict + 738
    frame #53: 0x000000010306e677 libpython3.6m.dylib`_PyObject_FastCallDict + 247
    frame #54: 0x000000010306e795 libpython3.6m.dylib`_PyObject_Call_Prepend + 149
    frame #55: 0x000000010306e4b0 libpython3.6m.dylib`PyObject_Call + 96
    frame #56: 0x0000000103135245 libpython3.6m.dylib`_PyEval_EvalFrameDefault + 28085
    frame #57: 0x00000001031391ef libpython3.6m.dylib`_PyEval_EvalCodeWithName + 2447
    frame #58: 0x0000000103139a91 libpython3.6m.dylib`fast_function + 545
    frame #59: 0x0000000103138761 libpython3.6m.dylib`call_function + 401
    frame #60: 0x0000000103134f62 libpython3.6m.dylib`_PyEval_EvalFrameDefault + 27346
    frame #61: 0x00000001031391ef libpython3.6m.dylib`_PyEval_EvalCodeWithName + 2447
    frame #62: 0x000000010312e3d4 libpython3.6m.dylib`PyEval_EvalCode + 100
    frame #63: 0x00000001031640f1 libpython3.6m.dylib`PyRun_FileExFlags + 209
    frame #64: 0x00000001031638a3 libpython3.6m.dylib`PyRun_SimpleFileExFlags + 851
    frame #65: 0x000000010317c70f libpython3.6m.dylib`Py_Main + 3535
    frame #66: 0x000000010305cdf8 python`main + 232
    frame #67: 0x00007fffa46fc235 libdyld.dylib`start + 1
&lt;/denchmark-code&gt;

Note that if we define a variant with
l = []

def custom_serializer(obj):
    x = np.zeros(4)
    l.append(x)
    return x
then it works. So presumably x is getting deallocated too early or something like that.
This bug was reported by &lt;denchmark-link:https://github.com/pcmoritz&gt;@pcmoritz&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='robertnishihara' date='2017-10-18T23:29:54Z'>
		Interesting, it seems to me that the crash is not happening in the main thread. E.g., it often happens after ray.put has successfully executed.
E.g., running x_id = ray.put(Bar()); print("HI") will successfully print HI and will then crash. Also putting a long sleep before the return in ray.put will cause the crash to happen during ray.put.
		</comment>
		<comment id='2' author='robertnishihara' date='2017-10-18T23:59:05Z'>
		When I initially saw it, it was happening in PyObject_Malloc somewhere very unrelated to the code; There is probably a memory corruption/refcounting issue.
		</comment>
		<comment id='3' author='robertnishihara' date='2017-10-20T21:36:29Z'>
		The underlying bug should be fixed in &lt;denchmark-link:https://github.com/apache/arrow/pull/1220&gt;apache/arrow#1220&lt;/denchmark-link&gt;
, so we just need to rebase on the latest arrow.
		</comment>
		<comment id='4' author='robertnishihara' date='2017-11-09T07:56:33Z'>
		This has been fixed.
		</comment>
	</comments>
</bug>