<bug id='3477' author='robertnishihara' open_date='2018-12-05T22:38:59Z' closed_time='2020-01-23T18:53:23Z'>
	<summary>Segmentation fault when calling ray.put on a TensorFlow Variable when in eager mode.</summary>
	<description>
&lt;denchmark-h:h3&gt;System information&lt;/denchmark-h&gt;


OS Platform and Distribution (e.g., Linux Ubuntu 16.04): MacOS
Ray installed from (source or binary): source
Ray version: c5b5cda (which is a bit after 0.6.0)
Python version: 3.6

import ray
import tensorflow as tf

ray.init(num_cpus=0)

tf.enable_eager_execution()

x = tf.Variable([2.0])

ray.put(x)
The backtrace in lldb is uninformative
&lt;denchmark-code&gt;&gt;&gt;&gt; ray.put(x)
Process 99807 stopped
* thread #1, queue = 'com.apple.main-thread', stop reason = EXC_BAD_ACCESS (code=1, address=0x0)
    frame #0: 0x0000000113b7d579
-&gt;  0x113b7d579: movq   (%rdi), %rax
    0x113b7d57c: decq   %rax
    0x113b7d57f: movq   %rax, (%rdi)
    0x113b7d582: jne    0x113b7d58b
Target 0: (_fblas.cpython-36m-darwin.so) stopped.
(lldb) 
error: No auto repeat.
(lldb) bt
* thread #1, queue = 'com.apple.main-thread', stop reason = EXC_BAD_ACCESS (code=1, address=0x0)
  * frame #0: 0x0000000113b7d579
    frame #1: 0x0000000100051cc4
    frame #2: 0x000000010016361b
    frame #3: 0x00000001001632ac
    frame #4: 0x0000000100160f4c
    frame #5: 0x0000000100154589
    frame #6: 0x00000001001636aa
    frame #7: 0x00000001001632ac
    frame #8: 0x0000000100160ffc
    frame #9: 0x0000000100154589
    frame #10: 0x00000001001636aa
    frame #11: 0x00000001001632ac
    frame #12: 0x0000000100160f4c
    frame #13: 0x00000001001635fc
    frame #14: 0x00000001001632ac
    frame #15: 0x0000000100160f4c
    frame #16: 0x0000000100154589
    frame #17: 0x00000001001636aa
    frame #18: 0x00000001001632ac
    frame #19: 0x0000000100160f4c
    frame #20: 0x0000000100154589
    frame #21: 0x00000001001aee26
    frame #22: 0x00000001001abb51
    frame #23: 0x00000001001ab97b
    frame #24: 0x00000001001d2168
    frame #25: 0x0000000100001e7d
    frame #26: 0x00007fff64b04015
(lldb) 
&lt;/denchmark-code&gt;

Note that if I comment out tf.enable_eager_execution(), it raises a Python exception
&lt;denchmark-code&gt;In [4]: ray.put(x)
   ...: 
WARNING: Pickling the class &lt;class 'SwigPyObject'&gt; failed, so we are using pickle and only registering the class locally.
---------------------------------------------------------------------------
TypeError                                 Traceback (most recent call last)
&lt;ipython-input-4-383968956bb7&gt; in &lt;module&gt;()
----&gt; 1 ray.put(x)

~/ray_scratch/ray/python/ray/worker.py in put(value, worker)
   2384         object_id = worker.local_scheduler_client.compute_put_id(
   2385             worker.current_task_id, worker.put_index)
-&gt; 2386         worker.put_object(object_id, value)
   2387         worker.put_index += 1
   2388         return object_id

~/ray_scratch/ray/python/ray/worker.py in put_object(self, object_id, value)
    409         # Serialize and put the object in the object store.
    410         try:
--&gt; 411             self.store_and_register(object_id, value)
    412         except pyarrow.PlasmaObjectExists:
    413             # The object already exists in the object store, so there is no

~/ray_scratch/ray/python/ray/worker.py in store_and_register(self, object_id, value, depth)
    344                     memcopy_threads=self.memcopy_threads,
    345                     serialization_context=self.get_serialization_context(
--&gt; 346                         self.task_driver_id))
    347                 break
    348             except pyarrow.SerializationCallbackError as e:

~/ray_scratch/ray/python/ray/utils.py in _wrapper(*args, **kwargs)
    402                 def _wrapper(*args, **kwargs):
    403                     with self.lock:
--&gt; 404                         return orig_attr(*args, **kwargs)
    405 
    406                 self._wrapper_cache[attr] = _wrapper

~/ray_scratch/ray/python/ray/pyarrow_files/pyarrow/_plasma.pyx in pyarrow._plasma.PlasmaClient.put()

~/ray_scratch/ray/python/ray/pyarrow_files/pyarrow/serialization.pxi in pyarrow.lib.serialize()

~/ray_scratch/ray/python/ray/pyarrow_files/pyarrow/serialization.pxi in pyarrow.lib.SerializationContext._serialize_callback()

~/ray_scratch/ray/python/ray/cloudpickle/cloudpickle.py in dumps(obj, protocol)
    879     try:
    880         cp = CloudPickler(file, protocol=protocol)
--&gt; 881         cp.dump(obj)
    882         return file.getvalue()
    883     finally:

~/ray_scratch/ray/python/ray/cloudpickle/cloudpickle.py in dump(self, obj)
    266         self.inject_addons()
    267         try:
--&gt; 268             return Pickler.dump(self, obj)
    269         except RuntimeError as e:
    270             if 'recursion' in e.args[0]:

~/anaconda3/lib/python3.6/pickle.py in dump(self, obj)
    407         if self.proto &gt;= 4:
    408             self.framer.start_framing()
--&gt; 409         self.save(obj)
    410         self.write(STOP)
    411         self.framer.end_framing()

~/anaconda3/lib/python3.6/pickle.py in save(self, obj, save_persistent_id)
    494             reduce = getattr(obj, "__reduce_ex__", None)
    495             if reduce is not None:
--&gt; 496                 rv = reduce(self.proto)
    497             else:
    498                 reduce = getattr(obj, "__reduce__", None)

TypeError: can't pickle SwigPyObject objects
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='robertnishihara' date='2020-01-23T18:53:22Z'>
		No longer segfaults.
		</comment>
	</comments>
</bug>