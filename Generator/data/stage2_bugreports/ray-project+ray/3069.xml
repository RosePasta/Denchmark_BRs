<bug id='3069' author='old-bear' open_date='2018-10-16T09:32:52Z' closed_time='2018-11-05T05:46:48Z'>
	<summary>[tune] Exception raised when there is no more trials</summary>
	<description>
&lt;denchmark-h:h3&gt;System information&lt;/denchmark-h&gt;


OS Platform and Distribution (e.g., Linux Ubuntu 16.04): MacOS 10.11
Ray installed from (source or binary): binary
Ray version: 0.5.3
Python version: 2.7
Exact command to reproduce:

&lt;denchmark-h:h3&gt;Describe the problem&lt;/denchmark-h&gt;

For SeachAlgorithm, if next_trials returns empty and is_finished yields True. The following happens in TrialRunner:
&lt;denchmark-code&gt;   def step(self):
        ...
        next_trial = self._get_next_trial()      &lt;----- no more trial, which yields None here
        if next_trial is not None:
            self.trial_executor.start_trial(next_trial)
        elif self.trial_executor.get_running_trials():      &lt;--- all trials completes, so no more running trials
            self._process_events()
        else:
            ....
            raise TuneError("Called step when all trials finished?")    &lt;--- reach here
&lt;/denchmark-code&gt;

&lt;denchmark-h:h3&gt;Source code / logs&lt;/denchmark-h&gt;

See above
For the solution, I think we can add
&lt;denchmark-code&gt;if not self._search_alg.is_finished():
    raise(...)
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='old-bear' date='2018-10-16T15:41:20Z'>
		What is the situation where this occurs? Do you have an example for
reproducing?
&lt;denchmark-link:#&gt;…&lt;/denchmark-link&gt;


On Tue, Oct 16, 2018 at 2:33 AM old-bear ***@***.***&gt; wrote:
 System information

    - *OS Platform and Distribution (e.g., Linux Ubuntu 16.04)*: MacOS
    10.11
    - *Ray installed from (source or binary)*: binary
    - *Ray version*: 0.5.3
    - *Python version*: 2.7
    - *Exact command to reproduce*:

 Describe the problem

 For SeachAlgorithm, if next_trials returns empty and is_finished yields
 True. The following happens in TrialRunner:

    def step(self):
         ...
         next_trial = self._get_next_trial()      &lt;----- no more trial, which yields None here
         if next_trial is not None:
             self.trial_executor.start_trial(next_trial)
         elif self.trial_executor.get_running_trials():      &lt;--- all trials completes, so no more running trials
             self._process_events()
         else:
             ....
             raise TuneError("Called step when all trials finished?")    &lt;--- reach here

 Source code / logs

 See above

 For the solution, I think we can add

 if not self._search_alg.is_finished():
     raise(...)

 —
 You are receiving this because you are subscribed to this thread.
 Reply to this email directly, view it on GitHub
 &lt;#3069&gt;, or mute the thread
 &lt;https://github.com/notifications/unsubscribe-auth/AEUc5TDMU6F7o93IkEQSC7JmnLn8uqGaks5ulafMgaJpZM4Xd883&gt;
 .



		</comment>
		<comment id='2' author='old-bear' date='2018-10-16T18:47:29Z'>
		We already check search_alg.is_finished() in runner.is_finished(), so I don't think we should even be entering step() if the search algo is finished.
		</comment>
		<comment id='3' author='old-bear' date='2018-10-17T02:21:57Z'>
		The situation may be a little tricky:
&lt;denchmark-code&gt;class MySearchAlgorithm(SearchAlgorithm):
    def next_trials(self):
        # doing some calcuation
        # here is_finished is still False
        ... 
        # and decide we should stop here
        self._is_finished = true
        return []

    def is_finished(self):
        return self._is_finished 
&lt;/denchmark-code&gt;

When using this algorithm, the check in tune.py before will pass:
&lt;denchmark-code&gt;    while not runner.is_finished():
        runner.step()     &lt;-- run step here
&lt;/denchmark-code&gt;

, and thus trigger this problem.
As for the search algorithm, although we can move all the calculation into on_trial_result and just return the calculated ones in next_trials to avoid this problem, I think that would be quite unnatural
		</comment>
		<comment id='4' author='old-bear' date='2018-10-17T04:42:30Z'>
		I see, that makes sense!
		</comment>
	</comments>
</bug>