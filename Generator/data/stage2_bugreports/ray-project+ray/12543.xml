<bug id='12543' author='roireshef' open_date='2020-12-01T19:09:40Z' closed_time='2020-12-17T22:29:17Z'>
	<summary>[core] Using ray wheels with latest master in a Python soft-link setup breaks</summary>
	<description>
&lt;denchmark-h:h3&gt;What is the problem?&lt;/denchmark-h&gt;

I'm trying to edit ray python code with using latest nightly build and soft-linking to my Ray repo using the script in:
&lt;denchmark-link:https://docs.ray.io/en/master/development.html#building-ray-python-only&gt;https://docs.ray.io/en/master/development.html#building-ray-python-only&lt;/denchmark-link&gt;

It fails on missing files and constants. The soft-linking script is probably missing some files, but I'm not entirely sure which ones to add and which to not.
Ray version and other system information (Python version, TensorFlow version, OS):
Latest nightly wheel
Latest master branch
&lt;denchmark-h:h3&gt;Reproduction (REQUIRED)&lt;/denchmark-h&gt;


install latest Ray nightly wheel and run he script in https://docs.ray.io/en/master/development.html#building-ray-python-only
Run any Tune experiment


 I have verified my script runs in a clean environment and reproduces the issue.
 I have verified the issue also occurs with the latest wheels.

	</description>
	<comments>
		<comment id='1' author='roireshef' date='2020-12-01T19:28:55Z'>
		Thanks for filing this issue. Which commit are you on? This might be related to &lt;denchmark-link:https://github.com/ray-project/ray/commit/9021f15b2ac4a72187c7770f6a8f6d3a6f3373bd&gt;9021f15&lt;/denchmark-link&gt;
 cc &lt;denchmark-link:https://github.com/sven1977&gt;@sven1977&lt;/denchmark-link&gt;

		</comment>
		<comment id='2' author='roireshef' date='2020-12-02T00:32:59Z'>
		
Thanks for filing this issue. Which commit are you on? This might be related to 9021f15 cc @sven1977

&lt;denchmark-link:https://github.com/simon-mo&gt;@simon-mo&lt;/denchmark-link&gt;
 I'm on &lt;denchmark-link:https://github.com/ray-project/ray/commit/9021f15b2ac4a72187c7770f6a8f6d3a6f3373bd&gt;9021f15&lt;/denchmark-link&gt;
  but please do note that there are quite a few exceptions thrown asking for different files that aren't mapped with soft links but neither exist in the nightly build.

It might be a good idea to include a test that makes sure this setup isn't broken when PRs are getting approved by your build system.

		</comment>
		<comment id='3' author='roireshef' date='2020-12-02T00:34:27Z'>
		&lt;denchmark-link:https://github.com/sven1977&gt;@sven1977&lt;/denchmark-link&gt;
 can you help?
		</comment>
		<comment id='4' author='roireshef' date='2020-12-14T20:15:51Z'>
		&lt;denchmark-link:https://github.com/roireshef&gt;@roireshef&lt;/denchmark-link&gt;
 do you have a reproduction of this? For reference, this seems to consistently work for me when doing autoscaler development.
Happy to find some time to sit down with you pair debug if this is still an issue btw.
For reference, here's a cluster yaml of my typical setup:
&lt;denchmark-code&gt;# Experimental: an example of configuring a mixed-node-type cluster.
cluster_name: alex
min_workers: 0
max_workers: 40

# Cloud-provider specific configuration.
provider:
    type: aws
    region: us-west-1
    availability_zone: us-west-1a

# Tell the autoscaler the allowed node types and the resources they provide.
# The key is the name of the node type, which is just for debugging purposes.
# The node config specifies the launch config and physical instance type.
available_node_types:
    cpu_4_ondemand:
        node_config:
            InstanceType: m4.xlarge
        # For AWS instances, autoscaler will automatically add the available
        # CPUs/GPUs/accelerator_type ({"CPU": 4} for m4.xlarge) in "resources".
        resources: {"CPU": 4}
        min_workers: 2
        max_workers: 5
    custom1:
        node_config:
            InstanceType: m4.4xlarge
            InstanceMarketOptions:
                MarketType: spot
        resources: {"Custom1": 1}
        max_workers: 10
    custom2:
        node_config:
            InstanceType: m4.4xlarge
            InstanceMarketOptions:
                MarketType: spot
        resources: {"Custom2": 2}
        max_workers: 4

# Specify the node type of the head node (as configured above).
head_node_type: cpu_4_ondemand

# Specify the default type of the worker node (as configured above).
worker_default_node_type: cpu_4_ondemand

# The default settings for the head node. This will be merged with the per-node
# type configs given above.
head_node:
    ImageId: latest_dlami

# The default settings for worker nodes. This will be merged with the per-node
# type configs given above.
worker_nodes:
    ImageId: latest_dlami

setup_commands:
    - pip install -U https://s3-us-west-2.amazonaws.com/ray-wheels/latest/ray-1.1.0.dev0-cp37-cp37m-manylinux2014_x86_64.whl
    - git clone --branch master https://github.com/wuisawesome/ray.git || true
    - pushd ray; git reset --hard; popd;
    - ray/python/ray/setup-dev.py -y 
    - rm /home/ubuntu/anaconda3/lib/python3.7/site-packages/ray/monitor.py
    - ln -s /home/ubuntu/ray/python/ray/monitor.py /home/ubuntu/anaconda3/lib/python3.7/site-packages/ray/monitor.py


# Configure the cluster for very conservative auto-scaling otherwise.
target_utilization_fraction: 1.0
idle_timeout_minutes: 2

# How Ray will authenticate with newly launched nodes.
auth:
    ssh_user: ubuntu
&lt;/denchmark-code&gt;

		</comment>
		<comment id='5' author='roireshef' date='2020-12-16T00:44:19Z'>
		Hi &lt;denchmark-link:https://github.com/wuisawesome&gt;@wuisawesome&lt;/denchmark-link&gt;
 Ive never used autoscaler since I'm running on premise. The repro is very simple and already detailed in the body of the original ticket &lt;denchmark-link:https://github.com/ray-project/ray/issues/12543#issue-754650947&gt;#12543 (comment)&lt;/denchmark-link&gt;

To make even more clear, I was trying to use the following script:
python python/ray/setup-dev.py which used to work but now seems to be broken for some reason(s)
Have you tried running specifically this script with latest nightly wheel and the repo on master branch and it worked for you??
		</comment>
		<comment id='6' author='roireshef' date='2020-12-16T00:51:41Z'>
		Yeah, as you can see, my cluster yaml pulls the latest nightly wheel, and runs setup-dev.py.
The one caveat is that if setup-dev.py doesn't symlink files in the module's top level directory, so if you're changing those, you need manually symlink them (see the monitor.py example).
		</comment>
		<comment id='7' author='roireshef' date='2020-12-16T00:57:14Z'>
		I also tried linking monitor.py like you suggest in your yaml file.
This is the result I'm getting:
&lt;denchmark-code&gt;Traceback (most recent call last):
...
  File "/home/kz430x/.local/lib/python3.6/site-packages/ray/tune/tune.py", line 358, in run
    callbacks, sync_config, loggers=loggers)
  File "/home/kz430x/.local/lib/python3.6/site-packages/ray/tune/utils/callback.py", line 89, in create_default_callbacks
    _sync_to_driver = detect_sync_to_driver(sync_config.sync_to_driver)
  File "/home/kz430x/.local/lib/python3.6/site-packages/ray/tune/syncer.py", line 457, in detect_sync_to_driver
    from ray.tune.integration.docker import DockerSyncer
  File "/home/kz430x/.local/lib/python3.6/site-packages/ray/tune/integration/docker.py", line 5, in &lt;module&gt;
    from ray.autoscaler.sdk import rsync, configure_logging
  File "/home/kz430x/.local/lib/python3.6/site-packages/ray/autoscaler/sdk.py", line 9, in &lt;module&gt;
    from ray.autoscaler._private import commands
  File "/home/kz430x/.local/lib/python3.6/site-packages/ray/autoscaler/_private/commands.py", line 25, in &lt;module&gt;
    from ray.autoscaler.node_provider import NodeProvider
  File "/home/kz430x/.local/lib/python3.6/site-packages/ray/autoscaler/node_provider.py", line 6, in &lt;module&gt;
    from ray.autoscaler._private.command_runner import \
  File "/home/kz430x/.local/lib/python3.6/site-packages/ray/autoscaler/_private/command_runner.py", line 15, in &lt;module&gt;
    from ray.autoscaler._private.constants import \
  File "/home/kz430x/.local/lib/python3.6/site-packages/ray/autoscaler/_private/constants.py", line 3, in &lt;module&gt;
    from ray.ray_constants import (  # noqa F401
ImportError: cannot import name 'DEFAULT_OBJECT_STORE_MEMORY_PROPORTION'
(pid=raylet) Traceback (most recent call last):
(pid=raylet)   File "/home/kz430x/.local/lib/python3.6/site-packages/ray/new_dashboard/agent.py", line 27, in &lt;module&gt;
(pid=raylet)     from ray.ray_logging import setup_component_logger
(pid=raylet) ModuleNotFoundError: No module named 'ray.ray_logging'
&lt;/denchmark-code&gt;

And now soft-linking ray_constants and ray_logging doesn't seem to be enough either. It just leads to other exceptions, and it seems like there are few things broken with this setup.
		</comment>
		<comment id='8' author='roireshef' date='2020-12-16T01:00:57Z'>
		hmmm what commit is your nightly wheel? (python -c "import ray; print(ray.__commit__)")
Also when was the last time you rebased/merged upstream/master into your branch?
		</comment>
		<comment id='9' author='roireshef' date='2020-12-16T01:32:07Z'>
		
hmmm what commit is your nightly wheel? (python -c "import ray; print(ray.__commit__)")

&lt;denchmark-link:https://github.com/ray-project/ray/commit/9527220a868fbd57aa7617fa9a5eacecd56602db&gt;9527220&lt;/denchmark-link&gt;


Also when was the last time you rebased/merged upstream/master into your branch?

Just now.
		</comment>
		<comment id='10' author='roireshef' date='2020-12-16T01:37:15Z'>
		I now see my ray build is on a commit from Nov 4, which is already outdated, and this issue might have already been fixed by now. Problem is, running ray install-nightly doesn't seem to update to the latest nightly wheel. What should I do to update?
It does seem to download the wheel from presumably the correct url though, just that re-running print(ray.__commit__) results with the same commit id as before:
&lt;denchmark-code&gt;Running: /usr/bin/python3 -m pip install -U --no-cache-dir https://s3-us-west-2.amazonaws.com/ray-wheels/latest/ray-1.1.0.dev0-cp36-cp36m-manylinux1_x86_64.whl.
Collecting ray==1.1.0.dev0
  Downloading https://s3-us-west-2.amazonaws.com/ray-wheels/latest/ray-1.1.0.dev0-cp36-cp36m-manylinux1_x86_64.whl (23.8 MB)
     |████████████████████████████████| 23.8 MB 313 kB/s 
&lt;/denchmark-code&gt;

		</comment>
		<comment id='11' author='roireshef' date='2020-12-16T01:39:19Z'>
		Ah yes, ray install-nightly broke for 1 commit when we updated from manylinux1 to manylinux14.
Can you try grabbing the latest nightly from the table here? &lt;denchmark-link:https://docs.ray.io/en/master/installation.html#daily-releases-nightlies&gt;https://docs.ray.io/en/master/installation.html#daily-releases-nightlies&lt;/denchmark-link&gt;

Sorry about that :/
		</comment>
		<comment id='12' author='roireshef' date='2020-12-16T01:43:46Z'>
		
Ah yes, ray install-nightly broke for 1 commit when we updated from manylinux1 to manylinux14.

It might be worth documenting that somewhere so others won't get stuck as well...
Anyway, I'm trying now.
		</comment>
		<comment id='13' author='roireshef' date='2020-12-16T01:54:03Z'>
		Yes, it works. Thanks &lt;denchmark-link:https://github.com/wuisawesome&gt;@wuisawesome&lt;/denchmark-link&gt;
 !
		</comment>
		<comment id='14' author='roireshef' date='2020-12-16T01:56:05Z'>
		No problem! It seems like this was a one-off issue due to the manylinux upgrade, but let us know (or submit a PR) if you have any suggestions around improving the documentation for this :)
		</comment>
		<comment id='15' author='roireshef' date='2020-12-16T16:24:03Z'>
		I'm reopening this, as ray start keeps crashing at startup with:
&lt;denchmark-code&gt;Some Ray subprcesses exited unexpectedly:
  dashboard [exit code=0]
&lt;/denchmark-code&gt;

And the dashboard temp log file shows:
&lt;denchmark-code&gt;2020-12-16 18:17:37,557	INFO head.py:49 -- Dashboard head grpc address: 10.66.64.193:35879
2020-12-16 18:17:37,557	INFO head.py:51 -- Dashboard head http address: localhost:6006
2020-12-16 18:17:37,561	WARNING dashboard.py:208 -- The dashboard on node ILHERLNCN2QWDVF failed with the following error:
Traceback (most recent call last):
  File "/usr/local/lib/python3.6/dist-packages/ray/new_dashboard/dashboard.py", line 192, in &lt;module&gt;
    log_dir=args.log_dir)
  File "/usr/local/lib/python3.6/dist-packages/ray/new_dashboard/dashboard.py", line 81, in __init__
    build_dir = setup_static_dir()
  File "/usr/local/lib/python3.6/dist-packages/ray/new_dashboard/dashboard.py", line 45, in setup_static_dir
    "&amp;&amp; npm run build)", build_dir)
FileNotFoundError: [Errno 2] Dashboard build directory not found. If installing from source, please follow the additional steps required to build the dashboard(cd python/ray/new_dashboard/client &amp;&amp; npm install &amp;&amp; npm ci &amp;&amp; npm run build): '/usr/local/lib/python3.6/dist-packages/ray/new_dashboard/client/build'
&lt;/denchmark-code&gt;

&lt;denchmark-link:https://github.com/wuisawesome&gt;@wuisawesome&lt;/denchmark-link&gt;
 any magic trick for that one? (besides disabling the dashboard completely)
		</comment>
		<comment id='16' author='roireshef' date='2020-12-16T18:33:39Z'>
		Hey &lt;denchmark-link:https://github.com/roireshef&gt;@roireshef&lt;/denchmark-link&gt;
 to fix this, I think you'll need to run . This is occurring because the  script sym links the dashboard code as well to allow for development on the dashboard without building entirely from source. That said, it requires the locally sym linked dashboard be built manually by the user.
		</comment>
		<comment id='17' author='roireshef' date='2020-12-16T18:34:08Z'>
		Please let me know if you run into any difficulties running that command, and I'll help debug.
		</comment>
		<comment id='18' author='roireshef' date='2020-12-16T19:41:14Z'>
		Hi &lt;denchmark-link:https://github.com/mfitton&gt;@mfitton&lt;/denchmark-link&gt;
 - I am running into difficulties with building locally, probably related to some npm dependencies. This is something I tried to avoid. I mean, the whole purpose of the  script is to avoid building any software locally, as it's using the Ray binaries, plus softlinking the python code. If you have to build the software anyways, it loses its point, right? Why is the dashboard different? Is this how it is meant to be?
		</comment>
		<comment id='19' author='roireshef' date='2020-12-16T20:05:32Z'>
		I've always considered the setup-dev.py script to be a way to develop on the non-CPP non-ray-core part of the code without having to compile the C++ binary. It essentially takes all the non C++ parts of Ray and links them in place of those parts of Ray in a pre-built ray wheel.
To provide some justification for why it is this way--if it didn't symlink the dashboard, then you wouldn't be able to use this to develop on the dashboard, which is something we frequently do. Furthermore, the dashboard depends on the python code of Ray, less-so the C++ code of Ray, so if you changed the dashboard python code without changing the front-end running on the dashboard python code, there would likely be issues with the dashboard front-end not rendering. This makes it a little odd to link the built version of the dashboard to the C++ binary rather than to the Python code.
That said, you can comment out this line to prevent the dashboard being symlinked: &lt;denchmark-link:https://github.com/ray-project/ray/blob/master/python/ray/setup-dev.py#L73&gt;https://github.com/ray-project/ray/blob/master/python/ray/setup-dev.py#L73&lt;/denchmark-link&gt;

Maybe we can consider making the dashboard linking a flag to the setup-dev.py script. Thoughts &lt;denchmark-link:https://github.com/edoakes&gt;@edoakes&lt;/denchmark-link&gt;
?
		</comment>
		<comment id='20' author='roireshef' date='2020-12-16T20:06:32Z'>
		You can also copy the client/build directory from the ray wheel install to the new_dashboard/client/build directory of the code you're sym-linking.
		</comment>
		<comment id='21' author='roireshef' date='2020-12-16T20:33:10Z'>
		&lt;denchmark-link:https://github.com/mfitton&gt;@mfitton&lt;/denchmark-link&gt;
, I see. I think the cleaner solution would be to modify  to sym-link only the new_dashboard contents, excluding , which as far as I see, comes with the ray wheel. This way running setup-dev.py will not require re-building the dashboard, as well as copying folders around, and you could still develop the python code of it.
		</comment>
		<comment id='22' author='roireshef' date='2020-12-16T20:35:58Z'>
		A better, longer term solution, would be to take the client/build folder out of the python code's folder, because it doesn't belong there. This way you could easily sym-link the new_dashboard folder as a whole.
		</comment>
		<comment id='23' author='roireshef' date='2020-12-17T00:29:26Z'>
		I frequently want to use the development version of the dashboard typescript code in addition to the development version of the dashboard javascript code, and want the shown dashboard UI to be the one built from the code on the branch I'm developing on, rather than the version included with the master branch. What if the setup.py script built the dashboard as part of its script?
That said, I can definitely see the argument that the client/build folder doesn't belong in the src directory at all, and that the typescript code itself could also live in a different directory. I still think some kind of switch in the setup-dev.py script would be ideal.
		</comment>
		<comment id='24' author='roireshef' date='2020-12-17T01:21:11Z'>
		
What if the setup.py script built the dashboard as part of its script

Ideally we can do this via bazel though (which effectively makes it part of setup.py)
		</comment>
		<comment id='25' author='roireshef' date='2020-12-17T01:32:21Z'>
		&lt;denchmark-link:https://github.com/wuisawesome&gt;@wuisawesome&lt;/denchmark-link&gt;
 can you expand upon that a little bit? I'm not super familiar with Bazel. Does this mean we define the dashboard build as a Bazel task and then can run that Bazel task (or not, depending on the flag) based on whether the flag is passed to setup-dev? Or am I way off base?
		</comment>
		<comment id='26' author='roireshef' date='2020-12-17T01:41:12Z'>
		Yup, the rough idea would be to create a new bazel target, then add that to . &lt;denchmark-link:https://github.com/barakmich&gt;@barakmich&lt;/denchmark-link&gt;
 thoughts?
		</comment>
		<comment id='27' author='roireshef' date='2020-12-17T11:48:19Z'>
		&lt;denchmark-link:https://github.com/mfitton&gt;@mfitton&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/wuisawesome&gt;@wuisawesome&lt;/denchmark-link&gt;
 - Having to build any part of the software requires meeting dependencies (bazel, npm, etc.) and much move overhead than just installing the binaries (wheel). The  script is doing a great job by avoiding that, and still, allow modifying the  code in a clean an concise way. I think it should be relatively straightforward to move the  artifacts into a different folder than any of the ones  sym-links to the local github repo. Finally,  already  if the user wants to sym-link any of the folders, or not, so it'll be up to the user to decide whether he'd like to build the dashboard (and sym-link ) or just keep using the artifacts from the wheel.
This essentially means moving the build target to a new folder and adding this folder to the setup-dev.sh script. I'm just not familiar with niether the dashboard code, npm, bazel nor typescript, so I have some steep learning curve to do that, otherwise I'd create the PR myself... :(
		</comment>
		<comment id='28' author='roireshef' date='2020-12-17T22:29:13Z'>
		Agree that this should just be part of the regular bazel build/setup.py workflow. Opened an issue tracking this improvement here:
&lt;denchmark-link:https://github.com/ray-project/ray/issues/12956&gt;#12956&lt;/denchmark-link&gt;

Another to improve this error message:
&lt;denchmark-link:https://github.com/ray-project/ray/issues/12956&gt;#12956&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>