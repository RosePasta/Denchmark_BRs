<bug id='3440' author='raulchen' open_date='2018-11-30T03:44:40Z' closed_time='2020-03-04T00:51:27Z'>
	<summary>[bug] Actor handle cannot be handled twice</summary>
	<description>
Script to reproduce:
&lt;denchmark-code&gt;ray.init()

@ray.remote
class Foo(object):
    def method(self):
	pass

f = Foo.remote()
ray.get(f.method.remote())
f1 = ray.worker.pickle.loads(ray.worker.pickle.dumps(f))
ray.get(f1.method.remote())
f2 = ray.worker.pickle.loads(ray.worker.pickle.dumps(f1))
ray.get(f2.method.remote())
&lt;/denchmark-code&gt;

Right now, the above script will fail, because when we pickle and unpickle f1 to get f2. f1._ray_actor_handle_id is None. Then this line will fail: 


ray/python/ray/actor.py


         Line 756
      in
      07d8cbf






 state["previous_actor_handle_id"])) 




.
However, if it's also wrong to simply change that line to previous_actor_handle_id=ray.ObjectID(state["previous_actor_handle_id"])) if state["previous_actor_handle_id"] else None. Because then f2's previous_actor_handle_id will be None and it will be considered as the original handle.
Also, If I let f2 share f1's previous_actor_handle_id, this script still doesn't work. because f1.method.remote() and f2.method.remote() will use the same handle id (because of compute_actor_handle_id_non_forked) and counter to submit task. The latter task will be dropped by raylet, because raylet thinks it's a duplicate task submission.
&lt;denchmark-link:https://github.com/robertnishihara&gt;@robertnishihara&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/stephanie-wang&gt;@stephanie-wang&lt;/denchmark-link&gt;
 what do you think is the best way to fix this issue?
	</description>
	<comments>
		<comment id='1' author='raulchen' date='2018-11-30T18:19:16Z'>
		Related to &lt;denchmark-link:https://github.com/ray-project/ray/issues/2115&gt;#2115&lt;/denchmark-link&gt;
.
This is a bit tricky. Actor handles are a bit brittle currently in the way they can be used and passed around.
		</comment>
		<comment id='2' author='raulchen' date='2018-12-20T03:17:44Z'>
		In &lt;denchmark-link:https://github.com/ray-project/ray/pull/3560&gt;#3560&lt;/denchmark-link&gt;
, I'm changing this to always set an actor handle ID, so we no longer store .
How does the following solution sound?

The original handle has num_forks = 0, handle_id = nil.
If the handle is passed into another task, then we do handle.num_forks += 1 and store the new handle ID as handle_id' = hash(handle.handle_id || num_forks). When the handle is unpickled as part of the task argument, it uses handle_id' as its handle ID directly.
If the handle is pickled, then we do handle.num_forks += 1 and store the new handle ID as handle_id' = hash(handle.handle_id || num_forks). When the handle is manually unpickled, it takes the stored value and hashes it with the current task ID, so its ID will be hash(handle_id' || worker.current_task_id).

		</comment>
		<comment id='3' author='raulchen' date='2018-12-21T08:37:16Z'>
		&lt;denchmark-link:https://github.com/stephanie-wang&gt;@stephanie-wang&lt;/denchmark-link&gt;
 sounds good to me.
It looks like that in &lt;denchmark-link:https://github.com/ray-project/ray/pull/3560&gt;#3560&lt;/denchmark-link&gt;
, you change the code to generate a permanent handle id when the handle is unpickled. So this issue should be easy to fix.
Previously, the handle will be computed dynamically every time when we submit a task. &lt;denchmark-link:https://github.com/robertnishihara&gt;@robertnishihara&lt;/denchmark-link&gt;
 commented with a counter example in that PR, but I didn't understand that example. I also left a comment there.
		</comment>
		<comment id='4' author='raulchen' date='2020-03-04T00:51:33Z'>
		No longer relevant.
		</comment>
	</comments>
</bug>