<bug id='4840' author='jovany-wang' open_date='2019-05-23T13:14:04Z' closed_time='2020-03-11T12:12:18Z'>
	<summary>Actor cannot be restored after killing a node.</summary>
	<description>
&lt;denchmark-h:h3&gt;How to reprod:&lt;/denchmark-h&gt;


Start a Ray cluster with one node(called nodeA).
Run an actor(called actorA, with checkpointable) in the cluster.
Connect a new node(called nodeB) to the cluster.
Kill nodeA.

Then the actorA cannot be restored on the nodeB since there are no state info of actorA in the actor_registry_ of nodeB's NodeManager.
A feasible scenario is to load all actor info from GCS into actor_registry_ when a node connecting to the cluster.
	</description>
	<comments>
		<comment id='1' author='jovany-wang' date='2019-06-11T00:25:08Z'>
		One way to fix this would be to have  look up  in the GCS if it cannot find an entry in its local . We do this already for a similar scenario, where  wants to submit a task to  but doesn't have its location yet (&lt;denchmark-link:https://github.com/ray-project/ray/blob/master/src/ray/raylet/node_manager.cc#L1603&gt;code&lt;/denchmark-link&gt;
).
		</comment>
		<comment id='2' author='jovany-wang' date='2019-06-14T10:42:42Z'>
		&lt;denchmark-link:https://github.com/stephanie-wang&gt;@stephanie-wang&lt;/denchmark-link&gt;
 the problem is that  never knows  had existed before.
		</comment>
		<comment id='3' author='jovany-wang' date='2019-06-14T18:56:52Z'>
		
@stephanie-wang the problem is that nodeB never knows actorA had existed before.

Right, because the pubsub notification from the actor table came before it connected, right? I'm suggesting that nodeB looks up the entry from the actor table once it hears about actorA's failure.
		</comment>
		<comment id='4' author='jovany-wang' date='2019-06-16T04:40:07Z'>
		

@stephanie-wang the problem is that nodeB never knows actorA had existed before.

Right, because the pubsub notification from the actor table came before it connected, right? I'm suggesting that nodeB looks up the entry from the actor table once it hears about actorA's failure.

nodeB only gets notification of nodeA's failure, it won't know the IDs of the actors that were on nodeA. So it can't look up the actorA exactly, it can only query the whole actor table (or query all actors on nodeA if we have such an index).
		</comment>
		<comment id='5' author='jovany-wang' date='2019-06-17T17:35:57Z'>
		I see, are you suggesting that nodeB reconstructs actorA automatically? I was assuming that nodeB would only restore the actor if it needs some result from the actor, but yes, it may not have actorA's ID otherwise.
		</comment>
		<comment id='6' author='jovany-wang' date='2019-06-18T03:42:16Z'>
		yeah, we need the failed actors to be reconstructed automatically. E.g., the source actors in streaming system. They pull data from external storage, no one would send them tasks to trigger reconstruction.
		</comment>
		<comment id='7' author='jovany-wang' date='2019-06-24T07:55:58Z'>
		&lt;denchmark-link:https://github.com/stephanie-wang&gt;@stephanie-wang&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/raulchen&gt;@raulchen&lt;/denchmark-link&gt;

So the final approach may be creating an index from driver_id to actor_ids of this driver in GCS, right?
		</comment>
		<comment id='8' author='jovany-wang' date='2019-06-24T08:31:20Z'>
		I don't think this depends on indexing that. The node needs to load all existing actors on startup.
		</comment>
		<comment id='9' author='jovany-wang' date='2019-06-24T08:53:25Z'>
		
I don't think this depends on indexing that. The node needs to load all existing actors on startup.

Sorry, I meant adding a field to store all the actor_ids of the cluster in GCS.
		</comment>
		<comment id='10' author='jovany-wang' date='2019-06-24T16:52:39Z'>
		Hmm is it feasible to do a  of the actor table? This might be a good time to implement it, since we need it for &lt;denchmark-link:https://github.com/ray-project/ray/pull/4935&gt;#4935&lt;/denchmark-link&gt;
 too.
		</comment>
		<comment id='11' author='jovany-wang' date='2019-06-25T02:56:36Z'>
		yeah, we can simply scan by the actor table prefix
		</comment>
		<comment id='12' author='jovany-wang' date='2020-03-11T12:12:18Z'>
		This is already fixed.
		</comment>
	</comments>
</bug>