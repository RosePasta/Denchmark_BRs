<bug id='6801' author='simon-mo' open_date='2020-01-16T00:07:32Z' closed_time='2020-01-17T22:58:07Z'>
	<summary>Async init shouldn't be required inside async actor</summary>
	<description>
---------------------------------------------------------------------------
RayTaskError(AssertionError)              Traceback (most recent call last)
&lt;ipython-input-17-3d607351d5d7&gt; in &lt;module&gt;
----&gt; 1 ray.get(a.something.remote())

~/Desktop/ray/ray/python/ray/worker.py in get(object_ids, timeout)
   1480                     worker.core_worker.dump_object_store_memory_usage()
   1481                 if isinstance(value, RayTaskError):
-&gt; 1482                     raise value.as_instanceof_cause()
   1483                 else:
   1484                     raise value

RayTaskError(AssertionError): ray::AsyncActor.something() (pid=26320, ip=10.142.32.76)
  File "python/ray/_raylet.pyx", line 643, in ray._raylet.execute_task
  File "python/ray/_raylet.pyx", line 621, in function_executor
  File "/Users/simonmo/miniconda3/lib/python3.6/concurrent/futures/_base.py", line 425, in result
    return self.__get_result()
  File "/Users/simonmo/miniconda3/lib/python3.6/concurrent/futures/_base.py", line 384, in __get_result
    raise self._exception
  File "&lt;ipython-input-6-b3532e96dec8&gt;", line 7, in something
  File "python/ray/includes/unique_ids.pxi", line 199, in ray._raylet.ObjectID.__await__
  File "/Users/simonmo/Desktop/ray/ray/python/ray/async_compat.py", line 38, in get_async
    async_api_init()
  File "/Users/simonmo/Desktop/ray/ray/python/ray/experimental/async_api.py", line 98, in init
    "You are using async_api inside a running event loop. "
AssertionError: You are using async_api inside a running event loop. Please call `await _async_init()` to initialize inside asynchrounous context.


In [20]: @ray.remote
    ...: class AsyncActor:
    ...:     async def something(self):
    ...:         import asyncio
    ...:         await _async_init()
    ...:         await asyncio.sleep(0.)
    ...:         print("Done")
    ...:         result = await task.remote() &lt;- somethow this requires asyncio API to be initialized
    ...:         print(result)
    ...:         ray.get(task.remote())
	</description>
	<comments>
	</comments>
</bug>