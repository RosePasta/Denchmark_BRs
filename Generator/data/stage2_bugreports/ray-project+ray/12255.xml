<bug id='12255' author='PidgeyBE' open_date='2020-11-23T08:12:44Z' closed_time='2020-11-24T17:13:16Z'>
	<summary>[autoscaler/k8s] Autoscaler does not recover from interruption of k8s API</summary>
	<description>
&lt;denchmark-h:h3&gt;What is the problem?&lt;/denchmark-h&gt;


ray==1.0.0
kubernetes autoscaling

&lt;denchmark-h:h3&gt;Reproduction (REQUIRED)&lt;/denchmark-h&gt;

In for example Google Cloud, it is not uncommon for the kubernetes master to be rebooted (e.g. when node-pools are added/removed, master is upgraded, etc..).
However, in this case, the k8s API used by ray autoscale is temporarily unavailable and the autoscale monitor crashes, without recovering. The head node is kept, to keep log files, but since the monitor stopped, autoscaling is not possible anymore.
In a production environment this is unacceptable behavior. Either the monitor should restart itself after failure (preferred) or the head node should also kill itself to keep the autoscaling cluster state consistent. In the latter case, the software using the ray cluster could restart the ray cluster itself.
Issue can be reproduced by e.g. killing a kubernetes master node.
Example logs:
&lt;denchmark-link:https://github.com/ray-project/ray/files/5581604/monitor.out.txt&gt;monitor.out.txt&lt;/denchmark-link&gt;

&lt;denchmark-link:https://github.com/ray-project/ray/files/5581606/monitor.errr.txt&gt;monitor.errr.txt&lt;/denchmark-link&gt;

In this case the issue occured in . The same could happen when starting a new worker pod though, I'm not sure what will happen then...
If we cannot run your script, we cannot fix your issue.

 I have verified my script runs in a clean environment and reproduces the issue.
 I have verified the issue also occurs with the latest wheels.

	</description>
	<comments>
		<comment id='1' author='PidgeyBE' date='2020-11-23T23:41:47Z'>
		^ PR above looks good.
Also &lt;denchmark-link:https://github.com/PidgeyBE&gt;@PidgeyBE&lt;/denchmark-link&gt;
 I think you can set AUTOSCALER_MAX_NUM_FAILURES=99999 to achieve a similar effect:


		</comment>
	</comments>
</bug>