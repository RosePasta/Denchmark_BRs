<bug id='6534' author='zplizzi' open_date='2019-12-18T23:21:21Z' closed_time='2020-11-28T04:57:11Z'>
	<summary>[rllib] PrioritizedReplayBuffer.update_priorities on overwritten samples?</summary>
	<description>
From reviewing the source of PrioritizedReplayBuffer.update_priorities, it doesn't seem like there's any mechanism to keep track of samples that have been overwritten in the buffer.
The failure scenario would be:

Sample a batch of samples with indices idxs from the buffer for training
train on the batch and get updated priorities
while training on the batch, new samples have been received from the game-play workers. some of the indices in idxs may have now been replaced by new samples, due to the fact that ReplayBuffer is a fixed-size ring buffer
call buffer.update_priorities() with the new priorities for idxs. some of these indices no longer correspond to the data sample they originally did when they were sampled, so the priority will be incorrect when applied to the new sample.

	</description>
	<comments>
		<comment id='1' author='zplizzi' date='2019-12-19T02:01:09Z'>
		Good catch! Maybe we can explicitly track the version of the data we are overwriting or something?
		</comment>
		<comment id='2' author='zplizzi' date='2019-12-19T22:45:45Z'>
		Yeah, I think the easiest way is to assign each sample a unique key (eg from a global counter, a random hash, etc), and use that as an identifier. Then if you get an updated priority for a key that has been evicted from the buffer, you can just drop it.
		</comment>
		<comment id='3' author='zplizzi' date='2020-11-14T04:33:56Z'>
		Hi, I'm a bot from the Ray team :)
To help human contributors to focus on more relevant issues, I will automatically add the stale label to issues that have had no activity for more than 4 months.
If there is no further activity in the 14 days, the issue will be closed!

If you'd like to keep the issue open, just leave any comment, and the stale label will be removed!
If you'd like to get more attention to the issue, please tag one of Ray's contributors.

You can always ask for help on our &lt;denchmark-link:https://discuss.ray.io/&gt;discussion forum&lt;/denchmark-link&gt;
 or &lt;denchmark-link:https://github.com/ray-project/ray#getting-involved&gt;Ray's public slack channel&lt;/denchmark-link&gt;
.
		</comment>
		<comment id='4' author='zplizzi' date='2020-11-28T04:57:07Z'>
		Hi again! The issue will be closed because there has been no more activity in the 14 days since the last message.
Please feel free to reopen or open a new issue if you'd still like it to be addressed.
Again, you can always ask for help on our &lt;denchmark-link:https://discuss.ray.io&gt;discussion forum&lt;/denchmark-link&gt;
 or &lt;denchmark-link:https://github.com/ray-project/ray#getting-involved&gt;Ray's public slack channel&lt;/denchmark-link&gt;
.
Thanks again for opening the issue!
		</comment>
	</comments>
</bug>