<bug id='10869' author='ericl' open_date='2020-09-17T23:22:40Z' closed_time='2020-09-18T20:39:01Z'>
	<summary>[autoscaler] Inconsistent reporting of worker node types</summary>
	<description>
On master, it seems I have a cluster with a cpu_4_ondemand head node and cpu_64_ondemand worker (68 CPUs in total), but somehow the debug string is reporting 2 workers of cpu_64_ondemand (which is wrong, since there is only 1 worker node, and the head node is cpu_4_ondemand).
YAML: &lt;denchmark-link:https://gist.github.com/ericl/f9c32b8bbbe4e1aed43899832730f70d&gt;https://gist.github.com/ericl/f9c32b8bbbe4e1aed43899832730f70d&lt;/denchmark-link&gt;
 (switching the Ray version to latest wheel)
&lt;denchmark-code&gt; - ResourceUsage: 0.0/68.0 CPU, 0.0/1.0 Custom1, 0.0 GiB/198.65 GiB memory, 0.0
GiB/59.19 GiB object_store_memory
 - TimeSinceLastHeartbeat: Min=0 Mean=0 Max=0
Worker node types:
 - cpu_64_ondemand: 2

&lt;/denchmark-code&gt;

cc &lt;denchmark-link:https://github.com/wuisawesome&gt;@wuisawesome&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='ericl' date='2020-09-17T23:24:20Z'>
		this is a bug in the debug string right? or are you noticing the wrong number of instances?
		</comment>
		<comment id='2' author='ericl' date='2020-09-17T23:34:32Z'>
		&lt;denchmark-code&gt;2020-09-17 23:33:35,234	INFO resource_demand_scheduler.py:68 -- Cluster resources: [{'node:172.30.2.59': 1.0, 'CPU': 4.0, 'memory': 187.0, 'object_store_memory': 64.0}, {'CPU': 64.0, 'memory': 3598.0, 'node:172.30.2.114': 1.0, 'object_store_memory': 1064.0}]
2020-09-17 23:33:35,234	INFO resource_demand_scheduler.py:69 -- Node counts: defaultdict(&lt;class 'int'&gt;, {'cpu_4_ondemand': 2, 'cpu_64_ondemand': 2})
2020-09-17 23:33:35,235	INFO resource_demand_scheduler.py:72 -- Resource demands: [{'accelerator_type:V100': 0.001, 'CPU': 1.0}]
2020-09-17 23:33:35,235	INFO resource_demand_scheduler.py:73 -- Unfulfilled demands: [{'accelerator_type:V100': 0.001, 'CPU': 1.0}]
2020-09-17 23:33:35,235	INFO resource_demand_scheduler.py:79 -- Node requests: []
&lt;/denchmark-code&gt;

Here's some more inconsistency, with the node counts dict reporting 4 nodes instead of 2.
I'm not sure if this is impacting autoscaling, but it seems likely if the node counts dict is reused for scheduling.
		</comment>
		<comment id='3' author='ericl' date='2020-09-17T23:57:05Z'>
		ok i can reproduce the logging issue, doesn't seem to impact autoscaling behavior
		</comment>
		<comment id='4' author='ericl' date='2020-09-18T00:17:16Z'>
		IIUC now the conclusion is it does impact the behavior, right?
		</comment>
		<comment id='5' author='ericl' date='2020-09-18T00:38:09Z'>
		Yeah this will impact behavior if we need to instances of a type that is already up
		</comment>
	</comments>
</bug>