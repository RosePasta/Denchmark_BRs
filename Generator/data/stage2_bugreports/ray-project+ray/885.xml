<bug id='885' author='robertnishihara' open_date='2017-08-29T01:19:18Z' closed_time='2018-08-10T18:00:29Z'>
	<summary>Segfault when script finishes.</summary>
	<description>
I've seen this problem before, but it mostly recently occurred on a Mac with Python 3.6 when I ran
&lt;denchmark-code&gt;python ray/examples/hyperopt/hyperopt_adaptive.py --num-segments=1 --num-starting-segments=1
&lt;/denchmark-code&gt;

The script runs successfully and then when everything is exiting it segfaults.
Running the script in lldb gives the following backtrace.
&lt;denchmark-code&gt;libnumbuf.so was compiled with optimization - stepping may behave oddly; variables may not be available.
Process 10458 stopped
* thread #1: tid = 0x15ece8a, 0x000000010dd39c6c libnumbuf.so`plasma::PlasmaClient::Release(plasma::UniqueID const&amp;) [inlined] void std::__1::allocator&lt;plasma::UniqueID&gt;::construct&lt;plasma::UniqueID, plasma::UniqueID const&amp;&gt;(__args=0x000000011ab0d4b0) + 4 at memory:1740, queue = 'com.apple.main-thread', stop reason = EXC_BAD_ACCESS (code=EXC_I386_GPFLT)
    frame #0: 0x000000010dd39c6c libnumbuf.so`plasma::PlasmaClient::Release(plasma::UniqueID const&amp;) [inlined] void std::__1::allocator&lt;plasma::UniqueID&gt;::construct&lt;plasma::UniqueID, plasma::UniqueID const&amp;&gt;(__args=0x000000011ab0d4b0) + 4 at memory:1740 [opt]
   1737	        void
   1738	        construct(_Up* __p, _Args&amp;&amp;... __args)
   1739	        {
-&gt; 1740	            ::new((void*)__p) _Up(_VSTD::forward&lt;_Args&gt;(__args)...);
   1741	        }
   1742	#else  // !defined(_LIBCPP_HAS_NO_RVALUE_REFERENCES) &amp;&amp; !defined(_LIBCPP_HAS_NO_VARIADICS)
   1743	        _LIBCPP_INLINE_VISIBILITY
(lldb) bt
* thread #1: tid = 0x15ece8a, 0x000000010dd39c6c libnumbuf.so`plasma::PlasmaClient::Release(plasma::UniqueID const&amp;) [inlined] void std::__1::allocator&lt;plasma::UniqueID&gt;::construct&lt;plasma::UniqueID, plasma::UniqueID const&amp;&gt;(__args=0x000000011ab0d4b0) + 4 at memory:1740, queue = 'com.apple.main-thread', stop reason = EXC_BAD_ACCESS (code=EXC_I386_GPFLT)
  * frame #0: 0x000000010dd39c6c libnumbuf.so`plasma::PlasmaClient::Release(plasma::UniqueID const&amp;) [inlined] void std::__1::allocator&lt;plasma::UniqueID&gt;::construct&lt;plasma::UniqueID, plasma::UniqueID const&amp;&gt;(__args=0x000000011ab0d4b0) + 4 at memory:1740 [opt]
    frame #1: 0x000000010dd39c68 libnumbuf.so`plasma::PlasmaClient::Release(plasma::UniqueID const&amp;) [inlined] void std::__1::allocator_traits&lt;std::__1::allocator&lt;plasma::UniqueID&gt; &gt;::__construct&lt;plasma::UniqueID, plasma::UniqueID const&amp;&gt;(std::__1::integral_constant&lt;bool, true&gt;, std::__1::allocator&lt;plasma::UniqueID&gt;&amp;, plasma::UniqueID*, plasma::UniqueID const&amp;&amp;&amp;) at memory:1656 [opt]
    frame #2: 0x000000010dd39c68 libnumbuf.so`plasma::PlasmaClient::Release(plasma::UniqueID const&amp;) [inlined] void std::__1::allocator_traits&lt;std::__1::allocator&lt;plasma::UniqueID&gt; &gt;::construct&lt;plasma::UniqueID, plasma::UniqueID const&amp;&gt;(std::__1::allocator&lt;plasma::UniqueID&gt;&amp;, plasma::UniqueID*, plasma::UniqueID const&amp;&amp;&amp;) at memory:1502 [opt]
    frame #3: 0x000000010dd39c68 libnumbuf.so`plasma::PlasmaClient::Release(plasma::UniqueID const&amp;) [inlined] std::__1::deque&lt;plasma::UniqueID, std::__1::allocator&lt;plasma::UniqueID&gt; &gt;::push_front(this=&lt;unavailable&gt;) + 91 at deque:1816 [opt]
    frame #4: 0x000000010dd39c0d libnumbuf.so`plasma::PlasmaClient::Release(this=0x000000010250b510, object_id=0x000000011ab0d4b0) + 45 at client.cc:332 [opt]
    frame #5: 0x000000010dcaf468 libnumbuf.so`BufferCapsule_Destructor(_object*) + 152
    frame #6: 0x00000001000eaf87 libpython3.6m.dylib`capsule_dealloc + 23
    frame #7: 0x00000001040056d3 multiarray.cpython-36m-darwin.so`array_dealloc + 99
    frame #8: 0x00000001000d6c49 libpython3.6m.dylib`free_keys_object + 137
    frame #9: 0x00000001000d8a63 libpython3.6m.dylib`dict_dealloc + 195
    frame #10: 0x00000001000d6c49 libpython3.6m.dylib`free_keys_object + 137
    frame #11: 0x00000001000d8fa9 libpython3.6m.dylib`dict_tp_clear + 9
    frame #12: 0x00000001001aa748 libpython3.6m.dylib`collect + 2168
    frame #13: 0x00000001001a9ebc libpython3.6m.dylib`_PyGC_CollectNoFail + 44
    frame #14: 0x0000000100181eb4 libpython3.6m.dylib`PyImport_Cleanup + 1156
    frame #15: 0x000000010018e4c8 libpython3.6m.dylib`Py_FinalizeEx + 104
    frame #16: 0x00000001001a97d5 libpython3.6m.dylib`Py_Main + 3733
    frame #17: 0x0000000100000df8 python`main + 232
    frame #18: 0x00007fffdee72255 libdyld.dylib`start + 1
    frame #19: 0x00007fffdee72255 libdyld.dylib`start + 1
(lldb) 
&lt;/denchmark-code&gt;

	</description>
	<comments>
	</comments>
</bug>