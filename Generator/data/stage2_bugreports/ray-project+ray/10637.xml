<bug id='10637' author='sytelus' open_date='2020-09-08T06:16:23Z' closed_time='2020-09-15T18:21:27Z'>
	<summary>[ray] Problematic pickle5 version check in ray.init()</summary>
	<description>
On Windows, Python 3.7, ray.init() fails with error that pickle5 distribution was not found under certain conditions.
&lt;denchmark-code&gt;ray: 0.8.7
python: 3.7.7
conda: 4.8.4
OS: Windows 10
&lt;/denchmark-code&gt;

This error occurs in the following code in ray.init():
&lt;denchmark-code&gt;if "pickle5" in sys.modules:
    import pkg_resources
    version_info = pkg_resources.require("pickle5")
&lt;/denchmark-code&gt;

The error occurs when some other module has added pickle5 from its private directory. In this case,  fails because the pickle5 wasn't installed while it still exist in sys.modules. I think above is a bad way to check version and prone to failure in ray.init itself. I'm also not sure why this version check is even being done as ray uses its private pickle5 files in subsequent lines anyway. So this check should either be removed OR may be use &lt;denchmark-link:https://stackoverflow.com/questions/8880661/getting-package-version-using-pkg-resources&gt;better methods&lt;/denchmark-link&gt;
.
Following is the error call stack:
&lt;denchmark-code&gt;  File "C:\Users\shitals\Anaconda3\lib\site-packages\ray\__init__.py", line 14, in &lt;module&gt;
    self._popen = self._Popen(self)
  File "C:\Users\shitals\Anaconda3\lib\multiprocessing\context.py", line 223, in _Popen
    version_info = pkg_resources.require("pickle5")
  File "C:\Users\shitals\Anaconda3\lib\site-packages\pkg_resources\__init__.py", line 901, in require
    return _default_context.get_context().Process._Popen(process_obj)
  File "C:\Users\shitals\Anaconda3\lib\multiprocessing\context.py", line 322, in _Popen
    needed = self.resolve(parse_requirements(requirements))
  File "C:\Users\shitals\Anaconda3\lib\site-packages\pkg_resources\__init__.py", line 787, in resolve
        return Popen(process_obj)raise DistributionNotFound(req, requirers)

  File "C:\Users\shitals\Anaconda3\lib\multiprocessing\popen_spawn_win32.py", line 89, in __init__
pkg_resources.DistributionNotFound: The 'pickle5' distribution was not found and is required by the application
    reduction.dump(process_obj, to_child)
  File "C:\Users\shitals\Anaconda3\lib\multiprocessing\reduction.py", line 60, in dump
    ForkingPickler(file, protocol).dump(obj)
BrokenPipeError: [Errno 32] Broken pipe
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='sytelus' date='2020-09-08T08:03:37Z'>
		cc &lt;denchmark-link:https://github.com/suquark&gt;@suquark&lt;/denchmark-link&gt;

&lt;denchmark-link:https://github.com/sytelus&gt;@sytelus&lt;/denchmark-link&gt;
 thanks a bunch for opening this issue! Could you also try the Ray master (nightly) wheels?
		</comment>
		<comment id='2' author='sytelus' date='2020-09-09T05:35:16Z'>
		The main issue is that pickle5 itself doesn't provide anything for version check (like version string etc). This is the only fairly stable way to check the pickle5 version (please correct me if there are better and stable ways). We enforce the version check, because previous pickle5 versions would leak memory (a known python 3.8.0 bug), causing hidden but serious troubles for users.
		</comment>
		<comment id='3' author='sytelus' date='2020-09-09T07:42:05Z'>
		&lt;denchmark-link:https://github.com/suquark&gt;@suquark&lt;/denchmark-link&gt;
 - I see you are using private pickle5 files anyway. So do you still need version checks? If you do, can we use &lt;denchmark-link:https://stackoverflow.com/questions/8880661/getting-package-version-using-pkg-resources&gt;other methods&lt;/denchmark-link&gt;
? If not, can we make warning instead of exception?
Currently ray.init() is straight out failing and we have no way to fix it because older pickle5 is loaded from some other dependency we use from their own private path. With this hard error, we simply cannot use ray.
		</comment>
		<comment id='4' author='sytelus' date='2020-09-09T18:49:15Z'>
		I think maybe the better way is to give users a warning when failed to detect the pickle5 version. In this case we cannot forcefully unload user's pickle5 module and replace with ours private pickle5 copy anyway, and users have to accept possible memory leaks if they are using previous pickle5 versions.
		</comment>
	</comments>
</bug>