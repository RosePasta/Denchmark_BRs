<bug id='2041' author='stephanie-wang' open_date='2018-05-11T22:25:51Z' closed_time='2018-05-31T23:58:04Z'>
	<summary>[xray] Terminated actors with queued tasks crashes raylet</summary>
	<description>
&lt;denchmark-h:h3&gt;Describe the problem&lt;/denchmark-h&gt;

Raylet expects actor tasks to be scheduled in order of submission. This is enforced with the actor task counter field in the task spec. However, the __ray_terminate__ task, submitted when the original actor handle goes out of scope, is scheduled to execute as soon as possible. This means that the terminate task will get scheduled before any other tasks that are queued for the same actor. Raylet then crashes because the terminate task has a higher task counter than expected.
&lt;denchmark-h:h3&gt;Source code / logs&lt;/denchmark-h&gt;

To reproduce:
import ray
import time
ray.init(use_raylet=True)

@ray.remote(num_cpus=0)
class Actor(object):
     def __init__(self):
         return
     def foo(self):
         time.sleep(1)
         return

a = Actor.remote()
# Submit a bunch of tasks.
for _ in range(1000):
  a.foo.remote()
# Delete the actor, which triggers the `__ray_terminate__` task.
del a
	</description>
	<comments>
		<comment id='1' author='stephanie-wang' date='2018-05-11T22:56:14Z'>
		As we discussed, one possible fix is to submit the terminate task from a different handle with counter = 0/1 (although this is a little hacky).
		</comment>
		<comment id='2' author='stephanie-wang' date='2018-05-31T23:58:04Z'>
		&lt;denchmark-link:https://github.com/ray-project/ray/pull/2052&gt;#2052&lt;/denchmark-link&gt;
 changed the actor Python code so that the  task gets submitted like any other task, so it executes after other methods submitted on the same handle. Therefore, this bug no longer exists.
		</comment>
		<comment id='3' author='stephanie-wang' date='2018-06-01T23:53:37Z'>
		Oh &lt;denchmark-link:https://github.com/stephanie-wang&gt;@stephanie-wang&lt;/denchmark-link&gt;
 you're right, though that was actually unintentional.
As you can see I changed self._actor_method_call("__ray_terminate__") to self.__ray_terminate__.remote() in
&lt;denchmark-link:https://github.com/ray-project/ray/pull/2052/files#diff-26de812097de95458ee3603979d523e0R839&gt;https://github.com/ray-project/ray/pull/2052/files#diff-26de812097de95458ee3603979d523e0R839&lt;/denchmark-link&gt;

but left the above comment in &lt;denchmark-link:https://github.com/ray-project/ray/pull/2052/files#diff-26de812097de95458ee3603979d523e0R837&gt;https://github.com/ray-project/ray/pull/2052/files#diff-26de812097de95458ee3603979d523e0R837&lt;/denchmark-link&gt;
.
Could this have caused any behavior changes for RLlib? Since &lt;denchmark-link:https://github.com/ericl&gt;@ericl&lt;/denchmark-link&gt;
 and &lt;denchmark-link:https://github.com/richardliaw&gt;@richardliaw&lt;/denchmark-link&gt;
 had mentioned preferring the immediate termination behavior.
		</comment>
	</comments>
</bug>