<bug id='859' author='robertnishihara' open_date='2017-08-22T23:05:27Z' closed_time='2017-10-03T01:11:12Z'>
	<summary>Instantiating A3C algorithm on CartPole-v0 fails.</summary>
	<description>
The following script fails because it is trying to use a convnet for CartPole.
import ray
import ray.rllib.a3c as a3c

ray.init(num_workers=0)

config = a3c.DEFAULT_CONFIG.copy()

algorithm = a3c.A3C('CartPole-v0', config)
It fails with the following error.
&lt;denchmark-code&gt;IndexError                                Traceback (most recent call last)
&lt;ipython-input-2-c0448808e101&gt; in &lt;module&gt;()
      6 config = a3c.DEFAULT_CONFIG.copy()
      7 
----&gt; 8 algorithm = a3c.A3C('CartPole-v0', config)

~/Workspace/ray/python/ray/rllib/a3c/a3c.py in __init__(self, env_name, config, policy_cls, upload_dir)
     94         self.env = create_env(env_name)
     95         self.policy = policy_cls(
---&gt; 96             self.env.observation_space.shape, self.env.action_space)
     97         self.agents = [
     98             Runner.remote(env_name, policy_cls, i,

~/Workspace/ray/python/ray/rllib/a3c/shared_model.py in __init__(self, ob_space, ac_space, **kwargs)
     13 class SharedModel(Policy):
     14     def __init__(self, ob_space, ac_space, **kwargs):
---&gt; 15         super(SharedModel, self).__init__(ob_space, ac_space, **kwargs)
     16 
     17     def setup_graph(self, ob_space, ac_space):

~/Workspace/ray/python/ray/rllib/a3c/policy.py in __init__(self, ob_space, ac_space, name, summarize)
     17         with self.g.as_default(), tf.device(worker_device):
     18             with tf.variable_scope(name):
---&gt; 19                 self.setup_graph(ob_space, ac_space)
     20                 assert all([hasattr(self, attr)
     21                             for attr in ["vf", "logits", "x", "var_list"]])

~/Workspace/ray/python/ray/rllib/a3c/shared_model.py in setup_graph(self, ob_space, ac_space)
     19         self.x = tf.placeholder(tf.float32, [None] + list(ob_space))
     20         dist_class, dist_dim = ModelCatalog.get_action_dist(ac_space)
---&gt; 21         self._model = ModelCatalog.ConvolutionalNetwork(self.x, dist_dim)
     22         self.logits = self._model.outputs
     23         self.vf = tf.reshape(linear(self._model.last_layer, 1, "value",

~/Workspace/ray/python/ray/rllib/models/catalog.py in ConvolutionalNetwork(inputs, num_outputs, options)
     73     @staticmethod
     74     def ConvolutionalNetwork(inputs, num_outputs, options=None):
---&gt; 75         return ConvolutionalNetwork(inputs, num_outputs, options)
     76 
     77     @staticmethod

~/Workspace/ray/python/ray/rllib/models/model.py in __init__(self, inputs, num_outputs, options)
     23         self.inputs = inputs
     24         self.outputs, self.last_layer = self._init(
---&gt; 25             inputs, num_outputs, options)
     26 
     27     def _init(self):

~/Workspace/ray/python/ray/rllib/models/convnet.py in _init(self, inputs, num_outputs, options)
     50         with tf.name_scope("convnet"):
     51             for i in range(4):
---&gt; 52                 x = tf.nn.elu(conv2d(x, 32, "l{}".format(i+1), [3, 3], [2, 2]))
     53             r, c = x.shape[1].value, x.shape[2].value
     54             x = tf.reshape(x, [-1, r*c*32])

~/Workspace/ray/python/ray/rllib/models/convnet.py in conv2d(x, num_filters, name, filter_size, stride, pad, dtype, collections)
     14     with tf.variable_scope(name):
     15         stride_shape = [1, stride[0], stride[1], 1]
---&gt; 16         filter_shape = [filter_size[0], filter_size[1], int(x.get_shape()[3]),
     17                         num_filters]
     18 

~/anaconda3/lib/python3.6/site-packages/tensorflow/python/framework/tensor_shape.py in __getitem__(self, key)
    500         return TensorShape(self._dims[key])
    501       else:
--&gt; 502         return self._dims[key]
    503     else:
    504       if isinstance(key, slice):

IndexError: list index out of range
&lt;/denchmark-code&gt;

cc &lt;denchmark-link:https://github.com/richardliaw&gt;@richardliaw&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/ericl&gt;@ericl&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='robertnishihara' date='2017-08-22T23:13:50Z'>
		Thanks - the problem here is that PongDeterministic-v4 will not work well on the default convolutional network for the model catalog, so the model is currently hardcoded via self._model = ModelCatalog.ConvolutionalNetwork(self.x, dist_dim) in shared_model.py. We don't have a way to specify models right now; any ideas?
There are other issues too regarding the sampling and such when using non-Atari environments for a3c (and those are addressed in the A2C pr - &lt;denchmark-link:https://github.com/ray-project/ray/pull/779&gt;#779&lt;/denchmark-link&gt;
)
		</comment>
		<comment id='2' author='robertnishihara' date='2017-08-24T03:39:19Z'>
		I have some experiments to run on which convolutional net to use, basically the cross product of {A3C, PPO} x {the a3c convnet, rllib default convnet}.
Hopefully, one of the convnets will be the clear winner and we can use that one.
		</comment>
		<comment id='3' author='robertnishihara' date='2017-08-28T00:30:07Z'>
		If we want to override the default model given to us by the catalog, then perhaps that should be specified in the ? So we can avoid hardcoding the convolutional net for everything. I'd like to use CartPole in the tutorial &lt;denchmark-link:https://github.com/ray-project/tutorial/pull/35&gt;ray-project/tutorial#35&lt;/denchmark-link&gt;
.
		</comment>
		<comment id='4' author='robertnishihara' date='2017-08-28T23:00:54Z'>
		I agree that would work for now. You can specify options when calling get_model, perhaps one such flag can return the smaller conv net used for Pong.
		</comment>
		<comment id='5' author='robertnishihara' date='2017-10-03T01:11:12Z'>
		This issue is stale; part of the problem is fixed but there is another issue tracked here: &lt;denchmark-link:https://github.com/ray-project/ray/issues/1061&gt;#1061&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>