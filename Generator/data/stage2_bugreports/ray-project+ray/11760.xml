<bug id='11760' author='ienkovich' open_date='2020-11-02T17:01:44Z' closed_time='2020-11-11T07:44:17Z'>
	<summary>[Core] Ray breaks alignment for NumPy arrays of doubles</summary>
	<description>
&lt;denchmark-h:h3&gt;What is the problem?&lt;/denchmark-h&gt;

I'm using Ray 1.0.0 with Python 3.8.3 on Ubuntu 18.04
When I use Ray to serialize/deserialize a NumPy array of doubles, I get an unaligned NumPy array (data is not 8-byte aligned).
&lt;denchmark-h:h3&gt;Reproduction&lt;/denchmark-h&gt;

Here is a reproducer I use
&lt;denchmark-code&gt;import numpy as np
import ray
ray.init()

arr1 = np.array([10.1, 20.2, 30.3], dtype = np.double)
oid = ray.put(arr1)
arr2 = ray.get(oid)

ptr1 = arr1.__array_interface__["data"][0]
print(f"Original address: 0x{hex(ptr1)} - {'un' if ptr1 % 8 != 0 else ''}aligned")
assert(ptr1 % 8 == 0)
ptr2 = arr2.__array_interface__["data"][0]
print(f"Deserialized address: 0x{hex(ptr2)} - {'un' if ptr2 % 8 != 0 else ''}aligned")
assert(ptr2 % 8 == 0)
&lt;/denchmark-code&gt;

The output is:
&lt;denchmark-code&gt;Original address: 0x0x56150a88c9d0 - aligned
Deserialized address: 0x0x7f738756010c - unaligned
Traceback (most recent call last):
  File "1.py", line 14, in &lt;module&gt;
    assert(ptr2 % 8 == 0)
AssertionError
&lt;/denchmark-code&gt;


 I have verified my script runs in a clean environment and reproduces the issue.
 I have verified the issue also occurs with the latest wheels.

	</description>
	<comments>
		<comment id='1' author='ienkovich' date='2020-11-02T18:50:58Z'>
		Is this a regression from Ray 0.8 series?
		</comment>
		<comment id='2' author='ienkovich' date='2020-11-02T18:55:07Z'>
		I think we actually want the arrays to be 64-byte aligned for performance reasons. I know we guaranteed that when we were using pyarrow for serialization. &lt;denchmark-link:https://github.com/pcmoritz&gt;@pcmoritz&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/suquark&gt;@suquark&lt;/denchmark-link&gt;

		</comment>
		<comment id='3' author='ienkovich' date='2020-11-02T20:00:43Z'>
		Interesting, so this may have been broken for some time now.
		</comment>
		<comment id='4' author='ienkovich' date='2020-11-02T20:30:14Z'>
		Food for thought: I've tried pickling and unpickling back (by using builtin pickle module and calling pickle.loads(pickle.dumps(arr, -1))), and unpickled array is properly aligned, while retrieved via Ray is not.
		</comment>
		<comment id='5' author='ienkovich' date='2020-11-03T18:48:22Z'>
		&lt;denchmark-link:https://github.com/ericl&gt;@ericl&lt;/denchmark-link&gt;
 What's the action item here?
		</comment>
		<comment id='6' author='ienkovich' date='2020-11-06T01:36:26Z'>
		&lt;denchmark-link:https://github.com/robertnishihara&gt;@robertnishihara&lt;/denchmark-link&gt;
 I almost sure when moving from pyarrow to pickle5, the buffer is still aligned:



ray/python/ray/includes/serialization.pxi


        Lines 301 to 307
      in
      28e7439






 # Increase buffer address. 



 if view.len &lt; kMajorBufferSize: 



 self._curr_buffer_addr = padded_length( 



 self._curr_buffer_addr, kMinorBufferAlign) 



 else: 



 self._curr_buffer_addr = padded_length( 



 self._curr_buffer_addr, kMajorBufferAlign) 





For large chunks, we align the buffer to 64 bytes(kMajorBufferAlign); for small chunks, we align it to 8 bytes (kMinorBufferAlign).
Maybe it is related to the msgpack header which is introduced recently?
		</comment>
		<comment id='7' author='ienkovich' date='2020-11-09T03:09:25Z'>
		&lt;denchmark-link:https://github.com/suquark&gt;@suquark&lt;/denchmark-link&gt;
 Could it be that the relative addresses are aligned, but not the start? Maybe we need to make sure to make  aligned in here: &lt;denchmark-link:https://github.com/ray-project/ray/blob/master/python/ray/includes/serialization.pxi#L360&gt;https://github.com/ray-project/ray/blob/master/python/ray/includes/serialization.pxi#L360&lt;/denchmark-link&gt;

Can you test that and create a PR for it?
		</comment>
		<comment id='8' author='ienkovich' date='2020-11-09T03:09:34Z'>
		&lt;denchmark-link:https://github.com/suquark&gt;@suquark&lt;/denchmark-link&gt;
 it's definitely not aligned right now, e.g.,
import ray
import numpy as np
ray.init()
x = ray.get(ray.put(np.zeros(10**8)))
assert x.ctypes.data % 64 == 0  # This is often (always?) 12 for me. Not that I tried larger arrays in case the different code paths for smaller objects change things.
For some reason I thought we had a test for this, but I can't find it now.
EDIT: I guess we added the test in Arrow.
&lt;denchmark-link:https://github.com/apache/arrow/blob/599b458c68dfcba38fe5448913d4bb69723e1439/python/pyarrow/tests/test_serialization.py#L1156-L1176&gt;https://github.com/apache/arrow/blob/599b458c68dfcba38fe5448913d4bb69723e1439/python/pyarrow/tests/test_serialization.py#L1156-L1176&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>