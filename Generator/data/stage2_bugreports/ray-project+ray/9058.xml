<bug id='9058' author='goulou' open_date='2020-06-20T14:34:57Z' closed_time='2020-06-23T21:43:28Z'>
	<summary>[tune] AsyncHyperBandScheduler has different default brackets than the original paper</summary>
	<description>
&lt;denchmark-h:h3&gt;What is the problem?&lt;/denchmark-h&gt;

In current (0.8.7) version of Ray, the default bracket count is not that of the &lt;denchmark-link:https://arxiv.org/abs/1810.05934&gt;original Paper.&lt;/denchmark-link&gt;

Citation of the paper :

Selecting ASHA default settings. Our experiments in Section 4 and the experiments conducted by Li et al. (2018) both show that aggressive early-stopping is effective across a variety of different hyperparameter tuning tasks. Hence,using both works as guidelines, we propose the followingdefault settings for ASHA:

Elimination rate:  we set η=  4 so that the top 1/4 of configurations are promoted to the next rung
Maximum early-stopping rate: we set the maximum early-stopping rate for bracket s0 to allow for a maximum of 5 rungs which indicates a minimum resource of r = (1/4^4)*R = R/256.
Then the minimum resource perconfiguration for a given bracket s is rs=rη^s
Brackets to run: to increase robustness to misspecification of the early-stopping rate, we default to running the threemost aggressively early-stopping brackets s= 0, 1, 2 of ASHA. We exclude the two least aggressive brackets (i.e. s4 with r4=R and s3 with r3=R/4) to allow for higher speedups from early-stopping. We define this default set of brackets as the ‘standard’ set of early-stopping brackets, though we also expose the options for more conservative or more aggressive bracket sets.


Here is the constructor code :
&lt;denchmark-code&gt;    def __init__(self,
                 time_attr="training_iteration",
                 reward_attr=None,
                 metric="episode_reward_mean",
                 mode="max",
                 max_t=100,
                 grace_period=1,
                 reduction_factor=4,
                 brackets=1):

&lt;/denchmark-code&gt;

Here, the default number of bracket is 1 while it was proposed to be 3 in the paper. I cannot find any logical explanation to that.
I am not 100% sure about the maximum early-stopping rate, which is translated in the _rung calculation code ( self._rungs = [(min_t * self.rf**(k + s), {}) for k in reversed(range(MAX_RUNGS))]) because of the k factor, but it seems OK.
	</description>
	<comments>
		<comment id='1' author='goulou' date='2020-06-20T21:01:16Z'>
		Hey, &lt;denchmark-link:https://github.com/goulou&gt;@goulou&lt;/denchmark-link&gt;
 this was an intentional change after speaking with the ASHA authors, who mentioned that s=0 performs best in practice.
If you look at their experiments, their results and benchmarks all use s=0.
		</comment>
		<comment id='2' author='goulou' date='2020-06-21T07:28:33Z'>
		OK, thanks for the anwser. I can close the issue if you want, but maybe you want to add a comment in the code or documentation explaining that detail?
		</comment>
		<comment id='3' author='goulou' date='2020-06-21T20:14:06Z'>
		Hm, yeah that would be a good idea. Would you be willing to open a small PR to the docs? Happy to help merge it.
		</comment>
		<comment id='4' author='goulou' date='2020-08-14T21:29:31Z'>
		&lt;denchmark-link:https://github.com/richardliaw&gt;@richardliaw&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/goulou&gt;@goulou&lt;/denchmark-link&gt;
 Does  also include the case for 0, 1, 2? Or do we need to pass ?
Also, what if I have one of those "slow winners" performance curves, where it starts off very low but ultimately achieves the best performance? Does increasing  help?
		</comment>
	</comments>
</bug>