<bug id='6864' author='RoeeEnbar' open_date='2020-01-20T13:33:19Z' closed_time='2020-09-16T16:24:03Z'>
	<summary>[Tune] suggest - resolving values too many times</summary>
	<description>
suggest/variant_generator.py::_resolve_lambda_vars() resolves values more than once.
Specifically, on the first iteration the base values are resolved.
On the second iteration the conditional values are resolved with the former base values, but the base values are resolved again.
This results in conditional values and the values they were conditioned upon not having the same values.
Example:
&lt;denchmark-code&gt;    def test_basic(self):
        class MockTrainer(Trainable):
            def _train(self):
                return dict(mean_loss=1)

            def _stop(self):
                pass

        grid_size = 3
        ray.init(num_cpus=grid_size)

        config = {"a": {"eval": "random.uniform(0, 1)"},
                       "b": {"eval": "spec.config.a"}}

        analysis = tune.run(MockTrainer,
                            name='test_basic',
                            resources_per_trial={"cpu": 1},
                            num_samples=grid_size,
                            config=config,
                            stop={"training_iteration": 1},
                            reuse_actors=False)

        df = analysis.dataframe()
        print df[['config/a', 'config/b']]
&lt;/denchmark-code&gt;

output:
&lt;denchmark-code&gt;   config/a  config/b
0  0.654906  0.978321
1  0.404444  0.173096
2  0.448516  0.879822
&lt;/denchmark-code&gt;

where we would expect config/a == config/b.
A simple fix could be to add to _resolve_lambda_vars():
&lt;denchmark-code&gt;            if path in resolved:
                continue
&lt;/denchmark-code&gt;

i.e,
&lt;denchmark-code&gt;        for path, fn in lambda_vars:
            if path in resolved:
                continue
            try:
                value = fn(_UnresolvedAccessGuard(spec))
            except RecursiveDependencyError as e:
                error = e
            except Exception:
                raise ValueError(
                    "Failed to evaluate expression: {}: {}".format(path, fn))
            else:
                _assign_value(spec, path, value)
                resolved[path] = value
        ...
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='RoeeEnbar' date='2020-02-07T09:16:06Z'>
		Hey &lt;denchmark-link:https://github.com/RoeeEnbar&gt;@RoeeEnbar&lt;/denchmark-link&gt;
, thanks for opening this issue! Can you actually push a fix and a test for this? Sorry for the delay.
		</comment>
		<comment id='2' author='RoeeEnbar' date='2020-09-16T16:24:03Z'>
		This has been fixed in our search space refactoring &lt;denchmark-link:https://github.com/ray-project/ray/pull/10444&gt;#10444&lt;/denchmark-link&gt;
.
		</comment>
	</comments>
</bug>