<bug id='6732' author='eugenevinitsky' open_date='2020-01-07T13:28:26Z' closed_time='2020-02-03T15:46:29Z'>
	<summary>[rllib] Recurrent models examples don't work if eager mode is on</summary>
	<description>
&lt;denchmark-h:h3&gt;What is the problem?&lt;/denchmark-h&gt;

Ray version and other system information (Python version, TensorFlow version, OS):
Ray 0.8.0
&lt;denchmark-h:h3&gt;Reproduction (REQUIRED)&lt;/denchmark-h&gt;

Please provide a script that can be run to reproduce the issue. The script should have no external library dependencies (i.e., use fake or mock data / environments):
If we cannot run your script, we cannot fix your issue.

 I have verified my script runs in a clean environment and reproduces the issue.
 I have verified the issue also occurs with the latest wheels.

&lt;denchmark-code&gt;
from __future__ import absolute_import
from __future__ import division
from __future__ import print_function

import gym
from gym.spaces import Discrete
import numpy as np
import random
import argparse

import ray
from ray import tune
from ray.tune.registry import register_env
from ray.rllib.models import ModelCatalog
from ray.rllib.models.modelv2 import ModelV2
from ray.rllib.models.tf.recurrent_tf_modelv2 import RecurrentTFModelV2
from ray.rllib.utils.annotations import override
from ray.rllib.utils import try_import_tf

tf = try_import_tf()

parser = argparse.ArgumentParser()
parser.add_argument("--run", type=str, default="PPO")
parser.add_argument("--env", type=str, default="RepeatAfterMeEnv")
parser.add_argument("--stop", type=int, default=90)


class MyKerasRNN(RecurrentTFModelV2):
    """Example of using the Keras functional API to define a RNN model."""

    def __init__(self,
                 obs_space,
                 action_space,
                 num_outputs,
                 model_config,
                 name,
                 hiddens_size=256,
                 cell_size=64):
        super(MyKerasRNN, self).__init__(obs_space, action_space, num_outputs,
                                         model_config, name)
        self.cell_size = cell_size

        # Define input layers
        input_layer = tf.keras.layers.Input(
            shape=(None, obs_space.shape[0]), name="inputs")
        state_in_h = tf.keras.layers.Input(shape=(cell_size, ), name="h")
        state_in_c = tf.keras.layers.Input(shape=(cell_size, ), name="c")
        seq_in = tf.keras.layers.Input(shape=(), name="seq_in", dtype=tf.int32)

        # Preprocess observation with a hidden layer and send to LSTM cell
        dense1 = tf.keras.layers.Dense(
            hiddens_size, activation=tf.nn.relu, name="dense1")(input_layer)
        lstm_out, state_h, state_c = tf.keras.layers.LSTM(
            cell_size, return_sequences=True, return_state=True, name="lstm")(
                inputs=dense1,
                mask=tf.sequence_mask(seq_in),
                initial_state=[state_in_h, state_in_c])

        # Postprocess LSTM output with another hidden layer and compute values
        logits = tf.keras.layers.Dense(
            self.num_outputs,
            activation=tf.keras.activations.linear,
            name="logits")(lstm_out)
        values = tf.keras.layers.Dense(
            1, activation=None, name="values")(lstm_out)

        # Create the RNN model
        self.rnn_model = tf.keras.Model(
            inputs=[input_layer, seq_in, state_in_h, state_in_c],
            outputs=[logits, values, state_h, state_c])
        self.register_variables(self.rnn_model.variables)
        self.rnn_model.summary()

    @override(RecurrentTFModelV2)
    def forward_rnn(self, inputs, state, seq_lens):
        model_out, self._value_out, h, c = self.rnn_model([inputs, seq_lens] +
                                                          state)
        return model_out, [h, c]

    @override(ModelV2)
    def get_initial_state(self):
        return [
            np.zeros(self.cell_size, np.float32),
            np.zeros(self.cell_size, np.float32),
        ]

    @override(ModelV2)
    def value_function(self):
        return tf.reshape(self._value_out, [-1])


class RepeatInitialEnv(gym.Env):
    """Simple env in which the policy learns to repeat the initial observation
    seen at timestep 0."""

    def __init__(self):
        self.observation_space = Discrete(2)
        self.action_space = Discrete(2)
        self.token = None
        self.num_steps = 0

    def reset(self):
        self.token = random.choice([0, 1])
        self.num_steps = 0
        return self.token

    def step(self, action):
        if action == self.token:
            reward = 1
        else:
            reward = -1
        self.num_steps += 1
        done = self.num_steps &gt; 100
        return 0, reward, done, {}


class RepeatAfterMeEnv(gym.Env):
    """Simple env in which the policy learns to repeat a previous observation
    token after a given delay."""

    def __init__(self, config):
        self.observation_space = Discrete(2)
        self.action_space = Discrete(2)
        self.delay = config["repeat_delay"]
        assert self.delay &gt;= 1, "delay must be at least 1"
        self.history = []

    def reset(self):
        self.history = [0] * self.delay
        return self._next_obs()

    def step(self, action):
        if action == self.history[-(1 + self.delay)]:
            reward = 1
        else:
            reward = -1
        done = len(self.history) &gt; 100
        return self._next_obs(), reward, done, {}

    def _next_obs(self):
        token = random.choice([0, 1])
        self.history.append(token)
        return token


if __name__ == "__main__":
    ray.init()
    args = parser.parse_args()
    ModelCatalog.register_custom_model("rnn", MyKerasRNN)
    register_env("RepeatAfterMeEnv", lambda c: RepeatAfterMeEnv(c))
    register_env("RepeatInitialEnv", lambda _: RepeatInitialEnv())
    tune.run(
        args.run,
        stop={"episode_reward_mean": args.stop},
        config={
            "env": args.env,
            "eager": True,
            "env_config": {
                "repeat_delay": 2,
            },
            "gamma": 0.9,
            "num_workers": 0,
            "num_envs_per_worker": 20,
            "entropy_coeff": 0.001,
            "num_sgd_iter": 5,
            "vf_loss_coeff": 1e-5,
            "model": {
                "custom_model": "rnn",
                "max_seq_len": 20,
            },
        })
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='eugenevinitsky' date='2020-01-07T13:29:06Z'>
		If you set eager to true in the custom_keras_rnn examples it errors out.
		</comment>
		<comment id='2' author='eugenevinitsky' date='2020-01-07T19:20:56Z'>
		Seems related to &lt;denchmark-link:https://github.com/ray-project/ray/issues/6399&gt;#6399&lt;/denchmark-link&gt;
, though there are additional issues even after I stop using tune.
		</comment>
		<comment id='3' author='eugenevinitsky' date='2020-01-07T19:22:23Z'>
		&lt;denchmark-code&gt;diff --git a/rllib/models/tf/recurrent_tf_modelv2.py b/rllib/models/tf/recurrent_tf_modelv2.py
index 2691a11ba..d39988364 100644
--- a/rllib/models/tf/recurrent_tf_modelv2.py
+++ b/rllib/models/tf/recurrent_tf_modelv2.py
@@ -60,6 +60,7 @@ class RecurrentTFModelV2(TFModelV2):
         """Adds time dimension to batch before sending inputs to forward_rnn().
 
         You should implement forward_rnn() in your subclass."""
+        seq_lens = tf.cast(seq_lens, tf.int32)
         output, new_state = self.forward_rnn(
             add_time_dimension(input_dict["obs_flat"], seq_lens), state,
             seq_lens)
diff --git a/rllib/policy/eager_tf_policy.py b/rllib/policy/eager_tf_policy.py
index 461dde7e8..4b0dd8504 100644
--- a/rllib/policy/eager_tf_policy.py
+++ b/rllib/policy/eager_tf_policy.py
@@ -353,6 +353,10 @@ def build_eager_tf_policy(name,
             variables = self.variables()
             return [v.numpy() for v in variables]
 
+        @override(Policy)
+        def get_initial_state(self):
+            return self.model.get_initial_state()
+
         @override(Policy)
         def set_weights(self, weights):
             variables = self.variables()
&lt;/denchmark-code&gt;

This helps a bit but you still run into cast errors.
		</comment>
		<comment id='4' author='eugenevinitsky' date='2020-01-07T19:24:59Z'>
		Yeah, that's about as far as I got too. Didn't realize it was just casting errors; I can probably open up a PR to fix this if that's the remaining error.
		</comment>
		<comment id='5' author='eugenevinitsky' date='2020-01-31T15:26:00Z'>
		Looking at this now. It's related to &lt;denchmark-link:https://github.com/ray-project/ray/issues/6928&gt;#6928&lt;/denchmark-link&gt;
  .
		</comment>
		<comment id='6' author='eugenevinitsky' date='2020-01-31T15:28:09Z'>
		We should check the return values of custom get_initial_state methods for correct shape (no batch rank! no time rank!) and then unify the behavior and expected shapes (forward pass -&gt; convert to batch=1, etc..). In PPO, the algo adds its own dim-conversion logic in the ValueFunction mixin, which adds more confusion.
		</comment>
		<comment id='7' author='eugenevinitsky' date='2020-02-03T15:39:21Z'>
		There are other problems in there, caused by an incomplete tf_eager_policy.py::_compute_gradients(). Also, the OneHot preprocessor needs to force-cast to float32, in eager mode, for some reason, it's returning float64. It's running now on our example script, but I'll try your exact code from above also ...
		</comment>
		<comment id='8' author='eugenevinitsky' date='2020-02-03T15:46:29Z'>
		Yup, works as well (also w/o eager). I'll close. See this patch:
&lt;denchmark-link:https://github.com/ray-project/ray/pull/7021&gt;#7021&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>