<bug id='11436' author='stephanie-wang' open_date='2020-10-16T15:42:20Z' closed_time='2020-11-04T20:04:45Z'>
	<summary>[core] `ray stop` does not kill all processes</summary>
	<description>
&lt;denchmark-h:h3&gt;What is the problem?&lt;/denchmark-h&gt;

Ray version and other system information (Python version, TensorFlow version, OS): 1.1dev, Ubuntu 18.04
The problem does not appear on Ray 1.0.
&lt;denchmark-h:h3&gt;Reproduction (REQUIRED)&lt;/denchmark-h&gt;

Please provide a script that can be run to reproduce the issue. The script should have no external library dependencies (i.e., use fake or mock data / environments):
Run the following bash script to stop and restart ray:
#!/bin/bash

ray stop
echo "RAY STOP `ps -ef | grep redis`"
ray start --head --num-cpus 16
echo "RAY START `ps -ef | grep redis`"
The script will fail every other time that it runs. When it fails, the output is:
&lt;denchmark-code&gt;Traceback (most recent call last):
  File "/home/swang/anaconda3/envs/ray-36/bin/ray", line 8, in &lt;module&gt;
    sys.exit(main())
  File "/home/swang/anaconda3/envs/ray-36/lib/python3.6/site-packages/ray/scripts/scripts.py", line 1462, in main
    return cli()
  File "/home/swang/anaconda3/envs/ray-36/lib/python3.6/site-packages/click/core.py", line 829, in __call__
    return self.main(*args, **kwargs)
  File "/home/swang/anaconda3/envs/ray-36/lib/python3.6/site-packages/click/core.py", line 782, in main
    rv = self.invoke(ctx)
  File "/home/swang/anaconda3/envs/ray-36/lib/python3.6/site-packages/click/core.py", line 1259, in invoke
    return _process_result(sub_ctx.command.invoke(sub_ctx))
  File "/home/swang/anaconda3/envs/ray-36/lib/python3.6/site-packages/click/core.py", line 1066, in invoke
    return ctx.invoke(self.callback, **ctx.params)
  File "/home/swang/anaconda3/envs/ray-36/lib/python3.6/site-packages/click/core.py", line 610, in invoke
    return callback(*args, **kwargs)
  File "/home/swang/anaconda3/envs/ray-36/lib/python3.6/site-packages/ray/scripts/scripts.py", line 479, in start
    f"Ray is already running at {default_address}. "
ConnectionError: Ray is already running at 192.168.1.46:6379. Please specify a different port using the `--port` command to `ray start`.
&lt;/denchmark-code&gt;

If we cannot run your script, we cannot fix your issue.

 I have verified my script runs in a clean environment and reproduces the issue.
 I have verified the issue also occurs with the latest wheels.

	</description>
	<comments>
		<comment id='1' author='stephanie-wang' date='2020-10-16T23:10:50Z'>
		I spent a few minutes to see why it happens, and I think the issue is the second ray stop doesn't kill monitor.py and dashboard.py, which both of them has --redis-address as an argument. Both of them are "eventually killed", but alive when ray stop is returned
And this is how we detect redis address;
&lt;denchmark-code&gt;def find_redis_address(address=None):
    pids = psutil.pids()
    redis_addresses = set()
    for pid in pids:
        try:
            proc = psutil.Process(pid)
            # HACK: Workaround for UNIX idiosyncrasy
            # Normally, cmdline() is supposed to return the argument list.
            # But it in some cases (such as when setproctitle is called),
            # an arbitrary string resembling a command-line is stored in
            # the first argument.
            # Explanation: https://unix.stackexchange.com/a/432681
            # More info: https://github.com/giampaolo/psutil/issues/1179
            for arglist in proc.cmdline():
                # Given we're merely seeking --redis-address, we just split
                # every argument on spaces for now.
                for arg in arglist.split(" "):
                    # TODO(ekl): Find a robust solution for locating Redis.
                    if arg.startswith("--redis-address="):
                        proc_addr = arg.split("=")[1]
                        if address is not None and address != proc_addr:
                            continue
                        redis_addresses.add(proc_addr)
        except psutil.AccessDenied:
            pass
        except psutil.NoSuchProcess:
            pass
    return redis_addresses
&lt;/denchmark-code&gt;

So, it should be pretty simple fix (just wait until monitor and dashboard is killed)
		</comment>
	</comments>
</bug>