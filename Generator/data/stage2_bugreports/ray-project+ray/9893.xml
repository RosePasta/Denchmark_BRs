<bug id='9893' author='endremborza' open_date='2020-08-04T03:58:54Z' closed_time='2020-08-07T20:48:13Z'>
	<summary>run as_future from thread</summary>
	<description>
&lt;denchmark-h:h3&gt;Ray actor remote as_future can not be called from a new thread&lt;/denchmark-h&gt;

I'm building a small scheduler that uses ray actors and queues in different python threads, but I ran into an issue I couldn't really deal with and eventually went a different way. However, I thought I'd share, as it may be relevant. If not, please close the issue.
this is from ray 0.8.6, the latest on pip, python3.7
&lt;denchmark-h:h3&gt;MWE&lt;/denchmark-h&gt;

from threading import Thread
import time

import ray


ray.init()

@ray.remote
class Example:
    def __init__(self, x):
        self.x = x

    def get(self):
        return self.x

    
e = Example.remote(5)

l = []

class Cons(Thread):
    
    def run(self):
        e.get.remote().as_future().add_done_callback(lambda x: l.append(x.result()))

c = Cons()
c.start()
c.join()
this gives RuntimeError: There is no current event loop in thread 'Thread-n'.
it works great without the as_future(), but this is still hard to pinpoint, and there are no available examples I could find

 I have verified my script runs in a clean environment and reproduces the issue.
 I have verified the issue also occurs with the latest wheels.

	</description>
	<comments>
		<comment id='1' author='endremborza' date='2020-08-06T19:54:07Z'>
		Hi &lt;denchmark-link:https://github.com/endremborza&gt;@endremborza&lt;/denchmark-link&gt;
, thanks for raising this issue. Ray ObjectRef's future is an  not . The two has &lt;denchmark-link:https://docs.python.org/3/library/asyncio-future.html&gt;subtle differences&lt;/denchmark-link&gt;
. I would recommend using asyncio.Queue instead of threading queues. is there a particular reason python threads are necessary?
		</comment>
		<comment id='2' author='endremborza' date='2020-08-06T20:43:15Z'>
		I ended up going the asyncio way, and replaced threads with async functions, it worked well that way. I used threads at first because I found it easier to track and kill them, but it worked with asyncio just as well, after a bit of getting used to.
		</comment>
	</comments>
</bug>