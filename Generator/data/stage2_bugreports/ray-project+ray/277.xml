<bug id='277' author='robertnishihara' open_date='2017-02-14T22:35:02Z' closed_time='2017-05-17T01:43:16Z'>
	<summary>Calling ray.register_class after defining a remote function fails and (sometimes) gives no error message.</summary>
	<description>
An example like the following sometimes works and sometimes fails (I haven't been able to get this particular example to fail, but a similar one did on a different machine).
import ray
ray.init()

class Foo(object):
  def __init__(self):
    pass

@ray.remote
def f():
  return Foo()

@ray.remote
def g(x):
  return 1

ray.register_class(Foo)

ray.get([f.remote() for _ in range(10)] + [g.remote(Foo()) for _ in range(10)])
If the worker tries to execute the function f or g before the register_class call has operated on the worker, then it will throw an exception.
Normally, it should fail with the following error message.
Remote function __main__.f failed with:

Traceback (most recent call last):
  File "/Users/rkn/Workspace/ray/python/ray/worker.py", line 1634, in process_task
    store_outputs_in_objstore(return_object_ids, outputs, worker)
  File "/Users/rkn/Workspace/ray/python/ray/worker.py", line 1973, in store_outputs_in_objstore
    worker.put_object(objectids[i], outputs[i])
  File "/Users/rkn/Workspace/ray/python/ray/worker.py", line 474, in put_object
    numbuf.store_list(objectid.id(), self.plasma_client.conn, [value])
  File "/Users/rkn/Workspace/ray/python/ray/serialization.py", line 97, in serialize
    raise Exception("Ray does not know how to serialize objects of type {}. To fix this, call 'ray.register_class' with this class.".format(type(obj)))
Exception: Ray does not know how to serialize objects of type &lt;class '__main__.Foo'&gt;. To fix this, call 'ray.register_class' with this class.
However, I have seen it fail with just None (that's what showed up in ray.error_info().
Inspecting the event_log a little more closely (for a different script that gave rise to this problem) gave the error
Traceback (most recent call last):
  File "/home/ubuntu/.local/lib/python2.7/site-packages/ray-0.0.1-py2.7.egg/ray/worker.py", line 1542, in process_task
    arguments = get_arguments_for_execution(worker.functions[function_id.id()], args, worker)
  File "/home/ubuntu/.local/lib/python2.7/site-packages/ray-0.0.1-py2.7.egg/ray/worker.py", line 1852, in get_arguments_for_execution
    argument = worker.get_object([arg])[0]
  File "/home/ubuntu/.local/lib/python2.7/site-packages/ray-0.0.1-py2.7.egg/ray/worker.py", line 455, in get_object
    0)
  File "/home/ubuntu/.local/lib/python2.7/site-packages/ray-0.0.1-py2.7.egg/ray/serialization.py", line 127, in deserialize
    cls = whitelisted_classes[class_id]
KeyError: 'autocore.yaml_config.YamlConfig'
The failure in this case appears to be when an argument is deserialized. We should do several things.

Make sure we propagate error messages from this case.
Make sure we provide better utilities for inspecting tasks because there might be errors in the event log that are not propagated.
Add tests for this problem.

	</description>
	<comments>
		<comment id='1' author='robertnishihara' date='2017-04-23T23:13:24Z'>
		The problem in which the error is just  should be addressed by &lt;denchmark-link:https://github.com/ray-project/ray/pull/479&gt;#479&lt;/denchmark-link&gt;
.
		</comment>
		<comment id='2' author='robertnishihara' date='2017-05-17T01:43:16Z'>
		This should be addressed by &lt;denchmark-link:https://github.com/ray-project/ray/pull/550&gt;#550&lt;/denchmark-link&gt;
 which removes  from the API.
		</comment>
	</comments>
</bug>