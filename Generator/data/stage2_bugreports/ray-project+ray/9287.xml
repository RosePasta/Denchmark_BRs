<bug id='9287' author='rkooo567' open_date='2020-07-03T06:58:34Z' closed_time='2020-07-08T17:56:53Z'>
	<summary>[GCS Actor Management] Race condition between `CreatingOnWorker` and `CancelOnWorker`</summary>
	<description>
&lt;denchmark-h:h3&gt;What is the problem?&lt;/denchmark-h&gt;

There's one parts of code that are vulnerable to race condition. After we succeed to lease a worker, we stores the actor data and call CreateOnWorker
&lt;denchmark-code&gt;    RAY_CHECK_OK(gcs_actor_table_.Put(actor-&gt;GetActorID(), actor-&gt;GetActorTableData(),
                                      [this, actor, leased_worker](Status status) {
                                        RAY_CHECK_OK(status);
                                        CreateActorOnWorker(actor, leased_worker);
                                      }));
&lt;/denchmark-code&gt;

The problem is before CreateActorOnWorker is called, the owner of this actor can die, and then DestroyActor will be called.
Fix will be included in this PR. &lt;denchmark-link:https://github.com/ray-project/ray/pull/9215&gt;#9215&lt;/denchmark-link&gt;

&lt;denchmark-h:h3&gt;Reproduction (REQUIRED)&lt;/denchmark-h&gt;

Please provide a script that can be run to reproduce the issue. The script should have no external library dependencies (i.e., use fake or mock data / environments):
    @ray.remote(num_cpus=1, num_gpus=1)
    class A:
        def __init__(self):
            self.actors = []
        
        def create_actors(self):
            self.actors = [B.remote() for _ in range(2)]
        
        def ping(self):
            return 3

    @ray.remote(num_gpus=1)
    class B:
        def ping(self):
            return True

    @ray.remote(num_gpus=1)
    def f():
        return True

    a = A.remote()
    # Create pending actors
    ray.get(a.create_actors.remote())
    
    # Owner is dead. pending actors should be killed
    # and raylet should return workers correctly.
    time.sleep(2)
    del a
    a = B.remote()
    assert ray.get(a.ping.remote())
    ray.kill(a)
    assert ray.get(f.remote())

 I have verified my script runs in a clean environment and reproduces the issue.
 I have verified the issue also occurs with the latest wheels.

	</description>
	<comments>
	</comments>
</bug>