<bug id='2544' author='ericl' open_date='2018-08-02T03:51:22Z' closed_time='2018-08-11T00:08:58Z'>
	<summary>[xray] Crash during object transfers</summary>
	<description>
&lt;denchmark-h:h3&gt;Describe the problem&lt;/denchmark-h&gt;

Running ./train.py tuned_examples/pong-apex.yaml --redis-address=localhost:6379 will crash almost instantaneously on a multi-node x-ray cluster. This requires a GPU cluster to reach high enough throughputs to crash reliably (or you can patch rllib to take the GPU out of the critical path).
The actual error you see is local_scheduler_client.cc:306 Check failed: static_cast&lt;ray::protocol::MessageType&gt;(type) == ray::protocol::MessageType::WaitReply, but this just means the raylet crashed beforehand.
&lt;denchmark-h:h3&gt;Source code / logs&lt;/denchmark-h&gt;

&lt;denchmark-link:https://github.com/atumanov&gt;@atumanov&lt;/denchmark-link&gt;
 and I were able to get a core dump and find the root cause:
&lt;denchmark-code&gt;#0  __memcpy_avx_unaligned () at ../sysdeps/x86_64/multiarch/memcpy-avx-unaligned.S:238
#1  0x00007fd761f9ce48 in std::__cxx11::moneypunct&lt;char, false&gt;::curr_symbol() const () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#2  0x00007fd75d783c80 in ?? ()
#3  0x00007fd75d783c50 in ?? ()
#4  0x00007fd75d783c40 in ?? ()
#5  0x00007fd75d783c80 in ?? ()
#6  0x00007fd75d783c70 in ?? ()
#7  0x000000000047b9ac in std::string::operator+= (__str=..., this=0x21000) at /usr/include/c++/5/bits/basic_string.h:3348
#8  ray::Status::ToString (this=0x7fd761f9ce48 &lt;std::__cxx11::moneypunct&lt;char, false&gt;::curr_symbol() const+128&gt;, this@entry=0x7fd75d783c40)
    at /home/ubuntu/ray/src/ray/status.cc:84
#9  0x00000000004ba4a1 in ray::ObjectManager::ExecuteSendObject (this=0x7ffed25cdb80, client_id=..., object_id=..., data_size=15326968, metadata_size=0, chunk_index=2,
    connection_info=...) at /home/ubuntu/ray/src/ray/object_manager/object_manager.cc:301
#10 0x00000000004ba8ab in ray::ObjectManager::&lt;lambda(const ray::RemoteConnectionInfo&amp;)&gt;::&lt;lambda()&gt;::operator() (__closure=0x7fd75d783d40)
    at /home/ubuntu/ray/src/ray/object_manager/object_manager.cc:263
#11 boost::asio::asio_handler_invoke&lt;ray::ObjectManager::Push(const ObjectID&amp;, const ClientID&amp;)::&lt;lambda(const ray::RemoteConnectionInfo&amp;)&gt;::&lt;lambda()&gt; &gt; (function=...)
    at /home/ubuntu/ray/thirdparty/pkg/boost/include/boost/asio/handler_invoke_hook.hpp:69
#12 boost_asio_handler_invoke_helpers::invoke&lt;ray::ObjectManager::Push(const ObjectID&amp;, const ClientID&amp;)::&lt;lambda(const ray::RemoteConnectionInfo&amp;)&gt;::&lt;lambda()&gt;, ray::ObjectManager::Push(const ObjectID&amp;, const ClientID&amp;)::&lt;lambda(const ray::RemoteConnectionInfo&amp;)&gt;::&lt;lambda()&gt; &gt; (context=..., function=...)
    at /home/ubuntu/ray/thirdparty/pkg/boost/include/boost/asio/detail/handler_invoke_helpers.hpp:37
#13 boost::asio::detail::completion_handler&lt;ray::ObjectManager::Push(const ObjectID&amp;, const ClientID&amp;)::&lt;lambda(const ray::RemoteConnectionInfo&amp;)&gt;::&lt;lambda()&gt; &gt;::do_complete(boost::asio::detail::io_service_impl *, boost::asio::detail::operation *, const boost::system::error_code &amp;, std::size_t) (owner=0x11d1b90, base=&lt;optimized out&gt;)
    at /home/ubuntu/ray/thirdparty/pkg/boost/include/boost/asio/detail/completion_handler.hpp:68
#14 0x00000000004b7338 in boost::asio::detail::task_io_service_operation::complete (bytes_transferred=0, ec=..., owner=..., this=&lt;optimized out&gt;)
    at /home/ubuntu/ray/thirdparty/pkg/boost/include/boost/asio/detail/task_io_service_operation.hpp:38
#15 boost::asio::detail::task_io_service::do_run_one (ec=..., this_thread=..., lock=..., this=0x11d1b90)
    at /home/ubuntu/ray/thirdparty/pkg/boost/include/boost/asio/detail/impl/task_io_service.ipp:372
#16 boost::asio::detail::task_io_service::run (ec=..., this=0x11d1b90) at /home/ubuntu/ray/thirdparty/pkg/boost/include/boost/asio/detail/impl/task_io_service.ipp:149
#17 boost::asio::io_service::run (this=&lt;optimized out&gt;) at /home/ubuntu/ray/thirdparty/pkg/boost/include/boost/asio/impl/io_service.ipp:59
#18 ray::ObjectManager::RunSendService (this=&lt;optimized out&gt;) at /home/ubuntu/ray/src/ray/object_manager/object_manager.cc:73
#19 0x00007fd761f85c80 in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#20 0x00007fd7622566ba in start_thread (arg=0x7fd75d784700) at pthread_create.c:333
#21 0x00007fd7616eb41d in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:109
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='ericl' date='2018-08-02T20:35:27Z'>
		Hey eric, can you try if something like this fixes the segfault?
&lt;denchmark-link:https://github.com/ray-project/ray/pull/2548&gt;#2548&lt;/denchmark-link&gt;

We found that when looking into a valgrind error with Stephanie, it turns out that the error strings from boost::system are corrupted (although we don't know why).
		</comment>
		<comment id='2' author='ericl' date='2018-08-03T22:14:58Z'>
		If it's what &lt;denchmark-link:https://github.com/pcmoritz&gt;@pcmoritz&lt;/denchmark-link&gt;
 suspects, the write fails and this line is invoked: &lt;denchmark-link:https://github.com/ray-project/ray/blob/master/src/ray/object_manager/object_manager.cc#L341&gt;https://github.com/ray-project/ray/blob/master/src/ray/object_manager/object_manager.cc#L341&lt;/denchmark-link&gt;

I think it makes sense to see what happens when running the above code with &lt;denchmark-link:https://github.com/ray-project/ray/pull/2548&gt;#2548&lt;/denchmark-link&gt;
, as this will either reveal the underlying error or rule out the corrupt error string hypothesis.
With that said, I believe the underlying issue may be fixed by &lt;denchmark-link:https://github.com/ray-project/ray/pull/2557&gt;#2557&lt;/denchmark-link&gt;
, which may be worth trying out first.
		</comment>
		<comment id='3' author='ericl' date='2018-08-04T00:43:27Z'>
		Seems some combination of &lt;denchmark-link:https://github.com/ray-project/ray/pull/2548&gt;#2548&lt;/denchmark-link&gt;
 and &lt;denchmark-link:https://github.com/ray-project/ray/pull/2557&gt;#2557&lt;/denchmark-link&gt;
 fixes this issue.
		</comment>
	</comments>
</bug>