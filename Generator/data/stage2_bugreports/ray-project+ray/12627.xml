<bug id='12627' author='LinxiFan' open_date='2020-12-04T20:23:34Z' closed_time='2020-12-04T21:59:54Z'>
	<summary>An imported class behaves differently from a local class</summary>
	<description>
&lt;denchmark-h:h3&gt;What is the problem?&lt;/denchmark-h&gt;

For my application, I need to patch the __init__ method of a class. However, Ray behaves differently for a class defined in the current module VS an imported class.
&lt;denchmark-h:h3&gt;Reproduction (REQUIRED)&lt;/denchmark-h&gt;

Version 1.0.1.post1
For a class defined in the same module, the patched __init__ works as expected:
import ray

def patched_init(self):
    print('PATCHED')

class Foo:
    def __init__(self):
        print('UNCHANGED')

Foo.__init__ = patched_init
ray.init()
foo = ray.remote(Foo).remote()  # prints "PATCHED"
However, if I move the Foo class to another module, the patch is ignored:
# foo.py
class Foo:
    def __init__(self):
        print('UNCHANGED')
main script:
from foo import Foo

def patched_init(self):
    print('PATCHED')

Foo.__init__ = patched_init
ray.init()
foo = ray.remote(Foo).remote()  # WRONG: prints "UNCHANGED"

 I have verified my script runs in a clean environment and reproduces the issue.
 I have verified the issue also occurs with the latest wheels.

	</description>
	<comments>
		<comment id='1' author='LinxiFan' date='2020-12-04T21:39:44Z'>
		Hmm, I think this is an issue with how cloudpickle captures class definitions.
Instead, would it be possible to just create a subclass of Foo?
		</comment>
		<comment id='2' author='LinxiFan' date='2020-12-04T21:44:56Z'>
		Thanks Richard! This is an extremely simplified version of what I'm doing, so the patching part is not easily avoidable. Do you have any workaround idea?
		</comment>
		<comment id='3' author='LinxiFan' date='2020-12-04T21:53:52Z'>
		Another possibility is just to pass the function into the constructor of the class, and allow init to be manually overridden by that function.
		</comment>
		<comment id='4' author='LinxiFan' date='2020-12-04T21:59:54Z'>
		That's a great idea! Thank you so much. Closing this issue as solved.
		</comment>
	</comments>
</bug>