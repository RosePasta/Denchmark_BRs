<bug id='7108' author='sven1977' open_date='2020-02-10T15:54:31Z' closed_time='2020-02-11T20:51:45Z'>
	<summary>[RLlib] AsyncReplayOptimizer should retain good sample_tasks even if other sample_tasks have failed.</summary>
	<description>
AsyncReplayOptimizer::_step() collects all self.sample_tasks that are completed (including crashed ones), leaving then self.sample_tasks with a count of 0 (empty).
After that collection step, it calls ray_get_and_free on all these tasks' IDs, which crashes (due to the error'd crashed tasks). This causes even the still-good tasks to not be processed and reinstated, leaving the optimizer in an infinite loop (trying to collect samples w/o any sample_tasks left).
Ray version and other system information (Python version, TensorFlow version, OS):
&lt;denchmark-h:h3&gt;Reproduction (REQUIRED)&lt;/denchmark-h&gt;

Please provide a script that can be run to reproduce the issue. The script should have no external library dependencies (i.e., use fake or mock data / environments):
If we cannot run your script, we cannot fix your issue.
This can be reproduced by debugging the test case rllib/tests/test_ignore_worker_failure.py::testAsyncReplay, stepping through the code and waiting a while in async_replay_optimizer.py::_step before the call to self.sample_tasks.completed() (so that all tasks are completed, the good and the failed ones). This then should make ray_get_and_free error and skip the necessary
&lt;denchmark-code&gt;               # Kick off another sample request
                self.sample_tasks.add(ev, ev.sample_with_count.remote())
&lt;/denchmark-code&gt;

code.

 I have verified my script runs in a clean environment and reproduces the issue.
 I have verified the issue also occurs with the latest wheels.

	</description>
	<comments>
	</comments>
</bug>