<bug id='9826' author='javadan' open_date='2020-07-30T20:13:30Z' closed_time='2020-07-30T22:58:45Z'>
	<summary>[tune] experiment_analysis.py  nan</summary>
	<description>
I have a case where I can't get an Analysis object on some experiment directories.
It is looking for episode_reward_mean, but it is nan sometimes because it's an average.
When debugging, I get to the below, when looking for the best config or best log dir.
idx = df[metric].idxmax() makes idx 'nan'.
&lt;denchmark-code&gt;
    def _retrieve_rows(self, metric=None, mode=None):
        assert mode is None or mode in ["max", "min"]
        rows = {}
        for path, df in self.trial_dataframes.items():
            if mode == "max":
                idx = df[metric].idxmax()
            elif mode == "min":
                idx = df[metric].idxmin()
            else:
                idx = -1
            rows[path] = df.iloc[idx].to_dict()

        return rows



    def get_best_config(self, metric, mode="max"):
        """Retrieve the best config corresponding to the trial.

        Args:
            metric (str): Key for trial info to order on.
            mode (str): One of [min, max].
        """
        rows = self._retrieve_rows(metric=metric, mode=mode)
        if not rows:
            # only nans encountered when retrieving rows
            logger.warning("Not able to retrieve the best config for {} "
                           "according to the specified metric "
                           "(only nans encountered).".format(
                               self._experiment_dir))
            return None
        all_configs = self.get_all_configs()
        compare_op = max if mode == "max" else min
        best_path = compare_op(rows, key=lambda k: rows[k][metric])
        return all_configs[best_path]

&lt;/denchmark-code&gt;

Could _retrieve_rows return a default value like None, rather than throwing an exception on the df.iloc[idx]  ?
	</description>
	<comments>
		<comment id='1' author='javadan' date='2020-07-30T20:29:12Z'>
		&lt;denchmark-link:https://github.com/javadan&gt;@javadan&lt;/denchmark-link&gt;
 what version of Ray is this? I believe this error has been fixed in this PR &lt;denchmark-link:https://github.com/ray-project/ray/pull/9381&gt;#9381&lt;/denchmark-link&gt;
. It will be included in the next 0.8.7 release. In the meantime you can install ray from the latest wheels (&lt;denchmark-link:https://docs.ray.io/en/master/installation.html#latest-snapshots-nightlies&gt;https://docs.ray.io/en/master/installation.html#latest-snapshots-nightlies&lt;/denchmark-link&gt;
)
		</comment>
		<comment id='2' author='javadan' date='2020-07-30T20:36:03Z'>
		Thanks, 0.8.6.  I'll try out the wheels plan now.
		</comment>
		<comment id='3' author='javadan' date='2020-07-30T21:30:22Z'>
		Hmm so I updated to ray-0.9.0.dev0
and am getting some error in exploration.py and a few other files.
AttributeError: module 'gym.spaces' has no attribute 'Space'
Guess it's always a risk,  running latest snapshots.
Do you think I need to roll back to a specific gym version maybe?
I think they must have changed their package names at some point, from gym to gym.spaces or vice versa.
How would I check what version of gym rllib is looking for?
		</comment>
		<comment id='4' author='javadan' date='2020-07-30T21:43:14Z'>
		Good question, I think downgrading your gym version should work? &lt;denchmark-link:https://github.com/ericl&gt;@ericl&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/sven1977&gt;@sven1977&lt;/denchmark-link&gt;
 any advice here?
		</comment>
		<comment id='5' author='javadan' date='2020-07-30T22:58:45Z'>
		I worked around for now, by globally replacing gym.spaces with gym
Good enough for now.  Thanks.
		</comment>
	</comments>
</bug>