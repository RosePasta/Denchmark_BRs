<bug id='201' author='robertnishihara' open_date='2017-01-15T01:22:35Z' closed_time='2017-01-18T22:54:03Z'>
	<summary>Plasma store dying if worker dies in the middle of a get.</summary>
	<description>
The following will kill the plasma store.
import ray
ray.init(num_workers=1)

@ray.remote
def f():
  print("This will be printed")
  ray.worker.global_worker.plasma_client.get(20 * b"a")
  print("This will not be printed")
  return None

x = f.remote()
Then kill the worker (e.g., do ps aux | grep default_worker.py to find the worker process ID and then do kill followed by the process ID).
# Creating and sealing the object will cause the plasma store to try to send a message to the worker that has died. This will cause the store to die.
ray.worker.global_worker.plasma_client.create(20 * b"a", 100)
ray.worker.global_worker.plasma_client.seal(20 * b"a")
This should take down the plasma store, which you can check by doing ps aux | grep plasma_store. Also, calling ray.put(1) should fail.
The issue is that when the driver creates and seals the object, the plasma store will try to send a message to the dead worker and will die.
	</description>
	<comments>
		<comment id='1' author='robertnishihara' date='2017-01-18T22:54:03Z'>
		Addressed by &lt;denchmark-link:https://github.com/ray-project/ray/pull/203&gt;#203&lt;/denchmark-link&gt;
.
		</comment>
	</comments>
</bug>