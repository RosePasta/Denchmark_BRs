<bug id='10258' author='rkooo567' open_date='2020-08-22T01:25:44Z' closed_time='2020-08-24T23:58:28Z'>
	<summary>[Placement Group] SigSegv on IsSubset</summary>
	<description>
&lt;denchmark-h:h3&gt;What is the problem?&lt;/denchmark-h&gt;

The following script has this error.
&lt;denchmark-code&gt;*** Aborted at 1598059486 (unix time) try "date -d @1598059486" if you are using GNU date ***
PC: @                0x0 (unknown)
*** SIGSEGV (@0x9) received by PID 56473 (TID 0x113b30dc0) stack trace: ***
    @     0x7fff6f4e55fd _sigtramp
    @ 0x3838313100000010 (unknown)
    @        0x10b5d38df ray::ResourceSet::IsSubset()
    @        0x10b1cf22c ray::gcs::GcsSpreadStrategy::Schedule()
    @        0x10b1cfd13 ray::gcs::GcsPlacementGroupScheduler::ScheduleUnplacedBundles()
    @        0x10b1c46d4 ray::gcs::GcsPlacementGroupManager::SchedulePendingPlacementGroups()
    @        0x10b1c7535 ray::gcs::GcsPlacementGroupManager::OnNodeDead()
    @        0x10b26be48 std::__1::__function::__func&lt;&gt;::operator()()
    @        0x10b1a6d16 ray::gcs::GcsNodeManager::RemoveNode()
    @        0x10b1a5d40 ray::gcs::GcsNodeManager::HandleUnregisterNode()
    @        0x10b233f92 ray::rpc::ServerCallImpl&lt;&gt;::HandleRequestImpl()
    @        0x10b233edf _ZN5boost4asio6detail18completion_handlerIZN3ray3rpc14ServerCallImplINS4_25NodeInfoGcsServiceHandlerENS4_21UnregisterNodeRequestENS4_19UnregisterNodeReplyEE13HandleRequestEvEUlvE_E11do_completeEPvPNS1_19scheduler_operationERKNS_6system10error_codeEm
    @        0x10b7680a9 boost::asio::detail::scheduler::do_run_one()
    @        0x10b75ba32 boost::asio::detail::scheduler::run()
    @        0x10b75b8cc boost::asio::io_context::run()
    @        0x10b16362f main
    @     0x7fff6f2eccc9 start
&lt;/denchmark-code&gt;

&lt;denchmark-h:h3&gt;Reproduction (REQUIRED)&lt;/denchmark-h&gt;

Please provide a script that can be run to reproduce the issue. The script should have no external library dependencies (i.e., use fake or mock data / environments):
def test_placement_group_wait(ray_start_cluster):
    cluster = ray_start_cluster
    for _ in range(2):
        cluster.add_node(num_cpus=2)
    ray.init(address=cluster.address)
    cluster.wait_for_nodes()

    # Wait on placement group that cannot be created.
    placement_group = ray.experimental.placement_group(
        name="name", strategy="SPREAD", bundles=[{
            "CPU": 2
        }, {
            "CPU": 2
        }, {
            "GPU": 2
        },])
    ready, unready = ray.wait([placement_group.ready()], timeout=0.1)
    assert len(unready) == 1
    assert len(ready) == 0
    table = ray.experimental.placement_group_table(placement_group)
    print(table)

    cluster.add_node(num_gpus=2)

    # Wait on placement group and check table.
    # ready, unready = ray.wait([placement_group.ready()])
    import time
    time.sleep(5)

 I have verified my script runs in a clean environment and reproduces the issue.
 I have verified the issue also occurs with the latest wheels.

	</description>
	<comments>
		<comment id='1' author='rkooo567' date='2020-08-22T01:27:47Z'>
		&lt;denchmark-link:https://github.com/ffbin&gt;@ffbin&lt;/denchmark-link&gt;
 Any TODO that is related to this?
		</comment>
		<comment id='2' author='rkooo567' date='2020-08-22T01:42:16Z'>
		Also, broken in this scenario.
&lt;denchmark-code&gt;    cluster = ray_start_cluster
    nodes = [cluster.add_node(num_cpus=2) for _ in range(2)]
    ray.init(address=cluster.address)
    cluster.wait_for_nodes()

    # Wait on placement group that cannot be created.
    placement_group = ray.experimental.placement_group(
        name="name", strategy="SPREAD", bundles=[{
            "CPU": 2
        }, {
            "CPU": 2
        }, {
            "GPU": 2
        },])
    # ready, unready = ray.wait([placement_group.ready()], timeout=0.1)
    # assert len(unready) == 1
    # assert len(ready) == 0
    table = ray.experimental.placement_group_table(placement_group)
    assert table["state"] == "PENDING"

    # Wait on placement group that cannot be created.
    placement_group2 = ray.experimental.placement_group(
        name="name", strategy="SPREAD", bundles=[{
            "CPU": 2
        }, {
            "CPU": 2
        },])
    ready, unready = ray.wait([placement_group2.ready()])
    assert len(unready) == 0
    assert len(ready) == 1
    table = ray.experimental.placement_group_table(placement_group2)
    assert table["state"] == "CREATED"
&lt;/denchmark-code&gt;

		</comment>
		<comment id='3' author='rkooo567' date='2020-08-22T03:54:03Z'>
		&lt;denchmark-link:https://github.com/rkooo567&gt;@rkooo567&lt;/denchmark-link&gt;
 I can't reproduce it with the following example. Is this problem related to ?
&lt;denchmark-code&gt;def test_placement_group_wait(ray_start_cluster):
    cluster = ray_start_cluster
    for _ in range(2):
        cluster.add_node(num_cpus=2)
    ray.init(address=cluster.address)
    cluster.wait_for_nodes()

    # Wait on placement group that cannot be created.
    placement_group = ray.experimental.placement_group(
        name="name", strategy="SPREAD", bundles=[{
            "CPU": 2
        }, {
            "CPU": 2
        }, {
            "GPU": 2
        },])
    import time
    time.sleep(1)
    # assert len(unready) == 1
    # assert len(ready) == 0
    table = ray.experimental.placement_group_table(placement_group)
    print(table)

    cluster.add_node(num_gpus=2)

    # Wait on placement group and check table.
    # ready, unready = ray.wait([placement_group.ready()])
    time.sleep(5)
&lt;/denchmark-code&gt;

		</comment>
		<comment id='4' author='rkooo567' date='2020-08-22T05:21:58Z'>
		I could reproduce with this script.
def test_placement_group_wait_2(ray_start_cluster):
    cluster = ray_start_cluster
    for _ in range(2):
        cluster.add_node(num_cpus=2)
    ray.init(address=cluster.address)
    cluster.wait_for_nodes()

    # Wait on placement group that cannot be created.
    placement_group = ray.experimental.placement_group(
        name="name", strategy="SPREAD", bundles=[{
            "CPU": 2
        }, {
            "CPU": 2
        }, {
            "GPU": 2
        },])
    # ready, unready = ray.wait([placement_group.ready()], timeout=0.1)
    # assert len(unready) == 1
    # assert len(ready) == 0
    table = ray.experimental.placement_group_table(placement_group)
    print(table)

    cluster.add_node(num_gpus=2)

    # Wait on placement group and check table.
    # ready, unready = ray.wait([placement_group.ready()])
    import time
    time.sleep(5)
I didn't check if this is related to my PR, but it will be highly unlikely cuz I dont change any cpp code.
		</comment>
		<comment id='5' author='rkooo567' date='2020-08-22T05:22:20Z'>
		(btw, you should check gcs_server.err logs to see if the error occured)
		</comment>
		<comment id='6' author='rkooo567' date='2020-08-22T05:32:20Z'>
		Confirmed I could reproduce without wait (I tested on the master branch).
		</comment>
		<comment id='7' author='rkooo567' date='2020-08-22T06:20:10Z'>
		Thanks, i will try to fix it.
		</comment>
	</comments>
</bug>