<bug id='13475' author='cruyffturn' open_date='2021-01-15T01:13:03Z' closed_time='2021-01-20T10:25:33Z'>
	<summary>[tune] reuse_actors doesn't reuse actors for the class based API</summary>
	<description>
&lt;denchmark-h:h3&gt;What is the problem?&lt;/denchmark-h&gt;

"reuse_actors = True" doesn't work as expected for the class based API. When I inspect the timeline I observe that workers are not reused. On the other hand, when I use the function based API it works faster and only 3 workers are used in the timeline as expected.
Ray version 1.1.0, Python 3.6.12.
&lt;denchmark-h:h3&gt;Reproduction (REQUIRED)&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;import time
import ray
from ray import tune
import numpy as np

class Trainable(tune.Trainable):
    
    def _setup(self, config):
        self.i = 0
    
    def _train(self):  # This is called iteratively.
        print(self.i)
        time.sleep(1)
        self.i += 1
            
        return {'i':self.i}    

ray.init(num_cpus=3, num_gpus=0)
        
search_space = {
        "i": tune.grid_search(np.arange(20).tolist())
        }

analysis = tune.run(Trainable,
                    name = 'exp',
                    stop = {'i':1},
                    config=search_space,
                    reuse_actors = True
                    )
&lt;/denchmark-code&gt;


[y] I have verified my script runs in a clean environment and reproduces the issue.
[y] I have verified the issue also occurs with the latest wheels.

	</description>
	<comments>
		<comment id='1' author='cruyffturn' date='2021-01-15T11:07:20Z'>
		In order to use  with the class based API you need to implement a  method - see here: &lt;denchmark-link:https://docs.ray.io/en/master/tune/api_docs/trainable.html#advanced-reusing-actors&gt;https://docs.ray.io/en/master/tune/api_docs/trainable.html#advanced-reusing-actors&lt;/denchmark-link&gt;

Your output should also show a warning that this is not the case.
Please feel free to re-open if you have more questions.
		</comment>
		<comment id='2' author='cruyffturn' date='2021-01-15T16:22:38Z'>
		Thank you. I apologize, I missed that.
		</comment>
		<comment id='3' author='cruyffturn' date='2021-01-15T21:30:32Z'>
		&lt;denchmark-link:https://github.com/krfricke&gt;@krfricke&lt;/denchmark-link&gt;
 I have included the reset_config method that returns true but the timeline shows that the actors are not being reused.
What can be the problem?
&lt;denchmark-h:h3&gt;Reproduction (REQUIRED)&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;import time
import ray
from ray import tune
import numpy as np

class Trainable(tune.Trainable):
    
    def setup(self, config):
        self.i = 0
    
    def step(self):
        print(self.i)
        time.sleep(1)
        self.i += 1
            
        return {'i':self.i}
    
    def reset_config(self, new_config):
        
        self.config = new_config
        return True

ray.init(num_cpus=3, num_gpus=0)
        
search_space = {
        "i": tune.grid_search(np.arange(20).tolist())
        }

analysis = tune.run(Trainable,
                    name = 'exp',
                    stop = {'i':1},
                    config=search_space,
                    reuse_actors = True
                    )
&lt;/denchmark-code&gt;

		</comment>
		<comment id='4' author='cruyffturn' date='2021-01-19T10:16:04Z'>
		Hi &lt;denchmark-link:https://github.com/cruyffturn&gt;@cruyffturn&lt;/denchmark-link&gt;
, there seems to be the requirement that the trial has to start from a checkpoint in order to reuse existing trainables. This might be a legacy requirement that we can get rid of. I'm actively looking into this for a similar case, so I'll keep you posted with our progress there.
		</comment>
		<comment id='5' author='cruyffturn' date='2021-01-19T21:33:46Z'>
		Thank you!
		</comment>
		<comment id='6' author='cruyffturn' date='2021-01-20T10:26:09Z'>
		Hi &lt;denchmark-link:https://github.com/cruyffturn&gt;@cruyffturn&lt;/denchmark-link&gt;
, this was fixed in &lt;denchmark-link:https://github.com/ray-project/ray/pull/13549&gt;#13549&lt;/denchmark-link&gt;
 and will be included in the next nightly wheels and next release.
		</comment>
	</comments>
</bug>