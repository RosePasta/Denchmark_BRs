<bug id='5379' author='avnishn' open_date='2019-08-05T22:05:07Z' closed_time='2020-04-01T20:50:58Z'>
	<summary>Issue with passing pickled parameters when using Local Mode</summary>
	<description>
&lt;denchmark-h:h3&gt;System information&lt;/denchmark-h&gt;


OS Platform and Distribution Linux Ubuntu 16.04:
**Ray installed from (source) **:
Ray version 0.7.3:
Python version 3.6.6:
Exact command to reproduce:

&lt;denchmark-h:h3&gt;Describe the problem&lt;/denchmark-h&gt;

Hi Ray Team!
I use local mode when running some integration tests on a module that I have written using Ray, and I have noticed the functionality of ray change
between update 0.7.2 and 0.7.3.
In 0.7.3
When I pass a pickled object as a parameter to my ray worker, I used to expect that the parameter would be returned to me as the pickled object, however while using local mode, it is returned to me as a LocalModeObjectID, and I am unable to retrieve the object using a call to ray.get
If I used 0.7.2
When I pass the same pickled object to my ray worker, it is returned to me as a the pickled object, of type bytes
Has there been an intended change in functionality in Ray’s local mode?
&lt;denchmark-h:h3&gt;Source code / logs&lt;/denchmark-h&gt;

	</description>
	<comments>
		<comment id='1' author='avnishn' date='2019-08-05T22:35:58Z'>
		UPDATE: a small example to recreate the problem:
&lt;denchmark-code&gt;import ray
import pickle
@ray.remote
class ray_worker:

    def __init__(self, pckl_obj):
        self.pckl_obj = pickle.loads(pckl_obj)

if __name__ == "__main__":
    a = 5
    a = pickle.dumps(a)
    ray.init(local_mode=True)
    a_id = ray.put(a)
    worker = ray_worker.remote(a_id)
&lt;/denchmark-code&gt;

So the issue specifically happens if you put the pickled object in the object store using ray.put
If I don’t ray.put the object into the object store, and instead directly pass the pickled object, then the example works fine.
		</comment>
		<comment id='2' author='avnishn' date='2019-08-05T22:50:24Z'>
		oh and the error that I get for completeness:
&lt;denchmark-code&gt;avnishnarayans:tf avnishnarayan$ python ray_break_example.py 
2019-08-05 15:49:04,855 WARNING worker.py:1373 -- WARNING: Not updating worker name since `setproctitle` is not installed. Install this with `pip install setproctitle` (or ray[debug]) to enable monitoring of worker processes.
Traceback (most recent call last):
  File "ray_break_example.py", line 14, in &lt;module&gt;
    worker = ray_worker.remote(a_id)
  File "/Users/avnishnarayan/miniconda2/envs/garage2/lib/python3.6/site-packages/ray/actor.py", line 278, in remote
    return self._remote(args=args, kwargs=kwargs)
  File "/Users/avnishnarayan/miniconda2/envs/garage2/lib/python3.6/site-packages/ray/actor.py", line 344, in _remote
    *copy.deepcopy(args), **copy.deepcopy(kwargs))
  File "ray_break_example.py", line 7, in __init__
    self.pckl_obj = pickle.loads(pckl_obj)
TypeError: a bytes-like object is required, not 'LocalModeObjectID'
&lt;/denchmark-code&gt;

		</comment>
		<comment id='3' author='avnishn' date='2019-08-22T20:44:14Z'>
		I'm running into this as well.  It looks like the new implementation of "remote" functions in local mode doesn't automatically get the arguments from the object store before passing to the function the way remote functions do; it just passes the object IDs to the "remote" function.  I tried pulling the objects out with ray.get in the remote function, but it looks like the LocalObjectID objects are copied without their .value attribute for some reason, so that doesn't work either (ray.get raises an error about the object not being found in the emulated store).
For the moment, it looks like you just can't call ray.put on anything before sending it through a remote function in local mode.  The tests for the local manager seem to be calling ray.get on everything before passing it to the remote function, so it looks like this case explicitly isn't being tested, but the docs do say:

Object IDs can also be passed into remote functions. When the function actually gets executed, the argument will be a retrieved as a regular Python object.

So it seems like this is a regression.
		</comment>
		<comment id='4' author='avnishn' date='2019-08-27T20:57:38Z'>
		cc &lt;denchmark-link:https://github.com/edoakes&gt;@edoakes&lt;/denchmark-link&gt;

		</comment>
		<comment id='5' author='avnishn' date='2019-08-28T06:04:32Z'>
		Thanks for the detailed information. I will look into this soon.
		</comment>
		<comment id='6' author='avnishn' date='2019-10-21T12:06:18Z'>
		I have only just started using ray / tune. I am experiencing the same issue / symptoms as &lt;denchmark-link:https://github.com/jasonnance&gt;@jasonnance&lt;/denchmark-link&gt;
. &lt;denchmark-link:https://github.com/edoakes&gt;@edoakes&lt;/denchmark-link&gt;
 , do you have any idea of when you might be able to look into this issue ? thanks
		</comment>
	</comments>
</bug>