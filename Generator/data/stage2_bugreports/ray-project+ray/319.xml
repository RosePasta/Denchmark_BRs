<bug id='319' author='robertnishihara' open_date='2017-02-26T03:07:08Z' closed_time='2020-01-23T18:45:28Z'>
	<summary>Serialization of Python objects that contain multiple references to the same object are handled incorrectly.</summary>
	<description>
For example, if a list contains multiple references to the same object, these references will be serialized as separate objects and deserialized as separate objects, giving rise to a different object on the other end. For example,
import ray

ray.init()

l = 10 * [[0]]

print(l)  # [[0], [0], [0], [0], [0], [0], [0], [0], [0], [0]]

l[0][0] = 1

print(l)  # [[1], [1], [1], [1], [1], [1], [1], [1], [1], [1]]

new_l = ray.get(ray.put(l))

print(new_l)  # [[1], [1], [1], [1], [1], [1], [1], [1], [1], [1]]

new_l[0][0] = 2

print(new_l)  # [[2], [1], [1], [1], [1], [1], [1], [1], [1], [1]]
	</description>
	<comments>
		<comment id='1' author='robertnishihara' date='2017-02-26T04:32:01Z'>
		When serializing an object, we could keep track of all the objects that we encounter, and if there is a duplicate, we could raise an exception.
		</comment>
		<comment id='2' author='robertnishihara' date='2017-07-20T04:18:07Z'>
		Why raise an exception? Why not remember that it is the same object, and then deserialize it in the same way?
		</comment>
		<comment id='3' author='robertnishihara' date='2017-07-20T05:31:21Z'>
		Agreed, we should handle this properly. I think the proposal to raise an exception was intended as a stopgap to warn people that the current behavior is incorrect.
		</comment>
		<comment id='4' author='robertnishihara' date='2017-08-08T04:10:28Z'>
		In terms of implementation, the Arrow format supports &lt;denchmark-link:https://github.com/apache/arrow/blob/master/format/Layout.md#dictionary-encoding&gt;dictionary encoding&lt;/denchmark-link&gt;
, which basically lets you have multiple references to the same object. Presumably this feature could be used for serializing Python objects with multiple copies of the same internal object.
This should cover most important situations. However, if we do this, there will likely still be some shortcomings. In particular, consider the following.
import numpy as np
import ray

ray.init()

x = np.zeros(3)

def f():
    return x
There is only one array involved.
f()[0] = 1
assert x[0] == 1
However, suppose we wish to serialize the tuple (x, f). Then we our serialization library will serialize x intelligently as an array. However, f is a function, which our serialization library will treat as a black box, so we'll fallback to cloudpickle for serializing f. When we deserialize things on the other side, the arrays x and f() will be different.
		</comment>
		<comment id='5' author='robertnishihara' date='2017-08-08T04:24:40Z'>
		Hm, for use, I think we would be OK to have multiple references to the same object from one top-level object. So inside that object I would expect references to hold, not across.
So:
@ray.remote
def f():
  x = np.zeros(3)
  return {'a': x, 'b': x}

result = ray.get(f.remote())
assert result['a'] is result['b']
		</comment>
		<comment id='6' author='robertnishihara' date='2017-08-21T02:29:32Z'>
		Related issue &lt;denchmark-link:https://issues.apache.org/jira/browse/ARROW-1382&gt;https://issues.apache.org/jira/browse/ARROW-1382&lt;/denchmark-link&gt;

		</comment>
		<comment id='7' author='robertnishihara' date='2020-01-23T18:45:28Z'>
		This has been fixed.
		</comment>
	</comments>
</bug>