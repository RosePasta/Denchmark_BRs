<bug id='7105' author='elpollouk' open_date='2020-02-10T10:26:59Z' closed_time='2020-02-11T06:40:10Z'>
	<summary>[Ray] Attempting to fetch an object that has been freed blocks forever</summary>
	<description>
&lt;denchmark-h:h3&gt;What is the problem?&lt;/denchmark-h&gt;

Ray: 0.8.0/0.8.1
OS: Ubuntu 16.04/18.04
Attempting to ray.get() an object freed using ray.internal.free() causes the get request to block forever.
RLlib has the function &lt;denchmark-link:https://github.com/ray-project/ray/blob/247a4d022ac4ca0a10553616b7c806c4429ed355/rllib/utils/memory.py#L12&gt;ray_get_and_free()&lt;/denchmark-link&gt;
 which is used to fetch and free up samples returned from environment workers. However, when attempting to recover after a worker failure, it will try to re-fetch the last sample batch but ends up blocking the main thread as it tries to fetch an already freed object.
When a process has become stuck in this state, it must be terminated using the kill command as Ctrl+C has no effect.
&lt;denchmark-h:h3&gt;Expected Behaviour&lt;/denchmark-h&gt;

An error is raised if attempting to fetch a freed object. This allows API users to quickly detect problems related to API misuse.
&lt;denchmark-h:h3&gt;Reproduction&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;import ray

@ray.remote
class Sampler:
    def sample(self):
        return [1, 2, 3, 4, 5]

ray.init()
sampler = Sampler.remote()

obj_id = sampler.sample.remote()
sample = ray.get(obj_id)
print("Sample: {}".format(sample))

ray.internal.free(obj_id)
sample = ray.get(obj_id) # Will block forever here
print("Refetched sample: {}".format(sample))
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='elpollouk' date='2020-02-10T18:59:23Z'>
		This is very likely hanging on the in-memory store get() call - ray.internal.free deletes the object from both the in-memory and plasma stores so the subsequent ray.get() blocks forever waiting for the in-memory store entry to appear (which it never does).
Not sure the right solution here. We could leave a "freed" object in the store but it's not obvious when we can clean it up (maybe once all Python references are gone).
		</comment>
		<comment id='2' author='elpollouk' date='2020-02-10T19:49:33Z'>
		I see, I thought we only freed from plasma before actually. I think that is fine since local objects are recounted already.
		</comment>
		<comment id='3' author='elpollouk' date='2020-02-11T10:13:09Z'>
		I can confirm that my test script runs to completion with the latest nightly.
		</comment>
	</comments>
</bug>