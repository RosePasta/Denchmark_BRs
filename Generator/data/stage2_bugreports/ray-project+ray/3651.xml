<bug id='3651' author='raulchen' open_date='2018-12-27T10:39:47Z' closed_time='2019-01-11T07:18:33Z'>
	<summary>Issue when calling a remote function in a background thread</summary>
	<description>
Currently, the following script will fail.
import ray
import time

from threading import Thread

@ray.remote
def foo():
    return 1

@ray.remote
class A(object):

    def spawn_thread(self):
        def f():
            time.sleep(1)
            ray.get(foo.remote())
        Thread(target=f).start()

    def is_alive(self):
        return True


ray.init()
a = A.remote()
a.spawn_thread.remote()
time.sleep(2)
print(ray.get(a.is_alive.remote()))
Because, if we call a remote function in a background and the main thread isn't in the middle of a task. This &lt;denchmark-link:https://github.com/ray-project/ray/blob/ac792d70c85d134855485699e5c6f0ee3a10badc/python/ray/worker.py#L620&gt;assert&lt;/denchmark-link&gt;
 will fail. And then when the main thread receives the next task, this &lt;denchmark-link:https://github.com/ray-project/ray/blob/ac792d70c85d134855485699e5c6f0ee3a10badc/python/ray/worker.py#L770&gt;assert&lt;/denchmark-link&gt;
 will fail as well.
Another multithreading issues:

#3648
Task id generation is not deterministic because multiple threads may increments task_index in a interleaving manner.

Here's how I think we can improve multithreading support:

Make current_task_id, task_index, and put_index thread local.
For main thread, current_task_id is the real task id, which gets set/reset before/after each task. For background threads, current_task_id is a fake random id that will be generated when it's used for the first time, and it will never change again.
task_index and put_index still increments monotonically each time when submit_task and put is called (so task id generation is still deterministic for the main thread).
state_lock isn't needed anymore (could improve efficiency).
task_driver_id is still shared among threads. But we don't reset it to NIL for actors (see https://github.com/ray-project/ray/pull/3648/files#r244123522)

I'll work on the fix in a few days.
cc &lt;denchmark-link:https://github.com/stephanie-wang&gt;@stephanie-wang&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/robertnishihara&gt;@robertnishihara&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/guoyuhong&gt;@guoyuhong&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='raulchen' date='2018-12-27T20:12:12Z'>
		&lt;denchmark-link:https://github.com/raulchen&gt;@raulchen&lt;/denchmark-link&gt;
 that proposal makes sense.
Ultimately, most of this logic should be implemented in the RayletClient C++ class which should be modified to be thread safe. Then we won't have to think about thread safety (as much) in the Python part.
		</comment>
		<comment id='2' author='raulchen' date='2019-01-11T07:18:33Z'>
		Fixed by &lt;denchmark-link:https://github.com/ray-project/ray/pull/3672&gt;#3672&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>