<bug id='2518' author='RuofanKong' open_date='2018-07-30T20:05:16Z' closed_time='2018-09-15T06:35:07Z'>
	<summary>Ape-X hangs during actor creation after second ray.init() / ray.shutdown()</summary>
	<description>
&lt;denchmark-h:h3&gt;System information&lt;/denchmark-h&gt;


OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Mac
Ray installed from (source or binary): pip install
Ray version: 0.4.0 (Also tried 0.5.0 which has the same issue)
Python version: 3.5.2
Exact command to reproduce: python3 -m unittest apex_test.py

&lt;denchmark-h:h3&gt;Describe the problem&lt;/denchmark-h&gt;

I was trying to run multiple unit tests with the RLlib apex training for each test. The code is (apex_test.py):
&lt;denchmark-code&gt;import unittest

import ray
import ray.rllib.dqn as dqn


env_name = "CartPole-v0"


class TestApex(unittest.TestCase):

    _agent = None

    def setUp(self):
        config = dqn.apex.APEX_DEFAULT_CONFIG.copy()
        config["num_workers"] = 2
        ray.init()
        self._agent = dqn.ApexAgent(env=env_name, config=config)

    def test_first_time(self):
        for _ in range(2):
            self._agent.train()

    def test_second_time(self):
        for _ in range(2):
            self._agent.train()

    def tearDown(self):
        ray.worker.cleanup()
&lt;/denchmark-code&gt;

The problem is the Apex training is frozen when it starts the Apex training for the second time, and all CPU utilizations drop down to &lt;20% then. It's also interesting that if we only have one test (for example without test_second_time() in this case), then everything's working fine without any issues. So I wonder if there're any issues for apex training on unit tests.
PS. Also tried the above code on Ray 0.5.0 (replace import ray.rllib.dqn as dqn with import ray.rllib.agents.dqn as dqn), and it has the same problem.
	</description>
	<comments>
		<comment id='1' author='RuofanKong' date='2018-07-30T21:24:26Z'>
		Hmm, it seems to be hanging when creating more replay actors the second time. I don't know why exactly though, it doesn't get to any rllib code but hangs during actor creation.
One workaround is to avoid ray.init() twice. Instead, init it once, and call agent.stop() to clean up between tests.
		</comment>
		<comment id='2' author='RuofanKong' date='2018-07-30T21:32:50Z'>
		&lt;denchmark-link:https://github.com/ericl&gt;@ericl&lt;/denchmark-link&gt;
 thanks for comments! It makes sense, but isn't  supposed to delete actors?
Also, I think it's probably better to support ray.init() multiple times between tests to get the fresh cluster setup from the user perspective.
		</comment>
		<comment id='3' author='RuofanKong' date='2018-07-30T22:07:26Z'>
		Yeah I think it should work. We should keep this bug open and try to come
up with a smaller reproduction case.
&lt;denchmark-link:#&gt;…&lt;/denchmark-link&gt;


On Mon, Jul 30, 2018, 2:32 PM Ruofan Kong ***@***.***&gt; wrote:
 @ericl &lt;https://github.com/ericl&gt; thanks for comments! It makes sense,
 but isn't ray.worker.cleanup() supposed to delete actors?

 Also, I think it's probably better to support ray.init() multiple times
 between tests to get the fresh cluster setup from the user perspective.

 —
 You are receiving this because you were mentioned.
 Reply to this email directly, view it on GitHub
 &lt;#2518 (comment)&gt;,
 or mute the thread
 &lt;https://github.com/notifications/unsubscribe-auth/AAA6SkOpmAw6-RQqxpEz3vUPYPGEdssgks5uL3uIgaJpZM4VnFS0&gt;
 .



		</comment>
		<comment id='4' author='RuofanKong' date='2018-09-15T06:35:07Z'>
		I think this issue is resolved in &lt;denchmark-link:https://github.com/ray-project/ray/pull/2661&gt;#2661&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>