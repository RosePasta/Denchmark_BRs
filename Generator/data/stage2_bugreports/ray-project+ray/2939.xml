<bug id='2939' author='stephanie-wang' open_date='2018-09-25T03:43:30Z' closed_time='2018-10-19T04:57:32Z'>
	<summary>[xray] All messages on main asio event loop should be written asynchronously</summary>
	<description>
&lt;denchmark-h:h3&gt;System information&lt;/denchmark-h&gt;


OS Platform and Distribution (e.g., Linux Ubuntu 16.04): all
Ray installed from (source or binary): source
Ray version: Master

&lt;denchmark-h:h3&gt;Describe the problem&lt;/denchmark-h&gt;

The backend writes messages to a socket synchronously, which can block the writer's event loop. There are a few places where we do this on the main event loop:

When forwarding a task to a remote node manager: code
When assigning a task to a worker: code
When sending a Pull request to a remote object manager: code

We should modify the  class to allow messages to be written asynchronously. boost::asio's doesn't guarantee correctness if we allow concurrent asynchronous writes on the same socket, so we must implement a queue per socket ourselves. Here is an &lt;denchmark-link:https://github.com/stephanie-wang/ray/blob/xray-ysb-failure-test/src/ray/common/client_connection.cc#L166&gt;example&lt;/denchmark-link&gt;
.
	</description>
	<comments>
		<comment id='1' author='stephanie-wang' date='2018-09-27T16:08:28Z'>
		Maybe could use a strand when posting to a thread pool, which guarantees both correctness and order?
		</comment>
		<comment id='2' author='stephanie-wang' date='2018-10-19T04:57:32Z'>
		Fixed by &lt;denchmark-link:https://github.com/ray-project/ray/pull/3023&gt;#3023&lt;/denchmark-link&gt;
.
		</comment>
	</comments>
</bug>