<bug id='8550' author='TBashida' open_date='2020-05-22T08:04:09Z' closed_time='2020-10-27T04:37:46Z'>
	<summary>Ray seems to be caching the imported .py even after code terminates</summary>
	<description>
I am testing ray on 1 head node and 1 cluster node.
I started the head node with:
&lt;denchmark-code&gt;ray start --head --redis-port=6379
&lt;/denchmark-code&gt;

and the cluster node with:
&lt;denchmark-code&gt;ray start --address='&lt;ip_head_node&gt;:6379'
&lt;/denchmark-code&gt;

At both the head node and the cluster node, there is f.py &amp; ray_test.py
f.py:
&lt;denchmark-code&gt;def f(num):
    print("f:", num)
    return num
&lt;/denchmark-code&gt;

ray_test.py:
&lt;denchmark-code&gt;import ray
import f

@ray.remote
def r(num):
      return f.f(num)

 if __name__ == "__main__":
    num_tasks = 8
    ray.init(address="auto")
    result_ids = [r.remote(t) for t in range(num_tasks)]
    results = ray.get(result_ids)
    print(results)
&lt;/denchmark-code&gt;

running:
&lt;denchmark-code&gt;python ray_test.py
&lt;/denchmark-code&gt;

works fine.
But, when I modify f.py, (eg. change the print statement), on BOTH head and cluster node, (both head node and cluster node have the same f.py because I'm rsync-ing it over and also verifying on the cluster node), subsequent:
&lt;denchmark-code&gt;python ray_test.py
&lt;/denchmark-code&gt;

still uses the OLD f.py
I've even tried deleting f.py on the cluster node, but the code still runs when it shouldn't (??) So it seems that f.py is being cached somewhere? Or am I missing something?
&lt;denchmark-h:h3&gt;What is your question?&lt;/denchmark-h&gt;

My goal is to be able to modify f.py on both head, rsync it to the cluster node, and run ray using the NEW f.py, without stopping and restarting ray on both head and cluster. Is that possible?
Thanks!
Python 3.6.9
ray==0.8.5
	</description>
	<comments>
		<comment id='1' author='TBashida' date='2020-05-25T05:08:29Z'>
		Yes. The function is cached based on its module name + function name, and pickled function hash. This seems to happen because although the function f is modified, the remote function's  descriptor is not changed (because remote function's function hash, module name, and function name is still the same after f is changed).
&lt;denchmark-link:https://github.com/edoakes&gt;@edoakes&lt;/denchmark-link&gt;
 Isn't it a bug or expected behavior? It seems to happen because  only caches function_descriptor, not function_descriptor + job_id. (
)
Is there any reason why we don't cache functions based on job_id + function_descriptor?
		</comment>
		<comment id='2' author='TBashida' date='2020-05-25T11:01:52Z'>
		Ok thanks for the response! I thought I was imagining things ...
For my 2c worth ... I think the behaviour should not be the case, because that goes against what import is supposed to do. I get it that caching has obvious speed advantages, but at the very least this feature/bug should be documented. I spent quite a while looking at various parameters to use on ray.init(), hoping to force it to NOT use any memory to cache stuff, but obviously to no avail.
If only there was a flag (yet another flag ?!!) to turn this feature on/off... Would caching the function last modified datetime make things simpler? Just a thought.
Don't get me wrong, I think that Ray is truly awesome and I'm very thankful for the work you guys have put into it. I think that Ray is something that should be built in to Python! Looking forward to seeing which way this is going to go. Thanks again!
		</comment>
		<comment id='3' author='TBashida' date='2020-05-28T21:56:35Z'>
		This would probably be resolved in the future with proper multitenancy support between drivers.
		</comment>
		<comment id='4' author='TBashida' date='2020-09-19T09:00:49Z'>
		&lt;denchmark-link:https://github.com/TBashida&gt;@TBashida&lt;/denchmark-link&gt;
 Can you check if it is still the case in the latest master? As far as I understood this could've been fixed already.
		</comment>
		<comment id='5' author='TBashida' date='2020-10-22T06:44:42Z'>
		&lt;denchmark-link:https://github.com/ericl&gt;@ericl&lt;/denchmark-link&gt;
 Bump up the priority of this task as multi tenancy is turned on by default.
		</comment>
		<comment id='6' author='TBashida' date='2020-10-27T04:37:46Z'>
		This is actually already resolved in the latest master
		</comment>
	</comments>
</bug>