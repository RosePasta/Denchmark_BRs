<bug id='4406' author='robertnishihara' open_date='2019-03-19T02:16:11Z' closed_time='2019-03-21T18:59:16Z'>
	<summary>Redis LRU plus object store LRU can lead to fatal crash.</summary>
	<description>
&lt;denchmark-h:h3&gt;System information&lt;/denchmark-h&gt;


OS Platform and Distribution (e.g., Linux Ubuntu 16.04): MacOS
Ray installed from (source or binary): source
Ray version: 0.7.0.dev1
Python version: 3.6.4
Exact command to reproduce:

import numpy as np
import ray

ray.init(object_store_memory=10**8)

x = np.zeros(8*10**7, dtype=np.uint8)
x_id = ray.put(x)

# Remove the object from the object table to simulate Redis LRU eviction.
assert ray.global_state.redis_clients[0].delete(b'OBJECT' + x_id.binary()) == 1

# Now evict the object from the object store.
ray.put(x)  # This will crash.
The raylet crashes with Redis error: ERR The entry to remove doesn't exist.:
&lt;denchmark-code&gt;F0318 19:14:06.948998 2466321280 redis_context.cc:58] Redis error: ERR The entry to remove doesn't exist.
*** Check failure stack trace: ***
*** Aborted at 1552961646 (unix time) try "date -d @1552961646" if you are using GNU date ***
PC: @                0x0 (unknown)
*** SIGABRT (@0x7fff5a64ab66) received by PID 43368 (TID 0x7fff93011380) stack trace: ***
    @     0x7fff5a808f5a _sigtramp
    @                0x0 (unknown)
    @     0x7fff5a5a61ae abort
    @        0x104bb5cb9 google::logging_fail()
    @        0x104bb4992 google::LogMessage::SendToLog()
    @        0x104bb5095 google::LogMessage::Flush()
    @        0x104bb5172 google::LogMessage::~LogMessage()
    @        0x104bae955 ray::RayLog::~RayLog()
    @        0x104b33dc3 ray::gcs::GlobalRedisCallback()
    @        0x104b97fad redisProcessCallbacks
    @        0x104b2ae5a RedisAsioClient::handle_read()
    @        0x104b2b4ac boost::asio::detail::reactive_null_buffers_op&lt;&gt;::do_complete()
    @        0x104aa77af boost::asio::detail::scheduler::do_run_one()
    @        0x104aa71d2 boost::asio::detail::scheduler::run()
    @        0x104a9c44e main
    @     0x7fff5a4fa015 start
    @               0x10 (unknown)
&lt;/denchmark-code&gt;

This is related to &lt;denchmark-link:https://github.com/ray-project/ray/pull/4199&gt;#4199&lt;/denchmark-link&gt;
. cc &lt;denchmark-link:https://github.com/stephanie-wang&gt;@stephanie-wang&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/kfstorm&gt;@kfstorm&lt;/denchmark-link&gt;
 Thoughts about the best way to fix this?
	</description>
	<comments>
		<comment id='1' author='robertnishihara' date='2019-03-19T03:40:57Z'>
		The redis key about this object was deleted and then it requests to remove an entry about this object. This is due to we treat a remove operation against a non-existent entry is invalid.
To make GCS  data structure works well with redis LRU cache, we can change the implementation in  to allow removing a non-existent entry. This will keep it consistent with redis list implementation since we allow appending an  entry to an empty redis list. However, as I mentioned in &lt;denchmark-link:https://github.com/ray-project/ray/pull/4199&gt;#4199&lt;/denchmark-link&gt;
, one drawback of this is that the remove operation may silently fail due to fields of data mismatch with existing entry in GCS.
		</comment>
		<comment id='2' author='robertnishihara' date='2019-03-19T04:14:33Z'>
		Thanks &lt;denchmark-link:https://github.com/kfstorm&gt;@kfstorm&lt;/denchmark-link&gt;
, that explanation makes sense. Relevant comment is &lt;denchmark-link:https://github.com/ray-project/ray/pull/4199#discussion_r263244194&gt;#4199 (comment)&lt;/denchmark-link&gt;
 I believe.
		</comment>
		<comment id='3' author='robertnishihara' date='2019-03-19T16:42:16Z'>
		Sounds like we should change this to log the error on redis, but return OK.
		</comment>
	</comments>
</bug>