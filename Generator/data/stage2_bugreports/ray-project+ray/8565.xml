<bug id='8565' author='allenyin55' open_date='2020-05-23T00:57:08Z' closed_time='2020-05-25T03:32:44Z'>
	<summary>[core] Remote task cancellation not working as expected.</summary>
	<description>
&lt;denchmark-h:h3&gt;What is the problem?&lt;/denchmark-h&gt;

Ray task cancellation returns error TypeError: No owner found for object. when cancelling the task from a different function.

Ray: latest master (&lt;denchmark-link:https://github.com/ray-project/ray/commit/2e5e789294dccaa53b34abc6e46925a9041f9681&gt;2e5e789&lt;/denchmark-link&gt;
)
Python: 3.7.4
OS: macos 10.15.3
&lt;denchmark-h:h3&gt;Reproduction (REQUIRED)&lt;/denchmark-h&gt;

The following script doesn't work
import os
import ray
import time

ray.init()
FILE_NAME = "db"

@ray.remote
def save():
    time.sleep(100)


def write():
    with open(FILE_NAME, "wb") as f:
        object_id = save.remote()
        f.write(object_id.binary())
       

def read():
    with open(FILE_NAME, "rb") as f:
        binary_id = f.read()
        object_id = ray.state.binary_to_object_id(binary_id)
        ray.cancel(object_id)


if __name__ == "__main__":
    write()
    try:
        read()
    finally:
        os.remove(FILE_NAME)
If we return the object_id in write, then it works.
import os
import ray
import time
ray.init()
FILE_NAME = "db"

@ray.remote
def save():
  time.sleep(100)

def write():
  with open(FILE_NAME, "wb") as f:
    object_id = save.remote()
    f.write(object_id.binary())
    return object_id ####NEW

def read():
  with open(FILE_NAME, "rb") as f:
    binary_id = f.read()
    object_id = ray.state.binary_to_object_id(binary_id)
    ray.cancel(object_id)

if __name__ == "__main__":
  x = write() ####NEW
  try:
    read()
  finally:
    os.remove(FILE_NAME)

 I have verified my script runs in a clean environment and reproduces the issue.
 I have verified the issue also occurs with the latest wheels.

	</description>
	<comments>
		<comment id='1' author='allenyin55' date='2020-05-23T01:00:46Z'>
		Hey &lt;denchmark-link:https://github.com/stephanie-wang&gt;@stephanie-wang&lt;/denchmark-link&gt;
 , it looks like this could be a problem with , but I'm not 100% sure.
		</comment>
		<comment id='2' author='allenyin55' date='2020-05-25T03:32:43Z'>
		This behavior is expected. ObjectIDs that are serialized and deserialized out-of-band (using object_id.binary() instead of something like pickle.dumps(object_id)) are not expected to work properly and none of the normal operations like ray.get will work either.
		</comment>
		<comment id='3' author='allenyin55' date='2020-05-25T20:18:39Z'>
		Is my script expected to work if I use pickle.dumps(object_id) &amp; pickle.loads(binary_id) to serialize and deserialize?
I tried and it still gave the same error TypeError: No owner found for object.
import os
import ray
import time
import pickle

ray.init()
FILE_NAME = "db"

@ray.remote
def save():
    time.sleep(100)


def write():
    with open(FILE_NAME, "wb") as f:
        object_id = save.remote()
        f.write(pickle.dumps(object_id))
       
def read():
    with open(FILE_NAME, "rb") as f:
        binary_id = f.read()
        object_id = pickle.loads(binary_id)
        ray.cancel(object_id)


if __name__ == "__main__":
    write()
    try:
        read()
    finally:
        os.remove(FILE_NAME)
		</comment>
	</comments>
</bug>