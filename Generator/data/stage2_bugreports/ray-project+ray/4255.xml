<bug id='4255' author='robertnishihara' open_date='2019-03-05T02:19:51Z' closed_time='2019-03-09T08:09:54Z'>
	<summary>The many_actor_tasks.py long running stress test crashes instantaneously.</summary>
	<description>
The relevant test is &lt;denchmark-link:https://github.com/ray-project/ray/blob/master/ci/long_running_tests/workloads/many_actor_tasks.py&gt;https://github.com/ray-project/ray/blob/master/ci/long_running_tests/workloads/many_actor_tasks.py&lt;/denchmark-link&gt;

&lt;denchmark-link:https://github.com/williamma12&gt;@williamma12&lt;/denchmark-link&gt;
 is looking into this.
	</description>
	<comments>
		<comment id='1' author='robertnishihara' date='2019-03-08T06:52:39Z'>
		&lt;denchmark-link:https://github.com/williamma12&gt;@williamma12&lt;/denchmark-link&gt;
 pointed out that the check failure seems to happen in 

I think the issue may be the following. Actors can be in two modes:

No cpus/gpus/resources are declared in the decorator. In this case, the actor itself acquires no resources during its lifetime, but each actor method requires 1 cpu resource to run.
Some cpus/gpus/resources are declared in the decorator. In this case, the actor acquires the declared resources (with cpus defaulting to 1 if not specified) for the duration of its lifetime. Actor methods require no additional resources to run.

However, some of these behaviors are set when the actor class is decorated, not when the actor is created, e.g., see



ray/python/ray/worker.py


        Lines 2455 to 2467
      in
      4c80177






 # Set the actor default resources. 



 if num_cpus is None and num_gpus is None and resources is None: 



 # In the default case, actors acquire no resources for 



 # their lifetime, and actor methods will require 1 CPU. 



 cpus_to_use = DEFAULT_ACTOR_CREATION_CPUS_SIMPLE_CASE 



 actor_method_cpus = DEFAULT_ACTOR_METHOD_CPUS_SIMPLE_CASE 



 else: 



 # If any resources are specified, then all resources are 



 # acquired for the actor's lifetime and no resources are 



 # associated with methods. 



 cpus_to_use = (DEFAULT_ACTOR_CREATION_CPUS_SPECIFIED_CASE 



 if num_cpus is None else num_cpus) 



 actor_method_cpus = DEFAULT_ACTOR_METHOD_CPUS_SPECIFIED_CASE 





So these behaviors are getting mixed together in an incorrect way and we end up with a situation where the actor probably has 0.1 cpus acquired for its lifetime and each method requires 1 cpu to run, so the raylet tries to give it 1.1 cpus at some point, but fractional resources greater than 1 are not allowed, so this crashes.
We should probably fix this on the Python side so that we don't set the defaults when the actor class is decorated but rather when the actor class is instantiated.
		</comment>
		<comment id='2' author='robertnishihara' date='2019-03-09T08:09:54Z'>
		The test is fixed by &lt;denchmark-link:https://github.com/ray-project/ray/pull/4315&gt;#4315&lt;/denchmark-link&gt;
. The underlying bug remains and is tracked in &lt;denchmark-link:https://github.com/ray-project/ray/issues/4312&gt;#4312&lt;/denchmark-link&gt;
.
		</comment>
	</comments>
</bug>