<bug id='6977' author='fabianrbz' open_date='2020-01-30T17:10:10Z' closed_time='2020-02-01T02:41:25Z'>
	<summary>[rllib] MARWIL does not support ModelV2 models</summary>
	<description>
&lt;denchmark-h:h3&gt;What is the problem?&lt;/denchmark-h&gt;

Ray version: 0.7.3
Os: macOs Mojave
Python: 3.7.4
I'm trying to run  with a custom environment and a parametric action space. I was able to run DQN with the same env and action space by following &lt;denchmark-link:https://ray.readthedocs.io/en/latest/rllib-models.html#variable-length-parametric-action-spaces&gt;https://ray.readthedocs.io/en/latest/rllib-models.html#variable-length-parametric-action-spaces&lt;/denchmark-link&gt;
 and defining:

original env (simplified version, just to show the different spaces)
a wrapper env
a parametric action model

I'm trying to reproduce the issue using a modified version of &lt;denchmark-link:https://gist.github.com/fabianrbz/8e613b347d81cc05af62272dd1a7e2e5&gt;RandomEnv&lt;/denchmark-link&gt;
 and running the following &lt;denchmark-link:https://gist.github.com/fabianrbz/5b6d9803e0b41d1b6f8a555d45d7fec3&gt;main&lt;/denchmark-link&gt;

and I get the following error:
&lt;denchmark-code&gt;    super(MyModelClass, self).__init__(obs_space, action_space, num_outputs, model_config, name, **kw)
TypeError: __init__() got an unexpected keyword argument 'state_in'
&lt;/denchmark-code&gt;

looks like Marwil passes more options, so I changed the initializer of my custom model to:
&lt;denchmark-code&gt;class MyModelClass(DistributionalQModel, TFModelV2):
    def __init__(self,  obs_space, action_space, num_outputs, model_config, name, state_in, seq_lens):
      super(MyModelClass, self).__init__(a, obs_space, action_space, num_outputs, model_config, name, state_in, seq_lens)
&lt;/denchmark-code&gt;

but got a different error
So I changed the signature to:
&lt;denchmark-code&gt;    def __init__(self, *kargs, **args):
      super(MyModelClass, self).__init__(*kargs, **args)
&lt;/denchmark-code&gt;

and printed the arguments:
&lt;denchmark-code&gt;(pid=34757) (Pdb)
kargs
(pid=34757) ({'obs': &lt;tf.Tensor 'default_policy/Placeholder:0' shape=(?, 4301) dtype=float32&gt;, 'prev_actions': &lt;tf.Tensor 'default_policy/action:0' shape=(?,) dtype=int64&gt;, 'prev_rewards': &lt;tf.Tensor 'default_policy/prev_reward:0' shape=(?,) dtype=float32&gt;, 'is_training': &lt;tf.Tensor 'default_policy/p_func/PlaceholderWithDefault:0' shape=() dtype=bool&gt;}, Box(4301,), Discrete(17), 17, {'conv_filters': None, 'conv_activation': 'relu', 'fcnet_activation': 'tanh', 'fcnet_hiddens': [256, 256], 'free_log_std': False, 'no_final_linear': False, 'vf_share_layers': True, 'use_lstm': False, 'max_seq_len': 20, 'lstm_cell_size': 256, 'lstm_use_prev_action_reward': False, 'state_shape': None, 'framestack': True, 'dim': 84, 'grayscale': False, 'zero_mean': True, 'custom_preprocessor': None, 'custom_model': 'my_model', 'custom_options': {}})
(pid=34757) (Pdb)
args
(pid=34757) self = &lt;my_model_class.MyModelClass object at 0x1c86bf8b50&gt;
(pid=34757) kargs = ({'obs': &lt;tf.Tensor 'default_policy/Placeholder:0' shape=(?, 4301) dtype=float32&gt;, 'prev_actions': &lt;tf.Tensor 'default_policy/action:0' shape=(?,) dtype=int64&gt;, 'prev_rewards': &lt;tf.Tensor 'default_policy/prev_reward:0' shape=(?,) dtype=float32&gt;, 'is_training': &lt;tf.Tensor 'default_policy/p_func/PlaceholderWithDefault:0' shape=() dtype=bool&gt;}, Box(4301,), Discrete(17), 17, {'conv_filters': None, 'conv_activation': 'relu', 'fcnet_activation': 'tanh', 'fcnet_hiddens': [256, 256], 'free_log_std': False, 'no_final_linear': False, 'vf_share_layers': True, 'use_lstm': False, 'max_seq_len': 20, 'lstm_cell_size': 256, 'lstm_use_prev_action_reward': False, 'state_shape': None, 'framestack': True, 'dim': 84, 'grayscale': False, 'zero_mean': True, 'custom_preprocessor': None, 'custom_model': 'my_model', 'custom_options': {}})
(pid=34757) args = {'state_in': None, 'seq_lens': None}
&lt;/denchmark-code&gt;

and the following error:
&lt;denchmark-code&gt;    raise TypeError("Error converting %s to a TensorShape: %s." % (arg_name, e))
TypeError: Error converting shape to a TensorShape: int() argument must be a string, a bytes-like object or a number, not 'Discrete'.
&lt;/denchmark-code&gt;

It looks like Marwil passes the whole example from the offline dataset as the first argument, and that's why i get the above error. When running DQN that parameter wasn't present, as shown below:
&lt;denchmark-code&gt;(Box(4048,), Discrete(16), 16, {'conv_filters': None, 'conv_activation': 'relu', 'fcnet_activation': 'tanh', 'fcnet_hiddens': [256, 256], 'free_log_std': False, 'no_final_linear': False, 'vf_share_layers': True, 'use_lstm': False, 'max_seq_len': 20, 'lstm_cell_size': 256, 'lstm_use_prev_action_reward': False, 'state_shape': None, 'framestack': True, 'dim': 84, 'grayscale': False, 'zero_mean': True, 'custom_preprocessor': None, 'custom_model': 'my_model', 'custom_options': {}}, 'q_func')
(Pdb) args
self = &lt;my_model_class.MyModelClass object at 0x1c462c2e90&gt;
kargs = (Box(4048,), Discrete(16), 16, {'conv_filters': None, 'conv_activation': 'relu', 'fcnet_activation': 'tanh', 'fcnet_hiddens': [256, 256], 'free_log_std': False, 'no_final_linear': False, 'vf_share_layers': True, 'use_lstm': False, 'max_seq_len': 20, 'lstm_cell_size': 256, 'lstm_use_prev_action_reward': False, 'state_shape': None, 'framestack': True, 'dim': 84, 'grayscale': False, 'zero_mean': True, 'custom_preprocessor': None, 'custom_model': 'my_model', 'custom_options': {}}, 'q_func')
args = {'num_atoms': 1, 'q_hiddens': [], 'dueling': False, 'use_noisy': False, 'v_min': -10.0, 'v_max': 10.0, 'sigma0': 0.5, 'parameter_noise': False}
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='fabianrbz' date='2020-01-30T18:58:29Z'>
		Ah, this is because MARWIL has not been upgraded to use ModelV2. You can probably still use custom models by extending the legacy rllib Model class (rllib/models/Model).
Or you can try changing the get_model() call in marwil_policy.py to get_model_v2(), but this might involve significant changes to marwil to get it working.
Btw, one other thing I noticed is your custom model is extending DistributionalQModel -- this is probably not intended.
		</comment>
		<comment id='2' author='fabianrbz' date='2020-01-30T19:30:06Z'>
		Ah, &lt;denchmark-link:https://github.com/ray-project/ray/pull/6975&gt;#6975&lt;/denchmark-link&gt;
 looks like it might fix it.
		</comment>
	</comments>
</bug>