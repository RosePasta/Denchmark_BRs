<bug id='12758' author='edoakes' open_date='2020-12-10T18:49:20Z' closed_time='2020-12-11T00:24:56Z'>
	<summary>max_task_retries not working for named actors</summary>
	<description>
&lt;denchmark-h:h3&gt;What is the problem?&lt;/denchmark-h&gt;

When setting max_restarts=-1 and max_task_retries=-1 for a named actor and killing it, the actor is successfully restarted but pending actor tasks are failed.
&lt;denchmark-h:h3&gt;Reproduction (REQUIRED)&lt;/denchmark-h&gt;

Unnamed actor, working:
import time

import ray
ray.init()

@ray.remote
class ActorToKill:
    def __init__(self):
        print("ActorToKill initialized")

    def run_forever(self):
        print("run_forever called")
        import time;time.sleep(100000)

@ray.remote
class CallingActor:
    def __init__(self, a):
        self.actor = a

    def call_other(self):
        return ray.get(self.actor.run_forever.remote())

a = ActorToKill.options(max_restarts=-1, max_task_retries=-1).remote()
c = CallingActor.remote(a)
oid = c.call_other.remote()
time.sleep(5)
ray.kill(a, no_restart=False)
ray.get(oid)
Output:
&lt;denchmark-code&gt;(base) ray/serve % python normal.py 
File descriptor limit 256 is too low for production servers and may result in connection errors. At least 8192 is recommended. --- Fix with 'ulimit -n 8192'
2020-12-10 12:48:56,375 INFO services.py:1171 -- View the Ray dashboard at http://127.0.0.1:8265
(pid=82516) ActorToKill initialized
(pid=82516) run_forever called
2020-12-10 12:49:03,163 WARNING worker.py:1032 -- A worker died or was killed while executing task ffffffffffffffffdf5a1a8201000000.
(pid=82511) ActorToKill initialized
... runs forever ...
&lt;/denchmark-code&gt;

Named actor, not working:
import time

import ray
ray.init()

@ray.remote
class ActorToKill:
    def __init__(self):
        print("ActorToKill initialized")

    def run_forever(self):
        print("run_forever called")
        import time;time.sleep(100000)

@ray.remote
class CallingActor:
    def __init__(self):
        self.actor = ray.get_actor("a")

    def call_other(self):
        return ray.get(self.actor.run_forever.remote())

a = ActorToKill.options(name="a", max_restarts=-1, max_task_retries=-1).remote()
c = CallingActor.remote()
oid = c.call_other.remote()
time.sleep(5)
ray.kill(a, no_restart=False)
ray.get(oid)
Output:
&lt;denchmark-code&gt;(base) ray/serve % python named.py
File descriptor limit 256 is too low for production servers and may result in connection errors. At least 8192 is recommended. --- Fix with 'ulimit -n 8192'
2020-12-10 12:48:09,156 INFO services.py:1171 -- View the Ray dashboard at http://127.0.0.1:8265
(pid=82465) ActorToKill initialized
(pid=82465) run_forever called
2020-12-10 12:48:15,850 WARNING worker.py:1032 -- A worker died or was killed while executing task ffffffffffffffffdf5a1a8201000000.
Traceback (most recent call last):
  File "named.py", line 28, in &lt;module&gt;
    ray.get(oid)
  File "/Users/eoakes/code/ray/python/ray/worker.py", line 1377, in get
    raise value.as_instanceof_cause()
ray.exceptions.RayTaskError: ray::CallingActor.call_other() (pid=82466, ip=192.168.0.124)
  File "python/ray/_raylet.pyx", line 463, in ray._raylet.execute_task
  File "python/ray/_raylet.pyx", line 415, in ray._raylet.execute_task.function_executor
  File "named.py", line 21, in call_other
    return ray.get(self.actor.run_forever.remote())
ray.exceptions.RayActorError: The actor died unexpectedly before finishing this task.
(pid=82464) ActorToKill initialized
&lt;/denchmark-code&gt;

If the code snippet cannot be run by itself, the issue will be closed with "needs-repro-script".

 I have verified my script runs in a clean environment and reproduces the issue.
 I have verified the issue also occurs with the latest wheels.

	</description>
	<comments>
		<comment id='1' author='edoakes' date='2020-12-10T18:50:22Z'>
		cc &lt;denchmark-link:https://github.com/stephanie-wang&gt;@stephanie-wang&lt;/denchmark-link&gt;
 looks like another problem with the existing retries logic D: I think we should seriously consider moving to using failure callbacks instead (though it wouldn't directly address this problem -- this is probably something with how  constructs the actor handle).
		</comment>
	</comments>
</bug>