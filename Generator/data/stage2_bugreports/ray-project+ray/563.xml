<bug id='563' author='stephanie-wang' open_date='2017-05-18T04:38:41Z' closed_time='2018-10-27T02:14:10Z'>
	<summary>Race condition for `db_connect`</summary>
	<description>
For many Ray components, a common pattern for startup is:

Connect to the database
Register with a unique client ID in the database
Subscribe to relevant channels (e.g. object table notifications)

There is a race condition between steps 2 and 3. If another Ray client receives the client ID registration and publishes to the channel in step 3, the connecting client will not receive the notification. For example, in local_scheduler.cc:start_server, we first call db_connect, and then we call task_table_subscribe to start receiving scheduling notifications from the global scheduler.
Proposed fix: Separate db_connect into db_connect and db_register. db_connect initializes the Redis contexts but does not make the client visible to the rest of the clients in the system. db_register makes the client visible to the rest of the clients in the system by registering the client ID. This would allow us to do all subscriptions (step 3) before registering the client (step 2).
	</description>
	<comments>
		<comment id='1' author='stephanie-wang' date='2018-10-27T02:14:10Z'>
		Closing because these particular functions are no longer around, though it's possible that the underlying problem may still be present.
		</comment>
	</comments>
</bug>