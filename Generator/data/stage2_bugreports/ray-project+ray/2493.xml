<bug id='2493' author='robertnishihara' open_date='2018-07-26T22:34:59Z' closed_time='2020-03-05T23:10:02Z'>
	<summary>Fall back to pickle for deeply nested objects.</summary>
	<description>
import ray
ray.init()

d = [[[[[[[[[[[[[[[[[[[[[[[[[]]]]]]]]]]]]]]]]]]]]]]]]]
ray.put(d)
The last line fails with
&lt;denchmark-code&gt;---------------------------------------------------------------------------
ArrowInvalid                              Traceback (most recent call last)
&lt;ipython-input-11-0420c5a7d841&gt; in &lt;module&gt;()
----&gt; 1 ray.put(d)

~/Workspace/ray/python/ray/worker.py in put(value, worker)
   2503         object_id = worker.local_scheduler_client.compute_put_id(
   2504             worker.current_task_id, worker.put_index, worker.use_raylet)
-&gt; 2505         worker.put_object(object_id, value)
   2506         worker.put_index += 1
   2507         return object_id

~/Workspace/ray/python/ray/worker.py in put_object(self, object_id, value)
    394         # Serialize and put the object in the object store.
    395         try:
--&gt; 396             self.store_and_register(object_id, value)
    397         except pyarrow.PlasmaObjectExists:
    398             # The object already exists in the object store, so there is no

~/Workspace/ray/python/ray/worker.py in store_and_register(self, object_id, value, depth)
    329                     memcopy_threads=self.memcopy_threads,
    330                     serialization_context=self.get_serialization_context(
--&gt; 331                         self.task_driver_id))
    332                 break
    333             except pyarrow.SerializationCallbackError as e:

~/Workspace/ray/python/ray/utils.py in _wrapper(*args, **kwargs)
    330                 def _wrapper(*args, **kwargs):
    331                     with self.lock:
--&gt; 332                         return orig_attr(*args, **kwargs)
    333 
    334                 self._wrapper_cache[attr] = _wrapper

~/Workspace/ray/python/ray/pyarrow_files/pyarrow/_plasma.pyx in pyarrow._plasma.PlasmaClient.put()

~/Workspace/ray/python/ray/pyarrow_files/pyarrow/serialization.pxi in pyarrow.lib.SerializedPyObject.total_bytes.__get__()

~/Workspace/ray/python/ray/pyarrow_files/pyarrow/error.pxi in pyarrow.lib.check_status()

ArrowInvalid: Max recursion depth reached
&lt;/denchmark-code&gt;

In this case we should just fall back to pickle.
cc &lt;denchmark-link:https://github.com/jsuarez5341&gt;@jsuarez5341&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/richardliaw&gt;@richardliaw&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/pcmoritz&gt;@pcmoritz&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='robertnishihara' date='2018-07-26T22:50:07Z'>
		I can take a shot at this one
		</comment>
		<comment id='2' author='robertnishihara' date='2018-08-01T17:17:11Z'>
		This is just extending the exceptions that we catch to include the arrow equivalent of MaxRecursionDepth right and then retrying with pickle=True right?
		</comment>
		<comment id='3' author='robertnishihara' date='2018-08-01T18:03:03Z'>
		What would you pass pickle=True into?
		</comment>
		<comment id='4' author='robertnishihara' date='2018-08-01T18:15:38Z'>
		&lt;denchmark-code&gt;register_custom_serializer(
  type(e.example_object), use_pickle=True)
&lt;/denchmark-code&gt;

		</comment>
		<comment id='5' author='robertnishihara' date='2020-03-05T23:10:01Z'>
		Auto-closing stale issue.
		</comment>
	</comments>
</bug>