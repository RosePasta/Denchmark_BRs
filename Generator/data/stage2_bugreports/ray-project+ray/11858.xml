<bug id='11858' author='karstenddwx' open_date='2020-11-06T16:28:45Z' closed_time='2020-11-25T12:39:23Z'>
	<summary>[rllib] How to handle missing rewards in a MultiAgentEnv</summary>
	<description>
We have a MultiAgentEnv scenario where a single agent is selected per step that executes his action, and only one agent receives a reward, all others not.
Now the question is: how to handle these non-existing rewards?
The default is to return None (see multi_agent_env.py). This contradict with what is expected in the deploy-script rollout.py, where None is not allowed, as it crashes in line 433.
The current advise is to use reward 0 instead of None as an equivalent (see &lt;denchmark-link:10805&gt;https://github.com/ray-project/ray/issues/10805&lt;/denchmark-link&gt;
)
Our scenario aims to solve a technical problem, where actual rewards are in the range of  -0.9 and -0.4. The vast majority of rewards is somewhere between -0.8 and -0.5, so returning 0 would really be a drastic difference to None (i.e. no reward).
So, why does rollout.py  not allow None (although see multi_agent_env.py uses it as default)?  Can we change that, so both are aligned?
Or do we have a fundamental misunderstanding here?
	</description>
	<comments>
		<comment id='1' author='karstenddwx' date='2020-11-09T07:00:39Z'>
		I'm not sure I see why zero rewards is a problem. Since the agent is being trained to take the action maximizing the sum of future rewards (sum from t=0 to end of r(t)), won't adding extra zero reward terms have no effect on the optimization?
Do you mean zero vs None as affect the temporal discounting (dynamically adjusting discount is something that seems commonly used, that we could support in RLlib).
		</comment>
		<comment id='2' author='karstenddwx' date='2020-11-09T08:20:27Z'>
		No, temporal discounting is not used.
The problem is that our episode (optimization scenario) consists of one step only. It's not like a game or such things.
With one action being made to our environment, we can directly decide on good or bad action based on the single reward value.
		</comment>
		<comment id='3' author='karstenddwx' date='2020-11-10T07:57:22Z'>
		Can you make it so only the one agent gets the observation? Or do all agents have to act, but only one gets a reward?
I think another way of handling this is to define a custom postprocessor, or use the callback options, to rewrite the rollout batch to drop actions with noop rewards.
		</comment>
		<comment id='4' author='karstenddwx' date='2020-11-10T08:27:19Z'>
		Yes, only one agent acts per step, so only one observation and reward per step and episode (because the episode consists of one step only).
I understand your proposals to workaround this issue.
But why not just fixing the existing rollout batch line 433. It's a one liner just ignoring None's when summarizing rewards and
it even better complies with the environment interfaces. I can create a pull request.
		</comment>
	</comments>
</bug>