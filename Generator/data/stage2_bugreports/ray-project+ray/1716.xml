<bug id='1716' author='robertnishihara' open_date='2018-03-14T02:29:00Z' closed_time='2018-03-16T18:18:08Z'>
	<summary>[tune] ImportError: cannot import name '_default_registry'</summary>
	<description>
I'm seeing this on a development branch, but I suspect it could occur more generally.
It occurs every once in a while when running
&lt;denchmark-code&gt;python python/ray/tune/test/trial_runner_test.py
&lt;/denchmark-code&gt;

The error is
&lt;denchmark-code&gt;Traceback (most recent call last):
  File "/home/ubuntu/ray/python/ray/worker.py", line 1694, in fetch_and_execute_function_to_run
    function = pickle.loads(serialized_function)
  File "/home/ubuntu/ray/python/ray/tune/registry.py", line 12, in &lt;module&gt;
    from ray.tune.trainable import Trainable, wrap_function
  File "/home/ubuntu/ray/python/ray/tune/__init__.py", line 6, in &lt;module&gt;
    from ray.tune.tune import run_experiments
  File "/home/ubuntu/ray/python/ray/tune/tune.py", line 8, in &lt;module&gt;
    from ray.tune.hyperband import HyperBandScheduler
  File "/home/ubuntu/ray/python/ray/tune/hyperband.py", line 8, in &lt;module&gt;
    from ray.tune.trial_scheduler import FIFOScheduler, TrialScheduler
  File "/home/ubuntu/ray/python/ray/tune/trial_scheduler.py", line 5, in &lt;module&gt;
    from ray.tune.trial import Trial
  File "/home/ubuntu/ray/python/ray/tune/trial.py", line 15, in &lt;module&gt;
    from ray.tune.registry import _default_registry, get_registry, TRAINABLE_CLASS
ImportError: cannot import name '_default_registry'
&lt;/denchmark-code&gt;

It looks to me like the issue is some circular imports.
registry imports tune, which imports hyperband, which imports trial_scheduler, which imports trial, which imports _default_registry from registry. The problem is that this is all triggered by the import registry command which hasn't defined _default_registry yet because it's defined at the end of the file... somehow we need to break this cyclic import.
One solution mentioned by &lt;denchmark-link:https://github.com/ericl&gt;@ericl&lt;/denchmark-link&gt;
 is to make one of the imports lazy.
	</description>
	<comments>
		<comment id='1' author='robertnishihara' date='2018-03-14T02:47:55Z'>
		Looks like it can be addressed with a change like &lt;denchmark-link:https://github.com/ray-project/ray/commit/07e45cae2f7142a11958a61aa2ce277a8178aecd&gt;07e45ca&lt;/denchmark-link&gt;
. There are probably other related issues like that though.
I guess the lesson is that from X import Y is dangerous to use if there may be cyclic imports. In general it's probably preferable to do just import X.
I think this might be solved by removing cyclic imports, but I'm not totally sure. I also saw an issue where registry imported tune, which does from ray.tune.registry import register_env, register_trainable in tune/__init__.py. This doesn't seem to be a question of cyclic imports. Or rather, there is a cyclic import, but since one of the items is an __init__.py I would expect it to be ok.
		</comment>
		<comment id='2' author='robertnishihara' date='2018-03-15T03:08:16Z'>
		To add - guido recommends import  X where X is a module.
&lt;denchmark-link:https://docs.python.org/3/faq/programming.html#how-can-i-have-modules-that-mutually-import-each-other&gt;https://docs.python.org/3/faq/programming.html#how-can-i-have-modules-that-mutually-import-each-other&lt;/denchmark-link&gt;

		</comment>
		<comment id='3' author='robertnishihara' date='2018-03-15T04:29:15Z'>
		Nice find! Let's try to stick with that.
		</comment>
	</comments>
</bug>