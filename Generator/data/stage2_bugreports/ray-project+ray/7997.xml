<bug id='7997' author='PovelikinRostislav' open_date='2020-04-13T09:09:22Z' closed_time='2020-11-26T20:22:22Z'>
	<summary>No pre-built C++ libs and headers in package</summary>
	<description>
&lt;denchmark-h:h3&gt;What is the problem?&lt;/denchmark-h&gt;

Ray version and other system information (Python version, TensorFlow version, OS):
Ray 0.8.4
WSL, Ubuntu 18.04
Python 3.8.2
&lt;denchmark-h:h3&gt;Reproduction (REQUIRED)&lt;/denchmark-h&gt;

Please provide a script that can be run to reproduce the issue. The script should have no external library dependencies (i.e., use fake or mock data / environments):
&lt;denchmark-code&gt;$ pip install -U ray
$ cd into &lt;&lt;&lt;ray.__path__&gt;&gt;&gt;
$ find . -name "*.so" # no libray_api.so, no headers
./_raylet.so
./core/src/ray/gcs/redis_module/libray_redis_module.so
./pickle5_files/pickle5/_pickle.cpython-38-x86_64-linux-gnu.so
./streaming/_streaming.so
./thirdparty_files/psutil/_psutil_linux.cpython-38-x86_64-linux-gnu.so
./thirdparty_files/psutil/_psutil_posix.cpython-38-x86_64-linux-gnu.so
./thirdparty_files/setproctitle.cpython-38-x86_64-linux-gnu.so
&lt;/denchmark-code&gt;

If we cannot run your script, we cannot fix your issue.

 I have verified my script runs in a clean environment and reproduces the issue.
 I have verified the issue also occurs with the latest wheels.

	</description>
	<comments>
		<comment id='1' author='PovelikinRostislav' date='2020-04-13T22:58:39Z'>
		cc &lt;denchmark-link:https://github.com/mehrdadn&gt;@mehrdadn&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/edoakes&gt;@edoakes&lt;/denchmark-link&gt;

		</comment>
		<comment id='2' author='PovelikinRostislav' date='2020-04-13T23:08:31Z'>
		Thanks for reporting! Can you clarify what is the exact bug? Is there a command you run that produces an error, and if so, what is that error? (Sorry I'm a bit confused which headers you're looking for and what they might be necessary for.)
		</comment>
		<comment id='3' author='PovelikinRostislav' date='2020-04-14T05:20:19Z'>
		
Thanks for reporting! Can you clarify what is the exact bug? Is there a command you run that produces an error, and if so, what is that error? (Sorry I'm a bit confused which headers you're looking for and what they might be necessary for.)

Hello,
I was wondering how to use this new C++ API. There are no pre-built libraries to be downloaded from the release page or inside the pip deliverables. Only manual compilation from sources.
And in case users want to inject the Ray in another C++ application - they will have to build Ray from the scratch integrating bazel inside their projects.
How do you see the opportunity to use new C++ API?
		</comment>
		<comment id='4' author='PovelikinRostislav' date='2020-04-14T11:14:17Z'>
		I'm talking especially about Basic C++ worker implementation. (#6125) from 0.8.4 release.
The API is located in ray/cpp/include
		</comment>
		<comment id='5' author='PovelikinRostislav' date='2020-04-14T11:26:58Z'>
		Thanks for clarifying. If you're trying to use that API, I think there shouldn't be a shouldn't go through  at all, but you would probably need to clone the repo and use Bazel since that is the build system, and unless I'm mistaken, I expect you would need to compile everything. However, I'm not sure what the status of that API is, given it was only merged a couple of weeks ago; it may not have all the pieces ready for use yet. &lt;denchmark-link:https://github.com/edoakes&gt;@edoakes&lt;/denchmark-link&gt;
 would you have more information on this?
		</comment>
		<comment id='6' author='PovelikinRostislav' date='2020-04-14T12:16:05Z'>
		In that case, can you &lt;denchmark-link:https://github.com/mehrdadn&gt;@mehrdadn&lt;/denchmark-link&gt;
 or &lt;denchmark-link:https://github.com/edoakes&gt;@edoakes&lt;/denchmark-link&gt;
 clarify how could anyone integrate this API into their own C++ application without bazel infrastructure?
I just tried to compile example.cc from ray/cpp/src/example manually and got a lot of dependencies that I should inject even as headers: msgpack, plasma, protobuf, grpc, absl, etc, etc!
Seems like there is no way except using bazel. Maybe there should be used pimpl idiom to hide the header dependencies.
		</comment>
		<comment id='7' author='PovelikinRostislav' date='2020-04-14T12:29:15Z'>
		Note that Bazel is just the build tool Ray uses (like how projects use Make, CMake, SCons, etc.); it's unrelated to the header file dependencies. Ray does have a number of dependencies that will be the same no matter what build tool is used, so the use of Bazel isn't an issue as far as that goes. But given that Ray already has Bazel rules provided to manage all the dependencies and build them, I imagine the easiest path would be to just use Bazel rather than to create a custom build process.
If your concern is the dependencies of the header file specifically (rather than the dependencies of the entire libraries), would you mind clarifying what obstacles you're running into? Perhaps we can address the issues somehow (e.g. via pimpl as you suggest), but note that even with pimpl, you would still need Bazel to compile the other translation units, so that wouldn't really change that.
		</comment>
		<comment id='8' author='PovelikinRostislav' date='2020-04-14T12:53:55Z'>
		I agree that bazel it not the problem itself, this is not the point of conversation.
I'm lacking of experience in the development of large C++ projects and connections between them, but trying to understand the flow I should use to work with Ray C++ API. Since Ray has a ton of dependencies - the easiest way is to use bazel infra.
What to do for the projects that don't have a bazel? What's the flow should I do to integrate Ray inside such a project? Recreate a dependency graph in CMake/Make/etc?
		</comment>
		<comment id='9' author='PovelikinRostislav' date='2020-04-14T13:27:00Z'>
		Oh I see, sorry for the confusion. I don't believe we have any support for other build systems currently. While it's theoretically possible to do with with Bazel's Query language, I honestly wouldn't recommend trying to recreate the dependencies in CMake/Make/etc. as this will likely be extremely painful. Bazel is nice for many reasons, including the fact that it automatically downloads and patches any relevant dependencies for you, so you don't have to manage them.
So, to integrate it into other systems, I would just download Bazel (I believe at the moment we're using version 1.1) and call it directly. Here's a quick tutorial, though I would recommend investing a couple of hours to become familiar with Bazel and Ray's build process as many projects use Bazel, and while it has some complexity, it works better for larger-scale projects than Makefiles and such.
Make sure your home directory and the project path don't contain spaces. The basic process is that you can just build everything via bazel build "//:*" (although I think that builds too many targets, but I don't know right now which targets are needed for the C++ API). The build takes some time; I'd say 15-20 minutes is fairly ordinary, and it might be longer.
Eventually you end up with a  folder in the project root (the "workspace") that's a symbolic link to the actual output folder, which is somewhere in your path (likely somewhere inside ). Somewhere inside it you'll find every built target... but you shouldn't have to look inside that folder. Instead, the build process should automatically copy the final binaries into your work tree somewhere. I'm not entirely sure how the C++ API targets have been set up, though; &lt;denchmark-link:https://github.com/edoakes&gt;@edoakes&lt;/denchmark-link&gt;
 or others might have more information on that. If you ever need to clean everything up and start again, you can do , but note that builds will take a while to perform again. Bazel does have caching features you can look into, though ( for example)... but it's difficult for me to list all the relevant pieces here.
I would recommend joining our Slack (see "Getting Started" on the GitHub project home page for the link); you should be able to find help with any build or API issues you encounter there!
		</comment>
		<comment id='10' author='PovelikinRostislav' date='2020-04-14T18:17:57Z'>
		&lt;denchmark-link:https://github.com/PovelikinRostislav&gt;@PovelikinRostislav&lt;/denchmark-link&gt;
 note that the C++ API is very much a work in progress and not even fully working yet. That said, would be great to get your input on the best way for users to interact with it :)
&lt;denchmark-link:https://github.com/AmeerHajAli&gt;@AmeerHajAli&lt;/denchmark-link&gt;
 could you weigh in on what the plans are here? Are users expected to use bazel to build their C++ ray applications?
		</comment>
		<comment id='11' author='PovelikinRostislav' date='2020-04-15T11:10:55Z'>
		&lt;denchmark-link:https://github.com/mehrdadn&gt;@mehrdadn&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/edoakes&gt;@edoakes&lt;/denchmark-link&gt;
 thanks for your answers :)
I'm in progress of clarifying the idea of the best way to use Ray C++ API.
I would like to note that in pure C++ projects it's known to use CMake as a build systems, not bazel. bazel is more about cross language projects and also it introduces the problem to reuse libraries in non-bazel environments.
Many big C++ projects have CMake infra (maybe in addition to bazel infra): googletest, grpc, folly, llvm, gcc, nvidia DALI, arrow, etc. It's a kind of state-of-the-art. What if Ray introduces thin CMake wrapper to make a connection for other CMake projects? I know that using bazel rules from CMake is not a big deal ( due to bazel docs ), not vice versa.
Also I took a look at Arrow pip packages: they contain C++ headers and libraries. By the way, header dependencies should be resolved to eliminate the requirement to install headers of 3rd party libraries on the machine.
		</comment>
		<comment id='12' author='PovelikinRostislav' date='2020-04-24T04:30:56Z'>
		Thanks for reporting this. I think we should provide libs and headers for other C++ projects that don't use bazel in the future.
But for now, as the C++ API is still pretty preliminary, there is no much benefit to do so.
I think for now, if you want to play with the C++ API, the easiest way is to use Bazel. You can just write a .cc file, and define a cc_test in BUILD.bazel.
		</comment>
		<comment id='13' author='PovelikinRostislav' date='2020-11-12T20:01:02Z'>
		Hi, I'm a bot from the Ray team :)
To help human contributors to focus on more relevant issues, I will automatically add the stale label to issues that have had no activity for more than 4 months.
If there is no further activity in the 14 days, the issue will be closed!

If you'd like to keep the issue open, just leave any comment, and the stale label will be removed!
If you'd like to get more attention to the issue, please tag one of Ray's contributors.

You can always ask for help on our &lt;denchmark-link:https://discuss.ray.io/&gt;discussion forum&lt;/denchmark-link&gt;
 or &lt;denchmark-link:https://github.com/ray-project/ray#getting-involved&gt;Ray's public slack channel&lt;/denchmark-link&gt;
.
		</comment>
		<comment id='14' author='PovelikinRostislav' date='2020-11-26T20:22:17Z'>
		Hi again! The issue will be closed because there has been no more activity in the 14 days since the last message.
Please feel free to reopen or open a new issue if you'd still like it to be addressed.
Again, you can always ask for help on our &lt;denchmark-link:https://discuss.ray.io&gt;discussion forum&lt;/denchmark-link&gt;
 or &lt;denchmark-link:https://github.com/ray-project/ray#getting-involved&gt;Ray's public slack channel&lt;/denchmark-link&gt;
.
Thanks again for opening the issue!
		</comment>
	</comments>
</bug>