<bug id='4103' author='KarlJosef' open_date='2019-02-20T15:56:30Z' closed_time='2019-02-21T18:47:02Z'>
	<summary>[rllib] Question regarding twin-Q usage in DDPG</summary>
	<description>
&lt;denchmark-h:h3&gt;System information&lt;/denchmark-h&gt;


OS Platform and Distribution (e.g., Linux Ubuntu 16.04):  Linux Ubuntu 16.04
Ray installed from (source or binary): source
Ray version: latest
Python version: 3.6
Exact command to reproduce:

&lt;denchmark-h:h3&gt;Describe the problem&lt;/denchmark-h&gt;

When activating the twin_q functionality in DDPG the following loss specific operations are defined when creating the policy graph (see ActorCriticLoss):
&lt;denchmark-code&gt;q_t_selected = tf.squeeze(q_t, axis=len(q_t.shape) - 1)
if twin_q:  
    twin_q_t_selected = tf.squeeze(q_t, axis=len(q_t.shape) - 1)  
    q_tp1 = tf.minimum(q_tp1, twin_q_tp1)  
&lt;/denchmark-code&gt;

In this case q_t_selected and twin_q_t_selected hold the same operation. Probably twin_q_t_selected need to be adjusted the following way:
&lt;denchmark-code&gt;twin_q_t_selected = tf.squeeze(twin_q_t, axis=len(q_t.shape) - 1)  
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='KarlJosef' date='2019-02-20T21:12:27Z'>
		Yes, that looks like a bug. cc &lt;denchmark-link:https://github.com/joneswong&gt;@joneswong&lt;/denchmark-link&gt;

		</comment>
		<comment id='2' author='KarlJosef' date='2019-02-21T02:48:55Z'>
		yes, we must optimize both of the two q-net. twin_q_t should be used here.
		</comment>
		<comment id='3' author='KarlJosef' date='2019-02-21T05:36:41Z'>
		I invoked a pr for this bug: &lt;denchmark-link:https://github.com/ray-project/ray/pull/4108&gt;#4108&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>