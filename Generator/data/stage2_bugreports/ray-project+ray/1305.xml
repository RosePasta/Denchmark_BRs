<bug id='1305' author='robertnishihara' open_date='2017-12-08T23:44:31Z' closed_time='2018-01-24T18:03:30Z'>
	<summary>Worker dies when passed pandas DataFrame.</summary>
	<description>
&lt;denchmark-h:h3&gt;System information&lt;/denchmark-h&gt;


Ray version: 0.3.0
Python version: 3.6.0
Exact command to reproduce:

import pandas as pd
import ray

pd.__version__  # '0.19.2'

ray.init()

df = pd.DataFrame(data={'col1': [1, 2, 3, 4], 'col2': [3, 4, 5, 6]})

@ray.remote
def f(x):
    pass

f.remote(df)
The last line causes the following error to be printed in the background.
&lt;denchmark-code&gt;A worker died or was killed while executing a task.
&lt;/denchmark-code&gt;

cc &lt;denchmark-link:https://github.com/devin-petersohn&gt;@devin-petersohn&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='robertnishihara' date='2017-12-09T00:42:06Z'>
		The original application that failed was
import pandas as pd
import ray

ray.init()

data = pd.DataFrame(data={'col1': [1, 2, 3, 4], 'col2': [3, 4, 5, 6]})

@ray.remote
def test_fn(df):
    return df.assign(result=df.col1 * df.col2)

remote_data = ray.put(data)
x = test_fn.remote(remote_data)
		</comment>
		<comment id='2' author='robertnishihara' date='2017-12-09T01:16:45Z'>
		Note that as a workaround for now you can do
ray.register_custom_serializer(type(data), use_pickle=True)
		</comment>
		<comment id='3' author='robertnishihara' date='2017-12-09T18:49:31Z'>
		So while ray.put and ray.get works in the same process, it doesn't work if the DataFrame is put in one process and then gotten in a different one. Interesting.
		</comment>
		<comment id='4' author='robertnishihara' date='2017-12-09T18:51:42Z'>
		Backtrace:
&lt;denchmark-code&gt;* thread #1: tid = 0xf9367, 0x0000000000000000, queue = 'com.apple.main-thread', stop reason = EXC_BAD_ACCESS (code=1, address=0x0)
  * frame #0: 0x0000000000000000
    frame #1: 0x0000000103cb0ff2 libarrow_python.0.dylib`arrow::py::GetValue(context=0x000000010de149f8, parent=0x000000010db944f8, arr=0x000000010db88488, index=0, type=0, base=&lt;unavailable&gt;, blobs=&lt;unavailable&gt;, result=&lt;unavailable&gt;) + 2562 at arrow_to_python.cc:171 [opt]
    frame #2: 0x0000000103cb0459 libarrow_python.0.dylib`arrow::py::DeserializeList(context=0x000000010de149f8, array=&lt;unavailable&gt;, start_idx=&lt;unavailable&gt;, stop_idx=2, base=0x000000010ddf3fa8, blobs=&lt;unavailable&gt;, out=&lt;unavailable&gt;) + 265 at arrow_to_python.cc:206 [opt]
    frame #3: 0x0000000103cb0133 libarrow_python.0.dylib`arrow::py::DeserializeDict(context=0x000000010de149f8, array=0x000000010db94318, start_idx=0, stop_idx=2, base=0x000000010ddf3fa8, blobs=&lt;unavailable&gt;, out=&lt;unavailable&gt;) + 227 at arrow_to_python.cc:72 [opt]
    frame #4: 0x0000000103cb0ef7 libarrow_python.0.dylib`arrow::py::GetValue(context=0x000000010de149f8, parent=0x00000001007dceb8, arr=0x000000010db883e8, index=&lt;unavailable&gt;, type=0, base=&lt;unavailable&gt;, blobs=&lt;unavailable&gt;, result=&lt;unavailable&gt;) + 2311 at arrow_to_python.cc:156 [opt]
    frame #5: 0x0000000103cb0459 libarrow_python.0.dylib`arrow::py::DeserializeList(context=0x000000010de149f8, array=&lt;unavailable&gt;, start_idx=&lt;unavailable&gt;, stop_idx=1, base=0x000000010ddf3fa8, blobs=&lt;unavailable&gt;, out=&lt;unavailable&gt;) + 265 at arrow_to_python.cc:206 [opt]
    frame #6: 0x0000000103cb187f libarrow_python.0.dylib`arrow::py::DeserializeObject(context=0x000000010de149f8, obj=0x000000010ddf2c90, base=0x000000010ddf3fa8, out=0x00007fff5fbfe058) + 111 at arrow_to_python.cc:285 [opt]
    frame #7: 0x00000001038057de lib.cpython-35m-darwin.so`__pyx_pf_7pyarrow_3lib_18SerializedPyObject_2deserialize(__pyx_v_self=0x000000010ddf2c78, __pyx_v_context=0x000000010de149f8) + 462 at lib.cxx:73367
    frame #8: 0x0000000103805014 lib.cpython-35m-darwin.so`__pyx_pw_7pyarrow_3lib_18SerializedPyObject_3deserialize(__pyx_v_self=0x000000010ddf2c78, __pyx_args=0x000000010de2b2b0, __pyx_kwds=0x0000000000000000) + 772 at lib.cxx:73290
    frame #9: 0x00000001000561fc libpython3.5m.dylib`PyCFunction_Call + 60```
&lt;/denchmark-code&gt;

		</comment>
		<comment id='5' author='robertnishihara' date='2018-01-06T22:43:13Z'>
		&lt;denchmark-link:https://github.com/robertnishihara&gt;@robertnishihara&lt;/denchmark-link&gt;
 created a PR in Arrow: &lt;denchmark-link:https://github.com/apache/arrow/pull/1463&gt;apache/arrow#1463&lt;/denchmark-link&gt;
 that fixes this. Once that gets pulled in we will need to update the serialization.
		</comment>
	</comments>
</bug>