<bug id='2925' author='pschafhalter' open_date='2018-09-21T06:56:08Z' closed_time='2018-10-19T04:43:55Z'>
	<summary>Redis protected mode does not secure Redis ports</summary>
	<description>
ray.init(redis_protected_mode=True) still allows outside connections to Redis.
Steps to reproduce:

On remote: ray.init(redis_protected_mode=True)
On local:

&lt;denchmark-code&gt;$ telnet &lt;remote_ip&gt; &lt;redis_port&gt;
Trying 169.229.49.180...
Connected to 169.229.49.180.
Escape character is '^]'.
PING
+PONG
FLUSHALL
+OK
&lt;/denchmark-code&gt;

There's 2 causes to the issue:

The redis_protected_mode argument isn't propagated from init() in worker.py to start_redis() in services.py. This is a quick fix.
_make_temp_redis_config() which sets the Redis configuration binds to the node IP address. According to the Redis documentation, this disables Redis protected mode. Fixing this is more complicated -- because Ray processes connect to Redis via the node IP address, binding Redis to just 127.0.0.1 results in connection errors.

Solving this is tricky, but there's a few possible solutions:

Use Redis protected mode. On every connection, check if the head node IP address == the current node IP address. If so, use 127.0.0.1.
Simulate Redis protected mode by generating a password for the Redis server. Expose the password to processes on the same node.

Personally, I prefer option (2) because launching Redis with a password seems like a good feature anyway.
	</description>
	<comments>
		<comment id='1' author='pschafhalter' date='2018-09-22T00:34:41Z'>
		Ok, I see, thanks for catching that! Let's just go with the password then.
		</comment>
		<comment id='2' author='pschafhalter' date='2018-10-19T04:43:55Z'>
		Fixed by &lt;denchmark-link:https://github.com/ray-project/ray/pull/2952&gt;#2952&lt;/denchmark-link&gt;
 and subsequent bug fix.
		</comment>
	</comments>
</bug>