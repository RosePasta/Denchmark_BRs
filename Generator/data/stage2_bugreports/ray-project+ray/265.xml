<bug id='265' author='robertnishihara' open_date='2017-02-10T20:02:04Z' closed_time='2017-02-23T22:50:06Z'>
	<summary>Tasks that arrive before global scheduler receives any heartbeats never get scheduled.</summary>
	<description>
If the global scheduler receives a task before it receives any heartbeats from the local schedulers, it will not be able to schedule that task (because there will be no local schedulers that satisfy the task's resource requirements).
This may be the source of hanging in some test cases, e.g.,  in &lt;denchmark-link:https://travis-ci.org/ray-project/ray/jobs/200210187&gt;https://travis-ci.org/ray-project/ray/jobs/200210187&lt;/denchmark-link&gt;
.
	</description>
	<comments>
		<comment id='1' author='robertnishihara' date='2017-02-10T20:07:57Z'>
		I don't believe this has anything to do with resource requirements. This behavior was there before. If the global scheduler has no local schedulers connected, it can't assign the task to anybody. One possibility is to set its state back to WAITING, or we are going to have to start queueing tasks in the global scheduler and part with the current bufferless design...
		</comment>
		<comment id='2' author='robertnishihara' date='2017-02-10T20:13:22Z'>
		Good point. This was already happening whenever the global scheduler received a task before the global scheduler had registered any local schedulers. Now it is failing whenever the global scheduler receives a task before it has registered any local schedulers or before it has received any heartbeats.
		</comment>
		<comment id='3' author='robertnishihara' date='2017-02-23T22:50:06Z'>
		This was fixed by &lt;denchmark-link:https://github.com/ray-project/ray/pull/306&gt;#306&lt;/denchmark-link&gt;
.
		</comment>
	</comments>
</bug>