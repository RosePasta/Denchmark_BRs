<bug id='1516' author='ericl' open_date='2018-02-05T04:47:33Z' closed_time='2020-02-08T01:36:45Z'>
	<summary>Nested actors are leaked</summary>
	<description>
&lt;denchmark-code&gt;import time
import ray

@ray.remote
class B(object):
    def __init__(self):
        pass
    def foo(self):
        return "OK"

@ray.remote
class A(object):
    def __init__(self):
        self.workers = [B.remote() for _ in range(10)]
    def foo(self):
        return ray.get([w.foo.remote() for w in self.workers])

ray.init()
for i in range(10000):
    print(i)
    actors = [A.remote() for _ in range(10)]
    for a in actors:
        print(ray.get(a.foo.remote()))
        a.__ray_terminate__.remote(a._ray_actor_id.id())
    time.sleep(1)
&lt;/denchmark-code&gt;

Running the above program causes the number of processes in the system to grow without bound. This is because terminating an actor doesn't clean up its children.
See also: &lt;denchmark-link:https://github.com/ray-project/ray/issues/1506&gt;#1506&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='ericl' date='2019-02-14T06:13:11Z'>
		foo in B should've probably been called bar 
		</comment>
		<comment id='2' author='ericl' date='2019-10-30T14:49:48Z'>
		I have the same issue with the following snippet:
&lt;denchmark-code&gt;import ray
ray.init()

ray.experimental.set_resource("test", 5)
ray.available_resources() 
# Returns:  {'GPU': 1.0, 'CPU': 8.0, 'test': 5.0}

@ray.remote(num_gpus=1, resources={"test": 2}) 
class Counter(object):
    def __init__(self):
        self.counter = 0

    def inc(self):
        self.counter += 1

    def get_counter(self):
        return self.counter

@ray.remote(resources={"test": 1})
class Parent(object): 
    def __init__(self): 
        self.counter = Counter.remote() 

    def inc(self): 
        self.counter.inc.remote() 

    def get_counter(self): 
        return ray.get(self.counter.get_counter.remote()) 

    def kill(self): 
        ray.actor.exit_actor()



c = Parent.remote()
ray.get(c.get_counter.remote())
ray.available_resources()
# Returns: {'CPU': 6.0, 'test': 2.0}
c.kill.remote()
ray.available_resources()
# Should return the initial numbers, but resources stay put at "{'CPU': 6.0, 'test': 2.0}".

ray.shutdown()
&lt;/denchmark-code&gt;

So resources are also not released for nested Actors...
		</comment>
		<comment id='3' author='ericl' date='2020-02-08T01:31:16Z'>
		&lt;denchmark-link:https://github.com/ericl&gt;@ericl&lt;/denchmark-link&gt;
 do you know if this is still an issue?
		</comment>
		<comment id='4' author='ericl' date='2020-02-08T01:36:45Z'>
		Should be fixed
		</comment>
	</comments>
</bug>