<bug id='6112' author='edoakes' open_date='2019-11-08T01:14:16Z' closed_time='2020-02-06T22:37:40Z'>
	<summary>Cyclic reference in modified numpy arrays causes object store pinning</summary>
	<description>
&lt;denchmark-h:h3&gt;System information&lt;/denchmark-h&gt;


OS Platform and Distribution (e.g., Linux Ubuntu 16.04): MacOS 10.14.6
Ray installed from (source or binary): Both
Ray version: 0.6.0 onwards
Python version: Python 3.7.4
Exact command to reproduce: See example below.

&lt;denchmark-h:h3&gt;Describe the problem&lt;/denchmark-h&gt;

The below script should run successfully because previous iterations' objects should be evicted to make room for the new ones once the object store is filled. However, the objects are mistakenly pinned so they can't be evicted and the loop fails after a few iterations.
This only happens when a numpy array is input into the function, modified, and returned. It seems to be caused by a cyclic dependency because adding the gc.collect call solves the issue.
&lt;denchmark-h:h3&gt;Source code / logs&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;import numpy as np

import ray
ray.init(object_store_memory=10 * 1024 * 1024)

@ray.remote
def shuffle(input):
    x = np.random.shuffle(input)
    # If the below line is uncommented, the object isn't pinned.
    # import gc;gc.collect()
    return x

for _ in range(10):
    ray.get(shuffle.remote(np.zeros(2 * 1024 * 1024, dtype=np.uint8)))
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='edoakes' date='2019-11-08T01:14:28Z'>
		cc &lt;denchmark-link:https://github.com/pcmoritz&gt;@pcmoritz&lt;/denchmark-link&gt;

		</comment>
		<comment id='2' author='edoakes' date='2019-11-08T01:16:23Z'>
		Note that using the new pickle serialization also solves the issue, so we should prioritize enabling that by default.
		</comment>
		<comment id='3' author='edoakes' date='2019-11-08T05:04:08Z'>
		Does it make sense to merge &lt;denchmark-link:https://github.com/ray-project/ray/pull/6114&gt;#6114&lt;/denchmark-link&gt;
 as a workaround?
		</comment>
		<comment id='4' author='edoakes' date='2019-11-08T05:28:27Z'>
		Yeah, I think so!
		</comment>
	</comments>
</bug>