<bug id='2519' author='robertnishihara' open_date='2018-07-30T20:41:45Z' closed_time='2018-08-01T07:23:03Z'>
	<summary>Lineage cache bug: uncommitted_ready_children_.count(task_id) == 0.</summary>
	<description>
The bug occurs when using x-ray (e.g., starting Python with RAY_USE_XRAY=1 ipython) and running the following.
import ray

@ray.remote
class Actor(object):
    def __init__(self):
        pass
    def step(self):
        return

@ray.remote
def foo(x):
    return

if __name__ == '__main__':
    ray.worker._init(use_raylet=True, num_local_schedulers=2, start_ray_local=True, redirect_output=False)

    actors = [Actor.remote() for _ in range(10)]
    for _ in range(10):
        for _ in range(100):
            for actor in actors:
                foo.remote(actor.step.remote())
This fails with
&lt;denchmark-code&gt;/home/ubuntu/ray/src/ray/raylet/lineage_cache.cc:380 Check failed: uncommitted_ready_children_.count(task_id) == 0
&lt;/denchmark-code&gt;

The check is too strong. Basically, when evicting a remote task from the lineage cache, it may still have "uncommitted ready" children (if those children have additional parents), so when we evict a task, we should see if that enables us to begin flushing any of its children.
cc &lt;denchmark-link:https://github.com/ujvl&gt;@ujvl&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/ericl&gt;@ericl&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/stephanie-wang&gt;@stephanie-wang&lt;/denchmark-link&gt;

	</description>
	<comments>
	</comments>
</bug>