<bug id='6990' author='TisonKun' open_date='2020-01-31T17:05:36Z' closed_time='2020-02-25T15:30:43Z'>
	<summary>Example fails with redis.exceptions.ConnectionError: Connection closed by server.</summary>
	<description>
&lt;denchmark-h:h3&gt;What is the problem?&lt;/denchmark-h&gt;

env
&lt;denchmark-code&gt;macOS 10.15.2
python 3.7.5
ray 0.8.1
redis 5.0.3
&lt;/denchmark-code&gt;

script
# Execute Python functions in parallel.

import ray
ray.init()

@ray.remote
def f(x):
    return x * x

futures = [f.remote(i) for i in range(4)]
print(ray.get(futures))
stdout
&lt;denchmark-code&gt;$ python3 main.py
2020-02-01 01:03:45,673	INFO resource_spec.py:212 -- Starting Ray with 3.42 GiB memory available for workers and up to 1.71 GiB for objects. You can adjust these settings with ray.init(memory=&lt;bytes&gt;, object_store_memory=&lt;bytes&gt;).
Traceback (most recent call last):
  File "main.py", line 4, in &lt;module&gt;
    ray.init()
  File "/usr/local/lib/python3.7/site-packages/ray/worker.py", line 743, in init
    ray_params=ray_params)
  File "/usr/local/lib/python3.7/site-packages/ray/node.py", line 162, in __init__
    self.start_head_processes()
  File "/usr/local/lib/python3.7/site-packages/ray/node.py", line 594, in start_head_processes
    self.start_redis()
  File "/usr/local/lib/python3.7/site-packages/ray/node.py", line 441, in start_redis
    include_java=self._ray_params.include_java)
  File "/usr/local/lib/python3.7/site-packages/ray/services.py", line 707, in start_redis
    primary_redis_client.set("NumRedisShards", str(num_redis_shards))
  File "/usr/local/lib/python3.7/site-packages/redis/client.py", line 1772, in set
    return self.execute_command('SET', *pieces)
  File "/usr/local/lib/python3.7/site-packages/redis/client.py", line 881, in execute_command
    conn = self.connection or pool.get_connection(command_name, **options)
  File "/usr/local/lib/python3.7/site-packages/redis/connection.py", line 1178, in get_connection
    connection.connect()
  File "/usr/local/lib/python3.7/site-packages/redis/connection.py", line 559, in connect
    self.on_connect()
  File "/usr/local/lib/python3.7/site-packages/redis/connection.py", line 633, in on_connect
    if nativestr(self.read_response()) != 'OK':
  File "/usr/local/lib/python3.7/site-packages/redis/connection.py", line 721, in read_response
    response = self._parser.read_response()
  File "/usr/local/lib/python3.7/site-packages/redis/connection.py", line 313, in read_response
    response = self._buffer.readline()
  File "/usr/local/lib/python3.7/site-packages/redis/connection.py", line 245, in readline
    self._read_from_socket()
  File "/usr/local/lib/python3.7/site-packages/redis/connection.py", line 190, in _read_from_socket
    raise ConnectionError(SERVER_CLOSED_CONNECTION_ERROR)
redis.exceptions.ConnectionError: Connection closed by server.
[1]    36975 terminated  python3 main.py
&lt;/denchmark-code&gt;

If we cannot run your script, we cannot fix your issue.

 I have verified my script runs in a clean environment and reproduces the issue.
 I have verified the issue also occurs with the latest wheels.

	</description>
	<comments>
		<comment id='1' author='TisonKun' date='2020-02-06T22:59:06Z'>
		&lt;denchmark-link:https://github.com/TisonKun&gt;@TisonKun&lt;/denchmark-link&gt;
 looks like redis is going down. Could you see if redis is up using ? If it's down, can you also check ?
		</comment>
		<comment id='2' author='TisonKun' date='2020-02-25T13:55:08Z'>
		&lt;denchmark-link:https://github.com/edoakes&gt;@edoakes&lt;/denchmark-link&gt;
 thanks for your reply! Really sorry for the late response.
Here are my outputs.
&lt;denchmark-code&gt;$ ps aux | grep redis-server
tison            85654   0.0  0.0  4276488    688 s004  S+    9:54PM   0:00.00 grep --color=auto --exclude-dir=.bzr --exclude-dir=CVS --exclude-dir=.git --exclude-dir=.hg --exclude-dir=.svn redis-server
tison            87141   0.0  0.0  4315940   4240 s005  S+   9:53PM   0:00.02 /usr/local/lib/python3.7/site-packages/ray/core/src/ray/thirdparty/redis/src/redis-server *:23115   
&lt;/denchmark-code&gt;

&lt;denchmark-code&gt;$ cat /tmp/ray/session_latest/logs/redis.{out,err}
85489:C 25 Feb 2020 21:53:08.470 # oO0OoO0OoO0Oo Redis is starting oO0OoO0OoO0Oo
85489:C 25 Feb 2020 21:53:08.471 # Redis version=5.0.3, bits=64, commit=00000000, modified=0, pid=85489, just started
85489:C 25 Feb 2020 21:53:08.471 # Configuration loaded
85489:M 25 Feb 2020 21:53:08.476 # Server initialized
85489:signal-handler (1582638788) Received SIGTERM scheduling shutdown...
85489:M 25 Feb 2020 21:53:08.690 # User requested shutdown...
85489:M 25 Feb 2020 21:53:08.690 # Redis is now ready to exit, bye bye...
&lt;/denchmark-code&gt;

		</comment>
		<comment id='3' author='TisonKun' date='2020-02-25T14:06:50Z'>
		While I tested within REPL the redis is up and I can see a running redis without any output of *.err. But exception above thrown.
		</comment>
		<comment id='4' author='TisonKun' date='2020-02-25T15:21:21Z'>
		I guess the problem is about address auto-detection so that I hardcode the address_ip to 127.0.0.1 and now it reports with a new expection
&lt;denchmark-code&gt;F0225 23:07:13.570708 173633536 direct_task_transport.cc:156] Lost connection with local raylet. Error: IOError: 14: Connection reset by peer
*** Check failure stack trace: ***
    @        0x10d265e62  google::LogMessage::~LogMessage()
    @        0x10cf34e15  ray::RayLog::~RayLog()
    @        0x10ce03735  ray::CoreWorkerDirectTaskSubmitter::RetryLeaseRequest()
    @        0x10ce09021  std::__1::__function::__func&lt;&gt;::operator()()
    @        0x10ce184db  ray::rpc::ClientCallImpl&lt;&gt;::OnReplyReceived()
    @        0x10cda4975  _ZN5boost4asio19asio_handler_invokeIZN3ray3rpc17ClientCallManager29PollEventsFromCompletionQueueEiEUlvE_EEvRT_z
    @        0x10cda48c4  _ZN5boost4asio6detail18completion_handlerIZN3ray3rpc17ClientCallManager29PollEventsFromCompletionQueueEiEUlvE_E11do_completeEPvPNS1_19scheduler_operationERKNS_6system10error_codeEm
    @        0x10cdbfd93  boost::asio::detail::scheduler::do_run_one()
    @        0x10cdbf8d2  boost::asio::detail::scheduler::run()
    @        0x10cd955a9  ray::CoreWorker::RunIOService()
    @        0x10cdc718e  std::__1::__thread_proxy&lt;&gt;()
    @     0x7fff7165be65  _pthread_start
    @     0x7fff7165783b  thread_start
&lt;/denchmark-code&gt;

		</comment>
		<comment id='5' author='TisonKun' date='2020-02-25T15:26:17Z'>
		ok I fix the problem by hardcode the address in ray.services.get_node_ip_address. We possibly need a more robost auto-detection where the ip returns by s.getsockname()[0] doesn't work for local.
		</comment>
		<comment id='6' author='TisonKun' date='2020-02-25T15:30:43Z'>
		All process works when I turn off my proxy...
		</comment>
		<comment id='7' author='TisonKun' date='2020-03-03T01:45:22Z'>
		I think users should turn off all the proxies on the computer. Ray cannot detect that.  So I think it is still an issue of Ray.
		</comment>
		<comment id='8' author='TisonKun' date='2020-03-03T05:27:56Z'>
		
I think users should turn off all the proxies on the computer. Ray cannot detect that. So I think it is still an issue of Ray.

I agree and thus open a dedicate issue &lt;denchmark-link:https://github.com/ray-project/ray/issues/7316&gt;#7316&lt;/denchmark-link&gt;
 for it. For this one, I think the workaround(turn off proxies) solve the very problem.
		</comment>
		<comment id='9' author='TisonKun' date='2020-03-03T17:18:59Z'>
		

I think users should turn off all the proxies on the computer. Ray cannot detect that. So I think it is still an issue of Ray.

I agree and thus open a dedicate issue #7316 for it. For this one, I think the workaround(turn off proxies) solve the very problem.

Yeah, that is true. But when you are working remotely at home, a proxy / VPN is opened to connect the intranet of the company, maybe turning off the proxy frequently can be annoying while working at home during the outbreak of the coronavirus. Turning off the proxy is a workaround.
		</comment>
		<comment id='10' author='TisonKun' date='2020-09-09T07:15:59Z'>
		


I think users should turn off all the proxies on the computer. Ray cannot detect that. So I think it is still an issue of Ray.

I agree and thus open a dedicate issue #7316 for it. For this one, I think the workaround(turn off proxies) solve the very problem.

Yeah, that is true. But when you are working remotely at home, a proxy / VPN is opened to connect the intranet of the company, maybe turning off the proxy frequently can be annoying while working at home during the outbreak of the coronavirus. Turning off the proxy is a workaround.

It is an even worse issue if you need to work remotely, and thus VPN to your company servers, but then do remote work for clients on their remotes (only accessible through whitelisted VPN). So, it is mandatory to have the VPN working to reach the possible ray instance, and in this case, the behavior described above is preventing core Ray services from being reached.
In this case, one cannot disable the VPN to work with ray locally, the VPN is required to interact with servers &amp; ray remotely.
		</comment>
	</comments>
</bug>