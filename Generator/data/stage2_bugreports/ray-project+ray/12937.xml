<bug id='12937' author='rkooo567' open_date='2020-12-17T08:11:10Z' closed_time='2020-12-19T00:00:55Z'>
	<summary>[Core][New Scheduler] Actors borrowing CPUs infinitely.</summary>
	<description>
&lt;denchmark-h:h3&gt;What is the problem?&lt;/denchmark-h&gt;

    ray.init(
        num_cpus=1,
        _system_config={
            "debug_dump_period_milliseconds": 500
        })
    @ray.remote(num_cpus=1)
    class Foo:
        def f(self):
            return 0
    @ray.remote
    def f():
        # Creating both actors is not possible.
        actors = [Foo.remote() for _ in range(3)]
        for a in actors:
            ray.get(a.f.remote())
    # Run in a task to check we handle the blocked task case correctly
    f.remote()
This job is supposed to be hanging because worker can borrow cpu to an actor once (and the subsequent actor creation cannot borrow a cpu anymore), but it seems like it succeeds when I ran this script.
It fails (which is the expected behavior) when I run it with the old scheduler.
But when we run it with only tasks, it works for both cases (which is the expected behavior)
    ray.init(
        num_cpus=1,
        _system_config={
            "debug_dump_period_milliseconds": 100000
        })

    @ray.remote(num_cpus=1)
    def g():
        time.sleep(2)
        return 0

    @ray.remote
    def f():
        for _ in range(2):
            ray.get(g.remote())

    ray.get(f.remote(), timeout=5)
&lt;denchmark-h:h3&gt;Reproduction (REQUIRED)&lt;/denchmark-h&gt;

Please provide a short code snippet (less than 50 lines if possible) that can be copy-pasted to reproduce the issue. The snippet should have no external library dependencies (i.e., use fake or mock data / environments):
If the code snippet cannot be run by itself, the issue will be closed with "needs-repro-script".

 I have verified my script runs in a clean environment and reproduces the issue.
 I have verified the issue also occurs with the latest wheels.

	</description>
	<comments>
	</comments>
</bug>