<bug id='7945' author='DavidMChan' open_date='2020-04-08T23:43:43Z' closed_time='2020-04-09T05:40:12Z'>
	<summary>Calling ray.init with long temp_dir causes terminate</summary>
	<description>
&lt;denchmark-h:h3&gt;What is the problem?&lt;/denchmark-h&gt;

Calling  causes a std::terminate due to the 107 character socket length limit in unix: &lt;denchmark-link:http://man7.org/linux/man-pages/man7/unix.7.html&gt;http://man7.org/linux/man-pages/man7/unix.7.html&lt;/denchmark-link&gt;

(see also: &lt;denchmark-link:https://unix.stackexchange.com/q/367008&gt;https://unix.stackexchange.com/q/367008&lt;/denchmark-link&gt;
)
&lt;denchmark-h:h3&gt;Reproduction&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;import ray
ray.init(temp_dir='/tmp/long_path_name_that_exceeds_45_characters')
&lt;/denchmark-code&gt;

&lt;denchmark-h:h3&gt;Possible Solutions&lt;/denchmark-h&gt;

(From &lt;denchmark-link:https://github.com/mehrdadn&gt;@mehrdadn&lt;/denchmark-link&gt;
 + Others)

Abstract UNIX domain sockets (Linux only, needs support in the codebase, and might not be secure against other users)
TCP sockets (also might not be secure against other users, but cross-platform)
Warn users in the python, and exit gracefully

&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;


 I have verified my script runs in a clean environment and reproduces the issue.
 I have verified the issue also occurs with the latest wheels.

	</description>
	<comments>
		<comment id='1' author='DavidMChan' date='2020-04-09T00:13:14Z'>
		To clarify, this happens because we already take up around half of the path space, so the path ends up something like this:
&lt;denchmark-code&gt;/tmp/long_path_name_that_exceeds_45_characters/session_2020-04-08_16-22-43_486838_20570/sockets/raylet
&lt;/denchmark-code&gt;

I think we can use relative paths for sockaddr_un, so this might be another solution:


Change directory level-by-level directly to the parent of the socket


bind/connect the socket as needed via its filename


Change directory back


This is only guaranteed to work for single-threaded processes, but perhaps we can guarantee that? (Or maybe we can use obscure process forking mechanisms and share FD tables while maintaining a separate current directory for each process?) If anyone has any thoughts please let me know, I'm happy to try to implement it.
		</comment>
		<comment id='2' author='DavidMChan' date='2020-04-09T05:38:57Z'>
		I just noticed that this is is actually a duplicate of &lt;denchmark-link:https://github.com/ray-project/ray/issues/7724&gt;#7724&lt;/denchmark-link&gt;
 - I'm not sure which issue should be tracked/closed.
		</comment>
		<comment id='3' author='DavidMChan' date='2020-04-09T05:40:12Z'>
		Oh, thanks for finding this! I'll close this one then, we can track it over there.
		</comment>
	</comments>
</bug>