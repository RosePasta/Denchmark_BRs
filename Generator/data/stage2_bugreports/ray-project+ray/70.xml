<bug id='70' author='robertnishihara' open_date='2016-11-30T18:49:26Z' closed_time='2016-12-01T07:22:55Z'>
	<summary>Serialization of numpy.int64 is not handled properly.</summary>
	<description>
This bug can be reproduced by doing the following.
import ray
import numpy as np

ray.init(start_ray_local=True, num_workers=1)

@ray.remote
def f(x):
  print([x])
  return x

ray.get(f.remote(np.int64(3)))  # This prints ['\x03\x00\x00\x00\x00\x00\x00\x00'] and returns '\x03\x00\x00\x00\x00\x00\x00\x00'.
Note that the following code works.
ray.get(ray.put(np.int64(3)))  # prints 3
The same problem occurs with other numpy data types.
	</description>
	<comments>
		<comment id='1' author='robertnishihara' date='2016-11-30T19:13:23Z'>
		It looks like the issue is in the marshal module (which is what we currently use to serialize simple arguments that are passed by value to remote functions).
import numpy as np
import marshal

marshal.loads(marshal.dumps(np.int64(3)))  # returns '\x03\x00\x00\x00\x00\x00\x00\x00'
That said, marshal may not be intended to be very general, so a better approach may be to use something else (e.g., pickle) here.
		</comment>
	</comments>
</bug>