<bug id='2115' author='robertnishihara' open_date='2018-05-21T23:23:57Z' closed_time='2020-03-19T21:50:35Z'>
	<summary>Bug when calling ray.put on actor handles.</summary>
	<description>
import ray

ray.init()

@ray.remote
class Foo(object):
    def method(self):
        pass

handle = Foo.remote()

handle_id = ray.put(handle)
new_handle1 = ray.get(handle_id)
new_handle2 = ray.get(handle_id)

new_handle1.method.remote()
new_handle2.method.remote()
The last line leads to the error /Users/rkn/Workspace/ray/src/local_scheduler/local_scheduler_algorithm.cc:449: A task that has already been executed has been resubmitted, so we are ignoring it. This should only happen during reconstruction.
	</description>
	<comments>
		<comment id='1' author='robertnishihara' date='2018-05-29T17:36:14Z'>
		This is because the backend assumes that every handle is assigned a unique ID, but new_handle1 and new_handle2 share the same handle ID, the one stored in the serialized handle_id.
A temporary workaround is to assign a random handle ID every time we deserialize from handle_id. However, this will become an issue for actor reconstruction. For example, a task that submits methods to an actor might get reconstructed, and we want to make sure that the submitted methods don't execute twice.
Eventually, it seems like we need to store some mutable information about how many times the handle has been deserialized. That information will probably have to go in the GCS since we can't rely on plasma for object consistency. We should be careful about how we expose this API since the ray.put and/or ray.get operations may not be as cheap as they seem.
		</comment>
		<comment id='2' author='robertnishihara' date='2020-03-19T21:50:35Z'>
		Should be fixed
		</comment>
	</comments>
</bug>