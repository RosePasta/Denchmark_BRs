<bug id='7684' author='simon-mo' open_date='2020-03-21T07:17:08Z' closed_time='2020-09-24T19:42:52Z'>
	<summary>Memory monitor errors in asyncio mode</summary>
	<description>
&lt;denchmark-h:h3&gt;What is the problem?&lt;/denchmark-h&gt;

In asyncio, the callstack cannot be retrieved via inspect.currentframe because it will error
&lt;denchmark-code&gt;Exception ignored in: 'ray._raylet.get_py_stack'
Traceback (most recent call last):
  File "/Users/simonmo/miniconda3/lib/python3.6/inspect.py", line 1497, in currentframe
    return sys._getframe(1) if hasattr(sys, "_getframe") else None
ValueError: call stack is not deep enough
&lt;/denchmark-code&gt;

Ray version and other system information (Python version, TensorFlow version, OS):
&lt;denchmark-h:h3&gt;Reproduction (REQUIRED)&lt;/denchmark-h&gt;

Please provide a script that can be run to reproduce the issue. The script should have no external library dependencies (i.e., use fake or mock data / environments):
Doc example &lt;denchmark-link:https://ray.readthedocs.io/en/latest/async_api.html#asyncio-concurrency-for-actors&gt;https://ray.readthedocs.io/en/latest/async_api.html#asyncio-concurrency-for-actors&lt;/denchmark-link&gt;

Run this in IPython
import ray
import asyncio
ray.init()

@ray.remote
class AsyncActor:
    # multiple invocation of this method can be running in
    # the event loop at the same time
    async def run_concurrent(self):
        print("started")
        await asyncio.sleep(2) # concurrent workload here
        print("finished")

actor = AsyncActor.remote()

# regular ray.get
ray.get([actor.run_concurrent.remote() for _ in range(4)])

# async ray.get
await actor.run_concurrent.remote()
Observe
&lt;denchmark-code&gt;2020-03-21 00:14:42,634	INFO resource_spec.py:212 -- Starting Ray with 23.39 GiB memory available for workers and up to 11.71 GiB for objects. You can adjust these settings with ray.init(memory=&lt;bytes&gt;, object_store_memory=&lt;bytes&gt;).
2020-03-21 00:14:42,987	INFO services.py:1123 -- View the Ray dashboard at localhost:8265
(pid=88430) started
(pid=88430) started
(pid=88430) started
(pid=88430) started
(pid=88430) finished
(pid=88430) finished
(pid=88430) finished
(pid=88430) finished
(pid=88430) started
---------------------------------------------------------------------------
ValueError                                Traceback (most recent call last)
~/miniconda3/lib/python3.6/inspect.py in currentframe()
   1495 def currentframe():
   1496     """Return the frame of the caller or None if this is not possible."""
-&gt; 1497     return sys._getframe(1) if hasattr(sys, "_getframe") else None
   1498
   1499 def stack(context=1):

ValueError: call stack is not deep enough
Exception ignored in: 'ray._raylet.get_py_stack'
Traceback (most recent call last):
  File "/Users/simonmo/miniconda3/lib/python3.6/inspect.py", line 1497, in currentframe
    return sys._getframe(1) if hasattr(sys, "_getframe") else None
ValueError: call stack is not deep enough
&lt;/denchmark-code&gt;

If we cannot run your script, we cannot fix your issue.

 I have verified my script runs in a clean environment and reproduces the issue.
 I have verified the issue also occurs with the latest wheels.

	</description>
	<comments>
		<comment id='1' author='simon-mo' date='2020-03-21T07:22:49Z'>
		Seems to be a cython bug &lt;denchmark-link:https://github.com/cython/cython/issues/2735&gt;cython/cython#2735&lt;/denchmark-link&gt;

		</comment>
		<comment id='2' author='simon-mo' date='2020-03-21T07:45:36Z'>
		It's known limitation &lt;denchmark-link:https://cython.readthedocs.io/en/latest/src/userguide/limitations.html#stack-frames&gt;https://cython.readthedocs.io/en/latest/src/userguide/limitations.html#stack-frames&lt;/denchmark-link&gt;
, cython code doesn't generate stack frames so when we get_py_stack is called with cython code it failes.
		</comment>
		<comment id='3' author='simon-mo' date='2020-03-21T08:09:03Z'>
		get_py_stack seems to be called during during asyncio object id integration in cython, in particular the following three functions where we invoked raw ObjectID constructor:



ray/python/ray/_raylet.pyx


        Lines 529 to 541
      in
      a7a5d17






 cdef void async_plasma_callback(CObjectID object_id, 



                                 int64_t data_size, 



                                 int64_t metadata_size) with gil: 



     core_worker = ray.worker.global_worker.core_worker 



     event_handler = core_worker.get_plasma_event_handler() 



 if event_handler is not None: 



         obj_id = ObjectID(object_id.Binary()) 



 if data_size &gt; 0 and obj_id: 



 # This must be asynchronous to allow objects to avoid blocking 



 # the IO thread. 



             event_handler._loop.call_soon_threadsafe( 



                 event_handler._complete_future, obj_id) 



 








ray/python/ray/_raylet.pyx


        Lines 1168 to 1188
      in
      a7a5d17






 cdef void async_set_result_callback(shared_ptr[CRayObject] obj, 



                                     CObjectID object_id, 



 void *future) with gil: 



     cdef: 



         c_vector[shared_ptr[CRayObject]] objects_to_deserialize 



 



     py_future = &lt;object&gt;(future) 



     loop = py_future._loop 



 



 # Object is retrieved from in memory store. 



 # Here we go through the code path used to deserialize objects. 



     objects_to_deserialize.push_back(obj) 



     data_metadata_pairs = RayObjectsToDataMetadataPairs( 



         objects_to_deserialize) 



     ids_to_deserialize = [ObjectID(object_id.Binary())] 



     objects = ray.worker.global_worker.deserialize_objects( 



         data_metadata_pairs, ids_to_deserialize) 



     loop.call_soon_threadsafe(lambda: py_future.set_result( 



         AsyncGetResponse( 



 plasma_fallback_id=None, result=objects[0]))) 



 








ray/python/ray/_raylet.pyx


        Lines 1189 to 1197
      in
      a7a5d17






 cdef void async_retry_with_plasma_callback(shared_ptr[CRayObject] obj, 



                                            CObjectID object_id, 



 void *future) with gil: 



     py_future = &lt;object&gt;(future) 



     loop = py_future._loop 



     loop.call_soon_threadsafe(lambda: py_future.set_result( 



                 AsyncGetResponse( 



 plasma_fallback_id=ObjectID(object_id.Binary()), 



 result=None))) 





(there also exists similar invocation in _raylet.pyx for serializing actor handles, and a helper method)
&lt;denchmark-link:https://github.com/stephanie-wang&gt;@stephanie-wang&lt;/denchmark-link&gt;
 does  construction here invoke ref counting mechanism? If so, what part of the asyncio-object id integration should be changed.
		</comment>
		<comment id='4' author='simon-mo' date='2020-03-21T08:09:13Z'>
		also cc &lt;denchmark-link:https://github.com/ericl&gt;@ericl&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>