<bug id='8284' author='vakker' open_date='2020-05-02T13:06:29Z' closed_time='2020-05-04T17:32:13Z'>
	<summary>[tune] AxSearch issues with max_concurrency</summary>
	<description>
&lt;denchmark-h:h3&gt;What is the problem?&lt;/denchmark-h&gt;

Using AxSearch throws
&lt;denchmark-code&gt;  File ".../ray/python/ray/tune/suggest/ax.py", line 83, in suggest
    if len(self._live_trial_mapping) &gt;= self.max_concurrent:
AttributeError: 'AxSearch' object has no attribute '_live_trial_mapping'
&lt;/denchmark-code&gt;

Ray: latest master (&lt;denchmark-link:https://github.com/ray-project/ray/commit/76e1a4df9ed4303b5a9010347b467dd9b804d515&gt;76e1a4d&lt;/denchmark-link&gt;
)
Python: 3.7
OS: Ubuntu 18.04
&lt;denchmark-h:h3&gt;Reproduction (REQUIRED)&lt;/denchmark-h&gt;

Just run the Ax example from &lt;denchmark-link:https://github.com/ray-project/ray/blob/master/python/ray/tune/examples/ax_example.py&gt;here&lt;/denchmark-link&gt;
.

 I have verified my script runs in a clean environment and reproduces the issue.
 I have verified the issue also occurs with the latest wheels.

I can see that there was a fix for other issues around refactoring (see commit &lt;denchmark-link:https://github.com/ray-project/ray/commit/07daff87943fa9971c9e3eab1644d4b81af729d0&gt;07daff8&lt;/denchmark-link&gt;
) when  is passed in. If I run  with , then  throws an error because of &lt;denchmark-link:https://github.com/vakker/ray/blob/master/python/ray/tune/suggest/ax.py#L65&gt;this&lt;/denchmark-link&gt;
.
So maybe allow max_concurrency=None in AxSearch? Tbh it would be better to get rid of it completely, because it's very confusing when it is being used and when it's just there for legacy reasons.
If I remove assert type(max_concurrent) is int and max_concurrent &gt; 0 and just set it to None then the example works.
	</description>
	<comments>
		<comment id='1' author='vakker' date='2020-05-02T18:04:27Z'>
		&lt;denchmark-link:https://github.com/vakker&gt;@vakker&lt;/denchmark-link&gt;
 thanks a bunch for raising the issue! I just posted a fix &lt;denchmark-link:https://github.com/ray-project/ray/pull/8285&gt;#8285&lt;/denchmark-link&gt;
.
max_concurrent for AxSearch should be an integer, and it is one of the only algorithms that leverage max_concurrent still (so it's not legacy yet ðŸ˜„ ).
The other algorithms don't leverage max_concurrent, but I've kept the value in there for legacy versions because people really don't like their code breaking..
Sorry for the confusion and again, thanks a bunch for taking the time to raise this issue.
		</comment>
		<comment id='2' author='vakker' date='2020-05-02T18:26:09Z'>
		&lt;denchmark-link:https://github.com/richardliaw&gt;@richardliaw&lt;/denchmark-link&gt;
 great, thanks!
So how does  interact with ?
How is the following supposed to be?
client = AxClient(enforce_sequential_optimization=False)
client.create_experiment(parameters=parameters)
search_alg = AxSearch(client, max_concurrent=?)
search_alg = ConcurrencyLimiter(search_alg, max_concurrent=?)
		</comment>
		<comment id='3' author='vakker' date='2020-05-02T18:43:25Z'>
		Hm, good point - I guess what we would want to do is:
client = AxClient(enforce_sequential_optimization=False)
client.create_experiment(parameters=parameters)
search_alg = AxSearch(client)
search_alg = ConcurrencyLimiter(search_alg, max_concurrent=10)
		</comment>
		<comment id='4' author='vakker' date='2020-05-03T08:36:54Z'>
		Yeah, that's what I would assume.
What is the idea behind ConcurrencyLimiter? To reduce code duplication across different Search implementations or something else?
		</comment>
		<comment id='5' author='vakker' date='2020-05-04T16:57:46Z'>
		This is addressed in &lt;denchmark-link:https://github.com/ray-project/ray/pull/8285&gt;#8285&lt;/denchmark-link&gt;
. &lt;denchmark-link:https://github.com/vakker&gt;@vakker&lt;/denchmark-link&gt;
 to me it serves two purposes - to reduce code duplication and also to isolate concerns of concurrency away from the Searcher, so that the searcher code is easier to reason about.
That being said, if you have any thoughts (or feedback), I'd be more than happy to hear it!
		</comment>
		<comment id='6' author='vakker' date='2020-05-04T17:31:36Z'>
		&lt;denchmark-link:https://github.com/richardliaw&gt;@richardliaw&lt;/denchmark-link&gt;
 yeah, that makes sense. The only thing that I can see is that  is used in many different ways in different Search algos, which might be a pain to factor out to a generic wrapper, but I don't know much about the planned design, so this might not be an issue at all.
		</comment>
	</comments>
</bug>