<bug id='5209' author='stephanie-wang' open_date='2019-07-17T00:41:19Z' closed_time='2019-07-18T20:39:49Z'>
	<summary>Cannot load-balance actors with resource requirements</summary>
	<description>
&lt;denchmark-h:h3&gt;System information&lt;/denchmark-h&gt;


Ray installed from (source or binary): source
Ray version: 0.7
Python version: 3.7.3

&lt;denchmark-h:h3&gt;Describe the problem&lt;/denchmark-h&gt;

I am trying to load-balance some actors across multiple nodes. I set each actor's lifetime resource requirement to be 1 CPU, start some nodes locally with the Cluster util that have 1 CPU each, then start as many actors as nodes. Then, I cannot send tasks to all of the actors.
&lt;denchmark-h:h3&gt;Source code / logs&lt;/denchmark-h&gt;

Code:
import ray
from ray.tests.cluster_utils import Cluster

cluster = Cluster()
cluster.add_node(num_cpus=0)
num_nodes = 4
for i in range(num_nodes):
    node = cluster.add_node(num_cpus=1)
ray.init(redis_address=cluster.redis_address)
print(len(ray.state.state.client_table()), "clients")

@ray.remote(num_cpus=1)
class Actor(object):
    def __init__(self):
        pass
    def ping(self):
        import time
        time.sleep(1)

actors = [Actor.remote() for _ in range(num_nodes)]
ray.get([a.ping.remote() for a in actors])
This code times out. In the raylet logs with DEBUG, I see the actor creation task getting spilled back between 2 nodes.
	</description>
	<comments>
		<comment id='1' author='stephanie-wang' date='2019-07-17T02:17:52Z'>
		Try out &lt;denchmark-link:https://github.com/ray-project/ray/pull/5191&gt;#5191&lt;/denchmark-link&gt;

		</comment>
		<comment id='2' author='stephanie-wang' date='2019-07-18T20:39:49Z'>
		Thanks, it works now! Opened a PR to add a regression test for this issue.
		</comment>
	</comments>
</bug>