<bug id='439' author='robertnishihara' open_date='2017-04-08T01:03:17Z' closed_time='2017-05-02T21:34:43Z'>
	<summary>Remote functions and actors do not properly handle kwargs.</summary>
	<description>
Currently, we have the following behavior.
import ray

ray.init()

@ray.remote
def f():
  return

f.remote(x=1)  # This does not throw an exception, but it should.
	</description>
	<comments>
		<comment id='1' author='robertnishihara' date='2017-04-10T03:37:18Z'>
		Not only remote function, but also actor
I got an exception when i create an Actor
&lt;denchmark-code&gt;@ray.actor
class A(B):
    def __init__(self, nb_actions, gamma=.99, batch_size=32, **kwargs):
        super(A, self).__init__(**kwargs)

agent = A(memory=SequentialMemory(size=1000))
Exception: Actors currently do not support **kwargs.
&lt;/denchmark-code&gt;

		</comment>
		<comment id='2' author='robertnishihara' date='2017-04-10T04:31:44Z'>
		At the moment, remote functions and actors don't support **kwargs arguments.
As a workaround for now, you might try doing something like the following.
@ray.actor
class A(B):
    def __init__(self, nb_actions, gamma=.99, batch_size=32, memory=None):
        super(A, self).__init__(memory=memory)
		</comment>
		<comment id='3' author='robertnishihara' date='2017-04-10T04:34:36Z'>
		Does that work for your current use case? Or do you need **kwargs?
If B is a class that you implemented, you could make it take a dictionary instead of **kwargs.
		</comment>
		<comment id='4' author='robertnishihara' date='2017-04-10T06:45:40Z'>
		interesting
it looks like actor does not support default parameters value
&lt;denchmark-code&gt;@ray.actor
class MyAgent(object):
    def __init__(self,nb_actions,batch_size=32):
        #self.model = model_from_config(model_config)
        self.nb_actions=nb_actions
        self.batch_size=batch_size
    
    def get_batch_size(self):
        return self.batch_size

myactor1 = MyAgent(2,90)(works)
myactor2 = MyAgent(2,batch_size=90)(Exception: Actors currently do not support **kwargs.)
&lt;/denchmark-code&gt;

		</comment>
		<comment id='5' author='robertnishihara' date='2017-04-10T06:50:37Z'>
		I think this was fixed yesterday in &lt;denchmark-link:https://github.com/ray-project/ray/pull/441&gt;#441&lt;/denchmark-link&gt;
. Can you check what commit you're at (e.g., via )?
		</comment>
		<comment id='6' author='robertnishihara' date='2017-04-10T11:52:03Z'>
		After i update the ray. The following code works for me.
&lt;denchmark-code&gt;@ray.actor
class MyAgent(object):
    def __init__(self,nb_actions,batch_size=32):
        #self.model = model_from_config(model_config)
        self.nb_actions=nb_actions
        self.batch_size=batch_size
    
    def get_batch_size(self):
        return self.batch_size

myactor1 = MyAgent(2,90)(works)
myactor2 = MyAgent(2,batch_size=90)(works)
&lt;/denchmark-code&gt;

However, this code still does not work.
&lt;denchmark-code&gt;class A(object):
    def __init__(self,memory=None):
        self.memory = memory
@ray.actor
class B(A):
    def __init__(self, nb_actions, gamma=.99, batch_size=32, memory=None):
        super(B, self).__init__(memory=memory)
        self.nb_actions=3

actor=B(3,memory=8)
&lt;/denchmark-code&gt;

Error happens in super(B, self).init().
Here is the error log
&lt;denchmark-code&gt;---------------------------------------------------------------------------
AssertionError                            Traceback (most recent call last)
&lt;ipython-input-18-e0295ecac296&gt; in &lt;module&gt;()
      8         self.nb_actions=3
      9 
---&gt; 10 actor=B(3,memory=8)

/home/dl/.local/lib/python2.7/site-packages/ray-0.0.1-py2.7.egg/ray/actor.pyc in __init__(self, *args, **kwargs)
    246           export_actor(self._ray_actor_id, Class,
    247                        self._ray_actor_methods.keys(), num_cpus, num_gpus,
--&gt; 248                        ray.worker.global_worker)
    249           # Call __init__ as a remote function.
    250           if "__init__" in self._ray_actor_methods.keys():

/home/dl/.local/lib/python2.7/site-packages/ray-0.0.1-py2.7.egg/ray/actor.pyc in export_actor(actor_id, Class, actor_method_names, num_cpus, num_gpus, worker)
    175     raise NotImplemented("TODO(pcm): Cache actors")
    176   key = "Actor:{}".format(actor_id.id())
--&gt; 177   pickled_class = pickling.dumps(Class)
    178 
    179   # For now, all actor methods have 1 return value.

/home/dl/.local/lib/python2.7/site-packages/ray-0.0.1-py2.7.egg/ray/pickling.pyc in dumps(obj)
     24 def dumps(obj):
     25   stringio = cloudpickle.StringIO()
---&gt; 26   dump(obj, stringio)
     27   return stringio.getvalue()
     28 

/home/dl/.local/lib/python2.7/site-packages/ray-0.0.1-py2.7.egg/ray/pickling.pyc in dump(obj, file, protocol)
     19 
     20 def dump(obj, file, protocol=2):
---&gt; 21   return BetterPickler(file, protocol).dump(obj)
     22 
     23 

/home/dl/anaconda2/envs/tensorflow_rao/lib/python2.7/site-packages/cloudpickle/cloudpickle.pyc in dump(self, obj)
    144         self.inject_addons()
    145         try:
--&gt; 146             return Pickler.dump(self, obj)
    147         except RuntimeError as e:
    148             if 'recursion' in e.args[0]:

/home/dl/anaconda2/envs/tensorflow_rao/lib/python2.7/pickle.pyc in dump(self, obj)
    222         if self.proto &gt;= 2:
    223             self.write(PROTO + chr(self.proto))
--&gt; 224         self.save(obj)
    225         self.write(STOP)
    226 

/home/dl/anaconda2/envs/tensorflow_rao/lib/python2.7/pickle.pyc in save(self, obj)
    284         f = self.dispatch.get(t)
    285         if f:
--&gt; 286             f(self, obj) # Call unbound method with explicit self
    287             return
    288 

/home/dl/anaconda2/envs/tensorflow_rao/lib/python2.7/site-packages/cloudpickle/cloudpickle.pyc in save_global(self, obj, name, pack)
    423                 d['__new__'] = obj.__new__
    424 
--&gt; 425             self.save_reduce(typ, (obj.__name__, obj.__bases__, d), obj=obj)
    426         else:
    427             raise pickle.PicklingError("Can't pickle %r" % obj)

/home/dl/anaconda2/envs/tensorflow_rao/lib/python2.7/site-packages/cloudpickle/cloudpickle.pyc in save_reduce(self, func, args, state, listitems, dictitems, obj)
    584         else:
    585             save(func)
--&gt; 586             save(args)
    587             write(pickle.REDUCE)
    588 

/home/dl/anaconda2/envs/tensorflow_rao/lib/python2.7/pickle.pyc in save(self, obj)
    284         f = self.dispatch.get(t)
    285         if f:
--&gt; 286             f(self, obj) # Call unbound method with explicit self
    287             return
    288 

/home/dl/anaconda2/envs/tensorflow_rao/lib/python2.7/pickle.pyc in save_tuple(self, obj)
    552         if n &lt;= 3 and proto &gt;= 2:
    553             for element in obj:
--&gt; 554                 save(element)
    555             # Subtle.  Same as in the big comment below.
    556             if id(obj) in memo:

/home/dl/anaconda2/envs/tensorflow_rao/lib/python2.7/pickle.pyc in save(self, obj)
    284         f = self.dispatch.get(t)
    285         if f:
--&gt; 286             f(self, obj) # Call unbound method with explicit self
    287             return
    288 

/home/dl/anaconda2/envs/tensorflow_rao/lib/python2.7/pickle.pyc in save_dict(self, obj)
    653 
    654         self.memoize(obj)
--&gt; 655         self._batch_setitems(obj.iteritems())
    656 
    657     dispatch[DictionaryType] = save_dict

/home/dl/anaconda2/envs/tensorflow_rao/lib/python2.7/pickle.pyc in _batch_setitems(self, items)
    685                 for k, v in tmp:
    686                     save(k)
--&gt; 687                     save(v)
    688                 write(SETITEMS)
    689             elif n:

/home/dl/anaconda2/envs/tensorflow_rao/lib/python2.7/pickle.pyc in save(self, obj)
    284         f = self.dispatch.get(t)
    285         if f:
--&gt; 286             f(self, obj) # Call unbound method with explicit self
    287             return
    288 

/home/dl/anaconda2/envs/tensorflow_rao/lib/python2.7/site-packages/cloudpickle/cloudpickle.pyc in save_function(self, obj, name)
    262                 or getattr(obj.__code__, 'co_filename', None) == '&lt;stdin&gt;'
    263                 or themodule is None):
--&gt; 264             self.save_function_tuple(obj)
    265             return
    266         else:

/home/dl/.local/lib/python2.7/site-packages/ray-0.0.1-py2.7.egg/ray/pickling.pyc in save_function_tuple(self, func)
     73     self.memoize(func)
     74 
---&gt; 75     self.save(f_globals)
     76     self.save(defaults)
     77     self.save(closure)

/home/dl/anaconda2/envs/tensorflow_rao/lib/python2.7/pickle.pyc in save(self, obj)
    284         f = self.dispatch.get(t)
    285         if f:
--&gt; 286             f(self, obj) # Call unbound method with explicit self
    287             return
    288 

/home/dl/anaconda2/envs/tensorflow_rao/lib/python2.7/pickle.pyc in save_dict(self, obj)
    653 
    654         self.memoize(obj)
--&gt; 655         self._batch_setitems(obj.iteritems())
    656 
    657     dispatch[DictionaryType] = save_dict

/home/dl/anaconda2/envs/tensorflow_rao/lib/python2.7/pickle.pyc in _batch_setitems(self, items)
    690                 k, v = tmp[0]
    691                 save(k)
--&gt; 692                 save(v)
    693                 write(SETITEM)
    694             # else tmp is empty, and we're done

/home/dl/anaconda2/envs/tensorflow_rao/lib/python2.7/pickle.pyc in save(self, obj)
    284         f = self.dispatch.get(t)
    285         if f:
--&gt; 286             f(self, obj) # Call unbound method with explicit self
    287             return
    288 

/home/dl/anaconda2/envs/tensorflow_rao/lib/python2.7/site-packages/cloudpickle/cloudpickle.pyc in save_global(self, obj, name, pack)
    423                 d['__new__'] = obj.__new__
    424 
--&gt; 425             self.save_reduce(typ, (obj.__name__, obj.__bases__, d), obj=obj)
    426         else:
    427             raise pickle.PicklingError("Can't pickle %r" % obj)

/home/dl/anaconda2/envs/tensorflow_rao/lib/python2.7/site-packages/cloudpickle/cloudpickle.pyc in save_reduce(self, func, args, state, listitems, dictitems, obj)
    588 
    589         if obj is not None:
--&gt; 590             self.memoize(obj)
    591 
    592         # More new special cases (that work with older protocols as

/home/dl/anaconda2/envs/tensorflow_rao/lib/python2.7/pickle.pyc in memoize(self, obj)
    242         if self.fast:
    243             return
--&gt; 244         assert id(obj) not in self.memo
    245         memo_len = len(self.memo)
    246         self.write(self.put(memo_len))

AssertionError: 
&lt;/denchmark-code&gt;

So how can i pass a value to parameter of super class which is the most important feature of object-oriented programming?
		</comment>
		<comment id='7' author='robertnishihara' date='2017-04-10T21:49:32Z'>
		Let me think about this more, it looks like a pickling problem. At least on my machine, without using Ray, the following code fails.
import cloudpickle

class A(object):
  pass

class B(A):
  def __init__(self):
    super(B, self).__init__()

cloudpickle.dumps(B)
The last line throws the following exception.
---------------------------------------------------------------------------
RecursionError                            Traceback (most recent call last)
/Users/rkn/anaconda3/lib/python3.6/site-packages/cloudpickle/cloudpickle.py in dump(self, obj)
    145         try:
--&gt; 146             return Pickler.dump(self, obj)
    147         except RuntimeError as e:

/Users/rkn/anaconda3/lib/python3.6/pickle.py in dump(self, obj)
    408             self.framer.start_framing()
--&gt; 409         self.save(obj)
    410         self.write(STOP)

/Users/rkn/anaconda3/lib/python3.6/pickle.py in save(self, obj, save_persistent_id)
    475         if f is not None:
--&gt; 476             f(self, obj) # Call unbound method with explicit self
    477             return

/Users/rkn/anaconda3/lib/python3.6/site-packages/cloudpickle/cloudpickle.py in save_global(self, obj, name, pack)
    424 
--&gt; 425             self.save_reduce(typ, (obj.__name__, obj.__bases__, d), obj=obj)
    426         else:

/Users/rkn/anaconda3/lib/python3.6/site-packages/cloudpickle/cloudpickle.py in save_reduce(self, func, args, state, listitems, dictitems, obj)
    585             save(func)
--&gt; 586             save(args)
    587             write(pickle.REDUCE)

/Users/rkn/anaconda3/lib/python3.6/pickle.py in save(self, obj, save_persistent_id)
    475         if f is not None:
--&gt; 476             f(self, obj) # Call unbound method with explicit self
    477             return

/Users/rkn/anaconda3/lib/python3.6/pickle.py in save_tuple(self, obj)
    735             for element in obj:
--&gt; 736                 save(element)
    737             # Subtle.  Same as in the big comment below.

/Users/rkn/anaconda3/lib/python3.6/pickle.py in save(self, obj, save_persistent_id)
    475         if f is not None:
--&gt; 476             f(self, obj) # Call unbound method with explicit self
    477             return

/Users/rkn/anaconda3/lib/python3.6/pickle.py in save_dict(self, obj)
    820         self.memoize(obj)
--&gt; 821         self._batch_setitems(obj.items())
    822 

/Users/rkn/anaconda3/lib/python3.6/pickle.py in _batch_setitems(self, items)
    846                     save(k)
--&gt; 847                     save(v)
    848                 write(SETITEMS)

/Users/rkn/anaconda3/lib/python3.6/pickle.py in save(self, obj, save_persistent_id)
    475         if f is not None:
--&gt; 476             f(self, obj) # Call unbound method with explicit self
    477             return

/Users/rkn/anaconda3/lib/python3.6/site-packages/cloudpickle/cloudpickle.py in save_function(self, obj, name)
    263                 or themodule is None):
--&gt; 264             self.save_function_tuple(obj)
    265             return

/Users/rkn/anaconda3/lib/python3.6/site-packages/cloudpickle/cloudpickle.py in save_function_tuple(self, func)
    311         save(_make_skel_func)
--&gt; 312         save((code, closure, base_globals))
    313         write(pickle.REDUCE)

/Users/rkn/anaconda3/lib/python3.6/pickle.py in save(self, obj, save_persistent_id)
    475         if f is not None:
--&gt; 476             f(self, obj) # Call unbound method with explicit self
    477             return

/Users/rkn/anaconda3/lib/python3.6/pickle.py in save_tuple(self, obj)
    735             for element in obj:
--&gt; 736                 save(element)
    737             # Subtle.  Same as in the big comment below.

/Users/rkn/anaconda3/lib/python3.6/pickle.py in save(self, obj, save_persistent_id)
    475         if f is not None:
--&gt; 476             f(self, obj) # Call unbound method with explicit self
    477             return

/Users/rkn/anaconda3/lib/python3.6/pickle.py in save_list(self, obj)
    780         self.memoize(obj)
--&gt; 781         self._batch_appends(obj)
    782 

/Users/rkn/anaconda3/lib/python3.6/pickle.py in _batch_appends(self, items)
    807             elif n:
--&gt; 808                 save(tmp[0])
    809                 write(APPEND)

... last 16 frames repeated, from the frame below ...

/Users/rkn/anaconda3/lib/python3.6/pickle.py in save(self, obj, save_persistent_id)
    475         if f is not None:
--&gt; 476             f(self, obj) # Call unbound method with explicit self
    477             return

RecursionError: maximum recursion depth exceeded in comparison

During handling of the above exception, another exception occurred:

PicklingError                             Traceback (most recent call last)
&lt;ipython-input-2-e105f7705909&gt; in &lt;module&gt;()
----&gt; 1 cloudpickle.dumps(B)

/Users/rkn/anaconda3/lib/python3.6/site-packages/cloudpickle/cloudpickle.py in dumps(obj, protocol)
    704 
    705     cp = CloudPickler(file,protocol)
--&gt; 706     cp.dump(obj)
    707 
    708     return file.getvalue()

/Users/rkn/anaconda3/lib/python3.6/site-packages/cloudpickle/cloudpickle.py in dump(self, obj)
    148             if 'recursion' in e.args[0]:
    149                 msg = """Could not pickle object as excessively deep recursion required."""
--&gt; 150                 raise pickle.PicklingError(msg)
    151 
    152     def save_memoryview(self, obj):

PicklingError: Could not pickle object as excessively deep recursion required.
		</comment>
		<comment id='8' author='robertnishihara' date='2017-04-11T01:49:17Z'>
		I created a separate issue &lt;denchmark-link:https://github.com/ray-project/ray/issues/449&gt;#449&lt;/denchmark-link&gt;
 to track the problem with subclasses.
		</comment>
		<comment id='9' author='robertnishihara' date='2017-05-02T21:34:43Z'>
		Closing because the original issue (in the first post) was fixed in &lt;denchmark-link:https://github.com/ray-project/ray/pull/441&gt;#441&lt;/denchmark-link&gt;
 I believe.
		</comment>
	</comments>
</bug>