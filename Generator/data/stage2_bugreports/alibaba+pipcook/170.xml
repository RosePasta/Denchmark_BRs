<bug id='170' author='yorkie' open_date='2020-05-06T09:53:56Z' closed_time='2020-07-30T13:33:39Z'>
	<summary>boa: from Y import X could not be imported by destructing Y</summary>
	<description>
The Python code:
from PIL import Image, ImageDraw
And:
const { Image, ImageDraw } = boa.import('PIL'); // not working
const Image = boa.import('PIL.Image'); // working
const ImageDraw = boa.import('PIL.ImageDraw'); // working
That's great if the destructing is working for sub modules.
	</description>
	<comments>
		<comment id='1' author='yorkie' date='2020-05-07T04:12:14Z'>
		See &lt;denchmark-link:https://docs.python.org/3/c-api/import.html#c.PyImport_ImportModuleLevelObject&gt;PyImport_ImportModuleLevelObject&lt;/denchmark-link&gt;
's description:

Import a module. This is best described by referring to the built-in Python function import(), as the standard import() function calls this function directly.
The return value is a new reference to the imported module or top-level package, or NULL with an exception set on failure. Like for import(), the return value when a submodule of a package was requested is normally the top-level package, unless a non-empty fromlist was given.

This function will help us to address the submodule issue, but it requires that we're able to get the destructing names when calling the boa.import(), does anyone know if there is the kind of hook at ECMA262?
An alternative library-scoped way is:
const { Image, ImageDraw } = boa.import('PIL', ['Image', 'ImageDraw']);

This is ugly so that we won't do, just works for this case :(

		</comment>
		<comment id='2' author='yorkie' date='2020-05-07T04:27:15Z'>
		A better alternative algorithm:

mark the object as imported when it's returned by boa.import(name).
re-implement the Python's from-clause hitting algorithm in Proxy object's get hook:

check if the imported module has an attribute by that name
if not, attempt to import a submodule with that name and then check the imported module again for that attribute
if the attribute is not found, ImportError is raised.
otherwise, a reference to that value is stored in the local namespace, using the name in the as clause if it is present, otherwise using the attribute name



Its advantage is to completely support the following call:
const { Image, ImageDraw } = boa.import('PIL');
However the disadvantage is obvious, we have to re-implement partial of the Python's import algorithm. The best way is still to request a proposal for adding a destructing assignment hook.
		</comment>
		<comment id='3' author='yorkie' date='2020-07-30T13:33:39Z'>
		Closing because this could not be completed logically.
		</comment>
	</comments>
</bug>