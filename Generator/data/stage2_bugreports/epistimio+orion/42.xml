<bug id='42' author='bouthilx' open_date='2018-02-26T22:27:03Z' closed_time='2018-03-21T03:53:42Z'>
	<summary>Make trial selections atomic</summary>
	<description>
When a trial is selected, it will completely overwrite the database row when setting status to reserved. However, there could be a race condition meanwhile and another process could have written the row already. To avoid this, the query in write() should ensure that the status is the one we get from the first read(). If the query fails, the method needs to retry another reservation. We can assume that trials' db row cannot change if status is not 'reserved', so such a query would be sufficient to ensure atomicity (if underlying's database code is something like find_and_update).
aknowledged = self._db.write('trials', selected_trial.to_dict(),
                             query={'_id': selected_trial.id,
                                    'status': selected_trial.status})
if not aknowledged:
    return self.reserve_trial(score_handle)

return selected_trial
	</description>
	<comments>
		<comment id='1' author='bouthilx' date='2018-03-07T13:37:21Z'>
		This is an important problem. Hopefully it can be fixed soon.

Le lun. 26 févr. 2018 17:27, Xavier Bouthillier &lt;notifications@github.com&gt;
a écrit :
&lt;denchmark-link:#&gt;…&lt;/denchmark-link&gt;


 When a trial is selected, it will completely overwrite the database row
 when setting status to reserved. However, there could be a race condition
 meanwhile and another process could have written the row already. To avoid
 this, the query in write() should ensure that the status is the one we get
 from the first read(). If the query fails, the method needs to retry
 another reservation. We can assume that trials' db row cannot change if
 status is not 'reserved', so such a query would be sufficient to ensure
 atomicity (if underlying's database code is something like find_and_update).

 aknowledged = self._db.write('trials', selected_trial.to_dict(),
                              query={'_id': selected_trial.id,
                                     'status': selected_trial.status})if not aknowledged:
     return self.reserve_trial(score_handle)
 return selected_trial

 —
 You are receiving this because you are subscribed to this thread.
 Reply to this email directly, view it on GitHub
 &lt;#42&gt;, or mute the thread
 &lt;https://github.com/notifications/unsubscribe-auth/AALC-7z2FWJMZ6O-FZ4RD9TVGF2uOlESks5tYy-3gaJpZM4SUCHN&gt;
 .



		</comment>
	</comments>
</bug>