<bug id='54' author='TomNong' open_date='2019-06-22T18:49:56Z' closed_time='2019-06-25T23:31:40Z'>
	<summary>AttentionRNNDecoder param initial_state wrapped in AttentionWrapperState</summary>
	<description>
Hi &lt;denchmark-link:https://github.com/gpengzhi&gt;@gpengzhi&lt;/denchmark-link&gt;
 , we noticed that it would be too heavy to wrap the AttentionRNNDecoder forward method parameter "initial_state" into AttentionWrapperState. The position is here: &lt;denchmark-link:https://github.com/asyml/texar-pytorch/blob/master/texar/modules/decoders/rnn_decoders.py#L518&gt;https://github.com/asyml/texar-pytorch/blob/master/texar/modules/decoders/rnn_decoders.py#L518&lt;/denchmark-link&gt;
. Would you consider making it as a regular tensor? Thanks!
	</description>
	<comments>
		<comment id='1' author='TomNong' date='2019-06-22T18:57:29Z'>
		Good point. &lt;denchmark-link:https://github.com/TomNong&gt;@TomNong&lt;/denchmark-link&gt;
 I think we could simplify this part. Let me think about the code refactoring on the part.
		</comment>
		<comment id='2' author='TomNong' date='2019-06-22T18:58:05Z'>
		In the TF version, the user only needs to provide the actual cell state (not the wrapper state) as initial_state, and the state is wrapped into an AttentionWrapperState in AttentionRNNDecoder.initialize. We could follow similar logic here.
Note that this breaks the type annotations in the method signature, as initial_state is no longer of type Optional[State] where State is the first type argument of RNNDecoder. Consider changing the annotation of initial_state to Optional[RNNCellBase] which allows arbitrary cell types. mypy should not report errors since the signature is already # type: ignore'd.
		</comment>
	</comments>
</bug>