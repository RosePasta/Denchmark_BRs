<bug id='681' author='mbahri' open_date='2019-09-11T18:52:46Z' closed_time='2019-09-30T10:18:25Z'>
	<summary>ARGA constructor issue</summary>
	<description>
&lt;denchmark-h:h2&gt;üêõ Bug&lt;/denchmark-h&gt;

Instantiating an ARGA object raises AttributeError: cannot assign module before Module.__init__() call 
&lt;denchmark-code&gt;    268     def __init__(self, encoder, discriminator, decoder=None):
--&gt; 269         self.discriminator = discriminator
    270         super(ARGA, self).__init__(encoder, decoder)
    271         reset(self.discriminator)
&lt;/denchmark-code&gt;

&lt;denchmark-h:h2&gt;To Reproduce&lt;/denchmark-h&gt;

Steps to reproduce the behavior:

Define an Encoder module
Define a Discriminator module
try to call ARGA(Encoder(), Discriminator())

&lt;denchmark-code&gt;class Encoder(torch.nn.Module):
    def __init__(self, in_channels, out_channels):
        super(Encoder, self).__init__()
        self.conv1 = GCNConv(in_channels, 2 * out_channels, cached=True)
        self.conv2 = GCNConv(2 * out_channels, out_channels, cached=True)

    def forward(self, x, edge_index):
        x = F.relu(self.conv1(x, edge_index))
        return self.conv2(x, edge_index)

class Discriminator(torch.nn.Module):
    def __init__(self, in_channels):
        super(Discriminator, self).__init__()
        
        self.fc1 = nn.Linear(in_channels, 2*in_channels)
        self.fc2 = nn.Linear(2*in_channels, in_channels)
        self.fc3 = nn.Linear(in_channels, 1)
        
    def forward(self, input):
        x = F.relu(self.fc1(input))
        x = F.relu(self.fc2(x))
        x = self.fc3(x)
        
        return x

model = ARGA(Encoder(dataset.num_features, channels), Discriminator(channels))
# -&gt; Exception
&lt;/denchmark-code&gt;

&lt;denchmark-h:h2&gt;Expected behavior&lt;/denchmark-h&gt;

The model should be instantiated with the provided encoder and discriminator. Manually setting the object properties and re-initializing the model parameters works:
&lt;denchmark-code&gt;model = ARGA(Encoder(dataset.num_features, channels), None)
model.discriminator = Discriminator(channels)
model.to(dev)
model.reset_parameters()

# -&gt; Works
&lt;/denchmark-code&gt;

&lt;denchmark-h:h2&gt;Environment&lt;/denchmark-h&gt;


OS: Ubuntu 18.04
Python version: 3.7.3
PyTorch version: 1.1.0
CUDA/cuDNN version: 10.0.130 / 7.5.0.56
GCC version: 7.4.0
Any other relevant information: N/A

&lt;denchmark-h:h2&gt;Additional context&lt;/denchmark-h&gt;

N/A
	</description>
	<comments>
		<comment id='1' author='mbahri' date='2019-09-12T07:50:39Z'>
		hello &lt;denchmark-link:https://github.com/mbahri&gt;@mbahri&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/rusty1s&gt;@rusty1s&lt;/denchmark-link&gt;
:
&lt;denchmark-h:h1&gt;about reproduction&lt;/denchmark-h&gt;

&lt;denchmark-link:https://user-images.githubusercontent.com/37621591/64764008-c5eb5380-d573-11e9-9bbc-273c6cda7a36.png&gt;&lt;/denchmark-link&gt;

i reproduced the same error. as the screenshot shown above.
the reproduction code is "about" the same.
import torch
import torch.nn as nn
import torch.nn.functional as F

import torch_geometric
import torch_geometric.nn as gnn
from torch_geometric.nn import GCNConv, ARGA

class Encoder(torch.nn.Module):
    def __init__(self, in_channels, out_channels):
        super(Encoder, self).__init__()
        self.conv1 = GCNConv(in_channels, 2 * out_channels, cached=True)
        self.conv2 = GCNConv(2 * out_channels, out_channels, cached=True)

    def forward(self, x, edge_index):
        x = F.relu(self.conv1(x, edge_index))
        return self.conv2(x, edge_index)

class Discriminator(torch.nn.Module):
    def __init__(self, in_channels):
        super(Discriminator, self).__init__()
        
        self.fc1 = nn.Linear(in_channels, 2*in_channels)
        self.fc2 = nn.Linear(2*in_channels, in_channels)
        self.fc3 = nn.Linear(in_channels, 1)
        
    def forward(self, input):
        x = F.relu(self.fc1(input))
        x = F.relu(self.fc2(x))
        x = self.fc3(x)
        
        return x

if __name__ == '__main__':  # if main
    e = Encoder(20, 5)
    d = Discriminator(5)
    m = ARGA(e, d)
    x = torch.randn(100, 20)
    e_i = torch.randint(0, 100, [2, 1000])
    x_enc = m.encode(x, e_i)
&lt;denchmark-h:h1&gt;what causes that and how to "fix" it.&lt;/denchmark-h&gt;

indeed, &lt;denchmark-link:https://github.com/mbahri&gt;@mbahri&lt;/denchmark-link&gt;
 's method works. and i do not show that screenshot.
D:\ProgramData\Anaconda3\lib\site-packages\torch_geometric\nn\models\autoencoder.py in __init__(self, encoder, discriminator, decoder)
    253
    254     def __init__(self, encoder, discriminator, decoder=None):
--&gt; 255         self.discriminator = discriminator
    256         super(ARGA, self).__init__(encoder, decoder)
    257         reset(self.discriminator)
D:\ProgramData\Anaconda3\lib\site-packages\torch\nn\modules\module.py in __setattr__(self, name, value)
    563                 if modules is None:
    564                     raise AttributeError(
--&gt; 565                         "cannot assign module before Module.__init__() call")
    566                 remove_from(self.__dict__, self._parameters, self._buffers)
    567                 modules[name] = value

AttributeError: cannot assign module before Module.__init__() call
it is assign module that makes ARGA cannot work.
why not "swap" the 2 lines? (as the error shows)
&lt;denchmark-link:https://user-images.githubusercontent.com/37621591/64764337-6b062c00-d574-11e9-9bb9-fcc93df8a5e1.png&gt;&lt;/denchmark-link&gt;


NOTE:
As you can see, I think it is the problem of  decoder at first, but it is not...
line 255 and line 256, just swap that... (I have modified the code ‚Üë)
perhaps it is a bug (I hope not) in pytorch.
in most cases, we(at least I) prefer to write the super(MyDerivedClass, self).__init__(*args, **kwargs) (something like that) in the VERY FIRST LINE of a class's __init__ method.

finally, it works. (Code is run in IPython Interactive)
In [4]: m
Out[4]: 
ARGA(
  (encoder): Encoder(
    (conv1): GCNConv(20, 10)
    (conv2): GCNConv(10, 5)
  )
  (decoder): InnerProductDecoder()
  (discriminator): Discriminator(
    (fc1): Linear(in_features=5, out_features=10, bias=True)
    (fc2): Linear(in_features=10, out_features=5, bias=True)
    (fc3): Linear(in_features=5, out_features=1, bias=True)
  )
)
I don't know if it is the feature you want...
yours sincerely,
&lt;denchmark-link:https://github.com/WMF1997&gt;@WMF1997&lt;/denchmark-link&gt;

		</comment>
		<comment id='2' author='mbahri' date='2019-09-12T20:37:30Z'>
		Thanks for reporting and investigating. I think there was a previous issue which resulted in changing the order of assignments, but PyTorch 1.2 seems to restrict this behaviour now. I will fix this ASAP.
		</comment>
		<comment id='3' author='mbahri' date='2019-09-30T10:18:25Z'>
		Fixed in master!
		</comment>
	</comments>
</bug>