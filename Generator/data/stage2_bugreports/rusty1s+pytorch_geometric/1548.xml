<bug id='1548' author='lizichao7' open_date='2020-08-20T00:02:03Z' closed_time='2020-08-24T06:37:09Z'>
	<summary>[BUG] knn_graph number of edges not equal to N*k (cosine=True)</summary>
	<description>
&lt;denchmark-h:h2&gt;‚ùì Questions &amp; Help&lt;/denchmark-h&gt;

Suppose the node feature matrix X is N by F, then the number of edges in the edge_index returned by knn_graph(X, k) should be k*N, right? Because there are N nodes, and for each node we add k edges, and the edges are directed. Am I missing something about the definition of knn graph?
To be more specific, I am using cosine=True, and N = 7400, F = 1024, k = 10. I should be getting 74000 edges, but I got 81389 edges. I would really appreciate any help that could explain the difference.
	</description>
	<comments>
		<comment id='1' author='lizichao7' date='2020-08-20T05:37:21Z'>
		Yeah, I can reproduce this. This is indeed an issue with cosine=True. The reason for it is that the current implementation computes k+1 nearest neighbors and removes self-loops in a post-processing step. However, for cosine=True, self-loops are not always added.
		</comment>
		<comment id='2' author='lizichao7' date='2020-08-20T16:55:27Z'>
		
Yeah, I can reproduce this. This is indeed an issue with cosine=True. The reason for it is that the current implementation computes k+1 nearest neighbors and removes self-loops in a post-processing step. However, for cosine=True, self-loops are not always added.

Just to be more clear, you are saying for cosine=True, self-loops should be added (because the cosine similarity of two identical vectors should be 1), but in your implementation they are not always added right?
		</comment>
		<comment id='3' author='lizichao7' date='2020-08-20T17:22:52Z'>
		Actually, I took a closer look at the edge_index returned by the knn_graph, and the result does not make sense. To be more specific, for every node as the source, the knn_graph function always selects the first k nodes as the k nearest nodes, regardless of how large or small the cosine distance between them are. I think there is a serious bug in the implementation of knn_graph when cosine=True, and I sincerely hope it could be fixed soon. Thanks for your effort in advance.
		</comment>
		<comment id='4' author='lizichao7' date='2020-08-24T06:37:09Z'>
		Yes, you're absolutely right. I identified the bug and fixed it in pytorch-cluster/master. Thank you, that was very helpful :)
		</comment>
		<comment id='5' author='lizichao7' date='2020-09-23T18:34:05Z'>
		I am experiencing a similar issue (although I am not using cosine=True).
For some examples the result of knn_graph is not Nk (rather, it is Nk + 1). Could this be related?
FWIW, following this thread, I installed the latest version from pytorch-cluster/master, but that did not seem to fix the problem.
		</comment>
		<comment id='6' author='lizichao7' date='2020-09-25T06:30:40Z'>
		Can you show me a minimal example to reproduce? This should IMO only occur if you have a lot of duplicated points in your point cloud.
		</comment>
	</comments>
</bug>