<bug id='926' author='mguenther' open_date='2019-11-27T12:19:59Z' closed_time='2019-12-13T14:56:34Z'>
	<summary>word2vec examples terminate with an IllegalStateException</summary>
	<description>
&lt;denchmark-h:h4&gt;Issue Description&lt;/denchmark-h&gt;

I've tried to run the unmodified word2vec examples (rev. &lt;denchmark-link:https://github.com/eclipse/deeplearning4j-examples/commit/f862e909722f8d3f629fff07661b2039c8e14ecc&gt;f862e90&lt;/denchmark-link&gt;
) (Word2VecRawTextExample, Word2VecUptrainingExample) but ran into the following issue:
&lt;denchmark-code&gt;o.d.e.n.w.Word2VecRawTextExample - Load &amp; Vectorize Sentences....
o.d.e.n.w.Word2VecRawTextExample - Building model....
o.n.l.f.Nd4jBackend - Loaded [CpuBackend] backend
o.n.n.NativeOpsHolder - Number of threads used for OpenMP: 4
o.n.n.Nd4jBlas - Number of threads used for OpenMP BLAS: 4
o.n.l.a.o.e.DefaultOpExecutioner - Backend used: [CPU]; OS: [Windows 10]
o.n.l.a.o.e.DefaultOpExecutioner - Cores: [8]; Memory: [3.5GB];
o.n.l.a.o.e.DefaultOpExecutioner - Blas vendor: [MKL]
o.d.e.n.w.Word2VecRawTextExample - Fitting Word2Vec model....
o.d.m.s.SequenceVectors - Starting vocabulary building...
o.d.m.w.w.VocabConstructor - Sequences checked: [97162], Current vocabulary size: [242]; Sequences/sec: [156460.55];
o.d.m.e.l.WordVectorSerializer - Projected memory use for model: [0.18 MB]
o.d.m.e.i.InMemoryLookupTable - Initializing syn1...
o.d.m.s.SequenceVectors - Building learning algorithms:
o.d.m.s.SequenceVectors -           building ElementsLearningAlgorithm: [SkipGram]
o.d.m.s.SequenceVectors - Starting learning process...
o.d.m.s.SequenceVectors - Epoch [1] finished; Elements processed so far: [634303];  Sequences processed: [97162]
o.d.m.s.SequenceVectors - Time spent on training: 2873 ms
o.d.e.n.w.Word2VecRawTextExample - Writing word vectors to text file....
o.d.e.n.w.Word2VecRawTextExample - Closest Words:
Exception in thread "main" java.lang.reflect.InvocationTargetException
	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.lang.reflect.Method.invoke(Method.java:498)
	at com.intellij.rt.execution.CommandLineWrapper.main(CommandLineWrapper.java:66)
Caused by: java.lang.IllegalStateException: Cannot perform in-place operation "muli": result array shape does not match the broadcast operation output shape: [100].muli([1, 100]) != [100].
In-place operations like x.muli(y) can only be performed when x and y have the same shape, or x and y are broadcastable with x.shape() == broadcastShape(x,y)
	at org.nd4j.linalg.api.shape.Shape.assertBroadcastable(Shape.java:283)
	at org.nd4j.linalg.api.ndarray.BaseNDArray.muli(BaseNDArray.java:3235)
	at org.nd4j.linalg.api.ndarray.BaseNDArray.muli(BaseNDArray.java:3229)
	at org.deeplearning4j.models.embeddings.reader.impl.BasicModelUtils.wordsNearestSum(BasicModelUtils.java:354)
	at org.deeplearning4j.models.embeddings.reader.impl.BasicModelUtils.wordsNearestSum(BasicModelUtils.java:232)
	at org.deeplearning4j.models.embeddings.wordvectors.WordVectorsImpl.wordsNearestSum(WordVectorsImpl.java:149)
	at org.deeplearning4j.examples.nlp.word2vec.Word2VecRawTextExample.main(Word2VecRawTextExample.java:82)
	... 5 more
&lt;/denchmark-code&gt;

It seems that the model is trained properly, but querying it fails. As I said, I did not change the code of the examples. This occurs after cloning the repository, running a full mvn clean package and executing the examples from within IntelliJ IDEA 2019.2.4 (Build 192.7142.36).
Any help wrt. this matter would be highly appreciated!
&lt;denchmark-h:h4&gt;Version Information&lt;/denchmark-h&gt;


Revision: f862e90
Version: 1.0.0-beta5
Platform 1: Windows 10 Pro (Build 18362), Intel Core i7-10510, 16 GB RAM
Platform 2: Ubuntu 18.04 LTS (Linux kernel 4.15.0-66-generic), Intel Core i7-7700HQ, 32 GB RAM

The behavior is identical on both platforms.
	</description>
	<comments>
		<comment id='1' author='mguenther' date='2019-12-02T04:33:01Z'>
		Does this also happen with 1.0.0-SNAPSHOT?
/cc &lt;denchmark-link:https://github.com/raver119&gt;@raver119&lt;/denchmark-link&gt;

		</comment>
		<comment id='2' author='mguenther' date='2019-12-02T12:12:04Z'>
		Thank you for your response! Apparently, it works with 1.0.0-SNAPSHOT. This is fine for my current use case (more exploration than preparing things for a production-grade environment) and I'm able to continue playing around with dl4j.
		</comment>
		<comment id='3' author='mguenther' date='2019-12-13T14:56:25Z'>
		Great, this means this is going to get fixed with 1.0.0-beta6.
		</comment>
	</comments>
</bug>