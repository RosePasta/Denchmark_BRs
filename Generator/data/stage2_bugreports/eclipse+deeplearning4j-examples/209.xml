<bug id='209' author='JavaFXpert' open_date='2016-08-06T16:22:26Z' closed_time='2016-08-07T11:01:49Z'>
	<summary>Score at iteration XXX is NaN messages in GravesLSTMCharModellingExample</summary>
	<description>
I'm attempting to run the GravesLSTMCharModellingExample example after having freshly installed the examples using the instructions on the Getting Started page. I'm getting "Score at iteration 199 is NaN" messages and no samples are being generated. Here's the output in a gist: &lt;denchmark-link:https://gist.github.com/JavaFXpert/fb35e4a2d111a8edbfb8bc3bbeb1f999&gt;https://gist.github.com/JavaFXpert/fb35e4a2d111a8edbfb8bc3bbeb1f999&lt;/denchmark-link&gt;

I haven't made any modifications to any files, so all pom.xml files are unchanged.  Here are specs on my environment:
nd4j-native backend is used.
Hardware Overview:
Model Name:   MacBook Pro
Model Identifier: MacBookPro11,5
Processor Name:   Intel Core i7
Processor Speed:  2.8 GHz
Number of Processors: 1
Total Number of Cores:    4
L2 Cache (per Core):  256 KB
L3 Cache: 6 MB
Memory:   16 GB
Boot ROM Version: MBP114.0172.B05
SMC Version (system): 2.30f2
OSX 10.11
Here are the blas related XML files:
&lt;denchmark-code&gt;&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;componentData&gt;
  &lt;component&gt;
    &lt;componentBaseName&gt;blas_lapack_interface&lt;/componentBaseName&gt;
    &lt;componentFileName&gt;blas_lapack_interface_common_1451323480.enc&lt;/componentFileName&gt;
    &lt;componentName&gt;blas_lapack_interface_common&lt;/componentName&gt;
    &lt;componentVersion&gt;1451323480&lt;/componentVersion&gt;
    &lt;instrset&gt;0&lt;/instrset&gt;
    &lt;locale /&gt;
    &lt;numFiles&gt;5&lt;/numFiles&gt;
    &lt;platformList&gt;
      &lt;platform&gt;glnxa64&lt;/platform&gt;
      &lt;platform&gt;maci64&lt;/platform&gt;
      &lt;platform&gt;win64&lt;/platform&gt;
    &lt;/platformList&gt;
    &lt;releaseFamily&gt;R2016a&lt;/releaseFamily&gt;
    &lt;size&gt;107419&lt;/size&gt;
    &lt;type /&gt;
    &lt;uncompressedBytes&gt;1576774&lt;/uncompressedBytes&gt;
  &lt;/component&gt;
&lt;/componentData&gt;

&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;componentData&gt;
  &lt;component&gt;
    &lt;componentBaseName&gt;blas_lapack_interface&lt;/componentBaseName&gt;
    &lt;componentFileName&gt;blas_lapack_interface_maci64_1455238839.enc&lt;/componentFileName&gt;
    &lt;componentName&gt;blas_lapack_interface_maci64&lt;/componentName&gt;
    &lt;componentVersion&gt;1455238839&lt;/componentVersion&gt;
    &lt;instrset&gt;0&lt;/instrset&gt;
    &lt;locale /&gt;
    &lt;numFiles&gt;9&lt;/numFiles&gt;
    &lt;platformList&gt;
      &lt;platform&gt;maci64&lt;/platform&gt;
    &lt;/platformList&gt;
    &lt;releaseFamily&gt;R2016a&lt;/releaseFamily&gt;
    &lt;size&gt;361318&lt;/size&gt;
    &lt;type /&gt;
    &lt;uncompressedBytes&gt;1668665&lt;/uncompressedBytes&gt;
  &lt;/component&gt;
&lt;/componentData&gt;  
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='JavaFXpert' date='2016-08-06T17:27:15Z'>
		&lt;denchmark-link:https://github.com/JavaFXpert&gt;@JavaFXpert&lt;/denchmark-link&gt;
 Hi there, I cannot reproduce this on my mac. The example ran through fine. Is this an issue you see on other examples too?
		</comment>
		<comment id='2' author='JavaFXpert' date='2016-08-06T20:29:31Z'>
		I haven't notice this issue on other examples, but will check them again.
		</comment>
		<comment id='3' author='JavaFXpert' date='2016-08-06T23:31:53Z'>
		So, OSX: that doesn't surprise me. FWIW we have seen NaN issues with veclib (OSX's bundled BLAS libraries) before (when we used to use netlib-java though). That's definitely one possibility here.
Can you try installing openblas or MKL, see if that makes a difference?
&lt;denchmark-link:https://github.com/saudet&gt;@saudet&lt;/denchmark-link&gt;
 we'll link with veclib at runtime, right? Also, what's likely to occur with say veclib and openblas or MKL on the path?
		</comment>
		<comment id='4' author='JavaFXpert' date='2016-08-07T02:40:08Z'>
		To load conditionally at runtime, we'd have to figure out what to do for rpath first. The way it's handled on that platform severely complicates things.
Still, we could easily switch to OpenBLAS by default. At least we would get results in line with the other platforms. Should we do that?
		</comment>
		<comment id='5' author='JavaFXpert' date='2016-08-07T02:51:35Z'>
		Veclib, (when it works), should be faster than openblas (at least according to netlib's benchmarks).
If it is the problem however (and it's not a one-off), then yeah, it might be safer to switch to openblas by default.
		</comment>
	</comments>
</bug>