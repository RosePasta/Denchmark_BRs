<bug id='3478' author='NicoSerranoP' open_date='2020-05-08T22:33:32Z' closed_time='2020-06-21T00:07:01Z'>
	<summary>Serialize a Torch Paillier Tensor with encrypted values</summary>
	<description>
Describe the bug
I am trying to serialize a torch Paillier Tensor (which has been previously encrypted) in order to send it/store it somewhere. I am getting the following error:
AttributeError: 'numpy.ndarray' object has no attribute 'grad'
To Reproduce
Steps to reproduce the behavior:
import torch
import syft as sy
hook = sy.TorchHook(torch)
pub, pri = sy.keygen()

x_tensor = torch.Tensor([1, 2, 3])
x_encrypted = x_tensor.encrypt(protocol="paillier", public_key=pub)
x_serialized = sy.serde.serialize(obj=x_encrypted)
The last step sy.serde.serialize(obj=x_encrypted) would throw the error:
&lt;denchmark-code&gt;/usr/local/lib/python3.6/dist-packages/syft/generic/tensor.py in grad(self)
    121     @property
    122     def grad(self):
--&gt; 123         child_grad = self.child.grad
    124         if child_grad is None:
    125             return None

AttributeError: 'numpy.ndarray' object has no attribute 'grad'
&lt;/denchmark-code&gt;

Expected behavior
x_serialized should be a serialized tensor (with all its elements encrypted using paillier homomorphic encryption).
Desktop (please complete the following information):

OS: Windows 10


I am new to the library so I might not be using the correct functions to serialize. However, the follow comment can be found in the sy.serde.serialize &lt;denchmark-link:https://github.com/OpenMined/PySyft/blob/11dc345fd71ab156edd0a99d49b1527a8f73092a/syft/serde/serde.py#L15&gt;file&lt;/denchmark-link&gt;
:
&lt;denchmark-code&gt;## SECTION:  High Level Public Functions (these are the ones you use)
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='NicoSerranoP' date='2020-05-09T22:36:51Z'>
		I tried modifying the python self.child.grad in a forked repo but then the next error message is:
\lib\site-packages\msgpack\__init__.py", line 35, in packb
    return Packer(**kwargs).pack(o)
  File "msgpack\_packer.pyx", line 286, in msgpack._cmsgpack.Packer.pack
  File "msgpack\_packer.pyx", line 292, in msgpack._cmsgpack.Packer.pack
  File "msgpack\_packer.pyx", line 289, in msgpack._cmsgpack.Packer.pack
  File "msgpack\_packer.pyx", line 258, in msgpack._cmsgpack.Packer._pack
  File "msgpack\_packer.pyx", line 258, in msgpack._cmsgpack.Packer._pack
  File "msgpack\_packer.pyx", line 283, in msgpack._cmsgpack.Packer._pack
TypeError: can not serialize 'PaillierTensor' object
It looks like the external library &lt;denchmark-link:https://msgpack-python.readthedocs.io/en/latest/api.html#msgpack.Packer&gt;msgpack&lt;/denchmark-link&gt;
 is having problems when transforming the 'PaillierTensor' object into binary code.
Does anybody knows any other way to serializer a PaillierTensor? I think that the send function from Workers does serialize this kind of tensors
		</comment>
		<comment id='2' author='NicoSerranoP' date='2020-05-13T05:25:09Z'>
		I created a function myself to serialize a Paillier Tensor into a  json/string :D
I would love to contribute to the serde section of PySyft with this function but I am do not understand 100% all the functions and where would this function fit. Nevertheless, here is the code I wrote (if I can help in anything please let me know, it would be a honor to contribute.
from syft.frameworks.torch.tensors.interpreters.paillier import PaillierTensor
from phe.paillier import EncryptedNumber, PaillierPublicKey
import numpy as np
import syft as sy
import torch
import json
hook = sy.TorchHook(torch)

def serialize_paillier(tensor):
  if (isinstance(tensor.child, PaillierTensor)):
    struct = {}
    first_element = tensor.child.child[0]
    if (isinstance(first_element,np.ndarray)):
      values = []
      struct['public_key'] = {'g': first_element[0].public_key.g, 'n': first_element[0].public_key.n}
      for subtensor in tensor.child.child:
        row = [(str(subtensor[i].ciphertext()), str(subtensor[i].exponent)) for i in range(len(subtensor))]
        values.append(row)
      struct['values'] = values
    else:
      struct['public_key'] = {'g': first_element.public_key.g, 'n': first_element.public_key.n}
      struct['values'] = [(str(tensor[i].ciphertext()), str(tensor[i].exponent)) for i in range(len(tensor))]
    return json.dumps(struct)
  else:
    raise TypeError(type(tensor))

def deserialize_paillier(obj):
  if (isinstance(obj,str)):
    struct = json.loads(obj)
    tensor = PaillierTensor()
    public_key = struct['public_key']
    pub = PaillierPublicKey(n=int(public_key['n']))
    if (isinstance(struct['values'][0][0], list)):    
      values = [ [EncryptedNumber(pub, int(x[0]), int(x[1])) for x in y] for y in struct['values'] ]
    else:
      values = [EncryptedNumber(pub, int(x[0]), int(x[1])) for x in struct['values']]
    tensor.child = np.array(values)
    syft_tensor = tensor.wrap()
    return syft_tensor
  else:
    raise TypeError(type(obj))

# The next lines are to test the functions
# Array declaration
array1 = np.array([1,4]) # 1 dimension array
array2 = np.array([[5,2,3],[1,4,4],[2,4,4],[2,4,4]]) # 3 or n dimension array

# Declaring a tensor
x_tensor1 = torch.Tensor(array1)
x_tensor2 = torch.Tensor(array2)

# Encrypting the tensor
pub, pri = sy.keygen()
x_encrypted1 = x_tensor1.encrypt(protocol="paillier", public_key=pub)
x_encrypted2 = x_tensor2.encrypt(protocol="paillier", public_key=pub)

# Serialization process
obj1 = serialize_paillier(x_encrypted1)
obj2 = serialize_paillier(x_encrypted2)

# Deserialization process
tensor1 = deserialize_paillier(obj1)
tensor2 = deserialize_paillier(obj2)

# Decrypting the tensor
x_decrypted1 = tensor1.decrypt(protocol="paillier", private_key=pri)
x_decrypted2 = tensor2.decrypt(protocol="paillier", private_key=pri)
		</comment>
		<comment id='3' author='NicoSerranoP' date='2020-05-13T13:06:10Z'>
		This is related to &lt;denchmark-link:https://github.com/OpenMined/PySyft/issues/3510&gt;#3510&lt;/denchmark-link&gt;
. If you look at &lt;denchmark-link:https://github.com/OpenMined/PySyft/blob/master/syft/frameworks/torch/tensors/interpreters/paillier.py#L258-L295&gt;the bottom of paillier.py&lt;/denchmark-link&gt;
, there are two methods  and , which convert a  to Python primitives like , , , , etc to prepare it for serialization with msgpack. The methods already exist but they don't have a corresponding test to verify that they actually work. There's a &lt;denchmark-link:https://github.com/OpenMined/PySyft/blob/368630afaba985ee9c26cc0aadd1c56c42bb38a6/test/serde/serde_helpers.py#L2012-L2032&gt;stub for a test&lt;/denchmark-link&gt;
, but it still needs to be filled in.
		</comment>
		<comment id='4' author='NicoSerranoP' date='2020-06-13T00:06:32Z'>
		This issue has been marked stale because it has been open 30 days with no activity. Leave a comment or remove the stale label to unmark it. Otherwise, this will be closed in 7 days.
		</comment>
		<comment id='5' author='NicoSerranoP' date='2020-07-25T02:41:16Z'>
		This issue still exists no? Any update? I am trying to do the same but get the same error on serialization.
		</comment>
		<comment id='6' author='NicoSerranoP' date='2020-07-26T04:53:18Z'>
		Hi Usamazf! I was not able to solve it (It did not passed the testings) but I am using this function to serialize Paillier tensors:
from syft.frameworks.torch.tensors.interpreters.paillier import PaillierTensor
from syft.serde.serde import deserialize
from phe.paillier import EncryptedNumber
from phe.paillier import PaillierPublicKey
from numpy import ndarray
from numpy import array


def serialize_paillier(element):
  # Case 1: tensor recursion
  if isinstance(element, torch.Tensor):
    paillier = element.child
    if isinstance(paillier, PaillierTensor):
      child = [serialize_paillier(subchild) for subchild in paillier.child]
      return {'n': paillier.pubkey.n, 'values': child} # in PaillierPublicKey g = n + 1
    else:
      raise TypeError(type(paillier))

  # Case 2: ndarray recursion
  elif isinstance(element, ndarray):
    return [serialize_paillier(subelement) for subelement in element]

  # Case 3: EncryptedNumber serialization
  elif isinstance(element, EncryptedNumber):
    return (str(element.ciphertext()), str(element.exponent))

  # Case 4: Unknown type
  else:
    raise TypeError(type(element))
def deserialize_paillier(struct, pub=None):
  # Case 1: dict recursion
  if isinstance(struct, dict):
    pub = PaillierPublicKey(n=int(struct['n']))
    child = [deserialize_paillier(substruct, pub) for substruct in struct['values']]
    # Building Paillier Tensor
    tensor = PaillierTensor()
    tensor.child = array(child)
    tensor.pubkey = pub
    return tensor.wrap()

  # Case 2: list recursion
  elif isinstance(struct, list):
    return [deserialize_paillier(substruct, pub) for substruct in struct]

  # Case 3: Tuple deserialization
  elif isinstance(struct, tuple):
    return EncryptedNumber(pub, int(struct[0]), int(struct[1]))

  # Case 4: Unknown type
  else:
    raise TypeError(type(struct))
In case you need a Encrypted Number Object to transform it to Paillier (for serialization) use:
def to_paillier(element, public_key):
    if isinstance(element, torch.Tensor) and isinstance(element.child, PaillierTensor):
        element.child.pubkey = public_key
        child = element.child.child
        if isinstance(child, ndarray):
          return element
        elif isinstance(child, EncryptedNumber):
          element.child.child = array([child])
          return element
        else:
          raise Exception("The tensor does not have an EncryptedNumber or a np.ndarray as child")
    elif isinstance(element, PaillierTensor):
        element.pubkey = public_key
        return element.wrap()
    elif isinstance(element, ndarray):
        tensor = PaillierTensor()
        tensor.child = element
        tensor.pubkey = public_key
        return tensor.wrap()
    elif isinstance(element, list):
        tensor = PaillierTensor()
        tensor.child = array(element)
        tensor.pubkey = public_key
        return tensor.wrap()
    elif isinstance(element, EncryptedNumber):
        tensor = PaillierTensor()
        tensor.child = array([element])
        tensor.pubkey = public_key
        return tensor.wrap()
    else:
        raise TypeError(type(element))
I am actively working with Paillier tensors for my thesis and I would love to know what are you working on, maybe we can collaborate in something.
		</comment>
		<comment id='7' author='NicoSerranoP' date='2020-07-26T08:30:54Z'>
		&lt;denchmark-link:https://github.com/NicoSerranoP&gt;@NicoSerranoP&lt;/denchmark-link&gt;
 Excellent. Now I just need to figure out where I can serialize it when sending encrypted tensors to workers. Thanks you for sharing!
P.S. I have just started exploring privacy and communication efficiency in FL systems.
		</comment>
		<comment id='8' author='NicoSerranoP' date='2020-07-26T15:30:11Z'>
		&lt;denchmark-link:https://github.com/usamazf&gt;@usamazf&lt;/denchmark-link&gt;
 if you are planning to do federated learning with multiple people/users/data providers/parties then SMPC is the best way to go (PySyft has done an incredible work in that area)
		</comment>
	</comments>
</bug>