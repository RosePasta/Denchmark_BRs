<bug id='2725' author='flo257' open_date='2019-11-08T18:30:09Z' closed_time='2020-05-24T00:08:24Z'>
	<summary>Parameter update error using set_() in Encrypted Gradient Aggregation</summary>
	<description>
Hi,
I've got a question concerning the tutorial 10 "Federated Learning with Encrypted Gradient Aggregation".
I followed the instructions of this tutorial to use this technology and adapted it to my image classification task, but I've encountered some problems.
The first iteration of the "main loop" (following the exact code from the tutorial) in the train function for data_index in range(len(remote_dataset[0])-1): works fine, iterating through the first batch of data of both alice and bob.
However, the second iteration of this loop, which should process the second batches throws an exception. In detail, it does so on the first try of updating his model at the pred = model(data) step, specifically at the first convolutional layer of my NN.
The error which gets thrown is "weight should have at least three dimensions" - which is quite interesting, because it always works fine on the first iteration of alice and bob data.
The following is my quite basic neural net.
&lt;denchmark-code&gt;    def forward(self, x):
        x = F.relu(self.conv0(x))
        x = self.pool(F.relu(self.conv1(x)))
        x = F.relu(self.conv2(x))
        x = self.pool(F.relu(self.conv3(x)))
        x = self.dropout(x)
        x = x.view(-1, 256*4*4)
        x = self.fc0(x)
        x = self.dropout(x)
        x = self.fc1(x)
        x = self.dropout(x)
        x = self.fc2(x)
        return F.log_softmax(x, dim=1)
&lt;/denchmark-code&gt;

Does someone have an idea why this happens?
OS: Windows 10
Python: 3.7
torch: 1.1.0
syft: 0.1.28a1
The following is the whole error:
&lt;denchmark-code&gt;---------------------------------------------------------------------------
PureFrameworkTensorFoundError             Traceback (most recent call last)
c:\users\flo\appdata\local\programs\python\python37\lib\site-packages\syft-0.1.28a1-py3.7.egg\syft\frameworks\torch\tensors\interpreters\native.py in handle_func_command(cls, command)
    286             new_args, new_kwargs, new_type, args_type = hook_args.unwrap_args_from_function(
--&gt; 287                 cmd, args, kwargs, return_args_type=True
    288             )

c:\users\flo\appdata\local\programs\python\python37\lib\site-packages\syft-0.1.28a1-py3.7.egg\syft\generic\frameworks\hook\hook_args.py in unwrap_args_from_function(attr, args, kwargs, return_args_type)
    165         # Try running it
--&gt; 166         new_args = hook_args(args)
    167 

c:\users\flo\appdata\local\programs\python\python37\lib\site-packages\syft-0.1.28a1-py3.7.egg\syft\generic\frameworks\hook\hook_args.py in &lt;lambda&gt;(x)
    358 
--&gt; 359     return lambda x: f(lambdas, x)
    360 

c:\users\flo\appdata\local\programs\python\python37\lib\site-packages\syft-0.1.28a1-py3.7.egg\syft\generic\frameworks\hook\hook_args.py in seven_fold(lambdas, args, **kwargs)
    573     return (
--&gt; 574         lambdas[0](args[0], **kwargs),
    575         lambdas[1](args[1], **kwargs),

c:\users\flo\appdata\local\programs\python\python37\lib\site-packages\syft-0.1.28a1-py3.7.egg\syft\generic\frameworks\hook\hook_args.py in &lt;lambda&gt;(i)
    336         # Last if not, rule is probably == 1 so use type to return the right transformation.
--&gt; 337         else lambda i: forward_func[type(i)](i)
    338         for a, r in zip(args, rules)  # And do this for all the args / rules provided

c:\users\flo\appdata\local\programs\python\python37\lib\site-packages\syft-0.1.28a1-py3.7.egg\syft\frameworks\torch\hook\hook_args.py in &lt;lambda&gt;(i)
     20     if hasattr(i, "child")
---&gt; 21     else (_ for _ in ()).throw(PureFrameworkTensorFoundError),
     22     torch.nn.Parameter: lambda i: i.child

c:\users\flo\appdata\local\programs\python\python37\lib\site-packages\syft-0.1.28a1-py3.7.egg\syft\frameworks\torch\hook\hook_args.py in &lt;genexpr&gt;(.0)
     20     if hasattr(i, "child")
---&gt; 21     else (_ for _ in ()).throw(PureFrameworkTensorFoundError),
     22     torch.nn.Parameter: lambda i: i.child

PureFrameworkTensorFoundError: 

During handling of the above exception, another exception occurred:

RuntimeError                              Traceback (most recent call last)
&lt;ipython-input-12-69ad3b15b6dc&gt; in &lt;module&gt;
      2 for epoch in range(1, 201):
      3     print(f"Epoch {epoch}")
----&gt; 4     trainSMPC(epoch)
      5     test()

&lt;ipython-input-10-9fd0824454ee&gt; in trainSMPC(epoch)
      6             print(data)
      7             print(target)
----&gt; 8             models[remote_index] = update(data, target, models[remote_index], optimizers[remote_index])
      9 
     10         print("aggregation")

&lt;ipython-input-9-c309a36730fe&gt; in update(data, target, model, optimizer)
     19     model.send(data.location)
     20     optimizer.zero_grad()
---&gt; 21     pred = model(data)
     22     loss = F.cross_entropy(pred, target)
     23     loss.backward()

c:\users\flo\appdata\local\programs\python\python37\lib\site-packages\torch\nn\modules\module.py in __call__(self, *input, **kwargs)
    491             result = self._slow_forward(*input, **kwargs)
    492         else:
--&gt; 493             result = self.forward(*input, **kwargs)
    494         for hook in self._forward_hooks.values():
    495             hook_result = hook(self, input, result)

&lt;ipython-input-8-0497bcc9c994&gt; in forward(self, x)
     19     def forward(self, x):
     20         print(x.shape)
---&gt; 21         x = F.relu(self.conv0(x))
     22         x = self.pool(F.relu(self.conv1(x)))
     23         x = F.relu(self.conv2(x))

c:\users\flo\appdata\local\programs\python\python37\lib\site-packages\torch\nn\modules\module.py in __call__(self, *input, **kwargs)
    491             result = self._slow_forward(*input, **kwargs)
    492         else:
--&gt; 493             result = self.forward(*input, **kwargs)
    494         for hook in self._forward_hooks.values():
    495             hook_result = hook(self, input, result)

c:\users\flo\appdata\local\programs\python\python37\lib\site-packages\torch\nn\modules\conv.py in forward(self, input)
    336                             _pair(0), self.dilation, self.groups)
    337 
--&gt; 338         return F.conv2d(input, self.weight, self.bias, self.stride, self.padding, self.dilation, self.groups)
    339 
    340 

c:\users\flo\appdata\local\programs\python\python37\lib\site-packages\syft-0.1.28a1-py3.7.egg\syft\generic\frameworks\hook\hook.py in overloaded_func(*args, **kwargs)
    426                 handle_func_command = syft.framework.Tensor.handle_func_command
    427 
--&gt; 428             response = handle_func_command(command)
    429 
    430             return response

c:\users\flo\appdata\local\programs\python\python37\lib\site-packages\syft-0.1.28a1-py3.7.egg\syft\frameworks\torch\tensors\interpreters\native.py in handle_func_command(cls, command)
    295             new_command = (cmd, None, new_args, new_kwargs)
    296             # Send it to the appropriate class and get the response
--&gt; 297             response = new_type.handle_func_command(new_command)
    298             # Put back the wrappers where needed
    299             response = hook_args.hook_response(cmd, response, wrap_type=args_type)

c:\users\flo\appdata\local\programs\python\python37\lib\site-packages\syft-0.1.28a1-py3.7.egg\syft\generic\pointers\object_pointer.py in handle_func_command(cls, command)
     87 
     88         # Send the command
---&gt; 89         response = owner.send_command(location, command)
     90 
     91         return response

c:\users\flo\appdata\local\programs\python\python37\lib\site-packages\syft-0.1.28a1-py3.7.egg\syft\workers\base.py in send_command(self, recipient, message, return_ids)
    485 
    486         try:
--&gt; 487             ret_val = self.send_msg(Operation(message, return_ids), location=recipient)
    488         except ResponseSignatureError as e:
    489             ret_val = None

c:\users\flo\appdata\local\programs\python\python37\lib\site-packages\syft-0.1.28a1-py3.7.egg\syft\workers\base.py in send_msg(self, message, location)
    256 
    257         # Step 2: send the message and wait for a response
--&gt; 258         bin_response = self._send_msg(bin_message, location)
    259 
    260         # Step 3: deserialize the response

c:\users\flo\appdata\local\programs\python\python37\lib\site-packages\syft-0.1.28a1-py3.7.egg\syft\workers\virtual.py in _send_msg(self, message, location)
      5 class VirtualWorker(BaseWorker, FederatedClient):
      6     def _send_msg(self, message: bin, location: BaseWorker) -&gt; bin:
----&gt; 7         return location._recv_msg(message)
      8 
      9     def _recv_msg(self, message: bin) -&gt; bin:

c:\users\flo\appdata\local\programs\python\python37\lib\site-packages\syft-0.1.28a1-py3.7.egg\syft\workers\virtual.py in _recv_msg(self, message)
      8 
      9     def _recv_msg(self, message: bin) -&gt; bin:
---&gt; 10         return self.recv_msg(message)

c:\users\flo\appdata\local\programs\python\python37\lib\site-packages\syft-0.1.28a1-py3.7.egg\syft\workers\base.py in recv_msg(self, bin_message)
    290             print(f"worker {self} received {sy.codes.code2MSGTYPE[msg_type]} {contents}")
    291         # Step 1: route message to appropriate function
--&gt; 292         response = self._message_router[msg_type](contents)
    293 
    294         # Step 2: Serialize the message to simple python objects

c:\users\flo\appdata\local\programs\python\python37\lib\site-packages\syft-0.1.28a1-py3.7.egg\syft\workers\base.py in execute_command(self, message)
    430                 command = getattr(command, path)
    431 
--&gt; 432             response = command(*args, **kwargs)
    433 
    434         # some functions don't return anything (such as .backward())

c:\users\flo\appdata\local\programs\python\python37\lib\site-packages\syft-0.1.28a1-py3.7.egg\syft\generic\frameworks\hook\hook.py in overloaded_func(*args, **kwargs)
    426                 handle_func_command = syft.framework.Tensor.handle_func_command
    427 
--&gt; 428             response = handle_func_command(command)
    429 
    430             return response

c:\users\flo\appdata\local\programs\python\python37\lib\site-packages\syft-0.1.28a1-py3.7.egg\syft\frameworks\torch\tensors\interpreters\native.py in handle_func_command(cls, command)
    319             # in the execute_command function
    320             if isinstance(args, tuple):
--&gt; 321                 response = eval(cmd)(*args, **kwargs)
    322             else:
    323                 response = eval(cmd)(args, **kwargs)

RuntimeError: weight should have at least three dimensions
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='flo257' date='2019-11-08T21:20:27Z'>
		It turns out that the models are not correctly updated, even if
&lt;denchmark-code&gt;for remote_index in range(len(compute_nodes)):
        for param_index in range(len(params[remote_index])):
            params[remote_index][param_index].set_(new_params[param_index])
&lt;/denchmark-code&gt;

is correctly called.
Following tutorial 10, the params list is updated, but the update of these values are not updated neither in alices_model.parameters() nor bobs_model.parameters().
Unfortunately, I don't know how to fix this
		</comment>
		<comment id='2' author='flo257' date='2019-11-12T15:38:42Z'>
		I've updated pytorch to 1.3.0 and pysyft to 0.2.0a2, and by rerunning the notebooks I now receive the same error as issue &lt;denchmark-link:https://github.com/OpenMined/PySyft/issues/2634&gt;#2634&lt;/denchmark-link&gt;
 #issuecomment-546368259
Fix see &lt;denchmark-link:https://github.com/OpenMined/PySyft/issues/2634&gt;#2634&lt;/denchmark-link&gt;

		</comment>
		<comment id='3' author='flo257' date='2020-05-24T00:08:22Z'>
		This issue has been marked stale because it has been open 30 days with no activity. Leave a comment or remove the stale label to unmark it. Otherwise, this will be closed in 7 days.
		</comment>
	</comments>
</bug>