<bug id='1992' author='iamtrask' open_date='2019-03-13T19:02:05Z' closed_time='2019-03-29T14:09:43Z'>
	<summary>Urgent: fail gracefully when initializing two VirtualWorker objects with the same id/name</summary>
	<description>
When people are introduced to PySyft, they often fall into the mistake (particularly in Jupyter Notebbooks) of initializing a VirtualWorker with the same ID twice. This causes really strange errors because both workers end up co-existing together. We need to modify the VirtualWorker (or perhaps the BaseWorker) API to make it so that this fails gracefully (aka... that the new worker actually becomes the old worker or all intensive purposes)
Aka - we want this code to function normally
bob = sy.VirtualWorker(hook, "bob")
x = th.tensor([1,2,3,4,5]).send(bob)
bob = sy.VirtualWorker(hook, "bob")
y = th.tensor([1,2,3,4,5]).send(bob)
z = x + y
z.get() # returns [2,4,6,8,10]
We should accomplish this by having both the new "bob" and the old "bob" point to the same underlying _objects dictionary.
	</description>
	<comments>
		<comment id='1' author='iamtrask' date='2019-03-14T14:40:31Z'>
		At any moment, you can check all the virtual workers present on your process by retrieving syft.hook.local_worker.(known_workers) as they get automatically added to this list on init. Just making a search and returning the already existing one if any should fix the pb
		</comment>
		<comment id='2' author='iamtrask' date='2019-03-18T19:05:49Z'>
		&lt;denchmark-link:https://github.com/LaRiffle&gt;@LaRiffle&lt;/denchmark-link&gt;
 Tried this out. Trying to naively return the known worker with the same id, causes over half of the tests to fail. I am of the impression it might be best to make this simply throw a verbose error for the moment. &lt;denchmark-link:https://github.com/OpenMined/PySyft/pull/2000&gt;#2000&lt;/denchmark-link&gt;
 for reference to my changes
		</comment>
		<comment id='3' author='iamtrask' date='2019-03-28T23:22:01Z'>
		&lt;denchmark-link:https://github.com/robert-wagner&gt;@robert-wagner&lt;/denchmark-link&gt;
 just tried your solution (&lt;denchmark-link:https://github.com/OpenMined/PySyft/pull/2000&gt;#2000&lt;/denchmark-link&gt;
) with a small modification and it seems to work, can you check if it makes sense? I've just made the PR &lt;denchmark-link:https://github.com/OpenMined/PySyft/pull/2022&gt;#2022&lt;/denchmark-link&gt;
. Thanks!
		</comment>
	</comments>
</bug>