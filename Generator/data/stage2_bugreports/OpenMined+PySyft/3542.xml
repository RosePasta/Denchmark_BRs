<bug id='3542' author='kennysong' open_date='2020-05-18T05:48:56Z' closed_time='2020-06-28T00:07:13Z'>
	<summary>Assignment operator *= gives the wrong result! (for AdditiveSharingTensors)</summary>
	<description>
The assignment operator *= doesn't multiply properly for AdditiveSharingTensors.
See this example:
import syft as sy
import torch as th
hook = sy.TorchHook(th)

bob = sy.VirtualWorker(hook, id="bob")
alice = sy.VirtualWorker(hook, id="alice")

x = th.tensor([1,2,3,4])
x = x.share(bob, alice, crypto_provider=bob)

z = x[0]
for i in range(1, len(x)):
    z *= x[i]
z.get()  # &lt;-- returns tensor(1)!
This gives tensor(1), which is totally wrong!
Doing the assignment explicitly works, e.g. z = z * x[i].
The addition assignment operator seems to work with no problems, e.g. z += x[i] works correctly.
	</description>
	<comments>
		<comment id='1' author='kennysong' date='2020-06-21T00:06:53Z'>
		This issue has been marked stale because it has been open 30 days with no activity. Leave a comment or remove the stale label to unmark it. Otherwise, this will be closed in 7 days.
		</comment>
		<comment id='2' author='kennysong' date='2020-07-20T06:55:57Z'>
		AdditiveSharingTensors can be multiplied with long tensors and fixedPrecisionTensors
Don't directly multiply floats with AdditiveSharingTensor  as an error will come when you multiply an AdditiveSharingTensors with a FloatTensor.
But sharing with fixed_precision we will be able to handle float values like parameters in an encrypted way.
1)if decrypt z
&lt;denchmark-code&gt;import syft as sy
import torch as th
hook = sy.TorchHook(th)
bob = sy.VirtualWorker(hook, id="bob")
alice = sy.VirtualWorker(hook, id="alice")
x = th.tensor([1,2,3,4])
x = x.share(bob, alice, crypto_provider=bob)
z = x[0].get() #z got decrypted 
for i in range(1, len(x)):
    z *= x[i]
z.get()  # &lt;-- returns tensor(24)
&lt;/denchmark-code&gt;


if we use fixed_Precision

&lt;denchmark-code&gt;import syft as sy
import torch as th
hook = sy.TorchHook(th)
bob = sy.VirtualWorker(hook, id="bob")
alice = sy.VirtualWorker(hook, id="alice")
x = th.tensor([1.,2,3,4])
x = x.fix_prec().share(bob, alice, crypto_provider=bob)
z = x[0] # &lt;--- z is encrypted
for i in range(1, len(x)):
    z *= x[i] # &lt;-- inplace mul
z.get().float_prec()  # &lt;-- returns tensor(24)
&lt;/denchmark-code&gt;

		</comment>
	</comments>
</bug>