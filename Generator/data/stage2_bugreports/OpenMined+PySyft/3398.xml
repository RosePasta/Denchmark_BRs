<bug id='3398' author='AlanAboudib' open_date='2020-04-23T18:31:39Z' closed_time='2020-04-28T15:09:39Z'>
	<summary>Memory leak in the argmax() method of AST</summary>
	<description>
This code, causes a memory leak only on the first worker in the worker list passed to the encrypt(). In this example it is  'alice', the second worker 'bob' does not suffer from any leaks.
The reason is the argmax() method:
&lt;denchmark-code&gt;import torch as th
import torch.optim as optim
import syft as sy

hook = sy.TorchHook(th) #, verbose=True)
bob = sy.VirtualWorker(hook, id="bob") #, verbose=True)
alice = sy.VirtualWorker(hook, id="alice") #, verbose=True)
crypto_provider = sy.VirtualWorker(hook, id="james") #, verbose=True)

a = th.ones(1, 5)
a = a.encrypt(workers=[alice, bob], crypto_provider=crypto_provider, requires_grad=True)

for i in range(3):
    print("=" * 10 + f"Iter{i + 1}" + "=" * 10)
    print(f"Alice: {len(alice._objects)}")
    print(f"Bob: {len(bob._objects)}")

    a.argmax(dim=1)

    print(f"Alice: {len(alice._objects)}")
    print(f"Bob: {len(bob._objects)}")

print("~" * 10 + "Done" + "~" * 10)
&lt;/denchmark-code&gt;

Here is the output (Only Alice leaks):
&lt;denchmark-code&gt;==========Iter1==========
Alice: 1
Bob: 1
Alice: 13
Bob: 1
==========Iter2==========
Alice: 13
Bob: 1
Alice: 25
Bob: 1
==========Iter3==========
Alice: 25
Bob: 1
Alice: 37
Bob: 1
~~~~~~~~~~Done~~~~~~~~~~
&lt;/denchmark-code&gt;

If you comment out a.argmax(dim=1), no memory leaks are observed:
&lt;denchmark-code&gt;==========Iter1==========
Alice: 1
Bob: 1
Alice: 1
Bob: 1
==========Iter2==========
Alice: 1
Bob: 1
Alice: 1
Bob: 1
==========Iter3==========
Alice: 1
Bob: 1
Alice: 1
Bob: 1
~~~~~~~~~~Done~~~~~~~~~~



&lt;/denchmark-code&gt;

	</description>
	<comments>
	</comments>
</bug>