<bug id='2927' author='iamtrask' open_date='2020-01-18T16:00:31Z' closed_time='2020-01-27T22:00:05Z'>
	<summary>Small rounding errors in handcrafted Conv2d and Pool2d Layers</summary>
	<description>

There is a small rounding error in these layers, as discussed in &lt;denchmark-link:https://github.com/OpenMined/PySyft/pull/2896/files/fa21f480c8bfe4196dac2f911cd938db7ff96f03#diff-369e971f29cf5226c9b64f75072095ac&gt;https://github.com/OpenMined/PySyft/pull/2896/files/fa21f480c8bfe4196dac2f911cd938db7ff96f03#diff-369e971f29cf5226c9b64f75072095ac&lt;/denchmark-link&gt;

To Reproduce
Run the following unit tests



PySyft/test/torch/nn/test_conv.py


         Line 7
      in
      39d2be0






 def test_conv2d(): 








PySyft/test/torch/nn/test_pool.py


         Line 6
      in
      39d2be0






 def test_pool2d(): 





Expected behavior
Ideally there would be 0 rounding error, but this might be a PyTorch issue not us.
	</description>
	<comments>
		<comment id='1' author='iamtrask' date='2020-01-21T10:17:12Z'>
		I investigated this a bit and it seems we need to do a direct summation instead of calculating sum of sums. The following modifications are required:

conv.py - change .sum(3).sum(3) to .sum((3, 4))
pool.py - change .sum(2).sum(2) to .sum((2, 3))

By making the above changes, we get exactly the same output for both the pooling implementations. However, a rounding error is still present for convolution possibly due to floating-point arithmetic as indicated &lt;denchmark-link:https://discuss.pytorch.org/t/pytorch-conv2d-vs-numpy-reference-different-outcomes-rounding-error-or-mistake/8921&gt;here&lt;/denchmark-link&gt;
.
		</comment>
		<comment id='2' author='iamtrask' date='2020-01-21T17:21:33Z'>
		&lt;denchmark-link:https://github.com/arshjot&gt;@arshjot&lt;/denchmark-link&gt;
 Thanks for looking into it! Could you submit a PR with those changes?
		</comment>
		<comment id='3' author='iamtrask' date='2020-01-21T19:20:52Z'>
		Yes, I'll be happy to do so!
		</comment>
		<comment id='4' author='iamtrask' date='2020-01-21T22:25:14Z'>
		Incredible work!
&lt;denchmark-link:#&gt;…&lt;/denchmark-link&gt;


Sent from my iPhone
 On 21 Jan 2020, at 19:20, Arshjot Singh Khehra ***@***.***&gt; wrote:

 ﻿
 Yes, I'll be happy to do so!

 —
 You are receiving this because you authored the thread.
 Reply to this email directly, view it on GitHub, or unsubscribe.


		</comment>
		<comment id='5' author='iamtrask' date='2020-01-24T10:13:13Z'>
		As reported - there is still rounding error in the Conv2d implementation. This issue should stay open until it is resolved. I have spent a few more hours looking into it and haven't found anything yet.
		</comment>
		<comment id='6' author='iamtrask' date='2020-01-24T10:28:57Z'>
		That's strange, it looks like the PR solved it and chnaged the test form approx to exact check didn't it?
		</comment>
		<comment id='7' author='iamtrask' date='2020-01-24T10:39:00Z'>
		The issue is solved for the pooling implementation but not for Conv2d. The Conv2d implementation also had the same discrepancy but even after rectifying it we do not get an exact match. I guess I should have specified that the PR solves part of this issue.
		</comment>
		<comment id='8' author='iamtrask' date='2020-01-27T22:00:05Z'>
		This issue was fixed by &lt;denchmark-link:https://github.com/OpenMined/PySyft/pull/2964&gt;#2964&lt;/denchmark-link&gt;
 (for the conv2d layer) and &lt;denchmark-link:https://github.com/OpenMined/PySyft/pull/2945&gt;#2945&lt;/denchmark-link&gt;
 (for the pooling layer)
		</comment>
	</comments>
</bug>