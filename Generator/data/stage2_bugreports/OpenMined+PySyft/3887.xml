<bug id='3887' author='NProkoptsev' open_date='2020-07-21T22:38:35Z' closed_time='2020-11-19T13:26:09Z'>
	<summary>Cannot move traced model to cuda</summary>
	<description>
&lt;denchmark-h:h2&gt;Description&lt;/denchmark-h&gt;

After initializing TorchHook and tracing model you can't move this model to another device (cuda or cpu). This happens because  method parameters() of a traced model returns list of torch.Tensor instead of list of nn.Parameter, so we can't move tensors to another device because they don't have setter for .data property



PySyft/syft/frameworks/torch/tensors/interpreters/native.py


         Line 141
      in
      5c8e7b7






 @property 





&lt;denchmark-code&gt;import torch
import syft as sy
hook = sy.TorchHook(torch)
model = torch.nn.Linear(1,1)
model = torch.jit.trace(model,torch.rand(1,1))
model.cpu()
&lt;/denchmark-code&gt;

This code produces error AttributeError: can't set attribute
The traceback:
&lt;denchmark-code&gt;---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
&lt;ipython-input-4-54d42a2d39a0&gt; in &lt;module&gt;
----&gt; 1 model.cpu()

/opt/conda/lib/python3.6/site-packages/torch/nn/modules/module.py in cpu(self)
    310             Module: self
    311         """
--&gt; 312         return self._apply(lambda t: t.cpu())
    313 
    314     def type(self, dst_type):

/opt/conda/lib/python3.6/site-packages/torch/nn/modules/module.py in _apply(self, fn)
    224                 should_use_set_data = compute_should_use_set_data(param, param_applied)
    225                 if should_use_set_data:
--&gt; 226                     param.data = param_applied
    227                 else:
    228                     assert isinstance(param, Parameter)

AttributeError: can't set attribute
&lt;/denchmark-code&gt;

&lt;denchmark-h:h2&gt;System Information&lt;/denchmark-h&gt;


PySyft 0.2.7
Torch 1.4.0

	</description>
	<comments>
		<comment id='1' author='NProkoptsev' date='2020-08-21T00:10:52Z'>
		This issue has been marked stale because it has been open 30 days with no activity. Leave a comment or remove the stale label to unmark it. Otherwise, this will be closed in 7 days.
		</comment>
		<comment id='2' author='NProkoptsev' date='2020-11-16T20:46:59Z'>
		&lt;denchmark-link:https://github.com/NProkoptsev&gt;@NProkoptsev&lt;/denchmark-link&gt;
 is there any workaround for this problem?
		</comment>
		<comment id='3' author='NProkoptsev' date='2020-11-16T21:31:44Z'>
		Save model to disk, then
torch.jit.load(f, map_location='cuda')
		</comment>
		<comment id='4' author='NProkoptsev' date='2020-11-18T13:26:59Z'>
		&lt;denchmark-link:https://github.com/NProkoptsev&gt;@NProkoptsev&lt;/denchmark-link&gt;
 thanks, I do so. But it seems saving and loading would break the object pointer so once you use the  command to retrieve your model from one of the workers it retrieves the old one (the same model before saving and not the updated one).
torch.jit.save(model,'model.pt')
model = torch.jit.load('model.pt',map_location='cpu')
		</comment>
		<comment id='5' author='NProkoptsev' date='2020-11-19T13:26:09Z'>
		Hello! Just letting you know that we are no longer planning on supporting anything on the 0.2.x product line and that all work should be ported over to 0.3.x, which is considered a complete rebuild of PySyft. Because of that, I'll be closing this issue. If you feel this is a mistake, or if the issue actually applies to 0.3.x as well, please feel free to ping me on Slack and I'll reopen the issue.
		</comment>
	</comments>
</bug>