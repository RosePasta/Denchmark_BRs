<bug id='3905' author='junrong1' open_date='2020-07-28T09:33:57Z' closed_time='2020-08-13T09:39:11Z'>
	<summary>Cannot find dataset pointers</summary>
	<description>
&lt;denchmark-h:h2&gt;Description&lt;/denchmark-h&gt;

A clear and concise description of the bug.  I tried the tutorial for the federated learning for Mnist, the link is: &lt;denchmark-link:https://github.com/OpenMined/PySyft/tree/master/examples/tutorials/grid/federated_learning/mnist&gt;https://github.com/OpenMined/PySyft/tree/master/examples/tutorials/grid/federated_learning/mnist&lt;/denchmark-link&gt;

but I cannot find the dataset pointer
&lt;denchmark-h:h2&gt;How to Reproduce&lt;/denchmark-h&gt;


Go to '...'
Click on '...'
Scroll down to '...'
See error

&lt;denchmark-h:h2&gt;Expected Behavior&lt;/denchmark-h&gt;

A clear and concise description of what you expected to happen.
&lt;denchmark-h:h2&gt;Screenshots&lt;/denchmark-h&gt;

If applicable, add screenshots to help explain your problem.
&lt;denchmark-h:h2&gt;System Information&lt;/denchmark-h&gt;


OS: [e.g. iOS] windows 10
OS Version: [e.g. 22]
Language Version: [e.g. Python 3.7, Node 10.18.1] python 3.7
Package Manager Version: [e.g. Conda 4.6.1, NPM 6.14.1]
Browser (if applicable): [e.g. Google Chrome]
Browser Version (if applicable): [e.g. 81.0.4044.138]

&lt;denchmark-h:h2&gt;Additional Context&lt;/denchmark-h&gt;

Add any other context about the problem here.
Here is my code.
import syft as sy
from syft.grid.clients.dynamic_fl_client import DynamicFLClient
import torch
import pickle
import time
import torchvision
from torchvision import datasets, transforms
import tqdm
from syft.grid.public_grid import PublicGridNetwork
from syft.grid.private_grid import PrivateGridNetwork
import torch.nn as nn
import torch.optim as optim
import torch.nn.functional as F
class Net(nn.Module):
def init(self):
super(Net, self).init()
self.conv1 = nn.Conv2d(1, 20, 5, 1)
self.conv2 = nn.Conv2d(20, 50, 5, 1)
self.fc1 = nn.Linear(4450, 500)
self.fc2 = nn.Linear(500, 10)
&lt;denchmark-code&gt;def forward(self, x):
    x = F.relu(self.conv1(x))
    x = F.max_pool2d(x, 2, 2)
    x = F.relu(self.conv2(x))
    x = F.max_pool2d(x, 2, 2)
    x = x.view(-1, 4*4*50)
    x = F.relu(self.fc1(x))
    x = self.fc2(x)
    return F.log_softmax(x, dim=1)
&lt;/denchmark-code&gt;

def epoch_total_size(data):
total = 0
for i in range(len(data)):
for j in range(len(data[i])):
total += data[i][j].shape[0]
&lt;denchmark-code&gt;return total
&lt;/denchmark-code&gt;

def train(epoch, data):
model.train()
epoch_total = epoch_total_size(data)
current_epoch_size = 0
for i in range(len(data)):
for j in range(len(data[i])):
current_epoch_size += len(data[i][j])
worker = data[i][j].location
model.send(worker)
optimizer.zero_grad()
pred = model(data[i][j])
loss = criterion(pred, target[i][j])
loss.backward()
optimizer.step()
model.get()
loss = loss.get()
print('Train Epoch: {} | With {} data |: [{}/{} ({:.0f}%)]\tLoss: {:.6f}'.format(
epoch, worker.id, current_epoch_size, epoch_total,
100. *  current_epoch_size / epoch_total, loss.item()))
hook = sy.TorchHook(torch)
nodes = ["ws://localhost:3001/", "ws://localhost:3000/"]
compute_nodes = []
for node in nodes:
compute_nodes.append(DynamicFLClient(hook, node))
N_SAMPLES = 10000
MNIST_PATH = './dataset'
transform = transforms.Compose([
transforms.ToTensor(),
transforms.Normalize((0.1307,), (0.3081,)),
])
trainset = datasets.MNIST(MNIST_PATH, download=True, train=True, transform=transform)
trainloader = torch.utils.data.DataLoader(trainset, batch_size=N_SAMPLES, shuffle=False)
dataiter = iter(trainloader)
images_train_mnist, labels_train_mnist = dataiter.next()
datasets_mnist = torch.split(images_train_mnist, int(len(images_train_mnist) / len(compute_nodes)), dim=0 ) #tuple of chunks (dataset / number of nodes)
labels_mnist = torch.split(labels_train_mnist, int(len(labels_train_mnist) / len(compute_nodes)), dim=0 )  #tuple of chunks (labels / number of nodes)
tag_img = []
tag_label = []
for i in range(len(compute_nodes)):
tag_img.append(datasets_mnist[i].tag("#X", "#mnist", "#dataset").describe("The input datapoints to the MNIST dataset."))
tag_label.append(labels_mnist[i].tag("#Y", "#mnist", "#dataset").describe("The input labels to the MNIST dataset."))
shared_x1 = tag_img[0].send(compute_nodes[0], garbage_collect_data=False) # First chunk of dataset to Bob
shared_x2 = tag_img[1].send(compute_nodes[1], garbage_collect_data=False) # Second chunk of dataset to Alice
shared_y1 = tag_label[0].send(compute_nodes[0], garbage_collect_data=False) # First chunk of labels to Bob
shared_y2 = tag_label[1].send(compute_nodes[1], garbage_collect_data=False) # Second chunk of labels to Alice
&lt;denchmark-h:h1&gt;print("X tensor pointers: ", shared_x1, shared_x2)&lt;/denchmark-h&gt;

&lt;denchmark-h:h1&gt;print("Y tensor pointers: ", shared_y1, shared_y2)&lt;/denchmark-h&gt;

device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")
if (torch.cuda.is_available()):
torch.set_default_tensor_type(torch.cuda.FloatTensor)
model = Net()
optimizer = optim.SGD(model.parameters(), lr=0.01)
criterion = nn.CrossEntropyLoss()
GRID_ADDRESS = 'localhost'
GRID_PORT = '5000'
my_grid = PublicGridNetwork(hook, "http://" + GRID_ADDRESS + ":" + GRID_PORT)
data = my_grid.search("#X", "#mnist", "#dataset")
target = my_grid.search("#Y", "#mnist", "#dataset")
data = data.values()
print(data)
N_EPOCS = 3
SAVE_MODEL = True
SAVE_MODEL_PATH = './models'
for epoch in range(N_EPOCS):
train(epoch, data)
	</description>
	<comments>
		<comment id='1' author='junrong1' date='2020-08-10T13:58:23Z'>
		&lt;denchmark-link:https://github.com/IonesioJunior&gt;@IonesioJunior&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/junrong1&gt;@junrong1&lt;/denchmark-link&gt;
  I have the same problem of not finding the pointer via the grid search.
Is there a workaround or a solution meanwhile?
Thx in advance!
		</comment>
		<comment id='2' author='junrong1' date='2020-08-11T09:46:28Z'>
		Okay, I've found an docker image with a working pygrid! (development tag)
		</comment>
		<comment id='3' author='junrong1' date='2020-08-12T02:31:10Z'>
		
@IonesioJunior @junrong1 I have the same problem of not finding the pointer via the grid search.
Is there a workaround or a solution meanwhile?
Thx in advance!

Ohhhhhh, sorry for late respond, I haven't found the solution, could u tell me ur solution to fix this?
		</comment>
		<comment id='4' author='junrong1' date='2020-08-12T09:00:34Z'>
		&lt;denchmark-link:https://github.com/junrong1&gt;@junrong1&lt;/denchmark-link&gt;
 For me it worked with the latest docker images using the development tag. The production one isn't working currently as it seems to be the case.
So, consider the following:
&lt;denchmark-code&gt;docker pull openmined/grid-network:development
docker pull openmined/grid-node:development
&lt;/denchmark-code&gt;

and then run the mnist federated learning example again.
		</comment>
		<comment id='5' author='junrong1' date='2020-08-12T09:43:10Z'>
		
@junrong1 For me it worked with the latest docker images using the development tag. The production one isn't working currently as it seems to be the case.
So, consider the following:
docker pull openmined/grid-network:development
docker pull openmined/grid-node:development

and then run the mnist federated learning example again.

I tried to use
docker pull openmined/pysyft-notebook
but I cannaot find the link they give me.
		</comment>
		<comment id='6' author='junrong1' date='2020-08-12T10:26:12Z'>
		

@junrong1 For me it worked with the latest docker images using the development tag. The production one isn't working currently as it seems to be the case.
So, consider the following:
docker pull openmined/grid-network:development
docker pull openmined/grid-node:development

and then run the mnist federated learning example again.

I tried to use
docker pull openmined/pysyft-notebook
but I cannaot find the link they give me.

Is there any tutorials for using network and node on docker?
		</comment>
		<comment id='7' author='junrong1' date='2020-08-12T11:19:05Z'>
		


@junrong1 For me it worked with the latest docker images using the development tag. The production one isn't working currently as it seems to be the case.
So, consider the following:
docker pull openmined/grid-network:development
docker pull openmined/grid-node:development

and then run the mnist federated learning example again.

I tried to use
docker pull openmined/pysyft-notebook
but I cannaot find the link they give me.

Is there any tutorials for using network and node on docker?

Hi &lt;denchmark-link:https://github.com/junrong1&gt;@junrong1&lt;/denchmark-link&gt;
 and &lt;denchmark-link:https://github.com/thiessl&gt;@thiessl&lt;/denchmark-link&gt;
 . The docker images were updated recently (a couple of day ago), actually the images are automatically udpated when a commit to develop or master is pushed.
&lt;denchmark-link:https://github.com/junrong1&gt;@junrong1&lt;/denchmark-link&gt;
 , is &lt;denchmark-link:https://hub.docker.com/r/openmined/grid-node&gt;https://hub.docker.com/r/openmined/grid-node&lt;/denchmark-link&gt;
 the image you are looking for?
Please confirm this is solved in order to close the issue.
For trazability reasons, we reccomend to open this issues directly on PyGrid repo
		</comment>
		<comment id='8' author='junrong1' date='2020-08-12T11:48:07Z'>
		


@junrong1 For me it worked with the latest docker images using the development tag. The production one isn't working currently as it seems to be the case.
So, consider the following:
docker pull openmined/grid-network:development
docker pull openmined/grid-node:development

and then run the mnist federated learning example again.

I tried to use
docker pull openmined/pysyft-notebook
but I cannaot find the link they give me.

Is there any tutorials for using network and node on docker?

Create a docker-compose.yml file with the following content:
&lt;denchmark-code&gt;version: '3'
services:
  network:
    image: openmined/grid-network:development
    environment:
      - PORT=5000
      - SECRET_KEY=ineedtoputasecrethere
      - DATABASE_URL=sqlite:///databasenetwork.db
    ports:
      - 5000:5000
  bob:
    image: openmined/grid-node:development
    environment:
      - NODE_ID=Bob
      - ADDRESS=http://bob:3000/
      - PORT=3000
      - NETWORK=http://network:5000
      - DATABASE_URL=sqlite:///databasenode.db

    depends_on:
      - 'network'
    ports:
      - 3000:3000
  alice:
    image: openmined/grid-node:development
    environment:
      - NODE_ID=Alice
      - ADDRESS=http://alice:3001/
      - PORT=3001
      - NETWORK=http://network:5000
      - DATABASE_URL=sqlite:///databasenode.db
    depends_on:
      - 'network'
    ports:
      - 3001:3001
&lt;/denchmark-code&gt;

and execute
docker-compose up
this ensures that alice and bob (grid-nodes) and the grid-network run based on the respective docker image (development tag, as this works with the current commit).
After that you can execute your notebook and connect to your grid-nodes properly.
		</comment>
		<comment id='9' author='junrong1' date='2020-08-13T07:17:57Z'>
		



@junrong1 For me it worked with the latest docker images using the development tag. The production one isn't working currently as it seems to be the case.
So, consider the following:
docker pull openmined/grid-network:development
docker pull openmined/grid-node:development

and then run the mnist federated learning example again.

I tried to use
docker pull openmined/pysyft-notebook
but I cannaot find the link they give me.

Is there any tutorials for using network and node on docker?

Create a docker-compose.yml file with the following content:
version: '3'
services:
  network:
    image: openmined/grid-network:development
    environment:
      - PORT=5000
      - SECRET_KEY=ineedtoputasecrethere
      - DATABASE_URL=sqlite:///databasenetwork.db
    ports:
      - 5000:5000
  bob:
    image: openmined/grid-node:development
    environment:
      - NODE_ID=Bob
      - ADDRESS=http://bob:3000/
      - PORT=3000
      - NETWORK=http://network:5000
      - DATABASE_URL=sqlite:///databasenode.db

    depends_on:
      - 'network'
    ports:
      - 3000:3000
  alice:
    image: openmined/grid-node:development
    environment:
      - NODE_ID=Alice
      - ADDRESS=http://alice:3001/
      - PORT=3001
      - NETWORK=http://network:5000
      - DATABASE_URL=sqlite:///databasenode.db
    depends_on:
      - 'network'
    ports:
      - 3001:3001

and execute
docker-compose up
this ensures that alice and bob (grid-nodes) and the grid-network run based on the respective docker image (development tag, as this works with the current commit).
After that you can execute your notebook and connect to your grid-nodes properly.

I have an error with worker failed to boot. Do you know how can I fix this?
		</comment>
		<comment id='10' author='junrong1' date='2020-08-13T07:20:49Z'>
		No. I run this yesterday from the docker compose from the repo without erros
		</comment>
		<comment id='11' author='junrong1' date='2020-08-13T09:39:11Z'>
		



@junrong1 For me it worked with the latest docker images using the development tag. The production one isn't working currently as it seems to be the case.
So, consider the following:
docker pull openmined/grid-network:development
docker pull openmined/grid-node:development

and then run the mnist federated learning example again.

I tried to use
docker pull openmined/pysyft-notebook
but I cannaot find the link they give me.

Is there any tutorials for using network and node on docker?

Hi @junrong1 and @thiessl . The docker images were updated recently (a couple of day ago), actually the images are automatically udpated when a commit to develop or master is pushed.
@junrong1 , is https://hub.docker.com/r/openmined/grid-node the image you are looking for?
Please confirm this is solved in order to close the issue.
For trazability reasons, we reccomend to open this issues directly on PyGr


No. I run this yesterday from the docker compose from the repo without erros

		</comment>
	</comments>
</bug>