<bug id='4676' author='Nilanshrajput' open_date='2020-10-19T13:04:40Z' closed_time='2020-11-06T08:40:15Z'>
	<summary>torch ops not working with smpc</summary>
	<description>
&lt;denchmark-h:h2&gt;Description&lt;/denchmark-h&gt;

torch ops like relu and argmax etc are not working during encrypted training on encrypted data (using smpc)
these are working if we pass protocol = fss during encryption but earlier it used to work with default protocols
&lt;denchmark-h:h2&gt;How to Reproduce&lt;/denchmark-h&gt;

used below model with oygrid nodes
&lt;denchmark-code&gt;class Classifier(sy.Plan):
    def __init__(self, in_features, out_features):
        super(Classifier, self).__init__()
        self.fc = torch.nn.Linear(in_features, out_features)
    def forward(self, x):
        logits = self.fc(x)
        probs =F.relu(logits)
        return probs, logits                                                                    
# Create the classifer 
classifier = Classifier(in_features = 300, out_features = 2)
# Apply SMPC encryption
classifier = classifier.fix_precision()\
                       .share(bob, alice, 
                              crypto_provider = james,
                              requires_grad = True,
                             )

&lt;/denchmark-code&gt;

&lt;denchmark-h:h2&gt;Screenshots&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;KeyError                                  Traceback (most recent call last)
&lt;ipython-input-55-c062504472ad&gt; in &lt;module&gt;
     10 
     11         # Predict sentiment probabilities
---&gt; 12         probs, logits = classifier(vectors)
     13 
     14         # Compute loss and accuracy
~/Anton/OpenMined/PySyft/syft/execution/plan.py in __call__(self, *args)
    376             if self.include_state:
    377                 args = (*args, self.state)
--&gt; 378             return self.forward(*args)
    379         else:
    380             if self.validate_input_types:
&lt;ipython-input-52-1607ff94b4a2&gt; in forward(self, x)
     17         logits = self.fc(x)
     18 
---&gt; 19         probs =F.relu(logits)
     20 
     21         return probs, logits
~/Anton/OpenMined/PySyft/syft/generic/frameworks/hook/hook.py in overloaded_func(*args, **kwargs)
    344                 handle_func_command = syft.framework.Tensor.handle_func_command
    345 
--&gt; 346             response = handle_func_command(command)
    347 
    348             return response
~/Anton/OpenMined/PySyft/syft/frameworks/torch/tensors/interpreters/native.py in handle_func_command(cls, command)
    439             # Send it to the appropriate class and get the response
    440             try:
--&gt; 441                 response = new_type.handle_func_command(new_command)
    442             except RuntimeError:
    443                 # Change the library path to avoid errors on layers like AvgPooling
~/Anton/OpenMined/PySyft/syft/frameworks/torch/tensors/interpreters/autograd.py in handle_func_command(cls, command)
    292 
    293         if cmd is not None:
--&gt; 294             return cmd(*args_, **kwargs_)
    295 
    296         # Replace all AutogradTensor with their child attribute
~/Anton/OpenMined/PySyft/syft/frameworks/torch/tensors/interpreters/autograd.py in relu(tensor, **kwargs)
    257 
    258                 def relu(tensor, **kwargs):
--&gt; 259                     return tensor.relu()
    260 
    261                 module.relu = relu
~/Anton/OpenMined/PySyft/syft/frameworks/torch/tensors/interpreters/autograd.py in method_with_grad(*args, **kwargs)
    161                 )
    162 
--&gt; 163                 result = getattr(new_self, name)(*new_args, **new_kwargs)
    164 
    165                 # Put back SyftTensor on the tensors found in the response
~/Anton/OpenMined/PySyft/syft/generic/frameworks/hook/hook.py in overloaded_syft_method(self, *args, **kwargs)
    110 
    111             # Send it to the appropriate class and get the response
--&gt; 112             response = getattr(new_self, attr)(*new_args, **new_kwargs)
    113 
    114             # For inplace methods, just directly return self
~/Anton/OpenMined/PySyft/syft/frameworks/torch/mpc/__init__.py in method(self, *args, **kwargs)
     32 
     33         def method(self, *args, **kwargs):
---&gt; 34             f = protocol_store[(name, self.protocol)]
     35             return f(self, *args, **kwargs)
     36 
KeyError: ('AdditiveSharingTensor.relu', None)

&lt;/denchmark-code&gt;

&lt;denchmark-h:h2&gt;System Information&lt;/denchmark-h&gt;


OS: [e.g. iOS]
OS Version: [e.g. 22]
Language Version: latest master branch of Pysyft (0.2.9_
Package Manager Version: [e.g. Conda 4.6.1, NPM 6.14.1]
Browser (if applicable): [e.g. Google Chrome]
Browser Version (if applicable): [e.g. 81.0.4044.138]

&lt;denchmark-h:h2&gt;Additional Context&lt;/denchmark-h&gt;

Add any other context about the problem here.
	</description>
	<comments>
		<comment id='1' author='Nilanshrajput' date='2020-11-06T08:13:03Z'>
		Hi &lt;denchmark-link:https://github.com/Nilanshrajput&gt;@Nilanshrajput&lt;/denchmark-link&gt;
 I just tried this on my machine and its working and as discussed with you we can close this issue :)
		</comment>
		<comment id='2' author='Nilanshrajput' date='2020-11-06T08:40:11Z'>
		Yup closing it, thanks.
		</comment>
	</comments>
</bug>