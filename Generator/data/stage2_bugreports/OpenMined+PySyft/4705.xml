<bug id='4705' author='LaRiffle' open_date='2020-10-24T13:20:39Z' closed_time='2020-11-05T12:59:50Z'>
	<summary>Comparison between FPT and AST doesn't always works</summary>
	<description>
&lt;denchmark-h:h2&gt;Description&lt;/denchmark-h&gt;

Some cases of handling comparison between FixedPrecision and AdditiveSharingTensor are supported, but some are not. We should systematize this.
&lt;denchmark-h:h2&gt;How to Reproduce&lt;/denchmark-h&gt;

t1 = torch.tensor([1.2, 1]).fix_precision().share(*workers, crypto_provider=crypto_provider, protocol="fss")
t2 = torch.tensor([1.2, 1]).fix_precision()

t1 &gt; t2 # FAILS but t1 &lt; t2 works
&lt;denchmark-h:h2&gt;Stacktrace&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;AttributeError                            Traceback (most recent call last)
&lt;ipython-input-10-c55d3fcd7179&gt; in &lt;module&gt;
      2 t2 = torch.tensor([1.2, 1]).fix_precision()#.share(*workers, crypto_provider=crypto_provider, protocol="fss", requires_grad=True)
      3 
----&gt; 4 t1 &gt; t2

~/code/PySyft/syft/generic/frameworks/hook/hook.py in overloaded_native_method(self, *args, **kwargs)
    218                 # Send the new command to the appropriate class and get the response
    219                 method = getattr(new_self, method_name)
--&gt; 220                 response = method(*new_args, **new_kwargs)
    221 
    222                 # For inplace methods, just directly return self

~/code/PySyft/syft/generic/frameworks/overload.py in _hook_method_args(self, *args, **kwargs)
     25 
     26             # Send it to the appropriate class and get the response
---&gt; 27             response = attr(self, new_self, *new_args, **new_kwargs)
     28 
     29             # Put back SyftTensor on the tensors found in the response

~/code/PySyft/syft/frameworks/torch/tensors/interpreters/precision.py in __gt__(self, _self, other)
    821     def __gt__(self, _self, other):
    822         print("FPT gt", _self, other)
--&gt; 823         result = _self.__gt__(other)
    824         return result.type(self.torch_dtype) * self.base ** self.precision_fractional
    825 

~/code/PySyft/syft/frameworks/torch/mpc/__init__.py in method(self, *args, **kwargs)
     33         def method(self, *args, **kwargs):
     34             f = protocol_store[(name, self.protocol)]
---&gt; 35             return f(self, *args, **kwargs)
     36 
     37         return method

~/code/PySyft/syft/frameworks/torch/tensors/interpreters/additive_shared.py in __gt__(self, other)
    938     @crypto_protocol("fss")
    939     def __gt__(self, other):
--&gt; 940         return (other + 1) &lt;= self
    941 
    942     def ge(self, other):

~/code/PySyft/syft/generic/frameworks/hook/hook.py in overloaded_native_method(self, *args, **kwargs)
    156                     # arguments
    157                     if not isinstance(args[0].child, PointerTensor):
--&gt; 158                         self = type(args[0].child)().on(self, wrap=True)
    159                         args = [args[0]]
    160                         return overloaded_native_method(self, *args, **kwargs)

AttributeError: 'dict' object has no attribute 'on'

&lt;/denchmark-code&gt;

	</description>
	<comments>
	</comments>
</bug>