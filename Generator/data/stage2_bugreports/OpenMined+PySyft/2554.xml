<bug id='2554' author='edgarinvillegas' open_date='2019-08-26T00:05:38Z' closed_time='2020-07-06T00:08:37Z'>
	<summary>.federate() does not work with torchvision's ImageFolder dataset</summary>
	<description>
Describe the bug
When you try to federate a torchvision.datasets.ImageFolder, you get the custom exception AttributeError("Could not find inputs in dataset")
To Reproduce
Steps to reproduce the behavior:

Have the following file structure locally:

&lt;denchmark-code&gt;+-- dataset
|   +-- class1
|   |   +-- whatever1.jpg
|   |   +-- whatever2.jpg
&lt;/denchmark-code&gt;

Those jpgs can be any image of at least 256x256 size.

Run:

&lt;denchmark-code&gt;import torch
from torchvision import datasets, transforms
import syft as sy  

hook = sy.TorchHook(torch)  
bob = sy.VirtualWorker(hook, id="bob")  
alice = sy.VirtualWorker(hook, id="alice")

imagefolder_dataset = datasets.ImageFolder(root='./dataset/', transform = transforms.Compose([
        transforms.Resize(size=256),
        transforms.CenterCrop(size=224),
        transforms.ToTensor()
    ]))


fed_dataset = imagefolder_dataset.federate((bob, alice)) # Raises exception
&lt;/denchmark-code&gt;

Expected behavior
fed_dataset should be created without raising any exception
Actual behavior
An exception "Could not find inputs in dataset" is raised:
&lt;denchmark-code&gt;---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
&lt;ipython-input-2-21c009d642db&gt; in &lt;module&gt;
      7 
----&gt; 8 fed_dataset = imagefolder_dataset.federate((bob, alice))
      9 

c:\...\syft\frameworks\torch\federated\dataset.py in dataset_federate(dataset, workers)
    148             dataset.data = dataset.test_data
    149         else:
--&gt; 150             raise AttributeError("Could not find inputs in dataset")
    151     if not hasattr(dataset, "targets"):
    152         if hasattr(dataset, "train_labels"):

AttributeError: Could not find inputs in dataset
&lt;/denchmark-code&gt;

Desktop (please complete the following information):

OS: Windows 10

Additional context

torchvision: 0.3.0
pytorch: 1.1.0
pysyft: 0.1.22a1

Workaround
Before calling .federate() you can create the following dummy fields to prevent the exception:
imagefolder_dataset.data = imagefolder_dataset.targets = True
	</description>
	<comments>
		<comment id='1' author='edgarinvillegas' date='2019-08-26T00:49:41Z'>
		Created PR to fix this: &lt;denchmark-link:https://github.com/OpenMined/PySyft/pull/2555&gt;#2555&lt;/denchmark-link&gt;

There is harmful defensive code (that I removed) on dataset_federate function. It was checking for the data/train_data/test_data/targets/train_labels/test_labels fields in the dataset in a mandatory way. Which is not needed, and it's causing an exception that shouldn't exist.
What matters is that on each iteration of the dataset, it has to return a tuple in the form (data, target), which ImageFolder complies.
With the fix, ImageFolder and other datasets with the same problem now can be federated with .federate()
&lt;denchmark-link:https://github.com/iamtrask&gt;@iamtrask&lt;/denchmark-link&gt;
 can you please review?
		</comment>
		<comment id='2' author='edgarinvillegas' date='2019-11-14T08:30:44Z'>
		&lt;denchmark-link:https://github.com/edgarinvillegas&gt;@edgarinvillegas&lt;/denchmark-link&gt;
 are you still working on the PR?
		</comment>
		<comment id='3' author='edgarinvillegas' date='2020-01-19T12:29:37Z'>
		Hi,
Is this issue sorted because I'm facing the same on the PyPi version
Thanks
		</comment>
		<comment id='4' author='edgarinvillegas' date='2020-05-09T23:02:08Z'>
		Hello,
I have a class that inherits the Dataset class, but I can't apply the .federate() method on an instance of this class. Can someone explain why?
Thank you.
class UCI_HAR(Dataset):
def init(self, samples, labels):
self.samples = samples
self.labels = labels
&lt;denchmark-code&gt;def __getitem__(self, index):
    sample, target = self.samples[index], self.labels[index]
    return sample, target

def __len__(self):
    return len(self.samples)
&lt;/denchmark-code&gt;

		</comment>
		<comment id='5' author='edgarinvillegas' date='2020-05-29T07:57:40Z'>
		Hello &lt;denchmark-link:https://github.com/ChedidJM&gt;@ChedidJM&lt;/denchmark-link&gt;
 , thank you for reporting this bug,
Could you please provide:

full script to reproduce the bug.
stack tracke/logging if you have any.
OS and syft version.

Thank you!
		</comment>
		<comment id='6' author='edgarinvillegas' date='2020-06-29T00:07:20Z'>
		This issue has been marked stale because it has been open 30 days with no activity. Leave a comment or remove the stale label to unmark it. Otherwise, this will be closed in 7 days.
		</comment>
	</comments>
</bug>