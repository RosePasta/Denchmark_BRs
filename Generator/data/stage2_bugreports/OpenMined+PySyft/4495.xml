<bug id='4495' author='patselle' open_date='2020-08-28T08:57:33Z' closed_time='2020-11-19T13:30:13Z'>
	<summary>RuntimeError: a leaf Variable that requires grad is being used in an in-place operation.</summary>
	<description>
Hi PySyft-Team,
I have updated the PySyft version from v0.2.1.a1 to 0.2.4.
Now I get the following error message when I run my program on the client (here a WebsocketServerWorker is running):
&lt;denchmark-code&gt;Serving. Press CTRL-C to stop.
Task exception was never retrieved
future: &lt;Task finished coro=&lt;WebsocketServerWorker._producer_handler() done, defined at /home/jetson/PySyft/syft/workers/websocket_server.py:95&gt; exception=RuntimeError('a leaf Variable that requires grad is being used in an in-place operation.',)&gt;
Traceback (most recent call last):
  File "/home/jetson/PySyft/syft/workers/websocket_server.py", line 113, in _producer_handler
    response = self._recv_msg(message)
  File "/home/jetson/PySyft/syft/workers/websocket_server.py", line 124, in _recv_msg
    return self.recv_msg(message)
  File "/home/jetson/PySyft/syft/workers/base.py", line 320, in recv_msg
    response = self._message_router[type(msg)](msg)
  File "/home/jetson/PySyft/syft/workers/base.py", line 434, in execute_tensor_command
    return self.execute_computation_action(cmd.action)
  File "/home/jetson/PySyft/syft/workers/base.py", line 464, in execute_computation_action
    getattr(_self, op_name)(*args, **kwargs)
  File "/home/jetson/PySyft/syft/generic/frameworks/hook/trace.py", line 83, in trace_wrapper
    response = func(*args, **kwargs)
  File "/home/jetson/PySyft/syft/generic/frameworks/hook/hook.py", line 419, in overloaded_native_method
    raise route_method_exception(e, self, args, kwargs)
  File "/home/jetson/PySyft/syft/generic/frameworks/hook/hook.py", line 415, in overloaded_native_method
    response = method(*args, **kwargs)
RuntimeError: a leaf Variable that requires grad is being used in an in-place operation.
&lt;/denchmark-code&gt;

This is done by executing the following command on the server (has the client mounted as WebsocketClientWorker):
optimizer.step()
The data is loaded to the client (on the client before the websocket server is started) as follows:
&lt;denchmark-code&gt;remote_worker = WebsocketServerWorker(...)
...
data = data.to(DEVICE) 
target = target.to(DEVICE)

data_ptr = th.tensor(data, requires_grad=True).tag(TRAIN_DATA_TAG).send(remote_worker)  
target_ptr = th.tensor(target, requires_grad=False).tag(TRAIN_TARGET_TAG).send(remote_worker)

remote_worker.start()
&lt;/denchmark-code&gt;

Does anyone have an idea?
Many thanks in advance
	</description>
	<comments>
		<comment id='1' author='patselle' date='2020-11-13T00:17:13Z'>
		This issue has been marked stale because it has been open 30 days with no activity. Leave a comment or remove the stale label to unmark it. Otherwise, this will be closed in 7 days.
		</comment>
		<comment id='2' author='patselle' date='2020-11-19T13:30:13Z'>
		Hello! Just letting you know that we are no longer planning on supporting anything on the 0.2.x product line and that all work should be ported over to 0.3.x, which is considered a complete rebuild of PySyft. Because of that, I'll be closing this issue. If you feel this is a mistake, or if the issue actually applies to 0.3.x as well, please feel free to ping me on Slack and I'll reopen the issue.
		</comment>
	</comments>
</bug>