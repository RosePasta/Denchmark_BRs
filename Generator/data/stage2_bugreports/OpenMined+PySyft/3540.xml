<bug id='3540' author='kennysong' open_date='2020-05-18T04:07:20Z' closed_time='2020-06-28T00:07:15Z'>
	<summary>Error when testing equality of AdditiveSharingTensors (without a crypto_provider?)</summary>
	<description>
When I try to test equality of two AdditiveSharingTensors (x == y), it fails with a ObjectNotFoundError error.
Here's a basic code sample to reproduce:
import syft as sy
import torch as th
hook = sy.TorchHook(th)

bob = sy.VirtualWorker(hook, id="bob")
alice = sy.VirtualWorker(hook, id="alice")

x = th.tensor([1,2,3,4])
y = th.tensor([2,-1,1,0])
x = x.share(bob, alice)
y = y.share(bob, alice)

z = x == y
z.get()
This fails on the == line with:
&lt;denchmark-code&gt;ObjectNotFoundError: Object "7070927336" not found on worker!!! You just tried to interact with an object ID:7070927336 on &lt;VirtualWorker id:me #objects:0&gt; which does not exist!!! Use .send() and .get() on all your tensors to make sure they're on the same machines. If you think this tensor does exist, check the ._objects dictionary on the worker and see for yourself!!! The most common reason this error happens is because someone calls .get() on the object's pointer without realizing it (which deletes the remote object and sends it to the pointer). Check your code to make sure you haven't already called .get() on this pointer!!!
&lt;/denchmark-code&gt;

However, this seems to work if I add a separate worker as the crypto_provider. For example, if you replace the two lines with .share() above with:
secure_worker = sy.VirtualWorker(hook, id="secure_worker")
x = x.share(bob, alice, crypto_provider=secure_worker)
y = y.share(bob, alice, crypto_provider=secure_worker)
^This works. Is this a bug? Or intended behavior (where is it documented)?
	</description>
	<comments>
		<comment id='1' author='kennysong' date='2020-05-18T05:16:03Z'>
		Same problem for multiplication!
import syft as sy
import torch as th
hook = sy.TorchHook(th)

bob = sy.VirtualWorker(hook, id="bob")
alice = sy.VirtualWorker(hook, id="alice")

x = th.tensor([1,2,3,4])
y = th.tensor([2,-1,1,0])
x = x.share(bob, alice)
y = y.share(bob, alice)

z = x * y  # &lt;-- ObjectNotFoundError
z.get()
Only addition (x + y) works without specifying a crypto_provider.
		</comment>
		<comment id='2' author='kennysong' date='2020-05-18T12:29:08Z'>
		
Same problem for multiplication!
import syft as sy
import torch as th
hook = sy.TorchHook(th)

bob = sy.VirtualWorker(hook, id="bob")
alice = sy.VirtualWorker(hook, id="alice")

x = th.tensor([1,2,3,4])
y = th.tensor([2,-1,1,0])
x = x.share(bob, alice)
y = y.share(bob, alice)

z = x * y  # &lt;-- ObjectNotFoundError
z.get()
Only addition (x + y) works without specifying a crypto_provider.

Hey, so AST uses secure multiparty communication (SMPC) to perform the operations like multiplication, division. It uses crypto provider to generate the triplets which are necessary to perform this operations. So crypto provider is kind of necessary ðŸ™‚
		</comment>
		<comment id='3' author='kennysong' date='2020-05-18T12:38:02Z'>
		It seems like  is overly permissive then. Until recently (when &lt;denchmark-link:https://github.com/Prtfw&gt;@Prtfw&lt;/denchmark-link&gt;
 added an exception),  could be called with no arguments. Something similar should probably happen here: a required argument that's missing should immediately raise an exception rather than allowing incorrect behavior.
		</comment>
		<comment id='4' author='kennysong' date='2020-05-18T12:59:07Z'>
		Thanks &lt;denchmark-link:https://github.com/sukhadj&gt;@sukhadj&lt;/denchmark-link&gt;
, I figured it was something like that. A few beginner questions:

What is AST?
Why does x + y work without a crypto provider and not x * y?
Can I read more about this in the documentation somewhere?
If crypto_provider is not always required for .share(), as an alternative to @karlhigley's suggestion, can the error message be more specific? e.g. crypto_provider required for * operation on AdditiveSharingTensors rather than an ObjectNotFoundError.

		</comment>
		<comment id='5' author='kennysong' date='2020-05-18T13:13:49Z'>
		I also had this equality issue, even with a crypto provider, only when requires_grad = False
		</comment>
		<comment id='6' author='kennysong' date='2020-05-18T13:24:30Z'>
		
Thanks @sukhadj, I figured it was something like that. A few beginner questions:
1. What is AST?


AdditiveSharingTensor

2. Why does `x + y` work without a crypto provider and not `x * y`?


So addition is just basically adding alice's share of x with alice's share of y and then module it. You can see implementation of addition &lt;denchmark-link:https://github.com/OpenMined/PySyft/blob/6b55ba01e411537e5c43f44235d24c33bdbaadf0/syft/frameworks/torch/tensors/interpreters/additive_shared.py#L413&gt;here&lt;/denchmark-link&gt;
.

3. Can I read more about this in the documentation somewhere?


PySyft currently don't have extensive documentation right now. But you can find more about SPDZ and triplets &lt;denchmark-link:https://mortendahl.github.io/2017/09/03/the-spdz-protocol-part1/&gt;here&lt;/denchmark-link&gt;
 (Not an expert of the subject so maybe others can suggest better resources maybe  )

4. If `crypto_provider` is not always required for `.share()`, as an alternative to @karlhigley's suggestion, can the error message be more specific? e.g. `crypto_provider required for * operation on AdditiveSharingTensors` rather than an `ObjectNotFoundError`.


That's correct we should definitely raise a warning during the sharing and exception when multiplying rather than object not found error.
		</comment>
		<comment id='7' author='kennysong' date='2020-05-18T13:41:41Z'>
		
I also had this equality issue, even with a crypto provider, only when requires_grad = False
Can you try again with pulling the master?
It works now when provided with crypto provider. Maybe changed in @LaRiffle's  FSS PR.

		</comment>
		<comment id='8' author='kennysong' date='2020-05-19T09:34:26Z'>
		Does == work if you set requires_grad = False in the share method?
		</comment>
		<comment id='9' author='kennysong' date='2020-05-21T13:47:05Z'>
		Will be solved by &lt;denchmark-link:https://github.com/OpenMined/PySyft/pull/3578&gt;#3578&lt;/denchmark-link&gt;

		</comment>
		<comment id='10' author='kennysong' date='2020-06-21T00:06:56Z'>
		This issue has been marked stale because it has been open 30 days with no activity. Leave a comment or remove the stale label to unmark it. Otherwise, this will be closed in 7 days.
		</comment>
	</comments>
</bug>