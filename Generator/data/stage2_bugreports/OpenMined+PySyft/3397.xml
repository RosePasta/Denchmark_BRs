<bug id='3397' author='AlanAboudib' open_date='2020-04-23T17:15:55Z' closed_time='2020-04-28T15:09:39Z'>
	<summary>Memory leak in F.relu() method in AST</summary>
	<description>
This code, causes a memory leak only on the first worker in the worker list passed to the encrypt(). In this example it is  'alice', the second worker 'bob' does not suffer from any leaks.
The reason is the F.relu() method:
&lt;denchmark-code&gt;import torch as th
import torch.optim as optim
import pprint
import syft as sy
import torch.nn.functional as F

hook = sy.TorchHook(th) #, verbose=True)
bob = sy.VirtualWorker(hook, id="bob") #, verbose=True)
alice = sy.VirtualWorker(hook, id="alice") #, verbose=True)
crypto_provider = sy.VirtualWorker(hook, id="james") #, verbose=True)



a = th.ones(1, 5)
a = a.encrypt(workers=[alice, bob], crypto_provider=crypto_provider, requires_grad=True)


class Classifier(th.nn.Module):
    def __init__(self, in_features, out_features):
        super(Classifier, self).__init__()
        self.fc = th.nn.Linear(in_features, out_features)

    def forward(self, x):
        logits = self.fc(x)
        logits = F.relu(logits)
        return logits


classifier = Classifier(in_features=5, out_features=5)
model = classifier.fix_prec().share(alice, bob, crypto_provider=crypto_provider, requires_grad=True)

for i in range(3):
    print("=" * 10 + f"Iter{i + 1}" + "=" * 10)
    print(f"Alice: {len(alice._objects)}")
    print(f"Bob: {len(bob._objects)}")

    preds = classifier(a)


    print(f"Alice: {len(alice._objects)}")
    print(f"Bob: {len(bob._objects)}")

print("~" * 10 + "Done" + "~" * 10)
&lt;/denchmark-code&gt;

Here is the output (Only Alice leaks)
&lt;denchmark-code&gt;==========Iter1==========
Alice: 3
Bob: 3
Alice: 11
Bob: 7
==========Iter2==========
Alice: 11
Bob: 7
Alice: 15
Bob: 7
==========Iter3==========
Alice: 15
Bob: 7
Alice: 19
Bob: 7
~~~~~~~~~~Done~~~~~~~~~~

&lt;/denchmark-code&gt;

If you comment out logits = F.relu(logits), no memory leaks are observed:
&lt;denchmark-code&gt;==========Iter1==========
Alice: 3
Bob: 3
Alice: 3
Bob: 3
==========Iter2==========
Alice: 3
Bob: 3
Alice: 3
Bob: 3
==========Iter3==========
Alice: 3
Bob: 3
Alice: 3
Bob: 3
~~~~~~~~~~Done~~~~~~~~~~

&lt;/denchmark-code&gt;

	</description>
	<comments>
	</comments>
</bug>