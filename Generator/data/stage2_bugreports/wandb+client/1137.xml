<bug id='1137' author='EricCousineau-TRI' open_date='2020-07-03T23:40:22Z' closed_time='2020-07-07T21:41:23Z'>
	<summary>`wandb.init` does not play well under `bazel test`</summary>
	<description>

Weights and Biases version: wandb, version 0.9.1
Python version: Python 3.6.9
Operating System: Linux

&lt;denchmark-h:h3&gt;Description&lt;/denchmark-h&gt;

Just trying to put our usages of wandb.init under bazel test.
However, when we do that, we get the following:
&lt;denchmark-code&gt;Traceback (most recent call last):
  File "{runfiles}/wandb_examples/
test/wandb_stub_test.py", line 48, in test_wandb
    wandb.init(project="test_project", sync_tensorboard=True)
  File "{execroot}/wandb_examples/venv/lib/python3.6/site-packages/wandb/__init__.py", line 1129, in init
    _init_headless(run, False)
  File "{execroot}/wandb_examples/venv/lib/python3.6/site-packages/wandb/__init__.py", line 259, in _init_headless
    stdout_master_fd, stdout_slave_fd = io_wrap.wandb_pty(resize=False)
  File "{execroot}/wandb_examples/venv/lib/python3.6/site-packages/wandb/io_wrap.py", line 157, in wandb_pty
    master_fd, slave_fd = pty.openpty()
  File "/usr/lib/python3.6/pty.py", line 29, in openpty
    master_fd, slave_name = _open_terminal()
  File "/usr/lib/python3.6/pty.py", line 59, in _open_terminal
    raise OSError('out of pty devices')
OSError: out of pty devices
&lt;/denchmark-code&gt;

&lt;denchmark-h:h3&gt;What I Did&lt;/denchmark-h&gt;

See this  section:
&lt;denchmark-link:https://github.com/EricCousineau-TRI/repro/tree/3cc6aa5ba70e306b3b1a1660f3f59c07b1eca12d/python/wandb_examples#wandb-and-bazel-test&gt;https://github.com/EricCousineau-TRI/repro/tree/3cc6aa5ba70e306b3b1a1660f3f59c07b1eca12d/python/wandb_examples#wandb-and-bazel-test&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='EricCousineau-TRI' date='2020-07-03T23:40:24Z'>
		Issue-Label Bot is automatically applying the label bug to this issue, with a confidence of 0.94. Please mark this comment with üëç or üëé to give our bot feedback!
Links: &lt;denchmark-link:https://github.com/marketplace/issue-label-bot&gt;app homepage&lt;/denchmark-link&gt;
, &lt;denchmark-link:https://mlbot.net/data/wandb/client&gt;dashboard&lt;/denchmark-link&gt;
 and &lt;denchmark-link:https://github.com/hamelsmu/MLapp&gt;code&lt;/denchmark-link&gt;
 for this bot.
		</comment>
		<comment id='2' author='EricCousineau-TRI' date='2020-07-06T16:17:49Z'>
		&lt;denchmark-link:https://github.com/EricCousineau-TRI&gt;@EricCousineau-TRI&lt;/denchmark-link&gt;
 it looks like the bazel build is calling  many times, so many times that it's consuming all pty devices.  Do you know how many calls to  end up happening when you run bazel build?
		</comment>
		<comment id='3' author='EricCousineau-TRI' date='2020-07-06T18:21:37Z'>
		Ah, sorry - this code is only meant to test one call to ; the  statement is to show the case where it fails (no mocking of ), but should only be called once per process:
&lt;denchmark-link:https://github.com/EricCousineau-TRI/repro/blob/3cc6aa5ba70e306b3b1a1660f3f59c07b1eca12d/python/wandb_examples/test/wandb_stub_test.py#L56-L57&gt;https://github.com/EricCousineau-TRI/repro/blob/3cc6aa5ba70e306b3b1a1660f3f59c07b1eca12d/python/wandb_examples/test/wandb_stub_test.py#L56-L57&lt;/denchmark-link&gt;

In the section here,  should only be called once per  invocation:
&lt;denchmark-link:https://github.com/EricCousineau-TRI/repro/tree/3cc6aa5ba70e306b3b1a1660f3f59c07b1eca12d/python/wandb_examples#wandb-and-bazel-test&gt;https://github.com/EricCousineau-TRI/repro/tree/3cc6aa5ba70e306b3b1a1660f3f59c07b1eca12d/python/wandb_examples#wandb-and-bazel-test&lt;/denchmark-link&gt;

# Show it working
bazel test --config=show_test :wandb_stub_test

# Show it failing
bazel test --config=show_test --test_arg="--show_error" :wandb_stub_test
Does that clarify? I can rewrite it to be simpler if you'd like!
		</comment>
		<comment id='4' author='EricCousineau-TRI' date='2020-07-06T18:28:34Z'>
		I've added this commit which concretely shows that  is only called once per run of :
&lt;denchmark-link:https://github.com/EricCousineau-TRI/repro/commit/de29bf3845c6372fcb374ef0e1023f8b7e96d14f&gt;EricCousineau-TRI/repro@de29bf3&lt;/denchmark-link&gt;

Each time, it prints out Num calls: 1.
I think the issue has to do with how bazel test redirects I/O (for logging) and wandbs expectations of having a pty?
		</comment>
		<comment id='5' author='EricCousineau-TRI' date='2020-07-07T13:14:29Z'>
		To fix pty issue under bazel, you can use --spawn_strategy=processwrapper-sandbox flag
		</comment>
		<comment id='6' author='EricCousineau-TRI' date='2020-07-07T15:13:56Z'>
		&lt;denchmark-link:https://github.com/yoks&gt;@yoks&lt;/denchmark-link&gt;
 thanks for the trick!  &lt;denchmark-link:https://github.com/EricCousineau-TRI&gt;@EricCousineau-TRI&lt;/denchmark-link&gt;
 does this work for you?
		</comment>
		<comment id='7' author='EricCousineau-TRI' date='2020-07-15T23:47:51Z'>
		Thanks!
However, I'm not sure how I feel about this as a workaround that I want to either infect other tests with, or add specific filtering logic for.
When I search for , I don't really get any public documentation about it, so I don't know how this stacks against the default spawn strategy of :
&lt;denchmark-link:https://docs.bazel.build/versions/master/user-manual.html#strategy-options&gt;https://docs.bazel.build/versions/master/user-manual.html#strategy-options&lt;/denchmark-link&gt;

&lt;denchmark-link:https://bazel.build/search.html?q=%22processwrapper-sandbox%22&gt;https://bazel.build/search.html?q="processwrapper-sandbox"&lt;/denchmark-link&gt;

&lt;denchmark-link:https://bazel.build/search.html?q=%22processwrapper%22&gt;https://bazel.build/search.html?q="processwrapper"&lt;/denchmark-link&gt;

Ideally, wandb has a way to not require ptys for a dryrun mode? Or if it's for a feature, disable that feature, but still allow us to test codepaths for wandb?
		</comment>
		<comment id='8' author='EricCousineau-TRI' date='2020-07-16T00:00:08Z'>
		We're targeting a big release of our library for next week.  It will include a "noop" mode which will do exactly what you want here.
		</comment>
		<comment id='9' author='EricCousineau-TRI' date='2020-07-16T00:05:04Z'>
		Sweet, thank you!
		</comment>
	</comments>
</bug>