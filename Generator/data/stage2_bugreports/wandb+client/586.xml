<bug id='586' author='nacef-labidi' open_date='2019-09-30T22:39:02Z' closed_time='2020-06-10T23:06:00Z'>
	<summary>Ray integration yaml serialization error</summary>
	<description>
wandb --version &amp;&amp; python --version &amp;&amp; uname

Weights and Biases version: 0.8.12
Python version: 3.7.3
Operating System: Linux

&lt;denchmark-h:h3&gt;Description&lt;/denchmark-h&gt;

Tried to use the wandb Ray tune integration. Training fails when serializing config with following error:
yaml.representer.RepresenterError: cannot represent an object: &lt;function main.. at 0x7fd0fc4bfbf8&gt;
&lt;denchmark-h:h3&gt;What I Did&lt;/denchmark-h&gt;



Started from simple cartpole example provided by Ray: https://raw.githubusercontent.com/ray-project/ray/master/rllib/examples/multiagent_cartpole.py


Imported wandb
from wandb.ray import WandbLogger


Included wandb configuration and set it as logger


&lt;denchmark-code&gt;    tune.run(
        "PPO",
        stop={"training_iteration": args.num_iters},
        config={
            "env": "multi_cartpole",
            "monitor": True,
            "env_config": {
                "wandb": {"project": "rl", "monitor_gym": True}
            },
            "log_level": "DEBUG",
            "simple_optimizer": args.simple,
            "num_sgd_traceiter": 10,
            "multiagent": {
                "policies": policies,
                "policy_mapping_fn": (
                    lambda agent_id: random.choice(policy_ids)),
            },
        },
        loggers=[WandbLogger],
    )
&lt;/denchmark-code&gt;


Fails with following stacktrace:

&lt;denchmark-code&gt;2019-09-30 17:45:01,241	ERROR trial_runner.py:560 -- Error processing event.
Traceback (most recent call last):
  File "/home/nacef/tools/anaconda3/envs/rl/lib/python3.7/site-packages/ray/tune/trial_runner.py", line 540, in _process_trial
    result, terminate=(decision == TrialScheduler.STOP))
  File "/home/nacef/tools/anaconda3/envs/rl/lib/python3.7/site-packages/ray/tune/trial.py", line 386, in update_last_result
    self.result_logger.on_result(self.last_result)
  File "/home/nacef/tools/anaconda3/envs/rl/lib/python3.7/site-packages/ray/tune/logger.py", line 333, in on_result
    _logger.on_result(result)
  File "/home/nacef/tools/anaconda3/envs/rl/lib/python3.7/site-packages/wandb/ray/__init__.py", line 24, in on_result
    wandb.config[k] = config[k]
  File "/home/nacef/tools/anaconda3/envs/rl/lib/python3.7/site-packages/wandb/wandb_config.py", line 184, in __setitem__
    self.persist()
  File "/home/nacef/tools/anaconda3/envs/rl/lib/python3.7/site-packages/wandb/wandb_config.py", line 171, in persist
    conf_file.write(str(self))
  File "/home/nacef/tools/anaconda3/envs/rl/lib/python3.7/site-packages/wandb/wandb_config.py", line 274, in __str__
    allow_unicode=True, encoding='utf-8')
  File "/home/nacef/tools/anaconda3/envs/rl/lib/python3.7/site-packages/yaml/__init__.py", line 200, in dump
    return dump_all([data], stream, Dumper=Dumper, **kwds)
  File "/home/nacef/tools/anaconda3/envs/rl/lib/python3.7/site-packages/yaml/__init__.py", line 188, in dump_all
    dumper.represent(data)
  File "/home/nacef/tools/anaconda3/envs/rl/lib/python3.7/site-packages/yaml/representer.py", line 26, in represent
    node = self.represent_data(data)
  File "/home/nacef/tools/anaconda3/envs/rl/lib/python3.7/site-packages/yaml/representer.py", line 47, in represent_data
    node = self.yaml_representers[data_types[0]](self, data)
  File "/home/nacef/tools/anaconda3/envs/rl/lib/python3.7/site-packages/yaml/representer.py", line 205, in represent_dict
    return self.represent_mapping('tag:yaml.o
wandb: Waiting for W&amp;B process to finish, PID 20314
rg,2002:map', data)
  File "/home/nacef/tools/anaconda3/envs/rl/lib/python3.7/site-packages/yaml/representer.py", line 116, in represent_mapping
    node_value = self.represent_data(item_value)
  File "/home/nacef/tools/anaconda3/envs/rl/lib/python3.7/site-packages/yaml/representer.py", line 47, in represent_data
    node = self.yaml_representers[data_types[0]](self, data)
  File "/home/nacef/tools/anaconda3/envs/rl/lib/python3.7/site-packages/yaml/representer.py", line 205, in represent_dict
    return self.represent_mapping('tag:yaml.org,2002:map', data)
  File "/home/nacef/tools/anaconda3/envs/rl/lib/python3.7/site-packages/yaml/representer.py", line 116, in represent_mapping
    node_value = self.represent_data(item_value)
  File "/home/nacef/tools/anaconda3/envs/rl/lib/python3.7/site-packages/yaml/representer.py", line 47, in represent_data
    node = self.yaml_representers[data_types[0]](self, data)
  File "/home/nacef/tools/anaconda3/envs/rl/lib/python3.7/site-packages/yaml/representer.py", line 205, in represent_dict
    return self.represent_mapping('tag:yaml.org,2002:map', data)
  File "/home/nacef/tools/anaconda3/envs/rl/lib/python3.7/site-packages/yaml/representer.py", line 116, in represent_mapping
    node_value = self.represent_data(item_value)
  File "/home/nacef/tools/anaconda3/envs/rl/lib/python3.7/site-packages/yaml/representer.py", line 57, in represent_data
    node = self.yaml_representers[None](self, data)
  File "/home/nacef/tools/anaconda3/envs/rl/lib/python3.7/site-packages/yaml/representer.py", line 229, in represent_undefined
    raise RepresenterError("cannot represent an object: %s" % data)
yaml.representer.RepresenterError: cannot represent an object: &lt;function main.&lt;locals&gt;.&lt;lambda&gt; at 0x7fd0fc4bfbf8&gt;
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='nacef-labidi' date='2019-09-30T22:39:04Z'>
		Issue-Label Bot is automatically applying the label bug to this issue, with a confidence of 0.93. Please mark this comment with üëç or üëé to give our bot feedback!
Links: &lt;denchmark-link:https://github.com/marketplace/issue-label-bot&gt;app homepage&lt;/denchmark-link&gt;
, &lt;denchmark-link:https://mlbot.net/data/wandb/client&gt;dashboard&lt;/denchmark-link&gt;
 and &lt;denchmark-link:https://github.com/hamelsmu/MLapp&gt;code&lt;/denchmark-link&gt;
 for this bot.
		</comment>
		<comment id='2' author='nacef-labidi' date='2019-10-03T20:08:06Z'>
		Thanks for letting me know about this! I'll go over this issue in our weekly meeting.
		</comment>
		<comment id='3' author='nacef-labidi' date='2020-02-06T16:24:31Z'>
		Any update on this? I'm facing similar issues.
		</comment>
		<comment id='4' author='nacef-labidi' date='2020-03-17T10:45:40Z'>
		Having the same bug just now - this is specific to multi agent training in rllib only.
The issue here is that the config contains a python lambda function. Your parser should probably just skip it.
The relevant part is:
&lt;denchmark-code&gt; "policy_mapping_fn": (
                    lambda agent_id: random.choice(policy_ids)),
            },
&lt;/denchmark-code&gt;

See the docs here:
&lt;denchmark-link:https://ray.readthedocs.io/en/latest/rllib-env.html#multi-agent-and-hierarchical&gt;https://ray.readthedocs.io/en/latest/rllib-env.html#multi-agent-and-hierarchical&lt;/denchmark-link&gt;

and search for policy_mapping_fn.
The OP provided a link to fully standalone example - you just need to add wandb instrumentation to it:
&lt;denchmark-link:https://github.com/ray-project/ray/blob/master/rllib/examples/multi_agent_cartpole.py&gt;https://github.com/ray-project/ray/blob/master/rllib/examples/multi_agent_cartpole.py&lt;/denchmark-link&gt;

		</comment>
		<comment id='5' author='nacef-labidi' date='2020-03-17T10:54:35Z'>
		FYI: This should be fixed in next version of  PyYAML 5.1.
&lt;denchmark-link:https://github.com/yaml/pyyaml/issues/222&gt;yaml/pyyaml#222&lt;/denchmark-link&gt;

You guys are using an old version &lt;denchmark-link:https://github.com/wandb/client/blob/f6d4938bfc67be6b721596048452f4985eb2bea0/requirements_dev.txt#L10&gt;PyYAML==4.2b4&lt;/denchmark-link&gt;
. Seems like they have released PyYAML 5.3:
&lt;denchmark-link:https://pypi.org/project/PyYAML/5.3/&gt;https://pypi.org/project/PyYAML/5.3/&lt;/denchmark-link&gt;

But there were some issues with 5.1 being backward compatible. So yeah...
		</comment>
		<comment id='6' author='nacef-labidi' date='2020-03-31T05:21:58Z'>
		This is kind of required to log from rllib for more advanced scenarios...
		</comment>
		<comment id='7' author='nacef-labidi' date='2020-05-20T13:45:38Z'>
		I have another one similar sounding error.
wandb, version 0.8.36
Python 3.6.9 :: Anaconda, Inc.
Linux
initializing like this, inside a KFold loop:
...
wandb.init(
        project=rootname.replace('/', '-').lower(),
        name='run_{}_fr{}_ufr{}_{}of{}_fr'.format(
            exp_uuid, froze_cycles, unfroze_cycles, run_i, n_splits
        ),
        config=config,
        group='fr_'+exp_uuid,
        save_code=True,
        tags=[
            'parent_{}'.format(run),
            'sklearn.model_selection.StratifiedKFold',
            str(mod).split(' ')[1]
        ],
        job_type='eval'
    )
...
getting
---------------------------------------------------------------------------
RepresenterError                          Traceback (most recent call last)
&lt;ipython-input-37-80069da565fb&gt; in &lt;module&gt;
     70             str(mod).split(' ')[1]
     71         ],
---&gt; 72         job_type='eval'
     73     )
     74     learn.fit_one_cycle(froze_cycles)

/opt/conda/lib/python3.6/site-packages/wandb/__init__.py in init(job_type, dir, config, project, entity, reinit, tags, group, allow_val_change, resume, force, tensorboard, sync_tensorboard, monitor_gym, name, notes, id, magic, anonymous, config_exclude_keys, config_include_keys, save_code)
   1142                 include_keys=config_include_keys,
   1143                 allow_val_change=allow_val_change,
-&gt; 1144                 as_defaults=not allow_val_change)
   1145 
   1146     # Access history to ensure resumed is set when resuming

/opt/conda/lib/python3.6/site-packages/wandb/wandb_config.py in _update(self, params, allow_val_change, as_defaults, exclude_keys, include_keys)
    309                 continue
    310             self._items[key] = val
--&gt; 311         self.persist()
    312 
    313     def update(self, params, allow_val_change=False, exclude_keys=None, include_keys=None):

/opt/conda/lib/python3.6/site-packages/wandb/wandb_config.py in persist(self)
    214             return
    215         with open(path, "w") as conf_file:
--&gt; 216             conf_file.write(str(self))
    217         if wandb.run and wandb.run._jupyter_agent:
    218             wandb.run._jupyter_agent.start()

/opt/conda/lib/python3.6/site-packages/wandb/wandb_config.py in __str__(self)
    350         if as_dict:  # adding an empty dictionary here causes a parse error
    351             s += b'\n\n' + yaml.dump(as_dict, Dumper=yaml.SafeDumper, default_flow_style=False,
--&gt; 352                                      allow_unicode=True, encoding='utf-8')
    353         return s.decode("utf-8")
    354 

/opt/conda/lib/python3.6/site-packages/yaml/__init__.py in dump(data, stream, Dumper, **kwds)
    288     If stream is None, return the produced string instead.
    289     """
--&gt; 290     return dump_all([data], stream, Dumper=Dumper, **kwds)
    291 
    292 def safe_dump_all(documents, stream=None, **kwds):

/opt/conda/lib/python3.6/site-packages/yaml/__init__.py in dump_all(documents, stream, Dumper, default_style, default_flow_style, canonical, indent, width, allow_unicode, line_break, encoding, explicit_start, explicit_end, version, tags, sort_keys)
    276         dumper.open()
    277         for data in documents:
--&gt; 278             dumper.represent(data)
    279         dumper.close()
    280     finally:

/opt/conda/lib/python3.6/site-packages/yaml/representer.py in represent(self, data)
     25 
     26     def represent(self, data):
---&gt; 27         node = self.represent_data(data)
     28         self.serialize(node)
     29         self.represented_objects = {}

/opt/conda/lib/python3.6/site-packages/yaml/representer.py in represent_data(self, data)
     46         data_types = type(data).__mro__
     47         if data_types[0] in self.yaml_representers:
---&gt; 48             node = self.yaml_representers[data_types[0]](self, data)
     49         else:
     50             for data_type in data_types:

/opt/conda/lib/python3.6/site-packages/yaml/representer.py in represent_dict(self, data)
    205 
    206     def represent_dict(self, data):
--&gt; 207         return self.represent_mapping('tag:yaml.org,2002:map', data)
    208 
    209     def represent_set(self, data):

/opt/conda/lib/python3.6/site-packages/yaml/representer.py in represent_mapping(self, tag, mapping, flow_style)
    116         for item_key, item_value in mapping:
    117             node_key = self.represent_data(item_key)
--&gt; 118             node_value = self.represent_data(item_value)
    119             if not (isinstance(node_key, ScalarNode) and not node_key.style):
    120                 best_style = False

/opt/conda/lib/python3.6/site-packages/yaml/representer.py in represent_data(self, data)
     46         data_types = type(data).__mro__
     47         if data_types[0] in self.yaml_representers:
---&gt; 48             node = self.yaml_representers[data_types[0]](self, data)
     49         else:
     50             for data_type in data_types:

/opt/conda/lib/python3.6/site-packages/yaml/representer.py in represent_dict(self, data)
    205 
    206     def represent_dict(self, data):
--&gt; 207         return self.represent_mapping('tag:yaml.org,2002:map', data)
    208 
    209     def represent_set(self, data):

/opt/conda/lib/python3.6/site-packages/yaml/representer.py in represent_mapping(self, tag, mapping, flow_style)
    116         for item_key, item_value in mapping:
    117             node_key = self.represent_data(item_key)
--&gt; 118             node_value = self.represent_data(item_value)
    119             if not (isinstance(node_key, ScalarNode) and not node_key.style):
    120                 best_style = False

/opt/conda/lib/python3.6/site-packages/yaml/representer.py in represent_data(self, data)
     56                     node = self.yaml_multi_representers[None](self, data)
     57                 elif None in self.yaml_representers:
---&gt; 58                     node = self.yaml_representers[None](self, data)
     59                 else:
     60                     node = ScalarNode(None, str(data))

/opt/conda/lib/python3.6/site-packages/yaml/representer.py in represent_undefined(self, data)
    229 
    230     def represent_undefined(self, data):
--&gt; 231         raise RepresenterError("cannot represent an object", data)
    232 
    233 SafeRepresenter.add_representer(type(None),

RepresenterError: ('cannot represent an object', &lt;function resnet50 at 0x7f6c5b49aa60&gt;)
YAML:
import yaml
yaml.__version__
# &gt;&gt; '5.3'
		</comment>
		<comment id='8' author='nacef-labidi' date='2020-05-20T14:47:12Z'>
		I figured out the problem for me was that I was trying to add the model to the wandb.config attribute.
config = {
    'exp_id': exp_uuid,
    'input_size': 224,
    'n_splits': n_splits,
    'exp_method': StratifiedKFold,
    'parent_run': run,
    'model': models.resnet50}
So I converted it to a string from the function name and it worked.
config = {
    'exp_id': exp_uuid,
    'input_size': 224,
    'n_splits': n_splits,
    'exp_method': StratifiedKFold,
    'parent_run': run,
    'model': str(models.resnet50).split(' ')[1]}
		</comment>
		<comment id='9' author='nacef-labidi' date='2020-06-21T14:17:06Z'>
		I ran across this issue myself when trying to run ray with wandb. The yaml SafeDumper can't dump the callbacks object and Dumper tries to reconstruct the object, but fails.
My solution is a little tacky but it works. I edited wandb/wandb_config.py, specifically the __str__() function under the Config class. It looks like this:
&lt;denchmark-code&gt;def __str__(self):                                                                                                                                                                                                                    
    s = b"wandb_version: 1"                                                                                                                                                                                                           
    as_dict = self.as_dict()                                                                                                                                                                                                          
    if "callbacks" in as_dict:                                                                                                                                                                                                        
        as_dict['callbacks']['value'] = 'CustomCallbacks'                                                                                                                                                                             
    if as_dict:  # adding an empty dictionary here causes a parse error                                                                                                                                                               
        s += b'\n\n' + yaml.dump(as_dict, Dumper=yaml.SafeDumper, default_flow_style=False, allow_unicode=True, encoding='utf-8')                                                                                                                                                                
    return s.decode("utf-8")
&lt;/denchmark-code&gt;

Basically, I found the callbacks object and replaced its value with a string. The reason I didn't just replace the object with a string early on in my main code is because I need the object. Only wandb struggles with its representation.
If anyone has a better way or any guidance on how to do this properly, and more generally, please let me know. I'd be happy to contribute to this repo if I can.
		</comment>
		<comment id='10' author='nacef-labidi' date='2020-06-21T14:34:52Z'>
		Actually found a better way:
&lt;denchmark-code&gt;def __str__(self):                                                                                                                                                                                                                    
    s = b"wandb_version: 1"                                                                                                                                                                                                           
    as_dict = self.as_dict()                                                                                                                                                                                                          
    for k, v in as_dict.items():
        if inspect.isclass(v['value']):
            as_dict[k]['value'] = str(v['value'])                                                                                                                                                                          
    if as_dict:  # adding an empty dictionary here causes a parse error                                                                                                                                                               
        s += b'\n\n' + yaml.dump(as_dict, Dumper=yaml.SafeDumper, default_flow_style=False, allow_unicode=True, encoding='utf-8')                                                                                                                                                                
    return s.decode("utf-8")
&lt;/denchmark-code&gt;

This looks through the dictionary of config objects we wish to upload to wandb. If an object is a class instance, I replace the value with a string of the instance.
		</comment>
		<comment id='11' author='nacef-labidi' date='2020-06-21T14:49:25Z'>
		Found related &lt;denchmark-link:https://github.com/wandb/client/commit/59fb9a5e500a29367fb2aa0766265a5453ccfdfa&gt;commit&lt;/denchmark-link&gt;
. It is 4 behind master though. So for anyone looking, until this is fully merged, my solution and the commit's solution should work.
		</comment>
	</comments>
</bug>