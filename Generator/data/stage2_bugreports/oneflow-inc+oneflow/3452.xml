<bug id='3452' author='jackalcooper' open_date='2020-08-09T02:44:14Z' closed_time='2020-10-20T21:45:54Z'>
	<summary>cycle in graph detected when run CPU-only test_where.test_where_grad_case_2</summary>
	<description>
To reproduce:

build with cmake flag -DBUILD_CUDA=OFF
add env variable

&lt;denchmark-code&gt;export ONEFLOW_TEST_CPU_ONLY=1
&lt;/denchmark-code&gt;


run test_where.test_where_grad_case_2 for 5 times or so

&lt;denchmark-code&gt;python3 oneflow/python/test/ops/1node_test.py test_where.test_where_grad_case_2
&lt;/denchmark-code&gt;

Error:
&lt;denchmark-code&gt;F0809 02:34:33.646538 17753 chain_graph.cpp:259] cycle in graph detected
*** Check failure stack trace: ***
    @     0x7f2fc4f001fc  google::LogMessage::Fail()
    @     0x7f2fc4f00158  google::LogMessage::SendToLog()
    @     0x7f2fc4effadc  google::LogMessage::Flush()
    @     0x7f2fc4f02b83  google::LogMessageFatal::~LogMessageFatal()
    @     0x7f2fc3d937c1  oneflow::ChainGraph::CheckNoCycle()
    @     0x7f2fc3d930b1  oneflow::ChainGraph::ChainGraph()
    @     0x7f2fc3ef969c  oneflow::TaskGraph::MergeChainAndSetOrderInGraphForEachNode()
    @     0x7f2fc3ef88e6  oneflow::TaskGraph::TaskGraph()
    @     0x7f2fc3f43e33  std::make_unique&lt;&gt;()
    @     0x7f2fc3f4256f  oneflow::Compiler::Compile()
    @     0x7f2fc4045f8a  oneflow::(anonymous namespace)::CompileCurJobOnMaster()
    @     0x7f2fc404e542  oneflow::(anonymous namespace)::CompileAndMergePlanOnMaster()
    @     0x7f2fc404f19a  oneflow::Oneflow::Init()
    @     0x7f2fc3b5cd80  oneflow::StartGlobalSession()
    @     0x7f2fc3b5fd1a  StartGlobalSession()
    @     0x7f2fc3b7023b  _wrap_StartGlobalSession
    @           0x50a8af  (unknown)
    @           0x50c5b9  _PyEval_EvalFrameDefault
    @           0x509d48  (unknown)
    @           0x50aa7d  (unknown)
    @           0x50c5b9  _PyEval_EvalFrameDefault
    @           0x509d48  (unknown)
    @           0x50aa7d  (unknown)
    @           0x50c5b9  _PyEval_EvalFrameDefault
    @           0x509d48  (unknown)
    @           0x50aa7d  (unknown)
    @           0x50c5b9  _PyEval_EvalFrameDefault
    @           0x508245  (unknown)

&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='3' author='jackalcooper' date='2020-08-09T03:09:10Z'>
		source code:
&lt;denchmark-link:https://github.com/Oneflow-Inc/oneflow/blob/176ec6e3bc013916f24e6a7cd794fdd3a47cb318/oneflow/python/test/ops/test_where.py&gt;https://github.com/Oneflow-Inc/oneflow/blob/176ec6e3bc013916f24e6a7cd794fdd3a47cb318/oneflow/python/test/ops/test_where.py&lt;/denchmark-link&gt;

		</comment>
		<comment id='4' author='jackalcooper' date='2020-08-10T01:09:14Z'>
		The "cycle task graph" you show is the total task graph in this job?
Why task node "... _19 keep header only " and " ..._18 keep header only" CAN merge into chain with node " BroadcastToCompatibleWith_20" ？
Chain merge condition is ：
Chain B can merge into Chain A，when the set of Chain A ancestors and itself  include the set of Chain B ancestors.
B ancestors ⊆ (A ancestors + A)
Maybe you should print the total task graph （with node like "broadcast_add_16" etc...）to find the reason
		</comment>
		<comment id='5' author='jackalcooper' date='2020-08-10T05:05:50Z'>
		optimized_dlnet_0_op_graph.dot:
&lt;denchmark-link:https://user-images.githubusercontent.com/5133557/89753251-1a8fa980-db0a-11ea-9815-d4dc2c9916c5.png&gt;&lt;/denchmark-link&gt;

		</comment>
		<comment id='6' author='jackalcooper' date='2020-08-10T05:06:34Z'>
		
&lt;denchmark-link:https://user-images.githubusercontent.com/5133557/89753305-4ca10b80-db0a-11ea-8005-1ccf9e3f25f5.png&gt;&lt;/denchmark-link&gt;

		</comment>
		<comment id='7' author='jackalcooper' date='2020-08-10T05:10:14Z'>
		&lt;denchmark-link:https://user-images.githubusercontent.com/5133557/89753422-ccc77100-db0a-11ea-9cef-e252bfe02a93.png&gt;&lt;/denchmark-link&gt;

&lt;denchmark-link:https://user-images.githubusercontent.com/5133557/89753426-cf29cb00-db0a-11ea-88ad-292922dbb2e8.png&gt;&lt;/denchmark-link&gt;

		</comment>
		<comment id='8' author='jackalcooper' date='2020-08-13T11:17:27Z'>
		&lt;denchmark-link:https://user-images.githubusercontent.com/12186261/90127960-a9195a80-dd98-11ea-9130-3c2f1b77dc07.png&gt;&lt;/denchmark-link&gt;

The circle BUG reason is :
If the merge order is  Chain { 8 } &lt;- Chain { 4-&gt;7 } , Chain { 8 } ancestors include Chain { 4-&gt;7 } ancestors , so they merge , and then get the circle chain  BUG. ( the back edge is Node{4-&gt;7} -&gt; Node{7} )
If the merge order is Chain { 4-&gt;7 } &lt;- Chain { 8 }, Chain { 4-&gt;7 } ancestors NOT include Chain { 8 } ancestors , so they NOT merge , then work well.
So, the solution is increase strict constraints of Chain Merge:
We have Chain A   Chain B
And we try B merge to A

if A is B ancestors
when (B ancestors ⊆ A + A ancestors  ) merge
else :
when (B ancestors ⊆ A + A ancestors  &amp;&amp; A ancestors ⊆ B + B ancestors) merge

		</comment>
		<comment id='9' author='jackalcooper' date='2020-08-13T11:19:42Z'>
		&lt;denchmark-link:https://user-images.githubusercontent.com/5133557/90128721-ec27fd80-dd99-11ea-8289-9f261f17bf2b.png&gt;&lt;/denchmark-link&gt;

		</comment>
		<comment id='10' author='jackalcooper' date='2020-08-14T12:00:03Z'>
		note:
规则1 就是现在的规则
&lt;denchmark-code&gt;bool ChainMerger::IsSubset(const ChainIt&amp; lhs, const ChainIt&amp; rhs) const {
  CHECK_EQ(lhs-&gt;ancestors_and_this.size(), rhs-&gt;ancestors_and_this.size());
  int64_t bitset_num = lhs-&gt;ancestors_and_this.size();
  for (int64_t i = 0; i &lt; bitset_num; ++i) {
    if (lhs-&gt;ancestors_and_this.at(i) != (lhs-&gt;ancestors_and_this.at(i) | rhs-&gt;ancestors.at(i))) {
      return false;
    }
  }
  return true;
}
&lt;/denchmark-code&gt;

规则2 等价于 A ancestors = B ancestors
		</comment>
		<comment id='12' author='jackalcooper' date='2020-08-14T12:31:46Z'>
		rule 2 will produce a circle in this case:
&lt;denchmark-link:https://user-images.githubusercontent.com/5133557/90249487-26ae9a80-de6d-11ea-93c1-235c1db9d298.png&gt;&lt;/denchmark-link&gt;

		</comment>
		<comment id='13' author='jackalcooper' date='2020-08-14T13:46:22Z'>
		The  topological order of green nodes is not in same level, how can they be merged into same Chain?  The order of Chain merging is topological.
		</comment>
		<comment id='14' author='jackalcooper' date='2020-08-14T14:25:12Z'>
		sorry for the confusion. I didn't draw every single edge for clearity. The full graph should be like this:
&lt;denchmark-link:https://user-images.githubusercontent.com/5133557/90259540-c9bae080-de7c-11ea-89fc-69fdae65d962.png&gt;&lt;/denchmark-link&gt;

		</comment>
		<comment id='15' author='jackalcooper' date='2020-08-14T14:45:13Z'>
		Take the Chain of three yellow nodes as an example,  the ancestors of the Yellow node on the left are { gray }, while the ancestors of the Yellow nodes in the middle are {gray, green,  brown}. The ancestors of the two nodes are inconsistent and cannot be merged.
		</comment>
		<comment id='16' author='jackalcooper' date='2020-08-14T18:47:27Z'>
		I have found the cause of the bug. Some keep only edges are ignored when collecting ancestors. So these edges are absent when merging chains while they are present when checking cycles.
&lt;denchmark-code&gt;void ChainGraph::CollectTaskNodeAncestors(const TaskGraph&amp; task_gph,
      ....
      if (IsNonSoleKeepHeaderOnlyEdge(in_node, node)) { continue; }
      ....
&lt;/denchmark-code&gt;

&lt;denchmark-link:https://user-images.githubusercontent.com/5133557/90282741-7a3adb80-dea1-11ea-847c-5630e3a839a7.png&gt;&lt;/denchmark-link&gt;

		</comment>
		<comment id='17' author='jackalcooper' date='2020-08-15T01:46:59Z'>
		So i think the rule if (IsNonSoleKeepHeaderOnlyEdge(in_node, node)) { continue; }  to ignore keep_header_only edge when collecting ancestors is incorrect.
The  keep_header_only edge should be considered as a normal data side.
		</comment>
	</comments>
</bug>