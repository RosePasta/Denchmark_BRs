<bug id='3614' author='poohRui' open_date='2020-09-27T05:14:12Z' closed_time='2020-09-30T06:00:56Z'>
	<summary>Global variables are not released automatically in python</summary>
	<description>
在我们的grpc升级之后，新版本的grpc会在CtrlServer析构时检查cq是否为空，如果不为空，则会check fail，详情见 &lt;denchmark-link:https://github.com/Oneflow-Inc/oneflow/pull/3589&gt;#3589&lt;/denchmark-link&gt;
 ，但是升级grpc后所有python端的单测和模型脚本都没有挂，这是不太合理的。
首先，明确之前的bug只会在执行到CtrlServer的析构函数才会被触发，如果写一个简单的测试脚本
import oneflow as flow
flow.env.init()
观察输出的日志信息发现，所有通过env.init()创建的Global对象，最后都没有被delete：
&lt;denchmark-code&gt;Log file created at: 2020/09/27 12:38:24
Running on machine: oneflow-14
Log line format: [IWEF]mmdd hh:mm:ss.uuuuuu threadid file:line] msg
I0927 12:38:24.295881  5925 global.h:32] NewGlobal 14cudaDeviceProp
I0927 12:38:24.324590  5925 global.h:32] NewGlobal N7oneflow7EnvDescE
I0927 12:38:24.324689  5925 global.h:32] NewGlobal N7oneflow10CtrlServerE
I0927 12:38:24.327530  5925 ctrl_server.cpp:53] CtrlServer listening on 0.0.0.0:43087
I0927 12:38:24.327675  5925 global.h:32] NewGlobal N7oneflow10CtrlClientE
I0927 12:38:24.331157  5925 ctrl_client.cpp:231] LoadServer 127.0.0.1 Successful at 0 times
I0927 12:38:24.331355  5925 global.h:32] NewGlobal N7oneflow10MachineCtxE
I0927 12:38:24.331382  5925 machine_context.cpp:33] this machine id: 0
I0927 12:38:24.331409  5925 global.h:32] NewGlobal N7oneflow12ResourceDescE
I0927 12:38:24.331429  5925 global.h:32] NewGlobal N7oneflow12ResourceDescE
I0927 12:38:24.331449  5925 global.h:32] NewGlobal N7oneflow10ThreadPoolE
I0927 12:38:24.332933  5925 global.h:32] NewGlobal N7oneflow2vm19VirtualMachineScopeE
I0927 12:38:24.332963  5925 global.h:32] NewGlobal N7oneflow9OneflowVME
I0927 12:38:24.354261  5925 global.h:32] NewGlobal N7oneflow27EagerJobBuildAndInferCtxMgrE
I0927 12:38:24.354305  5925 global.h:32] NewGlobal N7oneflow16EagerNcclCommMgrE
I0927 12:38:24.354317  5925 env_global_objects_scope.cpp:95] In environment constructor
I0927 12:38:24.375691  5925 job_desc.cpp:79] Set piece_num_of_experiment_phase 19
&lt;/denchmark-code&gt;

通过在EnvGlobalObjectsScope的析构函数中打印LOG，也证实了EnvGlobalObjectsScope::~EnvGlobalObjectsScope()确实没有被调用。
另外，我还跑了mlp_mnist.py例子，通过日志发现，所有SessionGlobalObjectsScope创建的Global对象都有对应的delete操作，但所有通过EnvGlobalObjectsScope构造函数创建的Global对象都没有被正常析构。
通过看代码，在oneflow_internal_helper.h中的DestroyGlobalSession()有对其创建的所有Global对象的析构，而DestroyEnv()中并没有明确的delete操作：
Maybe&lt;void&gt; DestroyEnv() {
  if (Global&lt;EnvGlobalObjectsScope&gt;::Get() == nullptr) { return Maybe&lt;void&gt;::Ok(); }
  CHECK_OR_RETURN(Global&lt;MachineCtx&gt;::Get()-&gt;IsThisMachineMaster());
  ClusterInstruction::MasterSendHalt();
  return Maybe&lt;void&gt;::Ok();
}
如果给上述代码增加Global&lt;EnvGlobalObjectsScope&gt;::Delete();，可以复现我们之前代码在CtrlServer中的bug。
&lt;denchmark-h:h2&gt;解决方法&lt;/denchmark-h&gt;


给oneflow_internal_helper.h中的DestroyEnv()函数增加Global&lt;EnvGlobalObjectsScope&gt;::Delete();

	</description>
	<comments>
	</comments>
</bug>