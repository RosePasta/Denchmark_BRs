<bug id='3509' author='chengtbf' open_date='2020-08-25T10:08:13Z' closed_time='2020-08-27T05:20:06Z'>
	<summary>oneflow.scope.namespace add wrong prefix in op_type_name rather than op_name when op is build by op module builder</summary>
	<description>
using oneflow.scope.namespace() will trigger the BUG that the op_type_name cannot be found when the op is build by op module builder
example:
with oneflow.scope.namespace("my_space"):
    rng = oneflow.random.coin_flip(name="my_test_op")
will raise error:
Check failed: val	 Cannot find op my_space-coin_flip
BUT the scope prefix should be add on op_name : "my_test_op" rather than op_type_name: "coin_flip"
	</description>
	<comments>
		<comment id='1' author='chengtbf' date='2020-08-25T10:49:59Z'>
		this BUG is triggered ONLY when this op is build by op_module_builder.
		</comment>
		<comment id='2' author='chengtbf' date='2020-08-25T11:09:47Z'>
		This bug is caused by below code:
&lt;denchmark-code&gt;@enable_if.condition(hob.in_global_mode &amp; ~hob.eager_execution_enabled)
def lazy_user_op_module_builder(op_name):
    job_name = c_api_util.JobBuildAndInferCtx_GetCurrentJobName()
    return UserOpModuleBuilder(job_name, op_name, LazyUserOpModule)

...

class UserOpModuleBuilder(UserOpConfBuilder):
    def __init__(self, *args, **kwargs):
        UserOpConfBuilder.__init__(self, *args, **kwargs)
        self.user_op_module.op_conf.scope_symbol_id = flow.current_scope().symbol_id

...

class UserOpConfBuilder(object):
    def __init__(self, job_name, op_name, user_op_class):
        name_scope_prefix = name_scope.GetJobNameScopePrefix(job_name)
        self.user_op_ = user_op_class(name_scope_prefix + op_name)

...

class LazyUserOpModule(UserOpModule, UserOp):
    def __init__(self, op_type_name):
        UserOp.__init__(self, op_type_name, op_type_name) # this line raise the error

...

class UserOp(object):
    def __init__(self, op_name, op_type_name=None):
        self.op_conf_ = op_conf_util.OperatorConf()
        self.op_conf_.name = op_name
        if op_type_name is not None:
            self.op_conf_.user_conf.op_type_name = op_type_name
        device_tag = oneflow.current_scope().device_parallel_desc_symbol.device_tag
        self.op_conf_.device_tag = device_tag
        self.output_arg_key_list_ = []

&lt;/denchmark-code&gt;

We can't init UserOp with the parameter of op_type_name which is modified by adding namescope prefix.
		</comment>
		<comment id='3' author='chengtbf' date='2020-08-25T11:17:42Z'>
		the namescope prefix should never be added on op_type_name
		</comment>
		<comment id='4' author='chengtbf' date='2020-08-25T12:53:36Z'>
		I think user should also call the Op method to set the op_type_name when using user_op_module_builder to build op.
&lt;denchmark-link:https://github.com/Oneflow-Inc/oneflow/blob/master/oneflow/python/ops/user_data_ops.py#L518&gt;https://github.com/Oneflow-Inc/oneflow/blob/master/oneflow/python/ops/user_data_ops.py#L518&lt;/denchmark-link&gt;

        self.op_module_builder = (
            flow.user_op_module_builder("coin_flip")
            .Output("out")
            .Attr("batch_size", batch_size)
            .Attr("probability", probability)
            .Attr("has_seed", has_seed)
            .Attr("seed", seed)
            .CheckAndComplete()
        )
change to
        self.op_module_builder = (
            flow.user_op_module_builder(name)
            .Op("coin_flip")
            .Output("out")
            .Attr("batch_size", batch_size)
            .Attr("probability", probability)
            .Attr("has_seed", has_seed)
            .Attr("seed", seed)
            .CheckAndComplete()
        )
can fix the namescope error
		</comment>
		<comment id='5' author='chengtbf' date='2020-08-25T13:12:59Z'>
		
I think user should also call the Op method to set the op_type_name when using user_op_module_builder to build op.
https://github.com/Oneflow-Inc/oneflow/blob/master/oneflow/python/ops/user_data_ops.py#L518
        self.op_module_builder = (
            flow.user_op_module_builder("coin_flip")
            .Output("out")
            .Attr("batch_size", batch_size)
            .Attr("probability", probability)
            .Attr("has_seed", has_seed)
            .Attr("seed", seed)
            .CheckAndComplete()
        )
change to
        self.op_module_builder = (
            flow.user_op_module_builder(name)
            .Op("coin_flip")
            .Output("out")
            .Attr("batch_size", batch_size)
            .Attr("probability", probability)
            .Attr("has_seed", has_seed)
            .Attr("seed", seed)
            .CheckAndComplete()
        )
can fix the namescope error

Yes, this way can avoid the bug. But I want to know whether  is designed to be used without  method  on purpose. &lt;denchmark-link:https://github.com/lixinqi&gt;@lixinqi&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>