<bug id='387' author='Bleach665' open_date='2020-02-15T17:27:27Z' closed_time='2020-07-20T19:24:45Z'>
	<summary>Question about openvino_2020.1.033 and non AVX CPU</summary>
	<description>
I use OpnVINO as OpenCV backend.
Among the computers that use my software are quite old, but still powerful machines like 2x CPU Xeon x5660, 2x CPU Xeon e-2603, etc. with 64-180 Gb RAM. Unfortunately they not support avx instruction set, only sse4.
Previous versions OpenVINO including 2019.3.379 allow use this old cpu on Windows, Linux and MacOS (I played with cpu_extension.* file and it works fine). In last OpenVINO release 2020.1.033 I receive error:
Failed to create plugin [my path to]\MKLDNNPlugin.dll for device CPU
on demo executing. Also I dont find solution hove to rebuild some path of OpenVino lib (like cpu_extension.*) to use with sse cpu.
This means that CPU without AVX instruction set will no longer be supported by OpenVINO inference engine?
	</description>
	<comments>
		<comment id='1' author='Bleach665' date='2020-02-17T06:54:24Z'>
		&lt;denchmark-link:https://github.com/Bleach665&gt;@Bleach665&lt;/denchmark-link&gt;
, Try to rebuild OpenVINO from source - CPU features should be detected automatically.
		</comment>
		<comment id='2' author='Bleach665' date='2020-02-17T06:59:10Z'>
		Extension lib is no longer provided by OpenVINO binary and you don't need to provide it. All layers were moved to CPU (MKLDNN) plugin to increase out of the box coverage of the topologies.
Can you describe setup that you have? e.g. do you continue using extension lib or just rely on distribution?
		</comment>
		<comment id='3' author='Bleach665' date='2020-02-17T16:29:25Z'>
		&lt;denchmark-link:https://github.com/dkurt&gt;@dkurt&lt;/denchmark-link&gt;
. Previously, from time to time I tried to build Inference engine from sources, but there was always some error on one or several platforms (Win, Linux, Mac). Therefore, it was easier to use prebuilt lib from OpenVINO. Now I will probably do as you wrote - to build from sources.
&lt;denchmark-link:https://github.com/yury-gorbachev&gt;@yury-gorbachev&lt;/denchmark-link&gt;
. I just built demos, and use prebuilt lib from distribution.
UPD. In previous version OpenVINO (&lt;2020) to use with SSE CPU it was necessary to rename cpu_extension_avx2.* to cpu_extension.*. Cpu_extension was provided in

or was built from

Nevertheless, look like that now easiest solution is fix issues and build inference engine from sources.
		</comment>
		<comment id='4' author='Bleach665' date='2020-02-17T18:25:43Z'>
		&lt;denchmark-link:https://github.com/Bleach665&gt;@Bleach665&lt;/denchmark-link&gt;
 true, but I'm wondering why you're experiencing problems now when extension lib is not longer needed. Things should be simpler at least in theory.
		</comment>
		<comment id='5' author='Bleach665' date='2020-02-17T18:45:13Z'>
		In my case seems like the problem is that prebuilt lib in OpenVINO distribution are built with AXV baseline. Unfortunately I can't check this, because don't have a pc with a processor with AVX in touch.
		</comment>
		<comment id='6' author='Bleach665' date='2020-02-17T19:19:15Z'>
		
Failed to create plugin [my path to]\MKLDNNPlugin.dll for device CPU

There are several lines in this error message. So you should dump all of them.
IMHO, This message has zero correlation with "cpu_extension" file.
Check your environment settings (like message says), especially PATH variable.

{Configuration}

Start investigation from "Release" configuration.
You should see the same "Release" in your [my path to]. Mess of Debug/Release would not work.
Additionally, you can investigate libraries loading attempts with help of &lt;denchmark-link:https://docs.microsoft.com/en-us/sysinternals/downloads/procmon&gt;Process Monitor&lt;/denchmark-link&gt;
.
&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;


This means that CPU without AVX instruction set will no longer be supported by OpenVINO inference engine

Check &lt;denchmark-link:https://software.intel.com/en-us/articles/OpenVINO-RelNotes#inpage-nav-7-1&gt;system requirements section&lt;/denchmark-link&gt;
 - at least, Atom CPUs are still here.
		</comment>
		<comment id='7' author='Bleach665' date='2020-02-17T20:07:36Z'>
		
There are several lines in this error message. So you should dump all of them.

Full command and output:
&lt;denchmark-code&gt;security_barrier_camera_demo.exe -i car_1.bmp -m "C:\Users\bleach\Documents\Intel\OpenVINO\openvino_models\ir\FP32\Security\object_detection\barrier\0106\dldt\vehicle-license-plate-detection-barrier-0106.xml" -m_va "C:\Users\bleach\Documents\Intel\OpenVINO\openvino_models\ir\FP32\Security\object_attributes\vehicle\resnet10_update_1\dldt\vehicle-attributes-recognition-barrier-0039.xml" -m_lpr "C:\Users\bleach\Documents\Intel\OpenVINO\openvino_models\ir\FP32\Security\optical_character_recognition\license_plate\dldt\license-plate-recognition-barrier-0001.xml" -d CPU -d_va CPU -d_lpr CPU
[ INFO ] InferenceEngine: 00007FFC273DB740
[ INFO ] Files were added: 1
[ INFO ]     car_1.bmp
[ INFO ] Loading device CPU
[ ERROR ] Failed to create plugin e:\Lib_prebuild\OpenVINO2020\TestIE2020\MKLDNNPlugin.dll for device CPU
Please, check your environment
Cannot load library 'e:\Lib_prebuild\OpenVINO2020\TestIE2020\MKLDNNPlugin.dll': 1114 from cwd: e:\Lib_prebuild\OpenVINO2020\TestIE2020
&lt;/denchmark-code&gt;


Check your environment settings (like message says), especially PATH variable.

For this test, I
-renamed the folder with my libraries where environment variable PATH point to
-put demo exe, all Release dll, opencv dll (from OpenVINO distribution)  tbb, ngraph to one folder to prevent build configuration and dll version mixture.
The list of this directory:

cldnn_global_custom_kernels
benchmark_app.exe
cache.json
car_1.bmp
clDNNPlugin.dll
compile_tool.exe
crossroad_camera_demo.exe
format_reader.dll
format_reader.exp
gaze_estimation_demo.exe
gna.dll
GNAPlugin.dll
HDDLPlugin.dll
hddl_perfcheck.exe
HeteroPlugin.dll
human_pose_estimation_demo.exe
inference_engine.dll
inference_engine_c_api.dll
inference_engine_nn_builder.dll
inference_engine_preproc.dll
interactive_face_detection_demo.exe
mask_rcnn_demo.exe
MKLDNNPlugin.dll
mkl_tiny_tbb.dll
MultiDevicePlugin.dll
multi_channel_face_detection_demo.exe
multi_channel_human_pose_estimation_demo.exe
multi_channel_object_detection_demo_yolov3.exe
myriadPlugin.dll
myriad_compile.exe
myriad_perfcheck.exe
ngraph.dll
object_detection_demo_faster_rcnn.exe
object_detection_demo_ssd_async.exe
object_detection_demo_yolov3_async.exe
opencv_calib3d420.dll
opencv_core420.dll
opencv_dnn420.dll
opencv_features2d420.dll
opencv_flann420.dll
opencv_gapi420.dll
opencv_highgui420.dll
opencv_imgcodecs420.dll
opencv_imgproc420.dll
opencv_ml420.dll
opencv_objdetect420.dll
opencv_photo420.dll
opencv_stitching420.dll
opencv_version.exe
opencv_versiond.exe
opencv_version_win32.exe
opencv_version_win32d.exe
opencv_video420.dll
opencv_videoio420.dll
opencv_videoio_intel_mfx420_64.dll
pcie-ma248x.elf
pedestrian_tracker_demo.exe
plugins.xml
security_barrier_camera_demo.exe
segmentation_demo.exe
smart_classroom_demo.exe
super_resolution_demo.exe
tbb.dll
text_detection_demo.exe
usb-ma2450.mvcmd
usb-ma2x8x.mvcmd


In the near future I will try to reproduce this on a clean virtual machine.
		</comment>
		<comment id='8' author='Bleach665' date='2020-02-17T20:26:51Z'>
		
1114

It is  result and it means &lt;denchmark-link:https://docs.microsoft.com/en-us/windows/win32/debug/system-error-codes--1000-1299-&gt;ERROR_DLL_INIT_FAILED&lt;/denchmark-link&gt;
.
BTW, do you have installed some version of &lt;denchmark-link:https://software.intel.com/en-us/articles/intel-compilers-redistributable-libraries-by-version&gt;Intel compiler runtime&lt;/denchmark-link&gt;
? ( should warn if it is missing)
		</comment>
		<comment id='9' author='Bleach665' date='2020-02-17T20:38:11Z'>
		Intel compiler runtime not installed now, but as far as I remember it was installed earlier. setupvars does not produce any warn:
&lt;denchmark-code&gt;setupvars.bat
Python 3.7.6
ECHO is off.
PYTHONPATH=e:\Lib_prebuild\OpenVINO2020\openvino_2020.1.033\deployment_tools\open_model_zoo\tools\accuracy_checker;e:\Lib_prebuild\OpenVINO2020\openvino_2020.1.033\python\python3.7;e:\Lib_prebuild\OpenVINO2020\openvino_2020.1.033\python\python3;e:\Lib_prebuild\OpenVINO2020\openvino_2020.1.033\deployment_tools\model_optimizer;
[setupvars.bat] OpenVINO environment initialized
&lt;/denchmark-code&gt;

		</comment>
		<comment id='10' author='Bleach665' date='2020-02-18T12:06:23Z'>
		Result of test on clean virtual machine:
VBox used; OS windows10_x64_1909; host PC CPU - 2 x x5660 Xeon.
Install:

Python 3.6.5
CMake 3.16.4
Microsoft Visual Studio 2017 Community RTM 15.0.26228.4
OpenVINO 2020.1.033_online.

Open console, run c:\Program Files (x86)\IntelSWTools\openvino\bin\setupvars.bat.
After run demo_security_barrier_camera.bat from
C:\Program Files (x86)\IntelSWTools\openvino\deployment_tools\demo
Final output:
&lt;denchmark-code&gt;"C:\Users\Bel\Documents\Intel\OpenVINO\inference_engine_demos_build\intel64\Release\security_barrier_camera_demo.exe" -i "c:\Program Files (x86)\IntelSWTools\openvino\deployment_tools\demo\car_1.bmp"  -m "C:\Users\Bel\Documents\Intel\OpenVINO\openvino_models\ir\intel\vehicle-license-plate-detection-barrier-0106\FP16\vehicle-license-plate-detection-barrier-0106.xml" -m_lpr "C:\Users\Bel\Documents\Intel\OpenVINO\openvino_models\ir\intel\license-plate-recognition-barrier-0001\FP16\license-plate-recognition-barrier-0001.xml" -m_va "C:\Users\Bel\Documents\Intel\OpenVINO\openvino_models\ir\intel\vehicle-attributes-recognition-barrier-0039\FP16\vehicle-attributes-recognition-barrier-0039.xml" -d CPU -d_va CPU -d_lpr CPU
[ INFO ] InferenceEngine: 00007FFCBE98B740
[ INFO ] Files were added: 1
[ INFO ]     c:\Program Files (x86)\IntelSWTools\openvino\deployment_tools\demo\car_1.bmp
[ INFO ] Loading device CPU
[ ERROR ] Failed to create plugin c:\Program Files (x86)\IntelSWTools\openvino\deployment_tools\inference_engine\bin\intel64\Release\MKLDNNPlugin.dll for device CPU
Please, check your environment
Cannot load library 'c:\Program Files (x86)\IntelSWTools\openvino\deployment_tools\inference_engine\bin\intel64\Release\MKLDNNPlugin.dll': 1114 from cwd: C:\Users\Bel\Documents\Intel\OpenVINO\inference_engine_demos_build\intel64\Release

Error
&lt;/denchmark-code&gt;

Also install_prerequisites.bat terminated with errors:

c:\Program Files (x86)\IntelSWTools\openvino\deployment_tools\model_optimizer\install_prerequisites&gt;install_prerequisites.bat
Python 3.6.5
Режим вывода команд на экран (ECHO) отключен.
Collecting tensorflow&lt;2.0.0,&gt;=1.2.0 (from -r ..\requirements.txt (line 1))
  Using cached https://files.pythonhosted.org/packages/06/1f/3940c7bb51e1b9cf6e526c84d3239830c8d46c9823a3605945f9abb22411/tensorflow-1.15.2-cp36-cp36m-win_amd64.whl
Collecting mxnet&lt;=1.5.1,&gt;=1.0.0 (from -r ..\requirements.txt (line 2))
  Using cached https://files.pythonhosted.org/packages/a4/3e/07f6d61d8e0a5d50c6f128791a617d7b222224c52dacba04855a0b6ecfe6/mxnet-1.5.0-py2.py3-none-win_amd64.whl
Collecting networkx&gt;=1.11 (from -r ..\requirements.txt (line 3))
  Using cached https://files.pythonhosted.org/packages/41/8f/dd6a8e85946def36e4f2c69c84219af0fa5e832b018c970e92f2ad337e45/networkx-2.4-py3-none-any.whl
Requirement already satisfied: numpy&gt;=1.12.0 in c:\users\bel\appdata\roaming\python\python36\site-packages (from -r ..\requirements.txt (line 4))
Requirement already satisfied: protobuf==3.6.1 in c:\users\bel\appdata\roaming\python\python36\site-packages (from -r ..\requirements.txt (line 5))
Collecting onnx&gt;=1.1.2 (from -r ..\requirements.txt (line 6))
  Using cached https://files.pythonhosted.org/packages/15/e4/0609d6a8463fcd246f64d1a65cc4fbc9e32f6357b4a6a13ae45c71cd01a3/onnx-1.6.0-cp36-cp36m-win_amd64.whl
Collecting defusedxml&gt;=0.5.0 (from -r ..\requirements.txt (line 7))
  Using cached https://files.pythonhosted.org/packages/06/74/9b387472866358ebc08732de3da6dc48e44b0aacd2ddaa5cb85ab7e986a2/defusedxml-0.6.0-py2.py3-none-any.whl
Collecting wrapt&gt;=1.11.1 (from tensorflow&lt;2.0.0,&gt;=1.2.0-&gt;-r ..\requirements.txt (line 1))
  Using cached https://files.pythonhosted.org/packages/ee/bc/7993faa8084b5a5dbabb07a197ae1b7590da4752dc80455d878573553e2f/wrapt-1.12.0.tar.gz
Requirement already satisfied: tensorboard&lt;1.16.0,&gt;=1.15.0 in c:\users\bel\appdata\roaming\python\python36\site-packages (from tensorflow&lt;2.0.0,&gt;=1.2.0-&gt;-r ..\requirements.txt (line 1))
Collecting astor&gt;=0.6.0 (from tensorflow&lt;2.0.0,&gt;=1.2.0-&gt;-r ..\requirements.txt (line 1))
  Using cached https://files.pythonhosted.org/packages/c3/88/97eef84f48fa04fbd6750e62dcceafba6c63c81b7ac1420856c8dcc0a3f9/astor-0.8.1-py2.py3-none-any.whl
Requirement already satisfied: gast==0.2.2 in c:\users\bel\appdata\roaming\python\python36\site-packages (from tensorflow&lt;2.0.0,&gt;=1.2.0-&gt;-r ..\requirements.txt (line 1))
Requirement already satisfied: grpcio&gt;=1.8.6 in c:\users\bel\appdata\roaming\python\python36\site-packages (from tensorflow&lt;2.0.0,&gt;=1.2.0-&gt;-r ..\requirements.txt (line 1))
Collecting keras-preprocessing&gt;=1.0.5 (from tensorflow&lt;2.0.0,&gt;=1.2.0-&gt;-r ..\requirements.txt (line 1))
  Using cached https://files.pythonhosted.org/packages/28/6a/8c1f62c37212d9fc441a7e26736df51ce6f0e38455816445471f10da4f0a/Keras_Preprocessing-1.1.0-py2.py3-none-any.whl
Requirement already satisfied: absl-py&gt;=0.7.0 in c:\users\bel\appdata\roaming\python\python36\site-packages (from tensorflow&lt;2.0.0,&gt;=1.2.0-&gt;-r ..\requirements.txt (line 1))
Requirement already satisfied: opt-einsum&gt;=2.3.2 in c:\users\bel\appdata\roaming\python\python36\site-packages (from tensorflow&lt;2.0.0,&gt;=1.2.0-&gt;-r ..\requirements.txt (line 1))
Requirement already satisfied: wheel&gt;=0.26; python_version &gt;= "3" in c:\users\bel\appdata\roaming\python\python36\site-packages (from tensorflow&lt;2.0.0,&gt;=1.2.0-&gt;-r ..\requirements.txt (line 1))
Requirement already satisfied: tensorflow-estimator==1.15.1 in c:\users\bel\appdata\roaming\python\python36\site-packages (from tensorflow&lt;2.0.0,&gt;=1.2.0-&gt;-r ..\requirements.txt (line 1))
Requirement already satisfied: termcolor&gt;=1.1.0 in c:\users\bel\appdata\roaming\python\python36\site-packages (from tensorflow&lt;2.0.0,&gt;=1.2.0-&gt;-r ..\requirements.txt (line 1))
Requirement already satisfied: keras-applications&gt;=1.0.8 in c:\users\bel\appdata\roaming\python\python36\site-packages (from tensorflow&lt;2.0.0,&gt;=1.2.0-&gt;-r ..\requirements.txt (line 1))
Requirement already satisfied: google-pasta&gt;=0.1.6 in c:\users\bel\appdata\roaming\python\python36\site-packages (from tensorflow&lt;2.0.0,&gt;=1.2.0-&gt;-r ..\requirements.txt (line 1))
Requirement already satisfied: six&gt;=1.10.0 in c:\users\bel\appdata\roaming\python\python36\site-packages (from tensorflow&lt;2.0.0,&gt;=1.2.0-&gt;-r ..\requirements.txt (line 1))
Collecting graphviz&lt;0.9.0,&gt;=0.8.1 (from mxnet&lt;=1.5.1,&gt;=1.0.0-&gt;-r ..\requirements.txt (line 2))
  Using cached https://files.pythonhosted.org/packages/53/39/4ab213673844e0c004bed8a0781a0721a3f6bb23eb8854ee75c236428892/graphviz-0.8.4-py2.py3-none-any.whl
Collecting requests&lt;2.19.0,&gt;=2.18.4 (from mxnet&lt;=1.5.1,&gt;=1.0.0-&gt;-r ..\requirements.txt (line 2))
  Using cached https://files.pythonhosted.org/packages/49/df/50aa1999ab9bde74656c2919d9c0c085fd2b3775fd3eca826012bef76d8c/requests-2.18.4-py2.py3-none-any.whl
Collecting decorator&gt;=4.3.0 (from networkx&gt;=1.11-&gt;-r ..\requirements.txt (line 3))
  Using cached https://files.pythonhosted.org/packages/8f/b7/f329cfdc75f3d28d12c65980e4469e2fa373f1953f5df6e370e84ea2e875/decorator-4.4.1-py2.py3-none-any.whl
Requirement already satisfied: setuptools in c:\users\bel\appdata\local\programs\python\python36\lib\site-packages (from protobuf==3.6.1-&gt;-r ..\requirements.txt (line 5))
Collecting typing-extensions&gt;=3.6.2.1 (from onnx&gt;=1.1.2-&gt;-r ..\requirements.txt (line 6))
  Using cached https://files.pythonhosted.org/packages/03/92/705fe8aca27678e01bbdd7738173b8e7df0088a2202c80352f664630d638/typing_extensions-3.7.4.1-py3-none-any.whl
Requirement already satisfied: werkzeug&gt;=0.11.15 in c:\users\bel\appdata\roaming\python\python36\site-packages (from tensorboard&lt;1.16.0,&gt;=1.15.0-&gt;tensorflow&lt;2.0.0,&gt;=1.2.0-&gt;-r ..\requirements.txt (line 1))
Requirement already satisfied: markdown&gt;=2.6.8 in c:\users\bel\appdata\roaming\python\python36\site-packages (from tensorboard&lt;1.16.0,&gt;=1.15.0-&gt;tensorflow&lt;2.0.0,&gt;=1.2.0-&gt;-r ..\requirements.txt (line 1))
Requirement already satisfied: h5py in c:\users\bel\appdata\roaming\python\python36\site-packages (from keras-applications&gt;=1.0.8-&gt;tensorflow&lt;2.0.0,&gt;=1.2.0-&gt;-r ..\requirements.txt (line 1))
Requirement already satisfied: certifi&gt;=2017.4.17 in c:\users\bel\appdata\roaming\python\python36\site-packages (from requests&lt;2.19.0,&gt;=2.18.4-&gt;mxnet&lt;=1.5.1,&gt;=1.0.0-&gt;-r ..\requirements.txt (line 2))
Requirement already satisfied: chardet&lt;3.1.0,&gt;=3.0.2 in c:\users\bel\appdata\roaming\python\python36\site-packages (from requests&lt;2.19.0,&gt;=2.18.4-&gt;mxnet&lt;=1.5.1,&gt;=1.0.0-&gt;-r ..\requirements.txt (line 2))
Collecting idna&lt;2.7,&gt;=2.5 (from requests&lt;2.19.0,&gt;=2.18.4-&gt;mxnet&lt;=1.5.1,&gt;=1.0.0-&gt;-r ..\requirements.txt (line 2))
  Using cached https://files.pythonhosted.org/packages/27/cc/6dd9a3869f15c2edfab863b992838277279ce92663d334df9ecf5106f5c6/idna-2.6-py2.py3-none-any.whl
Collecting urllib3&lt;1.23,&gt;=1.21.1 (from requests&lt;2.19.0,&gt;=2.18.4-&gt;mxnet&lt;=1.5.1,&gt;=1.0.0-&gt;-r ..\requirements.txt (line 2))
  Using cached https://files.pythonhosted.org/packages/63/cb/6965947c13a94236f6d4b8223e21beb4d576dc72e8130bd7880f600839b8/urllib3-1.22-py2.py3-none-any.whl
Building wheels for collected packages: wrapt
  Running setup.py bdist_wheel for wrapt ... error
  Failed building wheel for wrapt
  Running setup.py clean for wrapt
Failed to build wrapt
Installing collected packages: wrapt, astor, keras-preprocessing, tensorflow, graphviz, idna, urllib3, requests, mxnet, decorator, networkx, typing-extensions, onnx, defusedxml
  Running setup.py install for wrapt ... error
Exception:
Traceback (most recent call last):
  File "c:\users\bel\appdata\local\programs\python\python36\lib\site-packages\pip\compat\__init__.py", line 73, in console_to_str
    return s.decode(sys.__stdout__.encoding)
UnicodeDecodeError: 'utf-8' codec can't decode byte 0xaf in position 47: invalid start byte

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "c:\users\bel\appdata\local\programs\python\python36\lib\site-packages\pip\basecommand.py", line 215, in main
    status = self.run(options, args)
  File "c:\users\bel\appdata\local\programs\python\python36\lib\site-packages\pip\commands\install.py", line 342, in run
    prefix=options.prefix_path,
  File "c:\users\bel\appdata\local\programs\python\python36\lib\site-packages\pip\req\req_set.py", line 784, in install
    **kwargs
  File "c:\users\bel\appdata\local\programs\python\python36\lib\site-packages\pip\req\req_install.py", line 878, in install
    spinner=spinner,
  File "c:\users\bel\appdata\local\programs\python\python36\lib\site-packages\pip\utils\__init__.py", line 676, in call_subprocess
    line = console_to_str(proc.stdout.readline())
  File "c:\users\bel\appdata\local\programs\python\python36\lib\site-packages\pip\compat\__init__.py", line 75, in console_to_str
    return s.decode('utf_8')
UnicodeDecodeError: 'utf-8' codec can't decode byte 0xaf in position 47: invalid start byte
You are using pip version 9.0.3, however version 20.0.2 is available.
You should consider upgrading via the 'python -m pip install --upgrade pip' command.
*****************************************************************************************
Warning: please expect that Model Optimizer conversion might be slow.
You can boost conversion speed by installing protobuf-*.egg located in the
"model-optimizer\install_prerequisites" folder or building protobuf library from sources.
For more information please refer to Model Optimizer FAQ, question #80.


		</comment>
		<comment id='11' author='Bleach665' date='2020-02-18T19:13:38Z'>
		Thank you for double check and detailed steps!
I tested Win10 under QEMU/KVM with Westmere CPU emulation (without AVX/AVX2).
I'm observing the same error message.
Windbg shows "illegal instruction" error with AVX command:
&lt;denchmark-code&gt;MKLDNNPlugin+0x9746d:
00007ffa`dbad746d c5fdefc0        vpxor   ymm0,ymm0,ymm0
&lt;/denchmark-code&gt;


ModLoad: 00007ffa`dba40000 00007ffa`dda0f000   C:\Program Files (x86)\IntelSWTools\openvino\deployment_tools\inference_engine\bin\intel64\Release\MKLDNNPlugin.dll
ModLoad: 00007ffa`da9e0000 00007ffa`dba39000   C:\Program Files (x86)\IntelSWTools\openvino\deployment_tools\inference_engine\bin\intel64\Release\mkl_tiny_tbb.dll
(410.146c): Illegal instruction - code c000001d (first chance)
(410.146c): Illegal instruction - code c000001d (!!! second chance !!!)
MKLDNNPlugin+0x9746d:
00007ffa`dbad746d c5fdefc0        vpxor   ymm0,ymm0,ymm0

0:000&gt; k
 # Child-SP          RetAddr           Call Site
00 00000045`088fbab0 00007ffb`0b54260e MKLDNNPlugin+0x9746d
01 00000045`088fbb10 00007ffa`dd18fdea ucrtbase!initterm+0x3e
02 00000045`088fbb40 00007ffa`dd18ff5c MKLDNNPlugin!CreatePluginEngine+0x150564a
03 00000045`088fbb70 00007ffb`0e171473 MKLDNNPlugin!CreatePluginEngine+0x15057bc
04 00000045`088fbbd0 00007ffb`0e1c6622 ntdll!LdrpCallInitRoutine+0x6f
05 00000045`088fbc40 00007ffb`0e1c646b ntdll!LdrpInitializeNode+0x15a
06 00000045`088fbd60 00007ffb`0e199e11 ntdll!LdrpInitializeGraphRecurse+0x73
07 00000045`088fbda0 00007ffb`0e16e399 ntdll!LdrpPrepareModuleForExecution+0xc5
08 00000045`088fbde0 00007ffb`0e171a67 ntdll!LdrpLoadDllInternal+0x19d
09 00000045`088fbe60 00007ffb`0e175b5c ntdll!LdrpLoadDll+0x107
0a 00000045`088fc000 00007ffb`0a6a2b6a ntdll!LdrLoadDll+0x8c
0b 00000045`088fc100 00007ffa`e619eec2 KERNELBASE!LoadLibraryExW+0x14a
0c 00000045`088fc170 00007ffa`e619e945 inference_engine!InferenceEngine::DeviceIDParser::DeviceIDParser+0x6252
0d 00000045`088fc7c0 00007ffa`e61995d4 inference_engine!InferenceEngine::DeviceIDParser::DeviceIDParser+0x5cd5
0e 00000045`088fc870 00007ffa`e6196f44 inference_engine!InferenceEngine::DeviceIDParser::DeviceIDParser+0x964
*** WARNING: Unable to verify checksum for C:\Users\admin\Documents\Intel\OpenVINO\inference_engine_demos_build\intel64\Release\security_barrier_camera_demo.exe
0f 00000045`088fdcd0 00007ff6`cd9e618a inference_engine!InferenceEngine::Core::GetVersions+0x434
10 00000045`088fdf90 00007ff6`cd9ff6b4 security_barrier_camera_demo+0x2618a
11 00000045`088ffcf0 00007ffb`0baf1fe4 security_barrier_camera_demo+0x3f6b4
12 00000045`088ffd30 00007ffb`0e1cef91 KERNEL32!BaseThreadInitThunk+0x14
13 00000045`088ffd60 00000000`00000000 ntdll!RtlUserThreadStart+0x21

0:000&gt; u %rip
MKLDNNPlugin+0x9746d:
00007ffa`dbad746d c5fdefc0        vpxor   ymm0,ymm0,ymm0
00007ffa`dbad7471 c5fc11055b26bc01 vmovups ymmword ptr [MKLDNNPlugin!CreatePluginEngine+0x1a0f334 (00007ffa`dd699ad4)],ymm0
00007ffa`dbad7479 48c7057026bc0100000000 mov qword ptr [MKLDNNPlugin!CreatePluginEngine+0x1a0f354 (00007ffa`dd699af4)],0
00007ffa`dbad7484 c5fc11057026bc01 vmovups ymmword ptr [MKLDNNPlugin!CreatePluginEngine+0x1a0f35c (00007ffa`dd699afc)],ymm0
00007ffa`dbad748c 48c7058526bc0100000000 mov qword ptr [MKLDNNPlugin!CreatePluginEngine+0x1a0f37c (00007ffa`dd699b1c)],0
00007ffa`dbad7497 c7058326bc0100000000 mov dword ptr [MKLDNNPlugin!CreatePluginEngine+0x1a0f384 (00007ffa`dd699b24)],0
00007ffa`dbad74a1 c5f9efc0        vpxor   xmm0,xmm0,xmm0
00007ffa`dbad74a5 c5f811442420    vmovups xmmword ptr [rsp+20h],xmm0

0:000&gt; u %rip+0x38
MKLDNNPlugin+0x974a5:
00007ffa`dbad74a5 c5f811442420    vmovups xmmword ptr [rsp+20h],xmm0
00007ffa`dbad74ab 33c0            xor     eax,eax
00007ffa`dbad74ad 488d742420      lea     rsi,[rsp+20h]
00007ffa`dbad74b2 c5f877          vzeroupper
00007ffa`dbad74b5 0fa2            cpuid
00007ffa`dbad74b7 8906            mov     dword ptr [rsi],eax
00007ffa`dbad74b9 895e04          mov     dword ptr [rsi+4],ebx
00007ffa`dbad74bc 894e08          mov     dword ptr [rsi+8],ecx

0:000&gt; r
rax=0000000000000000 rbx=00000045088fb9e0 rcx=0000000000000001
rdx=000000000000101f rsi=00000045088fb4f0 rdi=00000045088fb4f0
rip=00007ffadbad746d rsp=00000045088fbab0 rbp=00000045088fbea4
 r8=000001edf6025440  r9=000001edf6025620 r10=000001edf6025440
r11=000001edf60256d0 r12=00007ffadd19001c r13=0000000000000000
r14=00007ffadba40000 r15=0000000000000000
iopl=0         nv up ei pl zr na po nc
cs=0033  ss=002b  ds=002b  es=002b  fs=0053  gs=002b             efl=00010244
MKLDNNPlugin+0x9746d:
00007ffa`dbad746d c5fdefc0        vpxor   ymm0,ymm0,ymm0


There are no debug symbols, so CreatePluginEngine symbol misleading here.
MKLDNN plugin is crashed during initialization of global variables (initterm) before DllMain() call.
Looks like some code near cpuid instruction was compiled with incorrect flags.
&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

Similar illegal instruction can be observed using &lt;denchmark-link:https://software.intel.com/en-us/articles/intel-software-development-emulator&gt;Intel® Software Development Emulator (SDE)&lt;/denchmark-link&gt;
 on any Windows machine (using  platform parameter).
Looks like it is Windows-specific problem. Linux binaries passes SDE check.
/cc &lt;denchmark-link:https://github.com/ilya-lavrenov&gt;@ilya-lavrenov&lt;/denchmark-link&gt;

&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

I can't suggest work around to bypass this problem.
Try to build and use DLDT from sources from here: &lt;denchmark-link:https://github.com/opencv/dldt/tree/2020.1&gt;https://github.com/opencv/dldt/tree/2020.1&lt;/denchmark-link&gt;
 (see  file)
		</comment>
		<comment id='12' author='Bleach665' date='2020-03-02T16:34:22Z'>
		Just want to chime in -- seeing the same behavior. Previous releases (2019) work on a i5-3470 machine, while 2020R1 fails (but does work on newer CPUs). From the library loading perspective, I see both versions look for (and fail to find) libmalloc.dll, but in case of success lookup of tbbmalloc.dll is then successfully performed. In case of failure it never happens.
		</comment>
		<comment id='13' author='Bleach665' date='2020-03-05T15:45:19Z'>
		Any updates on this, guys? Is there a workaround, or waiting for the next release is the only way (and will the next release fix this)?
		</comment>
		<comment id='14' author='Bleach665' date='2020-03-20T20:59:29Z'>
		&lt;denchmark-link:https://github.com/Bleach665&gt;@Bleach665&lt;/denchmark-link&gt;
 I'm also facing the very same issue, linking against the debug libraries (, the likes) work for me (kind of W/A)
		</comment>
		<comment id='15' author='Bleach665' date='2020-03-23T12:24:14Z'>
		UPD. Everything written below was tested on a CPU without AVX support.
Same issue with DLDT built from source. DLDT rev. &lt;denchmark-link:https://github.com/openvinotoolkit/openvino/commit/a347375d0188b58056887f382161c6ed6fc3dcb3&gt;a347375&lt;/denchmark-link&gt;
, Windows 10, CMake GUI 3.17.0, VS 2017 15.9.21.
As &lt;denchmark-link:https://github.com/mosdav&gt;@mosdav&lt;/denchmark-link&gt;
 wrote, with debug build all work fine, both DLDT sample app/bench and IE as OpenCV backend.
In release build we have errors, same as described above:
benchmark_app:
&lt;denchmark-code&gt;e:\Lib_prebuild\DLDT\dldt\bin\intel64\Release&gt;benchmark_app.exe -i e:\q\lena.jpg -m e:\Lib_prebuild\DLDT\dldt\model-optimizer\alexnet.xml -d CPU -api sync
[Step 1/11] Parsing and validating input arguments
[ INFO ] Parsing input parameters
[ INFO ] Files were added: 1
[ INFO ]     e:\q\lena.jpg
[ WARNING ] -nstreams default value is determined automatically for a device. Although the automatic selection usually provides a reasonable performance,but it still may be non-optimal for some cases, for more information look at README.

[Step 2/11] Loading Inference Engine
[ INFO ] InferenceEngine:
        API version ............ 2.1
        Build .................. custom_2020_a347375d0188b58056887f382161c6ed6fc3dcb3
        Description ....... API
[ INFO ] Device info:
[ ERROR ] Failed to create plugin e:\Lib_prebuild\DLDT\dldt\bin\intel64\Release\MKLDNNPlugin.dll for device CPU
Please, check your environment
Cannot load library 'e:\Lib_prebuild\DLDT\dldt\bin\intel64\Release\MKLDNNPlugin.dll': 1114 from cwd: e:\Lib_prebuild\DLDT\dldt\bin\intel64\Release
&lt;/denchmark-code&gt;

built IE as backend in Opencv:
&lt;denchmark-code&gt;OpenCV(4.3.0-pre) E:\Lib_prebuild\opencv\source\opencv\modules\dnn\src\op_inf_engine.cpp:881: error: (-2:Unspecified error) in function 'cv::dnn::InfEngineBackendNet::initPlugin'
&gt; Failed to initialize Inference Engine backend (device = CPU): Failed to create plugin c:\lib\path\MKLDNNPlugin.dll for device CPU
&gt; Please, check your environment
&gt; Cannot load library 'c:\lib\path\MKLDNNPlugin.dll': 1114 from cwd: C:\00CurWork\ImProcQCV\ImProcQCV
&gt; 
&lt;/denchmark-code&gt;

		</comment>
		<comment id='16' author='Bleach665' date='2020-03-25T20:55:25Z'>
		Code with problem looks like &lt;denchmark-link:https://github.com/opencv/dldt/blame/2020.1/inference-engine/src/mkldnn_plugin/nodes/argmax.cpp#L434-L437&gt;this&lt;/denchmark-link&gt;
.
&lt;denchmark-link:https://github.com/Bleach665&gt;@Bleach665&lt;/denchmark-link&gt;
 To workaround that you can try to comment out these lines:

REG_FACTORY_FOR_TYPE(avx512_common, ...
REG_FACTORY_FOR_TYPE(avx2, ...
do not touch lines with "sse" or "isa_any" to avoid performance regressions.

These files should be processed: argmax.cpp proposal.cpp resample.cpp
This is not a proper fix but should allow to run application on non-AVX CPU.
Problem is that cross-compiled dispatched code (mkldnn_plugin_layers_avx2 and mkldnn_plugin_layers_avx512 targets) has global dynamic initializers.
These "dispatched" binary files should not have global dynamic initializers at all:

their code is called unconditionally during library (DLL) load
compiler generates initializers code using AVX instructions (due cross-compilation with /arch:AVX2 or similar flags).


How to detect / check that problem is gone without running program

We need dumpbin + argmax.obj file from a build directory mkldnn_plugin_layers_avx2.dir\Release\ (AVX2 (or AVX512) here is important).
Run command: dumpbin.exe /ALL /OUT:argmax.log .\argmax.obj
Search for .CRT$XCU section in argmax.log file. You should see something like this:

SECTION HEADER #94A
.CRT$XCU name
       0 physical address
       0 virtual address
      10 size of raw data
   EF4E4 file pointer to raw data (000EF4E4 to 000EF4F3)
   EF4F4 file pointer to relocation table
       0 file pointer to line numbers
       2 number of relocations
       0 number of line numbers
40400040 flags
         Initialized Data
         8 byte align
         Read Only

RAW DATA #94A
  00000000: 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00  ................

RELOCATIONS #94A
                                                Symbol    Symbol
 Offset    Type              Applied To         Index     Name
 --------  ----------------  -----------------  --------  ------
 00000000  ADDR64            00000000 00000000       B96  ??__Ecpu@?A0x35d88e89@cpu@impl@mkldnn@@YAXXZ (void __cdecl mkldnn::impl::cpu::`anonymous namespace'::`dynamic initializer for 'cpu''(void))
 00000008  ADDR64            00000000 00000000       BBC  ??__E__reg__ArgMax@Cpu@Extensions@InferenceEngine@@YAXXZ (void __cdecl InferenceEngine::Extensions::Cpu::`dynamic initializer for '__reg__ArgMax''(void))

This INVALID dispatched binary have 2 pointers on code with dynamic initializers. This code runs unconditionally during DLL load.
Fixed binary should have zero size of .CRT$XCU section or the section should gone from the binary and its dump.

		</comment>
		<comment id='17' author='Bleach665' date='2020-03-26T14:15:53Z'>
		&lt;denchmark-link:https://github.com/alalek&gt;@alalek&lt;/denchmark-link&gt;
, thanks. With this changes IE work fine on non AVX CPU. I tested it on the benchmark_app and IE as backend in OpenCV.
However, after fix,  section in  has no zero size.
Before fix:
&lt;denchmark-code&gt;.CRT$XCU name
       0 physical address
       0 virtual address
      10 size of raw data
   324E2 file pointer to raw data (000324E2 to 000324F1)
   324F2 file pointer to relocation table
       0 file pointer to line numbers
       2 number of relocations
       0 number of line numbers
40400040 flags
         Initialized Data
         8 byte align
         Read Only
&lt;/denchmark-code&gt;

After:
&lt;denchmark-code&gt;.CRT$XCU name
       0 physical address
       0 virtual address
       8 size of raw data
    11AE file pointer to raw data (000011AE to 000011B5)
    11B6 file pointer to relocation table
       0 file pointer to line numbers
       1 number of relocations
       0 number of line numbers
40400040 flags
         Initialized Data
         8 byte align
         Read Only
&lt;/denchmark-code&gt;

&lt;denchmark-link:https://github.com/yury-gorbachev&gt;@yury-gorbachev&lt;/denchmark-link&gt;
, &lt;denchmark-link:https://github.com/w3sip&gt;@w3sip&lt;/denchmark-link&gt;
, &lt;denchmark-link:https://github.com/mosdav&gt;@mosdav&lt;/denchmark-link&gt;
, it might interest you.
		</comment>
		<comment id='18' author='Bleach665' date='2020-04-14T07:05:38Z'>
		Is this issue still present with just released 2020.2?
		</comment>
		<comment id='19' author='Bleach665' date='2020-04-14T13:08:23Z'>
		This issue is not fixed in 2020.2
		</comment>
		<comment id='20' author='Bleach665' date='2020-04-26T18:45:38Z'>
		My cpu core is i7 8750, still has this problem, anybody can help?
		</comment>
		<comment id='21' author='Bleach665' date='2020-04-26T18:51:02Z'>
		&lt;denchmark-link:https://github.com/andeyeluguo&gt;@andeyeluguo&lt;/denchmark-link&gt;
, not sure that current issue is your case. This is about non-AVX configurations.
		</comment>
		<comment id='22' author='Bleach665' date='2020-05-13T05:57:46Z'>
		Hi guys am a newbie programmer in OpenVINO environment. I went through the whole thread I couldn't figure out what should be done to run the latest OpenVINO toollkit on my i5-3320M (HP EliteBook 8470p)
Could someone write a script or some sort of program for people for like to me to use the Toolkit on older CPU version OR should I download OpenVINO 2019?
		</comment>
		<comment id='23' author='Bleach665' date='2020-05-13T06:20:17Z'>
		&lt;denchmark-link:https://github.com/AJV009&gt;@AJV009&lt;/denchmark-link&gt;
 can you describe your environment, please? Do you use MS-WIN or Linux or MacOS?
I use OpenVINO 2020.1 also on an Intel ATOM "ApolloLake", which doesn't have AVX CPU instructions.
I'm mainly using OpenVINO in a Docker container - as it installs quite a lot which clashes with some of my packages on my HOST.
OpenVINO comes with a lot of samples and demos - many of them could be used with Python and no need for cmake/make compilation. However, many samples&amp;demos are C or C++ and need to be compiled.
Which steps have you tried to far, where are you stuck?
In this GitHub repo there are several threads about AVX and CPU-Extension. You might find additional information there.
		</comment>
		<comment id='24' author='Bleach665' date='2020-05-13T06:59:40Z'>
		Okay I use MS-WIN with Anaconda as my package/project manager.
somewhere here -&gt; &lt;denchmark-link:https://docs.openvinotoolkit.org/2020.2/_docs_install_guides_installing_openvino_windows.html#model_optimizer_configuration_steps&gt;https://docs.openvinotoolkit.org/2020.2/_docs_install_guides_installing_openvino_windows.html#model_optimizer_configuration_steps&lt;/denchmark-link&gt;

Should I really reproduce the errors? (let me try again!)
I faced a TON of warnings which I ignored, but then ended up with a error while running the samples mentioned in the installation guide. (so I thought maybe my CPU wasn't supported, cause they already mentioned about CPUs &gt;= 6th gen)
I did a clean install this time it worked don't know what happened before!
BUT yeah I faced a new error -
###############|| Run Inference Engine classification sample ||###############
Waiting for 1 seconds, press a key to continue ...
        1 file(s) copied.
classification_sample_async.exe -i "C:\Program Files (x86)\IntelSWTools\openvino\deployment_tools\demo\car.png" -m "C:\Users\XeonAJ\Documents\Intel\OpenVINO\openvino_models\ir\public\squeezenet1.1\FP16\squeezenet1.1.xml" -d CPU
[ INFO ] InferenceEngine:
        API version ............ 2.1
        Build .................. 42025
        Description ....... API
[ INFO ] Parsing input parameters
[ INFO ] Parsing input parameters
[ INFO ] Files were added: 1
[ INFO ]     C:\Program Files (x86)\IntelSWTools\openvino\deployment_tools\demo\car.png
[ INFO ] Creating Inference Engine
[ ERROR ] Failed to create plugin C:\Program Files (x86)\IntelSWTools\openvino\deployment_tools\inference_engine\bin\intel64\Release\MKLDNNPlugin.dll for device CPU
Please, check your environment
Cannot load library 'C:\Program Files (x86)\IntelSWTools\openvino\deployment_tools\inference_engine\bin\intel64\Release\MKLDNNPlugin.dll': 1114 from cwd: C:\Users\XeonAJ\Documents\Intel\OpenVINO\inference_engine_samples_build\intel64\Release
Error
Is there any quick fixes that I should do?
		</comment>
		<comment id='25' author='Bleach665' date='2020-05-29T04:44:46Z'>
		Update: the issue addressed in the latest master. Could you please try?
Now, we have a special cmake macro to safely compile sources for different ISAs (see &lt;denchmark-link:https://github.com/openvinotoolkit/openvino/blob/master/inference-engine/src/mkldnn_plugin/CMakeLists.txt#L172-L187&gt;https://github.com/openvinotoolkit/openvino/blob/master/inference-engine/src/mkldnn_plugin/CMakeLists.txt#L172-L187&lt;/denchmark-link&gt;
)
CC &lt;denchmark-link:https://github.com/AlexPeskov&gt;@AlexPeskov&lt;/denchmark-link&gt;

		</comment>
		<comment id='26' author='Bleach665' date='2020-06-03T09:47:54Z'>
		&lt;denchmark-link:https://github.com/ilya-lavrenov&gt;@ilya-lavrenov&lt;/denchmark-link&gt;
  Did this fix missed the 2020.3 release? I see that the known issues mentions

28747 | CPU plugin does not work on Windows system with CPUs less then AVX2 instruction set (Intel Atom® processors)
Manually rebuild the CPU plugin from sources available in the public repository with CMake feature flags ENABLE_AVX2=OFF and ENABLE_AVX512=OFF.

		</comment>
		<comment id='27' author='Bleach665' date='2020-06-03T09:50:32Z'>
		The fix is big enough and it was decided (by &lt;denchmark-link:https://github.com/dmitry-gorokhov&gt;@dmitry-gorokhov&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/AlexPeskov&gt;@AlexPeskov&lt;/denchmark-link&gt;
) not to port it to 2020.3 release.
		</comment>
		<comment id='28' author='Bleach665' date='2020-06-03T14:13:21Z'>
		So when is the 2020.4 scheduled for? Considering it's a regression from 2019 releases, it's unfortunate to see it pushed back.
		</comment>
		<comment id='29' author='Bleach665' date='2020-06-03T14:21:26Z'>
		As a suggestion -- maybe it's worth having default distribution shipping all flavors of the CPU plugin; the client app could then evaluate CPU caps, and generate plugins.xml to load the suitable version.
		</comment>
		<comment id='30' author='Bleach665' date='2020-06-03T14:26:56Z'>
		&lt;denchmark-link:https://github.com/w3sip&gt;@w3sip&lt;/denchmark-link&gt;
 you can build CPU plugin and Inference Engine libraries from sources using current master branch. Does this way work for you? This check from your side would be very helpful.
		</comment>
		<comment id='31' author='Bleach665' date='2020-06-03T14:33:13Z'>
		Unfortunately, our current CI workflow is to ingest the Intel versioned binary distribution. Switch to building from source is under consideration at the moment (and definitely best avoided, if possible). If we do go that route, are there any guidelines regarding the toolchain? Versions of clang/cmake, etc?
		</comment>
		<comment id='32' author='Bleach665' date='2020-06-03T15:37:10Z'>
		&lt;denchmark-link:https://github.com/w3sip&gt;@w3sip&lt;/denchmark-link&gt;
 Build toolchains for OpenVINO are described here: &lt;denchmark-link:https://github.com/openvinotoolkit/openvino/blob/master/build-instruction.md&gt;https://github.com/openvinotoolkit/openvino/blob/master/build-instruction.md&lt;/denchmark-link&gt;

		</comment>
		<comment id='33' author='Bleach665' date='2020-06-20T22:20:54Z'>
		&lt;denchmark-link:https://github.com/ilya-lavrenov&gt;@ilya-lavrenov&lt;/denchmark-link&gt;
. You may be interested in this. I built OpenVINO from branch releases/2020/4, rev &lt;denchmark-link:https://github.com/openvinotoolkit/openvino/commit/ae9e0510f008220a297130c45e30bfc7fcf27b04&gt;ae9e051&lt;/denchmark-link&gt;
 and it work fine on non-AVX CPU. I tested on ,  and IE as OpenCV backend.
		</comment>
		<comment id='34' author='Bleach665' date='2020-06-22T08:47:35Z'>
		&lt;denchmark-link:https://github.com/Bleach665&gt;@Bleach665&lt;/denchmark-link&gt;
 thanks! Does it means that the original issue has gone?
		</comment>
		<comment id='35' author='Bleach665' date='2020-06-22T13:28:06Z'>
		&lt;denchmark-link:https://github.com/ilya-lavrenov&gt;@ilya-lavrenov&lt;/denchmark-link&gt;
 As you see fit. But I think it's better to wait for the release OpenVINO v.2020.4, test it, and if it works well at non-AVX CPU, then close this issue.
		</comment>
		<comment id='36' author='Bleach665' date='2020-06-23T15:44:32Z'>
		
@w3sip Build toolchains for OpenVINO are described here: https://github.com/openvinotoolkit/openvino/blob/master/build-instruction.md

I'm about to try to compile it on my Windows machine. Instructions mentions an extra download: Intel Graphics Drivers &lt;denchmark-link:https://github.com/openvinotoolkit/openvino/blob/master/build-instruction.md#software-requirements-1&gt;https://github.com/openvinotoolkit/openvino/blob/master/build-instruction.md#software-requirements-1&lt;/denchmark-link&gt;

However my build machine does not have an Intel GPU. Do you confirm this driver is not required for compilation, only for execution of the GPU plugin?
		</comment>
		<comment id='37' author='Bleach665' date='2020-06-23T15:48:30Z'>
		
Do you confirm this driver is not required for compilation, only for execution of the GPU plugin?

Absolutely right, driver is not required for compilation.
		</comment>
		<comment id='38' author='Bleach665' date='2020-07-15T13:48:28Z'>
		&lt;denchmark-link:https://github.com/Bleach665&gt;@Bleach665&lt;/denchmark-link&gt;
 Can you confirm this is solved in 2020.4? Thanks a lot
		</comment>
		<comment id='39' author='Bleach665' date='2020-07-15T14:23:11Z'>
		&lt;denchmark-link:https://github.com/JulienMaille&gt;@JulienMaille&lt;/denchmark-link&gt;
 Unfortunately, I can't confirm this now - I don't have a suitable PC on hand. I can check this only in a few days.
		</comment>
		<comment id='40' author='Bleach665' date='2020-07-16T02:33:50Z'>
		I have just installed openvino 2020.4 on a Windows 10 computer with a Ryzen 7 1700 CPU and 32 GB of RAM.  That CPU suports AVX and AVX2.   It failed on the two demo's with the same error as above i.e.
[ ERROR ] Failed to create plugin MKLDNNPlugin.dll for device CPU
My three previous versions all worked (2019.1.087, 2019.2.242, 2019.3.334) and I had installed 2020.2.117 but never tested it.
		</comment>
		<comment id='41' author='Bleach665' date='2020-07-20T19:14:16Z'>
		
@ilya-lavrenov. You may be interested in this. I built OpenVINO from branch releases/2020/4, rev ae9e051 and it work fine on non-AVX CPU. I tested on classification_sample_async, object_detection_sample_ssd and IE as OpenCV backend.

The GitHub master contains corresponding fix since 20/05/2020 update. So all inherited branches (2020.4 as well) have no such issue. And your local result confirms that.
I've just check it with 2020.4 binaries with Intel SDE emulation tool. The crash is gone.
		</comment>
		<comment id='42' author='Bleach665' date='2020-07-20T19:24:45Z'>
		I just finished testing. OpenVINO 2020.4 work perfect on non-AVX CPU.
Win10, VS 2017; OpenCV build with OpenVINO 2020.4, TBB and MKL.
Tested on security_barrier_camera_demo and IE as OpenCV backend.
		</comment>
	</comments>
</bug>