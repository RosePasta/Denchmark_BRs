<bug id='235' author='pichiste' open_date='2017-09-03T00:06:30Z' closed_time='2017-09-06T10:43:18Z'>
	<summary>3D reconstruction demo (Windows) - datumsPtr is nullptr in reconstruction3D post-process worker</summary>
	<description>
&lt;denchmark-h:h3&gt;Issue summary&lt;/denchmark-h&gt;

Hi there,
I'm attempting to get the 3D reconstruction demo working with input from some &lt;denchmark-link:https://en.wikipedia.org/wiki/PlayStation_Eye&gt;PS3 Eye cameras&lt;/denchmark-link&gt;
. I've got a custom producer (based on the  class) handling the camera input and can see the pose detection working for each camera just fine. However, it seems the  worker is not receiving the pose data.
This is how the custom classes are initialized in openpose3d.cpp:
    // Frames producer (e.g. video, webcam, ...)
    //auto wPointGrey = std::make_shared&lt;WPointGrey&gt;();
    auto wPs3Eye = std::make_shared&lt;WPs3Eye&gt;(); // &lt;---- ADDED
    // Processing
    auto wReconstruction3D = std::make_shared&lt;WReconstruction3D&gt;();
    // GUI (Display)
    auto wRender3D = std::make_shared&lt;WRender3D&gt;();

    op::Wrapper&lt;std::vector&lt;Datum3D&gt;&gt; opWrapper;
    // Add custom input
    const auto workerInputOnNewThread = true;
    //opWrapper.setWorkerInput(wPointGrey, workerInputOnNewThread);
    opWrapper.setWorkerInput(wPs3Eye, workerInputOnNewThread); // &lt;---- ADDED
    // Add custom processing
    const auto workerProcessingOnNewThread = true;
    opWrapper.setWorkerPostProcessing(wReconstruction3D, workerProcessingOnNewThread);
    // Add custom output
    const auto workerOutputOnNewThread = true;
    opWrapper.setWorkerOutput(wRender3D, workerOutputOnNewThread);
I've only changed two lines, where I've swapped the WPointGrey  producer for the custom WPs3Eye. As I mentioned above, 2D pose detection is working (it renders the webcam images + poses just fine!), but for some reason the pose data never shows up in the WReconstruction3D post-process.
More specifically, in reconstruction3D.cpp at the beginning of work function, datumsPtr is a nullptr:
void WReconstruction3D::work(std::shared_ptr&lt;std::vector&lt;Datum3D&gt;&gt;&amp; datumsPtr)
{
    // User's post-processing (after OpenPose processing &amp; before OpenPose outputs) here
        // datum.cvOutputData: rendered frame with pose or heatmaps
        // datum.poseKeypoints: Array&lt;float&gt; with the estimated pose
    try
    {
		if (datumsPtr == nullptr)
		{
			std::cout &lt;&lt; "datumsPtr is nullptr!" &lt;&lt; std::endl;
		}

        // Profiling speed
        const auto profilerKey = op::Profiler::timerInit(__LINE__, __FUNCTION__, __FILE__);
        if (datumsPtr != nullptr &amp;&amp; /*!datumsPtr-&gt;empty() &amp;&amp;*/ datumsPtr-&gt;size() == 3)
        {

        ...
Any help with this would be much appreciated! If it's useful I can send along the webcam code, although it seems like it would be totally unrelated to the post-process stage (?).
Many thanks in advance!
&lt;denchmark-h:h3&gt;Type of issue&lt;/denchmark-h&gt;


Help wanted

&lt;denchmark-h:h3&gt;System configuration&lt;/denchmark-h&gt;

Operating system: Windows 10 Pro
CUDA version: 8.0
cuDNN version: 5.1
GPU model: NVIDIA GeForce 1080 Ti
Caffe version: default
OpenCV version:  default
Compiler: Visual Studio 2015
	</description>
	<comments>
		<comment id='1' author='pichiste' date='2017-09-03T19:38:30Z'>
		Is WPs3Eye actually getting images? I.e. can you do some kind of imshow() or something similar in its work method to verify it is actually saving the image on the input cv::Mat of the Datum class?
		</comment>
		<comment id='2' author='pichiste' date='2017-09-05T21:19:23Z'>
		Yes, just tested and the images are being grabbed and put into Datum in  WPs3Eye. For clarity here is the work method:
std::shared_ptr&lt;std::vector&lt;Datum3D&gt;&gt; WPs3Eye::workProducer()
{
	try
	{
		// Grab image from each camera
		const auto cvMats = acquireImages(cameraList, matList);

		// Images to userDatum
		auto datums3d = std::make_shared&lt;std::vector&lt;Datum3D&gt;&gt;(cvMats.size());
		for (auto i = 0u; i &lt; cvMats.size(); i++)
		{
			datums3d-&gt;at(i).cvInputData = cvMats.at(i);
		}

		// TEST: Display images from camera 1 and 2
		if (!datums3d-&gt;empty())
		{
			cv::imshow("TEST CAM 1", datums3d-&gt;at(0).cvInputData);
			cv::imshow("TEST CAM 2", datums3d-&gt;at(1).cvInputData);
			cv::waitKey(0);
		}
		// Return Datum
		return datums3d;
	}
	catch (const std::exception&amp; e)
	{
		this-&gt;stop();
		op::error(e.what(), __LINE__, __FUNCTION__, __FILE__);
		return nullptr;
	}
}
WRender3D is also displaying the camera images and rendering the 2D poses totally fine. Could it be something related to how I've set up the WReconstruction3D post-processing worker?
		</comment>
		<comment id='3' author='pichiste' date='2017-09-05T21:31:21Z'>
		No idea. Maybe the OpenGL visualization is not working on your system? Can you try imshow in the wRender3D and to try to output the keypoints with cout in both wRender3D and WReconstruction3D?
		</comment>
		<comment id='4' author='pichiste' date='2017-09-05T22:28:45Z'>
		In WReconstruction3D, I simply get a nullptr for the incoming datumPtr in the work method.
In WRender3D I'm able to display the images and print out the keypoints from the workConsumer method (image below). The OpenGL view itself works fine, but of course doesn't show the body pose as WReconstruction3D is never able to make the calculations since it's receiving no data.
&lt;denchmark-link:https://user-images.githubusercontent.com/111979/30086198-4f8ec08c-929a-11e7-9a6b-b9f25aceb609.png&gt;&lt;/denchmark-link&gt;

		</comment>
		<comment id='5' author='pichiste' date='2017-09-05T22:33:54Z'>
		But wRender3D happens after WReconstruction3D. If WReconstruction3D has a nullptr, wRender3D will also have a nullptr.
And I am sorry, I have no idea what the error might actually be. As I do not have the multi-system camera installed anymore, I cannot debug it. Please, feel free to post the solution when you find it. Best
		</comment>
		<comment id='6' author='pichiste' date='2017-09-06T08:41:18Z'>
		Yeah, I also thought it was a bit weird that WReconstruction3D is getting a nullptr while WRender3D gets the data. I'll take another stab at it in the next couple of days and post what I find! Thanks
		</comment>
		<comment id='7' author='pichiste' date='2017-09-06T10:43:04Z'>
		Figured it out... it was a silly mistake on my part. In the WReconstruction3D work method, it checks for 3 cameras/images, but I'm only using 2, so it was never making it past the if statement:
if (datumsPtr != nullptr &amp;&amp; /* !datumsPtr-&gt;empty() &amp;&amp; */ datumsPtr-&gt;size() == 3)
The confusing part was that the work method receives a bunch of nullptr data between the real data, which is all I was seeing coming in. I'm not sure this is something I can change in WPs3Eye or if it's just the way it works, but either way it doesn't matter much.
Anyway, sorry for the bother! Thanks for your help!
		</comment>
		<comment id='8' author='pichiste' date='2017-09-06T15:02:10Z'>
		OK thanks for the feed-back!
		</comment>
		<comment id='9' author='pichiste' date='2018-04-24T17:35:32Z'>
		&lt;denchmark-link:https://github.com/pichiste&gt;@pichiste&lt;/denchmark-link&gt;
 Great that it works! Could you fork the repo with your added PS3Eye support or upload your modification somewhere? This would be awesome!
		</comment>
		<comment id='10' author='pichiste' date='2018-04-24T19:45:25Z'>
		&lt;denchmark-link:https://github.com/carstenschwede&gt;@carstenschwede&lt;/denchmark-link&gt;

The updated repo included this fix long time ago. The newest code already auto-adapts to the number of cameras, it doesn't required to hard code them anywhere.
EDITED: Sorry, I missed the part about PS3Eye support. No, that part is not incorporated, the incorporated part is to automatically adapt the code to the number of cameras. Sorry for the confusion. pichiste answered with his code.
		</comment>
		<comment id='11' author='pichiste' date='2018-04-24T20:31:44Z'>
		&lt;denchmark-link:https://github.com/gineshidalgo99&gt;@gineshidalgo99&lt;/denchmark-link&gt;
 Sorry, must have missed it. Thanks for the info.
		</comment>
		<comment id='12' author='pichiste' date='2018-04-25T07:09:31Z'>
		Hi &lt;denchmark-link:https://github.com/carstenschwede&gt;@carstenschwede&lt;/denchmark-link&gt;
, in case you just want the WPs3Eye producer, I've attached the files here (ps3Eye.hpp and ps3Eye.cpp). You should be able to use it the same as the WPointGrey producer, as stated in the first post.
I should note this is for Windows 10 + VS2015, and that WPs3Eye relies on these drivers:
&lt;denchmark-link:https://github.com/inspirit/PS3EYEDriver&gt;https://github.com/inspirit/PS3EYEDriver&lt;/denchmark-link&gt;

Here are my (old) notes on how to get the PS3EYEDriver drivers into the VS2015 project:

Copy PS3EYEDriver source to project
Copy libusb-1.0 library to 3rdparty\windows
In project properites -&gt; C/C++ -&gt; Additional Include Directories, enter path to libusb-1.0 library (ex: ....\3rdparty\windows\libusb-1.0\include\libusb-1.0)
In project properties -&gt; Linker -&gt; General -&gt; Additional Library Directoires, enter path to libusb-1.0 dll directory  (ex: ....\3rdparty\windows\libusb-1.0\MS64\dll
In project properties -&gt; Linker -&gt; Input -&gt; Additional Dependencies, enter: libusb-1.0.lib
Copy libusb-1.0.dll to windows\x64\Release

I ended up putting this on the backburner before I fully got 3d reconstruction working, but I think it was just a matter of entering more accurate camera calibration parameters.
Would be curious to hear if you get this working!
&lt;denchmark-link:https://github.com/CMU-Perceptual-Computing-Lab/openpose/files/1945845/ps3Eye_code.zip&gt;ps3Eye_code.zip&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>