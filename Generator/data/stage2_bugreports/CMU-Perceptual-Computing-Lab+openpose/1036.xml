<bug id='1036' author='ravijo' open_date='2019-01-19T15:21:26Z' closed_time='2019-04-14T00:44:40Z'>
	<summary>Segmentation fault while running examples in a standalone project</summary>
	<description>
&lt;denchmark-h:h3&gt;Issue Summary&lt;/denchmark-h&gt;

I have installed OpenPose and I am able to run it. Along with openpose.bin file, I am able to execute the examples also. However, I am getting the segmentation fault while running examples in a standalone project.
&lt;denchmark-h:h3&gt;OpenPose Output&lt;/denchmark-h&gt;

The same example (inside example directory) works fine. Please see below:
&lt;denchmark-code&gt;ravi@lab:~/tools/openpose$ ./build/examples/tutorial_api_cpp/7_synchronous_custom_input.bin 
Starting OpenPose demo...
Configuring OpenPose...
Starting thread(s)...
Auto-detecting all available GPUs... Detected 1 GPU(s), using 1 of them starting at GPU 0.
Last frame read and added to queue. Closing program after it is processed.
OpenPose demo successfully finished. Total time: 3.432620 seconds.
HDF5: infinite loop closing library
      D,T,F,FD,P,FD,P,FD,P,E,E,E,E,E,E,E,E,E,E,E,E,E,E,E,E,E,E,E,E,E,E,E,E,E,E,E,E,E,E,E,E,E,E,E,E,E,E,E,E,E,E,E,E,E,E,E,E,E,E,E,E,E,E,E,E,E,E,E,E,E,E,E,E,E,E,E,E,E,E,E,E,E,E,E,E,E,E,E,E,E,E,E,E,E,E,E,E,E,E,E,E,E,E,E,E
&lt;/denchmark-code&gt;

&lt;denchmark-h:h3&gt;Steps&lt;/denchmark-h&gt;


Standalone Project Compilation: The project was compiled as shown below:

&lt;denchmark-code&gt;ravi@lab:~/Desktop/openpose_example/build$ cmake -DCMAKE_BUILD_TYPE=Debug ..
-- The C compiler identification is GNU 4.8.4
-- The CXX compiler identification is GNU 4.8.4
-- Check for working C compiler: /usr/bin/cc
-- Check for working C compiler: /usr/bin/cc -- works
-- Detecting C compiler ABI info
-- Detecting C compiler ABI info - done
-- Detecting C compile features
-- Detecting C compile features - done
-- Check for working CXX compiler: /usr/bin/c++
-- Check for working CXX compiler: /usr/bin/c++ -- works
-- Detecting CXX compiler ABI info
-- Detecting CXX compiler ABI info - done
-- Detecting CXX compile features
-- Detecting CXX compile features - done
-- Found GFlags: /usr/include  
-- Found gflags  (include: /usr/include, library: /usr/lib/x86_64-linux-gnu/libgflags.so)
-- Found Glog: /usr/include  
-- Found glog    (include: /usr/include, library: /usr/lib/x86_64-linux-gnu/libglog.so)
-- Configuring done
-- Generating done
-- Build files have been written to: /home/ravi/Desktop/openpose_example/build
ravi@lab:~/Desktop/openpose_example/build$ make
Scanning dependencies of target 7_synchronous_custom_input.bin
[100%] Building CXX object CMakeFiles/7_synchronous_custom_input.bin.dir/7_synchronous_custom_input.cpp.o
Linking CXX executable 7_synchronous_custom_input.bin
[100%] Built target 7_synchronous_custom_input.bin
&lt;/denchmark-code&gt;


Copy execuetable to OpenPose directory: Generated executable was copied to OpenPose diretcory so that it can find models and image files.

&lt;denchmark-code&gt;ravi@lab:~/Desktop/openpose_example/build$ cp 7_synchronous_custom_input.bin ~/tools/openpose/
ravi@lab:~/Desktop/openpose_example/build$ cd ~/tools/openpose/
&lt;/denchmark-code&gt;

&lt;denchmark-h:h3&gt;Errors&lt;/denchmark-h&gt;

The executable file throws segmentation fault as shown below:
&lt;denchmark-code&gt;ravi@lab:~/tools/openpose$ ./7_synchronous_custom_input.bin 
Starting OpenPose demo...
Configuring OpenPose...
Starting thread(s)...
Auto-detecting all available GPUs... Detected 1 GPU(s), using 1 of them starting at GPU 0.
Segmentation fault (core dumped)
&lt;/denchmark-code&gt;

&lt;denchmark-h:h3&gt;Debugging using GDB&lt;/denchmark-h&gt;

I used gdb for debugging the error. Please see below:
&lt;denchmark-code&gt;ravi@lab:~/tools/openpose$ gdb 7_synchronous_custom_input.bin 
GNU gdb (Ubuntu 7.7.1-0ubuntu5~14.04.3) 7.7.1
Copyright (C) 2014 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &lt;http://gnu.org/licenses/gpl.html&gt;
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type "show copying"
and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
&lt;http://www.gnu.org/software/gdb/bugs/&gt;.
Find the GDB manual and other documentation resources online at:
&lt;http://www.gnu.org/software/gdb/documentation/&gt;.
For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from 7_synchronous_custom_input.bin...done.
(gdb) run
Starting program: /home/ravi/tools/openpose/7_synchronous_custom_input.bin 
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib/x86_64-linux-gnu/libthread_db.so.1".
[New Thread 0x7fffd3de1700 (LWP 16828)]
Starting OpenPose demo...
Configuring OpenPose...
Starting thread(s)...
[New Thread 0x7fffcc510700 (LWP 16831)]
Auto-detecting all available GPUs... Detected 1 GPU(s), using 1 of them starting at GPU 0.
[New Thread 0x7fffcbd0f700 (LWP 16832)]
[New Thread 0x7fffcb48d700 (LWP 16833)]
[New Thread 0x7fffac4f7700 (LWP 16834)]
[New Thread 0x7fffabcf6700 (LWP 16835)]
[New Thread 0x7fffab0bd700 (LWP 16836)]
[New Thread 0x7fffaa8bb700 (LWP 16837)]
[New Thread 0x7fffaacbc700 (LWP 16838)]
[New Thread 0x7fffaa0b9700 (LWP 16840)]
[New Thread 0x7fffaa4ba700 (LWP 16839)]
[New Thread 0x7fffa9cb8700 (LWP 16841)]
[New Thread 0x7fffa98b7700 (LWP 16842)]

Program received signal SIGSEGV, Segmentation fault.
0x00007ffff79153b8 in op::Datum::Datum(op::Datum const&amp;) () from /usr/local/lib/libopenpose.so.1.4.0
(gdb) bt
#0  0x00007ffff79153b8 in op::Datum::Datum(op::Datum const&amp;) () from /usr/local/lib/libopenpose.so.1.4.0
#1  0x00000000005f15c3 in UserDatum::UserDatum (this=0x7fffffffc360) at /home/ravi/Desktop/openpose_example/7_synchronous_custom_input.cpp:33
#2  0x000000000062f4e8 in op::WQueueAssembler&lt;std::shared_ptr&lt;std::vector&lt;UserDatum, std::allocator&lt;UserDatum&gt; &gt; &gt;, std::vector&lt;UserDatum, std::allocator&lt;UserDatum&gt; &gt; &gt;::work (
    this=0xa54938, tDatums=std::shared_ptr (count -72, weak -784774914) 0x7fffd29b8ad0) at /usr/local/include/openpose/thread/wQueueAssembler.hpp:73
#3  0x0000000000000000 in ?? ()
(gdb) bt full
#0  0x00007ffff79153b8 in op::Datum::Datum(op::Datum const&amp;) () from /usr/local/lib/libopenpose.so.1.4.0
No symbol table info available.
#1  0x00000000005f15c3 in UserDatum::UserDatum (this=0x7fffffffc360) at /home/ravi/Desktop/openpose_example/7_synchronous_custom_input.cpp:33
No locals.
#2  0x000000000062f4e8 in op::WQueueAssembler&lt;std::shared_ptr&lt;std::vector&lt;UserDatum, std::allocator&lt;UserDatum&gt; &gt; &gt;, std::vector&lt;UserDatum, std::allocator&lt;UserDatum&gt; &gt; &gt;::work (
    this=0xa54938, tDatums=std::shared_ptr (count -72, weak -784774914) 0x7fffd29b8ad0) at /usr/local/include/openpose/thread/wQueueAssembler.hpp:73
        tDatum = warning: RTTI symbol not found for class 'op::Datum'
{&lt;op::Datum&gt; = {&lt;No data fields&gt;}, boolThatUserNeedsForSomeReason = 255}
        profilerKey = ""
        __FUNCTION__ = "work"
#3  0x0000000000000000 in ?? ()
No symbol table info available.
(gdb) where
#0  0x00007ffff79153b8 in op::Datum::Datum(op::Datum const&amp;) () from /usr/local/lib/libopenpose.so.1.4.0
#1  0x00000000005f15c3 in UserDatum::UserDatum (this=0x7fffffffc360) at /home/ravi/Desktop/openpose_example/7_synchronous_custom_input.cpp:33
#2  0x000000000062f4e8 in op::WQueueAssembler&lt;std::shared_ptr&lt;std::vector&lt;UserDatum, std::allocator&lt;UserDatum&gt; &gt; &gt;, std::vector&lt;UserDatum, std::allocator&lt;UserDatum&gt; &gt; &gt;::work (
    this=0xa54938, tDatums=std::shared_ptr (count -72, weak -784774914) 0x7fffd29b8ad0) at /usr/local/include/openpose/thread/wQueueAssembler.hpp:73
#3  0x0000000000000000 in ?? ()
(gdb) list
105	
106	private:
107	    const std::vector&lt;std::string&gt; mImageFiles;
108	    unsigned long long mCounter;
109	};
110	
111	int main(int argc, char *argv[])
112	{
113	    // Parsing command line flags
114	    gflags::ParseCommandLineFlags(&amp;argc, &amp;argv, true);
&lt;/denchmark-code&gt;

&lt;denchmark-h:h3&gt;Type of Issue&lt;/denchmark-h&gt;


Execution error
Help wanted
Question

&lt;denchmark-h:h3&gt;Standalone Project Structure&lt;/denchmark-h&gt;


Files Structure: The project contains following files:

&lt;denchmark-code&gt;ravi@lab:~/Desktop/openpose_example$ tree .
.
├── 7_synchronous_custom_input.cpp
├── build
├── cmake
│   └── Modules
│       ├── FindGFlags.cmake
│       └── FindGlog.cmake
└── CMakeLists.txt

3 directories, 4 files
&lt;/denchmark-code&gt;


CPP File Content: The CPP file was copied from example 7_synchronous_custom_input.cpp. The code is uploaded to PasteBin . I have done minor two edits as mentioned below:

For easier debudding, multi threading was disabled (see line number 207)
Main function is moved directly (see line number 111)


CMakeLists.txt Content: CMakeLists.txt was desined as per the documention provided here

&lt;denchmark-code&gt;cmake_minimum_required(VERSION 2.8.7)
project(openpose_example)

add_definitions(-std=c++11)

list(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/cmake/Modules")

find_package(GFlags)
find_package(Glog)
find_package(OpenCV)
find_package(OpenPose REQUIRED)

include_directories(${OpenPose_INCLUDE_DIRS} ${GFLAGS_INCLUDE_DIR} ${GLOG_INCLUDE_DIR} ${OpenCV_INCLUDE_DIRS})

add_executable(7_synchronous_custom_input.bin 7_synchronous_custom_input.cpp)
target_link_libraries(7_synchronous_custom_input.bin ${OpenPose_LIBS} ${GFLAGS_LIBRARY} ${GLOG_LIBRARY} ${OpenCV_LIBS})
&lt;/denchmark-code&gt;

&lt;denchmark-h:h3&gt;System Configuration&lt;/denchmark-h&gt;



OpenPose version: Latest GitHub code (cloned just 12 days ago)


General configuration:

Installation mode: Using CMake GUI on Ubuntu
Operating system :
No LSB modules are available.
Distributor ID:	Ubuntu
Description:	Ubuntu 14.04.5 LTS
Release:	14.04
Codename:	trusty


Release or Debug mode: Default i.e., release
Compiler
gcc (Ubuntu 4.8.4-2ubuntu1~14.04.4) 4.8.4
Copyright (C) 2013 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.





Non-default settings:

3-D Reconstruction module added: Yes



3rd-party software:

Caffe version: Custom version. See below a snippet from CMakeLists.txt
execute_process(COMMAND git checkout f019d0dfe86f49d1140961f8c7dec22130c83154 WORKING_DIRECTORY ${CMAKE_SOURCE_DIR}/3rdparty/caffe)


CMake version:
ravi@lab:~/tools/openpose$ cmake --version
cmake version 3.2.2

CMake suite maintained and supported by Kitware (kitware.com/cmake).


OpenCV version: Pre-compiled installed using apt-get install libopencv-dev
ravi@lab:~/tools/openpose$ pkg-config --modversion opencv
2.4.8





GPU Information:

CUDA version:
ravi@ravi:~$ cat /usr/local/cuda/version.txt
CUDA Version 8.0.61


Cuda compiler version:
ravi@ravi:~$ nvcc --version
nvcc: NVIDIA (R) Cuda compiler driver
Copyright (c) 2005-2016 NVIDIA Corporation
Built on Tue_Jan_10_13:22:03_CST_2017
Cuda compilation tools, release 8.0, V8.0.61


cuDNN version:
ravi@ravi:~$ cat /usr/local/cuda/include/cudnn.h | grep CUDNN_M
#define CUDNN_MAJOR      5
#define CUDNN_MINOR      1
#define CUDNN_VERSION    (CUDNN_MAJOR * 1000 + CUDNN_MINOR * 100 + CUDNN_PATCHLEVEL)


GPU model:
ravi@lab:~/tools/openpose$ nvidia-smi 
Sat Jan 19 23:59:50 2019       
+-----------------------------------------------------------------------------+
| NVIDIA-SMI 384.130                Driver Version: 384.130                   |
|-------------------------------+----------------------+----------------------+
| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |
| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |
|===============================+======================+======================|
|   0  GeForce GTX 105...  Off  | 00000000:01:00.0  On |                  N/A |
| 45%   25C    P8   ERR! /  75W |    550MiB /  4030MiB |      5%      Default |
+-------------------------------+----------------------+----------------------+
                                                                               
+-----------------------------------------------------------------------------+
| Processes:                                                       GPU Memory |
|  GPU       PID   Type   Process name                             Usage      |
|=============================================================================|
|    0      1100      G   /usr/bin/X                                   297MiB |
|    0      2266      G   compiz                                       249MiB |
+-----------------------------------------------------------------------------+





CPU Information:

CPU brand &amp; model:
ravi@ravi:~$ cat /proc/cpuinfo | grep model
model		: 158
model name	: Intel(R) Core(TM) i7-7700 CPU @ 3.60GHz
model		: 158
model name	: Intel(R) Core(TM) i7-7700 CPU @ 3.60GHz
model		: 158
model name	: Intel(R) Core(TM) i7-7700 CPU @ 3.60GHz
model		: 158
model name	: Intel(R) Core(TM) i7-7700 CPU @ 3.60GHz
model		: 158
model name	: Intel(R) Core(TM) i7-7700 CPU @ 3.60GHz
model		: 158
model name	: Intel(R) Core(TM) i7-7700 CPU @ 3.60GHz
model		: 158
model name	: Intel(R) Core(TM) i7-7700 CPU @ 3.60GHz
model		: 158
model name	: Intel(R) Core(TM) i7-7700 CPU @ 3.60GHz


Total RAM available:
ravi@lab:~/tools/openpose$ free
             total       used       free     shared    buffers     cached
Mem:      16391964    4449824   11942140      41408     187868    2916960
-/+ buffers/cache:    1344996   15046968
Swap:     16734204          0   16734204





&lt;denchmark-h:h3&gt;Debugging using valgrind&lt;/denchmark-h&gt;

I run the program under  as well. Please download the compressed report from &lt;denchmark-link:https://www.dropbox.com/s/jh740yfvi8tdgox/valgrind-out.txt.zip?dl=0&gt;DropBox&lt;/denchmark-link&gt;
. Clearly, there are memory leaks reported at line number 41955 and 267862 etc.
I want to use OpenPose in other projects. Hence, first I am trying it to run in a standalone project. Can you please tell me a workaround to fix the Segmentation fault?
	</description>
	<comments>
		<comment id='1' author='ravijo' date='2019-01-21T17:18:03Z'>
		Actually, I have never exported OpenPose to another project, nor I have implemented the find_package(OpenPose). So I would need to ask a few questions to understand it.
Most probably you are forgetting some of the DEFINES that OpenPose introduces with its CMake configuration, or the find_package(OpenPose) is forgetting it.
Could I ask, when you add OpenPose with find_package, could you send a screenshot of the cmake-gui configuration that appears? Ideally it should keep all the OpenPose defines.
		</comment>
		<comment id='2' author='ravijo' date='2019-01-22T07:21:41Z'>
		Thank you very much &lt;denchmark-link:https://github.com/gineshidalgo99&gt;@gineshidalgo99&lt;/denchmark-link&gt;
. After installing and reinstalling OpenPose multiple times with different configurations each time, I found out the cause.
&lt;denchmark-h:h2&gt;Issue&lt;/denchmark-h&gt;

When WITH_EIGEN is set to APT_GET, the examples cannot be used outside the project. I believe that Eigen is not linked to this situation.
&lt;denchmark-h:h2&gt;Information&lt;/denchmark-h&gt;

Please note that I installed Eigen using apt-get and I have Eigen version 3.2.0.
&lt;denchmark-h:h2&gt;Workaround&lt;/denchmark-h&gt;

For now, I am keeping WITH_EIGEN = NONE and it is working fine. However, I do have Eigen and Ceres installed.
&lt;denchmark-h:h2&gt;Possible Culprit&lt;/denchmark-h&gt;

I guess find_package(OpenPose) is missing Eigen.
		</comment>
		<comment id='3' author='ravijo' date='2019-01-22T14:17:04Z'>
		Thanks for the debugging info! It was super useful. I will try to add &lt;denchmark-link:https://github.com/CMU-Perceptual-Computing-Lab/openpose/pull/772&gt;#772&lt;/denchmark-link&gt;
 soon then, that should add find_package(eigen) and should work from outside projects then.
		</comment>
		<comment id='4' author='ravijo' date='2019-01-23T04:59:56Z'>
		Thank you very much &lt;denchmark-link:https://github.com/gineshidalgo99&gt;@gineshidalgo99&lt;/denchmark-link&gt;
. I added  and   in the  file of standalone project. But it didn't work. I guess, it has to be linked with OpenPose. Anyway, I am waiting for your fix!

I will try to add #772 soon then, that should add find_package(eigen)

Is there any tentative schedule for this?
Thanks again!
		</comment>
		<comment id='5' author='ravijo' date='2019-04-14T00:44:40Z'>
		Sorry, added now! (Let me know if it still does not work)
		</comment>
	</comments>
</bug>