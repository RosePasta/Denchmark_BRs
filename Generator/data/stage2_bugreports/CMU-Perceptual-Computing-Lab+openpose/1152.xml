<bug id='1152' author='aaron-michaux' open_date='2019-03-21T14:24:50Z' closed_time='2019-04-14T01:37:10Z'>
	<summary>Race condition in 'get/set' logModes</summary>
	<description>
&lt;denchmark-h:h3&gt;Issue Summary&lt;/denchmark-h&gt;

Look at openpose/utilities/errorAndLog.cpp, and in particular, these functions at the bottom of the file:
&lt;denchmark-code&gt;        const std::vector&lt;LogMode&gt;&amp; getLogModes()
        {
            const std::lock_guard&lt;std::mutex&gt; lock{sConfigureLogMutex};
            return sLoggingModes;
        }

        void setLogModes(const std::vector&lt;LogMode&gt;&amp; loggingModes)
        {
            const std::lock_guard&lt;std::mutex&gt; lock{sConfigureLogMutex};
            sLoggingModes = loggingModes;
        }
&lt;/denchmark-code&gt;

Returning by reference in getLogModes invalidates the use of the mutex! Just return by value. It's going to be fast enough. If you're really worried about the speed, then get rid of the mutex, and store the std::vector in a std::shared_ptr. getLogModes should return the shared_ptr&lt;const std::vector&gt; by value, so that the callee can take ownership of the memory in case some other thread calls setLogModes.
C/C++ programmers usually use a bitfield approach to storing the log modes. This will be much faster than using vector, or a shared-ptr, and importantly, it is idiomatic.
&lt;denchmark-h:h3&gt;Type of Issue&lt;/denchmark-h&gt;

Coding error: Unsafe/invalid use of mutex.
&lt;denchmark-h:h3&gt;Your System Configuration&lt;/denchmark-h&gt;

I'm just reading the code directly. This bug affects all configurations.
	</description>
	<comments>
		<comment id='1' author='aaron-michaux' date='2019-04-14T01:37:10Z'>
		You are completely right! Fixed in the latest commit! (I removed the mutex, this function should be called at the beginning of the software so no point in keeping it thread-safe because then I would have to copy the vector every time it is called).
		</comment>
	</comments>
</bug>