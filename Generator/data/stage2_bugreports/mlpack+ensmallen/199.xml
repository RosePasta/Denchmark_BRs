<bug id='199' author='JJR1234' open_date='2020-05-13T18:46:33Z' closed_time='2020-07-26T19:46:57Z'>
	<summary>Constrained function optimization failed</summary>
	<description>
&lt;denchmark-h:h4&gt;Issue description&lt;/denchmark-h&gt;

I'm trying to optimize a simple quadratic function (x-beta)^2 with simple constraints: beta(0) &gt; 0. And, I used the ens::AugLagrangian optimizer for that, but the results produce NaN.
&lt;denchmark-h:h4&gt;Your environment&lt;/denchmark-h&gt;


version of ensmallen: ensmallen 2.12.1
operating system: Mac
compiler: Xcode/c++
version of Armadillo: Armadillo 9.870.2
any other environment information you think is relevant:

&lt;denchmark-h:h4&gt;Steps to reproduce&lt;/denchmark-h&gt;

#include &lt;ensmallen.hpp&gt;
class TestConstraint
{
public:
// Construct the object with the given the design
// matrix and responses.
TestConstraint(const arma::mat&amp; X) :
X(X) { }
&lt;denchmark-code&gt;// Return the objective function for model parameters beta.
double Evaluate(const arma::mat&amp; beta)
{
    return arma::accu(arma::square(X-beta));
}

// Compute the gradient for model parameters beta
void Gradient(const arma::mat&amp; beta, arma::mat&amp; g)
{
    g = -2 *(X - beta);
}

size_t NumConstraints() {
    return 1;
}

double EvaluateConstraint(const size_t i, const arma::mat&amp; beta){
    if(beta(i,0)&gt;0){
        return 0;
    }else{
        return DBL_MAX;
    }
}

void GradientConstraint(const size_t i, const arma::mat&amp; beta, 
                        arma::mat&amp; g){
    arma::mat g_tmp(beta.n_rows,beta.n_cols, arma::fill::zeros);
    g = g_tmp;
}
&lt;/denchmark-code&gt;

private:
// The design matrix.
const arma::mat&amp; X;
};
int main() {
arma::mat x(2,2,arma::fill::ones);
TestConstraint test(x);
&lt;denchmark-code&gt;ens::AugLagrangian optfun;

arma::mat beta(x.n_rows, x.n_cols, arma::fill::ones);

// Run the optimization
optfun.Optimize(test, beta);
std::cout &lt;&lt; beta ;
&lt;/denchmark-code&gt;

}
&lt;denchmark-h:h4&gt;Expected behavior&lt;/denchmark-h&gt;

The results should return a matrix of all ones.
&lt;denchmark-h:h4&gt;Actual behavior&lt;/denchmark-h&gt;

The retuned results are NaN. As I changed the input x, the results sometime is correct while sometimes are NaN. If the first element of x is negative (where the constraint condition is), the results are always NaN.
	</description>
	<comments>
		<comment id='1' author='JJR1234' date='2020-06-12T19:16:19Z'>
		This issue has been automatically marked as stale because it has not had any recent activity.  It will be closed in 7 days if no further activity occurs.  Thank you for your contributions! üëç
		</comment>
		<comment id='2' author='JJR1234' date='2020-06-17T22:59:37Z'>
		Hey &lt;denchmark-link:https://github.com/JJR1234&gt;@JJR1234&lt;/denchmark-link&gt;
, I'm really sorry this has taken so long to respond to.  It's been hard for me to find the time lately.  I'm able to reproduce your issue, so I will try to keep digging in here and find out what might be going on.  I know that the augmented Lagrangian algorithm can sometimes be hard to tune.
		</comment>
		<comment id='3' author='JJR1234' date='2020-06-17T23:31:44Z'>
		Ok... I managed to make the code work but I had to modify it in a few ways:
&lt;denchmark-code&gt;#include &lt;ensmallen.hpp&gt;
  
class TestConstraint
{
 public:
  // Construct the object with the given the design
  // matrix and responses.
  TestConstraint(const arma::mat&amp; X) :
  X(X) { }
~~
  // Return the objective function for model parameters beta.
  double Evaluate(const arma::mat&amp; beta)
  {
      return arma::accu(arma::square(X-beta));
  }
~~
  // Compute the gradient for model parameters beta
  void Gradient(const arma::mat&amp; beta, arma::mat&amp; g)
  {
      g = -2 *(X - beta);
  }
~~
  size_t NumConstraints() {
      return 1;
  }
~~
  double EvaluateConstraint(const size_t i, const arma::mat&amp; beta){
      if(beta(i,0)&gt;0){
          return 0;
      }else{
          return beta(i, 0);
      }
  }
~~
  void GradientConstraint(const size_t i, const arma::mat&amp; beta,~
                          arma::mat&amp; g){
      arma::mat g_tmp(beta.n_rows,beta.n_cols, arma::fill::zeros);
      g_tmp[i] = beta(i, 0) &gt; 0 ? 0 : 1;
      g = g_tmp;
  }

 private:
  // The design matrix.
  const arma::mat&amp; X;
};

int main() {
  arma::mat x(2,2,arma::fill::ones);
  TestConstraint test(x);

  ens::AugLagrangian optfun;

  arma::mat beta(x.n_rows, x.n_cols, arma::fill::ones);
  beta *= -1;

  // Run the optimization
  optfun.Optimize(test, beta);
  std::cout &lt;&lt; beta ;
}
&lt;/denchmark-code&gt;

I'm just going to write now what I had to do to make this work, and then tomorrow I'll figure out the right way to actually fix these things:


The initial point you were using is actually the optimum.  I changed the code to not start from the optimum (it now starts from [-1 -1; -1 -1]), because it appears L-BFGS will not terminate when the gradient norm is 0 on the first iteration, leading to it taking an infinite step, hence all the NaNs.


I changed the constraints to be "soft": they don't take value 0 or DBL_MAX now, but instead when a coordinate of beta is negative, what's returned is "how far" we are from a feasible solution.  I updated the gradient accordingly.  This is because the augmented Lagrangian method repeatedly applies a higher and higher penalty value on a "modified" objective function, but that "modified" objective function still needs to be differentiable.  I think that this point is not described correctly in the documentation.  I will check tomorrow and figure out how it can be updated if necessary.


Sorry for the problems that you faced!  I hope my message here is helpful (even if it is very late).
		</comment>
		<comment id='4' author='JJR1234' date='2020-06-18T01:56:17Z'>
		&lt;denchmark-link:https://github.com/rcurtin&gt;@rcurtin&lt;/denchmark-link&gt;
 This is great and very helpful. Thank you so much!
		</comment>
		<comment id='5' author='JJR1234' date='2020-06-23T00:20:05Z'>
		I opened &lt;denchmark-link:https://github.com/mlpack/ensmallen/pull/201&gt;#201&lt;/denchmark-link&gt;
 to fix the issue.  Thanks again for the report! 
		</comment>
		<comment id='6' author='JJR1234' date='2020-07-23T00:24:20Z'>
		This issue has been automatically marked as stale because it has not had any recent activity.  It will be closed in 7 days if no further activity occurs.  Thank you for your contributions! üëç
		</comment>
		<comment id='7' author='JJR1234' date='2020-07-26T19:46:57Z'>
		WIth &lt;denchmark-link:https://github.com/mlpack/ensmallen/pull/201&gt;#201&lt;/denchmark-link&gt;
 merged let's close this one. If you have any other issue don't hesitate to open another issue.
		</comment>
	</comments>
</bug>