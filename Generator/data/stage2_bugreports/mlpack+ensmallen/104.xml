<bug id='104' author='greatsharma' open_date='2019-04-10T07:22:03Z' closed_time='2019-07-26T02:53:44Z'>
	<summary>Infinite loop bug in SGD</summary>
	<description>
When we run SGD with 0 batch size then the loop goes infinite. Although it is very stupid thing to use 0 batch size but user can accidentally set batch size to 0 ( as I did it accidentally ). And as training on very large data set and complex machine learning models do take large amount of time so if an user accidentally set batch size 0 for such situation then they may think that the optimizer is taking so long time probably due to large data set and complex model but indeed they were stuck in a infinite loop and were not aware.
And if we set batch size to 0 then logically our optimizer shouldn't do anything i.e., it will not update the iterate ( initial points given by user ) and the overallObjective return by the optimizer is the value of the function which is to be optimized at that initial point given by the user.
Apart from this as software engineering tells us that while testing we should handle such boundary conditions.
	</description>
	<comments>
		<comment id='1' author='greatsharma' date='2019-04-10T07:34:59Z'>
		This issue is resolved in &lt;denchmark-link:https://github.com/mlpack/ensmallen/pull/105&gt;#105&lt;/denchmark-link&gt;
.
		</comment>
		<comment id='2' author='greatsharma' date='2019-04-12T04:08:32Z'>
		Agreed, it would be useful to catch this condition.  Thanks for looking into it.
		</comment>
		<comment id='3' author='greatsharma' date='2019-04-12T17:06:04Z'>
		Personally, I find it difficult to draw the line between what should be checked and what not, as you pointed out, using a batch size of 0 doesn't make much sense. Also, I think we can create a bunch of optimizer parameter combinations that will trigger a similar behavior.
		</comment>
		<comment id='4' author='greatsharma' date='2019-04-12T17:31:04Z'>
		&lt;denchmark-link:https://github.com/zoq&gt;@zoq&lt;/denchmark-link&gt;
 I do agree with your point but I mentioned it just because I stuck in it accidentally and after few minutes when I close the execution and look closer to sgd class then I realised this. But maybe user don't look at the sgd class and they just use mlpack for developing purpose and not for contribution. Rest as mentioned by &lt;denchmark-link:https://github.com/rcurtin&gt;@rcurtin&lt;/denchmark-link&gt;
 in &lt;denchmark-link:https://github.com/mlpack/ensmallen/pull/105&gt;#105&lt;/denchmark-link&gt;
 I do throw an exception for that.
		</comment>
		<comment id='5' author='greatsharma' date='2019-07-19T01:53:48Z'>
		This issue has been automatically marked as stale because it has not had any recent activity.  It will be closed in 7 days if no further activity occurs.  Thank you for your contributions! üëç
		</comment>
	</comments>
</bug>