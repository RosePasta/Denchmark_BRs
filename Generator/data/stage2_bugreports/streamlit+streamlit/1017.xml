<bug id='1017' author='benelot' open_date='2020-01-26T14:52:49Z' closed_time='2020-01-29T00:33:03Z'>
	<summary>Chart data of removed chart is never cleared</summary>
	<description>
&lt;denchmark-h:h1&gt;Summary&lt;/denchmark-h&gt;

If I create a chart and add a number of rows, then replace it with some .markdown, the chart data is not cleared from the chrome tabs memory.
&lt;denchmark-h:h1&gt;Steps to reproduce&lt;/denchmark-h&gt;

Run the code below. (based on the &lt;denchmark-link:https://docs.streamlit.io/advanced_concepts.html#animate-elements&gt;https://docs.streamlit.io/advanced_concepts.html#animate-elements&lt;/denchmark-link&gt;
). If creates a chart, fills it with random data, then replaces with .markdown('Done.') and makes a second chart to continue adding data.
&lt;denchmark-code&gt;import streamlit as st
import numpy as np
import time

progress_bar = st.progress(0)
status_text = st.empty()
rows_qty = 5000
chart = st.line_chart(np.random.randn(rows_qty, 2))
chart2 = st.empty()

for i in range(100):
    # Update progress bar.
    progress_bar.progress(i)

    new_rows = np.random.randn(rows_qty, 2)

    # Update status text.
    status_text.text(
        'The latest random number is: %s' % new_rows[-1, 1])

    # Append data to the chart.
    if i &lt; 50:
        chart.add_rows(new_rows)
    elif i == 50:
        chart.markdown('Done.')
        chart2.line_chart(new_rows)
    else:
        chart2.add_rows(new_rows)


    # Pretend we're doing some computation that takes time.
    #time.sleep(0.1)

status_text.text('Done!')
st.balloons()
&lt;/denchmark-code&gt;

&lt;denchmark-h:h2&gt;Expected behavior:&lt;/denchmark-h&gt;

I expect the data from the first chart to be cleared from the memory. If this is not happening, each streamlit has a maximum amount of data to upload and it is not suitable for continuous output of data (I have some advanced version of this, where I plot a window of the last n data points but old data never gets cleared. See below.)
&lt;denchmark-h:h2&gt;Actual behavior:&lt;/denchmark-h&gt;

The data is not dropped from the browser's memory and the tab crashes during about half of the second chart filling (75% of the streamlit progress bar, around 1.4 Gb RAM in chrome tab).
&lt;denchmark-h:h2&gt;Is this a regression?&lt;/denchmark-h&gt;

no
&lt;denchmark-h:h1&gt;Debug info&lt;/denchmark-h&gt;


Streamlit version: 0.53.0
Using Conda
OS version: Ubuntu Linux Mint 18.3
Browser version: Chrome Version 80.0.3987.16

&lt;denchmark-h:h1&gt;Additional info&lt;/denchmark-h&gt;

Based on this discuss topic:
&lt;denchmark-link:https://discuss.streamlit.io/t/animation-to-show-only-the-last-n-datapoints/1686&gt;https://discuss.streamlit.io/t/animation-to-show-only-the-last-n-datapoints/1686&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='benelot' date='2020-01-29T00:27:32Z'>
		Hey &lt;denchmark-link:https://github.com/benelot&gt;@benelot&lt;/denchmark-link&gt;
! I believe this issue is fixed by the suggestion here: &lt;denchmark-link:https://discuss.streamlit.io/t/animation-to-show-only-the-last-n-datapoints/1686/3?u=tim&gt;https://discuss.streamlit.io/t/animation-to-show-only-the-last-n-datapoints/1686/3?u=tim&lt;/denchmark-link&gt;

tl;dr: edit your ~/.streamlit/config.toml and add
&lt;denchmark-code&gt;[global]
minCachedMessageSize = inf
&lt;/denchmark-code&gt;

This will disable the message cache that both the server and browser apps maintain to reduce the overhead of subsequent runs of an app (but that behaves pathologically for long-running apps that generate tons of data, like yours).
		</comment>
		<comment id='2' author='benelot' date='2020-01-29T00:33:02Z'>
		I'm going to close this issue, but please feel free to re-open if the suggestion above doesn't fix your issue!
(I've tested it locally, and the memory usage stabilizes at a reasonable level. But the chart renderer really struggles to keep up with such large amounts of data, so you may still end up with issues where the browser becomes unresponsive while trying to render 5000-point graphs many times per second. Altair, which is what Streamlit uses to render line charts, is not designed for this volume of data.)
		</comment>
	</comments>
</bug>