<bug id='748' author='lifan-ake' open_date='2019-11-26T03:30:12Z' closed_time='2020-04-01T16:40:25Z'>
	<summary>When iteratively 'add_rows' to a chart, the index of the drawing chart is not right.</summary>
	<description>
&lt;denchmark-h:h1&gt;Summary&lt;/denchmark-h&gt;

When iteratively 'add_rows' to a chart, the index of the drawing chart is not right.
&lt;denchmark-h:h1&gt;Steps to reproduce&lt;/denchmark-h&gt;

When I draw the chart in the following way, the index of the chart will be wrong.
import streamlit as st
import pandas as pd

chart = st.line_chart()

for i in range(10):
    chart.add_rows(pd.DataFrame([[i+1]], columns=['a']))
&lt;denchmark-h:h2&gt;Expected behavior:&lt;/denchmark-h&gt;

The index in the chart should be 0 to 9 with step 1.
&lt;denchmark-h:h2&gt;Actual behavior:&lt;/denchmark-h&gt;

But the actual index is like the following chart.
&lt;denchmark-link:https://user-images.githubusercontent.com/5110214/69596873-16d0fb00-103f-11ea-92c1-16cdaed69b5a.png&gt;&lt;/denchmark-link&gt;

&lt;denchmark-h:h2&gt;Is this a regression?&lt;/denchmark-h&gt;

no
&lt;denchmark-h:h1&gt;Debug info&lt;/denchmark-h&gt;


Streamlit version: 0.50.2
Python version: 3.6.9
Using Conda
OS version: macOS Catalina 10.15
Browser version: Chrome 78.0.3904.108

&lt;denchmark-h:h1&gt;Additional information&lt;/denchmark-h&gt;

My fixing suggestion.
def _maybe_melt_data_for_add_rows(data, delta_type, last_index):
    import pandas as pd
    import streamlit.elements.data_frame_proto as data_frame_proto

    # For some delta types we have to reshape the data structure
    # otherwise the input data and the actual data used
    # by vega_lite will be different and it will throw an error.
    if delta_type in DELTAS_TYPES_THAT_MELT_DATAFRAMES:
        if not isinstance(data, pd.DataFrame):
            data = data_frame_proto.convert_anything_to_df(data)

        if type(data.index) is pd.RangeIndex:
            old_step = _get_pandas_index_attr(data, "step")

            # We have to drop the predefined index
            data = data.reset_index(drop=True)

            old_stop = _get_pandas_index_attr(data, "stop")

            if old_step is None or old_stop is None:
                raise StreamlitAPIException(
                    "'RangeIndex' object has no attribute 'step'"
                )

            start = last_index + old_step
            stop = last_index + old_step + old_stop

            data.index = pd.RangeIndex(start=start, stop=stop, step=old_step)
            last_index = stop  # I think this line should be last_index = stop - 1

        data = pd.melt(data.reset_index(), id_vars=["index"])

    return data, last_index
	</description>
	<comments>
		<comment id='1' author='lifan-ake' date='2019-12-04T18:45:00Z'>
		Hi @VincentOnGit,
I might be misunderstanding, but this looks correct to me. The posted code adds rows with values from 1 to 10 to the chart, because you're passing i+1 as the value for each DataFrame you construct in your loop.
To get your chart to have values from 0 to 9, you can modify your code to not offset the range iterator by 1:
import streamlit as st
import pandas as pd

chart = st.line_chart()

for i in range(10):
    chart.add_rows(pd.DataFrame([[i]], columns=['a']))  # &lt;-- [[i]], instead of [[i+1]]
		</comment>
		<comment id='2' author='lifan-ake' date='2019-12-04T18:46:15Z'>
		I'm going to close this, as it doesn't seem like a bug in Streamlit, but feel free to re-open if I've misunderstood something!
		</comment>
		<comment id='3' author='lifan-ake' date='2019-12-04T19:00:38Z'>
		I think what this might be is we need to set the index, so the call becomes
chart.add_rows(pd.DataFrame([[i+1]], columns=['a']).set_index('a'))
Or
chart.add_rows(pd.DataFrame([[i+1]], columns=['index']))
		</comment>
		<comment id='4' author='lifan-ake' date='2019-12-06T21:56:14Z'>
		Hi &lt;denchmark-link:https://github.com/tconkling&gt;@tconkling&lt;/denchmark-link&gt;

I think that @VincentOnGit is right and his proposed solution:
last_index = stop  # I think this line should be last_index = stop - 1
solved the issue for me.  If you run the code:
&lt;denchmark-code&gt;import streamlit as st
import numpy as np

y = np.arange(10, 20).reshape(-1, 1)

st.line_chart(y)

chart = st.line_chart(y[0])

for i in range(0, 10):
    chart.add_rows(y[i])
    time.sleep(0.05)
&lt;/denchmark-code&gt;

you can actually see that the first plot is correct, but the second one gives you wrong x axis labels (from 0 to 18).
Also, I'm not sure if that's a bug or I'm just using it wrong, but I think it's weird that you initiate the plot with the first datapoint y[0] (in st.line_chart(y[0]) ), but then still have to add y[0] again. I guess it would be better if you could simply iterate over range(1, 10).
&lt;denchmark-link:https://github.com/jrhone&gt;@jrhone&lt;/denchmark-link&gt;
 your first example throws an error, while the second one works only if you have a single column dataframe.
However, awesome library ;)
Info
Python 3.6.4
streamlit 0.51.0
altair 3.3.0
pandas 0.24.2
numpy 1.16.2
Windows 10
		</comment>
		<comment id='5' author='lifan-ake' date='2019-12-11T16:26:42Z'>
		Hi &lt;denchmark-link:https://github.com/jj-curious&gt;@jj-curious&lt;/denchmark-link&gt;

Thanks for the snippet! Re-opening for us to look into this.
Regarding my example above that threw an error, where we're calling , this was actually due to a bug in Streamlit and should be fixed after this PR is merged &lt;denchmark-link:https://github.com/streamlit/streamlit/pull/795&gt;#795&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>