<bug id='923' author='dchudz' open_date='2020-01-06T06:38:57Z' closed_time='2020-09-14T18:48:20Z'>
	<summary>matplotlib globals cause problems with `pyplot()` if multiple sessions</summary>
	<description>
I'm not actually sure if this is a documentation suggestion or bug report or what, but it seems worth noting:
I run this with streamlit (0.52.2):
&lt;denchmark-code&gt;import time
import streamlit as st
import matplotlib.pyplot as plt

while True:
    plt.scatter([1, 2, 3], [1, 2, 3])
    st.pyplot()
    time.sleep(.2)
&lt;/denchmark-code&gt;

I open one browser window, and everything is as expected (I see a long series of plots). If I view the app in another browser tab, then one of the tabs gets this traceback:
&lt;denchmark-code&gt;IndexError: list index out of range
Traceback:
  File "/Users/davidchudzicki/.virtualenvs/streamlit/lib/python3.6/site-packages/streamlit/ScriptRunner.py", line 324, in _run_script
    exec(code, module.__dict__)
  File "/Users/davidchudzicki/streamlit_end_code_block/b.py", line 8, in &lt;module&gt;
    st.pyplot()
  File "/Users/davidchudzicki/.virtualenvs/streamlit/lib/python3.6/site-packages/streamlit/__init__.py", line 152, in wrapped_method
    return method.__get__(dg)(*args, **kwargs)
  File "/Users/davidchudzicki/.virtualenvs/streamlit/lib/python3.6/site-packages/streamlit/DeltaGenerator.py", line 135, in wrapped_method
    return dg._enqueue_new_element_delta(marshall_element, delta_type, last_index)
  File "/Users/davidchudzicki/.virtualenvs/streamlit/lib/python3.6/site-packages/streamlit/DeltaGenerator.py", line 392, in _enqueue_new_element_delta
    rv = marshall_element(msg.delta.new_element)
  File "/Users/davidchudzicki/.virtualenvs/streamlit/lib/python3.6/site-packages/streamlit/DeltaGenerator.py", line 133, in marshall_element
    return method(dg, element, *args, **kwargs)
  File "/Users/davidchudzicki/.virtualenvs/streamlit/lib/python3.6/site-packages/streamlit/DeltaGenerator.py", line 1305, in pyplot
    pyplot.marshall(element, fig, clear_figure, **kwargs)
  File "/Users/davidchudzicki/.virtualenvs/streamlit/lib/python3.6/site-packages/streamlit/elements/pyplot.py", line 57, in marshall
    fig.savefig(image, **kwargs)
  File "/Users/davidchudzicki/.virtualenvs/streamlit/lib/python3.6/site-packages/matplotlib/pyplot.py", line 723, in savefig
    fig.canvas.draw_idle()   # need this if 'transparent=True' to reset colors
  File "/Users/davidchudzicki/.virtualenvs/streamlit/lib/python3.6/site-packages/matplotlib/backend_bases.py", line 1914, in draw_idle
    self.draw(*args, **kwargs)
  File "/Users/davidchudzicki/.virtualenvs/streamlit/lib/python3.6/site-packages/matplotlib/backends/backend_agg.py", line 388, in draw
    self.figure.draw(self.renderer)
  File "/Users/davidchudzicki/.virtualenvs/streamlit/lib/python3.6/site-packages/matplotlib/artist.py", line 38, in draw_wrapper
    return draw(artist, renderer, *args, **kwargs)
  File "/Users/davidchudzicki/.virtualenvs/streamlit/lib/python3.6/site-packages/matplotlib/figure.py", line 1709, in draw
    renderer, self, artists, self.suppressComposite)
  File "/Users/davidchudzicki/.virtualenvs/streamlit/lib/python3.6/site-packages/matplotlib/image.py", line 135, in _draw_list_compositing_images
    a.draw(renderer)
  File "/Users/davidchudzicki/.virtualenvs/streamlit/lib/python3.6/site-packages/matplotlib/artist.py", line 38, in draw_wrapper
    return draw(artist, renderer, *args, **kwargs)
  File "/Users/davidchudzicki/.virtualenvs/streamlit/lib/python3.6/site-packages/matplotlib/axes/_base.py", line 2607, in draw
    self._update_title_position(renderer)
  File "/Users/davidchudzicki/.virtualenvs/streamlit/lib/python3.6/site-packages/matplotlib/axes/_base.py", line 2548, in _update_title_position
    ax.xaxis.get_ticks_position() in choices):
  File "/Users/davidchudzicki/.virtualenvs/streamlit/lib/python3.6/site-packages/matplotlib/axis.py", line 2146, in get_ticks_position
    self._get_ticks_position()]
  File "/Users/davidchudzicki/.virtualenvs/streamlit/lib/python3.6/site-packages/matplotlib/axis.py", line 1833, in _get_ticks_position
    minor = self.minorTicks[0]
&lt;/denchmark-code&gt;

If I do this instead, there are no problems:
&lt;denchmark-code&gt;import time
import streamlit as st
import matplotlib.pyplot as plt

while True:
    fig, ax = plt.subplots()
    ax.scatter([1, 2, 3], [1, 2, 3])
    st.pyplot(fig)
    time.sleep(.2)
&lt;/denchmark-code&gt;

Not too surprising. (Seems hard to correctly support the matplotlib global objects...) But maybe it's worth adding warning? (Or even eventually deprecating the no-argument pyplot.)
	</description>
	<comments>
		<comment id='1' author='dchudz' date='2020-01-08T20:36:10Z'>
		(Just edited the title. Originally I said "matlab" for some silly reason - probably the word was in my head because the problem here is matplotlib's "matlab-style" interface.)
		</comment>
		<comment id='2' author='dchudz' date='2020-04-07T00:22:12Z'>
		Discussion: &lt;denchmark-link:https://discuss.streamlit.io/t/matplotlib-thread-safety-issues/2393&gt;https://discuss.streamlit.io/t/matplotlib-thread-safety-issues/2393&lt;/denchmark-link&gt;

		</comment>
		<comment id='3' author='dchudz' date='2020-04-07T00:54:54Z'>
		"Oops! That page doesnâ€™t exist or is private."
		</comment>
		<comment id='4' author='dchudz' date='2020-04-07T03:37:53Z'>
		Sorry, should have mentioned it's a private link.
We're leaning towards allowing the functionality and displaying a warning.
		</comment>
		<comment id='5' author='dchudz' date='2020-04-07T17:24:24Z'>
		makes sense
		</comment>
		<comment id='6' author='dchudz' date='2020-04-14T07:54:27Z'>
		Update: we did a little research and here is a summary
&lt;denchmark-h:h3&gt;The problem&lt;/denchmark-h&gt;

Matplotlib has two different types of APIs you can use. One has global state, and the other only has local state. Turns out that "global-state" API is not thread-safe, while the "local state" one is.
import matplotlib.pyplot as plt

# Global-state API (not thread-safe)
plt.plot(values)

# Local-state API (thread-safe)
fig, ax = plt.subplots()
ax.plot(values)
The reason for this is obvious: when two threads modify the same global state without using control primitives like thread.Lock, things go crazy. For example, one thread could be drawing into the global figure while another trying to render the global figure.
&lt;denchmark-h:h3&gt;Possible solutions&lt;/denchmark-h&gt;

Option 1: We deprecate the global-state API and only support the local-state API in the long run. Which means in the short run we'd show a warning when people use the global-state API telling them it's API is deprecated in Streamlit, what to use instead, etc. Our docs would also be updated to make all of this clear.
Option 2: We support both APIs but in our docs we loudly tell people that the local-state API is the preferred one, and explain why. And to drive the point further, we'd also show a warning when any time you use the global-state API.
For both options there would be some way to turn off the warning. Maybe by passing st.pyplot(..., show_deprecation_warning=False).
&lt;denchmark-h:h3&gt;Proposal&lt;/denchmark-h&gt;

Our preference is for Option 1. The reason being that while the global-state API is nice when hacking something together, it will break when deploying the app. There's just no way around it (unless our research on this is wrong).
		</comment>
		<comment id='7' author='dchudz' date='2020-04-14T17:11:01Z'>
		Yeah. For what it's worth, your Option 1 seems right to me.
I was initially a little put off from Streamlit when I saw this error in an app someone tweeted. It took me some time to realize that the problem was limited to matplotlib global state, and not a deeper issue with Streamlit itself.
If you stop supporting the global-state API you'll avoid that kind of perception.
		</comment>
		<comment id='8' author='dchudz' date='2020-09-07T19:22:48Z'>
		PR provided handles Option 1 using our preference with how to manage deprecations.
		</comment>
		<comment id='9' author='dchudz' date='2020-09-14T18:48:20Z'>
		A deprecation warning has been merged in for the next release.
		</comment>
	</comments>
</bug>