<bug id='984' author='MarcSkovMadsen' open_date='2020-01-17T04:27:59Z' closed_time='2020-02-12T21:45:04Z'>
	<summary>PyDeck example from PyDeck documentation not working</summary>
	<description>
&lt;denchmark-h:h1&gt;Summary&lt;/denchmark-h&gt;

I've upgraded to Streamlit 0.53 and wan't to test out the new st.pydeck_chart function.
At some stage in my work I wan't to add tooltips and I cannot make it work. For example the example from the documentation at &lt;denchmark-link:https://deckgl.readthedocs.io/en/latest/tooltip.html&gt;https://deckgl.readthedocs.io/en/latest/tooltip.html&lt;/denchmark-link&gt;
 does not work.
In Streamlit the output of the code below does not show the data
&lt;denchmark-link:https://user-images.githubusercontent.com/42288570/72584291-d0cf3f80-38e9-11ea-93a3-13d05f88ec5d.png&gt;&lt;/denchmark-link&gt;

In HTML the output of the code below shows the data with tooltips
&lt;denchmark-link:https://user-images.githubusercontent.com/42288570/72584326-e8a6c380-38e9-11ea-9eb8-441aa81c5417.png&gt;&lt;/denchmark-link&gt;

&lt;denchmark-h:h1&gt;Steps to reproduce&lt;/denchmark-h&gt;


Run the code below
Inspect the browser output

&lt;denchmark-h:h1&gt;Code&lt;/denchmark-h&gt;

"""Example from https://deckgl.readthedocs.io/en/latest/tooltip.html"""
import streamlit as st
import pydeck as pdk

UK_ACCIDENTS_DATA = (
    "https://raw.githubusercontent.com/uber-common/"
    "deck.gl-data/master/examples/3d-heatmap/heatmap-data.csv"
)

layer = pdk.Layer(
    "HexagonLayer",
    UK_ACCIDENTS_DATA,
    get_position="[lng, lat]",
    auto_highlight=True,
    elevation_scale=50,
    pickable=True,
    elevation_range=[0, 3000],
    extruded=True,
    coverage=1,
)

# Set the viewport location
view_state = pdk.ViewState(
    longitude=-1.415, latitude=52.2323, zoom=6, min_zoom=5, max_zoom=15, pitch=40.5, bearing=-27.36
)

# Combined all of it and render a viewport
r = pdk.Deck(
    map_style="mapbox://styles/mapbox/light-v9",
    layers=[layer],
    initial_view_state=view_state,
    tooltip={"html": "&lt;b&gt;Elevation Value:&lt;/b&gt; {elevationValue}", "style": {"color": "white"}},
)
r.to_html("test.html", open_browser=True, notebook_display=False)
st.pydeck_chart(r)

Streamlit version: 0.53
Python version: 3.7.4
Using python -m venv .venv
OS version: Windows 8.1
Browser version: Chrome

	</description>
	<comments>
		<comment id='1' author='MarcSkovMadsen' date='2020-01-17T04:40:31Z'>
		If you change the data from an URL to a DataFrame you get an error message that tells you nothing.
This error message I have experienced over and over again. If you have NA data in ANY column whether used or not you get a similar error.
&lt;denchmark-link:https://user-images.githubusercontent.com/42288570/72584843-dded2e00-38eb-11ea-9462-db376625c458.png&gt;&lt;/denchmark-link&gt;

"""Example from https://deckgl.readthedocs.io/en/latest/tooltip.html"""
import streamlit as st
import pydeck as pdk
import pandas as pd

UK_ACCIDENTS_DATA = (
    "https://raw.githubusercontent.com/uber-common/"
    "deck.gl-data/master/examples/3d-heatmap/heatmap-data.csv"
)


@st.cache
def get_data():
    return pd.read_csv(UK_ACCIDENTS_DATA)[["lng", "lat"]]


data = get_data().dropna() # IMPORTANT TO DROP NA

layer = pdk.Layer(
    "HexagonLayer",
    data=data,
    get_position="[lng, lat]",
    auto_highlight=True,
    elevation_scale=50,
    pickable=True,
    elevation_range=[0, 3000],
    extruded=True,
    coverage=1,
)

# Set the viewport location
view_state = pdk.ViewState(
    longitude=-1.415, latitude=52.2323, zoom=6, min_zoom=5, max_zoom=15, pitch=40.5, bearing=-27.36
)

# Combined all of it and render a viewport
r = pdk.Deck(
    map_style="mapbox://styles/mapbox/light-v9",
    layers=[layer],
    initial_view_state=view_state,
    tooltip={"html": "&lt;b&gt;Elevation Value:&lt;/b&gt; {elevationValue}", "style": {"color": "white"}},
)
st.pydeck_chart(r)
		</comment>
		<comment id='2' author='MarcSkovMadsen' date='2020-01-17T04:42:58Z'>
		If you dropna you can see the data but there is still no tooltip!
And without any tooltip its really difficult to understand any detail of your data.
&lt;denchmark-link:https://user-images.githubusercontent.com/42288570/72584910-34f30300-38ec-11ea-8d10-e9893820f598.png&gt;&lt;/denchmark-link&gt;

		</comment>
		<comment id='3' author='MarcSkovMadsen' date='2020-01-17T04:44:13Z'>
		To summarize I see the following issues regarding st.pydeck_chart

It does not support data URLs.
The error message you get (from providing NAs) is confusing and not helpfull.
Tooltips are not working.

I suggest

To inform users about it in the documentation ASAP.
Fix this when you have the time to do it.

		</comment>
		<comment id='4' author='MarcSkovMadsen' date='2020-01-17T13:38:10Z'>
		Marc
Thank you for the detailed report.  I was getting a similar error to the Syntax Error you showed above last night and couldn't get rid of it.  Just before I shut down I switched to another page in my app (I use a modified SessionState to run a multi page app) and the same error message appeared - even though that particular page doesn't use PyDeck at all.
This morning I restarted the machine and the Streamlit app and everything is running fine.  No error reports and the map plots as it should.
Hypothesis:  If there is an error in the PyDeck rendering it is getting cached somewhere, probably in  Streamlit or the browser given the second page behavior, and is popping up every time a page is rendered.
I just reproduced the error (passing a dict instead of a list into the layers= parameter will do it)
&lt;denchmark-link:https://user-images.githubusercontent.com/1843761/72615906-be61ff80-3903-11ea-99cd-d604f01647f3.png&gt;&lt;/denchmark-link&gt;
 and got the same behavior.
Workaround: It is necessary to close the browser tab and restart Streamlit to clear this.  Just restarting Streamlit, or just clearing the browser cache has no effect.
		</comment>
		<comment id='5' author='MarcSkovMadsen' date='2020-01-22T20:11:04Z'>
		We did some investigation, so I just wanted to dump here some of our findings, for future reference:


Looks like Pydeck doesn't output tooltip info into JSON when we call deck.to_json(). Perhaps we should file a bug?


The DeckGL React component does not seem to correctly handle async data properties set by the JSON converter.


We found a place we could improve our code. Instead of always adding a &lt;StaticMap&gt; we should use json.views and pass it into &lt;DeckGL views={json.views} ...&gt;. May need to add the MapView class to our bundle for that.


&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

&lt;denchmark-h:h3&gt;Data for tooltip issue:&lt;/denchmark-h&gt;

Given this code:
&lt;denchmark-code&gt;import pydeck as pdk
UK_ACCIDENTS_DATA = (
    "https://raw.githubusercontent.com/uber-common/"
    "deck.gl-data/master/examples/3d-heatmap/heatmap-data.csv"
)
layer = pdk.Layer(
    "HexagonLayer",
    UK_ACCIDENTS_DATA,
    get_position="[lng, lat]",
    auto_highlight=True,
    elevation_scale=50,
    pickable=True,
    elevation_range=[0, 3000],
    extruded=True,
    coverage=1,
)
# Set the viewport location
view_state = pdk.ViewState(
    longitude=-1.415, latitude=52.2323, zoom=6, min_zoom=5, max_zoom=15, pitch=40.5, bearing=-27.36
)
# Combined all of it and render a viewport
r = pdk.Deck(
    map_style="mapbox://styles/mapbox/light-v9",
    layers=[layer],
    initial_view_state=view_state,
    tooltip={"html": "&lt;b&gt;Elevation Value:&lt;/b&gt; {elevationValue}", "style": {"color": "white"}},
)
print(r.to_json())
&lt;/denchmark-code&gt;

We get this JSON, which doesn't contain tooltip info:
&lt;denchmark-code&gt;{"initialViewState": {"bearing": -27.36, "latitude": 52.2323, "longitude": -1.415, "maxZoom": 15, "minZoom": 5, "pitch": 40.5, "zoom": 6}, "layers": [{"@@type": "HexagonLayer", "autoHighlight": true, "coverage": 1, "data": "https://raw.githubusercontent.com/uber-common/deck.gl-data/master/examples/3d-heatmap/heatmap-data.csv", "elevationRange": [0, 3000], "elevationScale": 50, "extruded": true, "getPosition": "@@=[lng, lat]", "id": "b4e04719-ba90-4bb8-b429-1aac478539ac", "pickable": true}], "mapStyle": "mapbox://styles/mapbox/light-v9", "views": [{"@@type": "MapView", "controller": true}]}
&lt;/denchmark-code&gt;

&lt;denchmark-h:h3&gt;Data for async data issue:&lt;/denchmark-h&gt;

Given the JSON above, when we pass it into jsonConverter like this...
&lt;denchmark-code&gt;import { JSONConverter } from "@deck.gl/json"
import * as layers from "@deck.gl/layers"
import * as aggregationLayers from "@deck.gl/aggregation-layers"
const configuration = {
  classes: Object.assign({}, layers, aggregationLayers),
}
const jsonConverter = new JSONConverter({ configuration })
const deck = jsonConverter.convert(json)
&lt;/denchmark-code&gt;

...we get the following deck object:
&lt;denchmark-code&gt;initialViewState:
  bearing: -27.36
  latitude: 52.2323
  longitude: -1.415
  maxZoom: 15
  minZoom: 5
  pitch: 40.5
  zoom: 6
  __proto__: Object
layers: Array(1)
  0: HexagonLayer
    isComposite: (...)
    stats: (...)
    props:
      data: Array(0)
      autoHighlight: true
      coverage: 1
      elevationRange: (2) [0, 3000]
      elevationScale: 50
      extruded: true
      getPosition: ƒ func(row)
      id: "c83a8051-afff-4750-8c57-713c47831e63"
      pickable: true
      _component: HexagonLayer
        isComposite: (...)
        stats: (...)
        props: {autoHighlight: true, coverage: 1, elevationRange: Array(2), elevationScale: 50, extruded: true, …}
        id: "c83a8051-afff-4750-8c57-713c47831e63"
        count: 5
        lifecycle: "Awaiting state"
        parent: null
        context: null
        state: null
        internalState: null
        __proto__: CompositeLayer
    _asyncPropOriginalValues:
      data: "https://raw.githubusercontent.com/uber-common/deck.gl-data/master/examples/3d-heatmap/heatmap-data.csv"
      __proto__: Object
    _asyncPropResolvedValues:
      __proto__: Object
    __proto__: Object
    id: "c83a8051-afff-4750-8c57-713c47831e63"
    count: 5
    lifecycle: "Awaiting state"
    parent: null
    context: null
    state: null
    internalState: null
    __proto__: CompositeLayer
  length: 1
  __proto__: Array(0)
  mapStyle: "mapbox://styles/mapbox/light-v9"
views: Array(1)
  0: null
  length: 1
  __proto__: Array(0)
__proto__: Object
&lt;/denchmark-code&gt;

That object has async properties which I believe are not being correctly handled by the React Deck.GL component.
		</comment>
		<comment id='6' author='MarcSkovMadsen' date='2020-01-23T04:19:11Z'>
		Hi &lt;denchmark-link:https://github.com/tvst&gt;@tvst&lt;/denchmark-link&gt;

If you take a look at the pydeck source code and especially the to_html function you will see the tooltip is in Deck.widget.tooltip. If you look at the jinja template of to_html you will see it’s not intended that the tooltip is in the output of to_json.
(From memory. I’m on mobile phone)
		</comment>
		<comment id='7' author='MarcSkovMadsen' date='2020-01-24T18:59:18Z'>
		That's correct &lt;denchmark-link:https://github.com/MarcSkovMadsen&gt;@MarcSkovMadsen&lt;/denchmark-link&gt;
 but what &lt;denchmark-link:https://github.com/tvst&gt;@tvst&lt;/denchmark-link&gt;
 is mentioning is that the  method from PyDeck that we are using in order to serialize the pydeck object is not retrieving the tooltip
		</comment>
		<comment id='8' author='MarcSkovMadsen' date='2020-01-24T22:41:38Z'>
		I've created two issues for deck.gl guys, one regarding the async problem that is not being handled by the react component ( &lt;denchmark-link:https://github.com/uber/deck.gl/issues/4198&gt;here&lt;/denchmark-link&gt;
 )
And the second one regarding tooltip: &lt;denchmark-link:https://github.com/visgl/deck.gl/issues/4197&gt;visgl/deck.gl#4197&lt;/denchmark-link&gt;

		</comment>
		<comment id='9' author='MarcSkovMadsen' date='2020-01-26T08:24:37Z'>
		Hi &lt;denchmark-link:https://github.com/arraydude&gt;@arraydude&lt;/denchmark-link&gt;

To me it's the streamlit implementation that that is not in accordance with the PyDeck implementation.
The PyDeck implementation cannot include the tooltip in the to_json() output because it needs it seperately to instantiate via the createDeck function in the notebook JS package.
In summary the to_json supports the use case of the PyDeck notebook widget and JS package. Not the React component.
So my understanding is that it's actually Streamlit that should change something. ??
		</comment>
		<comment id='10' author='MarcSkovMadsen' date='2020-01-26T08:32:06Z'>
		There is another user with the tooltip problem here. &lt;denchmark-link:https://discuss.streamlit.io/t/tooltip-and-labels-in-pydeck-chart/1727/2&gt;https://discuss.streamlit.io/t/tooltip-and-labels-in-pydeck-chart/1727/2&lt;/denchmark-link&gt;

		</comment>
		<comment id='11' author='MarcSkovMadsen' date='2020-11-13T22:24:26Z'>
		Hi
I run into the same issue that while using .show() the background layer is ok but there is no background map layer in the html file I get by .to_html('#####.html')
Have you got any solution about this issue?
Thanks a lot
		</comment>
	</comments>
</bug>