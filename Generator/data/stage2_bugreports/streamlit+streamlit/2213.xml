<bug id='2213' author='durandg12' open_date='2020-10-16T16:34:00Z' closed_time='2020-10-29T02:00:08Z'>
	<summary>file_uploader does not repopulate the UploadedFile stream when the app is rerun</summary>
	<description>
&lt;denchmark-h:h1&gt;Summary&lt;/denchmark-h&gt;

I use st.file_uploader to allow the user to submit their own data. Then I do an action based on this data and other user-provided parameters (coming from an st.slider for instance). Re-running the app produces an error. This includes when the parameters are changed (for example by moving the st.slider). After investigating, I discovered that it is because, after the first reading of the UploadedFile output by st.file_uploader, the UploadedFile stays empty. It is not re-populated by the uploaded file in spite of the app re-running.
&lt;denchmark-h:h1&gt;Steps to reproduce&lt;/denchmark-h&gt;


Save the following JSON as "test.json":

&lt;denchmark-code&gt;{"a": 3, "b": 2}
&lt;/denchmark-code&gt;


Save the following piece of code as "my_app.py" (or any other name):

&lt;denchmark-code&gt;import json
import streamlit as st

st.title("Let's add a number to the elements of a json")

uploaded_file = st.sidebar.file_uploader(
    "Upload your json", type=["json"]
)

to_add = st.sidebar.slider(
    "Choose a number", min_value=1, max_value=5, value=3
)

st.markdown("The result is:")

default_file = open("test.json", "r")
if uploaded_file is None:
    dico = json.load(default_file)
else:
    dico = json.load(uploaded_file)
st.write({k: v + to_add for k, v in dico.items()})

default_file.close()
&lt;/denchmark-code&gt;


Run streamlit run my_app.py
In the app, upload test.json in the file uploader. You should see that:

&lt;denchmark-link:https://user-images.githubusercontent.com/45902885/96281059-1637af00-0fd9-11eb-91a8-cfbc9ca6773f.png&gt;&lt;/denchmark-link&gt;


5. Move the slider, here is the bug, you should see that:

&lt;denchmark-link:https://user-images.githubusercontent.com/45902885/96281107-28b1e880-0fd9-11eb-9368-1e09737b9a3c.png&gt;&lt;/denchmark-link&gt;


6. At this point, re-uploading works, but the user shouldn't have to re-upload the file after each slider change or each plain re-run. Especially since, as we see in the screenshot above, the widget still displays the informations of the uploaded file. Here is how it looks after re-uploading:

&lt;denchmark-link:https://user-images.githubusercontent.com/45902885/96281303-70d10b00-0fd9-11eb-90cb-affb5dd32537.png&gt;&lt;/denchmark-link&gt;

&lt;denchmark-h:h2&gt;Expected behavior:&lt;/denchmark-h&gt;

We shouldn't ever get to the second screenshot. We should pass from the first to the third simply by moving the slider and without re-uploading the file every time.
&lt;denchmark-h:h2&gt;Actual behavior:&lt;/denchmark-h&gt;

As explained above, after the first run the stream is empty and not reset when the app is re-run. This is not specific to the JSON format, although the error message displayed above is. I have run the same test with a CSV file and pandas.read_csv. The underlying cause is the same: an empty stream.
Note that I have also tried to make an auxiliary function that encapsulates the dico = json.load(uploaded_file) part and which is decorated by st.cache. It still doesn't work.
&lt;denchmark-h:h2&gt;Is this a regression?&lt;/denchmark-h&gt;

I don't know, it's the first time I use st.file_uploader.
&lt;denchmark-h:h1&gt;Debug info&lt;/denchmark-h&gt;

I have two different settings.
An AWS distant machine (I forward the port to my local machine):

Streamlit version: 0.69.1
Python version: 3.7.6
Using Conda
OS version: I don't know

My local machine:

Streamlit version: 0.68.0
Python version: 3.8.5
Not using Conda
OS version: macOS 10.13.6
Browser version: Firefox 81.0.1

&lt;denchmark-h:h1&gt;Additional information&lt;/denchmark-h&gt;

Side note on the documentation of st.file_uploader: at the some point it says to use StringIO(uploaded_file.decode("utf-8"))  but this doesn't work and raises AttributeError: 'UploadedFile' object has no attribute 'decode'. Using StringIO(uploaded_file.read().decode("utf-8")) does work, though.
	</description>
	<comments>
		<comment id='1' author='durandg12' date='2020-10-20T14:47:28Z'>
		Exalate commented: FrankKr commented: Update:
Actually, it appears the UploadedFile stream is available, but the cursor is at the end of the stream after the first evaluation.
A work-around for me was to reset the cursor by including
uploaded_file.seek(0)
after the check if uploaded_file is None. Would very much prefer this workaround to become obsolete.
in your example:
&lt;denchmark-code&gt;default_file = open("test.json", "r")
if uploaded_file is None:
    uploaded_file.seek(0)
    dico = json.load(default_file)
else:
    dico = json.load(uploaded_file)

st.write({k: v + to_add for k, v in dico.items()})

default_file.close()

&lt;/denchmark-code&gt;

original:
experiencing the same issue after upgrading streamlit from version 0.64.0 to 0.69.0
		</comment>
		<comment id='2' author='durandg12' date='2020-10-20T17:19:44Z'>
		Exalate commented: vik-s commented: Update:
Ok, I get it now. The NoneType object didn't have the seek() method (duh!). Just resetting the cursor to the start every time fixes the issue.
So, something like:
&lt;denchmark-code&gt;if uploaded_file is not None:
    uploaded_file.seek(0)
    dico = json.load(uploaded_file)
else:
    dico = json.load(default_file)
&lt;/denchmark-code&gt;

Original:
I was facing the same issue with file_uploader. Things seemed to be working okay in 0.67.
Thanks for your workaround. When I tried it, I get:
&lt;denchmark-code&gt;AttributeError: 'NoneType' object has no attribute 'seek'
&lt;/denchmark-code&gt;

Is there something specific I must do to access that method?
edit: typo
		</comment>
		<comment id='3' author='durandg12' date='2020-10-21T05:59:31Z'>
		you're right, I posted a little too fast and my suggestion contained an error. I corrected it for future reads. Good luck!
		</comment>
		<comment id='4' author='durandg12' date='2020-10-23T09:22:21Z'>
		Thanks for finding this much better workaround, and for finiding the real underlying reason of the bug.
		</comment>
		<comment id='5' author='durandg12' date='2020-10-29T02:00:07Z'>
		Closing this issue as a duplicate of &lt;denchmark-link:https://github.com/streamlit/streamlit/issues/2235&gt;#2235&lt;/denchmark-link&gt;
. A fix for this should be coming in the next release. Please track &lt;denchmark-link:https://github.com/streamlit/streamlit/issues/2235&gt;#2235&lt;/denchmark-link&gt;
 for updates.
		</comment>
	</comments>
</bug>