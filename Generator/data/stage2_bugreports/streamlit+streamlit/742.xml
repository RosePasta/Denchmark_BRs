<bug id='742' author='ZephyrShannon' open_date='2019-11-25T13:22:15Z' closed_time='2019-12-03T08:29:03Z'>
	<summary>Can not start streamlit within an internal networks</summary>
	<description>
&lt;denchmark-h:h1&gt;Summary&lt;/denchmark-h&gt;

I try to start streamlit hello in an internal network linux server but failed with exception:
But I can run it on a windows server.
&lt;denchmark-h:h1&gt;Steps to reproduce&lt;/denchmark-h&gt;


streamlit hello

&lt;denchmark-h:h2&gt;Expected behavior:&lt;/denchmark-h&gt;

The server started and the port is open
&lt;denchmark-h:h2&gt;Actual behavior:&lt;/denchmark-h&gt;

It halted for a while and than stopped.
&lt;denchmark-h:h2&gt;Is this a regression?&lt;/denchmark-h&gt;

no
&lt;denchmark-h:h1&gt;Debug info&lt;/denchmark-h&gt;

here is the output:
Did not auto detect external IP.
Please go to &lt;denchmark-link:https://streamlit.io/docs/&gt;https://streamlit.io/docs/&lt;/denchmark-link&gt;
 for debugging hints.
EXCEPTION! 'NoneType' object has no attribute 'strip'
File "/home/admin/miniconda3/bin/streamlit", line 10, in 
sys.exit(main())
File "/home/admin/miniconda3/lib/python3.7/site-packages/click/core.py", line 764, in 
return self.main(*args, **kwargs)
File "/home/admin/miniconda3/lib/python3.7/site-packages/click/core.py", line 717, in main
rv = self.invoke(ctx)
File "/home/admin/miniconda3/lib/python3.7/site-packages/click/core.py", line 1137, in invoke
return _process_result(sub_ctx.command.invoke(sub_ctx))
File "/home/admin/miniconda3/lib/python3.7/site-packages/click/core.py", line 956, in invoke
return ctx.invoke(self.callback, **ctx.params)
File "/home/admin/miniconda3/lib/python3.7/site-packages/click/core.py", line 555, in invoke
return callback(*args, **kwargs)
File "/home/admin/miniconda3/lib/python3.7/site-packages/streamlit/cli.py", line 120, in main_hello
_main_run(filename)
File "/home/admin/miniconda3/lib/python3.7/site-packages/streamlit/cli.py", line 235, in _main_run
bootstrap.run(file, command_line, args)
File "/home/admin/miniconda3/lib/python3.7/site-packages/streamlit/bootstrap.py", line 189, in run
ioloop.start()
File "/home/admin/miniconda3/lib/python3.7/site-packages/tornado/platform/asyncio.py", line 132, in start
self.asyncio_loop.run_forever()
File "/home/admin/miniconda3/lib/python3.7/asyncio/base_events.py", line 539, in run_forever
self._run_once()
File "/home/admin/miniconda3/lib/python3.7/asyncio/base_events.py", line 1775, in _run_once
handle._run()
File "/home/admin/miniconda3/lib/python3.7/asyncio/events.py", line 88, in _run
self._context.run(self._callback, *self._args)
File "/home/admin/miniconda3/lib/python3.7/site-packages/tornado/ioloop.py", line 758, in _run_callback
ret = callback()
File "/home/admin/miniconda3/lib/python3.7/site-packages/tornado/stack_context.py", line 300, in null_wrapper
return fn(*args, **kwargs)
File "/home/admin/miniconda3/lib/python3.7/site-packages/tornado/gen.py", line 326, in wrapper
yielded = next(result)
File "/home/admin/miniconda3/lib/python3.7/site-packages/streamlit/server/Server.py", line 340, in _loop_coroutine
traceback.print_stack(file=sys.stdout)
Please report this bug at &lt;denchmark-link:https://github.com/streamlit/streamlit/issues&gt;https://github.com/streamlit/streamlit/issues&lt;/denchmark-link&gt;
.

Streamlit version: 0.49.0
Python version:  3.7
Using Miniconda?
OS version: Linux 4.4.114-1.al7.x86_64
Browser version: no browser

	</description>
	<comments>
		<comment id='1' author='ZephyrShannon' date='2019-11-26T22:55:23Z'>
		Hi &lt;denchmark-link:https://github.com/ZephyrShannon&gt;@ZephyrShannon&lt;/denchmark-link&gt;
 , thanks for the excellent bug report.
I'm going to try to reproduce your issue.  To do so it will be helpful if you can copy the output of one of the following commands, depending on your system's availability:

ip link &amp;&amp; ip route
ifconfig

(It's possible both of these commands will be available; if so, just pick one.)
		</comment>
		<comment id='2' author='ZephyrShannon' date='2019-11-27T21:52:23Z'>
		&lt;denchmark-link:https://github.com/nthmost&gt;@nthmost&lt;/denchmark-link&gt;
 you can reproduce the bug by setting the config option  to  and modifying the line below at  ( in prod) to pretend the network is down:
&lt;denchmark-code&gt;#response = _make_blocking_http_get(_AWS_CHECK_IP, timeout=5)  # OLD
response = None  # NEW, just to repro the bug.
&lt;/denchmark-code&gt;

&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

And here's a possible fix. In bootstrap.py always check whether the output of get_external_ip is None. For example, instead of:
        named_urls = [
            ("network url", report.get_url(util.get_internal_ip())),
            ("external url", report.get_url(util.get_external_ip())),
        ]
do
        ip1 = util.get_internal_ip() or ""
        ip2 = util.get_external_ip() or ""
        named_urls = [
            ("network url", report.get_url(ip1)),
            ("external url", report.get_url(ip2)),
        ]
		</comment>
		<comment id='3' author='ZephyrShannon' date='2019-12-03T08:29:03Z'>
		
Hi @ZephyrShannon , thanks for the excellent bug report.
I'm going to try to reproduce your issue. To do so it will be helpful if you can copy the output of one of the following commands, depending on your system's availability:

ip link &amp;&amp; ip route
ifconfig

(It's possible both of these commands will be available; if so, just pick one.)
here it is:

ip link &amp;&amp; ip route
1: lo: &lt;LOOPBACK,UP,LOWER_UP&gt; mtu 65536 qdisc noqueue state UNKNOWN mode DEFAULT qlen 1
link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
2: eth0: &lt;BROADCAST,MULTICAST,UP,LOWER_UP&gt; mtu 1500 qdisc mq state UP mode DEFAULT qlen 1000
link/ether 00:16:3e:32:12:89 brd ff:ff:ff:ff:ff:ff
default via 172.22.3.253 dev eth0
169.254.0.0/16 dev eth0  scope link  metric 1002
172.22.0.0/22 dev eth0  proto kernel  scope link  src 172.22.1.70
ifconfig -a
eth0: flags=4163&lt;UP,BROADCAST,RUNNING,MULTICAST&gt;  mtu 1500
inet 172.22.1.70  netmask 255.255.252.0  broadcast 172.22.3.255
ether 00:16:3e:32:12:89  txqueuelen 1000  (Ethernet)
RX packets 3605001596  bytes 5027981051835 (4.5 TiB)
RX errors 0  dropped 0  overruns 0  frame 0
TX packets 548647078  bytes 2466265499543 (2.2 TiB)
TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0
lo: flags=73&lt;UP,LOOPBACK,RUNNING&gt;  mtu 65536
inet 127.0.0.1  netmask 255.0.0.0
loop  txqueuelen 1  (Local Loopback)
RX packets 468583247  bytes 36212392276 (33.7 GiB)
RX errors 0  dropped 0  overruns 0  frame 0
TX packets 468583247  bytes 36212392276 (33.7 GiB)
TX errors 0  dropped 0 overruns 0  carrier 0  collisions 0
		</comment>
		<comment id='4' author='ZephyrShannon' date='2019-12-03T08:48:56Z'>
		
@nthmost you can reproduce the bug by setting the config option server.headless to True and modifying the line below at net_util.py (util.py in prod) to pretend the network is down:
#response = _make_blocking_http_get(_AWS_CHECK_IP, timeout=5)  # OLD
response = None  # NEW, just to repro the bug.

And here's a possible fix. In bootstrap.py always check whether the output of get_external_ip is None. For example, instead of:
        named_urls = [
            ("network url", report.get_url(util.get_internal_ip())),
            ("external url", report.get_url(util.get_external_ip())),
        ]
do
        ip1 = util.get_internal_ip() or ""
        ip2 = util.get_external_ip() or ""
        named_urls = [
            ("network url", report.get_url(ip1)),
            ("external url", report.get_url(ip2)),
        ]

Tks for the helps!!!
I comments the codes  _print_url() in _on_server_start (), Everything is working now.
PS. My network is actually working for internal network.
		</comment>
	</comments>
</bug>