<bug id='985' author='MarcSkovMadsen' open_date='2020-01-17T05:03:48Z' closed_time='2020-06-16T13:02:42Z'>
	<summary>Updating initial_view_state dynamically does not work</summary>
	<description>
&lt;denchmark-h:h1&gt;Summary&lt;/denchmark-h&gt;

I'm trying to let my user easily switch to another location with a st.selectbox or change the zoom or pitch via sliders. But it does not work.
&lt;denchmark-link:https://user-images.githubusercontent.com/42288570/72585574-e8f58d80-38ee-11ea-9662-5b517486bc7e.gif&gt;&lt;/denchmark-link&gt;

&lt;denchmark-h:h1&gt;Steps to reproduce&lt;/denchmark-h&gt;

What are the steps we should take to reproduce the bug:

Run the code below
Try changing the initial_view_state settings via the app

&lt;denchmark-h:h1&gt;Code&lt;/denchmark-h&gt;

import pathlib

import pandas as pd
import pydeck as pdk
import streamlit as st
import numpy as np

POWER_PLANT_URL = (
    "https://raw.githubusercontent.com/MarcSkovMadsen/awesome-streamlit/master/"
    "gallery/global_power_plant_database/global_power_plant_database.csv"
)

LOCATIONS = {
    "Orsted Copenhagen HQ": {"latitude": 55.676098, "longitude": 12.568337},
    "Orsted Boston": {"latitude": 2.361145, "longitude": -71.057083},
}
ORSTED_CPH_HQ = LOCATIONS["Orsted Copenhagen HQ"]


class ViewStateComponent:
    def __init__(self):
        self.latitude = ORSTED_CPH_HQ["latitude"]
        self.longitude = ORSTED_CPH_HQ["longitude"]
        self.zoom = 3
        self.pitch = 40.0

    def edit_view(self):
        location = st.sidebar.selectbox("Location", options=list(LOCATIONS.keys()), index=0)
        self.latitude = LOCATIONS[location]["latitude"]
        self.longitude = LOCATIONS[location]["longitude"]

        self.zoom = st.sidebar.slider("Zoom", min_value=0, max_value=11, value=self.zoom)
        self.pitch = st.sidebar.slider(
            "Pitch", min_value=0.0, max_value=100.0, value=self.pitch, step=10.0
        )

    @property
    def view_state(self) -&gt; pdk.ViewState:
        return pdk.ViewState(
            longitude=self.longitude,
            latitude=self.latitude,
            zoom=self.zoom,
            min_zoom=1,
            max_zoom=15,
            pitch=self.pitch,
            # bearing=-27.36,
        )


class GlobalPowerPlantDatabaseApp:
    def __init__(self):
        self.view_state_component = ViewStateComponent()
        self.data = self.get_data()

    @staticmethod
    @st.cache
    def get_data():
        data = pd.read_csv(POWER_PLANT_URL)

        return data[["latitude", "longitude"]].dropna()

    def _scatter_plotter_layer(self):
        return pdk.Layer(
            "ScatterplotLayer",
            data=self.data,
            get_position=["longitude", "latitude"],
            extruded=True,
            get_radius=5000,
            pickable=True,
            opacity=0.8,
            stroked=False,
            filled=True,
            wireframe=True,
        )

    def view(self):
        self.view_state_component.edit_view()  # Does not work

        st.pydeck_chart(
            pdk.Deck(
                map_style="mapbox://styles/mapbox/light-v9",
                initial_view_state=self.view_state_component.view_state,
                layers=[self._scatter_plotter_layer()],
            )
        )


app = GlobalPowerPlantDatabaseApp()
app.view()
&lt;denchmark-h:h1&gt;Debug info&lt;/denchmark-h&gt;


Streamlit version: 0.53
Python version: 3.7.4
python -m venv .venv
OS version: Windows 8.1
Browser version: Chrome

	</description>
	<comments>
		<comment id='1' author='MarcSkovMadsen' date='2020-02-04T18:49:11Z'>
		I believe that the correct information is being propagated to the frontend, but 


streamlit/frontend/src/components/elements/DeckGlJsonChart/DeckGlJsonChart.tsx


        Lines 143 to 163
      in
      c0990e0






 &lt;DeckGL 



 initialViewState={deck.initialViewState} 



 height={deck.initialViewState.height} 



 width={deck.initialViewState.width} 



 layers={this.state.initialized ? deck.layers : []} 



 getTooltip={this.createTooltip} 



 controller 



 &gt; 



 &lt;StaticMap 



 height={deck.initialViewState.height} 



 width={deck.initialViewState.width} 



 mapStyle={ 



 deck.mapStyle 



         ? typeof deck.mapStyle === "string" 



           ? deck.mapStyle 



           : deck.mapStyle[0] 



         : undefined 



 } 



 mapboxApiAccessToken={MAPBOX_ACCESS_TOKEN} 



   /&gt; 



 &lt;/DeckGL&gt; 




 doesn't properly utilize the new viewstate.
I'm not very familiar with DeckGl's react component, but it seems like using viewState instead of initialViewState and hooking into the onViewStateChange callback may be helpful.
		</comment>
		<comment id='2' author='MarcSkovMadsen' date='2020-02-04T20:05:29Z'>
		Changing initialViewState to viewState does fix this, but disables any panning/zooming on the map.
If anyone has more familiarity with Deck.GL, please feel free to jump in.
		</comment>
		<comment id='3' author='MarcSkovMadsen' date='2020-04-05T02:41:40Z'>
		Hi. I am also facing a similar issue.  It seems that HEIGHT can dynamically change but the actual re-render and centering of a NEW LAT/LONG on a VIEW_STATE does not re-position dynamically.  Is there any fix for this?  Using the code above and changing the LAT LONG illustrates this issue.  Anyone able to get around this. I am on the latest Streamlit version 0.57.3.
		</comment>
		<comment id='4' author='MarcSkovMadsen' date='2020-04-28T21:50:55Z'>
		I am still unable to update the initial_view_state (showing a map with interactively entered lat/long) with the latest streamlit (0.58) and pydeck (0.3.1) versions. Should we expect this functionality to exist now? Any workarounds known?
		</comment>
		<comment id='5' author='MarcSkovMadsen' date='2020-05-19T22:49:19Z'>
		Working a PR on this now! Hoping to have something out by EOD, though I'll likely need a bit of code review as I'm not at all a typescript person.
		</comment>
		<comment id='6' author='MarcSkovMadsen' date='2020-06-16T16:18:44Z'>
		Fixed in 0.61.0
		</comment>
	</comments>
</bug>