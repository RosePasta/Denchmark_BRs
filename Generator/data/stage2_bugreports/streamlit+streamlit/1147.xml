<bug id='1147' author='1wpro2' open_date='2020-02-26T07:51:44Z' closed_time='2020-03-05T18:13:11Z'>
	<summary>protoc-gen-mypy: program not found or is not executable</summary>
	<description>
&lt;denchmark-h:h1&gt;Summary&lt;/denchmark-h&gt;

make all-devel failed with protoc-gen-mypy: program not found or is not executable
&lt;denchmark-h:h1&gt;Steps to reproduce&lt;/denchmark-h&gt;

make all-devel
&lt;denchmark-h:h2&gt;Expected behavior:&lt;/denchmark-h&gt;

It should build out successfully.
&lt;denchmark-h:h2&gt;Actual behavior:&lt;/denchmark-h&gt;

protoc-gen-mypy: program not found or is not executable Please specify a program using absolute path or make sure the program is available in your PATH system variable --mypy_out: protoc-gen-mypy: Plugin failed with status code 1.
&lt;denchmark-h:h2&gt;Is this a regression?&lt;/denchmark-h&gt;

That is, did this use to work the way you expected in the past?
yes / no
&lt;denchmark-h:h1&gt;Debug info&lt;/denchmark-h&gt;


Streamlit version: (Streamlit, version 0.47.4)
Python version: (Python 3.7.3)
Using PipEnv
OS version: Mac OSX 10.15.2
Browser version:

&lt;denchmark-h:h1&gt;Additional information&lt;/denchmark-h&gt;

Latest streamlit commit @ &lt;denchmark-link:https://github.com/streamlit/streamlit/commit/26c953641d5f91a1d59bf1cef205179105d4c6e3&gt;26c9536&lt;/denchmark-link&gt;

Looks like it's since this commit:
&lt;denchmark-link:https://github.com/streamlit/streamlit/pull/1079&gt;#1079&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='1wpro2' date='2020-02-27T04:00:00Z'>
		seeing the exact same thing! any magic command to rescue?
		</comment>
		<comment id='2' author='1wpro2' date='2020-03-02T05:58:21Z'>
		fixable via pip install mypy-protobuf
		</comment>
		<comment id='3' author='1wpro2' date='2020-03-03T18:23:41Z'>
		Hi &lt;denchmark-link:https://github.com/1wpro2&gt;@1wpro2&lt;/denchmark-link&gt;
, thanks for filing this. I am not a  expert so I'd appreciate your help in understanding this better. I just ran a test a couple times where I did the following:

Reverted the addition of mypy-protobuf to lib/Pipfile
Reverted the addition of --skip-lock to the pipenv-install make target.
Cleared my virtualenv cache, and rebuilt a new pipenv environment with cd lib; pipenv --three; pipenv shell, followed by cd ..; make all-devel. This reproduced the failure to find protoc-gen-mypy that you reported.
I then undid the reversions in 1) and 2) and ran make all-devel again, and everything worked out fine, with which protoc-gen-mypy showing it found at /Users/nate/.local/share/virtualenvs/lib-Tp61yVQY/bin/protoc-gen-mypy.

I believe that 1-3 of that sequence should roughly mirror the state a user who was previously developing on Streamlit would be in, and step 4 shows what would happen after a pull that picks up &lt;denchmark-link:https://github.com/streamlit/streamlit/pull/1079&gt;#1079&lt;/denchmark-link&gt;
.
One way that I was able to reproduce the error you described was to run make all-devel without being in the pipenv environment. In that case, the new mypy-protobuf dependency would be installed into the pipenv environment, but that wouldn't be part of your PATH. I don't believe that re-adding --skip-lock to the pipenv install installation would change the result here at all; I think the key thing is whether make all-devel is run inside the environment or outside of it.
Can you or &lt;denchmark-link:https://github.com/zhaoooyue&gt;@zhaoooyue&lt;/denchmark-link&gt;
 report whether you know you were definitely inside the  environment when experiencing this error? Alternatively, can you spell out a theory of  the  flag would change the behavior here? Note that while our instructions at &lt;denchmark-link:https://github.com/streamlit/streamlit/wiki/Contributing#how-to-develop-streamlit&gt;https://github.com/streamlit/streamlit/wiki/Contributing#how-to-develop-streamlit&lt;/denchmark-link&gt;
 specify would put you inside the environment when running , this may be the first time that's strictly required, and so there may be a documentation or runtime warning called for here.
Thanks for the report and additional info!
		</comment>
		<comment id='4' author='1wpro2' date='2020-03-04T03:39:44Z'>
		hi &lt;denchmark-link:https://github.com/whiten&gt;@whiten&lt;/denchmark-link&gt;
 , thanks for the reply.
Yes, I have run it within pipenv wtih the error:
&lt;denchmark-link:https://user-images.githubusercontent.com/52658745/75842712-100b0e80-5e0c-11ea-8b66-b3fb61afbdab.png&gt;&lt;/denchmark-link&gt;

I believe we should keep the lock file, which is python's way to keep the deterministic state. And it is exactly what's happening here now without it: it's working on your machine, while at the same time we do have machines not working with such.
Can you please review this, &lt;denchmark-link:https://github.com/streamlit/streamlit/pull/1167&gt;#1167&lt;/denchmark-link&gt;
 ? Thanks.
		</comment>
		<comment id='5' author='1wpro2' date='2020-03-04T18:05:28Z'>
		Hi &lt;denchmark-link:https://github.com/1wpro2&gt;@1wpro2&lt;/denchmark-link&gt;
, thank you for the screenshot--that provided the explanation here. If you look carefully near the top, you'll see that when  is run in , a message is emitted: 
The path of that virtualenv tells us that it was created in a directory whose final path element was streamlit, not lib as we expect and require. So, you we're right that you were already in a pipenv environment, but one created in the root directory of the repository, not the lib/ dir as the Makefile is assuming.
In that setup, the pipenv-install Makefile target invoked by all-devel installs protoc-gen-mypy (and everything else) into a different virtualenv starting with lib-, based on where pipenv install --dev was run from, not the environment you're currently in. That's certainly confusing on pipenv's part, and we should work to improve our documentation and tooling to help other users avoid it. I did try removing the --skip-lock flag to see if it worked around this, and found that it does not.
So, to not run into this problem, you want to start not in a pipenv environment, then run cd lib; pipenv --three; pipenv shell followed by cd ..; make all-devel. It's an undocumented precondition that you can't already be in a different pipenv environment than the one in lib/ when starting this process.
Does that make sense? Any other questions? Thanks again for posting that screenshot--without it I would not have been unable to understand the full sequence that went awry here.
		</comment>
		<comment id='6' author='1wpro2' date='2020-03-05T03:44:54Z'>
		
Hi @1wpro2, thank you for the screenshot--that provided the explanation here. If you look carefully near the top, you'll see that when pipenv shell is run in lib/, a message is emitted: Shell for /Usrrs/jackie/.local/share/virtualenvs/streamlit-GdDAcdiw already activated. No action taken to avoid nested environments.
The path of that virtualenv tells us that it was created in a directory whose final path element was streamlit, not lib as we expect and require. So, you we're right that you were already in a pipenv environment, but one created in the root directory of the repository, not the lib/ dir as the Makefile is assuming.
In that setup, the pipenv-install Makefile target invoked by all-devel installs protoc-gen-mypy (and everything else) into a different virtualenv starting with lib-, based on where pipenv install --dev was run from, not the environment you're currently in. That's certainly confusing on pipenv's part, and we should work to improve our documentation and tooling to help other users avoid it. I did try removing the --skip-lock flag to see if it worked around this, and found that it does not.
So, to not run into this problem, you want to start not in a pipenv environment, then run cd lib; pipenv --three; pipenv shell followed by cd ..; make all-devel. It's an undocumented precondition that you can't already be in a different pipenv environment than the one in lib/ when starting this process.
Does that make sense? Any other questions? Thanks again for posting that screenshot--without it I would not have been unable to understand the full sequence that went awry here.

Hi &lt;denchmark-link:https://github.com/whiten&gt;@whiten&lt;/denchmark-link&gt;
 , good catch.   The venv must have been messed after several playing around.
Having a consistent shell from lib worked.
However,  the original issue this &lt;denchmark-link:https://github.com/streamlit/streamlit/pull/1167&gt;#1167&lt;/denchmark-link&gt;
 trying to address is still there.  I think the lock file is a good mechanism to have a consistent and tested state. We should keep it.
Here is what happened I think. For developers who have checked out the code before &lt;denchmark-link:https://github.com/streamlit/streamlit/pull/1093&gt;#1093&lt;/denchmark-link&gt;
, they have a lock file on the disk.  When running the new command, Pipenv install is not working as expected with the skip-lock tag, as it will find out hash differences among the dependencies in the lock file and being asked in the zip file. Hence the new packages are not installed.
Removing the lock file should sort out the issue. However, being a little bit opinioned, I think we should keep the lock file.
		</comment>
		<comment id='7' author='1wpro2' date='2020-03-05T18:13:11Z'>
		Hi &lt;denchmark-link:https://github.com/1wpro2&gt;@1wpro2&lt;/denchmark-link&gt;
. Thanks for confirming the analysis of what went wrong. I understand that in your opinion we should retain the lock file. I think valid arguments can be made either way, and you should open a new bug if you want to articulate a clear reason why you think it should be retained that weighs the pros and cons.
In my opinion of that of the reviewers of that change, the value the lock file was providing was minor, and arguably negative. While it would ensure that an individual developer could consistently produce virtualenvs with the same dependency versions if the Pipfile hadn't changed, the downside was that the world (i.e., the versions of those dependencies that other developer would receive) could be moving ahead, potentially with breaking changes, while the core Streamlit team was blissfully unaware.
I think this debate would be very different if we published a lockfile that was tested against, but we don't, and we can't really, because streamlit is used in environments with other libraries that we may share direct or indirect dependencies with.
The above mixed benefits and drawbacks, taken together with the lower latency of using pipenv with --skip-lock, led to the change we made.
		</comment>
	</comments>
</bug>