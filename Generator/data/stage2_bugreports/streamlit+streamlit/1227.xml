<bug id='1227' author='mdbecker' open_date='2020-03-17T11:42:41Z' closed_time='2020-04-23T17:11:03Z'>
	<summary>st.pyplot throwing IndexError and KeyError under heavy user load</summary>
	<description>
&lt;denchmark-h:h1&gt;Summary&lt;/denchmark-h&gt;

See pennsignals/chime#9 and pennsignals/chime#52 for more details. This issue only occurs under heavy user load which makes it especially hard to debug. It is not reproducible in development mode.
&lt;denchmark-h:h1&gt;Steps to reproduce&lt;/denchmark-h&gt;

What are the steps we should take to reproduce the bug:

Go to http://penn-chime.phl.io/
Click on buttons in the sidebar a few times quickly to force the graphs to be regenerate (or really any of the elements that regenerate the plots)
Scroll down to the plots

&lt;denchmark-h:h2&gt;Expected behavior:&lt;/denchmark-h&gt;

No exceptions
&lt;denchmark-h:h2&gt;Actual behavior:&lt;/denchmark-h&gt;

See attached tickets above.
&lt;denchmark-h:h2&gt;Is this a regression?&lt;/denchmark-h&gt;

That is, did this use to work the way you expected in the past?
No
&lt;denchmark-h:h1&gt;Debug info&lt;/denchmark-h&gt;


Streamlit version: 0.56.0
Python version: python-3.7.6
Using Pipenv
OS version: Heroku
Browser version: Any browser (Chome/Firefox)

&lt;denchmark-h:h1&gt;Additional information&lt;/denchmark-h&gt;

&lt;denchmark-link:https://discuss.streamlit.io/t/streamlit-unstable-under-heavy-load/2200&gt;https://discuss.streamlit.io/t/streamlit-unstable-under-heavy-load/2200&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='mdbecker' date='2020-03-27T22:36:51Z'>
		&lt;denchmark-link:https://discuss.streamlit.io/t/streamlit-unstable-under-heavy-load/2200/2&gt;Note from Tim on forum topic&lt;/denchmark-link&gt;
:
"Hey @beckerfuffle, welcome to Streamlit!
It looks like your issue was mitigated by switching away from pyplot to altair?
This looks like a race condition inside matplotlib; under heavy load, Streamlit is spins up many threads concurrently, and I wonder if (a) we’re mistaken about the thread-safety of matplotlib operations or (b) matplotlib is buggy in concurrent scenarios.
Are you able to move away from pyplot entirely? This should also reduce any server load you’re having, as pyplot charts are rendered server-side and delivered to the browser as images, and altair charts are sent as JSON to the browser, which then renders them locally."
		</comment>
		<comment id='2' author='mdbecker' date='2020-04-01T20:09:20Z'>
		&lt;denchmark-link:https://matplotlib.org/3.1.1/faq/howto_faq.html&gt;https://matplotlib.org/3.1.1/faq/howto_faq.html&lt;/denchmark-link&gt;

&lt;denchmark-code&gt;Working with threads

Matplotlib is not thread-safe: in fact, there are known race conditions that affect certain artists. Hence, if you work with threads, it is your responsibility to set up the proper locks to serialize access to Matplotlib artists.

Note that (for the case where you are working with an interactive backend) most GUI backends require being run from the main thread as well.
&lt;/denchmark-code&gt;

&lt;denchmark-link:https://github.com/tconkling&gt;@tconkling&lt;/denchmark-link&gt;

		</comment>
		<comment id='3' author='mdbecker' date='2020-04-01T20:11:30Z'>
		&lt;denchmark-link:https://github.com/jupyter-widgets/ipywidgets/issues/1722&gt;race conditions, output widgets, and matplotlib&lt;/denchmark-link&gt;

		</comment>
		<comment id='4' author='mdbecker' date='2020-04-23T17:11:03Z'>
		 &lt;denchmark-link:https://github.com/streamlit/streamlit/issues/923&gt;#923&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>