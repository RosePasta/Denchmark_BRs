<bug id='865' author='tconkling' open_date='2019-12-18T18:44:21Z' closed_time='2020-02-14T01:11:06Z'>
	<summary>st.State: custom exceptions not caught when app is re-run</summary>
	<description>
st.State doesn't really exist yet, but if it did, its current implementation would have this issue.
The first time this script is run, the except MyException handler will be correctly hit. On subsequent runs, it won't be. This seems to only be the case if the exception is thrown by an object that's stored in st.State. Mysterious!
import streamlit as st
import st_state_patch

class MyException(Exception):
    pass

class Thrower:
    def throw(self, text):
        raise MyException(text)


s = st.State(key="key")
if not s:
    s.thrower = Thrower()

try:
    s.thrower.throw("qwert")
except MyException as e:
    # We'll get here the first time the app is run
    st.info("Expected exception! type=%s" % type(e))
except BaseException as e:
    # And we'll get here on subsequent runs
    st.warning("Unexpected exception! type=%s" % type(e))
	</description>
	<comments>
		<comment id='1' author='tconkling' date='2020-02-14T01:11:05Z'>
		Closing since we will almost certainly implement differently when we finally have a state feature.
		</comment>
	</comments>
</bug>