<bug id='152' author='tvst' open_date='2019-09-20T18:37:53Z' closed_time='2019-09-23T07:07:46Z'>
	<summary>Allow HTML (again!) in st.write/st.markdown â€” but with kwarg toggle</summary>
	<description>
Until last week, st.write and st.markdown used to allow HTML tags. However this is a security risk, as an app author could write unsafe code like this:
&lt;denchmark-code&gt;import streamlit as st

USER_INPUT = '''
&lt;input type="button" value="click me" onclick="javascript:alert('You have been pwnd. Now I can steal your cookies')"/&gt;
'''

name = st.text_input("What's your name?", USER_INPUT)
st.write(name)
&lt;/denchmark-code&gt;

...which is why we turned it off in &lt;denchmark-link:https://github.com/streamlit/streamlit/pull/95&gt;#95&lt;/denchmark-link&gt;
 .
However, many users still depend on this feature, and we'd would like to (1) not break those users and (2) understand why they need HTML so we can come up with better solutions.
So let's do this for now:

Keep the default behavior of st.write and st.markdown as: no HTML is allowed
However, allow the user to pass unsafe_allow_html=True to turn on support for HTML

Also, in the pydoc for st.write and st.markdown we should say the following:

While you can use unsafe_allow_html=True to turn on support for a limited set of HTML tags inside markdown strings, we strongly advise against it. It is hard to write secure HTML, so by using this argument you may be compromising your users' security. See this Github issue for more information.
Also note that unsafe_allow_html is a temporary measure and may be removed from Streamlit any time.
If you decide to turn on HTML anyway, we ask you to please post in this [this Github issue](ASK THIAGO FOR LINK) telling us your exact use case. This will help us come up with safe APIs that allow you to do what you want.

	</description>
	<comments>
		<comment id='1' author='tvst' date='2019-10-15T05:04:03Z'>
		I'm commenting on this issue despite it being closed because it seems the security implications of allowing HTML have been misunderstood. Specifically the "Now I can steal your cookies" part is very far fetched.
Any injected javascript will only have access to cookies set against the origin the streamlit page is served from. By definition the author of the app already has access to these cookies because they are the one running the server (if it's hosted) or the origin is likely localhost if a user is running the app on their machine. In neither case are any valuable cookies exposed. In fact in the later case the author can just use python code to grab all of the user's cookies from their browser's file system store, a much more powerful attack.
It is also important to realize that, because the app author has full control over the python side of things, they can at any time serve arbitrary javascript to any user of the app. There is no way to protect against a malicious app author! The only thing you can hope to protect users against is an incompetent app author who ingests data from an untrusted source and doesn't properly sanitize it.
In order for this to be a danger someone would have to run a streamlit app and deploy it on a domain which has valuable cookies to steal. Then the author of the app or somebody managing to inject data the author hasn't escape properly will be able to steal cookies from that domain only.
However this could be mitigated in several ways without removing support for HTML. One is to make the streamlit server send a Content Security Policy that blocks inline scripting and all domains not localhost. It can even block segment.com if the user disabled being tracked in the config. It would also force you to include leaflet.js and not fetch it from unpkg.com which is odd anyway.
Another option is to put markdown/html into an iframe which is sandboxed and disallows all javascript execution. This would work if the html is meant purely for display and doesn't need to be part of the rest of the page.
Removing the ability for app writers to inject HTML (or even script code) seems like a short sighted and very limiting move. It should be disabled by default, but you will never be able to provide all the features people will want and using custom HTML will provide an escape hatch for experienced developers.
		</comment>
		<comment id='2' author='tvst' date='2019-10-18T05:32:34Z'>
		Still very new to streamlit &amp; very curious to see if there are other ways to achieve this.
I want to use HTML to
a) show links to pictures inside dataframes as actual pictures,
b) display links in a clickable format
		</comment>
		<comment id='3' author='tvst' date='2019-11-02T15:12:02Z'>
		TL;DR
I find it easier to control the rendering of chunks of text using HTML/CSS than using tables in Markdown.
VERBOSE
I'm also late to the party, but still feel the need to comment. I've used streamlit for a couple of projects and I really like the capabilities the tooling provides me!
I work mainly with machine learning and text (NLP), and one of my major gripes is that people in the field tend to focus on the data at an abstract level, and rarely bother to pop the hood open and have a close look at the actual data. To address this issue, I've created data browsers intended to allow for data wallowing. As such, I find it easier to use HTML/CSS to, e.g., do side-by-side comparisons of the outcome of textual similarities produced by different models, than using Markdown for the same purpose. So, until Markdown is better equipped to handle tables, I'll stick to HTML/CSS.
		</comment>
		<comment id='4' author='tvst' date='2019-11-03T00:30:48Z'>
		Would be nice if it was possible to add some JS interactivity for plotly charts. In my concrete example I want to show some image when clicking on a sunburst chart element.
		</comment>
		<comment id='5' author='tvst' date='2019-11-08T19:39:32Z'>
		I'm glad you're rolling this back... I would think harder about severely limiting functionality for security. I don't expect Streamlit to be secure for running a public-facing app at the moment, but seeing as how it's a new product it seems more valuable to enable user experimentation as much as possible.
		</comment>
		<comment id='6' author='tvst' date='2019-11-19T17:58:24Z'>
		Well it's not rolled back, the &lt;denchmark-link:https://github.com/rexxars/react-markdown/blob/889365c26f15a3468c0c4152c6c53a53876026c6/src/plugins/html-parser.js#L30&gt;parseHTML&lt;/denchmark-link&gt;
 function from react-markdown still strips script tags and apparently also javascript handlers. Even with a lot of digging I couldn't find any way to add some JS.
The thing unsafe_allow_html allows is to add simple HTML, e.g. for formatting. With a limited set of tags this should be fairly safe, so the option name is also a bit of a misfit.
		</comment>
		<comment id='7' author='tvst' date='2019-12-06T07:11:55Z'>
		I was trying to render pyLDAvis on streamlit but couldn't manage to do so :/ so i had to manually put a link for redirecting to html. Would be nice if in future I could render HTML  with JS directly
		</comment>
		<comment id='8' author='tvst' date='2019-12-09T18:54:08Z'>
		Is there a fork that does not have this restriction?
		</comment>
		<comment id='9' author='tvst' date='2020-03-03T02:45:39Z'>
		Colors and Font sizes are pretty important to us all and critical when it comes to good presentation.
		</comment>
	</comments>
</bug>