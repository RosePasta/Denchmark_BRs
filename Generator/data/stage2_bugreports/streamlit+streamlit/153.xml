<bug id='153' author='treuille' open_date='2019-09-20T19:00:59Z' closed_time='2019-12-05T09:26:36Z'>
	<summary>Potentially inconsistent behavior in `st.cache` depending on whether function inputs are implicit or explicit</summary>
	<description>
&lt;denchmark-h:h1&gt;Summary&lt;/denchmark-h&gt;

Thanks to the amazing work of &lt;denchmark-link:https://github.com/domoritz&gt;@domoritz&lt;/denchmark-link&gt;
,  treats both explicit dependencies (i.e. function arguments) and implicit dependencies (i.e. closures) similarly: they're both hashed to detect changes.
But it treats these two types of dependenices differently if they're mutated in the cached function: unlike explicit dependencies, implicit dependies can be mutated without Streamlit's complaining.
Is this desired behavior? If so, how can we convey this clearly to  users? Let's figure that out before fixing anythign here.
&lt;denchmark-h:h2&gt;Steps to reproduce&lt;/denchmark-h&gt;

Consider these two cases:
&lt;denchmark-h:h3&gt;Case 1: Inplicit dependency in a cached function&lt;/denchmark-h&gt;

In this first case, the cached plus_n implicitly depends on n which it mutates:
n = [10]

@st.cache
def plus_n(x):
    the_answer = n[0] + x
    n.append('a') # &lt;- mutate `n` on purpose
    return the_answer

st.write(10, plus_n(10))
and Streamlit doesn't complain:
&lt;denchmark-link:https://user-images.githubusercontent.com/1673013/65360513-120e4780-dbb5-11e9-8648-32895121a1ff.png&gt;&lt;/denchmark-link&gt;

&lt;denchmark-h:h3&gt;Case 2: Explicit dependency in a cached function&lt;/denchmark-h&gt;

In this second case, we make tiny modification plus_n now depends explicitly on the n parameter and Streamlit complains:
import streamlit as st
n = [10]

@st.cache
def plus_n(n, x):
    the_answer = n[0] + x
    n.append('a') # &lt;- mutate `n` on purpose
    return the_answer

st.write(10, plus_n(n, 10))
but this time, Streamlit does complain!
&lt;denchmark-link:https://user-images.githubusercontent.com/1673013/65360491-03c02b80-dbb5-11e9-9c76-e74693cbd4e6.png&gt;&lt;/denchmark-link&gt;

&lt;denchmark-h:h1&gt;Behavior&lt;/denchmark-h&gt;

This appears inconistent, but maybe it's desired. I would be curious to hear our maestro of caching &lt;denchmark-link:https://github.com/domoritz&gt;@domoritz&lt;/denchmark-link&gt;
's thoughts on this question.
&lt;denchmark-h:h1&gt;Next Steps&lt;/denchmark-h&gt;

 Let's wait for &lt;denchmark-link:https://github.com/domoritz&gt;@domoritz&lt;/denchmark-link&gt;
's
&lt;denchmark-h:h2&gt;Possible Solution&lt;/denchmark-h&gt;

Should we have an equivalent to  but for input arguments? That would seem to make sense for the case where the input is being modified in a non-essetial way, such as if it has it's own internal caching or initialization logic. (That's what's happening in &lt;denchmark-link:https://github.com/ines&gt;@ines&lt;/denchmark-link&gt;
's &lt;denchmark-link:https://gist.github.com/ines/b320cb8441b590eedf19137599ce6685#file-streamlit_displacy-py-L23&gt;snippet&lt;/denchmark-link&gt;
.)
Or maybe the behavior above already implicitkly provides this feature? If so, how can we convey this clearly to users!
&lt;denchmark-h:h1&gt;Debug info&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;$ streamlit version &amp;&amp; python --version &amp;&amp; pyenv --version &amp;&amp; sw_vers &amp;&amp; "/Applications/Google Chrome.app/Contents/MacOS/Google Chrome" --version
Python 3.6.5
pyenv 1.2.3
ProductName:	Mac OS X
ProductVersion:	10.14.6
BuildVersion:	18G95
Google Chrome 76.0.3809.132 
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='treuille' date='2019-09-20T19:22:02Z'>
		In &lt;denchmark-link:https://github.com/streamlit/streamlit/blob/develop/lib/streamlit/caching.py#L420&gt;https://github.com/streamlit/streamlit/blob/develop/lib/streamlit/caching.py#L420&lt;/denchmark-link&gt;
, we warn people about modifications to the arguments. We could add something similar for referenced objects. Essentially, we have to get the list of referenced object before the function is invoked, hash them, and then hash again at the end of the function. This may add additional runtime cost since we would be hashing referenced objects twice.
		</comment>
		<comment id='2' author='treuille' date='2019-12-05T09:26:36Z'>
		Update: decided not to do this. Instead, we'll just stop caching implicit inputs. See &lt;denchmark-link:https://github.com/streamlit/streamlit/issues/789&gt;#789&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>