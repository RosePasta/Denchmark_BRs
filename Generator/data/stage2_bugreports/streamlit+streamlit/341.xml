<bug id='341' author='noahtren' open_date='2019-10-09T17:28:54Z' closed_time='2020-02-13T23:55:45Z'>
	<summary>Visualize Keras Model With st.graphviz_chart Not Working</summary>
	<description>
&lt;denchmark-h:h1&gt;Summary&lt;/denchmark-h&gt;

Keras lets you create a graph visualization of a model using pydot. When converted to a string, the object returned by the Keras function should be able to be used by Streamlit to make a graphviz visualization.
&lt;denchmark-h:h1&gt;Steps to reproduce&lt;/denchmark-h&gt;


Create a Keras model and do model_graph = tf.keras.utils.model_to_dot(model)
Convert the pydot object to a string using model_graph = str(model_graph)
In my example, this gave a string as below:

&lt;denchmark-code&gt;digraph G { concentrate=True; dpi=96; rankdir=TB; node [shape=record]; 2050491236744 [label="input_1: InputLayer"]; 2050491336136 [label="conv2d: Conv2D"]; 2050491495304 [label="activation: Activation"]; 2050491496136 [label="batch_normalization_v1: BatchNormalization"]; 2050491498120 [label="conv2d_1: Conv2D"]; 2050491603016 [label="activation_1: Activation"]; 2050491604104 [label="max_pooling2d: MaxPooling2D"]; 2050491609800 [label="batch_normalization_v1_1: BatchNormalization"]; 2050491611912 [label="conv2d_2: Conv2D"]; 2050491622344 [label="activation_2: Activation"]; 2050491623496 [label="max_pooling2d_1: MaxPooling2D"]; 2050491625032 [label="batch_normalization_v1_2: BatchNormalization"]; 2050491606728 [label="conv2d_3: Conv2D"]; 2050491608904 [label="activation_3: Activation"]; 2050491597832 [label="max_pooling2d_2: MaxPooling2D"]; 2050491599432 [label="batch_normalization_v1_3: BatchNormalization"]; 2050491654792 [label="conv2d_4: Conv2D"]; 2050491656968 [label="activation_4: Activation"]; 2050491658120 [label="max_pooling2d_3: MaxPooling2D"]; 2050491667912 [label="batch_normalization_v1_4: BatchNormalization"]; 2050491670024 [label="conv2d_5: Conv2D"]; 2050491680456 [label="activation_5: Activation"]; 2050491681608 [label="max_pooling2d_4: MaxPooling2D"]; 2050491687304 [label="batch_normalization_v1_5: BatchNormalization"]; 2050491689416 [label="conv2d_6: Conv2D"]; 2050491703944 [label="activation_6: Activation"]; 2050491705096 [label="max_pooling2d_5: MaxPooling2D"]; 2050491706632 [label="batch_normalization_v1_6: BatchNormalization"]; 2050491721160 [label="conv2d_7: Conv2D"]; 2050491723272 [label="activation_7: Activation"]; 2050491724488 [label="max_pooling2d_6: MaxPooling2D"]; 2050491726024 [label="batch_normalization_v1_7: BatchNormalization"]; 2050491736392 [label="conv2d_8: Conv2D"]; 2050491738568 [label="activation_8: Activation"]; 2050491739720 [label="batch_normalization_v1_8: BatchNormalization"]; 2050491750088 [label="conv2d_transpose: Conv2DTranspose"]; 2050491752264 [label="activation_9: Activation"]; 2050491765768 [label="batch_normalization_v1_9: BatchNormalization"]; 2050491767880 [label="add: Add"]; 2050491756808 [label="conv2d_transpose_1: Conv2DTranspose"]; 2050491758984 [label="activation_10: Activation"]; 2050491760136 [label="up_sampling2d: UpSampling2D"]; 2050491790216 [label="batch_normalization_v1_10: BatchNormalization"]; 2050491792328 [label="add_1: Add"]; 2050491793352 [label="conv2d_transpose_2: Conv2DTranspose"]; 2050491808008 [label="activation_11: Activation"]; 2050491809160 [label="up_sampling2d_1: UpSampling2D"]; 2050491818760 [label="batch_normalization_v1_11: BatchNormalization"]; 2050491820872 [label="add_2: Add"]; 2050491822024 [label="conv2d_transpose_3: Conv2DTranspose"]; 2050491832584 [label="activation_12: Activation"]; 2050491833736 [label="up_sampling2d_2: UpSampling2D"]; 2050491847496 [label="batch_normalization_v1_12: BatchNormalization"]; 2050491849608 [label="add_3: Add"]; 2050491850632 [label="conv2d_transpose_4: Conv2DTranspose"]; 2050491861384 [label="activation_13: Activation"]; 2050491862536 [label="up_sampling2d_3: UpSampling2D"]; 2050491864008 [label="batch_normalization_v1_13: BatchNormalization"]; 2050491866120 [label="add_4: Add"]; 2050491867336 [label="conv2d_transpose_5: Conv2DTranspose"]; 2050491869704 [label="activation_14: Activation"]; 2050491870856 [label="up_sampling2d_4: UpSampling2D"]; 2050491888712 [label="batch_normalization_v1_14: BatchNormalization"]; 2050491890824 [label="add_5: Add"]; 2050491896136 [label="conv2d_transpose_6: Conv2DTranspose"]; 2050491898504 [label="activation_15: Activation"]; 2050491899656 [label="up_sampling2d_5: UpSampling2D"]; 2050491909320 [label="batch_normalization_v1_15: BatchNormalization"]; 2050491911432 [label="add_6: Add"]; 2050491920840 [label="conv2d_transpose_7: Conv2DTranspose"]; 2050491923272 [label="activation_16: Activation"]; 2050491924360 [label="up_sampling2d_6: UpSampling2D"]; 2050491929928 [label="batch_normalization_v1_16: BatchNormalization"]; 2050491932040 [label="add_7: Add"]; 2050491945544 [label="conv2d_transpose_8: Conv2DTranspose"]; 2050491947912 [label="activation_17: Activation"]; 2050491236744 -&gt; 2050491336136; 2050491336136 -&gt; 2050491495304; 2050491495304 -&gt; 2050491496136; 2050491496136 -&gt; 2050491498120; 2050491498120 -&gt; 2050491603016; 2050491603016 -&gt; 2050491604104; 2050491604104 -&gt; 2050491609800; 2050491609800 -&gt; 2050491611912; 2050491611912 -&gt; 2050491622344; 2050491622344 -&gt; 2050491623496; 2050491623496 -&gt; 2050491625032; 2050491625032 -&gt; 2050491606728; 2050491606728 -&gt; 2050491608904; 2050491608904 -&gt; 2050491597832; 2050491597832 -&gt; 2050491599432; 2050491599432 -&gt; 2050491654792; 2050491654792 -&gt; 2050491656968; 2050491656968 -&gt; 2050491658120; 2050491658120 -&gt; 2050491667912; 2050491667912 -&gt; 2050491670024; 2050491670024 -&gt; 2050491680456; 2050491680456 -&gt; 2050491681608; 2050491681608 -&gt; 2050491687304; 2050491687304 -&gt; 2050491689416; 2050491689416 -&gt; 2050491703944; 2050491703944 -&gt; 2050491705096; 2050491705096 -&gt; 2050491706632; 2050491706632 -&gt; 2050491721160; 2050491721160 -&gt; 2050491723272; 2050491723272 -&gt; 2050491724488; 2050491724488 -&gt; 2050491726024; 2050491726024 -&gt; 2050491736392; 2050491736392 -&gt; 2050491738568; 2050491738568 -&gt; 2050491739720; 2050491739720 -&gt; 2050491750088; 2050491750088 -&gt; 2050491752264; 2050491752264 -&gt; 2050491765768; 2050491726024 -&gt; 2050491767880; 2050491765768 -&gt; 2050491767880; 2050491767880 -&gt; 2050491756808; 2050491756808 -&gt; 2050491758984; 2050491758984 -&gt; 2050491760136; 2050491760136 -&gt; 2050491790216; 2050491706632 -&gt; 2050491792328; 2050491790216 -&gt; 2050491792328; 2050491792328 -&gt; 2050491793352; 2050491793352 -&gt; 2050491808008; 2050491808008 -&gt; 2050491809160; 2050491809160 -&gt; 2050491818760; 2050491687304 -&gt; 2050491820872; 2050491818760 -&gt; 2050491820872; 2050491820872 -&gt; 2050491822024; 2050491822024 -&gt; 2050491832584; 2050491832584 -&gt; 2050491833736; 2050491833736 -&gt; 2050491847496; 2050491667912 -&gt; 2050491849608; 2050491847496 -&gt; 2050491849608; 2050491849608 -&gt; 2050491850632; 2050491850632 -&gt; 2050491861384; 2050491861384 -&gt; 2050491862536; 2050491862536 -&gt; 2050491864008; 2050491599432 -&gt; 2050491866120; 2050491864008 -&gt; 2050491866120; 2050491866120 -&gt; 2050491867336; 2050491867336 -&gt; 2050491869704; 2050491869704 -&gt; 2050491870856; 2050491870856 -&gt; 2050491888712; 2050491625032 -&gt; 2050491890824; 2050491888712 -&gt; 2050491890824; 2050491890824 -&gt; 2050491896136; 2050491896136 -&gt; 2050491898504; 2050491898504 -&gt; 2050491899656; 2050491899656 -&gt; 2050491909320; 2050491609800 -&gt; 2050491911432; 2050491909320 -&gt; 2050491911432; 2050491911432 -&gt; 2050491920840; 2050491920840 -&gt; 2050491923272; 2050491923272 -&gt; 2050491924360; 2050491924360 -&gt; 2050491929928; 2050491496136 -&gt; 2050491932040; 2050491929928 -&gt; 2050491932040; 2050491932040 -&gt; 2050491945544; 2050491945544 -&gt; 2050491947912; }
&lt;/denchmark-code&gt;

&lt;denchmark-h:h2&gt;Expected behavior:&lt;/denchmark-h&gt;

st.graphviz_chart() should render a visualization from the input string.
&lt;denchmark-h:h2&gt;Actual behavior:&lt;/denchmark-h&gt;

There is no visualization. An error is not raised, either.
&lt;denchmark-h:h2&gt;Is this a regression?&lt;/denchmark-h&gt;

Don't know
&lt;denchmark-h:h1&gt;Debug info&lt;/denchmark-h&gt;


Streamlit version: 0.47.4
Using Anaconda
OS version: Windows 10
Browser version: Chrome

	</description>
	<comments>
		<comment id='1' author='noahtren' date='2019-10-11T17:19:58Z'>
		The same here. The following grapviz string won't work. No error and nothing to display.
digraph Tree { node [shape=box, style="filled, rounded", color="black", fontname=helvetica] ; edge [fontname=helvetica] ; 0 [label=&lt;Peak11 ≤ 0.102&lt;br/&gt;gini = 0.492&lt;br/&gt;samples = 48&lt;br/&gt;value = [27, 21]&lt;br/&gt;class = Control&gt;, fillcolor="#e5813939"] ; 1 [label=&lt;gini = 0.0&lt;br/&gt;samples = 6&lt;br/&gt;value = [0, 6]&lt;br/&gt;class = D1&gt;, fillcolor="#399de5ff"] ; 0 -&gt; 1 [labeldistance=2.5, labelangle=45, headlabel="True"] ; 2 [label=&lt;Peak47 ≤ 0.507&lt;br/&gt;gini = 0.459&lt;br/&gt;samples = 42&lt;br/&gt;value = [27, 15]&lt;br/&gt;class = Control&gt;, fillcolor="#e5813971"] ; 0 -&gt; 2 [labeldistance=2.5, labelangle=-45, headlabel="False"] ; 3 [label=&lt;Peak19 ≤ 0.542&lt;br/&gt;gini = 0.375&lt;br/&gt;samples = 32&lt;br/&gt;value = [24, 8]&lt;br/&gt;class = Control&gt;, fillcolor="#e58139aa"] ; 2 -&gt; 3 ; 4 [label=&lt;gini = 0.26&lt;br/&gt;samples = 26&lt;br/&gt;value = [22, 4]&lt;br/&gt;class = Control&gt;, fillcolor="#e58139d1"] ; 3 -&gt; 4 ; 5 [label=&lt;gini = 0.444&lt;br/&gt;samples = 6&lt;br/&gt;value = [2, 4]&lt;br/&gt;class = D1&gt;, fillcolor="#399de57f"] ; 3 -&gt; 5 ; 6 [label=&lt;Peak10 ≤ 1.358&lt;br/&gt;gini = 0.42&lt;br/&gt;samples = 10&lt;br/&gt;value = [3, 7]&lt;br/&gt;class = D1&gt;, fillcolor="#399de592"] ; 2 -&gt; 6 ; 7 [label=&lt;gini = 0.444&lt;br/&gt;samples = 3&lt;br/&gt;value = [2, 1]&lt;br/&gt;class = Control&gt;, fillcolor="#e581397f"] ; 6 -&gt; 7 ; 8 [label=&lt;gini = 0.245&lt;br/&gt;samples = 7&lt;br/&gt;value = [1, 6]&lt;br/&gt;class = D1&gt;, fillcolor="#399de5d4"] ; 6 -&gt; 8 ; }
		</comment>
		<comment id='2' author='noahtren' date='2020-02-13T23:55:45Z'>
		Cannot reproduce in current version of Streamlit.  Example cases seem to render just fine now!
Thanks &lt;denchmark-link:https://github.com/knehez&gt;@knehez&lt;/denchmark-link&gt;
 for the example string, that was very useful.
&lt;denchmark-link:https://user-images.githubusercontent.com/98836/74489192-63c3b100-4e79-11ea-845c-c0dea262f303.png&gt;&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>