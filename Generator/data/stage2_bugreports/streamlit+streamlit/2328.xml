<bug id='2328' author='tconkling' open_date='2020-11-09T18:48:48Z' closed_time='2020-11-10T23:42:10Z'>
	<summary>caching: multiple functions can unexpectedly share a MemCache key</summary>
	<description>
There are two parts to cache retrieval for @st.cache:


Retrieve the decorated function's MemCache instance. We use a (func.__module__, func.__qualname__, func) tuple to get the cache_key that uniquely identifies the function. No two functions (even if they have the same name and body) will share the same MemCache.


Retrieve the cached value from the function's MemCache. This is where we hash the function's arguments to produce the value_key for looking up the value within the MemCache.


We currently pass hash_funcs when computing both cache_key and value_key. This is generally innocuous, since cache_key uses two strings and a function's AST as hash values. However, if you supply a hash_func that operates on string values, you run the risk of having two different functions resolve the same cache_key, and end up unexpectedly sharing a MemCache instance.
See &lt;denchmark-link:https://discuss.streamlit.io/t/caching-with-hash-funcs-fails-for-similar-methods/6941&gt;this forum issue&lt;/denchmark-link&gt;
 for an example of this bug in action.
In short, we should not pass hash_funcs to the cache_key hasher. We never want different functions to share the same MemCache instance. (Passing hash_funcs here was an oversight - the solution is to just pass hash_funcs=None!)
	</description>
	<comments>
	</comments>
</bug>