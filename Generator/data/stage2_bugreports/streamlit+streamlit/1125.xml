<bug id='1125' author='tconkling' open_date='2020-02-20T17:46:02Z' closed_time='2020-04-01T20:08:33Z'>
	<summary>Dataframe styling not applied consistently for floats</summary>
	<description>
&lt;denchmark-h:h2&gt;The problem&lt;/denchmark-h&gt;

This code:
import streamlit as st
import pandas as pd

df = pd.DataFrame({'test': [3.14, 3.1]})
st.dataframe(df.style.format({'test': '{:.2f}'}))
Produces:
&lt;denchmark-link:https://user-images.githubusercontent.com/709022/74963053-ec84a480-53c5-11ea-8ac1-18fdaf1f2536.png&gt;&lt;/denchmark-link&gt;

^the 3.14 entry is incorrectly formatted as 3.1400.
&lt;denchmark-h:h2&gt;The cause&lt;/denchmark-h&gt;


data_frame_proto._get_custom_display_values() computes formatted values from a dataframe styler
It sticks formatted values into the dataframe proto iff the formatted value does not equal the cell's unformatted value (see has_custom_display_value()).
In this case, "{:.2f}".format(3.14) == str(3.14), so the formatted value is not stored in the dataframe. (This is just a bandwidth and serialization optimization, so that e.g. if only one cell in a giant dataframe is formatted, we don't include formatted string versions of all its other cells.)
BUT, on the frontend, floating point values that do not have custom format strings are then passed through format.ts.toFormattedString() (see Dataframe.tsx getCellContentsGetter()). This formats all floats with 4 decimals. For unstyled dataframes, that's a reasonable default. But for styled dataframes, we may actually override the user's styling preferences.

&lt;denchmark-h:h2&gt;Fixes&lt;/denchmark-h&gt;


The simplest fix is to remove the has_custom_display_value check in data_frame_proto._get_custom_display_values(), and pass formatted strings for all cells of a styled dataframe. This will increase the size of most styled dataframe protos.
Alternately, we could avoid applying the default float formatting in the frontend in cases where it would override the user's style preferences. But this requires deeper thought about how best to implement!

	</description>
	<comments>
	</comments>
</bug>