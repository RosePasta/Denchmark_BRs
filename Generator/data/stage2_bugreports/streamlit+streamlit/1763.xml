<bug id='1763' author='asg017' open_date='2020-07-26T17:50:37Z' closed_time='2020-07-26T23:28:09Z'>
	<summary>Streamlit Component iframe reloads when new Python arguments are passed in</summary>
	<description>
&lt;denchmark-h:h1&gt;Summary&lt;/denchmark-h&gt;

When a custom Streamlit Component gets passed new arguments, it causes the entire iframe to be removed and a new one is re-rendered. Instead, I expected the new arguments to be passed in through the iframe through a parent postMessage, which would avoid excessive changes.
&lt;denchmark-h:h1&gt;Steps to reproduce&lt;/denchmark-h&gt;

What are the steps we should take to reproduce the bug:

Download this gist and run streamlit run app.py.
Change the value of the arg1 slider
Observe the 2nd rendered custom component change color.

&lt;denchmark-h:h2&gt;Expected behavior:&lt;/denchmark-h&gt;

In this small example, I expected the background color to not change. I thought that the new value of arg1 would be sent to the custom component through an iframe postMessage, and since the index.html element doesn't have iframe message handling, I though nothing would change.
&lt;denchmark-h:h2&gt;Actual behavior:&lt;/denchmark-h&gt;

When the arguments for the component changed on the Python side, it causes the iframe to be completely removed and added back in, causing the color to reload. You can also see the component get removed for a second, only to be replaced by a new iframe.
&lt;denchmark-link:https://user-images.githubusercontent.com/15178711/88474385-a4206400-ceda-11ea-95a4-afd4ccefa017.gif&gt;&lt;/denchmark-link&gt;

&lt;denchmark-h:h2&gt;Is this a regression?&lt;/denchmark-h&gt;

no
&lt;denchmark-h:h1&gt;Debug info&lt;/denchmark-h&gt;


Streamlit version: 0.64.0
Python version: 3.7.3
Using virtualenv and pip
OS version: ChromeOS Version 84.0.4147.83
Browser version: Chrome 84.0.4147.83

&lt;denchmark-h:h1&gt;Additional information&lt;/denchmark-h&gt;

I came across this when I was making a Streamlit Component from the TypeScript example. When I changed the argument values from the Python side, I expected  &lt;MyComponent/&gt; to run shouldComponentUpdate() and componentDidUpdate() with the new values in this.props.args. Instead, it seemed like the entire iframe page was removed and rebuilt again, so I made the smaller example above to make sure I wasn't going crazy.
Like I said in the example notebook, this may be the expected behavior, but I couldn't find anything in the docs about it, and some light exploring &lt;denchmark-link:https://github.com/streamlit/component-template/blob/a8bce55c7ad6d162b1056575d61a2ac78e51ecc3/template/my_component/frontend/src/streamlit/streamlit.ts#L124-L132&gt;in the example component code&lt;/denchmark-link&gt;
 made me think that new rendered events were supposed to be transmitted through postMessage.
The reason why I wanted the postMessage behavior was so that I could have more control for how data updates change my component. For example, if my custom component was a bar chart and I passed in a new "color" parameter, I'd want to be able to just change the color of the already-rendered bar chart, instead of reloading the entire thing.
	</description>
	<comments>
		<comment id='1' author='asg017' date='2020-07-26T20:46:54Z'>
		Hi &lt;denchmark-link:https://github.com/asg017&gt;@asg017&lt;/denchmark-link&gt;
, thanks for the detailed report !
If I understood your issue correctly, it may &lt;denchmark-link:https://github.com/streamlit/component-template/blob/a8bce55c7ad6d162b1056575d61a2ac78e51ecc3/template/my_component/__init__.py#L54&gt;not be totally apparent from the tutorial&lt;/denchmark-link&gt;
 but there's a  argument you can pass to your  function to prevent the iframe from remounting.
with st.echo():
    arg1 = st.slider("arg1")
    test(arg1=arg1, key="1")
Is it the behavior you're expecting ?
Fanilo
		</comment>
		<comment id='2' author='asg017' date='2020-07-26T23:28:09Z'>
		&lt;denchmark-link:https://github.com/andfanilo&gt;@andfanilo&lt;/denchmark-link&gt;
 ah yup, that seems to do exactly what I want, thank you so much! Will close this
		</comment>
	</comments>
</bug>