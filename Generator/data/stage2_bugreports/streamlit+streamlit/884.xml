<bug id='884' author='amineHY' open_date='2019-12-20T23:30:39Z' closed_time='2020-01-17T12:19:37Z'>
	<summary>can't read an image uploaded with st.file_uploader()</summary>
	<description>
I get my hand on the new feature that we all have been waiting for.
I tested it to upload an image and read it with OpenCV (cv.VideoCapture) but unfortunately, I encounter an error. The type of the uploaded image is &lt;_io.BytesIO object at 0x7f4c7adc7db0&gt;
Error message
&lt;denchmark-code&gt;TypeError: an integer is required (got type _io.BytesIO)
Traceback:
  File "/usr/local/lib/python3.6/site-packages/streamlit/ScriptRunner.py", line 324, in _run_script
    exec(code, module.__dict__)
  File "/workspaces/inveesion/main.py", line 767, in &lt;module&gt;
    cap = Config().input_output_data(guiParam)
  File "/workspaces/inveesion/main.py", line 508, in input_output_data
    cap = cv.VideoCapture(file_path)
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='amineHY' date='2019-12-21T08:29:56Z'>
		The return type of file_uploader is , I think all that is required is some docs on how to load this with openCV/PIL. I have tried a few approaches with PIL but it &lt;denchmark-link:https://pillow.readthedocs.io/en/3.1.x/reference/Image.html#PIL.Image.frombytes&gt;appears&lt;/denchmark-link&gt;
 you need the image shape...?
		</comment>
		<comment id='2' author='amineHY' date='2019-12-21T08:36:27Z'>
		Edit - just noticed this thread with solution &lt;denchmark-link:https://discuss.streamlit.io/t/png-bytes-io-numpy-conversion-using-file-uploader/1409/2&gt;https://discuss.streamlit.io/t/png-bytes-io-numpy-conversion-using-file-uploader/1409/2&lt;/denchmark-link&gt;

Suggested example for the docs:
import streamlit as st
from PIL import Image
import numpy as np

img_file_buffer = st.file_uploader("Upload an image", type=["png", "jpg", "jpeg"])

image = Image.open(img_file_buffer)
img_array = np.array(image)

if image is not None:
    st.image(
        image,
        caption=f"You amazing image has shape {img_array.shape[0:2]}",
        use_column_width=True,
    )
		</comment>
		<comment id='3' author='amineHY' date='2020-01-16T14:56:39Z'>
		Dear &lt;denchmark-link:https://github.com/robmarkcole&gt;@robmarkcole&lt;/denchmark-link&gt;
,
You need to check that img_file_buffer is not None before trying to Image.open() it. Otherwise, you will get an AttributeError.
import streamlit as st
import numpy as np
from PIL import Image

img_file_buffer = st.file_uploader("Upload an image")
if img_file_buffer is not None:
    image = Image.open(img_file_buffer)
    img_array = np.array(image) # if you want to pass it to OpenCV
    st.image(image, caption="The caption", use_column_width=True)
P.S. Thanks for the suggested example!
		</comment>
		<comment id='4' author='amineHY' date='2020-01-27T16:34:27Z'>
		Hi, this is very helpful. Unfortunately, I have an audio file to upload instead of an image and I need streamlit to open it and display as an audio file. Ive written this code but it keeps on returning an error:
&lt;denchmark-code&gt;with st.file_uploader(label="Upload an audio file", type=["ogg", "wav"]) as input:
    if input == None:
        st.warning('No file selected')
    else:
        audio_file=open(input)
        audio_bytes= audio_file.read(input)
        st.audio(audio_bytes, format='audio/ogg')
&lt;/denchmark-code&gt;

Error: TypeError: expected str, bytes or os.PathLike object, not _io.BytesIO
Is there a better way for me to go around the type error issue in streamlit so I can play the uploaded audio file by the user?
Thank you so much!
		</comment>
		<comment id='5' author='amineHY' date='2020-01-27T21:30:34Z'>
		Hi &lt;denchmark-link:https://github.com/emacarayan&gt;@emacarayan&lt;/denchmark-link&gt;
 ,
I'm working on an improvement to the audio/video/image processors that will allow you to do exactly what you're trying to do.  It should be out with the next release.
For now, try doing this to read the bytes out of the file into the audio processor:
st.audio(audio_file.getvalue(), format="audio/ogg")
Thanks for playing with this new feature.  (And also, thanks for using OGG!  ðŸ˜¸  )
		</comment>
	</comments>
</bug>