<bug id='997' author='lucmos' open_date='2020-01-20T13:18:04Z' closed_time='2020-02-14T01:09:19Z'>
	<summary>Cache error: "TypeError: object supporting the buffer API required"</summary>
	<description>
&lt;denchmark-h:h1&gt;Summary&lt;/denchmark-h&gt;

Caching a function raises an error when it shouldn't.
Error raised:
Traceback (most recent call last):
  File "/home/luca/Repositories/set-operations/src/data/test_bug.py", line 18, in &lt;module&gt;
    o = get()
  File "/home/luca/.cache/pypoetry/virtualenvs/set-operations-GbjOlTQ2-py3.7/lib/python3.7/site-packages/streamlit/caching.py", line 463, in wrapped_func
    return get_or_set_cache()
  File "/home/luca/.cache/pypoetry/virtualenvs/set-operations-GbjOlTQ2-py3.7/lib/python3.7/site-packages/streamlit/caching.py", line 432, in get_or_set_cache
    code_hasher.update(func)
  File "/home/luca/.cache/pypoetry/virtualenvs/set-operations-GbjOlTQ2-py3.7/lib/python3.7/site-packages/streamlit/hashing.py", line 211, in update
    self._update(self.hasher, obj, context)
  File "/home/luca/.cache/pypoetry/virtualenvs/set-operations-GbjOlTQ2-py3.7/lib/python3.7/site-packages/streamlit/hashing.py", line 243, in _update
    hasher.update(b)
TypeError: object supporting the buffer API required
Warnings and error in streamlit:
&lt;denchmark-link:https://user-images.githubusercontent.com/11019190/72728434-a2718e80-3b8d-11ea-8c16-17cf22c6989f.png&gt;&lt;/denchmark-link&gt;

...
&lt;denchmark-link:https://user-images.githubusercontent.com/11019190/72728445-aac9c980-3b8d-11ea-8514-6f4b130529cf.png&gt;&lt;/denchmark-link&gt;

&lt;denchmark-h:h1&gt;Steps to reproduce&lt;/denchmark-h&gt;

Minimal working example:
import os
from typing import List

import streamlit as st

def my_get_env(env_name: str) -&gt; str:
    env_value: str = os.environ[env_name]
    return "fake"

@st.cache
def get():
    return 0
    d = [my_get_env(x) for x in ["a", "b"]]  # comment this out to make it work

o = get()
&lt;denchmark-h:h2&gt;Expected behavior:&lt;/denchmark-h&gt;


It should't give error
Unreachable code shouldn't influence the behavior of the program

&lt;denchmark-h:h2&gt;Actual behavior:&lt;/denchmark-h&gt;

It crashes.
&lt;denchmark-h:h2&gt;Is this a regression?&lt;/denchmark-h&gt;

Yes.
My web app worked in streamlit 0.52.0 without issues.
However this minimal working example doesn't work in 0.52.0. I'm not sure what I am missing.
&lt;denchmark-h:h1&gt;Debug info&lt;/denchmark-h&gt;


Streamlit version: Streamlit, version 0.53.0
Python version: Python 3.7.5
Using: poetry, pyenv

&lt;denchmark-h:h1&gt;Additional information&lt;/denchmark-h&gt;

As a workaround it is possible to define the cache function in this way:
@st.cache(hash_funcs={os._Environ: id})
def get():
    return 0
    d = [my_get_env(x) for x in ["a", "b"]]
&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

Instead, this doesn't work:
@st.cache(allow_output_mutation=True)
def get():
    return 0
    d = [my_get_env(x) for x in ["a", "b"]]
I thought this would completely disable the sanity checks.
&lt;denchmark-h:h1&gt;Additional request&lt;/denchmark-h&gt;

Add an option to completely disable the cache warning/consistency checking mechanism.
	</description>
	<comments>
		<comment id='1' author='lucmos' date='2020-01-20T16:00:38Z'>
		Hi &lt;denchmark-link:https://github.com/lucmos&gt;@lucmos&lt;/denchmark-link&gt;
 ,
allow_output_mutation disables the hashing of the output of your cached function. It doesn't completely disable sanity checks and doesn't affect the hashing of the input to a cached function nor the hashing of the body of the function.
In this case we're having issues hashing the os._Environ instance which is not the output of your cached function and thus not affected by allow_output_mutation. The correct thing to do is to use hash_funcs to let the hasher know how to hash the Environ instance.
We're working on our official caching documentation which will hopefully be released in the next couple weeks and will explain all of this in detail :) The next version of Streamlit will also include some improvements to caching which will hopefully make all of this simpler and easier to grok.
With regards to the unreachable code, is there a particular use case for this? At the moment we hash the entirety of the function as well as referenced functions and variables, without determining which blocks of code might be executed or not.
		</comment>
		<comment id='2' author='lucmos' date='2020-01-21T07:31:48Z'>
		Hi &lt;denchmark-link:https://github.com/jrhone&gt;@jrhone&lt;/denchmark-link&gt;
 thank you for your kind reply!

allow_output_mutation disables the hashing of the output of your cached function. It doesn't completely disable sanity checks and doesn't affect the hashing of the input to a cached function nor the hashing of the body of the function.

I see!
I completely missed the point that not only the input/output are hashed, but even the body itself.

In this case we're having issues hashing the os._Environ instance which is not the output of your cached function and thus not affected by allow_output_mutation. The correct thing to do is to use hash_funcs to let the hasher know how to hash the Environ instance.

Ok, if I understood correctly this is what should be done:
@st.cache(hash_funcs={os._Environ: id})
def get():
    return 0
    d = [my_get_env(x) for x in ["a", "b"]]
However accessing directly the private attribute os._Environ doesn't seem super clean to me.

We're working on our official caching documentation which will hopefully be released in the next couple weeks and will explain all of this in detail :) The next version of Streamlit will also include some improvements to caching which will hopefully make all of this simpler and easier to grok.

That's great!

With regards to the unreachable code, is there a particular use case for this? At the moment we hash the entirety of the function as well as referenced functions and variables, without determining which blocks of code might be executed or not.

The motivation behind the request was to ease the debugging. For me, it wasn't straightforward to understand where the problem came from. Moreover, while debugging I was completely ignoring some parts of the code since they were unreachable.
My use case is the following:

I read data from the disk, instantiate a torch...Dataset and perform inference with some models. I want to cache the Dataset and the inference.

I do not modify the data that I read, thus, I'd like to skip sanity checks to avoid these problems.
I'd like an option to disable the sanity checks, and simply invalidate the cache every time the source files change.
		</comment>
		<comment id='3' author='lucmos' date='2020-01-22T20:41:20Z'>
		Hey &lt;denchmark-link:https://github.com/lucmos&gt;@lucmos&lt;/denchmark-link&gt;


However accessing directly the private attribute os._Environ doesn't seem super clean to me.

Not sure why they felt the need to make it private but seems reasonable to me to access it either directly or as the result of type(os.environ)

The motivation behind the request was to ease the debugging. For me, it wasn't straightforward to understand where the problem came from.

I'm trying to recreate your issue using the latest caching code in develop and actually we're able to hash the os.environ instance with the latest changes. If you encounter issues debugging cache errors after the next version of Streamlit is released please let us know so we can improve error handling / messaging from that point.

I do not modify the data that I read, thus, I'd like to skip sanity checks to avoid these problems and simply invalidate the cache every time the source files change.

I believe using @st.cache with allow_output_mutation is all you'll need to disable sanity checks in that case. Well, might depend to some degree on your code but when we encounter a  file (type io.IOBase) we hash it as name + last modification date + offset. So if the modification date of your file has changed the cache will be invalidated.

Moreover, while debugging I was completely ignoring some parts of the code since they were unreachable.

I filed a feature request :) &lt;denchmark-link:https://github.com/streamlit/streamlit/issues/1005&gt;#1005&lt;/denchmark-link&gt;

		</comment>
		<comment id='4' author='lucmos' date='2020-02-14T01:09:18Z'>
		Closing since this bug refers to behavior that has changed dramatically with st.cache improvements in the most recent version of streamlit.
		</comment>
	</comments>
</bug>