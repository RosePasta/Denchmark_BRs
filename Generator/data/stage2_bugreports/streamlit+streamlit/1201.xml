<bug id='1201' author='tc87' open_date='2020-03-09T15:58:07Z' closed_time='2020-03-24T16:39:54Z'>
	<summary>Prevent reporting _thread._local as the offending object when it's not</summary>
	<description>
&lt;denchmark-h:h1&gt;Summary&lt;/denchmark-h&gt;

When reporting error messages for hash_funcs, there are times we report _thread._local as the offending object when it's not. This also occurs with _thread.RLock.
Ideally, we'd identify some kind of operating-system-level object which we're encountering on the way to hashing these threading objects, and we'd write specific hash_funcs for those in order to prevent these kinds of errors from bubbling up.
&lt;denchmark-h:h1&gt;Example error messages:&lt;/denchmark-h&gt;

_thread._local:
&lt;denchmark-link:https://user-images.githubusercontent.com/26268394/76232260-b3309f00-61e3-11ea-8bd3-84865329bd0b.png&gt;&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='tc87' date='2020-03-11T13:57:42Z'>
		I'm not quite sure what the expected behavior is that this issue is asking for. What do we report as the offending object?
Perhaps &lt;denchmark-link:https://github.com/tvst&gt;@tvst&lt;/denchmark-link&gt;
 can comment here since he just did some work on improving the cache error messaging.
		</comment>
		<comment id='2' author='tc87' date='2020-03-12T16:48:27Z'>
		&lt;denchmark-h:h2&gt;The basic issue&lt;/denchmark-h&gt;

I think that sometimes, when we get rlock errors because we've accidentally hashed our way through the Python threading system before arriving at the rlock. If so, we should find a reasonable type along the way (maybe something to do with threading) and write a hash_func for it to arrest this recursion.
&lt;denchmark-h:h2&gt;Next steps&lt;/denchmark-h&gt;


@jrhone : Do you know if @tvst has already fixed this? If so, we can close this issue.
If not, we need to find an example of this type. @tc87 can you please ask this user to give us a trace so that we can find the offending type?
If we can't get the trace this way, @tc87 and @jrhone, can you guys work together for no more than 1 hour to find a hash_func issue which shows this type?
If that doesn't work, let's close this issue for now and re-open it if we can find a proper type trace which goes through the threading system into rlocks.

If we can find the full trace in steps 2 or 3, let's update this issue and proceed with writing a hash_func for this type.
		</comment>
		<comment id='3' author='tc87' date='2020-03-24T16:39:49Z'>
		The new error message on 0.57.0 should give users more info on the higher level object that we can't hash, and allow them to identify the object that's best for them to hash. This should cause this to be a non-issue. Going to close this for now, but will reopen if users continue to encounter this problem on 0.57.0.
		</comment>
	</comments>
</bug>