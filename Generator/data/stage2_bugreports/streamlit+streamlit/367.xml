<bug id='367' author='tvst' open_date='2019-10-10T22:30:54Z' closed_time='2019-10-22T18:53:50Z'>
	<summary>Performance in Docker container degrades over time</summary>
	<description>
More info: &lt;denchmark-link:https://discuss.streamlit.io/t/streamlit-app-deployed-as-azure-webapp-for-containers-becomes-unresponsive-over-time/330/14?u=thiago&gt;https://discuss.streamlit.io/t/streamlit-app-deployed-as-azure-webapp-for-containers-becomes-unresponsive-over-time/330/14?u=thiago&lt;/denchmark-link&gt;

Steps to repro

Clone https://github.com/MarcSkovMadsen/awesome-streamlit
Run the "installation" steps from here
Run the "build and run the application" steps from that same link
Connect to localhost:8501
Look at CPU usage of Docker container
Leave browser open for 30min
Look at CPU usage of Docker container

	</description>
	<comments>
		<comment id='1' author='tvst' date='2019-10-11T04:14:36Z'>
		It's a good reproduction steps but note it's on port 80.
But an alternative for 1. to 4. would be
docker run -it -p 80:80 --entrypoint "streamlit" marcskovmadsen/awesome-streamlit:latest run app.py
You can also run the bash shell interactively if need using
docker run -it -p 80:80 --entrypoint "/bin/bash" marcskovmadsen/awesome-streamlit:latest
I'm also tracking the issue at the repo here
&lt;denchmark-link:https://github.com/MarcSkovMadsen/awesome-streamlit/issues/6&gt;MarcSkovMadsen/awesome-streamlit#6&lt;/denchmark-link&gt;

		</comment>
		<comment id='2' author='tvst' date='2019-10-11T04:16:09Z'>
		For future reference the current Docker container is tagged 41
&lt;denchmark-link:https://user-images.githubusercontent.com/42288570/66623999-94a38900-ebee-11e9-8892-38a0b3f32188.png&gt;&lt;/denchmark-link&gt;

		</comment>
		<comment id='3' author='tvst' date='2019-10-11T20:10:13Z'>
		Hi &lt;denchmark-link:https://github.com/tvst&gt;@tvst&lt;/denchmark-link&gt;

One fun observation is that it seems the 100% CPU usage i was experiencing in my Docker container on Azure has stopped here. Last time the CPU was at 100% is shown below.
&lt;denchmark-link:https://user-images.githubusercontent.com/42288570/66681225-89923c80-ec72-11e9-99d4-a03f11538b64.png&gt;&lt;/denchmark-link&gt;

If I investigate my Azure builds then I find that it's when I added debugging info to the container
&lt;denchmark-link:https://user-images.githubusercontent.com/42288570/66681692-86e41700-ec73-11e9-9f49-b710d4e7c851.png&gt;&lt;/denchmark-link&gt;

&lt;denchmark-link:https://user-images.githubusercontent.com/42288570/66681729-a24f2200-ec73-11e9-9b9f-ee60d87732c1.png&gt;&lt;/denchmark-link&gt;

The only place i'm doing anything with logging is here
&lt;denchmark-link:https://user-images.githubusercontent.com/42288570/66681856-e3dfcd00-ec73-11e9-8873-3c1c6eb7e1b7.png&gt;&lt;/denchmark-link&gt;

		</comment>
		<comment id='4' author='tvst' date='2019-10-12T19:09:52Z'>
		Hi &lt;denchmark-link:https://github.com/tvst&gt;@tvst&lt;/denchmark-link&gt;

You (and others) can find a full log file here &lt;denchmark-link:https://awesome-streamlit.scm.azurewebsites.net/api/vfs/LogFiles/2019_10_12_RD0003FF542A9C_default_docker.log&gt;https://awesome-streamlit.scm.azurewebsites.net/api/vfs/LogFiles/2019_10_12_RD0003FF542A9C_default_docker.log&lt;/denchmark-link&gt;

Why do I see so many "shutdown. Should it do that.
&lt;denchmark-link:https://user-images.githubusercontent.com/42288570/66706560-9d9e7280-ed34-11e9-88ff-1cd0aa8e3ecc.png&gt;&lt;/denchmark-link&gt;

		</comment>
		<comment id='5' author='tvst' date='2019-10-12T20:02:39Z'>
		I've turned on "Always on"
&lt;denchmark-link:https://user-images.githubusercontent.com/42288570/66707063-77300580-ed3b-11e9-8e2c-e1e42d464baa.png&gt;&lt;/denchmark-link&gt;

According to &lt;denchmark-link:https://stackoverflow.com/questions/30847090/django-fastcgi-app-on-azure-frequent-restarts/30854511#30854511&gt;https://stackoverflow.com/questions/30847090/django-fastcgi-app-on-azure-frequent-restarts/30854511#30854511&lt;/denchmark-link&gt;
 and &lt;denchmark-link:https://lnx.azurewebsites.net/python-app-on-azure-web-apps-frequently-restarts/&gt;https://lnx.azurewebsites.net/python-app-on-azure-web-apps-frequently-restarts/&lt;/denchmark-link&gt;
 the app can timeout after 20 min of idle time.
I also found this
&lt;denchmark-link:https://user-images.githubusercontent.com/42288570/66707102-ed346c80-ed3b-11e9-8929-8123f39a8c2e.png&gt;&lt;/denchmark-link&gt;

at &lt;denchmark-link:https://docs.microsoft.com/en-us/azure/app-service/webjobs-create&gt;https://docs.microsoft.com/en-us/azure/app-service/webjobs-create&lt;/denchmark-link&gt;
.
So maybe tomorrow I will try setting up a job to ping my web app every 20 minutes or so.
		</comment>
		<comment id='6' author='tvst' date='2019-10-13T01:23:09Z'>
		I've had my docker container running for 6 hours locally. And it's just as responsive now as when I started it.
And the %CPUand %MEM now (see below) is the same now as when I started it.
&lt;denchmark-link:https://user-images.githubusercontent.com/42288570/66709633-c17bab80-ed68-11e9-84bd-3f4332ebd079.png&gt;&lt;/denchmark-link&gt;

Thus I now believe the problem is in the Azure Deployment.
		</comment>
		<comment id='7' author='tvst' date='2019-10-13T06:46:53Z'>
		I've created the below script to ping &lt;denchmark-link:https://awesome-streamlit.azurewebsites.net/&gt;https://awesome-streamlit.azurewebsites.net/&lt;/denchmark-link&gt;
 on a regular basis to keep the site responsive as indicated by  &lt;denchmark-link:https://lnx.azurewebsites.net/python-app-on-azure-web-apps-frequently-restarts/&gt; https://lnx.azurewebsites.net/python-app-on-azure-web-apps-frequently-restarts/&lt;/denchmark-link&gt;

I'm running the script on my local laptop for now. Later it should be deployed to Azure Functions or similar if it helps.

I've also done a lot of changes to the app as well.

Sprinkling cache everywhere on my code.
Sprinkling spinners everywhere on my code.


My app is now so fast and responsive locally but it's not nearly as responsive yet in the azure cloud.

So i'm not there yet. But the app can now be used.
"""This job pings the awesome-streamlit site regularly to keep it alive

- https://lnx.azurewebsites.net/python-app-on-azure-web-apps-frequently-restarts/
- https://stackoverflow.com/questions/30847090/
django-fastcgi-app-on-azure-frequent-restarts/30854511#30854511
"""
import logging
import time
from typing import Optional

import requests

logging.basicConfig(format="%(asctime)s - %(message)s", level=logging.INFO)


def ping(
    url: str = "https://awesome-streamlit.azurewebsites.net/",
    sleep_secs: Optional[float] = 2,
):
    """Pings the url every sleep_secs seconds

    Awesome-streamlit uses this job to keep the web application awake. Cf

    - https://lnx.azurewebsites.net/python-app-on-azure-web-apps-frequently-restarts/
    - https://stackoverflow.com/questions/30847090/
django-fastcgi-app-on-azure-frequent-restarts/30854511#30854511

    Keyword Arguments:
        url {str} -- The site to pint (default: {"https://awesome-streamlit.azurewebsites.net/"})
        sleep_secs {float} -- If None the site will be pinged once.
If not None the site will be pinged every sleeps_seconds seconds (default: {200})

    If we setup multiple tenants later we should change the request to a specific website_instance
    ```python
    cookies = dict(ARRAffinity=website_instance_id)
    response = requests.get(url, cookies)  # type:ignore
    ```
    """
    count = 1
    while count == 1 or sleep_secs:
        logging.info("Request %s sent", count)

        response = requests.get(url)
        logging.info(
            "Response %s received, status_code=%s, elapsed=%s",
            count,
            response.status_code,
            response.elapsed,
        )
        text_len = len(response.text)
        logging.info(
            "Response text %s received, len(text)=%s, elapsed=%s",
            count,
            text_len,
            response.elapsed,
        )

        count += 1
        logging.info("Sleeping %s seconds", sleep_secs)
        if sleep_secs:
            time.sleep(sleep_secs)  # type: ignore


if __name__ == "__main__":
    ping(sleep_secs=60)
		</comment>
		<comment id='8' author='tvst' date='2019-10-13T10:22:51Z'>
		The Docker container is still loosing performance on Azure despite the pinging every 60 seconds.
But when I redeploy the container it's now almost as fast as locally.
Locally it's very performant when I start the container and after hours of running. Truly awesome.
		</comment>
		<comment id='9' author='tvst' date='2019-10-13T13:30:34Z'>
		FYI &lt;denchmark-link:https://github.com/tvst&gt;@tvst&lt;/denchmark-link&gt;
 and &lt;denchmark-link:https://github.com/treuille&gt;@treuille&lt;/denchmark-link&gt;

THIS IS IMPORTANT. THERE IS NOW ANOTHER EXAMPLE OF AN APPLICATION WITH INCREASING RESPOSE TIMES. AND ITS NOT DEVELOPED BY ME.
when I first tried it out some days ago it was fast and responsive. Now the response times are 20+ seconds.
You find it here
&lt;denchmark-link:https://fullstackstation.com/streamlit-components-demo&gt;https://fullstackstation.com/streamlit-components-demo&lt;/denchmark-link&gt;

And it's announced here &lt;denchmark-link:https://discuss.streamlit.io/t/how-to-use-streamlit-with-nginx/378&gt;https://discuss.streamlit.io/t/how-to-use-streamlit-with-nginx/378&lt;/denchmark-link&gt;

		</comment>
		<comment id='10' author='tvst' date='2019-10-14T01:14:29Z'>
		Thanks for the heads up, Marc! We'll have someone take a look at these two issues tomorrow.
It turns out Streamlit has become more popular than we could imagine, so we're having to play catch-up with bug reports like these. (But don't worry: we just hired a new awesome engineer and we're interviewing even more!)
		</comment>
		<comment id='11' author='tvst' date='2019-10-17T04:55:14Z'>
		Hi &lt;denchmark-link:https://github.com/tvst&gt;@tvst&lt;/denchmark-link&gt;

Any news on this issue. Thanks in advance.
		</comment>
		<comment id='12' author='tvst' date='2019-10-17T04:57:13Z'>
		Just a few updates

AlwaysOn setting discussed above was for some reason not on. I've turned it on (again?).
I've changed my docker container such that it in addition to running the streamlit run app.py command also runs a small script pinging awesome-streamlit.org every 300 seconds to keep the container alive. It looks like

&lt;denchmark-link:https://user-images.githubusercontent.com/42288570/66978725-535a2000-f0ab-11e9-975a-512d43d33fe9.png&gt;&lt;/denchmark-link&gt;

		</comment>
		<comment id='13' author='tvst' date='2019-10-17T05:02:01Z'>
		One thing I don't understand &lt;denchmark-link:https://github.com/tvst&gt;@tvst&lt;/denchmark-link&gt;
 is that the ping request to awesome-streamlit.org (source code below) responds very fast (0.1 to 0.3 seconds) both locally on my laptop and in azure cloud.
But from chrome locally on my laptop to awesome-streamlit.org the response is much, much slower before I can see the rendered page. Like 4-6 seconds if the container has just been deployed.
Is that because the simple request (in code) just gets the basic things and from Chrome there is all the websocket communication and page rendering?
I'm just wondering how to get a decent performance from the cloud, when I can see that it's so fast and responsive locally. Any hints?
"""This job pings the awesome-streamlit site regularly to keep it alive
- https://lnx.azurewebsites.net/python-app-on-azure-web-apps-frequently-restarts/
- https://stackoverflow.com/questions/30847090/
django-fastcgi-app-on-azure-frequent-restarts/30854511#30854511
"""
import logging
import time
from typing import Optional

import requests

logging.basicConfig(format="%(asctime)s - %(message)s", level=logging.INFO)


def ping(url: str = "https://awesome-streamlit.org", sleep_secs: Optional[float] = 600):
    """Pings the url every sleep_secs seconds
    Awesome-streamlit uses this job to keep the web application awake. Cf
    - https://lnx.azurewebsites.net/python-app-on-azure-web-apps-frequently-restarts/
    - https://stackoverflow.com/questions/30847090/
django-fastcgi-app-on-azure-frequent-restarts/30854511#30854511
    Keyword Arguments:
        url {str} -- The site to pint (default: {"https://awesome-streamlit.azurewebsites.net/"})
        sleep_secs {float} -- If None the site will be pinged once.
If not None the site will be pinged every sleeps_seconds seconds (default: {200})
    If we setup multiple tenants later we should change the request to a specific website_instance
    ```python
    cookies = dict(ARRAffinity=website_instance_id)
    response = requests.get(url, cookies)  # type:ignore
    ```
    """
    count = 1
    while count == 1 or sleep_secs:
        logging.info("Request %s sent to %s", count, url)

        response = requests.get(url)
        logging.info(
            "Response %s received, status_code=%s, elapsed=%s",
            count,
            response.status_code,
            response.elapsed,
        )
        text_len = len(response.text)
        logging.info(
            "Response text %s received, len(text)=%s, elapsed=%s",
            count,
            text_len,
            response.elapsed,
        )

        count += 1
        logging.info("Sleeping %s seconds", sleep_secs)
        if sleep_secs:
            time.sleep(sleep_secs)  # type: ignore


if __name__ == "__main__":
    ping(sleep_secs=300)
		</comment>
		<comment id='14' author='tvst' date='2019-10-17T09:28:25Z'>
		I can see that the pinging has no effect.
In the beginning the response time is fine
&lt;denchmark-link:https://user-images.githubusercontent.com/42288570/66996377-ec4f6200-f0d0-11e9-8321-d9fe1376f4ae.png&gt;&lt;/denchmark-link&gt;

But after some time the response time is very low again.
&lt;denchmark-link:https://user-images.githubusercontent.com/42288570/66996490-1d2f9700-f0d1-11e9-8c92-9f0f2d4ad3bc.png&gt;&lt;/denchmark-link&gt;

I've attached the full log including log from Streamlit. Maybe somebody can use that.
&lt;denchmark-link:https://github.com/streamlit/streamlit/files/3738446/2019_10_17_RD0003FF542A9C_default_docker.log&gt;2019_10_17_RD0003FF542A9C_default_docker.log&lt;/denchmark-link&gt;

		</comment>
		<comment id='15' author='tvst' date='2019-10-17T10:13:41Z'>
		hi &lt;denchmark-link:https://github.com/MarcSkovMadsen&gt;@MarcSkovMadsen&lt;/denchmark-link&gt;

&lt;denchmark-link:https://fullstackstation.com/streamlit-components-demo&gt;https://fullstackstation.com/streamlit-components-demo&lt;/denchmark-link&gt;
 is mine.
I confirm that the response time 20+ seconds is my mistake in deployment. The streamlit application was deployed 2 processes duplicated, it's not docker.
Now, it's working well.
		</comment>
		<comment id='16' author='tvst' date='2019-10-17T10:44:18Z'>
		I've added a top command that shows the %CPU and %Memory usage to the script that is run inside the docker container for better traceability.
top -d 60 -b &amp;
and the output looks something like
&lt;denchmark-link:https://user-images.githubusercontent.com/42288570/67002269-d3987980-f0db-11e9-9c60-5af1b261fc96.png&gt;&lt;/denchmark-link&gt;

when the container is just started locally.
		</comment>
		<comment id='17' author='tvst' date='2019-10-17T10:45:53Z'>
		
hi @MarcSkovMadsen
https://fullstackstation.com/streamlit-components-demo is mine.
I confirm that the response time 20+ seconds is my mistake in deployment. The streamlit application was deployed 2 processes duplicated, it's not docker.
Now, it's working well.

Thanks
		</comment>
		<comment id='18' author='tvst' date='2019-10-17T12:01:25Z'>
		I've added a timer to record and display the execution time of the script in the backend
If i clear the cache and refresh &lt;denchmark-link:https://awesome-streamlit.azurewebsites.net/&gt;https://awesome-streamlit.azurewebsites.net/&lt;/denchmark-link&gt;
 then is see
&lt;denchmark-link:https://user-images.githubusercontent.com/42288570/67006946-8d94e300-f0e6-11e9-8a2d-2b293a352c71.png&gt;&lt;/denchmark-link&gt;

		</comment>
		<comment id='19' author='tvst' date='2019-10-17T12:04:19Z'>
		And I found another measure for the %CPU
&lt;denchmark-link:https://user-images.githubusercontent.com/42288570/67007120-009e5980-f0e7-11e9-8fa6-34e3c8561a71.png&gt;&lt;/denchmark-link&gt;

		</comment>
		<comment id='20' author='tvst' date='2019-10-17T12:33:14Z'>
		And there is still this high CPU Usage
&lt;denchmark-link:https://user-images.githubusercontent.com/42288570/66998107-f4f56780-f0d3-11e9-8f54-2367ddc53143.png&gt;&lt;/denchmark-link&gt;

But the funny thing if I take up the CPU usage in other reports then it is not high.
		</comment>
		<comment id='21' author='tvst' date='2019-10-17T12:42:37Z'>
		I now have better insight into the logs. One thing I notice is that File Watcher are often recreated
&lt;denchmark-link:https://user-images.githubusercontent.com/42288570/67009077-22014480-f0eb-11e9-844e-edc84a59c1ae.png&gt;&lt;/denchmark-link&gt;

And the pattern is that it often happens after the import.reload i had to setup due to Streamlit not providing hot reloading for nested modules (cf. issue 366).
I have now removed the reloading
&lt;denchmark-link:https://user-images.githubusercontent.com/42288570/67009187-5aa11e00-f0eb-11e9-876c-b0d88f469be2.png&gt;&lt;/denchmark-link&gt;

And setup that I don't need any file watchers in production.
&lt;denchmark-link:https://user-images.githubusercontent.com/42288570/67009632-5b867f80-f0ec-11e9-968a-2b2417fa8eae.png&gt;&lt;/denchmark-link&gt;

		</comment>
		<comment id='22' author='tvst' date='2019-10-17T13:56:58Z'>
		Let's cross our fingers. The app has now had a truly amazing performance for 30 minutes. This is not what I have experienced until now.
It's so responsive. Almost like local !!!!!
		</comment>
		<comment id='23' author='tvst' date='2019-10-18T06:53:12Z'>
		FYI &lt;denchmark-link:https://github.com/tvst&gt;@tvst&lt;/denchmark-link&gt;

The application &lt;denchmark-link:https://awesome-streamlit.org/&gt;https://awesome-streamlit.org/&lt;/denchmark-link&gt;
 has now been running with awesome performance for 12 hours.
YOU MAY CLOSE THIS ISSUE.
Thanks for the help
Marc
		</comment>
		<comment id='24' author='tvst' date='2019-10-22T18:53:50Z'>
		Great &lt;denchmark-link:https://github.com/MarcSkovMadsen&gt;@MarcSkovMadsen&lt;/denchmark-link&gt;
 !
From your comments in &lt;denchmark-link:https://discuss.streamlit.io/t/streamlit-app-deployed-as-azure-webapp-for-containers-becomes-unresponsive-over-time/330/14?u=thiago&gt;the original thread&lt;/denchmark-link&gt;
 it looks like this was mostly due to the instance being brought down?
If so, that's indeed unrelated to Streamlit, so I'll close the thread.
But if you think there was something else afoot, please let us know!
		</comment>
	</comments>
</bug>