<bug id='805' author='lucmos' open_date='2019-12-05T11:17:56Z' closed_time='2019-12-28T07:35:03Z'>
	<summary>Hot-reloading not working</summary>
	<description>
Hi, I think I'm hitting this again &lt;denchmark-link:https://github.com/streamlit/streamlit/issues/358&gt;#358&lt;/denchmark-link&gt;

I did not investigate why the fix &lt;denchmark-link:https://github.com/streamlit/streamlit/pull/537&gt;#537&lt;/denchmark-link&gt;
 doesn't work
&lt;denchmark-h:h1&gt;System&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;Streamlit: version 0.51.0
Description:    Manjaro Linux
Release:        18.1.3
&lt;/denchmark-code&gt;

Using streamlit remotely with ssh port forwarding
&lt;denchmark-h:h1&gt;Steps to reproduce:&lt;/denchmark-h&gt;

&lt;denchmark-h:h2&gt;Files&lt;/denchmark-h&gt;

project/demo/demo.py
&lt;denchmark-code&gt;import streamlit as st
from mytest import fun

st.info(fun())
&lt;/denchmark-code&gt;

&lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;

project/src/mytest.py
&lt;denchmark-code&gt;def fun():
    return 2
&lt;/denchmark-code&gt;

&lt;denchmark-h:h2&gt;Execute&lt;/denchmark-h&gt;

cd project
export PYTHONPATH="${PYTHONPATH}:src/"
streamlit run demo/demo.py
&lt;denchmark-h:h2&gt;Problem&lt;/denchmark-h&gt;

Changing the return value of fun() in src/mytest.py doesn't change the output in streamlit.
Neither by modifying src/mytest.py and saving it (this would be cool), modifying demo/demo.py and saving it, pressing Run again nor Clear cache
&lt;denchmark-h:h2&gt;Workaround&lt;/denchmark-h&gt;

Closing and restart the streamlit server.
&lt;denchmark-h:h2&gt;Maybe related&lt;/denchmark-h&gt;

I have problems making streamlit recognize newly installed python packages, I have to restart the server.
	</description>
	<comments>
		<comment id='1' author='lucmos' date='2019-12-10T19:56:28Z'>
		This repros regardless of the remote ssh setup on MacOS.
		</comment>
		<comment id='2' author='lucmos' date='2019-12-10T23:33:10Z'>
		What happens here is that we add modules to the Watcher only of files local to the "main script" directory:
&lt;denchmark-link:https://github.com/streamlit/streamlit/blob/develop/lib/streamlit/watcher/LocalSourcesWatcher.py#L205&gt;https://github.com/streamlit/streamlit/blob/develop/lib/streamlit/watcher/LocalSourcesWatcher.py#L205&lt;/denchmark-link&gt;

In this case the main script is  so we exclude 
We should add PYTHONPATH to the above condition. This should solve the problem. I am working on a PR.
		</comment>
		<comment id='3' author='lucmos' date='2019-12-11T00:19:09Z'>
		Hi,
Would it work if we had nested python packages, e.g. src/mypackage/mytest.py, but only src in the PYTHONPATH?
Please consider adding to the watcher all the python files *.py recursively from the working directory from which streamlit is launched.
So in in this examples I'd like to watch all the file that match project/**/*.py.
As an additional benefit, in this way it should work even with configurations that don't make use of the PYTHONPATH env variable, but use the os package to change paths.
		</comment>
		<comment id='4' author='lucmos' date='2019-12-13T10:19:10Z'>
		
Would it work if we had nested python packages, e.g. src/mypackage/mytest.py, but only src in the PYTHONPATH?

We will allow anything prefixed by an element in the PYTHONPATH, so it should work. I think we should consider that the individual paths specified in the PYTHONPATH can be absolute paths or paths that are relative to the current working directory.

Please consider adding to the watcher all the python files *.py recursively from the working directory from which streamlit is launched.

This was debated some time back and we decided against it. We choose instead to include everything that was contained in the directory of the main python script. The reasoning behind that is that you have less control on what it is in your current working directory. That said, I'll bring it up again internally. We can also add more configurability. The PYTHONPATH itself allows for easily get around this and seems a reasonable solution to me. Given that the PYTHONPATH can be relative, by adding . to the PYTHONPATH you would allow anything contained in the current working directory recursively.
		</comment>
		<comment id='5' author='lucmos' date='2019-12-28T07:35:03Z'>
		Closing since a solution was merged recently.
		</comment>
		<comment id='6' author='lucmos' date='2020-01-01T02:36:34Z'>
		Sorry, I am not following. If I want to whitelist a directory so that importing files from it add those files to the watchlist, I need to add that directory to the PYTHONPATH? Can I modify the python path from inside the streamlit script (before importing) or does it need to happen before invoking the streamlit python process?
		</comment>
		<comment id='7' author='lucmos' date='2020-01-01T02:58:47Z'>
		Hmm, maybe looks like my problem is that while &lt;denchmark-link:https://github.com/streamlit/streamlit/pull/845&gt;#845&lt;/denchmark-link&gt;
 was merged 18 days ago, and version 52.2 was released 8 days ago, &lt;denchmark-link:https://github.com/streamlit/streamlit/pull/845&gt;#845&lt;/denchmark-link&gt;
 is not yet included in master/version 52.2. Any idea when it is going to make it into a release?
		</comment>
	</comments>
</bug>