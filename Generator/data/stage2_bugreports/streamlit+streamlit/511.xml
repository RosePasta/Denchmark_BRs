<bug id='511' author='amineHY' open_date='2019-10-23T10:11:51Z' closed_time='2019-10-25T09:46:23Z'>
	<summary>Problem releasing the videoCapture (OpenCV) after Rerun the App</summary>
	<description>
I am able to stream the video from the webcam to streamlit UI.
The problem occurs when I change a parameter in the application;
Here is the code to reproduce the bug:
&lt;denchmark-code&gt;import streamlit as st
import cv2 as cv

cap = cv.VideoCapture(0)

frameST = st.empty()
param=st.sidebar.slider('chose your value')

while True: 
    ret, frame = cap.read()
    # Stop the program if reached end of video
    if not ret:
        print("Done processing !!!")
        cv.waitKey(3000)
        # Release device
        cap.release()
        break

    frameST.image(frame, channels="BGR")

&lt;/denchmark-code&gt;

Any help ?
	</description>
	<comments>
		<comment id='1' author='amineHY' date='2019-10-23T17:17:26Z'>
		Here is a clever workaround, i run a subthread inside while loop and keep on updating latest time frame, if that subthread finds a time gap greater than 1 sec then it gets terminated and ultimately releasing video capture object... one thing that i observed is if you use your code and stop it from UI, the lines below while loop are not been executed
import streamlit as st
from threading import Thread
import cv2
import time

cap = cv2.VideoCapture(0)
frameST = st.empty()
param = st.sidebar.slider('choose your value')

stopper_started = False
while True:
    success, frame = cap.read()
    if not success: break

    frameST.image(frame, channels="BGR")
    updated_time = time.time()

    if not stopper_started:
        #this block executes for once with every
        #streamlit re-run command
        def stopper(self):
            while True:
                try:
                    #if time difference increases this thread will be terminated
                    time_diff = round(time.time() - updated_time)
                    if time_diff &gt;1: #1 second
                        print("Done processing !!!")
                        print("Releasing VideoCapture")
                        #if streamlit ui is stopped
                        #time gap will increase
                        #hence releasing camera resource
                        cap.release()
                        break
                except: pass
        th = Thread(target=stopper, args=(0,))
        th.daemon = True
        th.start()
        stopper_started = True
		</comment>
		<comment id='2' author='amineHY' date='2019-10-23T17:45:15Z'>
		what i noticed is, if you run a thread holding while loop,
after re-running the streamlit... new threads are automatically started while older one are still running
and as many times you will re-run a new thread will be spawned
		</comment>
		<comment id='3' author='amineHY' date='2019-10-24T05:39:04Z'>
		Hi all
This seems like the kind of issue I need to stare at for a while so I can wrap my head around it ðŸ˜–  ...but it may be useful for me to jump in real quick to explain how Streamlit works internally.
Streamlit launches a new thread each time it needs to re-execute your script.
Meaning:

Whenever a new browser tab connects to your app
Whenever a user changes a widget value via the UI

So based on this:

new threads are automatically started while older one are still running

...from a cursory look it seems that things are actually working as designed.
But since in your case you're grabbing a limited resource with VideoCapture(), you probably need to make all threads share that resource. The best way to do that is to put it in the Streamlit cache:
import streamlit as st
import cv2 as cv

@st.cache(allow_output_mutation=True)
def get_cap():
    return cv.VideoCapture(0)

cap = get_cap()

frameST = st.empty()
param=st.sidebar.slider('chose your value')

while True:
    ret, frame = cap.read()
    # Stop the program if reached end of video
    if not ret:
        print("Done processing !!!")
        cv.waitKey(3000)
        # Release device
        cap.release()
        break

    frameST.image(frame, channels="BGR")
Let me know if that works for you!
		</comment>
		<comment id='4' author='amineHY' date='2019-10-24T10:20:24Z'>
		Hi &lt;denchmark-link:https://github.com/imneonizer&gt;@imneonizer&lt;/denchmark-link&gt;
 and &lt;denchmark-link:https://github.com/tvst&gt;@tvst&lt;/denchmark-link&gt;
 . Thank you for considering my issue and taking the time to reply.
I have tested the proposed solution by &lt;denchmark-link:https://github.com/tvst&gt;@tvst&lt;/denchmark-link&gt;
  for its simplicity and it works very well. The video remains captured in the background (the LED of my webcam keep blinking) and
The solution of &lt;denchmark-link:https://github.com/imneonizer&gt;@imneonizer&lt;/denchmark-link&gt;
 worth testing as well. I will take the time to test it later.
Note:


Just a reminder for those that would like to test this solution. I encounter an error at  @st.cache(allow_output_mutation=True) and a simple upgrade of streamlit to the latest version solved the issue.


Possibility of improvement: Clear cache does not release the cap object. I have to stop the streamlit server in order to restart to clear the cache.


		</comment>
		<comment id='5' author='amineHY' date='2019-10-24T11:45:32Z'>
		
I kinda got the idea how streamlit is working internally when i find new threads were created

&lt;denchmark-h:h1&gt;Its not a bug its feature ðŸ’¯&lt;/denchmark-h&gt;

		</comment>
		<comment id='6' author='amineHY' date='2019-10-25T17:42:37Z'>
		
Possibility of improvement: Clear cache does not release the cap object. I have to stop the streamlit server in order to restart to clear the cache.

Good point! I wonder if we should have a custom cache release for cases like these...
Can you open a feature request on GitHub? (I'm away from my computer all day today ðŸ˜„)
		</comment>
	</comments>
</bug>