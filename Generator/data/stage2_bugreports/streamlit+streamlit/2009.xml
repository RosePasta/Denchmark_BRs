<bug id='2009' author='Ravi-Nayak' open_date='2020-09-17T10:02:23Z' closed_time='2020-09-17T13:51:41Z'>
	<summary>why im getting OSError: [Errno 5] Input/output error error while running streamlit in live server ? the code is running ok in my localhost but getting OSError: [Errno 5] Input/output error while running on server</summary>
	<description>
&lt;denchmark-code&gt;from PIL import Image
import io
import time
# Imports
import numpy as np
import os
import six.moves.urllib as urllib
import sys
import tarfile
# import tensorflow as tf
import tensorflow.compat.v1 as tf

import zipfile
import cv2
import numpy as np
import csv
import time
from packaging import version

from collections import defaultdict
from io import StringIO
from matplotlib import pyplot as plt
from PIL import Image
import connect
# Object detection imports
from utils import label_map_util
from utils import visualization_utils as vis_util
import shutil
import moviepy.editor as moviepy
import cv2 as cv

from app import gun
def fun():
    with open("style.css") as f:
        st.markdown('&lt;style&gt;{}&lt;/style&gt;'.format(f.read()), unsafe_allow_html=True)
    path = "path/image/tele_logo.jpg"
    image = Image.open(path)
    st.image(image, width=150)
    st.markdown("&lt;h1 style='text-align: center; color:darkturquoise;'&gt;VIDARIA PLATFORM DEMO&lt;/h1&gt;",
                unsafe_allow_html=True)
    st.markdown("&lt;h1 style ='text-align: center; color:dimgray;'&gt;Telenext System ML Capability Showcase",unsafe_allow_html=True)
    st.sidebar.title("Select Feature")
    listmenu =[ "Vehicle Detection","other"]
    option =st.sidebar.selectbox("Select Option",listmenu)
    if option=="Vehicle Detection":
        menu2=["Video_Detection","Video_Demo_test"]
        choice1 =st.selectbox("choose Option", menu2)
        if choice1=="Video_Demo_test":
            test_vid = os.listdir(connect.INPUT_VID)
            test_vid1 = st.selectbox('Please choose a test Video', test_vid)
            if test_vid1 == "walk.mp4":
                source = "path/input-ar/walk.mp4"
                destination = "path/video/input.mp4"
                new_path = shutil.copy(source, destination)
                gun()
            if test_vid1 == "sample_1.mp4":
                source = "path/input-ar/sample_1.mp4"
                destination = "path/video/input.mp4"
                new_path = shutil.copy(source, destination)
                gun()

            if test_vid1 == "sample_2.mp4":
                source = "path/input-ar/sample_2.mp4"
                destination = "path/video/input.mp4"
                new_path = shutil.copy(source, destination)
                gun()


    #
        if choice1=="Video_Detection":
            frameST = st.empty()
            st.title("Vehicle Detection Demo")
            st.subheader("To Detect objects From Videos Upload a file")
            uploaded_file = st.file_uploader("Choose a video...", type=["mp4"])
            temporary_location = False

            if uploaded_file is not None:
                g = io.BytesIO(uploaded_file.read())  ## BytesIO Object
                temporary_location = "path/video/input.mp4"

                with open(temporary_location, 'wb') as out:  ## Open temporary file as bytes
                    out.write(g.read())  ## Read bytes into file

                    # close file
                    out.close()

                # Read the video
                # st.video(temporary_location)
                frameST = st.empty()
                a = st.button("Process")
                if a:
                    st.markdown("&lt;h1 style='color:brown;'&gt;Processing Video Please Wait.. &lt;/h1&gt;",
                                unsafe_allow_html=True)

                    # initialize .csv
                    with open('traffic_measurement.csv', 'w') as f:
                        writer = csv.writer(f)
                        csv_line = \
                            'Vehicle Type/Size, Vehicle Color, Vehicle Movement Direction, Vehicle Speed (km/h)'
                        writer.writerows([csv_line.split(',')])

                    if version.parse(tf.__version__) &lt; version.parse('1.4.0'):
                        raise ImportError('Please upgrade your tensorflow installation to v1.4.* or later!'
                                          )

                    # input video
                    cap = cv2.VideoCapture('path/video/input.mp4')


                    # Variables
                    total_passed_vehicle = 0  # using it to count vehicles

                    # By default I use an "SSD with Mobilenet" model here. See the detection model zoo (https://github.com/tensorflow/models/blob/master/research/object_detection/g3doc/detection_model_zoo.md) for a list of other models that can be run out-of-the-box with varying speeds and accuracies.
                    # What model to download.
                    MODEL_NAME = 'ssd_mobilenet_v1_coco_2018_01_28'
                    MODEL_FILE = MODEL_NAME + '.tar.gz'
                    DOWNLOAD_BASE = \
                        'http://download.tensorflow.org/models/object_detection/'

                    # Path to frozen detection graph. This is the actual model that is used for the object detection.
                    PATH_TO_CKPT = MODEL_NAME + '/frozen_inference_graph.pb'

                    # List of the strings that is used to add correct label for each box.
                    PATH_TO_LABELS = os.path.join('data', 'mscoco_label_map.pbtxt')

                    NUM_CLASSES = 90

                    # Download Model
                    # uncomment if you have not download the model yet
                    # Load a (frozen) Tensorflow model into memory.
                    detection_graph = tf.Graph()
                    with detection_graph.as_default():
                        od_graph_def = tf.GraphDef()
                        with tf.io.gfile.GFile(PATH_TO_CKPT, 'rb') as fid:
                            serialized_graph = fid.read()
                            od_graph_def.ParseFromString(serialized_graph)
                            tf.import_graph_def(od_graph_def, name='')

                    # Loading label map
                    # Label maps map indices to category names, so that when our convolution network predicts 5, we know that this corresponds to airplane. Here I use internal utility functions, but anything that returns a dictionary mapping integers to appropriate string labels would be fine
                    label_map = label_map_util.load_labelmap(PATH_TO_LABELS)
                    categories = label_map_util.convert_label_map_to_categories(label_map,
                                                                                max_num_classes=NUM_CLASSES,
                                                                                use_display_name=True)
                    category_index = label_map_util.create_category_index(categories)

                    # Helper code
                    def load_image_into_numpy_array(image):
                        (im_width, im_height) = image.size
                        return np.array(image.getdata()).reshape((im_height, im_width,
                                                                  3)).astype(np.uint8)

                    if os.path.exists("traffic_measurement.csv"):
                        os.remove("traffic_measurement.csv")

                    # Detection
                    def object_detection_function():
                        total_passed_vehicle = 0
                        speed = 'waiting...'
                        direction = 'waiting...'
                        size = 'waiting...'
                        color = 'waiting...'
                        with detection_graph.as_default():
                            with tf.Session(graph=detection_graph) as sess:

                                # Definite input and output Tensors for detection_graph
                                image_tensor = detection_graph.get_tensor_by_name('image_tensor:0')

                                # Each box represents a part of the image where a particular object was detected.
                                detection_boxes = detection_graph.get_tensor_by_name('detection_boxes:0')

                                # Each score represent how level of confidence for each of the objects.
                                # Score is shown on the result image, together with the class label.
                                detection_scores = detection_graph.get_tensor_by_name('detection_scores:0')
                                detection_classes = detection_graph.get_tensor_by_name('detection_classes:0')
                                num_detections = detection_graph.get_tensor_by_name('num_detections:0')

                                # for all the frames that are extracted from input video
                                while cap.isOpened():
                                    (ret, frame) = cap.read()

                                    if not ret:
                                        print('end of the video file...')
                                        break

                                    input_frame = frame

                                    # Expand dimensions since the model expects images to have shape: [1, None, None, 3]
                                    image_np_expanded = np.expand_dims(input_frame, axis=0)

                                    # Actual detection.
                                    (boxes, scores, classes, num) = \
                                        sess.run([detection_boxes, detection_scores,
                                                  detection_classes, num_detections],
                                                 feed_dict={image_tensor: image_np_expanded})

                                    # Visualization of the results of a detection.
                                    (counter, csv_line) = \
                                        vis_util.visualize_boxes_and_labels_on_image_array(
                                            cap.get(1),
                                            input_frame,
                                            np.squeeze(boxes),
                                            np.squeeze(classes).astype(np.int32),
                                            np.squeeze(scores),
                                            category_index,
                                            use_normalized_coordinates=True,
                                            line_thickness=4,
                                        )

                                    total_passed_vehicle = total_passed_vehicle + counter

                                    # insert information text to video frame
                                    font = cv2.FONT_HERSHEY_SIMPLEX
                                    cv2.putText(
                                        input_frame,
                                        'Detected Vehicles: ' + str(total_passed_vehicle),
                                        (10, 35),
                                        font,
                                        0.8,
                                        (0, 0xFF, 0xFF),
                                        2,
                                        cv2.FONT_HERSHEY_SIMPLEX,
                                    )

                                    # when the vehicle passed over line and counted, make the color of ROI line green
                                    if counter == 1:
                                        cv2.line(input_frame, (0, 200), (640, 200), (0, 0xFF, 0), 5)
                                    else:
                                        cv2.line(input_frame, (0, 200), (640, 200), (0, 0, 0xFF), 5)

                                    # insert information text to video frame
                                    cv2.rectangle(input_frame, (10, 275), (230, 337), (180, 132, 109), -1)
                                    cv2.putText(
                                        input_frame,
                                        'ROI Line',
                                        (545, 190),
                                        font,
                                        0.6,
                                        (0, 0, 0xFF),
                                        2,
                                        cv2.LINE_AA,
                                    )
                                    cv2.putText(
                                        input_frame,
                                        'LAST PASSED VEHICLE INFO',
                                        (11, 290),
                                        font,
                                        0.5,
                                        (0xFF, 0xFF, 0xFF),
                                        1,
                                        cv2.FONT_HERSHEY_SIMPLEX,
                                    )
                                    cv2.putText(
                                        input_frame,
                                        '-Movement Direction: ' + direction,
                                        (14, 302),
                                        font,
                                        0.4,
                                        (0xFF, 0xFF, 0xFF),
                                        1,
                                        cv2.FONT_HERSHEY_COMPLEX_SMALL,
                                    )
                                    cv2.putText(
                                        input_frame,
                                        '-Speed(km/h): ' + speed,
                                        (14, 312),
                                        font,
                                        0.4,
                                        (0xFF, 0xFF, 0xFF),
                                        1,
                                        cv2.FONT_HERSHEY_COMPLEX_SMALL,
                                    )
                                    cv2.putText(
                                        input_frame,
                                        '-Color: ' + color,
                                        (14, 322),
                                        font,
                                        0.4,
                                        (0xFF, 0xFF, 0xFF),
                                        1,
                                        cv2.FONT_HERSHEY_COMPLEX_SMALL,
                                    )
                                    cv2.putText(
                                        input_frame,
                                        '-Vehicle Size/Type: ' + size,
                                        (14, 332),
                                        font,
                                        0.4,
                                        (0xFF, 0xFF, 0xFF),
                                        1,
                                        cv2.FONT_HERSHEY_COMPLEX_SMALL,
                                    )

                                    # cv2.imshow('vehicle detection', input_frame)

                                    # frameST.image(input_frame, channels="BGR")




                                    if csv_line != 'not_available':
                                        with open('traffic_measurement.csv', 'a') as f:
                                            writer = csv.writer(f)
                                            (size, color, direction, speed) = \
                                                csv_line.split(',')
                                            writer.writerows([csv_line.split(',')])
                                cap.release()
                                cv2.destroyAllWindows()

                    object_detection_function()
                    st.balloons()
                    with open("traffic_measurement.csv") as input:
                        st.title("This is the detected Vehicle list")
                        st.text(input.read())

    else:
        pass

if __name__ == '__main__':
    fun()
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='Ravi-Nayak' date='2020-09-17T12:50:54Z'>
		Please provide the exact error message you are receiving, with line numbers.
		</comment>
		<comment id='2' author='Ravi-Nayak' date='2020-09-17T13:48:29Z'>
		
Please provide the exact error message you are receiving, with line numbers.
this is the error im getting for all application when im running  in live server ...

&lt;denchmark-code&gt;OSError: [Errno 5] Input/output error
Traceback:
File "/home/prasad/.local/lib/python3.6/site-packages/streamlit/ScriptRunner.py", line 322, in _run_script
    exec(code, module.__dict__)
File "/home/prasad/vehicle_detection/vehicle_detection.py", line 307, in &lt;module&gt;
    fun()
File "/home/prasad/vehicle_detection/vehicle_detection.py", line 59, in fun
    gun()
File "/home/prasad/vehicle_detection/app.py", line 258, in gun
    object_detection_function()
File "/home/prasad/vehicle_detection/app.py", line 132, in object_detection_function
    print('end of the video file...')
&lt;/denchmark-code&gt;

		</comment>
		<comment id='3' author='Ravi-Nayak' date='2020-09-19T04:07:17Z'>
		
Please provide the exact error message you are receiving, with line numbers.

can any body tell me why im getting same error while running in live server ?
		</comment>
		<comment id='4' author='Ravi-Nayak' date='2020-09-28T05:15:11Z'>
		i corrected the error thank you
		</comment>
		<comment id='5' author='Ravi-Nayak' date='2020-09-28T05:15:51Z'>
		
Please provide the exact error message you are receiving, with line numbers.

i traced the error and corrected randy thank you
		</comment>
	</comments>
</bug>