<bug id='306' author='jjwhitney' open_date='2019-10-07T21:32:08Z' closed_time='2020-02-14T00:09:48Z'>
	<summary>Can't cache functions using DEAP</summary>
	<description>
&lt;denchmark-h:h1&gt;Summary&lt;/denchmark-h&gt;

The DEAP library (&lt;denchmark-link:https://github.com/deap/deap&gt;https://github.com/deap/deap&lt;/denchmark-link&gt;
) uses a lot of weird objects that aren't able to be hashed by Streamlit. This makes it impossible to cache functions that contain such objects.
&lt;denchmark-h:h1&gt;Steps to reproduce&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;import streamlit as st
from deap import creator, base

@st.cache
def some_expensive_deap():
    creator.create("FitnessMin", base.Fitness, weights=(-1.0,))
    testVar = creator.FitnessMin # This assignment causes Streamlit to fail

resultVar = some_expensive_deap()

st.write('Hello World!')

&lt;/denchmark-code&gt;

&lt;denchmark-h:h2&gt;Expected behavior:&lt;/denchmark-h&gt;

I would expect Streamlit to either support these objects or give programmers the ability to manually control the cache. Using "ignore_hash=True" with st.cache doesn't help with this fragment of code.
&lt;denchmark-h:h2&gt;Actual behavior:&lt;/denchmark-h&gt;


Streamlit failed to hash an object of type &lt;class 'function'&gt;.,

and

TypeError: object supporting the buffer API required

&lt;denchmark-h:h1&gt;Debug info&lt;/denchmark-h&gt;


Streamlit version: 0.47.4
Python version: 3.7.3
OS version: Ubuntu 18.04
Browser version: Firefox 69.0.1 (64-bit)

&lt;denchmark-h:h1&gt;Additional information&lt;/denchmark-h&gt;

I'd also like to note that if you run Streamlit without the offending line, and then add it back in, Streamlit will rerun the code without giving any error.
	</description>
	<comments>
		<comment id='1' author='jjwhitney' date='2019-10-11T18:04:15Z'>
		Thanks for the bug report. You're totally right that we should give programmers more control over hashing.
We're discussing some possible solutions internally and should have a concrete API proposal some time next week.
		</comment>
		<comment id='2' author='jjwhitney' date='2020-02-14T00:09:48Z'>
		This problem is now solved with use of hash_funcs with the new st.cache changes in the latest release.
		</comment>
	</comments>
</bug>