<bug id='638' author='kellyamanda' open_date='2019-11-06T23:36:56Z' closed_time='2019-12-04T20:56:16Z'>
	<summary>Clear matplotlib figure</summary>
	<description>
When I do this code the second plot will show the labels of the first one:
&lt;denchmark-code&gt;    def pie_chart_users():
        a = plt.pie(
            # using data total)arrests
            app_data_graph['app_count']['count'],
            # with the labels being officer names
            labels=app_data_graph['user_type_apps'],
            # with the percent listed as a fraction
            autopct='%1.1f%%',
            )

        # View the plot drop above
        # b = plt.axis('equal')

        # View the plot
        c = plt.tight_layout()
        return a, c

    '### Breakdown of all app creators (total creators)'
    pie_1 = pie_chart_users()
    st.pyplot()

    # Graph breaking down number of apps created by each user group
    '### % of total apps created by creator group'
    def pie_chart_totals():
        a = plt.pie(
            # using data total)arrests
            app_data_graph['app_count']['sum'],
            # with the labels being officer names
            labels=app_data_graph['user_type_apps'],
            # with the percent listed as a fraction
            autopct='%1.1f%%',
            )

        # View the plot drop above
        # b = plt.axis('equal')

        # View the plot
        c = plt.tight_layout()
        return a, c

    pie_2 = pie_chart_totals()
    st.pyplot()
&lt;/denchmark-code&gt;

This is fixed by adding in  plt.figure() between the two
&lt;denchmark-code&gt;    def pie_chart_users():
        a = plt.pie(
            # using data total)arrests
            app_data_graph['app_count']['count'],
            # with the labels being officer names
            labels=app_data_graph['user_type_apps'],
            # with the percent listed as a fraction
            autopct='%1.1f%%',
            )

        # View the plot drop above
        # b = plt.axis('equal')

        # View the plot
        c = plt.tight_layout()
        return a, c

    '### Breakdown of all app creators (total creators)'
    pie_1 = pie_chart_users()
    st.pyplot()
    plt.figure()

    # Graph breaking down number of apps created by each user group
    '### % of total apps created by creator group'
    def pie_chart_totals():
        a = plt.pie(
            # using data total)arrests
            app_data_graph['app_count']['sum'],
            # with the labels being officer names
            labels=app_data_graph['user_type_apps'],
            # with the percent listed as a fraction
            autopct='%1.1f%%',
            )

        # View the plot drop above
        # b = plt.axis('equal')

        # View the plot
        c = plt.tight_layout()
        return a, c

    pie_2 = pie_chart_totals()
    st.pyplot()
&lt;/denchmark-code&gt;

Looks like st.pyplot needs to clear the Matplotlib figure after drawing it to the app
	</description>
	<comments>
		<comment id='1' author='kellyamanda' date='2019-12-02T18:43:07Z'>
		I'm not actually sure what the best course of action is here. We could call plt.clf from st.pyplot to clear the current figure - but is that users would expect?
(In other words, is this simply user error, and the user should be manually calling plt.clf when they want to clear the figure?)
		</comment>
	</comments>
</bug>