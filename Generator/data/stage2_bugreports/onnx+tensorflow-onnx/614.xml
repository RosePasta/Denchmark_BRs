<bug id='614' author='JiayingGaoo' open_date='2019-06-20T05:56:08Z' closed_time='2019-06-25T02:13:53Z'>
	<summary>A problem with the function: match_ops</summary>
	<description>
I wrote a Gemm rewriter. According to the definition of Gemm, totally four candidate patterns are considered. Each of pattern is defined according to calculation rule, listed as below:
pattern 0: alpha*(AB) + beta(C);
pattern 1: (AB) + beta(C);
pattern 2: (AB) + beta(C);
pattern 3: (A*B) + C
Where, A, B and C are the three inputs, alpha and beta are the two attributes.
There is a issue in case of pattern 0. When allow_reorder=True, the graph in the figure 1 below cannot be matched.
&lt;denchmark-link:https://user-images.githubusercontent.com/32807966/59824075-b5f01900-9362-11e9-890f-d33d94d471c9.jpg&gt;&lt;/denchmark-link&gt;

Figure 1
If I change the sequence of the two Mul ops, then the graph will be successfully matched for rewriter, refers to figure 2:
&lt;denchmark-link:https://user-images.githubusercontent.com/32807966/59823840-0ca92300-9362-11e9-97a8-73b26cf252cd.jpg&gt;&lt;/denchmark-link&gt;

Figure 2
Therefore, I suspect that may be something wrong with the function match_ops when allow_reorder is set as true?
	</description>
	<comments>
		<comment id='1' author='JiayingGaoo' date='2019-06-20T07:18:09Z'>
		In my gemm_rewriter.py file, the 4 patterns are defined as:
&lt;denchmark-code&gt;# pattern0: alpha*A*B + beta*C
pattern0 = \
    OpTypePattern('Add', name='add', inputs=[
        OpTypePattern('Mul', name='mul1', inputs=[
            OpTypePattern('Const', name='alpha'),
            OpTypePattern('MatMul', name='matmul', inputs=[
                OpTypePattern('*', name='A'),
                OpTypePattern('*', name='B'),
            ]),
        ]),
        OpTypePattern('Mul', name='mul2', inputs=[
            OpTypePattern('Const', name='beta'),
            OpTypePattern('*', name='C'),
        ])
    ])

# pattern1: alpha*A*B + C
pattern1 = \
    OpTypePattern('Add', name='add', inputs=[
        OpTypePattern('Mul', name='mul1', inputs=[
            OpTypePattern('MatMul', name='matmul', inputs=[
                OpTypePattern('*', name='A'),
                OpTypePattern('*', name='B'),
            ]),
            OpTypePattern('Const', name='alpha')
        ]),
        OpTypePattern('*', name='C'),
    ])

# pattern2: A*B + beta*C
pattern2 = \
    OpTypePattern('Add', name='add', inputs=[
        OpTypePattern('MatMul', name='matmul', inputs=[
            OpTypePattern('*', name='A'),
            OpTypePattern('*', name='B'),
        ]),
        OpTypePattern('Mul', name='mul2', inputs=[
            OpTypePattern('*', name='C'),
            OpTypePattern('Const', name='beta')
        ]),
    ])

# pattern3: A*B + C
pattern3 = \
    OpTypePattern('Add', name='add', inputs=[
        OpTypePattern('MatMul', name='matmul', inputs=[
            OpTypePattern('*', name='A'),
            OpTypePattern('*', name='B'),
        ]),
        OpTypePattern('*', name='C'),
    ])
&lt;/denchmark-code&gt;

		</comment>
		<comment id='2' author='JiayingGaoo' date='2019-06-21T07:06:12Z'>
		pr &lt;denchmark-link:https://github.com/onnx/tensorflow-onnx/pull/615&gt;#615&lt;/denchmark-link&gt;
 should be able to fix this bug.
		</comment>
	</comments>
</bug>