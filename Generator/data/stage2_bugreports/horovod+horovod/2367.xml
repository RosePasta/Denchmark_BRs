<bug id='2367' author='hhaoyan' open_date='2020-10-13T03:48:21Z' closed_time='2020-11-02T00:54:34Z'>
	<summary>Horovod throws UnicodeDecodeError when using tqdm</summary>
	<description>
Environment:

Framework: PyTorch
Framework version: 1.2.0
Horovod version: 0.19.5
MPI version: None
CUDA version: 10.0
NCCL version: 2.7.8.1
Python version: 3.6.12
Spark / PySpark version: None
OS and version: Linux 4.14.105-1-tlinux3-0010
GCC version: 5.2.0
CMake version: 2.8.12.2

What happened?
When using horovod together with tqdm, horovod throws UnicodeDecodeError when tqdm is progressing the bar display:
&lt;denchmark-code&gt;Tue Oct 13 10:54:25 2020[0]&lt;stderr&gt;:[10/13/2020 10:54:25 - INFO - __main__ -   start running validation...
Tue Oct 13 10:54:25 2020[0]&lt;stderr&gt;:  0%|          | 0/1327 [00:00&lt;?, ?it/s]
Tue Oct 13 10:55:56 2020[0]&lt;stderr&gt;:
Exception in thread Thread-17:derr&gt;: 65%|██████▌   | 866/1327 [01:17&lt;00:47,  9.80it/s]
Traceback (most recent call last):
  File "/data/anaconda3/envs/vcr/lib/python3.6/threading.py", line 916, in _bootstrap_inner
    self.run()
  File "/data/anaconda3/envs/vcr/lib/python3.6/threading.py", line 864, in run
    self._target(*self._args, **self._kwargs)
  File "/data/anaconda3/envs/vcr/lib/python3.6/site-packages/horovod/runner/common/util/safe_shell_exec.py", line 104, in forward_stream
    text = text.decode('utf-8')
UnicodeDecodeError: 'utf-8' codec can't decode byte 0xe2 in position 999: unexpected end of data

Tue Oct 13 10:58:56 2020[3]&lt;stderr&gt;:[2020-10-13 10:58:56.365049: E /dockerdata/app/tmp/pip-install-998q9kn4/horovod/horovod/common/operations.cc:525] Horovod background loop uncaught exception: [/dockerdata/app/tmp/pip-install-998q9kn4/horovod/third_party/compatible_gloo/gloo/transport/tcp/unbound_buffer.cc:84] Timed out waiting 30000ms for recv operation to complete
Tue Oct 13 10:58:56 2020[2]&lt;stderr&gt;:[2020-10-13 10:58:56.366492: E /dockerdata/app/tmp/pip-install-998q9kn4/horovod/horovod/common/operations.cc:525] Horovod background loop uncaught exception: [/dockerdata/app/tmp/pip-install-998q9kn4/horovod/third_party/compatible_gloo/gloo/transport/tcp/unbound_buffer.cc:84] Timed out waiting 30000ms for recv operation to complete
Tue Oct 13 10:58:56 2020[1]&lt;stderr&gt;:[2020-10-13 10:58:56.366674: E /dockerdata/app/tmp/pip-install-998q9kn4/horovod/horovod/common/operations.cc:525] Horovod background loop uncaught exception: [/dockerdata/app/tmp/pip-install-998q9kn4/horovod/third_party/compatible_gloo/gloo/transport/tcp/unbound_buffer.cc:136] Timed out waiting 30000ms for send operation to complete
Tue Oct 13 10:58:56 2020[3]&lt;stderr&gt;:Traceback (most recent call last):
Tue Oct 13 10:58:56 2020[1]&lt;stderr&gt;:Traceback (most recent call last):
Tue Oct 13 10:58:56 2020[3]&lt;stderr&gt;:  File "/data/anaconda3/envs/vcr/lib/python3.6/site-packages/horovod/torch/mpi_ops.py", line 622, in synchronize
Tue Oct 13 10:58:56 2020[2]&lt;stderr&gt;:Traceback (most recent call last):
Tue Oct 13 10:58:56 2020[3]&lt;stderr&gt;:    mpi_lib.horovod_torch_wait_and_clear(handle)
Tue Oct 13 10:58:56 2020[2]&lt;stderr&gt;:  File "/data/anaconda3/envs/vcr/lib/python3.6/site-packages/horovod/torch/mpi_ops.py", line 622, in synchronize
Tue Oct 13 10:58:56 2020[3]&lt;stderr&gt;:RuntimeError: Horovod has been shut down. This was caused by an exception on one of the ranks or an attempt to allreduce, allgather or broadcast a tensor after one of the ranks finished execution. If the shutdown was caused by an exception, you should see the exception in the log before the first shutdown message.
Tue Oct 13 10:58:56 2020[1]&lt;stderr&gt;:  File "/data/anaconda3/envs/vcr/lib/python3.6/site-packages/horovod/torch/mpi_ops.py", line 622, in synchronize
Tue Oct 13 10:58:56 2020[3]&lt;stderr&gt;:
Tue Oct 13 10:58:56 2020[1]&lt;stderr&gt;:    mpi_lib.horovod_torch_wait_and_clear(handle)
Tue Oct 13 10:58:56 2020[2]&lt;stderr&gt;:    mpi_lib.horovod_torch_wait_and_clear(handle)
Tue Oct 13 10:58:57 2020[3]&lt;stderr&gt;:During handling of the above exception, another exception occurred:
Tue Oct 13 10:58:57 2020[2]&lt;stderr&gt;:RuntimeError: Horovod has been shut down. This was caused by an exception on one of the ranks or an attempt to allreduce, allgather or broadcast a tensor after one of the ranks finished execution. If the shutdown was caused by an exception, you should see the exception in the log before the first shutdown message.
Tue Oct 13 10:58:57 2020[1]&lt;stderr&gt;:RuntimeError: Horovod has been shut down. This was caused by an exception on one of the ranks or an attempt to allreduce, allgather or broadcast a tensor after one of the ranks finished execution. If the shutdown was caused by an exception, you should see the exception in the log before the first shutdown message.
Tue Oct 13 10:58:57 2020[3]&lt;stderr&gt;:
Tue Oct 13 10:58:57 2020[1]&lt;stderr&gt;:
Tue Oct 13 10:58:57 2020[2]&lt;stderr&gt;:
Tue Oct 13 10:58:57 2020[3]&lt;stderr&gt;:Traceback (most recent call last):
Tue Oct 13 10:58:57 2020[2]&lt;stderr&gt;:During handling of the above exception, another exception occurred:
Tue Oct 13 10:58:57 2020[1]&lt;stderr&gt;:During handling of the above exception, another exception occurred:
Tue Oct 13 10:58:57 2020[3]&lt;stderr&gt;:  File "train_vcr.py", line 332, in &lt;module&gt;
Tue Oct 13 10:58:57 2020[1]&lt;stderr&gt;:
Tue Oct 13 10:58:57 2020[3]&lt;stderr&gt;:    main(parse_cmd_args(TrainingOpts))
Tue Oct 13 10:58:57 2020[1]&lt;stderr&gt;:Traceback (most recent call last):
Tue Oct 13 10:58:57 2020[3]&lt;stderr&gt;:  File "train_vcr.py", line 260, in main
Tue Oct 13 10:58:57 2020[1]&lt;stderr&gt;:  File "train_vcr.py", line 332, in &lt;module&gt;
Tue Oct 13 10:58:57 2020[3]&lt;stderr&gt;:    val_log = validate(model, val_dataloader)
Tue Oct 13 10:58:57 2020[1]&lt;stderr&gt;:    main(parse_cmd_args(TrainingOpts))
Tue Oct 13 10:58:57 2020[3]&lt;stderr&gt;:  File "/data/anaconda3/envs/vcr/lib/python3.6/site-packages/torch/autograd/grad_mode.py", line 49, in decorate_no_grad
Tue Oct 13 10:58:57 2020[1]&lt;stderr&gt;:  File "train_vcr.py", line 260, in main
Tue Oct 13 10:58:57 2020[3]&lt;stderr&gt;:    return func(*args, **kwargs)
Tue Oct 13 10:58:57 2020[1]&lt;stderr&gt;:    val_log = validate(model, val_dataloader)
Tue Oct 13 10:58:58 2020[3]&lt;stderr&gt;:  File "train_vcr.py", line 310, in validate
Tue Oct 13 10:58:58 2020[1]&lt;stderr&gt;:  File "/data/anaconda3/envs/vcr/lib/python3.6/site-packages/torch/autograd/grad_mode.py", line 49, in decorate_no_grad
Tue Oct 13 10:58:57 2020[2]&lt;stderr&gt;:
Tue Oct 13 10:58:58 2020[3]&lt;stderr&gt;:    qa_loss = sum(all_gather_list(qa_loss))
Tue Oct 13 10:58:58 2020[1]&lt;stderr&gt;:    return func(*args, **kwargs)
Tue Oct 13 10:58:58 2020[2]&lt;stderr&gt;:Traceback (most recent call last):
Tue Oct 13 10:58:58 2020[1]&lt;stderr&gt;:  File "train_vcr.py", line 310, in validate
Tue Oct 13 10:58:58 2020[2]&lt;stderr&gt;:  File "train_vcr.py", line 332, in &lt;module&gt;
Tue Oct 13 10:58:58 2020[3]&lt;stderr&gt;:  File "/data/cdp_algo_ceph_ssd/users/haoyanhuo/vcr/utils/distributed.py", line 233, in all_gather_list
Tue Oct 13 10:58:58 2020[2]&lt;stderr&gt;:    main(parse_cmd_args(TrainingOpts))
Tue Oct 13 10:58:58 2020[3]&lt;stderr&gt;:    max_size = hvd.allgather(torch.tensor([enc_size]).cuda()).max().item()
Tue Oct 13 10:58:58 2020[1]&lt;stderr&gt;:    qa_loss = sum(all_gather_list(qa_loss))
Tue Oct 13 10:58:58 2020[2]&lt;stderr&gt;:  File "train_vcr.py", line 260, in main
Tue Oct 13 10:58:58 2020[3]&lt;stderr&gt;:  File "/data/anaconda3/envs/vcr/lib/python3.6/site-packages/horovod/torch/mpi_ops.py", line 365, in allgather
Tue Oct 13 10:58:58 2020[2]&lt;stderr&gt;:    val_log = validate(model, val_dataloader)
Tue Oct 13 10:58:58 2020[3]&lt;stderr&gt;:    return HorovodAllgather.apply(tensor, name)
Tue Oct 13 10:58:58 2020[1]&lt;stderr&gt;:  File "/data/cdp_algo_ceph_ssd/users/haoyanhuo/vcr/utils/distributed.py", line 233, in all_gather_list
Tue Oct 13 10:58:58 2020[2]&lt;stderr&gt;:  File "/data/anaconda3/envs/vcr/lib/python3.6/site-packages/torch/autograd/grad_mode.py", line 49, in decorate_no_grad
Tue Oct 13 10:58:58 2020[1]&lt;stderr&gt;:    max_size = hvd.allgather(torch.tensor([enc_size]).cuda()).max().item()
Tue Oct 13 10:58:58 2020[3]&lt;stderr&gt;:  File "/data/anaconda3/envs/vcr/lib/python3.6/site-packages/horovod/torch/mpi_ops.py", line 328, in forward
Tue Oct 13 10:58:59 2020[2]&lt;stderr&gt;:    return func(*args, **kwargs)
Tue Oct 13 10:58:59 2020[3]&lt;stderr&gt;:    return synchronize(handle)
Tue Oct 13 10:58:59 2020[2]&lt;stderr&gt;:  File "train_vcr.py", line 310, in validate
Tue Oct 13 10:58:59 2020[3]&lt;stderr&gt;:  File "/data/anaconda3/envs/vcr/lib/python3.6/site-packages/horovod/torch/mpi_ops.py", line 626, in synchronize
Tue Oct 13 10:58:59 2020[2]&lt;stderr&gt;:    qa_loss = sum(all_gather_list(qa_loss))
Tue Oct 13 10:58:59 2020[3]&lt;stderr&gt;:    raise HorovodInternalError(e)
Tue Oct 13 10:58:59 2020[2]&lt;stderr&gt;:  File "/data/cdp_algo_ceph_ssd/users/haoyanhuo/vcr/utils/distributed.py", line 233, in all_gather_list
Tue Oct 13 10:58:59 2020[3]&lt;stderr&gt;:horovod.common.exceptions.HorovodInternalError: Horovod has been shut down. This was causedby an exception on one of the ranks or an attempt to allreduce, allgather or broadcast a tensor after one of the ranks finishedexecution. If the shutdown was caused by an exception, you should see the exception in the log before the first shutdown message.
Tue Oct 13 10:58:59 2020[1]&lt;stderr&gt;:  File "/data/anaconda3/envs/vcr/lib/python3.6/site-packages/horovod/torch/mpi_ops.py", line 365, in allgather
Tue Oct 13 10:58:59 2020[2]&lt;stderr&gt;:    max_size = hvd.allgather(torch.tensor([enc_size]).cuda()).max().item()
Tue Oct 13 10:58:59 2020[2]&lt;stderr&gt;:  File "/data/anaconda3/envs/vcr/lib/python3.6/site-packages/horovod/torch/mpi_ops.py", line 365, in allgather
Tue Oct 13 10:58:59 2020[1]&lt;stderr&gt;:    return HorovodAllgather.apply(tensor, name)
Tue Oct 13 10:58:59 2020[1]&lt;stderr&gt;:  File "/data/anaconda3/envs/vcr/lib/python3.6/site-packages/horovod/torch/mpi_ops.py", line 328, in forward
Tue Oct 13 10:58:59 2020[2]&lt;stderr&gt;:    return HorovodAllgather.apply(tensor, name)
Tue Oct 13 10:58:59 2020[2]&lt;stderr&gt;:  File "/data/anaconda3/envs/vcr/lib/python3.6/site-packages/horovod/torch/mpi_ops.py", line 328, in forward
Tue Oct 13 10:58:59 2020[1]&lt;stderr&gt;:    return synchronize(handle)
Tue Oct 13 10:58:59 2020[1]&lt;stderr&gt;:  File "/data/anaconda3/envs/vcr/lib/python3.6/site-packages/horovod/torch/mpi_ops.py", line 626, in synchronize
Tue Oct 13 10:58:59 2020[2]&lt;stderr&gt;:    return synchronize(handle)
Tue Oct 13 10:58:59 2020[1]&lt;stderr&gt;:    raise HorovodInternalError(e)
Tue Oct 13 10:59:00 2020[2]&lt;stderr&gt;:  File "/data/anaconda3/envs/vcr/lib/python3.6/site-packages/horovod/torch/mpi_ops.py", line 626, in synchronize
Tue Oct 13 10:59:00 2020[1]&lt;stderr&gt;:horovod.common.exceptions.HorovodInternalError: Horovod has been shut down. This was causedby an exception on one of the ranks or an attempt to allreduce, allgather or broadcast a tensor after one of the ranks finishedexecution. If the shutdown was caused by an exception, you should see the exception in the log before the first shutdown message.
Tue Oct 13 10:59:00 2020[2]&lt;stderr&gt;:    raise HorovodInternalError(e)
Tue Oct 13 10:59:00 2020[2]&lt;stderr&gt;:horovod.common.exceptions.HorovodInternalError: Horovod has been shut down. This was causedby an exception on one of the ranks or an attempt to allreduce, allgather or broadcast a tensor after one of the ranks finishedexecution. If the shutdown was caused by an exception, you should see the exception in the log before the first shutdown message.
&lt;/denchmark-code&gt;

Reasons for this issue
This is due to a truncated (since horovod only captures 1000 bytes) UTF8 code. For example, the above error was due to a truncated black box character 0xe2 0x96 0x88 used by tqdm to indicate progress. The following is an example of the bytes produced by tqdm. Pay attention to bytes 0x00059960-0x00059970:
&lt;denchmark-code&gt;...
00059930  30 5d 3c 73 74 64 65 72  72 3e 3a 0d 54 75 65 20  |0]&lt;stderr&gt;:.Tue |
00059940  4f 63 74 20 31 33 20 31  30 3a 35 35 3a 35 35 20  |Oct 13 10:55:55 |
00059950  32 30 32 30 5b 30 5d 3c  73 74 64 65 72 72 3e 3a  |2020[0]&lt;stderr&gt;:|
00059960  20 36 35 25 7c e2 96 88  e2 96 88 e2 96 88 e2 96  | 65%|...........|
00059970  88 e2 96 88 e2 96 88 e2  96 8d 20 20 20 7c 20 38  |..........   | 8|
00059980  35 38 2f 31 33 32 37 20  5b 30 31 3a 31 37 3c 30  |58/1327 [01:17&lt;0|
00059990  30 3a 34 34 2c 20 31 30  2e 34 33 69 74 2f 73 5d  |0:44, 10.43it/s]|
000599a0  1b 5b 41 1b 5b 41 0a 54  75 65 20 4f 63 74 20 31  |.[A.[A.Tue Oct 1|
000599b0  33 20 31 30 3a 35 35 3a  35 35 20 32 30 32 30 5b  |3 10:55:55 2020[|
000599c0  30 5d 3c 73 74 64 65 72  72 3e 3a 0a 54 75 65 20  |0]&lt;stderr&gt;:.Tue |
...
&lt;/denchmark-code&gt;

I think horovod needs a better way of handling program outputs, either pipe them in binary or delay the decoding of partially captured UTF8 codes.
	</description>
	<comments>
		<comment id='1' author='hhaoyan' date='2020-10-13T07:02:40Z'>
		how to solve this bug?
		</comment>
		<comment id='2' author='hhaoyan' date='2020-10-13T07:15:47Z'>
		
how to solve this bug?

A quick fix: tqdm(ascii=True) to eliminate UTF8 outputs.
The better way: Replace all strs in forward_stream with bytes.
		</comment>
		<comment id='3' author='hhaoyan' date='2020-10-13T07:18:41Z'>
		

how to solve this bug?

A quick fix: tqdm(ascii=True) to eliminate UTF8 outputs.
The better way: Replace all strs in forward_stream with bytes.

thanks!
		</comment>
		<comment id='4' author='hhaoyan' date='2020-10-14T13:24:03Z'>
		Thanks for raising this issue &lt;denchmark-link:https://github.com/hhaoyan&gt;@hhaoyan&lt;/denchmark-link&gt;
.  Do you have a small repro script I can run to demonstrate the error?
		</comment>
		<comment id='5' author='hhaoyan' date='2020-10-15T02:50:30Z'>
		
Thanks for raising this issue @hhaoyan. Do you have a small repro script I can run to demonstrate the error?

Here is a simple script that reproduces this error:
from horovod import torch as hvd
import time

hvd.init()
while True:
    print(b'\xe2\x96\x88'.decode('utf8')*334)
    time.sleep(1)
From terminal, run:
$ horovodrun -n 2 pythontest.py
Exception in thread Thread-6:
Traceback (most recent call last):
  File "/data/anaconda3/envs/vcr/lib/python3.6/threading.py", line 916, in _bootstrap_inner
    self.run()
  File "/data/anaconda3/envs/vcr/lib/python3.6/threading.py", line 864, in run
    self._target(*self._args, **self._kwargs)
  File "/data/anaconda3/envs/vcr/lib/python3.6/site-packages/horovod/run/common/util/safe_shell_exec.py", line 98, in forward_stream
    text = text.decode('utf-8')
UnicodeDecodeError: 'utf-8' codec can't decode byte 0xe2 in position 999: unexpected end of data
Exception in thread Thread-5:
Traceback (most recent call last):
  File "/data/anaconda3/envs/vcr/lib/python3.6/threading.py", line 916, in _bootstrap_inner
    self.run()
  File "/data/anaconda3/envs/vcr/lib/python3.6/threading.py", line 864, in run
    self._target(*self._args, **self._kwargs)
  File "/data/anaconda3/envs/vcr/lib/python3.6/site-packages/horovod/run/common/util/safe_shell_exec.py", line 98, in forward_stream
    text = text.decode('utf-8')
UnicodeDecodeError: 'utf-8' codec can't decode byte 0xe2 in position 999: unexpected end of data
		</comment>
		<comment id='6' author='hhaoyan' date='2020-10-16T20:50:34Z'>
		
how to solve this bug?

Alternative would be not to truncate on 1000 bytes but 1000 characters. Where is this 1000 truncation happening?
		</comment>
		<comment id='7' author='hhaoyan' date='2020-10-18T03:15:54Z'>
		

how to solve this bug?

Alternative would be not to truncate on 1000 bytes but 1000 characters. Where is this 1000 truncation happening?

&lt;denchmark-link:https://github.com/horovod/horovod/blob/master/horovod/runner/common/util/safe_shell_exec.py#L99&gt;https://github.com/horovod/horovod/blob/master/horovod/runner/common/util/safe_shell_exec.py#L99&lt;/denchmark-link&gt;

If subprocess throws some illegal UTF8 bytes, then I guess there is no way to truncate in characters?
I temporarily fixed it by using bytes IO for all pipes, stdout/stderr and it seems to be working for me.
		</comment>
		<comment id='8' author='hhaoyan' date='2020-10-18T14:26:41Z'>
		I think the simplest fix is to use  with , which makes it ignore incomplete / invalid UTF8 characters: &lt;denchmark-link:https://docs.python.org/3.6/howto/unicode.html#the-string-type&gt;https://docs.python.org/3.6/howto/unicode.html#the-string-type&lt;/denchmark-link&gt;

&lt;denchmark-link:https://github.com/horovod/horovod/blob/master/horovod/runner/common/util/safe_shell_exec.py#L104&gt;https://github.com/horovod/horovod/blob/master/horovod/runner/common/util/safe_shell_exec.py#L104&lt;/denchmark-link&gt;
 would then read:
&lt;denchmark-code&gt;text = text.decode('utf-8', errors='ignore')
&lt;/denchmark-code&gt;

		</comment>
		<comment id='9' author='hhaoyan' date='2020-10-19T19:15:58Z'>
		Good suggestion, &lt;denchmark-link:https://github.com/EnricoMi&gt;@EnricoMi&lt;/denchmark-link&gt;
.  Do you have the bandwidth to put together a PR?
		</comment>
		<comment id='10' author='hhaoyan' date='2020-10-19T21:30:06Z'>
		Sure, give me a day or two, I would also add a unit test for that.
		</comment>
		<comment id='11' author='hhaoyan' date='2020-10-20T12:48:30Z'>
		After looking at the forward_stream method a bit closer, using errors='ignore' is not the right thing to do here. We are not truncating the stream at 1000 bytes, but we are chunking it into 1000 bytes chunks to line buffer it. We would lose the character at the chunk boundary. I will rework the line buffering.
		</comment>
		<comment id='12' author='hhaoyan' date='2020-10-21T20:20:12Z'>
		&lt;denchmark-link:https://github.com/tgaddair&gt;@tgaddair&lt;/denchmark-link&gt;
: is it required for  to work with both, byte streams and text streams? Given we are calling this from  on pipe connections, we can guarantee it is one of them. Would simplify things.
&lt;denchmark-code&gt;        if not isinstance(text, str):
            text = text.decode('utf-8')
&lt;/denchmark-code&gt;

&lt;denchmark-link:https://github.com/horovod/horovod/blob/master/horovod/runner/common/util/safe_shell_exec.py#L103&gt;https://github.com/horovod/horovod/blob/master/horovod/runner/common/util/safe_shell_exec.py#L103&lt;/denchmark-link&gt;

		</comment>
		<comment id='13' author='hhaoyan' date='2020-10-22T13:06:06Z'>
		&lt;denchmark-link:https://github.com/EnricoMi&gt;@EnricoMi&lt;/denchmark-link&gt;
 it may not be necessary to decode the stream data, I do not remember why we needed to do that originally, but we can always decode on the other end of the stream when necessary.
		</comment>
		<comment id='14' author='hhaoyan' date='2020-10-22T19:15:40Z'>
		We have to encode it in forward_stream to be able to prepend timestamp, prefix and index to each line:
&lt;denchmark-code&gt;return '{time}[{rank}]&lt;{prefix}&gt;:{line}'.format(...)
&lt;/denchmark-code&gt;

I think this justifies expecting the stream to be a text stream.
		</comment>
		<comment id='15' author='hhaoyan' date='2020-10-22T19:46:30Z'>
		Waiting for &lt;denchmark-link:https://github.com/horovod/horovod/pull/2388&gt;#2388&lt;/denchmark-link&gt;
 to land which simplifies unit test assertions without timestamps.
		</comment>
		<comment id='16' author='hhaoyan' date='2020-10-23T18:18:29Z'>
		
We have to encode it in forward_stream to be able to prepend timestamp, prefix and index to each line:
return '{time}[{rank}]&lt;{prefix}&gt;:{line}'.format(...)

I think this justifies expecting the stream to be a text stream.

Maybe the prefix strings can be formatted and encoded into UTF8, then we can simply join two byte strings?
		</comment>
		<comment id='17' author='hhaoyan' date='2020-10-25T17:17:03Z'>
		That is a good idea, that would then only require the source stream to be split on new lines, no matter if being a byte or text stream. If a byte stream, prepend each line as described by you, if a text stream, prepend with the prefix as a string. Will try that.
		</comment>
		<comment id='18' author='hhaoyan' date='2020-10-26T15:12:50Z'>
		Well, since we fall back to sys.stdout and sys.stderr when no stdout and stderr are given, respectively, stdout and stderrmust be text streams only. So forward_stream will only be called with text streams and therefore dst_stream is also text stream. This simplifies code.
		</comment>
		<comment id='19' author='hhaoyan' date='2020-10-27T15:13:54Z'>
		PR &lt;denchmark-link:https://github.com/horovod/horovod/pull/2398&gt;#2398&lt;/denchmark-link&gt;
 ready for review.
		</comment>
		<comment id='20' author='hhaoyan' date='2020-10-31T12:03:19Z'>
		The correct and minimal fix is to use an incremental UTF8 decoder rather than decoding that byte chunk on its own:
&lt;denchmark-code&gt;# the incremental encoder allows us to decode chunks of utf8 bytes
# with utf8 characters spread across the boundary chunks
decoder = codecs.getincrementaldecoder('utf8')()
&lt;/denchmark-code&gt;

and
&lt;denchmark-code&gt;# turn the bytes into string decoding them as utf8
# we need to use an incremental decoder as characters can span multiple bytes
# where the last character might not be completely in buf
# see https://github.com/horovod/horovod/issues/2367
text = decoder.decode(buf or b'', final=not buf)
&lt;/denchmark-code&gt;

The incremental decoder has an internal state and keeps the non-decoded bytes at the end of the chunk for decoding the next chunk.
		</comment>
	</comments>
</bug>