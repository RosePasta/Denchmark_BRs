<bug id='1123' author='byronyi' open_date='2019-06-05T04:49:03Z' closed_time='2019-06-20T08:16:01Z'>
	<summary>TF 1.14 crashes with hwloc</summary>
	<description>
Environment:

Framework: TensorFlow
Framework version: 1.14.0-rc0
Horovod version: 0.16.2
MPI version: OpenMPI 2.0.2
CUDA version: 10.0
NCCL version: 2.4.2
Python version: 3.5.3
OS and version: Debian 9.8

Bug report:
Please describe erroneous behavior you're observing and steps to reproduce it.
Use the in-stock &lt;denchmark-link:https://github.com/horovod/horovod/blob/master/examples/tensorflow_mnist_estimator.py&gt;examples/tensorflow_mnist_estimator.py&lt;/denchmark-link&gt;
 and run with the following command:
&lt;denchmark-code&gt;mpirun --allow-run-as-root -n 1 --npernode 1 -bind-to none -hostfile /opt/tiger/hostfile --mca orte_tmpdir_base /opt/tiger/openmpi_tmp -x NCCL_DEBUG=INFO -x HOROVOD_WITH_TENSORFLOW -x JAVA_HOME -x PYPI -x HOROVOD_GPU_ALLREDUCE -x HTTP_PROXY -x LD_LIBRARY_PATH -x HTTPS_PROXY -x TENSORPACK -x PATH -x TENSORPACK_DATASET -x DATA --mca btl '^openib,smcuda' --mca btl_tcp_if_exclude docker0,lo -x NCCL_IB_DISABLE=1 -x NCCL_SOCKET_IFNAME=eth0 gdb --args python tensorflow_mnist_estimator.py
&lt;/denchmark-code&gt;

And it triggers segfault with the following backtrace:
&lt;denchmark-code&gt;#0  0x00007fff2dd36224 in hwloc_bitmap_and ()
   from /usr/local/lib/python3.5/dist-packages/tensorflow/python/../libtensorflow_framework.so.1
#1  0x00007fffd1019099 in opal_hwloc_base_filter_cpus ()
   from /usr/lib/x86_64-linux-gnu/libopen-pal.so.20
#2  0x00007fffcc05190e in ?? ()
   from /usr/lib/x86_64-linux-gnu/openmpi/lib/openmpi/mca_ess_pmi.so
#3  0x00007fffd545caa5 in orte_init ()
   from /usr/lib/x86_64-linux-gnu/libopen-rte.so.20
#4  0x00007fffd5957c4b in ompi_mpi_init ()
   from /usr/lib/x86_64-linux-gnu/libmpi.so.20
#5  0x00007fffd597a179 in PMPI_Init_thread ()
   from /usr/lib/x86_64-linux-gnu/libmpi.so.20
#6  0x00007fff18a57bf3 in horovod::common::(anonymous namespace)::BackgroundThreadLoop (state=..., ctx=...) at horovod/common/operations.cc:886
#7  0x00007fff2c13ee6f in ?? () from /usr/lib/x86_64-linux-gnu/libstdc++.so.6
#8  0x00007ffff7bc3494 in start_thread (arg=0x7fff59225700)
    at pthread_create.c:333
#9  0x00007ffff6db6acf in clone ()
    at ../sysdeps/unix/sysv/linux/x86_64/clone.S:97
&lt;/denchmark-code&gt;

The TF package is built in-house at commit &lt;denchmark-link:https://github.com/tensorflow/tensorflow/commits/01e84b3c7d07307ec3ce5b4eee3ec68c07b6d920&gt;https://github.com/tensorflow/tensorflow/commits/01e84b3c7d07307ec3ce5b4eee3ec68c07b6d920&lt;/denchmark-link&gt;
 with the following command:
&lt;denchmark-code&gt;    bazel build \
        --action_env CUDA_TOOLKIT_PATH="/usr/local/cuda" \
        --action_env GCC_HOST_COMPILER_PATH="/usr/bin/gcc" \
        --action_env=PYTHON_BIN_PATH="/usr/bin/python3" \
        --action_env=PYTHON_LIB_PATH="/usr/local/lib/python3.5/dist-packages" \
        --action_env=TF_CONFIGURE_IOS="0" \
        --action_env TF_CUDA_CLANG="0" \
        --action_env=TF_CUDA_COMPUTE_CAPABILITIES="6.1,7.0,7.5" \
        --action_env TF_NEED_CUDA="1" \
        --action_env TF_NEED_TENSORRT="1" \
        --config=cuda \
        --config=gdr \
        --config=numa \
        --config=verbs \
        --copt=-Wno-sign-compare \
        --copt=-march=ivybridge \
        --define=with_default_optimizations=true \
        --define=with_xla_support=true \
        --host_copt=-march=ivybridge \
        --python_path="/usr/bin/python3" \
        //tensorflow/tools/pip_package:build_pip_package
&lt;/denchmark-code&gt;

I suspect that it is because of the numa support with TF. I will remove it and give it a shot.
	</description>
	<comments>
		<comment id='1' author='byronyi' date='2019-06-05T05:32:35Z'>
		&lt;denchmark-link:https://github.com/byronyi&gt;@byronyi&lt;/denchmark-link&gt;
, thanks for investigating this error.  Please let us know whether the removal of NUMA support helps.
		</comment>
		<comment id='2' author='byronyi' date='2019-06-05T11:15:23Z'>
		Leaving out the NUMA support does not solve this issue. Is OpenMPI 2.0.2 supported? I am wondering if I need to compile OpenMPI or just simply use the one that comes with the distro.
		</comment>
		<comment id='3' author='byronyi' date='2019-06-05T11:45:08Z'>
		hwloc is now bundled with TensorFlow 1.14.0rc0 even without NUMA enabled.
Test the following with official TF:
&lt;denchmark-code&gt;pip install tensorflow==1.14.0rc0
strings /usr/local/lib/python2.7/site-packages/tensorflow/libtensorflow_framework.so.1 | grep hwloc_bitmap_and
&lt;/denchmark-code&gt;

Output:
&lt;denchmark-code&gt;hwloc_bitmap_and
hwloc_bitmap_and
hwloc_bitmap_andnot
hwloc_bitmap_and
hwloc_bitmap_andnot
&lt;/denchmark-code&gt;

Ping &lt;denchmark-link:https://github.com/perfinion&gt;@perfinion&lt;/denchmark-link&gt;
; do you know how should I compile my TF with systemlib ?
		</comment>
		<comment id='4' author='byronyi' date='2019-06-05T11:55:07Z'>
		Ping &lt;denchmark-link:https://github.com/gunan&gt;@gunan&lt;/denchmark-link&gt;
 as well; is this behavior (bundle hwloc symbols without shading their names) intended?
		</comment>
		<comment id='5' author='byronyi' date='2019-06-05T12:36:27Z'>
		Turns out I only need to set --action_env TF_SYSTEM_LIBS="hwloc" for my build command. I will re-ping this thread if it does not work.
		</comment>
		<comment id='6' author='byronyi' date='2019-06-05T15:55:50Z'>
		It works now with TF_SYSTEM_LIB=hwloc when building TF. It's not a default option though, which probably means TF1.14+Horovod will not work out of the box with many MPI versions in the wild.
		</comment>
		<comment id='7' author='byronyi' date='2019-06-05T16:12:53Z'>
		This is tricky, because I have no experience running with mpi myself.
It is true that hwloc now gets built into linux version of TF. Should we have --config=hwloc to enable/disable hwloc?
		</comment>
		<comment id='8' author='byronyi' date='2019-06-05T16:26:11Z'>
		
This is tricky, because I have no experience running with mpi myself.
It is true that hwloc now gets built into linux version of TF. Should we have --config=hwloc to enable/disable hwloc?

It indeed surprises me, as hwloc is introduced mainly for the sake of supporting NUMA, yet disabling NUMA support does not solve this issue.
For your question, I'm leaning to a "yes", and it would be better just to use the NUMA toggle, which is already present right now.
		</comment>
		<comment id='9' author='byronyi' date='2019-06-06T08:15:17Z'>
		For a simple test with 1.14.0-rc0:
&lt;denchmark-code&gt;$ python -c 'import tensorflow as tf; print tf.version.VERSION'
1.14.0-rc0
$ mpirun -n 1 -np 1 python scripts/tf_cnn_benchmarks/tf_cnn_benchmarks.py --variable_update=horovod
WARNING: Logging before flag parsing goes to stderr.
W0606 16:13:27.853485 139784424883648 deprecation_wrapper.py:119] From /home/byronyi/benchmarks/scripts/tf_cnn_benchmarks/models/mobilenet.py:388: The name tf.nn.avg_pool is deprecated. Please use tf.nn.avg_pool2d instead.

W0606 16:13:27.856379 139784424883648 deprecation_wrapper.py:119] From /home/byronyi/benchmarks/scripts/tf_cnn_benchmarks/models/experimental/deepspeech.py:131: The name tf.nn.rnn_cell.RNNCell is deprecated. Please use tf.compat.v1.nn.rnn_cell.RNNCell instead.

W0606 16:13:27.911922 139784424883648 deprecation_wrapper.py:119] From /home/byronyi/.virtualenv/tf/local/lib/python2.7/site-packages/horovod/tensorflow/__init__.py:107: The name tf.train.SessionRunHook is deprecated. Please use tf.estimator.SessionRunHook instead.

W0606 16:13:27.912419 139784424883648 deprecation_wrapper.py:119] From /home/byronyi/.virtualenv/tf/local/lib/python2.7/site-packages/horovod/tensorflow/__init__.py:141: The name tf.train.Optimizer is deprecated. Please use tf.compat.v1.train.Optimizer instead.

[n224-009-018:243915] *** Process received signal ***
[n224-009-018:243915] Signal: Segmentation fault (11)
[n224-009-018:243915] Signal code: Address not mapped (1)
[n224-009-018:243915] Failing at address: (nil)
[n224-009-018:243915] [ 0] /lib/x86_64-linux-gnu/libpthread.so.0(+0x110e0)[0x7f2218bc10e0]
[n224-009-018:243915] [ 1] /home/byronyi/.virtualenv/tf/local/lib/python2.7/site-packages/tensorflow/python/../libtensorflow_framework.so.1(hwloc_bitmap_and+0x17)[0x7f22000fc7a7]
[n224-009-018:243915] [ 2] /usr/lib/x86_64-linux-gnu/libopen-pal.so.20(opal_hwloc_base_filter_cpus+0x379)[0x7f21ddaed099]
[n224-009-018:243915] [ 3] /usr/lib/x86_64-linux-gnu/openmpi/lib/openmpi/mca_ess_pmi.so(+0x290e)[0x7f21dce5790e]
[n224-009-018:243915] [ 4] /usr/lib/x86_64-linux-gnu/libopen-rte.so.20(orte_init+0x235)[0x7f21ddd3faa5]
[n224-009-018:243915] [ 5] /usr/lib/x86_64-linux-gnu/libmpi.so.20(ompi_mpi_init+0x30b)[0x7f21de238c4b]
[n224-009-018:243915] [ 6] /usr/lib/x86_64-linux-gnu/libmpi.so.20(PMPI_Init_thread+0x79)[0x7f21de25b179]
[n224-009-018:243915] [ 7] /home/byronyi/.virtualenv/tf/local/lib/python2.7/site-packages/horovod/tensorflow/mpi_lib.so(+0x3ade3)[0x7f21de739de3]
[n224-009-018:243915] [ 8] /usr/lib/x86_64-linux-gnu/libstdc++.so.6(+0xb9e6f)[0x7f21fe950e6f]
[n224-009-018:243915] [ 9] /lib/x86_64-linux-gnu/libpthread.so.0(+0x74a4)[0x7f2218bb74a4]
[n224-009-018:243915] [10] /lib/x86_64-linux-gnu/libc.so.6(clone+0x3f)[0x7f2217fd4d0f]
[n224-009-018:243915] *** End of error message ***
--------------------------------------------------------------------------
mpirun noticed that process rank 0 with PID 0 on node n224-009-018 exited on signal 11 (Segmentation fault).
--------------------------------------------------------------------------
&lt;/denchmark-code&gt;

		</comment>
		<comment id='10' author='byronyi' date='2019-06-11T08:21:36Z'>
		&lt;denchmark-link:https://github.com/gunan&gt;@gunan&lt;/denchmark-link&gt;
, could TensorFlow use a static build of hwloc to avoid the conflict?  &lt;denchmark-link:https://github.com/open-mpi/hwloc/wiki/StaticBuild&gt;https://github.com/open-mpi/hwloc/wiki/StaticBuild&lt;/denchmark-link&gt;

		</comment>
		<comment id='11' author='byronyi' date='2019-06-11T11:58:04Z'>
		&lt;denchmark-link:https://github.com/alsrgv&gt;@alsrgv&lt;/denchmark-link&gt;
  seem  tf 1.14.rc0 with horovod 0.16.2 crash
		</comment>
		<comment id='12' author='byronyi' date='2019-06-11T15:06:03Z'>
		&lt;denchmark-link:https://github.com/xajxiang&gt;@xajxiang&lt;/denchmark-link&gt;
, are you seeing the error in  as well, or some other error?
		</comment>
		<comment id='13' author='byronyi' date='2019-06-11T15:48:48Z'>
		
@xajxiang, are you seeing the error in hwloc_bitmap_and as well, or some other error?

One way to work around it in my mind is to pin the OpenMPI version that is compatible with hwloc-2.0.2 that embedded in TF.
		</comment>
		<comment id='14' author='byronyi' date='2019-06-11T16:08:43Z'>
		&lt;denchmark-link:https://github.com/alsrgv&gt;@alsrgv&lt;/denchmark-link&gt;
 I think it can. From what I can tell, we simply need to modify the BUILD file to add the additional linker flags?
		</comment>
		<comment id='15' author='byronyi' date='2019-06-14T18:54:29Z'>
		&lt;denchmark-link:https://github.com/gunan&gt;@gunan&lt;/denchmark-link&gt;
, I looked more closely at hwloc issue. It seems that hwloc is actually compiled into libtensorflow_framework.so.1, and its symbols are exported:
&lt;denchmark-code&gt;root@8bf446f3dac6:/tensorflow_src# nm -g /usr/local/lib/python2.7/dist-packages/tensorflow_core/libtensorflow_framework.so.1 | grep hwloc_bitmap_and
000000000131d280 T hwloc_bitmap_and
000000000131d3e0 T hwloc_bitmap_andnot
root@8bf446f3dac6:/tensorflow_src# ldd /usr/local/lib/python2.7/dist-packages/tensorflow_core/libtensorflow_framework.so.1
	linux-vdso.so.1 (0x00007ffe11946000)
	librt.so.1 =&gt; /lib/x86_64-linux-gnu/librt.so.1 (0x00007f389320b000)
	libpthread.so.0 =&gt; /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007f3892fec000)
	libdl.so.2 =&gt; /lib/x86_64-linux-gnu/libdl.so.2 (0x00007f3892de8000)
	libm.so.6 =&gt; /lib/x86_64-linux-gnu/libm.so.6 (0x00007f3892a4a000)
	libstdc++.so.6 =&gt; /usr/lib/x86_64-linux-gnu/libstdc++.so.6 (0x00007f38926c1000)
	libgcc_s.so.1 =&gt; /lib/x86_64-linux-gnu/libgcc_s.so.1 (0x00007f38924a9000)
	libc.so.6 =&gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007f38920b8000)
	/lib64/ld-linux-x86-64.so.2 (0x00007f3894e13000)
root@8bf446f3dac6:/tensorflow_src#
&lt;/denchmark-code&gt;

How do you feel about adding an LD symbol map to unexport all the unnecessary symbols from tensorflow libraries?
		</comment>
		<comment id='16' author='byronyi' date='2019-06-14T18:57:05Z'>
		Ah, I totally missed that. Thanks for your investigation.
I am ok with TF not exporting hwloc symbols. Your proposed solution sounds good to me.
		</comment>
		<comment id='17' author='byronyi' date='2019-06-14T20:22:14Z'>
		Sent a PR: &lt;denchmark-link:https://github.com/tensorflow/tensorflow/pull/29807&gt;tensorflow/tensorflow#29807&lt;/denchmark-link&gt;

A quick test:
&lt;denchmark-code&gt;root@8bf446f3dac6:/tmp# nm -g /usr/local/lib/python2.7/dist-packages/tensorflow_core/libtensorflow_framework.so.1 | grep hwloc
root@8bf446f3dac6:/tmp#
&lt;/denchmark-code&gt;

		</comment>
		<comment id='18' author='byronyi' date='2019-06-20T08:16:00Z'>
		Shall be fine if you either use a recent enough MPI, e.g. OpenMPI 4.0, or use LD_PRELOAD=/path/to/system/libhwloc trick.
Credit to &lt;denchmark-link:https://github.com/horovod/horovod/pull/1159#issuecomment-503924940&gt;#1159 (comment)&lt;/denchmark-link&gt;

		</comment>
		<comment id='19' author='byronyi' date='2019-10-16T05:48:55Z'>
		I just got bit by this and spent a long time debugging it until I found this issue. It would be great if it were added to the troubleshooting doc. (I made &lt;denchmark-link:https://github.com/horovod/horovod/pull/1450&gt;a PR&lt;/denchmark-link&gt;
.)
		</comment>
		<comment id='20' author='byronyi' date='2020-06-08T11:13:43Z'>
		At runtime, you can also use this snippet (before import tensorflow):
&lt;denchmark-code&gt;import ctypes
ctypes.CDLL("libhwloc.so", mode=ctypes.RTLD_GLOBAL)
&lt;/denchmark-code&gt;

		</comment>
	</comments>
</bug>