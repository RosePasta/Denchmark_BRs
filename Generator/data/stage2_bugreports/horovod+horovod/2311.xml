<bug id='2311' author='zhao1157' open_date='2020-09-22T10:41:28Z' closed_time='2020-09-23T09:33:39Z'>
	<summary>Performance is worse after rebuilding C++ code</summary>
	<description>
I built a horovod image using the official Dockerfile.gpu file. In its container, I rebuilt horovod using the latest master branch of horovod source code, and compared the performance of the horovod I built from source (hereafter horovod-rebuilt)and the one in the original horovod docker image (hereafter horovod-docker). The result was quite a surprise.


MNIST with 8 V100 GPUs: I did some tests with the script tensorflow2_keras_mnist.py in the docker container /example directory, and found horovod-docker got a performance of ~20 ms/step while horovod-rebuilt got ~40 ms/step. I thought this might be due to the c++ code, so I exchanged the .so files in horovod-docker and horovod-rebuilt and redid the tests. It showed that the .so file in the original horovod-docker got ~20 ms/step while the one in the original horovod-rebuitl got ~40 ms/step.


Resnet50 with 8/1 V100 GPUs: I also did some tests on Resnet50. All my tests showed that the .so file from the original horovod-docker always performed better than the one I built myself did. For 8 GPUs, the former reached ~2200 images/s and the latter ~1400 images/s. For 1 GPU, the former ~366 images/s and the latter ~ 355 images/s.


So I think there must be something I missed when building horovod from the current master branch. The command I used is just python setup.py install. I am not sure what I missed that is included in the .so file in horovod-docker.
	</description>
	<comments>
		<comment id='1' author='zhao1157' date='2020-09-22T14:44:51Z'>
		Hey &lt;denchmark-link:https://github.com/zhao1157&gt;@zhao1157&lt;/denchmark-link&gt;
, can you run  to verify that NCCL support is properly enabled?
		</comment>
		<comment id='2' author='zhao1157' date='2020-09-22T23:43:49Z'>
		Hi &lt;denchmark-link:https://github.com/tgaddair&gt;@tgaddair&lt;/denchmark-link&gt;
, thanks for your help. For  ,  gives the following output:

Available Frameworks:
[X] TensorFlow
[X] PyTorch
[X] MXNet


Available Controllers:
[X] MPI
[X] Gloo


Available Tensor Operations:
[X] NCCL
[ ] DDL
[ ] CCL
[X] MPI
[X] Gloo

While in horovod-rebuilt, it gives

Available Frameworks:
[X] TensorFlow
[X] PyTorch
[X] MXNet


Available Controllers:
[X] MPI
[X] Gloo


Available Tensor Operations:
[ ] NCCL
[ ] DDL
[ ] CCL
[X] MPI
[X] Gloo

So horovod-rebuilt does not have NCCL activated compared with horovod-docker. Can you show me how to activate it when rebuilding?
		</comment>
		<comment id='3' author='zhao1157' date='2020-09-23T01:28:46Z'>
		&lt;denchmark-link:https://github.com/tgaddair&gt;@tgaddair&lt;/denchmark-link&gt;
 I tried to enable  by manually setting the following line to 


I also commented out the following lines to test only tensorflow



horovod/CMakeLists.txt


        Lines 280 to 283
      in
      32e5fdb






 # PyTorch 



 add_subdirectory(horovod/torch) 



 #MXNet 



 add_subdirectory(horovod/mxnet) 





I saw some compiling output about NCCL

-- Linking against static NCCL library
-- Found NCCL: /usr/include
-- Determining NCCL version from the header file: /usr/include/nccl.h
-- NCCL_MAJOR_VERSION: 2
-- Found NCCL (include: /usr/include, library: /usr/lib/x86_64-linux-gnu/libnccl_static.a)

But it stopped at about 83% of the compiling process

[ 83%] Building CXX object horovod/tensorflow/CMakeFiles/tensorflow.dir/__/common/ops/collective_operations.cc.o
*** a super long compiling command line here ***
...
/my_home_dir/source_code/horovod/horovod/common/ops/gpu_operations.h:65:39: error: ‘gpuStream_t’ was not declared in this scope
std::vector&lt;std::unordered_map&lt;int, gpuStream_t&gt;&gt; streams;

Hope that might help you in some way.
		</comment>
		<comment id='4' author='zhao1157' date='2020-09-23T02:38:17Z'>
		&lt;denchmark-link:https://github.com/tgaddair&gt;@tgaddair&lt;/denchmark-link&gt;
 Update:  and  can pass the  compiling.
		</comment>
		<comment id='5' author='zhao1157' date='2020-09-23T05:47:10Z'>
		&lt;denchmark-link:https://github.com/tgaddair&gt;@tgaddair&lt;/denchmark-link&gt;
 After a little bit of debugging, I fixed the above error by adding a line  behind the definition of , which is not invoked anywhere in .


And horovodrun --check-build returns

Available Frameworks:
[X] TensorFlow
[ ] PyTorch
[ ] MXNet


Available Controllers:
[X] MPI
[X] Gloo


Available Tensor Operations:
[X] NCCL
[ ] DDL
[ ] CCL
[X] MPI
[X] Gloo

However, the performance of the rebuilt horovod still can not match horovod-docker. Maybe I did not manage to get NCCL built into horovod?
		</comment>
		<comment id='6' author='zhao1157' date='2020-09-23T07:42:22Z'>
		&lt;denchmark-link:https://github.com/tgaddair&gt;@tgaddair&lt;/denchmark-link&gt;
 I used  to check if  was built properly. Compared with the kernel output information using both  and , the rebuilt horovod does not show the  kernel . So I guess my trial did not build  correctly even though  showed I did.
I also checked horovod timeline json file, no NCCL present.
		</comment>
		<comment id='7' author='zhao1157' date='2020-09-23T09:33:39Z'>
		&lt;denchmark-link:https://github.com/tgaddair&gt;@tgaddair&lt;/denchmark-link&gt;
 I just found to be able to activate , I need to set an environment variable . Now everything clicks.
		</comment>
		<comment id='8' author='zhao1157' date='2020-09-23T13:21:17Z'>
		Thanks for digging into this, &lt;denchmark-link:https://github.com/zhao1157&gt;@zhao1157&lt;/denchmark-link&gt;
.  So sounds like there are at least a few issues on our side here.  One is that NCCL support seemed to be compiled in but was not being used at runtime.  And it sounds like you needed to modify the CMakeLists file in order to get NCCL to work with TensorFlow.  Is that all correct?
		</comment>
		<comment id='9' author='zhao1157' date='2020-09-23T14:23:50Z'>
		&lt;denchmark-link:https://github.com/tgaddair&gt;@tgaddair&lt;/denchmark-link&gt;
 With , I think the original  works just fine without needing to be modified. I changed a few things in the  file before I realizing I should set that environment variable. With that environment variable and the original , I reproduced the performance of .
		</comment>
		<comment id='10' author='zhao1157' date='2020-09-23T18:26:12Z'>
		Gotcha, thanks for clarifying!
		</comment>
	</comments>
</bug>