<bug id='581' author='kaufManu' open_date='2020-06-11T09:57:32Z' closed_time='2020-10-15T09:02:17Z'>
	<summary>rotation_matrix_to_angle_axis takes potentially misleading detour via quaternions</summary>
	<description>
The function rotation_matrix_to_angle_axis at first sight gives the impression that it uses the Rodrigues formula to convert rotation matrices to angle axis representation. However, this is not what happens, which can be misleading. For example, when computing angular differences betwen two rotations, the function behaves unintuitively.
Consider the following code snippet where I compute the difference between two rotations. The first rotation is by pi/4 around the x-axis, the second is pi/8 around the x-axis. The angular difference is expected to be pi/8 rad or 22.5 degrees. I am using version 0.2.0.
import torch
import numpy as np
from kornia.geometry.conversions import rotation_matrix_to_angle_axis
from kornia.geometry.conversions import angle_axis_to_rotation_matrix
from kornia.geometry.conversions import angle_axis_to_quaternion
from kornia.geometry.conversions import rad2deg
import cv2


def angle_diff_quat_directly(j1, j2):
    ja = angle_axis_to_quaternion(j1)
    ja_hat = angle_axis_to_quaternion(j2)
    cos_angle = torch.abs((ja * ja_hat).sum(-1))
    angle_diff = 2 * torch.acos(torch.clamp(cos_angle, -1.0, 1.0))
    return rad2deg(angle_diff)


def angle_diff_via_rot_mat(j1, j2):
    ja = angle_axis_to_rotation_matrix(j1)
    ja_hat = angle_axis_to_rotation_matrix(j2)
    diff_rot = torch.matmul(ja_hat.transpose(-1, -2), ja)
    axis_angle = rotation_matrix_to_angle_axis(diff_rot)
    angle_diff = rad2deg(torch.norm(axis_angle, dim=-1))
    return angle_diff


def angle_diff_opencv(j1, j2):
    ja = angle_axis_to_rotation_matrix(j1)
    ja_hat = angle_axis_to_rotation_matrix(j2)
    diff_rot = torch.matmul(ja_hat.transpose(-1, -2), ja)
    diff_rot = diff_rot.cpu().numpy()
    angle_diff = []
    for r in diff_rot:
        axis_angle = cv2.Rodrigues(r)[0]
        angle_diff.append(np.linalg.norm(axis_angle) / np.pi * 180)
    return angle_diff


if __name__ == '__main__':
    aa_target = torch.zeros((1, 3), dtype=torch.float32).cuda()
    aa_target[:, 0] = np.pi / 4

    aa_hat = torch.zeros((1, 3), dtype=torch.float32).cuda()
    aa_hat[:, 0] = np.pi / 8

    print('via rotmat: {}'.format(angle_diff_via_rot_mat(aa_target, aa_hat)))
    print('via quat: {}'.format(angle_diff_quat_directly(aa_target, aa_hat)))
    print('via openCV: {}'.format(angle_diff_opencv(aa_target, aa_hat)))
This prints
&lt;denchmark-code&gt;via rotmat: tensor([157.5000], device='cuda:0')
via quat: tensor([22.5000], device='cuda:0')
via openCV: [22.500010871403298]
&lt;/denchmark-code&gt;

This is largely because the return value of rotation_matrix_to_angle_axis is different from cv2.Rodrigues.
    diff_rot = torch.tensor([[ 1.0000,  0.0000,  0.0000],
                             [ 0.0000,  0.9239, -0.3827],
                             [ 0.0000,  0.3827,  0.9239]])
    print(rotation_matrix_to_angle_axis(diff_rot))
    print(cv2.Rodrigues(diff_rot.cpu().numpy())[0].T)
which prints
&lt;denchmark-code&gt;tensor([0.0000, 0.0000, 2.7489])
[[0.39270654 0.         0.        ]]
&lt;/denchmark-code&gt;

I am not saying that the output of rotation_matrix_to_angle_axis is wrong and for many use cases this behaviour is absolutely fine. Also the behaviour shown here is in fact expected when one is aware that quaternions are used behind the scenes, since there's many ways to define angular distances in quaternion space. However, it is a bit unexpected given the documentation of rotation_matrix_to_angle_axis and I think users should be made aware. Also, it would be great to have an actual implementation of the Rodrigues function, i.e. a copy of the OpenCV function.
	</description>
	<comments>
		<comment id='1' author='kaufManu' date='2020-06-12T08:25:02Z'>
		&lt;denchmark-link:https://github.com/kaufManu&gt;@kaufManu&lt;/denchmark-link&gt;
 thanks for reporting it - this is a known issue we have. &lt;denchmark-link:https://github.com/krrish94&gt;@krrish94&lt;/denchmark-link&gt;
 is going to work on a refactor for this part. Once we have a solid base, we can definitely interface opencv rodrigues functionality.
		</comment>
		<comment id='2' author='kaufManu' date='2020-10-08T08:24:36Z'>
		This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions, and happy coding day ðŸ˜Ž
		</comment>
		<comment id='3' author='kaufManu' date='2020-10-19T12:45:16Z'>
		&lt;denchmark-link:https://github.com/kaufManu&gt;@kaufManu&lt;/denchmark-link&gt;
 Any idea where the exact issue might be ?
		</comment>
	</comments>
</bug>