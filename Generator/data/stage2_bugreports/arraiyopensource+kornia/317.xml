<bug id='317' author='hassony2' open_date='2019-11-03T15:53:41Z' closed_time='2020-10-15T10:23:58Z'>
	<summary>Potential bug in angle_axis_to_rotation_matrix</summary>
	<description>
Hi !
Thanks for the great work :)
I am observing some surprising behavior in rotation_matrix_to_angle_axis, and I think it is worth raising although I am not yet sure it is actually a bug or a problem with my interpretation of the functions.
The main observation is that I expect  a cycle of conversion to be consistent (e.g. apllying angle_axis_to_rotation_matrix(rotation_matrix_to_axis_angle()) should be close to identity.
However I observe that cycling axis-angles through rotation matrixes produces different results.
import torch
import numpy as np
from scipy.stats import special_ortho_group

from kornia.geometry.conversions import rotation_matrix_to_angle_axis as rm2aa
from kornia.geometry.conversions import angle_axis_to_rotation_matrix as aa2rm
from kornia.geometry.conversions import angle_axis_to_quaternion as aa2quat
from kornia.geometry.conversions import quaternion_to_angle_axis as quat2aa
from kornia.geometry.conversions import quaternion_to_rotation_matrix as quat2rm
from kornia.geometry.conversions import rotation_matrix_to_quaternion as rm2quat

batch_size = 8

rand_aa = torch.rand(batch_size, 3)
# axis_angles --&gt; rotation_matrix --&gt; axis_angle
aa_cycle_through_rm = rm2aa(aa2rm(rand_aa))
aa_through_rm_error = (aa_cycle_through_rm - rand_aa).abs().max(1)[0]
print(f"Reconstruction errors for angle_axis --&gt; rotation_matrix --&gt; angle_axis cycle\n"
        f"errors: {aa_through_rm_error}")  # Large values ~1-2

# axis_angles --&gt; quaternions --&gt; rotation_matrix --&gt; quaternions --&gt; axis_angle
aa_cycle_through_rm_and_quat = quat2aa(rm2quat(quat2rm(aa2quat(rand_aa))))                                                                      aa_through_rm_and_quat_error = (aa_cycle_through_rm_and_quat - rand_aa).abs().max(1)[0]                                                         print(f"Reconstruction errors for angle_axis --&gt; quat --&gt; rotation_matrix --&gt; quat --&gt; angle_axis cycle\n"
         f"errors: {aa_through_rm_and_quat_error}")  # Small values ~1e-8     
Since rotation_matrix_to_angle_axis is actually the composition of rotation_matrix_to_quaternion and  quaternion_to_angle_axis (as I observe from 


kornia/kornia/geometry/conversions.py


         Line 232
      in
      a6e6685






 quaternion: torch.Tensor = rotation_matrix_to_quaternion(rotation_matrix) 




)
the problem seems to come from angle_axis_to_rotation_matrix.
Further investigations gave the following script :
import torch
import numpy as np
from scipy.stats import special_ortho_group
from kornia.geometry.conversions import rotation_matrix_to_angle_axis as rm2aa
from kornia.geometry.conversions import angle_axis_to_rotation_matrix as aa2rm
from kornia.geometry.conversions import angle_axis_to_quaternion as aa2quat
from kornia.geometry.conversions import quaternion_to_angle_axis as quat2aa
from kornia.geometry.conversions import quaternion_to_rotation_matrix as quat2rm
from kornia.geometry.conversions import rotation_matrix_to_quaternion as rm2quat

# Sample random rotation matrixes
random_rots = []
for batch_idx in range(batch_size):
    random_rots.append(special_ortho_group.rvs(3))
random_rots = torch.Tensor(np.array(random_rots))

# Generate random axis angles from random rotation matrixes
rand_aa = rm2aa(random_rots)
# axis_angles --&gt; quaternions --&gt; rotation_matrixes
rm_from_aa_through_quat = quat2rm(aa2quat(rand_aa))
# axis_angles --&gt; rotation_matrixes
rm_from_aa = aa2rm(rand_aa)
rot_mat_reconstruction_diff = (rm_from_aa_through_quat - rm_from_aa).max(1)[0].max(1)[0]
print(f"angle_axis --&gt; quaternions --&gt; rotation_matrix vs angle_axis --&gt; rotation_matrix\n"
      f"errors: {rot_mat_reconstruction_diff}")  # Small values ~1e-8

# Make sure that difference in reconstructed rotation matrixes actually produces different transforms
# When applied on randomly generated points
point_nb = 10
# Generate a batch of 10 random points per batch in 3D
rand_points = torch.rand(batch_size, 10, 3)

# Rotate points
points_rotated = rm_from_aa.bmm(rand_points.transpose(1, 2)).transpose(1, 2)
points_rotated_through_quat = rm_from_aa_through_quat.bmm(rand_points.transpose(1, 2)).transpose(1, 2)
reconstructed_distances = (points_rotated - points_rotated_through_quat).norm(2, -1).mean()
max_reconstructed_dists = (points_rotated - points_rotated_through_quat).norm(2, -1).max(1)[0]
print("Distances between points rotated using the two reconstructed rotations")
print(max_reconstructed_dists)  # errors in the range 1-2
I am puzzled because I compared the results from your angle_axis_to_rotation_matrix and a function I have been using for a long time which performs the same purpose, and they produce the same output, which makes me doubt whether there is actually an error despite the above-mentioned behavior.
	</description>
	<comments>
		<comment id='1' author='hassony2' date='2019-11-03T18:15:16Z'>
		hey &lt;denchmark-link:https://github.com/hassony2&gt;@hassony2&lt;/denchmark-link&gt;
 , just double checking the implementation and probably we should update to something easier like &lt;denchmark-link:https://github.com/tensorflow/graphics/blob/master/tensorflow_graphics/geometry/transformation/rotation_matrix_3d.py#L114&gt;https://github.com/tensorflow/graphics/blob/master/tensorflow_graphics/geometry/transformation/rotation_matrix_3d.py#L114&lt;/denchmark-link&gt;

		</comment>
		<comment id='2' author='hassony2' date='2019-11-29T10:16:15Z'>
		A complimentary illustration for this bug.
I have &lt;denchmark-link:https://smpl-x.is.tue.mpg.de/&gt;SMPLx&lt;/denchmark-link&gt;
 body pose rotations in axis-angle representation:
&lt;denchmark-link:https://github.com/kornia/kornia/files/3904693/fullpose.zip&gt;fullpose.zip&lt;/denchmark-link&gt;

fullpose = torch.from_numpy(np.load('/home/nghorbani/Downloads/fullpose.npz')['fullpose']).view(batch_size, -1,3)# 22x3
A visualization of the parameters using our PyTorch &lt;denchmark-link:https://github.com/nghorbani/human_body_prior&gt;body model loader
&lt;/denchmark-link&gt;

&lt;denchmark-link:https://user-images.githubusercontent.com/7373673/69861626-0451fe00-1299-11ea-9bba-e918317e6439.png&gt;&lt;/denchmark-link&gt;

Now a transformation to matrix rotations and then back to axis angles using consequent angle_axis_to_rotation_matrix and rotation_matrix_to_angle_axis does not reproduce the original rotations.
from kornia.geometry.conversions import angle_axis_to_rotation_matrix as aa2matrot
from kornia.geometry.conversions import rotation_matrix_to_angle_axis as matrot2aa
fullpose_rec = matrot2aa(aa2matrot(fullpose))
Visualization below:
&lt;denchmark-link:https://user-images.githubusercontent.com/7373673/69861650-1764ce00-1299-11ea-9a12-446b9befa62a.png&gt;&lt;/denchmark-link&gt;

It is weird since it used to work perfectly in torchgerometry
		</comment>
		<comment id='3' author='hassony2' date='2019-12-06T11:49:28Z'>
		&lt;denchmark-link:https://github.com/nghorbani&gt;@nghorbani&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/hassony2&gt;@hassony2&lt;/denchmark-link&gt;
 do you have any idea why the current code is failing and what's the difference between tensorflow's code and our pytorch adaptation ? I really see the actual implementation more clean and understandable :D
		</comment>
		<comment id='4' author='hassony2' date='2019-12-06T23:18:32Z'>
		I have suggested a fix with a pull request taken from the previous torchgeometry code. it works out of the box for me.
		</comment>
		<comment id='5' author='hassony2' date='2020-10-08T09:24:23Z'>
		This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions, and happy coding day ðŸ˜Ž
		</comment>
		<comment id='6' author='hassony2' date='2020-12-26T01:05:23Z'>
		Hi guys, sorry to bother here. It seems that this bug is still not fixed after one year. For anyone who is interested in the same functionality, try &lt;denchmark-link:https://github.com/facebookresearch/pytorch3d&gt;pytorch3d&lt;/denchmark-link&gt;
!
In my experiments,  works fine and outputs the same results as . However,  is definitely problematic and the cycle consistency is not guaranteed!
To bypass this, try   and . The logic is the same as the kornia function &lt;denchmark-link:https://kornia.readthedocs.io/en/v0.4.0/_modules/kornia/geometry/conversions.html#rotation_matrix_to_angle_axis&gt;kornia.angle_axis_to_rotation_matrix&lt;/denchmark-link&gt;
. matrix ---&gt; quaternion ---&gt; angle_axis.
		</comment>
		<comment id='7' author='hassony2' date='2020-12-28T10:00:28Z'>
		&lt;denchmark-link:https://github.com/qiyan98&gt;@qiyan98&lt;/denchmark-link&gt;
 this will fixed after &lt;denchmark-link:https://github.com/kornia/kornia/issues/483&gt;#483&lt;/denchmark-link&gt;
 :)
		</comment>
	</comments>
</bug>