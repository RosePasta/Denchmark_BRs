<bug id='611' author='tuanhui-li' open_date='2020-08-06T02:01:46Z' closed_time='2020-12-08T13:25:14Z'>
	<summary>[Bug] angle_axis_to_rotation_matrix can not be backward</summary>
	<description>
&lt;denchmark-h:h2&gt;‚ùì Questions and Help&lt;/denchmark-h&gt;

I want to use the angle_axis_to_rotation_matrix as a function in the pytorch pipline, the demo code is as follows:
&lt;denchmark-code&gt;import torch
import torchgeometry as tgm

x = torch.zeros(1, 3, requires_grad=True)  # Nx3
input = tgm.deg2rad(x)
output = tgm.angle_axis_to_rotation_matrix(input)  # Nx4x4
output.mean().backward()
print(x.grad)
&lt;/denchmark-code&gt;

then the result is as follows:
&lt;denchmark-code&gt;tensor([[nan, nan, nan]])
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='tuanhui-li' date='2020-08-06T09:06:06Z'>
		&lt;denchmark-link:https://github.com/tuanhui-li&gt;@tuanhui-li&lt;/denchmark-link&gt;
 from your example I can see that your are using  which is a very old version of what kornia is right now.
Could you try again with recent versions ?
		</comment>
		<comment id='2' author='tuanhui-li' date='2020-08-06T09:46:21Z'>
		&lt;denchmark-link:https://github.com/edgarriba&gt;@edgarriba&lt;/denchmark-link&gt;
 I tried kornia , and I got the same result
&lt;denchmark-code&gt;import torch
import kornia

x = torch.zeros(1, 3)  # Nx3
x.requires_grad=True
output = kornia.angle_axis_to_rotation_matrix(x)  # Nx4x4
output.mean().backward()
print(x.grad)
&lt;/denchmark-code&gt;

		</comment>
		<comment id='3' author='tuanhui-li' date='2020-08-29T09:17:53Z'>
		&lt;denchmark-link:https://github.com/tuanhui-li&gt;@tuanhui-li&lt;/denchmark-link&gt;
 rotations API needs to be revisited since we have been seeing a lot of issues recently.
		</comment>
		<comment id='4' author='tuanhui-li' date='2020-10-01T14:00:08Z'>
		In  _compute_rotation_matrix(angle_axis, theta2, eps=1e-6):
k_one = 1.0 
   theta = torch.sqrt(theta2) 
   wxyz = angle_axis / (theta + eps) 
if theta2 is zero, then on a backwards call, the gradient will become infinite. A simple fix is to add the already previously defined eps to theta2 instead of to theta. Although that could result in theta being very small compared to eps, so I've included theta2+eps and theta+eps.
		</comment>
		<comment id='5' author='tuanhui-li' date='2020-10-02T10:36:06Z'>
		&lt;denchmark-link:https://github.com/cbames&gt;@cbames&lt;/denchmark-link&gt;
 thanks ! could you send a small PR fixing this ? can we have a minimal test to verifying this ?
		</comment>
		<comment id='6' author='tuanhui-li' date='2020-10-02T10:57:50Z'>
		Sure thing, I'll toss it on the todo list.
		</comment>
		<comment id='7' author='tuanhui-li' date='2020-12-01T11:45:39Z'>
		This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions, and happy coding day üòé
		</comment>
	</comments>
</bug>