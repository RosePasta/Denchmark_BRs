<bug id='601' author='pablovela5620' open_date='2020-07-30T21:40:10Z' closed_time='2020-07-31T20:59:36Z'>
	<summary>Perspective point projection camera matrix confusion</summary>
	<description>
I'm not sure if this is a documentation error or an error in the implementation. The project points function in the perspective camera asks for a camera matrix of size (Bx4x4) I'm assuming this is for the extrinsic+intrisinc homogenous camera matrix batches.
&lt;denchmark-link:https://user-images.githubusercontent.com/25287427/88977209-7bf28580-d28b-11ea-962f-6904c9bd03a0.png&gt;&lt;/denchmark-link&gt;

But Looking at the source code there is an assertion statement asking for a (Bx3x3) matrix.
&lt;denchmark-link:https://user-images.githubusercontent.com/25287427/88977276-9e849e80-d28b-11ea-8441-1ffd25d2b73f.png&gt;&lt;/denchmark-link&gt;

I've tried just using the intrinsic matrix to project a batch of points but it is not working. Any clarity on this would be helpful. Thanks!
	</description>
	<comments>
		<comment id='1' author='pablovela5620' date='2020-07-31T06:46:12Z'>
		It's an error in the documentation. The expected shape for camera matrix is (*,3,3).
I guess what you were expecting with extrinsic+intrinsics could be another functionality.
		</comment>
		<comment id='2' author='pablovela5620' date='2020-07-31T16:33:51Z'>
		I think I see the problem I'm facing. I have a dataset of 3d and 2d keypoints, including the camera intrinsic parameters. It looks like this functions works given a batch size of 1. But it seems that it doesn't work given larger batches with different camera parameters. Just as an example with a batch size of 1
dataloader = DataLoader(dataset,
                        batch_size=1,
                        shuffle=False)

for sample in dataloader:
    # sample is a dict containing xyz/uv/k ground truth values
    img_rgb = kornia.bgr_to_rgb(sample["image_bgr"])[0]
    # batch size of 2
    xyz = sample["xyz"]
    uv = sample["uv"]
    k = sample["k"]
    print(uv - kornia.geometry.camera.perspective.project_points(xyz, k))
results in (as expected)
tensor([[[     0.000,      0.000],
         [     0.000,      0.000],
         [     0.000,      0.000],
         [     0.000,     -0.000],
         [     0.000,      0.000],
         [     0.000,      0.000],
         [     0.000,      0.000],
         [     0.000,      0.000],
         [     0.000,      0.000],
         [    -0.000,      0.000],
         [     0.000,      0.000],
         [     0.000,      0.000],
         [    -0.000,     -0.000],
         [     0.000,      0.000],
         [     0.000,      0.000],
         [     0.000,      0.000],
         [     0.000,      0.000],
         [     0.000,      0.000],
         [     0.000,      0.000],
         [     0.000,      0.000],
         [     0.000,      0.000]]])
but if I change the batchsize to 2. (Different xyz/uv/k parameters)
I get the following error
&lt;denchmark-code&gt;RuntimeError                              Traceback (most recent call last)
&lt;ipython-input-35-99c8d10d6d64&gt; in &lt;module&gt;
      6     uv = sample["uv"]
      7     k = sample["k"]
----&gt; 8     print(uv - kornia.geometry.camera.perspective.project_points(xyz, k))
      9     plt.imshow(kornia.tensor_to_image(img_rgb))
     10     break

~/miniconda3/envs/ganerated_mac/lib/python3.7/site-packages/kornia/geometry/camera/perspective.py in project_points(point_3d, camera_matrix)
     54 
     55     # apply intrinsics ans return
---&gt; 56     u_coord: torch.Tensor = x_coord * fx + cx
     57     v_coord: torch.Tensor = y_coord * fy + cy
     58 

RuntimeError: The size of tensor a (21) must match the size of tensor b (2) at non-singleton dimension 1
&lt;/denchmark-code&gt;

Is this only supposed to handle a single consistent camera intrinsic? Is there a way to make it work with batches of different camera parameters?
		</comment>
		<comment id='3' author='pablovela5620' date='2020-07-31T18:55:03Z'>
		&lt;denchmark-link:https://github.com/pablovela5620&gt;@pablovela5620&lt;/denchmark-link&gt;
 could you plot the exact shape for each of the input tensors ? Could you also take a look at this test case and take it as a reference ? &lt;denchmark-link:https://github.com/kornia/kornia/blob/master/test/geometry/test_perspective.py#L18&gt;https://github.com/kornia/kornia/blob/master/test/geometry/test_perspective.py#L18&lt;/denchmark-link&gt;

		</comment>
		<comment id='4' author='pablovela5620' date='2020-07-31T20:59:36Z'>
		That link helped clear things up! Actually it was specifically the &lt;denchmark-link:https://github.com/kornia/kornia/blob/e301c3c0afdcecb3d9ddb6ecca9aa16bd4186248/test/geometry/test_perspective.py#L24&gt;multi_batch&lt;/denchmark-link&gt;
 test. I had a batch of (b, 21, 3) 3d keypoints and (b, 3, 3) camera parameters. Turns out that the camera parameters have to be of shape (b, # keypoints, 3, 3), this is also not in the documentation found &lt;denchmark-link:https://kornia.readthedocs.io/en/latest/geometry.camera.perspective.html#kornia.geometry.camera.perspective.project_points&gt;here&lt;/denchmark-link&gt;
. Either way, thank you for the help!
		</comment>
	</comments>
</bug>