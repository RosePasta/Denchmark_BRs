<bug id='229' author='henon' open_date='2019-04-13T11:31:42Z' closed_time='2019-04-15T01:09:42Z'>
	<summary>flow_control_ops.cond graph not constructed correctly</summary>
	<description>
CondTestCases.testCondTrue creates the following graph:
            with(tf.Graph().as_default(), g =&gt;
            {
                var x = tf.constant(2);
                var y = tf.constant(5);
                var z = control_flow_ops.cond(tf.less(x, y), () =&gt; tf.multiply(x, tf.constant(17)),
                    () =&gt; tf.add(y, tf.constant(23)));
                tf.train.export_meta_graph(@"D:\dev\tensorboard\logdir\sharp.meta", as_text: false);
                self.assertEquals(eval_scalar(z), 34);
            });
&lt;denchmark-link:https://user-images.githubusercontent.com/44090/56079109-23764b00-5df0-11e9-91c3-50436453b1fc.PNG&gt;&lt;/denchmark-link&gt;

But the same code in Python creates this graph:
    g = ops.Graph()
    with g.as_default():
        x = tf.constant(2);
        y = tf.constant(5);
        z = control_flow_ops.cond(tf.less(x, y), lambda: tf.multiply(x, tf.constant(17)),
                                  lambda: tf.add(y, tf.constant(23)));
        writer = tf.summary.FileWriter(logdir="D:/dev/tensorboard/logdir", graph=g)
        writer.flush()
&lt;denchmark-link:https://user-images.githubusercontent.com/44090/56079112-2ffaa380-5df0-11e9-9408-5eac945a529b.PNG&gt;&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='henon' date='2019-04-13T18:18:26Z'>
		After &lt;denchmark-link:https://github.com/Oceania2018&gt;@Oceania2018&lt;/denchmark-link&gt;
 updated the c_api Operation._update_inputs seems to work now. Only the control dependencies are still missing from the graph:
&lt;denchmark-link:https://user-images.githubusercontent.com/44090/56083725-483ae480-5e29-11e9-9864-6d3dadb790c9.png&gt;&lt;/denchmark-link&gt;

		</comment>
		<comment id='2' author='henon' date='2019-04-13T19:20:09Z'>
		I have identified the problem why the control dependency edges are not generated. Here is how to reproduce:

In Control.Operations._add_control_input add the line  var updated_control_inputs=control_inputs; after the c_api call.
Set a breakpoint on that new line

Run CondTestCases.testCondTrue

You will see that the cond/switch_f control dependency is added to this (which is cond/Const). But after stepping over the new line var updated_control_inputs=control_inputs; you will see that control_inputs is still empty. Seems like the update via the c_api fails somehow
		</comment>
		<comment id='3' author='henon' date='2019-04-13T22:09:59Z'>
		&lt;denchmark-link:https://github.com/henon&gt;@henon&lt;/denchmark-link&gt;
 I can't reproduce it.
&lt;denchmark-link:https://user-images.githubusercontent.com/1705364/56085788-f5543380-5e0e-11e9-8c4e-00310567b149.png&gt;&lt;/denchmark-link&gt;

I just changed to Tensor.eval(), then it works.
&lt;denchmark-link:https://user-images.githubusercontent.com/1705364/56085793-1f0d5a80-5e0f-11e9-8880-3e00663e929b.png&gt;&lt;/denchmark-link&gt;

I've found testCondFalse doesn't pass.
&lt;denchmark-link:https://user-images.githubusercontent.com/1705364/56085830-2da84180-5e10-11e9-912f-39c5a2f8da5e.png&gt;&lt;/denchmark-link&gt;

When I enable c_api.TF_UpdateEdge(graph, output, input, status);, new error threw:
&lt;denchmark-link:https://user-images.githubusercontent.com/1705364/56086266-c478fc00-5e18-11e9-9c81-bb35a7638afb.png&gt;&lt;/denchmark-link&gt;

NumControlOutputs of cond/switch_t should be 1 not 0, also for cond/switch_f.
I think we should update managed Graph definition when we invoked TF_UpdateEdge.
		</comment>
		<comment id='4' author='henon' date='2019-04-14T10:13:46Z'>
		Have you checked the problem with TF_AddControlInput I outlined above? The problem is that after adding a control input the control inputs are still 0.
		</comment>
		<comment id='5' author='henon' date='2019-04-14T14:57:19Z'>
		We recompiled the tensorflow c_api, now it passed the unit test.
		</comment>
		<comment id='6' author='henon' date='2019-04-14T15:26:07Z'>
		the simplified test case passes, the original one with Add and Mul still fails. but the graph looks better now:
&lt;denchmark-link:https://user-images.githubusercontent.com/44090/56095165-60b70780-5eda-11e9-8662-134bb4d550cd.png&gt;&lt;/denchmark-link&gt;

		</comment>
		<comment id='7' author='henon' date='2019-04-15T00:55:52Z'>
		This should be 1.
&lt;denchmark-link:https://user-images.githubusercontent.com/1705364/56102041-4cc9d080-5eef-11e9-97c2-57ddff8afc48.png&gt;&lt;/denchmark-link&gt;

		</comment>
		<comment id='8' author='henon' date='2019-04-15T01:03:57Z'>
		&lt;denchmark-link:https://github.com/henon&gt;@henon&lt;/denchmark-link&gt;
 Fixed.
&lt;denchmark-link:https://user-images.githubusercontent.com/1705364/56102138-6e778780-5ef0-11e9-8128-346a904940b6.png&gt;&lt;/denchmark-link&gt;

		</comment>
		<comment id='9' author='henon' date='2019-04-15T07:48:37Z'>
		Now that it is fixed, side by side the graphs of tensorflow Python and TensorFlow.NET
&lt;denchmark-link:https://user-images.githubusercontent.com/44090/56115409-99e78a00-5f63-11e9-8121-6c4f91c6be4d.PNG&gt;&lt;/denchmark-link&gt;

&lt;denchmark-link:https://user-images.githubusercontent.com/44090/56115385-8b00d780-5f63-11e9-8387-fc461896cec6.png&gt;&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>