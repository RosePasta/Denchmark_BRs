<bug id='361' author='Nucs' open_date='2019-08-21T09:56:34Z' closed_time='2019-09-26T21:50:12Z'>
	<summary>SciSharp.TensorFlow.Redist package is not copying tensorflow.dll to output directory.</summary>
	<description>
&lt;denchmark-link:https://www.nuget.org/packages/SciSharp.TensorFlow.Redist-Windows-GPU/1.14.0&gt;SciSharp.TensorFlow.Redist-Windows-GPU&lt;/denchmark-link&gt;
 and &lt;denchmark-link:https://www.nuget.org/packages/SciSharp.TensorFlow.Redist/1.14.0&gt;SciSharp.TensorFlow.Redist&lt;/denchmark-link&gt;
 nuget packages are not performing copy correctly in cases when the project is:

targeting netstandard
targeting netcore (need to verify)
Located in an unusual location relative to the solution directory which contains the folder packages folder.

The redists fail to copy tensorflow.dll to output directory because it can't find /packages folder.
When a project targets netstandard, ../../packages does not exist.
Instead it uses global nuget cache folder: %userprofile%\.nuget\packages
Here is the msbuild file that takes care of resolving the copying:

scisharp.tensorflow.redist.1.14.0.nupkg\build\netstandard2.0\SciSharp.TensorFlow.Redist.props

&lt;Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003"&gt;

  &lt;!--
  NuGet packages.config doesn't support native assemblies automatically,
  so copy the native assemblies to the output directory.
  --&gt;
  &lt;ItemGroup Condition="Exists('packages.config') OR
                        Exists('$(MSBuildProjectName).packages.config') OR
                        Exists('packages.$(MSBuildProjectName).config')"&gt;
    &lt;Content Include="$(MSBuildThisFileDirectory)\..\..\runtimes\win-x64\native\*.dll"
             Condition="'$(PlatformTarget)' == 'x64'"&gt;
      &lt;CopyToOutputDirectory&gt;PreserveNewest&lt;/CopyToOutputDirectory&gt;
      &lt;Visible&gt;false&lt;/Visible&gt;
      &lt;Link&gt;%(Filename)%(Extension)&lt;/Link&gt;
    &lt;/Content&gt;
    &lt;Content Include="$(MSBuildThisFileDirectory)\..\..\runtimes\win-x86\native\*.dll"
             Condition="'$(PlatformTarget)' == 'x86'"&gt;
      &lt;CopyToOutputDirectory&gt;PreserveNewest&lt;/CopyToOutputDirectory&gt;
      &lt;Visible&gt;false&lt;/Visible&gt;
      &lt;Link&gt;%(Filename)%(Extension)&lt;/Link&gt;
    &lt;/Content&gt;
  &lt;/ItemGroup&gt;

&lt;/Project&gt;
	</description>
	<comments>
		<comment id='1' author='Nucs' date='2019-08-21T10:03:14Z'>
		Related issues, &lt;denchmark-link:https://github.com/SciSharp/TensorFlow.NET/issues/340&gt;#340&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/SciSharp/TensorFlow.NET/issues/297&gt;#297&lt;/denchmark-link&gt;

		</comment>
		<comment id='2' author='Nucs' date='2019-08-21T12:58:43Z'>
		Hi,
My understanding is that the nuget default behavior when resolving dependencies is to install the packages in the global user repository.
Visual studio should be able to do what's needed when running/debugging to make the dlls available when needed, a copy being made only in cases of publish.
Are you specifying that your project is targeting the win-x64 runtime ?
Are you getting an error saying that the tensorflow.dll couldn't be found when attempting to run ?
Kind regards.
		</comment>
		<comment id='3' author='Nucs' date='2019-08-21T16:30:54Z'>
		&lt;denchmark-link:https://github.com/chaami&gt;@chaami&lt;/denchmark-link&gt;
 Thanks for contribution.
Do you change the name  to .
The script is original written by &lt;denchmark-link:https://github.com/harishsk&gt;@harishsk&lt;/denchmark-link&gt;
.
Can you PR and I will assign &lt;denchmark-link:https://github.com/harishsk&gt;@harishsk&lt;/denchmark-link&gt;
 to review it.
		</comment>
		<comment id='4' author='Nucs' date='2019-09-24T08:24:53Z'>
		This issue still persists.
You still can't use &lt;denchmark-link:https://www.nuget.org/packages/SciSharp.TensorFlow.Redist-Windows-GPU/1.14.0&gt;SciSharp.TensorFlow.Redist-Windows-GPU&lt;/denchmark-link&gt;
 and &lt;denchmark-link:https://www.nuget.org/packages/SciSharp.TensorFlow.Redist/1.14.0&gt;SciSharp.TensorFlow.Redist&lt;/denchmark-link&gt;
 for  projects that are set to .
		</comment>
		<comment id='5' author='Nucs' date='2019-09-26T21:50:12Z'>
		After looking into it further, I think this issue is irrelevant as explained &lt;denchmark-link:https://stackoverflow.com/a/45845351/1481186&gt;here&lt;/denchmark-link&gt;
:

It doesn't make sense to create a .NET Standard console app.
You can think of .NET Standard like you would an interface in C#. .NET Standard is an interface, then there's concrete implementations of it in .NET Framework, .NET Core and other platforms. .NET Standard makes sense for class libraries, but a console app needs to actually run on a specific concrete implementation.
Thus, there is no Visual Studio project template for .NET Standard console apps. You can create a console app for .NET Framework or .NET Core and then consume .NET Standard class libraries.

		</comment>
	</comments>
</bug>