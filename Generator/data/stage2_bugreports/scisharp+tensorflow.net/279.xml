<bug id='279' author='thomaslundgaard' open_date='2019-07-02T13:54:50Z' closed_time='2019-07-02T16:06:08Z'>
	<summary>Cannot train a simple CNN</summary>
	<description>
I am trying to train a very simple convolutional neural network with just a single layer, but I keep getting the following exception:
&lt;denchmark-code&gt;$&gt; bin/x64/Debug/ConsoleApp1.exe
2019-07-02 15:43:11.201294: I tensorflow/core/platform/cpu_feature_guard.cc:141] Your CPU supports instructions that this TensorFlow binary was not compiled to use: AVX2
Operation 'conv2d/Conv2D' has no attr named 'explicit_paddings'.
System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation. ---&gt; System.Exception: Operation 'conv2d/Conv2D' has no attr named 'explicit_paddings'.
   at Tensorflow.Status.Check(Boolean throwException)
   at Tensorflow.Operation.get_attr(String name)
   at Tensorflow.Gradients.nn_grad._Conv2DGrad(Operation op, Tensor[] grads)
   --- End of inner exception stack trace ---
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Object[] arguments, Signature sig, Boolean constructor)
   at System.Reflection.RuntimeMethodInfo.UnsafeInvokeInternal(Object obj, Object[] parameters, Object[] arguments)
   at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
   at System.RuntimeType.InvokeMember(String name, BindingFlags bindingFlags, Binder binder, Object target, Object[] providedArgs, ParameterModifier[] modifiers, CultureInfo culture, String[] namedParams)
   at Tensorflow.ops.&lt;&gt;c__DisplayClass2_1.&lt;get_gradient_function&gt;b__2(Operation oper, Tensor[] out_grads)
   at Tensorflow.gradients_util.&lt;&gt;c__DisplayClass0_3.&lt;_GradientsHelper&gt;b__5(NameScope scope1)
   at Tensorflow.Python.with[T](T py, Action`1 action)
System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation. ---&gt; System.Exception: Operation 'conv2d/Conv2D' has no attr named 'explicit_paddings'.
   at Tensorflow.Status.Check(Boolean throwException)
   at Tensorflow.Operation.get_attr(String name)
   at Tensorflow.Gradients.nn_grad._Conv2DGrad(Operation op, Tensor[] grads)
   --- End of inner exception stack trace ---
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Object[] arguments, Signature sig, Boolean constructor)
   at System.Reflection.RuntimeMethodInfo.UnsafeInvokeInternal(Object obj, Object[] parameters, Object[] arguments)
   at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
   at System.RuntimeType.InvokeMember(String name, BindingFlags bindingFlags, Binder binder, Object target, Object[] providedArgs, ParameterModifier[] modifiers, CultureInfo culture, String[] namedParams)
   at Tensorflow.ops.&lt;&gt;c__DisplayClass2_1.&lt;get_gradient_function&gt;b__2(Operation oper, Tensor[] out_grads)
   at Tensorflow.gradients_util.&lt;&gt;c__DisplayClass0_3.&lt;_GradientsHelper&gt;b__5(NameScope scope1)
   at Tensorflow.Python.with[T](T py, Action`1 action)
   at Tensorflow.gradients_util.&lt;&gt;c__DisplayClass0_0.&lt;_GradientsHelper&gt;b__0(NameScope scope)
   at Tensorflow.Python.with[T](T py, Action`1 action)

Unhandled Exception: System.Reflection.TargetInvocationException: Exception has been thrown by the target of an invocation. ---&gt; System.Exception: Operation 'conv2d/Conv2D' has no attr named 'explicit_paddings'.
   at Tensorflow.Status.Check(Boolean throwException)
   at Tensorflow.Operation.get_attr(String name)
   at Tensorflow.Gradients.nn_grad._Conv2DGrad(Operation op, Tensor[] grads)
   --- End of inner exception stack trace ---
   at System.RuntimeMethodHandle.InvokeMethod(Object target, Object[] arguments, Signature sig, Boolean constructor)
   at System.Reflection.RuntimeMethodInfo.UnsafeInvokeInternal(Object obj, Object[] parameters, Object[] arguments)
   at System.Reflection.RuntimeMethodInfo.Invoke(Object obj, BindingFlags invokeAttr, Binder binder, Object[] parameters, CultureInfo culture)
   at System.RuntimeType.InvokeMember(String name, BindingFlags bindingFlags, Binder binder, Object target, Object[] providedArgs, ParameterModifier[] modifiers, CultureInfo culture, String[] namedParams)
   at Tensorflow.ops.&lt;&gt;c__DisplayClass2_1.&lt;get_gradient_function&gt;b__2(Operation oper, Tensor[] out_grads)
   at Tensorflow.gradients_util.&lt;&gt;c__DisplayClass0_3.&lt;_GradientsHelper&gt;b__5(NameScope scope1)
   at Tensorflow.Python.with[T](T py, Action`1 action)
   at Tensorflow.gradients_util.&lt;&gt;c__DisplayClass0_0.&lt;_GradientsHelper&gt;b__0(NameScope scope)
   at Tensorflow.Python.with[T](T py, Action`1 action)
   at Tensorflow.gradients_util._GradientsHelper(Tensor[] ys, Tensor[] xs, Tensor[] grad_ys, String name, Boolean colocate_gradients_with_ops, Boolean gate_gradients, Int32 aggregation_method, Tensor[] stop_gradients, Graph src_graph)
   at Tensorflow.Optimizer.compute_gradients(Tensor loss, List`1 var_list, Nullable`1 aggregation_method, GateGradientType gate_gradients, Boolean colocate_gradients_with_ops, Tensor grad_loss)
   at Tensorflow.Optimizer.minimize(Tensor loss, RefVariable global_step, List`1 var_list, GateGradientType gate_gradients, Nullable`1 aggregation_method, Boolean colocate_gradients_with_ops, String name, Tensor grad_loss)
   at ConsoleApp1.Program.Main(String[] args) in C:\Temp\Scratchpad\tfdotnet\ConsoleApp1\Program.cs:line 22
&lt;/denchmark-code&gt;

Here is the program I am running:
&lt;denchmark-code&gt;using System;
using Tensorflow;
using NumSharp;

namespace ConsoleApp1
{
    class Program
    {
        static void Main(string[] args)
        {
            var input = tf.placeholder(tf.float32, new TensorShape(1, 16, 32, 1));

            var net = tf.layers.conv2d(input, 16, new int[] { 3, 3 });
            net = tf.sum(net, 1, keep_dims: true);
            net = tf.sum(net, 2, keep_dims: true);
            net = tf.sum(net, 3, keep_dims: true);

            var target = tf.placeholder(tf.float32, new TensorShape(1, 1, 1, 1));
            var loss = tf.reduce_sum(tf.square(net - target));

            var adam = new Tensorflow.Train.AdamOptimizer(0.01f);
            var operation = adam.minimize(loss);

            var sess = tf.Session();

            for (int epoch = 0; epoch &lt; 100; epoch++)
            {
                var x = np.ones(new Shape(12, 16, 32, 1), dtype:typeof(float));
                var y = np.ones(new Shape(12, 1, 1, 1), dtype:typeof(float));
                sess.run(operation, new FeedItem(input, x), new FeedItem(target, y));
                Console.WriteLine($"Epoch {epoch}: cost = {sess.run(loss, new FeedItem(input, x), new FeedItem(target, y))}");
            }

            return;
        }
    }
}
&lt;/denchmark-code&gt;

The only installed nugets in the project are NumSharp 0.10.3 and TensorFlow.NET 0.8.3 (and their dependencies).
This is a .NET framework 4.6.1 console application.
Any idea of what is going on?
Thanks in advance.
PS: You are making some cool projects here that could be very useful in my work. Keep up the good work!
	</description>
	<comments>
		<comment id='1' author='thomaslundgaard' date='2019-07-02T14:08:00Z'>
		Please replace the  with &lt;denchmark-link:https://github.com/SciSharp/TensorFlow.NET/tree/master/tensorflowlib/runtimes/win-x64/native&gt;https://github.com/SciSharp/TensorFlow.NET/tree/master/tensorflowlib/runtimes/win-x64/native&lt;/denchmark-link&gt;
.
This issue will be fixed permanent once  migrates their NuGet &lt;denchmark-link:https://www.nuget.org/packages/Microsoft.ML.TensorFlow.Redist&gt;Microsoft.ML.TensorFlow.Redist&lt;/denchmark-link&gt;
 package to  repo.
Notes: we made some changes on the tensorflow API to support TensorFlow.NET and recompiled the dll.
		</comment>
		<comment id='2' author='thomaslundgaard' date='2019-07-02T14:17:03Z'>
		I had the same problem, but the error was still there after the common approach &lt;denchmark-link:https://github.com/Oceania2018&gt;@Oceania2018&lt;/denchmark-link&gt;
 is suggesting.

Make sure you have CUDA v10 and cuDNN 7.3.1 installed on your machine;
Add the path to your CUDA installation (default is: C:\Program Files\NVIDIA GPU Computing Toolkit\CUDA\v10.0) and your cuDNN library (c:\tools\cudnn-10.0-v7.3.1\cuda in my case) to your Path environment variable.

If it does not solve the problem, you can also try to:

Clone the TensorFlow.NET repository;
Replace the dll as suggested;
Pack a NuGet package with a different version number from the solution;
Add the output directory among the NuGet package sources;
let your project reference the version you specified.

		</comment>
		<comment id='3' author='thomaslundgaard' date='2019-07-02T14:31:33Z'>
		&lt;denchmark-link:https://github.com/acifonelli&gt;@acifonelli&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/thomaslundgaard&gt;@thomaslundgaard&lt;/denchmark-link&gt;
 I'm sure it will work once you replace the tensorflow.dll instead the one in zip. Tensorflow v1.14 added the  attribute which not compatile with &lt; .
		</comment>
		<comment id='4' author='thomaslundgaard' date='2019-07-02T16:06:08Z'>
		Yes, replacing the dll fixed my issue. Thanks!
		</comment>
		<comment id='5' author='thomaslundgaard' date='2020-02-29T12:00:17Z'>
		I have the same issue. &lt;denchmark-link:https://github.com/Oceania2018&gt;@Oceania2018&lt;/denchmark-link&gt;
 could you update the path of dll as the current one is not working.
		</comment>
		<comment id='6' author='thomaslundgaard' date='2020-03-01T01:54:46Z'>
		&lt;denchmark-link:https://github.com/PratapMehra&gt;@PratapMehra&lt;/denchmark-link&gt;
 Try this &lt;denchmark-link:https://www.nuget.org/packages/SciSharp.TensorFlow.Redist/1.14.1&gt;TensorFlow Redistribution&lt;/denchmark-link&gt;
 version.
		</comment>
	</comments>
</bug>