<bug id='940' author='iamlucaswolf' open_date='2020-11-27T22:25:00Z' closed_time='2021-01-05T14:36:38Z'>
	<summary>Indexing torch.Tensor with pennylane.Wires object causes segfault</summary>
	<description>
&lt;denchmark-h:h4&gt;Issue description&lt;/denchmark-h&gt;

See title.
&gt;&gt;&gt; from pennylane.wires import Wires
&gt;&gt;&gt; import torch
&gt;&gt;&gt; tensor = torch.arange(10)
&gt;&gt;&gt; wires = Wires(0)
&gt;&gt;&gt; tensor[wires]
Segmentation fault (core dumped)
The same code works fine with NumPy arrays, so my gut feeling is that the bug resides in PyTorch rather than PennyLane. I'll probably give this another look tomorrow and step through this with a debugger to make out the root cause. Turns out this behaviour is triggered by Wires, see my comment below.
I found this while working on &lt;denchmark-link:https://github.com/PennyLaneAI/pennylane/pull/929&gt;#929&lt;/denchmark-link&gt;
, when modifying  to be agnostic w.r.t array/tensor-classes. AFAIK, this behaviour is not triggered anywhere in the current version; just be warned that this might happen.
	</description>
	<comments>
		<comment id='1' author='iamlucaswolf' date='2020-11-28T10:27:40Z'>
		Having had a second look at this, it turned out that the reason for this behaviour stems from the Wires implementation:
In PyTorch, the indexed torch.Tensor object repeatedly calls __getitem__() on the indexing object, presumably until a valid index (integer, slices, ellipsis, None, or long/byte) Variable is returned. Since Wires.__getitem__() always returns another Wires object this never happens and the callstack grows until segfault.
In NumPy, the indexed np.ndarray eventually tries to call __array__() on the indexing object, and since Wires has a __array__ implementation everything works fine.
For &lt;denchmark-link:https://github.com/PennyLaneAI/pennylane/pull/929&gt;#929&lt;/denchmark-link&gt;
, I replaced replaced occurences of  by  which works for both NumPy and PyTorch arrays/tensors. Still, I believe it would be cleaner if this would be fixed in  directly.
		</comment>
		<comment id='2' author='iamlucaswolf' date='2020-11-30T06:24:25Z'>
		Thanks for catching this &lt;denchmark-link:https://github.com/iamlucaswolf&gt;@iamlucaswolf&lt;/denchmark-link&gt;
!

For #929, I replaced replaced occurences of array[wires] by array[wires.tolist()] which works for both NumPy and PyTorch arrays/tensors.

I think this is a reasonable short term fix.

Still, I believe it would be cleaner if this would be fixed in Wires directly.

I'm still trying to gather my thoughts, but I'm not sure I'm 100% clear what a long term fix in the Wires class looks like, since this seems to be a peculiarity with how indexing is performed in PyTorch; I wonder if there is a way to treat array-like objects as valid indices (similarly, I wonder if TF respects the __array__ method when indexing).
A more breaking solution would be to have the Wires class simply return lists when indexed, but I remember &lt;denchmark-link:https://github.com/mariaschuld&gt;@mariaschuld&lt;/denchmark-link&gt;
 making strong arguments that the Wires class, when indexed, should always return another Wires object.
		</comment>
		<comment id='3' author='iamlucaswolf' date='2020-11-30T11:26:09Z'>
		Thanks &lt;denchmark-link:https://github.com/iamlucaswolf&gt;@iamlucaswolf&lt;/denchmark-link&gt;
 for digging so deep! :)
While I see that it is convenient to just index with a wires object that happens to represent integer-valued wire labels, I think this should not be encouraged. Wires could also be a sequence of the form ['a', 0, 'qubit3'], in which indexing does not make sense. Since the class is not user-exposed, and PennyLane should always be agnostic as to what wire labels a user/device chooses, I cannot think of a case in which something like tensor[wires] could be safely used.
Take  for example, as you mention: While by default, the device base class uses a map that &lt;denchmark-link:https://github.com/PennyLaneAI/pennylane/blob/fe32d314a76570b160494d8c31fca677dbdc44f7/pennylane/_device.py#L186&gt;translates the user's wire labels to integer-valued labels&lt;/denchmark-link&gt;
 (like , a device can easily overwrite this, in which case other methods based on indexing fail.
In other words, the inconvenience of not being able to index is a bit of a safety feature!
Would it be useful to raise an error when using wires for indexing? Is there an elegant way to actually do this in the wires class (since it does not know what calls its __getitem__? Or shall I just add a warning to the documentation?
		</comment>
		<comment id='4' author='iamlucaswolf' date='2021-01-05T14:36:37Z'>
		Closing this as using Wires objects for indexing is not supported. Feel free to leave a comment for further thoughts/points.
		</comment>
	</comments>
</bug>