<bug id='661' author='mariaschuld' open_date='2020-06-01T12:22:52Z' closed_time='2020-06-04T12:01:01Z'>
	<summary>QNN tests fail on master with torch 1.3</summary>
	<description>
As of today, on my local copy of master (freshly pulled from origin) the test test_rx_circuit in tests/qnn/test_cost fails. This is the traceback:
&lt;denchmark-code&gt;pennylane/qnn/cost.py:129: TypeError
_________________ TestSquaredErrorLoss.test_rx_circuit[torch] __________________

self = &lt;test_cost.TestSquaredErrorLoss object at 0x7fc1d44bfba8&gt;
interface = 'torch'

    def test_rx_circuit(self, interface):
        num_qubits = 3
    
        dev = qml.device("default.qubit", wires=num_qubits)
        observables = [qml.PauliZ(0), qml.PauliX(0), qml.PauliZ(1) @ qml.PauliZ(2)]
        loss = SquaredErrorLoss(rx_ansatz, observables, dev, interface=interface)
    
        phis = np.ones(num_qubits)
&gt;       res = loss(phis, target=np.array([1.0, 0.5, 0.1]))

tests/qnn/test_cost.py:79: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
pennylane/qnn/cost.py:132: in __call__
    return self.loss(*args, **kwargs)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;pennylane.qnn.cost.SquaredErrorLoss object at 0x7fc1d44ca518&gt;
target = array([1. , 0.5, 0.1]), args = (array([1., 1., 1.]),), kwargs = {}
input_ = tensor([0.5403, 0.0000, 0.2919], dtype=torch.float64)

    def loss(self, *args, target=None, **kwargs):
        r"""Calculates the squared error loss between the observables'
        expectation values and a target.
    
        Keyword Args:
            target (tensor): target values
    
        Returns:
            array[float]: squared error values
        """
    
        if target is None:
            raise ValueError("The target cannot be None")
    
        input_ = self.qnodes(*args, **kwargs)
    
        if len(target) != len(input_):
            raise ValueError(
                f"Input target of incorrect length {len(target)} instead of {len(input_)}"
            )
    
&gt;       return (input_ - target) ** 2
E       TypeError: sub(): argument 'other' (position 1) must be Tensor, not numpy.ndarray
&lt;/denchmark-code&gt;

The test runs fine after upgrading from Torch 1.3+cpu to 1.5
	</description>
	<comments>
		<comment id='1' author='mariaschuld' date='2020-06-01T12:24:32Z'>
		&lt;denchmark-link:https://github.com/trbromley&gt;@trbromley&lt;/denchmark-link&gt;
 can you make sense of this?
		</comment>
		<comment id='2' author='mariaschuld' date='2020-06-01T13:10:36Z'>
		Thanks for spotting &lt;denchmark-link:https://github.com/mariaschuld&gt;@mariaschuld&lt;/denchmark-link&gt;
! It looks like subtracting numpy arrays from torch tensors was not supported in  but it supported in , e.g.,:
torch.ones(3) - np.ones(3)
The above does not work in Torch 1.3 but does in later versions.
The tests then fail because we calculate (input_ - target) ** 2 with the first element being a torch tensor and the second being a numpy array.
We could fix this by:

Within the SquaredErrorLoss class, converting target to a torch tensor if interface="torch", or more generally converting to the native tensor/array type according to the interface argument.
More simply, within the tests converting to a torch tensor where appropriate
Adding the following to the tests: pytest.importorskip("torch", minversion="1.4") and simply skip testing this part if the version is 1.3 or below.

I feel like the first two options are potentially a bit complicated and don't really follow the duck typing style. The last option works for me, since I feel that combining numpy arrays and torch tensors is a question for torch itself and users in version 1.3 or below will just have to stick to setting target as a torch tensor.
		</comment>
		<comment id='3' author='mariaschuld' date='2020-06-01T14:13:23Z'>
		
Adding the following to the tests: pytest.importorskip("torch", minversion="1.4") and simply skip testing this part if the version is 1.3 or below.

I'm happy with this solution! I think keeping duck typing is preferable.
		</comment>
		<comment id='4' author='mariaschuld' date='2020-06-01T14:13:55Z'>
		Me too!
		</comment>
	</comments>
</bug>