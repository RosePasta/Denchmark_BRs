<bug id='591' author='trbromley' open_date='2020-04-16T15:47:29Z' closed_time='2020-09-21T19:43:44Z'>
	<summary>Incorrect matrix for Tensors with unordered wires</summary>
	<description>
The matrix attribute for PL's Tensor class can give an incorrect matrix when the observables used to specify the tensor are provided unordered according to the wires.
For example, consider the observable IZ. We can feed a wire-ordered list [qml.Identity(wires=0), qml.PauliZ(wires=1)] and a wire-unordered list [qml.PauliZ(wires=1), qml.Identity(wires=0)] to create the Tensor. The former gives the correct matrix, while the latter doesn't:
&gt;&gt;&gt; t1 = qml.operation.Tensor(*[qml.Identity(wires=0), qml.PauliZ(wires=1)])
&gt;&gt;&gt; t2 = qml.operation.Tensor(*[qml.PauliZ(wires=1), qml.Identity(wires=0)])
&gt;&gt;&gt; np.allclose(t1.matrix, t2.matrix)
False
In fact, the tensor t2 from the wire-unordered list gives the matrix corresponding to ZI:
&gt;&gt;&gt; t3 = qml.operation.Tensor(*[qml.PauliZ(wires=0), qml.Identity(wires=1)])
&gt;&gt;&gt; np.allclose(t3.matrix, t2.matrix)
True
This may be linked to &lt;denchmark-link:https://github.com/PennyLaneAI/pennylane/issues/460&gt;#460&lt;/denchmark-link&gt;
.
	</description>
	<comments>
		<comment id='1' author='trbromley' date='2020-04-17T14:26:07Z'>
		I lost track about whether there is a parent issue that gathers these things, but there are a number of open issues related to wire bookkeeping:

#521
#532
#456
#423
#561 (possibly related)

&lt;denchmark-link:https://github.com/josh146&gt;@josh146&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/mariaschuld&gt;@mariaschuld&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/antalszava&gt;@antalszava&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/trbromley&gt;@trbromley&lt;/denchmark-link&gt;
 Be good to squash all these issues all at once
		</comment>
		<comment id='2' author='trbromley' date='2020-04-20T06:15:53Z'>
		I will think about a new overall wire strategy this week, and will have these issues in mind...anyone keen to help out?
		</comment>
		<comment id='3' author='trbromley' date='2020-04-20T06:17:53Z'>
		I'm keen to help out!
		</comment>
		<comment id='4' author='trbromley' date='2020-07-23T15:17:45Z'>
		Finally got back to this issue.
The problem is the following: The tensor product does of course not commute, but after the wires refactor we cannot assume that a user's wire labels (in the example 0 and 1, but could also be 'ancilla' and 'q1') tell the Tensor class about a "true" underlying order. As a consequence, we need to rely on the user of this function to order the local observables correctly.
In short, calling
&lt;denchmark-code&gt;t = qml.operation.Tensor(qml.Identity(wires=1), qml.PauliZ(wires=0))
&lt;/denchmark-code&gt;

but wanting PennyLane to reorder the local observables is not expected user behaviour, and it's hard to flag such a case as wrong (what if the user just calls the first wire 1 and the second 0) on the level of the operation class.
However, a user would typically call the signature advertised in the docs:
&lt;denchmark-code&gt;qml.Identity(wires=1) @ qml.PauliZ(wires=0)
&lt;/denchmark-code&gt;

where it should already feel like a wrong ordering, since @ is known as a non-commutative matrix multiplication.
We could in principle introduce a check in the qnode, which knows about the underlying "true" wire ordering of a device and should also have access to the original list of observables through t.obs...
		</comment>
		<comment id='5' author='trbromley' date='2020-07-24T05:04:19Z'>
		&lt;denchmark-link:https://github.com/mariaschuld&gt;@mariaschuld&lt;/denchmark-link&gt;
, just to summarize your comment (and make sure I follow correctly): it is generally impossible with the new Wires refactor to tell if the order of the tensor products is monotonically increasing or not, so all we can hope to do it:

Internally assume the provided tensor observables are provided in order of increasing wires

		</comment>
		<comment id='6' author='trbromley' date='2020-07-24T08:00:06Z'>
		Almost :)
It depends on where you want to verify the order: In a qnode (i.e., if the tensor observable is encountered when executing a circuit) this is no problem, because the qnode has full information on a device's register and hence the order of the wire labels a user provides. But in the operator class itself this is not possible, at least not without passing information from a qnode somehow.
		</comment>
		<comment id='7' author='trbromley' date='2020-09-14T18:24:45Z'>
		&lt;denchmark-link:https://github.com/co9olguy&gt;@co9olguy&lt;/denchmark-link&gt;
 just a quick question: did the queuing refactor fix this? I remember you mentioning that this could be potentially obsolete after...
To make tensor observables have the wanted behaviour, the tensor product would have to happen in a context where the device is known.
		</comment>
		<comment id='8' author='trbromley' date='2020-09-14T18:32:06Z'>
		To my knowledge, this was not "actively" fixed during the queuing refactor. &lt;denchmark-link:https://github.com/josh146&gt;@josh146&lt;/denchmark-link&gt;
 or &lt;denchmark-link:https://github.com/antalszava&gt;@antalszava&lt;/denchmark-link&gt;
 might have more info about whether it was "accidentally" fixed though 
		</comment>
		<comment id='9' author='trbromley' date='2020-09-15T02:55:36Z'>
		I don't believe this is fixed, no. This requires code changes to the Tensor class directly.
I'm also not sure the best solution.
Perhaps we just assume that tensor product order explicitly defines the order of the operators (so the left-most operator is acting on the top-most wire)? Optionally, you can pass device wires to enforce some permutation?
		</comment>
		<comment id='10' author='trbromley' date='2020-09-15T11:26:58Z'>
		Can't we delay the execution of the tensor product until we are in a context where we know what the wires are? Then everything would be well-defined and logical: the tensor observable only has a numerical representation once it is associated with a device.
		</comment>
		<comment id='11' author='trbromley' date='2020-09-15T11:37:58Z'>
		Oh, to be honest, I don't even think Tensor.matrix is used anywhere, not even by plugins. It was simply provided as a convenience method for users to echo qml.PauliX(0).matrix etc.
		</comment>
		<comment id='12' author='trbromley' date='2020-09-21T19:43:44Z'>
		After some discussion we are closing this bug report, since it is addressing an outdated logic that the Tensor class follows, producing non-intuitive behaviour. We will address necessary changes in an upcoming refactor that improves the behaviour of the Tensor class to only ever produce a matrix representation when called in the context of a device.
		</comment>
	</comments>
</bug>