<bug id='894' author='glassnotes' open_date='2020-11-10T16:27:06Z' closed_time='2020-11-14T15:46:39Z'>
	<summary>Jacobian not computed correctly on `JacobianTape`s with `analytic=False`.</summary>
	<description>
&lt;denchmark-h:h4&gt;Issue description&lt;/denchmark-h&gt;

Computing a the Jacobian of a JacobianTape gives different results between devices that are analytic=True and analytic=False.


Expected behavior: The Jacobians should be similar up to some expected deviation due to noise.


Actual behavior: The Jacobian computed by the analytic=False device varies by orders of magnitude.


Reproduces how often: Always.


System information:


&lt;denchmark-code&gt;Name: PennyLane
Version: 0.13.0.dev0
Summary: PennyLane is a Python quantum machine learning library by Xanadu Inc.
Home-page: https://github.com/XanaduAI/pennylane
Author: None
Author-email: None
License: Apache License 2.0
Location: /home/olivia/Software/anaconda3/envs/xanadu/lib/python3.8/site-packages
Requires: semantic-version, toml, autograd, appdirs, scipy, networkx, numpy
Required-by: PennyLane-SF, PennyLane-qsharp, PennyLane-qiskit, PennyLane-Qchem, PennyLane-Forest, PennyLane-Cirq
Platform info:           Linux-5.3.0-64-generic-x86_64-with-glibc2.10
Python version:          3.8.5
Numpy version:           1.18.5
Scipy version:           1.4.1
Installed devices:
- default.gaussian (PennyLane-0.13.0.dev0)
- default.mixed (PennyLane-0.13.0.dev0)
- default.qubit (PennyLane-0.13.0.dev0)
- default.qubit.autograd (PennyLane-0.13.0.dev0)
- default.qubit.tf (PennyLane-0.13.0.dev0)
- default.tensor (PennyLane-0.13.0.dev0)
- default.tensor.tf (PennyLane-0.13.0.dev0)
- strawberryfields.fock (PennyLane-SF-0.11.0)
- strawberryfields.gaussian (PennyLane-SF-0.11.0)
- strawberryfields.remote (PennyLane-SF-0.11.0)
- microsoft.QuantumSimulator (PennyLane-qsharp-0.8.0)
- qiskit.aer (PennyLane-qiskit-0.13.0.dev0)
- qiskit.basicaer (PennyLane-qiskit-0.13.0.dev0)
- qiskit.ibmq (PennyLane-qiskit-0.13.0.dev0)
- forest.numpy_wavefunction (PennyLane-Forest-0.11.0)
- forest.qpu (PennyLane-Forest-0.11.0)
- forest.qvm (PennyLane-Forest-0.11.0)
- forest.wavefunction (PennyLane-Forest-0.11.0)
- cirq.mixedsimulator (PennyLane-Cirq-0.11.0)
- cirq.simulator (PennyLane-Cirq-0.11.0)
&lt;/denchmark-code&gt;

&lt;denchmark-h:h4&gt;Source code and tracebacks&lt;/denchmark-h&gt;

Here is a small example that causes issues:
&lt;denchmark-code&gt;import pennylane as qml

params = [0.432, 0.123, 0.546, 0.32, 0.76]

with qml.tape.JacobianTape() as tape:
    qml.RX(params[0], wires=0)
    qml.Rot(*params[1:4], wires=0)
    qml.CNOT(wires=[0, 2])
    qml.RX(params[4], wires=4)
    qml.expval(qml.PauliZ(0))

dev = qml.device('default.qubit', wires=5, analytic=True)
print(f"Expectation value on analytic device = {tape.execute(dev)}")
print(f"Jacobian on analytic device = {tape.jacobian(dev)}\n")

dev_noisy = qml.device('default.qubit', wires=5, analytic=False)
print(f"Expectation value on noisy device = {tape.execute(dev_noisy)}")
print(f"Jacobian on noisy device = {tape.jacobian(dev_noisy)}\n")
&lt;/denchmark-code&gt;

This is the output:
&lt;denchmark-code&gt;Expectation value on analytic device = [0.74942127]
Jacobian on analytic device = [[-0.4156709  -0.21577075 -0.51546775  0.          0.        ]]

Expectation value on noisy device = [0.762]
Jacobian on noisy device = [[ -80000. -140000. -260000. -500000. -400000.]]
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='glassnotes' date='2020-11-11T17:05:57Z'>
		On further investigation, it is not that the Jacobian is being computed incorrectly. Rather the issue is that on a noisy device, the value of the gradient taken by finite differences explodes because the difference between the values at the two points is larger than it should be, due to noise, and then we are dividing by something small (1e-7). Increasing the number of shots reduces this effect slightly, but not by much.
qml.grad works as expected on noisy devices for QNodes, so I will look into how this can be adapted to the tapes.
		</comment>
		<comment id='2' author='glassnotes' date='2020-11-14T12:33:21Z'>
		Hey &lt;denchmark-link:https://github.com/glassnotes&gt;@glassnotes&lt;/denchmark-link&gt;
, I can fill in some context here! This effect was previously noted by &lt;denchmark-link:https://github.com/trbromley&gt;@trbromley&lt;/denchmark-link&gt;
 et al. while working on &lt;denchmark-link:https://arxiv.org/abs/2008.06517&gt;https://arxiv.org/abs/2008.06517&lt;/denchmark-link&gt;
. Essentially, the finite-difference method with a finite number of shots is a  estimator of the gradient, and, unlike in analytic mode,  is not the optimum step size:
&lt;denchmark-link:https://user-images.githubusercontent.com/2959003/99146979-f074f700-26b7-11eb-862c-c7b29a6fe400.png&gt;&lt;/denchmark-link&gt;

Instead, we find that h ~ O(0.5) is a better step size for the finite difference method:
&gt;&gt;&gt; dev = qml.device('default.qubit', wires=5, analytic=True)
&gt;&gt;&gt; print(f"Jacobian on analytic device = {tape.jacobian(dev)}\n")
Jacobian on analytic device = [[-0.4156709  -0.21577075 -0.51546775  0.          0.        ]]

&gt;&gt;&gt; dev_noisy = qml.device('default.qubit', wires=5, analytic=False, shots=10000)
&gt;&gt;&gt; print(f"Jacobian on noisy device (h=1e-7) = {tape.jacobian(dev_noisy)}\n")
Jacobian on noisy device (h=1e-7) = [[      0.  -30000.  -82000.   -2000. -124000.]]

&gt;&gt;&gt; print(f"Jacobian on noisy device (h=0.3) = {tape.jacobian(dev_noisy, h=0.3)}\n")
Jacobian on noisy device (h=0.3) = [[-0.53266667 -0.232      -0.56933333  0.00866667 -0.042     ]]
In non-tape mode, we try and take this into account:



pennylane/pennylane/qnodes/jacobian.py


         Line 26
      in
      cf8fe64






 DEFAULT_STEP_SIZE = 0.3 





However, we don't take this into account in tape mode, the default is always h=1e-7. The reason being, we weren't sure if it would be confusing to users to implicitly change the default step size depending on the number of shots.
However, after reading through your comments above, I am in favour of re-introducing the different default step size for non-analytic mode, as I think it's more confusing that it gives such a wrong result by default.
		</comment>
		<comment id='3' author='glassnotes' date='2020-11-14T12:56:09Z'>
		Oh I see! That makes sense, thanks for the explanation  ðŸ’¯  (and the reference). Yes I think setting a default and providing some docs basically saying what you said above would be really helpful - we can even implement the results of Figs. 5 and have it be adaptive based on the number of shots.
		</comment>
		<comment id='4' author='glassnotes' date='2020-11-14T12:57:37Z'>
		I agree fully ðŸ’¯
Let's close this one and make a new issue as per your comment
		</comment>
	</comments>
</bug>