<bug id='531' author='josh146' open_date='2020-03-05T07:19:45Z' closed_time='2020-04-02T14:58:03Z'>
	<summary>`default.qubit`  returns analytic probabilities when `analytic=False`</summary>
	<description>
Currently, when qml.probs() is returned from a QNode, the QubitDevice.probability() abstract method is returned directly to the user.
For hardware-like devices that don't support analytic mode, this should behave as expected; the probability will be computed on the device by binning the generated computational basis samples.
However, for analytic devices, such as default.qubit, care must be taken here. Currently, there is a bug in DefaultQubit.probability(), in that the analytic probability is always returned, regardless what the value of device.analytic is:
def probability(self, wires=None):
    if self._state is None:
        return None

    wires = wires or range(self.num_wires)
    prob = self.marginal_prob(np.abs(self._state) ** 2, wires)
    return prob
This should be modified as follows:
def probability(self, wires=None):
    if self._state is None:
        return None

    wires = wires or range(self.num_wires)

    if self.analytic:
        prob = self.marginal_prob(np.abs(self._state) ** 2, wires)
        return prob

    # non-analytic mode, estimate the probability from the generated samples

    # consider only the requested wires
    wires = np.hstack(wires)
    samples = self._samples[:, np.array(wires)]

    # convert samples from a list of 0, 1 integers,
    # to base 10 representation
    unraveled_indices = [2] * len(wires)
    indices = np.ravel_multi_index(samples.T, unraveled_indices)

    # count the basis state occurrences, and construct
    # the probability vector
    basis_states, counts = np.unique(indices, return_counts=True)
    prob = np.zeros([len(wires)**2], dtype=np.float64)
    prob[basis_states] = counts/self.shots
    return prob
	</description>
	<comments>
	</comments>
</bug>