<bug id='613' author='josh146' open_date='2020-05-02T10:17:56Z' closed_time='2020-05-08T13:29:26Z'>
	<summary>`tape.jacobian` doesn't work in the TensorFlow interface</summary>
	<description>
The following program:
import tensorflow as tf
import pennylane as qml


dev = qml.device("default.qubit", wires=1)

@qml.qnode(dev, interface="tf")
def circuit(params):
    qml.RX(params[0], wires=0)
    qml.RY(params[1], wires=0)
    return qml.probs(0)

params = tf.Variable([0.1, 1.0])

with tf.GradientTape() as tape:
    res = circuit(params)

print(res)
jacobian = tape.jacobian(res, params)
print("Jacobian (TF):", jacobian)
will result in an exception when calculating the Jacobian, as the tensor used during backpropagation does not have a .numpy() method, which we assume exists within the TensorFlow interface to the QNode:
def grad(grad_output, **tfkwargs):
    """Returns the vector-Jacobian product"""
    # evaluate the Jacobian matrix of the QNode
    variables = tfkwargs.get("variables", None)

    jacobian = qnode.jacobian(args, kwargs)

    # perform the vector-Jacobian product
    if not grad_output_np.shape:
        temp = grad_output_np * jacobian
    else:
        temp = grad_output_np.T @ jacobian

    # restore the nested structure of the input args
    grad_input = unflatten(temp.flat, args)

    if isinstance(grad_input, list):
        grad_input = [tf.convert_to_tensor(i, dtype=dtype) for i in grad_input]
    elif isinstance(grad_input, tuple):
        grad_input = tuple(tf.convert_to_tensor(i, dtype=dtype) for i in grad_input)
    else:
        grad_input = tf.convert_to_tensor(grad_input, dtype=dtype)

    if variables is not None:
        return grad_input, variables

    return grad_input
The solution here is to not convert the grad_output argument to a NumPy array, but rather keep the computation in pure TensorFlow:
def grad(grad_output, **tfkwargs):
    """Returns the vector-Jacobian product"""
    # evaluate the Jacobian matrix of the QNode
    variables = tfkwargs.get("variables", None)
    jacobian = qnode.jacobian(args, kwargs)
    jacobian = tf.constant(jacobian, dtype=dtype)
    grad_input = tf.matmul(tf.transpose(tf.reshape(grad_output, [-1, 1])), jacobian)
    grad_input = tf.reshape(grad_input, [-1])

    if variables is not None:
        return grad_input, variables

    return grad_input
While this allows the Jacobian example to work, as the unflattening is no longer occuring, we cannot support QNode arguments outside of 1D tensors.
One possible solution is to have a TF-specific unflattening function, that avoids any casting to NumPy arrays.
	</description>
	<comments>
		<comment id='1' author='josh146' date='2020-05-06T06:25:07Z'>
		See &lt;denchmark-link:https://github.com/PennyLaneAI/pennylane/pull/612&gt;#612&lt;/denchmark-link&gt;
 for an unflattening solution that avoids casting to NumPy arrays.
		</comment>
	</comments>
</bug>