<bug id='955' author='glassnotes' open_date='2020-12-07T20:33:54Z' closed_time='2020-12-09T16:45:52Z'>
	<summary>Inverses of S and T not applied correctly</summary>
	<description>
&lt;denchmark-h:h4&gt;Issue description&lt;/denchmark-h&gt;

When applying .inv() for qml.S and qml.T, it seems that the original operation is applied instead of the inverse. This was noticed first when returning qml.state(), however the issue is also observed returning qml.expval. A code snippet is provided below that reproduces the issue.
Expected behavior: S.inv() and T.inv() should be applied correctly.
Actual behavior: S.inv() and T.inv()  have the same effect as S and T.
Reproduces how often: Always
System information:
&lt;denchmark-code&gt;Name: PennyLane
Version: 0.13.0
Summary: PennyLane is a Python quantum machine learning library by Xanadu Inc.
Home-page: https://github.com/XanaduAI/pennylane
Author: None
Author-email: None
License: Apache License 2.0
Location: /home/olivia/Software/anaconda3/envs/xanadu/lib/python3.8/site-packages
Requires: semantic-version, numpy, toml, scipy, autograd, networkx, appdirs
Required-by: PennyLane-SF, PennyLane-qsharp, PennyLane-qiskit, PennyLane-Qchem, PennyLane-Forest, PennyLane-Cirq
Platform info:           Linux-5.4.0-56-generic-x86_64-with-glibc2.10
Python version:          3.8.5
Numpy version:           1.18.5
Scipy version:           1.4.1
Installed devices:
- default.gaussian (PennyLane-0.13.0)
- default.mixed (PennyLane-0.13.0)
- default.qubit (PennyLane-0.13.0)
- default.qubit.autograd (PennyLane-0.13.0)
- default.qubit.tf (PennyLane-0.13.0)
- default.tensor (PennyLane-0.13.0)
- default.tensor.tf (PennyLane-0.13.0)
- strawberryfields.fock (PennyLane-SF-0.11.0)
- strawberryfields.gaussian (PennyLane-SF-0.11.0)
- strawberryfields.remote (PennyLane-SF-0.11.0)
- microsoft.QuantumSimulator (PennyLane-qsharp-0.8.0)
- qiskit.aer (PennyLane-qiskit-0.13.0.dev0)
- qiskit.basicaer (PennyLane-qiskit-0.13.0.dev0)
- qiskit.ibmq (PennyLane-qiskit-0.13.0.dev0)
- forest.numpy_wavefunction (PennyLane-Forest-0.11.0)
- forest.qpu (PennyLane-Forest-0.11.0)
- forest.qvm (PennyLane-Forest-0.11.0)
- forest.wavefunction (PennyLane-Forest-0.11.0)
- cirq.mixedsimulator (PennyLane-Cirq-0.11.0)
- cirq.simulator (PennyLane-Cirq-0.11.0)
&lt;/denchmark-code&gt;

&lt;denchmark-h:h4&gt;Source code and tracebacks&lt;/denchmark-h&gt;

Example below. Can replace S with T, and return qml.state() with return qml.expval(qml.PauliY(0)) to see behaviour of expectation values (they should be +1 and -1 for original/inverse respectively, but both are returned as +1).
&lt;denchmark-code&gt;import pennylane as qml
from pennylane import numpy as qnp
qnp.set_printoptions(precision=6, suppress=True)

qml.enable_tape()
dev = qml.device('default.qubit', wires=1)

@qml.qnode(dev)
def test_s():
    qml.Hadamard(wires=0)
    qml.S(wires=0)
    return qml.state()

@qml.qnode(dev)
def test_s_inverse():
    qml.Hadamard(wires=0)
    qml.S(wires=0).inv()
    return qml.state()

# Should be 1/sqrt(2) (|0&gt; + i |1&gt; )
print(f"Apply S\t: {test_s()}")

# Should be 1/sqrt(2) (|0&gt; - i |1&gt; )
print(f"Apply S inv\t: {test_s_inverse()}")
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='glassnotes' date='2020-12-07T23:59:41Z'>
		Seems to be related to tape mode (and/or qml.state), the non-tape mode version produces the expected results:
import pennylane as qml
from pennylane import numpy as qnp
qnp.set_printoptions(precision=6, suppress=True)

dev = qml.device('default.qubit', wires=1)

@qml.qnode(dev)
def test_s():
    qml.Hadamard(wires=0)
    qml.S(wires=0)
    return qml.probs(wires=0)

test_s()

# Should be 1/sqrt(2) (|0&gt; + i |1&gt; )
print(f"Apply S\t: {dev.state}")

dev = qml.device('default.qubit', wires=1)
@qml.qnode(dev)
def test_s_inverse():
    qml.Hadamard(wires=0)
    qml.S(wires=0).inv()
    return qml.probs(wires=0)

test_s_inverse()

# Should be 1/sqrt(2) (|0&gt; - i |1&gt; )
print(f"Apply S inv\t: {dev.state}")
&lt;denchmark-code&gt;Apply S	: [0.707107+0.j       0.      +0.707107j]
Apply S inv	: [0.707107+0.j       0.      -0.707107j]
&lt;/denchmark-code&gt;

		</comment>
		<comment id='2' author='glassnotes' date='2020-12-08T08:17:00Z'>
		&lt;denchmark-link:https://github.com/glassnotes&gt;@glassnotes&lt;/denchmark-link&gt;
 thanks for catching this - you actually caught two completely independent bugs!


The S and T gate decompositions did not take into account inverses (in both tape and non-tape mode)


The tape-mode QNode was attempting to decompose inverse gates even if the device supported them.


I've fixed both in &lt;denchmark-link:https://github.com/PennyLaneAI/pennylane/pull/956&gt;#956&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>