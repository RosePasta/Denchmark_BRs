<bug id='910' author='shukob' open_date='2020-11-18T04:51:46Z' closed_time='2020-11-26T07:15:08Z'>
	<summary>Multi-threaded QNodeCollection does not work</summary>
	<description>
&lt;denchmark-h:h4&gt;Issue description&lt;/denchmark-h&gt;

Thread-parallel execution of QNodeCollection fails by the following error in tape mode.
&lt;denchmark-code&gt;  File "/home/shukob/anaconda3/envs/***/lib/python3.7/site-packages/PennyLane-0.13.0.dev0-py3.7.egg/pennylane/collections/qnode_collection.py", line 271, in __call__
    results = self.evaluate(args, kwargs)
  File "/home/shukob/anaconda3/envs/***/lib/python3.7/site-packages/PennyLane-0.13.0.dev0-py3.7.egg/pennylane/collections/qnode_collection.py", line 229, in evaluate
    return dask.compute(*results, scheduler=_scheduler)
  File "/home/shukob/anaconda3/envs/***/lib/python3.7/site-packages/dask/base.py", line 452, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/home/shukob/anaconda3/envs/***/lib/python3.7/site-packages/dask/threaded.py", line 84, in get
    **kwargs
  File "/home/shukob/anaconda3/envs/***/lib/python3.7/site-packages/dask/local.py", line 486, in get_async
    raise_exception(exc, tb)
  File "/home/shukob/anaconda3/envs/***/lib/python3.7/site-packages/dask/local.py", line 316, in reraise
    raise exc
  File "/home/shukob/anaconda3/envs/***/lib/python3.7/site-packages/dask/local.py", line 222, in execute_task
    result = _execute_task(task, data)
  File "/home/shukob/anaconda3/envs/***/lib/python3.7/site-packages/dask/core.py", line 121, in _execute_task
    return func(*(_execute_task(a, cache) for a in args))
  File "/home/shukob/anaconda3/envs/***/lib/python3.7/site-packages/dask/utils.py", line 29, in apply
    return func(*args, **kwargs)
  File "/home/shukob/anaconda3/envs/***/lib/python3.7/site-packages/PennyLane-0.13.0.dev0-py3.7.egg/pennylane/tape/qnode.py", line 433, in __call__
    self.construct(args, kwargs)
  File "/home/shukob/anaconda3/envs/***/lib/python3.7/site-packages/PennyLane-0.13.0.dev0-py3.7.egg/pennylane/tape/qnode.py", line 395, in construct
    "All measurements must be returned in the order they are measured."
pennylane.qnodes.base.QuantumFunctionError: All measurements must be returned in the order they are measured.
&lt;/denchmark-code&gt;

Reproduction code is:
&lt;denchmark-code&gt;import pennylane as qml


import numpy as np

n_qubits = 4
n_batches = 5
dev = qml.device("default.qubit", wires=n_qubits)

qml.enable_tape()

@qml.qnode(dev)
def circuit(inputs, weights):
    qml.templates.AngleEmbedding(inputs, wires=range(n_qubits))
    qml.templates.BasicEntanglerLayers(weights, wires=range(n_qubits))
    return [qml.expval(qml.PauliZ(wires=i)) for i in range(n_qubits)]


n_layers = 1
weight_shapes = {"weights": (n_layers, n_qubits)}

qnode = QNodeCollection([circuit for _ in range(n_batches)])
x = np.random.rand((n_qubits)).astype(np.float64)#.to(torch.device('cuda'))
p = np.random.rand(*weight_shapes['weights']).astype(np.float64)#.to(torch.device('cuda'))
res = qnode(x, p, parallel=True)

&lt;/denchmark-code&gt;

The reason for this seems to be the empty wires in the qtape in QNode. I could not yet find the actual reason for this .


Expected behavior: (What you expect to happen)
Thread-parallel execution is possible in tape mode.


Actual behavior: (What actually happens)
Thread-parallel execution fails in tape mode.


Reproduces how often: (What percentage of the time does it reproduce?)
~50%


System information: (post the output of import pennylane as qml; qml.about())


&lt;denchmark-code&gt;Name: PennyLane
Version: 0.13.0.dev0
Summary: PennyLane is a Python quantum machine learning library by Xanadu Inc.
Home-page: https://github.com/XanaduAI/pennylane
Author: None
Author-email: None
License: Apache License 2.0
Location: /home/shukob/anaconda3/envs/***/lib/python3.7/site-packages/PennyLane-0.13.0.dev0-py3.7.egg
Requires: numpy, scipy, networkx, autograd, toml, appdirs, semantic-version
Required-by: PennyLane-SF, pennylane-qulacs, PennyLane-qiskit
Platform info:           Linux-5.4.0-53-generic-x86_64-with-debian-bullseye-sid
Python version:          3.7.9
Numpy version:           1.19.2
Scipy version:           1.5.2
Installed devices:
- strawberryfields.fock (PennyLane-SF-0.12.0)
- strawberryfields.gaussian (PennyLane-SF-0.12.0)
- strawberryfields.gbs (PennyLane-SF-0.12.0)
- strawberryfields.remote (PennyLane-SF-0.12.0)
- strawberryfields.tf (PennyLane-SF-0.12.0)
- qulacs.simulator (pennylane-qulacs-0.12.0)
- qiskit.aer (PennyLane-qiskit-0.12.0)
- qiskit.basicaer (PennyLane-qiskit-0.12.0)
- qiskit.ibmq (PennyLane-qiskit-0.12.0)
- default.gaussian (PennyLane-0.13.0.dev0)
- default.mixed (PennyLane-0.13.0.dev0)
- default.qubit (PennyLane-0.13.0.dev0)
- default.qubit.autograd (PennyLane-0.13.0.dev0)
- default.qubit.tf (PennyLane-0.13.0.dev0)
- default.tensor (PennyLane-0.13.0.dev0)
- default.tensor.tf (PennyLane-0.13.0.dev0)

&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='shukob' date='2020-11-18T05:54:05Z'>
		I also find non tape-mode parallel does not work. Reproduction code is
&lt;denchmark-code&gt;import pennylane as qml


import numpy as np
from pennylane import QNodeCollection

n_qubits = 4
n_batches = 5
dev = qml.device("default.qubit", wires=n_qubits)

# qml.enable_tape()

@qml.qnode(dev)
def circuit(inputs, weights):
    qml.templates.AngleEmbedding(inputs, wires=range(n_qubits))
    qml.templates.BasicEntanglerLayers(weights, wires=range(n_qubits))
    return [qml.expval(qml.PauliZ(wires=i)) for i in range(n_qubits)]


n_layers = 1
weight_shapes = {"weights": (n_layers, n_qubits)}

qnode = QNodeCollection([circuit, circuit, circuit, circuit])
x = np.random.rand(n_qubits).astype(np.float64)#.to(torch.device('cuda'))
p = np.random.rand(*weight_shapes['weights']).astype(np.float64)#.to(torch.device('cuda'))
res = qnode(x, p, parallel=True)
&lt;/denchmark-code&gt;

Error trace is
&lt;denchmark-code&gt;  File "/home/shukob/Research/***/***/scripts/debug_parallel.py", line 27, in &lt;module&gt;
    res = qnode(x, p, parallel=True)
  File "/home/shukob/anaconda3/envs/***/lib/python3.7/site-packages/PennyLane-0.13.0.dev0-py3.7.egg/pennylane/collections/qnode_collection.py", line 271, in __call__
    results = self.evaluate(args, kwargs)
  File "/home/shukob/anaconda3/envs/***/lib/python3.7/site-packages/PennyLane-0.13.0.dev0-py3.7.egg/pennylane/collections/qnode_collection.py", line 229, in evaluate
    return dask.compute(*results, scheduler=_scheduler)
  File "/home/shukob/anaconda3/envs/***/lib/python3.7/site-packages/dask/base.py", line 452, in compute
    results = schedule(dsk, keys, **kwargs)
  File "/home/shukob/anaconda3/envs/***/lib/python3.7/site-packages/dask/threaded.py", line 84, in get
    **kwargs
  File "/home/shukob/anaconda3/envs/***/lib/python3.7/site-packages/dask/local.py", line 486, in get_async
    raise_exception(exc, tb)
  File "/home/shukob/anaconda3/envs/***/lib/python3.7/site-packages/dask/local.py", line 316, in reraise
    raise exc
  File "/home/shukob/anaconda3/envs/***/lib/python3.7/site-packages/dask/local.py", line 222, in execute_task
    result = _execute_task(task, data)
  File "/home/shukob/anaconda3/envs/***/lib/python3.7/site-packages/dask/core.py", line 121, in _execute_task
    return func(*(_execute_task(a, cache) for a in args))
  File "/home/shukob/anaconda3/envs/***/lib/python3.7/site-packages/PennyLane-0.13.0.dev0-py3.7.egg/pennylane/interfaces/autograd.py", line 69, in __call__
    return self.evaluate(args, kwargs)
  File "/home/shukob/anaconda3/envs/***/lib/python3.7/site-packages/autograd/tracer.py", line 48, in f_wrapped
    return f_raw(*args, **kwargs)
  File "/home/shukob/anaconda3/envs/***/lib/python3.7/site-packages/PennyLane-0.13.0.dev0-py3.7.egg/pennylane/qnodes/base.py", line 840, in evaluate
    self._construct(args, kwargs)
  File "/home/shukob/anaconda3/envs/***/lib/python3.7/site-packages/PennyLane-0.13.0.dev0-py3.7.egg/pennylane/qnodes/jacobian.py", line 90, in _construct
    self.par_to_grad_method = {k: self._best_method(k) for k in self.variable_deps}
  File "/home/shukob/anaconda3/envs/***/lib/python3.7/site-packages/PennyLane-0.13.0.dev0-py3.7.egg/pennylane/qnodes/jacobian.py", line 90, in &lt;dictcomp&gt;
    self.par_to_grad_method = {k: self._best_method(k) for k in self.variable_deps}
  File "/home/shukob/anaconda3/envs/***/lib/python3.7/site-packages/PennyLane-0.13.0.dev0-py3.7.egg/pennylane/qnodes/qubit.py", line 76, in _best_method
    S = self.circuit.nodes_between(op, ob)
  File "/home/shukob/anaconda3/envs/***/lib/python3.7/site-packages/PennyLane-0.13.0.dev0-py3.7.egg/pennylane/circuit_graph.py", line 463, in nodes_between
    A = self.descendants([a])
  File "/home/shukob/anaconda3/envs/***/lib/python3.7/site-packages/PennyLane-0.13.0.dev0-py3.7.egg/pennylane/circuit_graph.py", line 408, in descendants
    return set().union(*(nx.dag.descendants(self._graph, o) for o in ops)) - set(ops)
  File "/home/shukob/anaconda3/envs/***/lib/python3.7/site-packages/PennyLane-0.13.0.dev0-py3.7.egg/pennylane/circuit_graph.py", line 408, in &lt;genexpr&gt;
    return set().union(*(nx.dag.descendants(self._graph, o) for o in ops)) - set(ops)
  File "/home/shukob/anaconda3/envs/***/lib/python3.7/site-packages/networkx/algorithms/dag.py", line 59, in descendants
    raise nx.NetworkXError(f"The node {source} is not in the graph.")
networkx.exception.NetworkXError: The node RX(0.942264978721866, wires=[0]) is not in the graph.

&lt;/denchmark-code&gt;

		</comment>
		<comment id='2' author='shukob' date='2020-11-18T06:13:07Z'>
		Thanks for catching this &lt;denchmark-link:https://github.com/shukob&gt;@shukob&lt;/denchmark-link&gt;
!
I haven't encountered this before, so I'm unsure of the cause - my best guess could be a race condition during the queuing of the operations into the circuit?
		</comment>
		<comment id='3' author='shukob' date='2020-11-18T06:34:31Z'>
		&lt;denchmark-link:https://github.com/josh146&gt;@josh146&lt;/denchmark-link&gt;
 Thank you!
It seems it does not always happen. I will check into the queueing operation.
		</comment>
		<comment id='4' author='shukob' date='2020-11-18T08:57:26Z'>
		&lt;denchmark-link:https://github.com/josh146&gt;@josh146&lt;/denchmark-link&gt;
  It seems to be a problem of instantiation of the s in my code. If I explicitly instantiate them by constructors like below,
&lt;denchmark-code&gt;qnode = QNodeCollection([QNode(circuit, dev) for _ in range(n_batches)])
&lt;/denchmark-code&gt;

the error disappears. I misunderstood the qnode annotation to instantiate the QNode class, but it does not, so the same QNode instances are used in QNodeCollection. This was the problem. Sorry about this.
		</comment>
		<comment id='5' author='shukob' date='2020-11-18T10:46:40Z'>
		I am confused, the above seems not to be the case. I need thread locking in __enter__ / __exit__  of QuantumTape to make it work in tape mode.
For non-tape mode, explicit instantiation above seems to be working.
I will check more because it does not always happen.
		</comment>
		<comment id='6' author='shukob' date='2020-11-18T12:15:16Z'>
		Thanks for delving into this in more detail &lt;denchmark-link:https://github.com/shukob&gt;@shukob&lt;/denchmark-link&gt;
, this is really good to know. Can I ask how you are doing the thread locking in  and ?
		</comment>
		<comment id='7' author='shukob' date='2020-11-18T12:27:20Z'>
		Thanks, &lt;denchmark-link:https://github.com/josh146&gt;@josh146&lt;/denchmark-link&gt;
! I have modified  like
&lt;denchmark-code&gt;    from threading import Lock
    _lock = Lock()

    def __enter__(self):
        QuantumTape._lock.acquire()
        if not QueuingContext.recording():
            # if the tape is the first active queuing context
            # monkeypatch the operations to support the new queuing context
            with contextlib.ExitStack() as stack:
                for mock in mock_operations():
                    stack.enter_context(mock)
                self._stack = stack.pop_all()

        QueuingContext.append(self)
        return super().__enter__()

    def __exit__(self, exception_type, exception_value, traceback):
        super().__exit__(exception_type, exception_value, traceback)

        if not QueuingContext.recording():
            # remove the monkeypatching
            self._stack.__exit__(exception_type, exception_value, traceback)

        self._process_queue()
        QuantumTape._lock.release()
&lt;/denchmark-code&gt;

		</comment>
		<comment id='8' author='shukob' date='2020-11-18T20:03:49Z'>
		Thanks &lt;denchmark-link:https://github.com/shukob&gt;@shukob&lt;/denchmark-link&gt;
! We appreciate your work uncovering (and potentially fixing) this issue
		</comment>
		<comment id='9' author='shukob' date='2020-11-20T17:16:37Z'>
		&lt;denchmark-link:https://github.com/shukob&gt;@shukob&lt;/denchmark-link&gt;
, would you like to make a small PR to add the thread locking?
		</comment>
		<comment id='10' author='shukob' date='2020-11-20T17:26:03Z'>
		&lt;denchmark-link:https://github.com/co9olguy&gt;@co9olguy&lt;/denchmark-link&gt;
 Thanks!
&lt;denchmark-link:https://github.com/josh146&gt;@josh146&lt;/denchmark-link&gt;
 Yes! Willingly.
		</comment>
	</comments>
</bug>