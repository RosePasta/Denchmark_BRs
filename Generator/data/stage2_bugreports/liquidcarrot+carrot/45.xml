<bug id='45' author='dan-ryan' open_date='2019-04-30T09:07:09Z' closed_time='2019-05-03T19:18:37Z'>
	<summary>Moved: ONE_TO_ONE connections between groups stored as self connections</summary>
	<description>
This bug has been moved from Neataptic.
&lt;denchmark-link:https://github.com/wagenaartje/neataptic/issues/114&gt;wagenaartje/neataptic#114&lt;/denchmark-link&gt;


Thanks for such a great library and the awesome documentation! I've been going through your library with a fine toothed comb trying to learn it. Thus far in my studies of the implementation, I have only found one thing that I can't follow.
My question revolves around connecting groups to other groups using the ONE_TO_ONE connection method. Here's the code excerpt:
	} else if (method === methods.connection.ONE_TO_ONE) {
		if (this.nodes.length !== target.nodes.length) {
			throw new Error('From and To group must be the same size!');
		}

		for (i = 0; i &lt; this.nodes.length; i++) {
			let connection = this.nodes[i].connect(target.nodes[i], weight);
HERE &gt;&gt;&gt;     		this.connections.self.push(connection[0]);
			connections.push(connection[0]);
		}
	}
I see each node in the current group being connected to the corresponding node in the other group. However, why are the new connections added to the self connections list and not out?

Owner's reply:

I wrote this code some time ago, but it looks like this might just be wrongly coded. I see that some lines before the code contains:
        if (this !== target) {
          if (config.warnings) console.warn('No group connection specified, using ALL_TO_ALL');
          method = methods.connection.ALL_TO_ALL;
        } else {
          if (config.warnings) console.warn('No group connection specified, using ONE_TO_ONE');
          method = methods.connection.ONE_TO_ONE;
        }
So if this === target, a ONE_TO_ONE connection is assumed when none is given. For some reason I must have thought that a ONE_TO_ONE connection is always a self-connection. The correct code of course should be :
      } else if (method === methods.connection.ONE_TO_ONE) {
        if (this.nodes.length !== target.nodes.length) {
          throw new Error('From and To group must be the same size!');
        }

        for (i = 0; i &lt; this.nodes.length; i++) {
          let connection = this.nodes[i].connect(target.nodes[i], weight);
          this.connections.out.push(connection[0]);
          target.connections.in.push(connection[0]);
          connections.push(connection[0]);
        }
      }
The faulty code should not cause a lot of problems except for calling Group.prototype.gate with methods.gating.SELF.
I think the Group.prototype.connect function is poorly written anyways as I never see it checking if this === target when performing the actual connections (so instead of connections being added to .self like they should, they are added to .in AND .out).
Thanks, and it seems like your comb is very fine indeed!

	</description>
	<comments>
		<comment id='1' author='dan-ryan' date='2019-05-03T19:18:37Z'>
		Fixed with &lt;denchmark-link:https://github.com/liquidcarrot/carrot/commit/400e101be141e650484544bf5770566e660624e8&gt;400e101&lt;/denchmark-link&gt;

		</comment>
		<comment id='2' author='dan-ryan' date='2019-05-04T02:12:54Z'>
		@christianechevarria I did a code review and added comments.
		</comment>
	</comments>
</bug>