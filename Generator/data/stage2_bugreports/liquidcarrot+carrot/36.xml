<bug id='36' author='dan-ryan' open_date='2019-04-28T13:07:41Z' closed_time='2019-05-01T22:49:09Z'>
	<summary>Moved: New nodes should not get random activation if not allowed</summary>
	<description>
This bug has been moved from Neataptic.
&lt;denchmark-link:https://github.com/wagenaartje/neataptic/issues/53&gt;wagenaartje/neataptic#53&lt;/denchmark-link&gt;


If a network gets mutated from a Neat instance with mutation.ADD_NODE, the new node should only get a random activation if mutation.MOD_ACTIVATION is present in Neat.mutation.
// Random squash function
node.mutate(mutation.MOD_ACTIVATION);
Line 289

	</description>
	<comments>
		<comment id='1' author='dan-ryan' date='2019-05-01T21:23:00Z'>
		Removed in  &lt;denchmark-link:https://github.com/liquidcarrot/carrot/commit/6f2383b4f7cd6545c014768e5814f4354bd5efe4&gt;6f2383b&lt;/denchmark-link&gt;

Briefly added a check for mutation.MOD_ACTIVATION before mutating the new node but it didn't seem worth the performance cost
		</comment>
		<comment id='2' author='dan-ryan' date='2019-05-01T21:45:28Z'>
		&lt;denchmark-link:https://github.com/dan-ryan&gt;@dan-ryan&lt;/denchmark-link&gt;
 After some more testing, confirmed that this makes converging on a solution more difficult (which makes sense)
I'm thinking about reintroducing this but adding a flag to overwrite the default behavior.
Any thoughts?
		</comment>
		<comment id='3' author='dan-ryan' date='2019-05-01T21:55:38Z'>
		"but it didn't seem worth the performance cost"
One check hurt the performance that much?
Otherwise could just make it clear in the docs that there is this side effect.
		</comment>
		<comment id='4' author='dan-ryan' date='2019-05-01T22:49:09Z'>
		Restored it in &lt;denchmark-link:https://github.com/liquidcarrot/carrot/commit/f27e594fbaec0783d34035ab68fbbd5b233b1217&gt;f27e594&lt;/denchmark-link&gt;

Just ended up adding a randomActivation property to the ADD_NODE object and a check to see if it's set to true (it is by default, but can be overwritten)
Closing for now
		</comment>
	</comments>
</bug>