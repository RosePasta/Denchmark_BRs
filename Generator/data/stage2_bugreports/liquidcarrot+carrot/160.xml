<bug id='160' author='tracycollins' open_date='2019-09-18T17:00:55Z' closed_time='2019-09-27T04:16:53Z'>
	<summary>Network.evolve() crash at start: "TypeError: Cannot read property 'join' of undefined"</summary>
	<description>
&lt;denchmark-h:h3&gt;Description&lt;/denchmark-h&gt;

This may be pilot error, but I can't figure out what's going wrong.
Network.evolve() (v0.3.12+) crashes immediately with the error:

Trace: TypeError: Cannot read property 'join' of undefined
at new c (/node_modules/@liquid-carrot/carrot/dist/carrot.commonjs2.min.js:36:128039)
at p.evolve (/node_modules/@liquid-carrot/carrot/dist/carrot.commonjs2.min.js:36:92265)

&lt;denchmark-h:h3&gt;Files&lt;/denchmark-h&gt;

carrot.commonjs2.min.js (carrot.commonjs2.js)
&lt;denchmark-h:h3&gt;To Reproduce&lt;/denchmark-h&gt;

The confusing thing is that Network.evolve() will run the XOR example, even using the same options for when it fails.  I include the XOR test in the same code as the failing evolve.
When it fails, it's evolving a network of &gt;1500 inputs and 3 outputs, as opposed to the XOR's 2-in, 1-out.
An example of the options passed to evolve() is below. Note that the options are generated randomly, but still fails consistently:

EVOLVE OPTIONS
├─ activation: IDENTITY
├─ amount: 1
├─ clear: true
├─ cost: BINARY
├─ efficient_mutation: true
├─ elitism: 2
├─ equal: true
├─ error: 0.03
├─ growth: 0.00009019971047429265
├─ iterations: 10
├─ log: 1
├─ mutation: FFW
├─ mutation_amount: 1
├─ mutation_rate: 0.5762620321953104
├─ popsize: 50
├─ population_size: 50
├─ provenance: 0
├─ schedule
│  └─ iterations: 1
└─ threads: 1

Also note that activation, cost, mutation and schedule values are converted to the proper functions/array before evolve().
I've checked and double-checked the input data set for proper formatting and data types.
I don't have this problem using 0.3.11.
I think the problem is in the TestWorker function:
function TestWorker (serialized_dataset, cost_function) {
  // find out if in inspect mode. if so then run children in inspect mode as well
  const argv = process.execArgv.join();
  const is_debug = argv.includes('inspect') || argv.includes('debug');
  if (is_debug) {
    this.worker = cp.fork(path.join(__dirname, '/worker'), [], {
      execArgv: ['--inspect=' + (fork_port++)],
    });
  } else {
    this.worker = cp.fork(path.join(__dirname, '/worker'));
  }

  const cost_is_standard = cost_function.name in standard_cost_functions;
  
  // send the initialization (ie 'constructor') info
  this.worker.send({
      serialized_dataset: serialized_dataset,
      cost_function: cost_is_standard ? cost_function.name : cost_function.toString(),
      cost_is_standard,
    });
}
specifically:

const argv = process.execArgv.join();

where process.execArgv is undefined.
I notice that lots of restructuring happened from 0.3.11 to 0.3.12. Is there something that I need to do to make sure the module is (re)built?
Any help appreciated! Thanks
	</description>
	<comments>
		<comment id='1' author='tracycollins' date='2019-09-18T17:32:57Z'>
		Hey &lt;denchmark-link:https://github.com/tracycollins&gt;@tracycollins&lt;/denchmark-link&gt;
, any chance we can see a sample of the code that's failing?

The confusing thing is that Network.evolve() will run the XOR example, even using the same options for when it fails. I include the XOR test in the same code as the failing evolve.

I think this is very interesting, to make sure: the example is working but the evolve is failing with the same options while trying to do something in the same scope?
		</comment>
		<comment id='2' author='tracycollins' date='2019-09-18T17:56:01Z'>
		
I notice that lots of restructuring happened from 0.3.11 to 0.3.12. Is there something that I need to do to make sure the module is (re)built?

Update: I think this could be related to a missing workers file that was removed in the transition from 0.3.11 to 0.3.12
&lt;denchmark-code&gt;    new CopyWebpackPlugin([
      { from: 'src/multithreading/workers/node/worker.js', to: 'dist' }
    ])
&lt;/denchmark-code&gt;

Looks like it was removed in &lt;denchmark-link:https://github.com/liquidcarrot/carrot/commit/1ab8a5053aaf28e852f3b4f92d39f643d681e9f3&gt;1ab8a50&lt;/denchmark-link&gt;

Specific file changes: &lt;denchmark-link:https://github.com/liquidcarrot/carrot/commit/1ab8a5053aaf28e852f3b4f92d39f643d681e9f3#diff-11e9f7f953edc64ba14b0cc350ae7b9d&gt;1ab8a50#diff-11e9f7f953edc64ba14b0cc350ae7b9d&lt;/denchmark-link&gt;

&lt;denchmark-link:https://github.com/tracycollins&gt;@tracycollins&lt;/denchmark-link&gt;
 I'm thinking this is where the issue is coming from, I'm going to reintroduce it and version to see if it resolves the bug
		</comment>
		<comment id='3' author='tracycollins' date='2019-09-18T18:22:24Z'>
		After doing some more digging this is probably why the bug is happening:



carrot/src/multithreading/workers/node/testworker.js


        Lines 35 to 37
      in
      ad3c6c0






 } else { 



 this.worker = cp.fork(path.join(__dirname, '/worker')); 



 } 





We're assuming the worker will be in a separate file inside the same directory
		</comment>
		<comment id='4' author='tracycollins' date='2019-09-18T18:26:33Z'>
		Just published v0.3.14
		</comment>
		<comment id='5' author='tracycollins' date='2019-09-18T22:57:20Z'>
		I'll try the update. If it still fails, I'll post some code.
Thanks for the quick reply!
		</comment>
		<comment id='6' author='tracycollins' date='2019-09-18T22:58:48Z'>
		Awesome, let me know!
		</comment>
		<comment id='7' author='tracycollins' date='2019-09-19T02:57:18Z'>
		Unfortunately, 0.3.14 fails the same way.
I'll try to put together a stripped-down version of the code that shows the error in the next day or so.
		</comment>
		<comment id='8' author='tracycollins' date='2019-09-19T05:47:13Z'>
		Scratch my last comment...
It seems to be working. Don't think the module was updated in my previous testing.  Closing this now.
		</comment>
		<comment id='9' author='tracycollins' date='2019-09-27T02:59:11Z'>
		Bug turned out to still be present as discussed in &lt;denchmark-link:https://github.com/liquidcarrot/carrot/issues/161&gt;#161&lt;/denchmark-link&gt;

Reopening temporarily while we patch
		</comment>
		<comment id='10' author='tracycollins' date='2019-09-27T04:16:52Z'>
		Confirmed working as of v0.3.16 using this test:
&lt;denchmark-code&gt;const neataptic = require("neataptic");
const carrot = require("@liquid-carrot/carrot");

async function main(){

  const numInputs = 2;
  const numOutputs = 1;

  const carrot_network = new carrot.Network(numInputs, numOutputs);
  const npt_network = new neataptic.Network(numInputs, numOutputs);

  const trainingSet = [];

  for(let j=0; j&lt;5; j++){

    const datum = {};
    datum.input = [];
    datum.output = [];

    for(let i=0; i&lt;numInputs; i++){
      const inputValue = Math.round(Math.random());
      datum.input.push(inputValue);
    }

    for(let i=0; i&lt;numOutputs; i++){
      const outputValue = Math.round(Math.random());
      datum.output.push(outputValue);
    }

    trainingSet.push(datum);
  }

  console.log("trainingSet\n" , trainingSet);

  const carrot_options = {
    mutation: carrot.methods.mutation.FFW,
    error: 0.05,
    equal: true,
    elitism: 5,
    mutation_rate: 0.5,
    iterations: 10,
    log: 1,
    threads: 1,
  };

  const npt_options = {
    mutation: neataptic.methods.mutation.FFW,
    error: 0.05,
    equal: true,
    elitism: 5,
    mutation_rate: 0.5,
    iterations: 10,
    log: 1,
    threads: 1,
  };

  console.log("neataptic options\n" , npt_options);

  try{
    const npt_results = await npt_network.evolve(trainingSet, npt_options)
    console.log("neataptic results\n", npt_results);
    console.log("network.activate(trainingSet[0]: " + npt_network.activate(trainingSet[0].input) + ")");
  } catch(err){
    console.trace(err);
    throw err;
  }

  console.log("carrot options\n" , carrot_options);

  try{
    const carrot_results = await carrot_network.evolve(trainingSet, carrot_options)
    console.log("carrot results\n", carrot_results);
    console.log("network.activate(trainingSet[0]: " + carrot_network.activate(trainingSet[0].input) + ")");
    return;
  } catch(err){
    console.trace(err);
    throw err;
  }

}

main();
&lt;/denchmark-code&gt;

Noting here that  is quite a bit slower than  right now (converges in less generations though). The main culprit is likely Lodash's  method inside of  which used heavily in  -- working on resolving this by solving &lt;denchmark-link:https://github.com/liquidcarrot/carrot/issues/152&gt;#152&lt;/denchmark-link&gt;

The approach in &lt;denchmark-link:https://github.com/liquidcarrot/carrot/issues/152#issuecomment-527934142&gt;#152 (comment)&lt;/denchmark-link&gt;
 is the likely go-to
		</comment>
	</comments>
</bug>