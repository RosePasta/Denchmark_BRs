<bug id='1623' author='mfruhner' open_date='2020-12-07T10:20:44Z' closed_time='2020-12-09T02:44:14Z'>
	<summary>train_batch.jpg labels missing</summary>
	<description>
&lt;denchmark-h:h2&gt;üêõ Bug&lt;/denchmark-h&gt;

Hello, on my custom dataset I noticed some missing labels in random images in train_batch*.jpg images. I then tried it out with coco128 and i noticed the same behaviour. Most labels are correct, but some are just missing. It always appears to be a complete mosaic (or rect for --rect) without labels inside a batch. See the following images with the cake and the dog/elephant:
&lt;denchmark-link:https://user-images.githubusercontent.com/25232372/101338771-babdcb00-387d-11eb-9c1e-2d22780e3749.png&gt;&lt;/denchmark-link&gt;

&lt;denchmark-link:https://user-images.githubusercontent.com/25232372/101338806-c4dfc980-387d-11eb-89dd-2c7c9c6ff328.png&gt;&lt;/denchmark-link&gt;

&lt;denchmark-h:h2&gt;To Reproduce (REQUIRED)&lt;/denchmark-h&gt;

Download latest docker image.
Run:
python train.py --img 640 --batch 16 --epochs 1 --data coco128.yaml --weights yolov5s.pt --nosave --cache
Output:
Some images are missing their labels.
The questions is also, if it is just a rendering bug, or if the missing labels are contributing to the training processing, resulting in inferior results.
&lt;denchmark-h:h2&gt;Expected behavior&lt;/denchmark-h&gt;

All images have their correct bounding boxes
&lt;denchmark-h:h2&gt;Environment&lt;/denchmark-h&gt;

If applicable, add screenshots to help explain your problem.

OS: Ubuntu, Docker Image

	</description>
	<comments>
		<comment id='1' author='mfruhner' date='2020-12-07T10:21:28Z'>
		Hello &lt;denchmark-link:https://github.com/mfruhner&gt;@mfruhner&lt;/denchmark-link&gt;
, thank you for your interest in  YOLOv5! Please visit our  &lt;denchmark-link:https://github.com/ultralytics/yolov5/wiki#tutorials&gt;Tutorials&lt;/denchmark-link&gt;
 to get started, where you can find quickstart guides for simple tasks like &lt;denchmark-link:https://github.com/ultralytics/yolov5/wiki/Train-Custom-Data&gt;Custom Data Training&lt;/denchmark-link&gt;
 all the way to advanced concepts like &lt;denchmark-link:https://github.com/ultralytics/yolov5/issues/607&gt;Hyperparameter Evolution&lt;/denchmark-link&gt;
.
If this is a üêõ Bug Report, please provide screenshots and minimum viable code to reproduce your issue, otherwise we can not help you.
If this is a custom training  Question, please provide as much information as possible, including dataset images, training logs, screenshots, and a public link to online &lt;denchmark-link:https://github.com/ultralytics/yolov5/wiki/Train-Custom-Data#visualize&gt;W&amp;B logging&lt;/denchmark-link&gt;
 if available.
For business inquiries or professional support requests please visit &lt;denchmark-link:https://www.ultralytics.com&gt;https://www.ultralytics.com&lt;/denchmark-link&gt;
 or email Glenn Jocher at &lt;denchmark-link:mailto:glenn.jocher@ultralytics.com&gt;glenn.jocher@ultralytics.com&lt;/denchmark-link&gt;
.
&lt;denchmark-h:h2&gt;Requirements&lt;/denchmark-h&gt;

Python 3.8 or later with all &lt;denchmark-link:https://github.com/ultralytics/yolov5/blob/master/requirements.txt&gt;requirements.txt&lt;/denchmark-link&gt;
 dependencies installed, including . To install run:
$ pip install -r requirements.txt
&lt;denchmark-h:h2&gt;Environments&lt;/denchmark-h&gt;

YOLOv5 may be run in any of the following up-to-date verified environments (with all dependencies including &lt;denchmark-link:https://developer.nvidia.com/cuda&gt;CUDA&lt;/denchmark-link&gt;
/&lt;denchmark-link:https://developer.nvidia.com/cudnn&gt;CUDNN&lt;/denchmark-link&gt;
, &lt;denchmark-link:https://www.python.org/&gt;Python&lt;/denchmark-link&gt;
 and &lt;denchmark-link:https://pytorch.org/&gt;PyTorch&lt;/denchmark-link&gt;
 preinstalled):

Google Colab Notebook with free GPU: 
Kaggle Notebook with free GPU: https://www.kaggle.com/ultralytics/yolov5
Google Cloud Deep Learning VM. See GCP Quickstart Guide
Docker Image https://hub.docker.com/r/ultralytics/yolov5. See Docker Quickstart Guide 

&lt;denchmark-h:h2&gt;Status&lt;/denchmark-h&gt;

&lt;denchmark-link:https://github.com/ultralytics/yolov5/workflows/CI%20CPU%20testing/badge.svg&gt;&lt;/denchmark-link&gt;

If this badge is green, all &lt;denchmark-link:https://github.com/ultralytics/yolov5/actions&gt;YOLOv5 GitHub Actions&lt;/denchmark-link&gt;
 Continuous Integration (CI) tests are currently passing. CI tests verify correct operation of YOLOv5 training (&lt;denchmark-link:https://github.com/ultralytics/yolov5/blob/master/train.py&gt;train.py&lt;/denchmark-link&gt;
), testing (&lt;denchmark-link:https://github.com/ultralytics/yolov5/blob/master/test.py&gt;test.py&lt;/denchmark-link&gt;
), inference (&lt;denchmark-link:https://github.com/ultralytics/yolov5/blob/master/detect.py&gt;detect.py&lt;/denchmark-link&gt;
) and export (&lt;denchmark-link:https://github.com/ultralytics/yolov5/blob/master/models/export.py&gt;export.py&lt;/denchmark-link&gt;
) on MacOS, Windows, and Ubuntu every 24 hours and on every commit.
		</comment>
		<comment id='2' author='mfruhner' date='2020-12-08T15:01:36Z'>
		&lt;denchmark-link:https://github.com/mfruhner&gt;@mfruhner&lt;/denchmark-link&gt;
 thanks for the bug report! I'd noticed the same behavior recently. The mosaic plotting function has undergone several recent updates, so it may be a bug there, perhaps related to de-normalization of the labels. I will add a TODO here for us to try to reproduce and find a fix.
In any case, this is almost certainly a plotting-related issue, as it only appeared within the last several weeks, and the COCO128 labels have never changed.
		</comment>
		<comment id='3' author='mfruhner' date='2020-12-08T15:01:56Z'>
		TODO: reproduce and fix mosaic plotting bug.
		</comment>
		<comment id='4' author='mfruhner' date='2020-12-09T02:25:12Z'>
		&lt;denchmark-link:https://github.com/mfruhner&gt;@mfruhner&lt;/denchmark-link&gt;
 I can reproduce this issue in a Colab notebook by running your command after running the setup cell. I can see in train_batch2.jpg specifically an image for which many objects have labels, like train, refrigerator, that are not being plotted properly. I will try to figure out why this is happening.
&lt;denchmark-link:https://user-images.githubusercontent.com/26833433/101565743-8a138980-3982-11eb-9186-713cc47d4d96.jpg&gt;&lt;/denchmark-link&gt;

		</comment>
		<comment id='5' author='mfruhner' date='2020-12-09T02:34:43Z'>
		Ok I think I see the problem. A check is made to determine if the labels are in normalized coordinates before scaling them up to pixels. The check is failing sometimes due to numerical precision issues it seems:
True 1.0
True 1.0
True 1.0
True 1.0
True 1.0
True 1.0
True 1.0
True 1.0
True 1.0
True 1.0
True 1.0
True 1.0
False 1.0000001
True 1.0
True 1.0
I think the solution is to introduce an eps term to account for precision issues, perhaps with a default value of eps=0.01.
		</comment>
		<comment id='6' author='mfruhner' date='2020-12-09T02:35:38Z'>
		Also I should add, that comically the result is that all the boxes are indeed plotted all of the time, but the 'missing' boxes are simply plotted entirely inside the 0,0 pixel.
		</comment>
		<comment id='7' author='mfruhner' date='2020-12-09T02:43:46Z'>
		Problem appears solved now in PR branch:
&lt;denchmark-link:https://user-images.githubusercontent.com/26833433/101567183-36566f80-3985-11eb-9740-52397c0f3524.jpg&gt;&lt;/denchmark-link&gt;

		</comment>
		<comment id='8' author='mfruhner' date='2020-12-09T02:44:59Z'>
		&lt;denchmark-link:https://github.com/mfruhner&gt;@mfruhner&lt;/denchmark-link&gt;
 problem should be resolved now after PR &lt;denchmark-link:https://github.com/ultralytics/yolov5/pull/1647&gt;#1647&lt;/denchmark-link&gt;
. Thank you for your contributions, and please let us know if you spot any other problems or areas for improvement!
		</comment>
	</comments>
</bug>