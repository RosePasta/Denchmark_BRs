<bug id='1552' author='NanoCode012' open_date='2020-11-29T16:02:00Z' closed_time='2020-11-29T16:47:52Z'>
	<summary>RuntimeError: a view of a leaf Variable that requires grad is being used in an in-place operation when running on Docker</summary>
	<description>
&lt;denchmark-h:h2&gt;üêõ Bug&lt;/denchmark-h&gt;

I got the below error message when I try to test out the latest commit &lt;denchmark-link:https://github.com/ultralytics/yolov5/commit/cff9263490fbf4b80dcc2d87914e087e6c07b6a0&gt;cff9263&lt;/denchmark-link&gt;
 on a new docker image. I haven't pulled recently, so I'm not sure which commit made this error.
RuntimeError: a view of a leaf Variable that requires grad is being used in an in-place operation.
&lt;denchmark-h:h2&gt;To Reproduce (REQUIRED)&lt;/denchmark-h&gt;


Pull docker and run it
Run python train.py --img 640 --batch 16 --epochs 3 --data coco128.yaml --weights yolov5s.pt --nosave --cache

Output:
&lt;denchmark-code&gt; 22          [-1, 10]  1         0  models.common.Concat                    [1]                           
 23                -1  1   1248768  models.common.BottleneckCSP             [512, 512, 1, False]          
 24      [17, 20, 23]  1    229245  models.yolo.Detect                      [80, [[10, 13, 16, 30, 33, 23], [30, 61, 62, 45, 59, 119], [116, 90, 156, 198, 373, 326]], [128, 256, 512]]
Traceback (most recent call last):
  File "train.py", line 492, in &lt;module&gt;
    train(hyp, opt, device, tb_writer, wandb)
  File "train.py", line 83, in train
    model = Model(opt.cfg or ckpt['model'].yaml, ch=3, nc=nc).to(device)  # create
  File "/usr/src/app/models/yolo.py", line 95, in __init__
    self._initialize_biases()  # only run once
  File "/usr/src/app/models/yolo.py", line 150, in _initialize_biases
    b[:, 4] += math.log(8 / (640 / s) ** 2)  # obj (8 objects per 640 image)
RuntimeError: a view of a leaf Variable that requires grad is being used in an in-place operation.
&lt;/denchmark-code&gt;

&lt;denchmark-h:h2&gt;Expected behavior&lt;/denchmark-h&gt;

Run normally
&lt;denchmark-h:h2&gt;Environment&lt;/denchmark-h&gt;


Docker + JupyterLab (from my repo)
CPU, 1 GPU, Multi-GPU

&lt;denchmark-h:h2&gt;Additional context&lt;/denchmark-h&gt;

It seems to run fine when I'm running from an old conda py37 environment with torch 1.6.
I cannot reproduce this error on Google Colab.
Could there be something wrong with Docker dependencies?
	</description>
	<comments>
		<comment id='1' author='NanoCode012' date='2020-11-29T16:15:07Z'>
		&lt;denchmark-link:https://github.com/NanoCode012&gt;@NanoCode012&lt;/denchmark-link&gt;
 thanks for the bug report. I'll try to reproduce with yolov5:latest on a GCP instance.
I've seen this error in the past when running in-place ops like L150 in your error message with autograd on, but that line has not changed in a long time. PyTorch versions are changing though, so perhaps this is handled differently now.
		</comment>
		<comment id='2' author='NanoCode012' date='2020-11-29T16:23:59Z'>
		Yeah I get the same result. I think the issue is that nvidia seems to prefer pytorch nightly for their FROM images rather than the last stable release, so I can't tell if this is a nightly instability or there's some 1.8 update set to cause errors on this in the future.
If I pull latest and then run this line, everything trains fine.
&lt;denchmark-code&gt;pip install torch==1.7.0+cu110 torchvision==0.8.1+cu110 torchaudio===0.7.0 -f https://download.pytorch.org/whl/torch_stable.html
&lt;/denchmark-code&gt;

I guess for now I'll simply reset the image FROM tag to 20.10, which I think was working well.
&lt;denchmark-link:https://user-images.githubusercontent.com/26833433/100547405-d5cd8100-3266-11eb-8ad3-6781c7797e00.png&gt;&lt;/denchmark-link&gt;

		</comment>
		<comment id='3' author='NanoCode012' date='2020-11-29T16:27:48Z'>
		Or wait, I just had a great idea! I think if I start from a different base image, such as pytorch/pytorch:latest, then this seems to point to the last stable release, and perhaps eliminates maintenance also as the tag never changes. I will try an experiment and see if it works.
&lt;denchmark-code&gt;FROM nvcr.io/nvidia/pytorch:20.11-py3
FROM pytorch/pytorch:latest
&lt;/denchmark-code&gt;

		</comment>
		<comment id='4' author='NanoCode012' date='2020-11-29T16:43:35Z'>
		I tried to create a pytorch:latest image here with this Dockerfile, but the image lacks some dependencies like cv2, which are causing problems on pip install, so I gave up on it. The Dockerfile is here in case anyone can debug this. In the meantime I think a rollback to 20.10 will fix this, I'll get that done.
docker pull ultralytics/yolov5:pytorch_latest
&lt;denchmark-code&gt;FROM pytorch/pytorch:latest

# Install dependencies
RUN pip install --upgrade pip
# COPY requirements.txt .
# RUN pip install -r requirements.txt
RUN pip install gsutil

# Create working directory
RUN mkdir -p /usr/src/app
WORKDIR /usr/src/app

# Copy contents
COPY . /usr/src/app
&lt;/denchmark-code&gt;

		</comment>
		<comment id='5' author='NanoCode012' date='2020-11-29T16:51:13Z'>
		Verified new image works, problem should be resolved now in PR &lt;denchmark-link:https://github.com/ultralytics/yolov5/pull/1553&gt;#1553&lt;/denchmark-link&gt;

		</comment>
		<comment id='6' author='NanoCode012' date='2020-11-29T16:53:09Z'>
		Thanks glenn! I will wait for image to build from dockerhub and test it!
Regarding pytorch:latest, I think it could be dangerous to use it in DockerFile because if there is some breaking change, you may not know till someone reports it.
Edit: This would mean that this repo will not be able to use later versions of nvidia's package until this bug is fixed somehow..
		</comment>
		<comment id='7' author='NanoCode012' date='2020-11-29T16:57:13Z'>
		&lt;denchmark-link:https://github.com/NanoCode012&gt;@NanoCode012&lt;/denchmark-link&gt;
 yes that's true. The docker images don't actually have any CI tests, they just build on every commit under the assumption that the github CI tests would mostly apply to docker as well, but it is true that they often may use different PyTorch versions. GitHub also updates their dependencies on their own schedule, so when 1.6 came out for example the next day we had the daily CI test failing.
		</comment>
		<comment id='8' author='NanoCode012' date='2020-11-30T04:13:40Z'>
		&lt;denchmark-link:https://github.com/glenn-jocher&gt;@glenn-jocher&lt;/denchmark-link&gt;
 correct me if I am wrong, but both nvcr.io/nvidia/pytorch:20.11-py3 and nvcr.io/nvidia/pytorch:20.10-py3 seems to use python 3.6
This project requests 3.8 or above.
Will this be a problem?
		</comment>
		<comment id='9' author='NanoCode012' date='2020-11-30T11:37:00Z'>
		&lt;denchmark-link:https://github.com/cesarandreslopez&gt;@cesarandreslopez&lt;/denchmark-link&gt;
 yes I noticed that as well. I'm not sure if 3.6.0 is compatible with this repo, I think the last one I checked was using 3.6.9. I'm doing all development in 3.8.0, but in general backwards compatibility is something I don't have lots of time to maintain and verify, which is the reason I've simply put 3.8 down as the requirement.
But as you're seeing 3.7 appears compatible, as well as possibly much of the 3.6.
		</comment>
		<comment id='10' author='NanoCode012' date='2020-12-02T10:13:00Z'>
		Hi, guys. &lt;denchmark-link:https://github.com/NanoCode012&gt;@NanoCode012&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/glenn-jocher&gt;@glenn-jocher&lt;/denchmark-link&gt;
 The following code works for me:
with torch.no_grad():
b[:, 4] += math.log(8 / (640 / s) ** 2)  # obj (8 objects per 640 image)
b[:, 5:] += math.log(0.6 / (m.nc - 0.99)) if cf is None else torch.log(cf / cf.sum())  # cls
		</comment>
		<comment id='11' author='NanoCode012' date='2020-12-02T10:23:04Z'>
		&lt;denchmark-link:https://github.com/MingcongCao&gt;@MingcongCao&lt;/denchmark-link&gt;
 ah, I've resolved the original issue by resetting the base image to Nvidia 20.10, so all docker operations should be operating correctly now.
		</comment>
		<comment id='12' author='NanoCode012' date='2020-12-07T14:50:17Z'>
		I have met this issue with RTX3090 &amp; Cuda 11.1.0. Is there any solution for this configuration?

python train.py --batch-size 64 --data ./data/coco128.yaml --cfg ./models/yolov5s.yaml --weights ''

Using torch 1.8.0.dev20201117 CUDA:0 (GeForce RTX 3090, 24265MB)
Traceback (most recent call last):
File "train.py", line 492, in 
train(hyp, opt, device, tb_writer, wandb)
File "train.py", line 91, in train
model = Model(opt.cfg, ch=3, nc=nc).to(device)  # create
File "/home/yons/work/yolov5/models/yolo.py", line 95, in init
self._initialize_biases()  # only run once
File "/home/yons/work/yolov5/models/yolo.py", line 150, in _initialize_biases
b[:, 4] += math.log(8 / (640 / s) ** 2)  # obj (8 objects per 640 image)
RuntimeError: a view of a leaf Variable that requires grad is being used in an in-place operation.
		</comment>
		<comment id='13' author='NanoCode012' date='2020-12-07T14:58:19Z'>
		&lt;denchmark-link:https://github.com/hcodee&gt;@hcodee&lt;/denchmark-link&gt;
 , could you try stable torch 1.7?
		</comment>
		<comment id='14' author='NanoCode012' date='2020-12-07T15:03:06Z'>
		The torch 1.7 does not work with RTX3090. Takes long time to figure out to run on nightly build Torch 1.8.
		</comment>
		<comment id='15' author='NanoCode012' date='2020-12-07T15:31:07Z'>
		
The torch 1.7 does not work with RTX3090. Takes long time to figure out to run on nightly build Torch 1.8.

You need to compile pytorch yourself witch cuda 11.1 installed. It is doable, I did it without any hassle ( surprisingly ) from master. Unfortunately I need to do it again for 1.7
		</comment>
		<comment id='16' author='NanoCode012' date='2020-12-07T15:56:19Z'>
		&lt;denchmark-link:https://github.com/batrlatom&gt;@batrlatom&lt;/denchmark-link&gt;
 Cool, Thanks remind. I will try it out.
		</comment>
		<comment id='17' author='NanoCode012' date='2020-12-17T11:01:33Z'>
		
I have met this issue with RTX3090 &amp; Cuda 11.1.0. Is there any solution for this configuration?

python train.py --batch-size 64 --data ./data/coco128.yaml --cfg ./models/yolov5s.yaml --weights ''

Using torch 1.8.0.dev20201117 CUDA:0 (GeForce RTX 3090, 24265MB)
Traceback (most recent call last):
File "train.py", line 492, in
train(hyp, opt, device, tb_writer, wandb)
File "train.py", line 91, in train
model = Model(opt.cfg, ch=3, nc=nc).to(device) # create
File "/home/yons/work/yolov5/models/yolo.py", line 95, in init
self._initialize_biases() # only run once
File "/home/yons/work/yolov5/models/yolo.py", line 150, in _initialize_biases
b[:, 4] += math.log(8 / (640 / s) ** 2) # obj (8 objects per 640 image)
RuntimeError: a view of a leaf Variable that requires grad is being used in an in-place operation.

Same problem with nighly pytorch version here. Any luck with using the self compiled pytorch 1.8?
		</comment>
		<comment id='18' author='NanoCode012' date='2020-12-18T02:44:49Z'>
		I met the same issue with pytorch 1.8, and the following code works for me:
&lt;denchmark-code&gt;b.data[:, 4] += math.log(8 / (640 / s) ** 2)  # obj (8 objects per 640 image)
b.data[:, 5:] += math.log(0.6 / (m.nc - 0.99)) if cf is None else torch.log(cf / cf.sum())  # cls
&lt;/denchmark-code&gt;

		</comment>
		<comment id='19' author='NanoCode012' date='2020-12-23T01:17:28Z'>
		I just ran into this issue myself, so it's time for a fix :) Will add a TODO and prioritize this for a fix ASAP.
		</comment>
		<comment id='20' author='NanoCode012' date='2020-12-23T01:20:48Z'>
		&lt;denchmark-link:https://github.com/DoctorKey&gt;@DoctorKey&lt;/denchmark-link&gt;
 can confirm your solution works correctly. I will submit a PR for this to master.
		</comment>
		<comment id='21' author='NanoCode012' date='2020-12-23T01:29:34Z'>
		&lt;denchmark-link:https://github.com/NanoCode012&gt;@NanoCode012&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/DoctorKey&gt;@DoctorKey&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/batrlatom&gt;@batrlatom&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://github.com/hcodee&gt;@hcodee&lt;/denchmark-link&gt;
 this problems should be resolved now by implementing &lt;denchmark-link:https://github.com/DoctorKey&gt;@DoctorKey&lt;/denchmark-link&gt;
 fix in PR &lt;denchmark-link:https://github.com/ultralytics/yolov5/pull/1759&gt;#1759&lt;/denchmark-link&gt;
. Docker image for ultralytics/yolov5:latest should be updated in a few minutes with this fix.
Let me know if any other issues pop up, and thank you for your contributions!
		</comment>
	</comments>
</bug>