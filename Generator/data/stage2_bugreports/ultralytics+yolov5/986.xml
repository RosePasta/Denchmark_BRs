<bug id='986' author='jinfagang' open_date='2020-09-17T08:06:50Z' closed_time='2020-11-12T00:31:02Z'>
	<summary>Auto anchor every time gets an unsame result</summary>
	<description>
This project become more and more complicated and too many unnecessary features and always got some unexpect behavior no way to found out why.
Just pull the newest updates, then everytime my anchor fits a new one:
&lt;denchmark-code&gt;1. firs time

Analyzing anchors... anchors/target = 3.04, Best Possible Recall (BPR) = 0.9679. Attempting to generate improved anchors, please wait...
WARNING: Extremely small objects found. 7209 of 148938 labels are &lt; 3 pixels in width or height.
Running kmeans for 9 anchors on 148938 points...
thr=0.25: 0.9999 best possible recall, 5.50 anchors past thr
n=9, img_size=928, metric_all=0.361/0.820-mean/best, past_thr=0.493-mean: 4,9,  10,5,  7,17,  21,10,  12,28,  38,18,  19,43,  62,26,  30,67
Evolving anchors with Genetic Algorithm: fitness = 0.8278: 100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 1000/1000 [00:03&lt;00:00, 265.06it/s]
thr=0.25: 1.0000 best possible recall, 5.58 anchors past thr
n=9, img_size=928, metric_all=0.366/0.828-mean/best, past_thr=0.495-mean: 4,9,  10,5,  6,15,  19,9,  10,25,  37,17,  16,39,  55,25,  27,64
New anchors saved to model. Update model *.yaml to use these anchors in the future.

2. Then I run it again
Analyzing anchors... anchors/target = 3.04, Best Possible Recall (BPR) = 0.9680. Attempting to generate improved anchors, please wait...
WARNING: Extremely small objects found. 7209 of 148938 labels are &lt; 3 pixels in width or height.
Running kmeans for 9 anchors on 148938 points...
thr=0.25: 1.0000 best possible recall, 5.49 anchors past thr
n=9, img_size=928, metric_all=0.361/0.820-mean/best, past_thr=0.493-mean: 4,9,  11,5,  7,17,  21,10,  12,28,  38,18,  18,43,  62,27,  30,67
Evolving anchors with Genetic Algorithm: fitness = 0.8278: 100%|███████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 1000/1000 [00:04&lt;00:00, 246.06it/s]
thr=0.25: 1.0000 best possible recall, 5.60 anchors past thr
n=9, img_size=928, metric_all=0.367/0.828-mean/best, past_thr=0.494-mean: 4,9,  10,5,  6,15,  20,9,  10,25,  35,16,  17,40,  57,25,  27,62
New anchors saved to model. Update model *.yaml to use these anchors in the future.


&lt;/denchmark-code&gt;

When it first run, I copied and pasted new anchor to yaml, then run the second time, it still claims that this anchor is not the best, and generated a new one.....
Why it always got unreplicatable result all the time....
This can be eliminated by desiable autoanchor, but I really want to know why.... Also this anchor value is saved into weights, for  pytorch inference it is ok, but when converting to different platform gets really unexpectable result sometimes....
	</description>
	<comments>
		<comment id='1' author='jinfagang' date='2020-09-18T02:44:32Z'>
		&lt;denchmark-link:https://github.com/jinfagang&gt;@jinfagang&lt;/denchmark-link&gt;
 the kmeans function in the scipy package, which is used to initialize autoanchor evolution, is non-deterministic:
&lt;denchmark-link:https://docs.scipy.org/doc/scipy/reference/generated/scipy.cluster.vq.kmeans.html&gt;https://docs.scipy.org/doc/scipy/reference/generated/scipy.cluster.vq.kmeans.html&lt;/denchmark-link&gt;


The initial k centroids are chosen by randomly selecting observations from the observation matrix. Alternatively, passing a k by N array specifies the initial k centroids.

Even with different initializations, your final results are nearly identical between run 1 and 2.
		</comment>
		<comment id='2' author='jinfagang' date='2020-10-06T13:03:56Z'>
		Commit &lt;denchmark-link:https://github.com/ultralytics/yolov5/commit/66676eb03939fe0573f584022a427da948cd8a83&gt;66676eb&lt;/denchmark-link&gt;
 may resolve this issue. I discovered a bug in train.py, caused by a function naming ambiguity, which caused only torch seeds to initialize properly, while python and numpy seeds were not being initialized.
Scipy relies on the numpy RNG I believe, so this fix may result in identical autoanchor results now in multiple runs.
		</comment>
		<comment id='3' author='jinfagang' date='2020-11-06T00:32:42Z'>
		This issue has been automatically marked as stale because it has not had recent activity. It will be closed if no further activity occurs. Thank you for your contributions.
		</comment>
	</comments>
</bug>