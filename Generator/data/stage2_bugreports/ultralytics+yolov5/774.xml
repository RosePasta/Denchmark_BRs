<bug id='774' author='jinfagang' open_date='2020-08-18T09:28:48Z' closed_time='2020-08-19T08:48:35Z'>
	<summary>/yolov5/utils/general.py", line 520, in compute_loss     pxy = ps[:, :2].sigmoid() * 2. - 0.5 IndexError: too many indices for tensor of dimension 1   0%|</summary>
	<description>
&lt;denchmark-code&gt;/yolov5/utils/general.py", line 520, in compute_loss
    pxy = ps[:, :2].sigmoid() * 2. - 0.5
IndexError: too many indices for tensor of dimension 1
  0%|                                                       
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='jinfagang' date='2020-08-18T16:18:09Z'>
		&lt;denchmark-link:https://github.com/jinfagang&gt;@jinfagang&lt;/denchmark-link&gt;
 thanks for the bug report. Do you have any guidance for reproducing this?
		</comment>
		<comment id='2' author='jinfagang' date='2020-08-19T03:14:50Z'>
		&lt;denchmark-link:https://github.com/glenn-jocher&gt;@glenn-jocher&lt;/denchmark-link&gt;
  I just pulled the code with v3.0 release, it broken something. Seems relate with compute loss function, while root reason maybe some behavior change in loading target?
		</comment>
		<comment id='3' author='jinfagang' date='2020-08-19T04:46:48Z'>
		&lt;denchmark-link:https://github.com/jinfagang&gt;@jinfagang&lt;/denchmark-link&gt;
 you may need to update your environment then, torch 1.6 is a requirement for v3.0 training and inference. All CI tests are passing, so all main functions are operating correctly.  I'll paste you the default info below for this.
&lt;denchmark-h:h2&gt;Requirements&lt;/denchmark-h&gt;

Python 3.8 or later with all &lt;denchmark-link:https://github.com/ultralytics/yolov5/blob/master/requirements.txt&gt;requirements.txt&lt;/denchmark-link&gt;
 dependencies installed, including . To install run:
$ pip install -r requirements.txt
&lt;denchmark-h:h2&gt;Status&lt;/denchmark-h&gt;

&lt;denchmark-link:https://github.com/ultralytics/yolov5/workflows/CI%20CPU%20testing/badge.svg&gt;&lt;/denchmark-link&gt;

If this badge is green, all &lt;denchmark-link:https://github.com/ultralytics/yolov5/actions&gt;YOLOv5 GitHub Actions&lt;/denchmark-link&gt;
 Continuous Integration (CI) tests are passing. These tests evaluate proper operation of basic YOLOv5 functionality, including training (&lt;denchmark-link:https://github.com/ultralytics/yolov5/blob/master/train.py&gt;train.py&lt;/denchmark-link&gt;
), testing (&lt;denchmark-link:https://github.com/ultralytics/yolov5/blob/master/test.py&gt;test.py&lt;/denchmark-link&gt;
), inference (&lt;denchmark-link:https://github.com/ultralytics/yolov5/blob/master/detect.py&gt;detect.py&lt;/denchmark-link&gt;
) and export (&lt;denchmark-link:https://github.com/ultralytics/yolov5/blob/master/models/export.py&gt;export.py&lt;/denchmark-link&gt;
) on MacOS, Windows, and Ubuntu.
		</comment>
		<comment id='4' author='jinfagang' date='2020-08-19T06:02:37Z'>
		&lt;denchmark-link:https://github.com/glenn-jocher&gt;@glenn-jocher&lt;/denchmark-link&gt;
  I just cloned a newest version of code, I still got error like this:
&lt;denchmark-code&gt;Analyzing anchors... anchors/target = 5.41, Best Possible Recall (BPR) = 0.9991
Image sizes 800 train, 800 test
Using 8 dataloader workers
Starting training for 300 epochs...

     Epoch   gpu_mem      GIoU       obj       cls     total   targets  img_size
  0%|                                                                                                                                                                                   | 0/4182 [00:00&lt;?, ?it/s]Traceback (most recent call last):
  File "train.py", line 458, in &lt;module&gt;
    train(hyp, opt, device, tb_writer)
  File "train.py", line 272, in train
    loss, loss_items = compute_loss(pred, targets.to(device), model)  # scaled by batch_size
  File "/yolov5/utils/general.py", line 505, in compute_loss
    pxy = ps[:, :2].sigmoid() * 2. - 0.5
IndexError: too many indices for tensor of dimension 1
  0%|                                                                                                                                                                                   | 0/4182 [00:04&lt;?, ?it/s]


&lt;/denchmark-code&gt;

		</comment>
		<comment id='5' author='jinfagang' date='2020-08-19T07:20:20Z'>
		&lt;denchmark-link:https://github.com/glenn-jocher&gt;@glenn-jocher&lt;/denchmark-link&gt;
  The error comes from here:
&lt;denchmark-code&gt; balance = [4.0, 1.0, 0.4] if np == 3 else [4.0, 1.0, 0.4, 0.1]  # P3-5 or P3-6
    for i, pi in enumerate(p):  # layer index, layer predictions
        b, a, gj, gi = indices[i]  # image, anchor, gridy, gridx
        tobj = torch.zeros_like(pi[..., 0], device=device)  # target obj

        n = b.shape[0]  # number of targets
        if n:
            nt += n  # cumulative targets
            ps = pi[b, a, gj, gi]  # prediction subset corresponding to targets
            print('ps shape: ', ps.shape)
            # Regression
            pxy = ps[:, :2].sigmoid() * 2. - 0.5  &lt;----- ps index errror, printed out shape is [747] which is of course index error
            pwh = (ps[:, 2:4].sigmoid() * 2) ** 2 * anchors[i]
&lt;/denchmark-code&gt;

p comes from prediction of compute_loss, so, do u have any idea why your latest code have such behavior than previous version? It's not my dataset problem since my data can train on v1 and v2.0, with your latest update in 3.0, got this error
		</comment>
		<comment id='6' author='jinfagang' date='2020-08-19T07:24:12Z'>
		&lt;denchmark-link:https://github.com/jinfagang&gt;@jinfagang&lt;/denchmark-link&gt;
 if this error is not reproducible there is nothing for us to do. If you can supply exact code to reproduce, we can get started looking at it.
		</comment>
		<comment id='7' author='jinfagang' date='2020-08-19T07:52:47Z'>
		&lt;denchmark-link:https://github.com/glenn-jocher&gt;@glenn-jocher&lt;/denchmark-link&gt;
 I am not sure what's the problem is but I tried this step to reproduced, can u have a test? :
&lt;denchmark-code&gt;1. clone latest
git clone repo

2. donwload coco128, and train with:

&lt;/denchmark-code&gt;

Output is:
&lt;denchmark-code&gt;yolov5 on  master ● ●
❯ python3 train.py --cfg models/yolov5s.yaml  --data data/coco128.yaml --img-size 800
Using CUDA device0 _CudaDeviceProperties(name='GeForce GTX 1080 Ti', total_memory=11168MB)

Namespace(adam=False, batch_size=16, bucket='', cache_images=False, cfg='models/yolov5s.yaml', data='data/coco128.yaml', device='', epochs=300, evolve=False, global_rank=-1, hyp='data/hyp.finetune.yaml', img_size=[800, 800], local_rank=-1, logdir='runs/', multi_scale=False, name='', noautoanchor=False, nosave=False, notest=False, rect=False, resume=False, single_cls=False, sync_bn=False, total_batch_size=16, weights='yolov5s.pt', workers=8, world_size=1)
Start Tensorboard with "tensorboard --logdir runs/", view at http://localhost:6006/
Hyperparameters {'lr0': 0.01, 'momentum': 0.937, 'weight_decay': 0.0005, 'giou': 0.05, 'cls': 0.5, 'cls_pw': 1.0, 'obj': 1.0, 'obj_pw': 1.0, 'iou_t': 0.2, 'anchor_t': 4.0, 'fl_gamma': 0.0, 'hsv_h': 0.015, 'hsv_s': 0.7, 'hsv_v': 0.4, 'degrees': 0.0, 'translate': 0.1, 'scale': 0.5, 'shear': 0.0, 'perspective': 0.0, 'flipud': 0.0, 'fliplr': 0.5, 'mixup': 0.0}

                 from  n    params  module                                  arguments                     
  0                -1  1      3520  models.common.Focus                     [3, 32, 3]                    
  1                -1  1     18560  models.common.Conv                      [32, 64, 3, 2]                
  2                -1  1     19904  models.common.BottleneckCSP             [64, 64, 1]                   
  3                -1  1     73984  models.common.Conv                      [64, 128, 3, 2]               
  4                -1  1    161152  models.common.BottleneckCSP             [128, 128, 3]                 
  5                -1  1    295424  models.common.Conv                      [128, 256, 3, 2]              
  6                -1  1    641792  models.common.BottleneckCSP             [256, 256, 3]                 
  7                -1  1   1180672  models.common.Conv                      [256, 512, 3, 2]              
  8                -1  1    656896  models.common.SPP                       [512, 512, [5, 9, 13]]        
  9                -1  1   1248768  models.common.BottleneckCSP             [512, 512, 1, False]          
 10                -1  1    131584  models.common.Conv                      [512, 256, 1, 1]              
 11                -1  1         0  torch.nn.modules.upsampling.Upsample    [None, 2, 'nearest']          
 12           [-1, 6]  1         0  models.common.Concat                    [1]                           
 13                -1  1    378624  models.common.BottleneckCSP             [512, 256, 1, False]          
 14                -1  1     33024  models.common.Conv                      [256, 128, 1, 1]              
 15                -1  1         0  torch.nn.modules.upsampling.Upsample    [None, 2, 'nearest']          
 16           [-1, 4]  1         0  models.common.Concat                    [1]                           
 17                -1  1     95104  models.common.BottleneckCSP             [256, 128, 1, False]          
 18                -1  1    147712  models.common.Conv                      [128, 128, 3, 2]              
 19          [-1, 14]  1         0  models.common.Concat                    [1]                           
 20                -1  1    313088  models.common.BottleneckCSP             [256, 256, 1, False]          
 21                -1  1    590336  models.common.Conv                      [256, 256, 3, 2]              
 22          [-1, 10]  1         0  models.common.Concat                    [1]                           
 23                -1  1   1248768  models.common.BottleneckCSP             [512, 512, 1, False]          
 24      [17, 20, 23]  1    229245  models.yolo.Detect                      [80, [[10, 13, 16, 30, 33, 23], [30, 61, 62, 45, 59, 119], [116, 90, 156, 198, 373, 326]], [128, 256, 512]]
Model Summary: 191 layers, 7.46816e+06 parameters, 7.46816e+06 gradients, 17.5 GFLOPS

Transferred 368/370 items from yolov5s.pt
Optimizer groups: 62 .bias, 70 conv.weight, 59 other
Scanning images: 100%|████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████████| 128/128 [00:00&lt;00:00, 251.20it/s]
Scanning labels ../coco128/labels/train2017.cache (126 found, 0 missing, 2 empty, 0 duplicate, for 128 images): 128it [00:00, 5209.51it/s]
Scanning labels ../coco128/labels/train2017.cache (126 found, 0 missing, 2 empty, 0 duplicate, for 128 images): 128it [00:00, 13821.92it/s]

Analyzing anchors... anchors/target = 4.30, Best Possible Recall (BPR) = 0.9957
Image sizes 800 train, 800 test
Using 8 dataloader workers
Starting training for 300 epochs...

     Epoch   gpu_mem      GIoU       obj       cls     total   targets  img_size
  0%|                                                                                                                                                                                      | 0/8 [00:00&lt;?, ?it/s]ps shape:  torch.Size([491])
Traceback (most recent call last):
  File "train.py", line 458, in &lt;module&gt;
    train(hyp, opt, device, tb_writer)
  File "train.py", line 272, in train
    loss, loss_items = compute_loss(pred, targets.to(device), model)  # scaled by batch_size
  File "/yolov5/utils/general.py", line 505, in compute_loss
    pxy = ps[:, :2].sigmoid() * 2. - 0.5
IndexError: too many indices for tensor of dimension 1
  0%|                                                     
&lt;/denchmark-code&gt;

		</comment>
		<comment id='8' author='jinfagang' date='2020-08-19T07:54:10Z'>
		&lt;denchmark-link:https://github.com/glenn-jocher&gt;@glenn-jocher&lt;/denchmark-link&gt;
  I am using pytorch 1.6 BTW:
&lt;denchmark-code&gt;&gt;&gt;&gt; torch.__version__
'1.6.0'

&lt;/denchmark-code&gt;

How u tried pytorch 1.6 compatibility since it's stable version now? Also HardSwish introduced in latest pytorch.
		</comment>
		<comment id='9' author='jinfagang' date='2020-08-19T07:56:21Z'>
		&lt;denchmark-link:https://github.com/glenn-jocher&gt;@glenn-jocher&lt;/denchmark-link&gt;
  I can confirm there must be something wrong with latest pytorch...
		</comment>
		<comment id='10' author='jinfagang' date='2020-08-19T08:22:27Z'>
		&lt;denchmark-link:https://github.com/jinfagang&gt;@jinfagang&lt;/denchmark-link&gt;
 I don't understand then. I tried your command in the notebook but everything works fine. It may be simple environment differences. You may want to create a new python 3.8 venv and install all requirerments and go from there.
By the way, datasets are downloaded automatically now on first use, so you do not need to manually download coco128 anymore :)
&lt;denchmark-link:https://user-images.githubusercontent.com/26833433/90610358-2a6a5600-e1ba-11ea-98f0-a47b2ac6b028.png&gt;&lt;/denchmark-link&gt;

		</comment>
	</comments>
</bug>