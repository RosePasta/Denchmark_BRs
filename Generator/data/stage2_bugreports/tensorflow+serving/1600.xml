<bug id='1600' author='BorisPolonsky' open_date='2020-04-16T04:54:23Z' closed_time='2020-05-11T15:55:23Z'>
	<summary>[Bug] Single quotes escaped wthin string leads to malformed JSON responses in REST API</summary>
	<description>
&lt;denchmark-h:h2&gt;Bug Report&lt;/denchmark-h&gt;

&lt;denchmark-h:h3&gt;System information&lt;/denchmark-h&gt;


OS Platform and Distribution (e.g., Linux Ubuntu 18.04):
TensorFlow Serving installed from docker (tensorflow/serving:1.12.3-gpu):
TensorFlow Serving version 1.12.3-gpu:

&lt;denchmark-h:h3&gt;Describe the problem&lt;/denchmark-h&gt;

In REST API responses, single quotes in strings were incorrectly escaped in some cases thus can't be parsed by downstream apps. I would like to suggest that the server either

remove escape character "\" before single quotes ', or
use double quotes instead when applicable (see the responses in  Exact Steps to Reproduce section)

&lt;denchmark-h:h3&gt;Exact Steps to Reproduce&lt;/denchmark-h&gt;

&lt;denchmark-h:h4&gt;Things that will trigger the bug&lt;/denchmark-h&gt;

The following steps will lead to some python downstream app raising exception
(e.g. a  log_message = json.loads(tf_error.read())["error"] will trigger JSONDecodeError exception) due to malformed strings in returned JSON.

calling REST API with data like {"signature_name": "serving_default"}

&lt;denchmark-code&gt;{ "error": "Missing \'inputs\' or \'instances\' key" }
&lt;/denchmark-code&gt;


calling REST API with data like {"signature_name": "no_such_signature"}
{ "error": "Missing named input: segment_ids in \'inputs\' object." } 
(calling REST API with some of the named inputs missing{"signature_name": "predict", "inputs":{}})
Something that won't trigger this error:

&lt;denchmark-code&gt;{ "error": "Missing named input: segment_ids in \'inputs\' object." }
&lt;/denchmark-code&gt;

&lt;denchmark-h:h4&gt;Cases that may trigger the bug (i.e. untested)&lt;/denchmark-h&gt;


' characters in output names for models with multiple outputs.

&lt;denchmark-h:h4&gt;Things that won't trigger the bug&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;{ "error": "Serving signature name: \"no_such_name\" not found in signature def" }
&lt;/denchmark-code&gt;

In this case double quotes were used hence \" won't trigger JSONDecodeError as it's a valid escape sequence.
&lt;denchmark-h:h3&gt;Source code / logs&lt;/denchmark-h&gt;

Example downstream app
&lt;denchmark-code&gt;import urllib
import urllib.request
import json

request_data = '{"singature_name": "serving_default"}'.encode("utf-8")
url = "http://localhost:8501/v1/models/your_model_name:predict"
request_obj = urllib.request.Request(url, headers={"Content-Type": "application/json"}, data=request_data)
try:
    with urllib.request.urlopen(request_obj, timeout=60) as response:
        content = response.read().decode("utf-8")
except urllib.error.HTTPError as e:
    message =  e.read().decode("utf-8")
    error = json.loads(message)["error"] # Fails when parsing JSON object.
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='BorisPolonsky' date='2020-05-01T16:08:07Z'>
		strings are represented using double quote (") as per &lt;denchmark-link:https://tools.ietf.org/html/rfc7159&gt;JSON spec&lt;/denchmark-link&gt;
. so any json output that has strings (in errors or otherwise) should be double quoted. and strings that contain double quotes, should be escaped as \"
		</comment>
		<comment id='2' author='BorisPolonsky' date='2020-05-01T23:50:50Z'>
		regarding single quotes, we need to escape them for JSON conformance. python json module seem to handle this correctly (and will fail if we do not escape the single quotes):
&lt;denchmark-code&gt;$ python
&gt;&gt;&gt; import json; json.loads('{ "error": "Missing \'inputs\' or \'instances\' key" }')["error"]
u"Missing 'inputs' or 'instances' key"
&gt;&gt;&gt;
&lt;/denchmark-code&gt;

		</comment>
		<comment id='3' author='BorisPolonsky' date='2020-05-04T11:14:58Z'>
		
regarding single quotes, we need to escape them for JSON conformance. python json module seem to handle this correctly (and will fail if we do not escape the single quotes):
$ python
&gt;&gt;&gt; import json; json.loads('{ "error": "Missing \'inputs\' or \'instances\' key" }')["error"]
u"Missing 'inputs' or 'instances' key"
&gt;&gt;&gt;


Hello, please try this to replicate the bug instead:
&lt;denchmark-code&gt;import json
json.loads(r'{ "error": "Missing \'inputs\' or \'instances\' key" }')
&lt;/denchmark-code&gt;

You'll get
&lt;denchmark-code&gt;json.decoder.JSONDecodeError: Invalid \escape: line 1 column 21 (char 20)
&lt;/denchmark-code&gt;

		</comment>
		<comment id='4' author='BorisPolonsky' date='2020-05-04T16:48:08Z'>
		using r'...' (raw) strings will cause problems as escape characters (a valid JSON construct) get interpreted literally. you can probably use u'...' if you want.
Quoting from &lt;denchmark-link:https://www.json.org/json-en.html&gt;json.org&lt;/denchmark-link&gt;
, definition of JSON string is as follows:

A string is a sequence of zero or more Unicode characters, wrapped in double quotes, using backslash escapes.

		</comment>
		<comment id='5' author='BorisPolonsky' date='2020-05-06T01:09:39Z'>
		
using r'...' (raw) strings will cause problems as escape characters (a valid JSON construct) get interpreted literally. you can probably use u'...' if you want.
Quoting from json.org, definition of JSON string is as follows:

A string is a sequence of zero or more Unicode characters, wrapped in double quotes, using backslash escapes.


Hello. Thanks for your reply. But I believe that's exactly what is returned via the response.read().decode("utf-8") call in my test code. The slash before the single quote is literally there in the body.
I believed that the ill-formatted part returned by tensorflow/serving shall be represented as u"\\'" (a string of length 2). What I wanted to stress in the report is not in what flavour we should represent these string literals in python, its that what returned from tensorflow/serving under conditions I listed above cannot be parsed as JSON object using the built-in json library.
PS:

A string is a sequence of zero or more Unicode characters, wrapped in double quotes, using backslash escapes.

I don't think this claim suggest that single quotes in strings should be escaped in JSON. Besides, in your quote from &lt;denchmark-link:https://www.json.org/json-en.html&gt;json.org&lt;/denchmark-link&gt;
, there's a flow chart for string type. There's no single quote  in the branches following the back slash  in it.
Here's complete code to replicate the bug (and verify that the r'' representation replicates the bug correctly through assert). I've update this to the main thread as well. Please kindly try it in python3 and you will see what I mean.
&lt;denchmark-code&gt;import urllib
import urllib.request
import json

request_data = '{"singature_name": "serving_default"}'.encode("utf-8")
url = "http://localhost:8501/v1/models/whatever_model_it_is:predict"
request_obj = urllib.request.Request(url, headers={"Content-Type": "application/json"}, data=request_data)
try:
    with urllib.request.urlopen(request_obj, timeout=60) as response:
        content = response.read().decode("utf-8")
except urllib.error.HTTPError as e:
    message = e.read().decode("utf-8")
    print(message) # There's indeed a back slash before single quotes.
    assert r'{ "error": "Missing \'inputs\' or \'instances\' key" }' == message # This assertion passes as well.
    json.loads(message) # Fails.
&lt;/denchmark-code&gt;

		</comment>
		<comment id='6' author='BorisPolonsky' date='2020-05-11T17:26:10Z'>
		&lt;denchmark-link:https://github.com/BorisPolonsky&gt;@BorisPolonsky&lt;/denchmark-link&gt;
 I submitted a fix to correctly escape JSON string to confirm to JSON spec.
If you can help test this from the master branch, that would be highly appreciated. I can then have it cherrypicked in the upcoming TF Serving 2.2 release.
Thanks!
		</comment>
	</comments>
</bug>