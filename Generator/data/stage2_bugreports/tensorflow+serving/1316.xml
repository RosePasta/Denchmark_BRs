<bug id='1316' author='alexcpn' open_date='2019-04-13T16:24:32Z' closed_time='2019-06-04T19:08:36Z'>
	<summary>TF docker error tensorflow/serving:1.13.0-devel-gpu ImportError: libcublas.so.9.0</summary>
	<description>
&lt;denchmark-h:h2&gt;Bug Report&lt;/denchmark-h&gt;

&lt;denchmark-h:h3&gt;System information&lt;/denchmark-h&gt;


OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Ubuntu 16.04
TensorFlow Serving installed from (source or binary):  Binary Docker
TensorFlow Serving version:
tensorflow/serving:1.13.0-devel-gpu

&lt;denchmark-h:h3&gt;Describe the problem&lt;/denchmark-h&gt;

The tensorflow in the continer does not load.Gives  error - ImportError: libcublas.so.9.0: cannot open shared object file: No such file or directory
&lt;denchmark-h:h3&gt;Exact Steps to Reproduce&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;docker run -it tensorflow/tf-serving:1.13.0-devel-gpu
invoke python shell
import tensorflow

&lt;/denchmark-code&gt;

&lt;denchmark-h:h3&gt;Source code / logs&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;&gt;&gt;&gt; import tensorflow
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/usr/local/lib/python2.7/dist-packages/tensorflow/__init__.py", line 24, in &lt;module&gt;
    from tensorflow.python import pywrap_tensorflow  # pylint: disable=unused-import
  File "/usr/local/lib/python2.7/dist-packages/tensorflow/python/__init__.py", line 49, in &lt;module&gt;
    from tensorflow.python import pywrap_tensorflow
  File "/usr/local/lib/python2.7/dist-packages/tensorflow/python/pywrap_tensorflow.py", line 74, in &lt;module&gt;
    raise ImportError(msg)
ImportError: Traceback (most recent call last):
  File "/usr/local/lib/python2.7/dist-packages/tensorflow/python/pywrap_tensorflow.py", line 58, in &lt;module&gt;
    from tensorflow.python.pywrap_tensorflow_internal import *
  File "/usr/local/lib/python2.7/dist-packages/tensorflow/python/pywrap_tensorflow_internal.py", line 28, in &lt;module&gt;
    _pywrap_tensorflow_internal = swig_import_helper()
  File "/usr/local/lib/python2.7/dist-packages/tensorflow/python/pywrap_tensorflow_internal.py", line 24, in swig_import_helper
    _mod = imp.load_module('_pywrap_tensorflow_internal', fp, pathname, description)
ImportError: libcublas.so.9.0: cannot open shared object file: No such file or directory

&lt;/denchmark-code&gt;

Solution
Reinstalling tensorflow-gpu version 1.13 solves the problem
pip install tensorflow-gpu==1.13.1
Found existing installation: tensorflow-gpu 1.12.0
Uninstalling tensorflow-gpu-1.12.0:
Successfully uninstalled tensorflow-gpu-1.12.0
Successfully installed tensorboard-1.13.1 tensorflow-estimator-1.13.0 tensorflow-gpu-1.13.1
	</description>
	<comments>
		<comment id='1' author='alexcpn' date='2019-04-15T18:26:44Z'>
		Could you please provide cuda and cudnn versions?
		</comment>
		<comment id='2' author='alexcpn' date='2019-04-15T19:30:54Z'>
		thanks for reporting the issue!
this is a bug in our release build process. specifically when we build tensorflow-serving-api PIP package we pick the latest TF pip package:


serving/tensorflow_serving/tools/pip_package/setup.py


         Line 49
      in
      28da549






 _TF_REQ = ['tensorflow-gpu&gt;=1.2.0,&lt;2'] 




 which may or may-not be inline with TF Serving version. depends on when these builds start. its possible TF PIP build is not complete yet for say 1.13.0 version, when TF Serving docker build attempts to install tensorflow-serving-api-gpu package, and picks up latest TF package (1.12.0 in this case))
		</comment>
		<comment id='3' author='alexcpn' date='2019-04-17T21:11:34Z'>
		OK so this is happening on tensorflow/serving:nightly-devel-gpu also where TF 1.13.1 is installed within the docker image. installing TF nightly resolves the issue.
		</comment>
		<comment id='4' author='alexcpn' date='2019-04-17T22:32:45Z'>
		&lt;denchmark-link:https://github.com/chsigg&gt;@chsigg&lt;/denchmark-link&gt;
 may have an idea about this.
		</comment>
		<comment id='5' author='alexcpn' date='2019-04-17T22:40:08Z'>
		folk folks attempting to reproduce this (needs docker installed) with latest bits:
&lt;denchmark-code&gt;$ docker pull tensorflow/serving:nightly-devel-gpu

$ docker run -it tensorflow/serving:nightly-devel-gpu

root@1567a50c6017:/tensorflow-serving#  pip list | grep tensorflow
tensorflow-estimator       1.13.0   
tensorflow-gpu             1.13.1   
tensorflow-serving-api-gpu 0.0.0

root@1567a50c6017:/tensorflow-serving# python -c 'import tensorflow'
Traceback (most recent call last):
  File "&lt;string&gt;", line 1, in &lt;module&gt;
  File "/usr/local/lib/python2.7/dist-packages/tensorflow/__init__.py", line 24, in &lt;module&gt;
    from tensorflow.python import pywrap_tensorflow  # pylint: disable=unused-import
  File "/usr/local/lib/python2.7/dist-packages/tensorflow/python/__init__.py", line 49, in &lt;module&gt;
    from tensorflow.python import pywrap_tensorflow
  File "/usr/local/lib/python2.7/dist-packages/tensorflow/python/pywrap_tensorflow.py", line 74, in &lt;module&gt;
    raise ImportError(msg)
ImportError: Traceback (most recent call last):
  File "/usr/local/lib/python2.7/dist-packages/tensorflow/python/pywrap_tensorflow.py", line 58, in &lt;module&gt;
    from tensorflow.python.pywrap_tensorflow_internal import *
  File "/usr/local/lib/python2.7/dist-packages/tensorflow/python/pywrap_tensorflow_internal.py", line 28, in &lt;module&gt;
    _pywrap_tensorflow_internal = swig_import_helper()
  File "/usr/local/lib/python2.7/dist-packages/tensorflow/python/pywrap_tensorflow_internal.py", line 24, in swig_import_helper
    _mod = imp.load_module('_pywrap_tensorflow_internal', fp, pathname, description)
ImportError: libcuda.so.1: cannot open shared object file: No such file or directory


Failed to load the native TensorFlow runtime.

See https://www.tensorflow.org/install/errors

for some common reasons and solutions.  Include the entire stack trace
above this error message when asking for help.

root@1567a50c6017:/tensorflow-serving# find / -name "libcuda.so*"
/usr/local/cuda-10.0/compat/libcuda.so.1
/usr/local/cuda-10.0/compat/libcuda.so
/usr/local/cuda-10.0/compat/libcuda.so.410.104
/usr/local/cuda-10.0/targets/x86_64-linux/lib/stubs/libcuda.so
&lt;/denchmark-code&gt;

		</comment>
		<comment id='6' author='alexcpn' date='2019-04-23T17:58:38Z'>
		&lt;denchmark-link:https://github.com/alexcpn&gt;@alexcpn&lt;/denchmark-link&gt;
 can you try by adding --runtime=nvidia to your docker command line when using gpu docker images. this works (without any failures for me) for the  version:
$ docker run --runtime=nvidia --rm -it tensorflow/serving:nightly-devel-gpu  python -c 'import tensorflow'
thanks to &lt;denchmark-link:https://github.com/gunan&gt;@gunan&lt;/denchmark-link&gt;
 for noticing the missing  above.
		</comment>
		<comment id='7' author='alexcpn' date='2019-04-23T19:43:22Z'>
		I dont have access to the remote machine now, but I usually give that  (--runtime=nviidia) Can you try with the exact release tf-serving:1.13.0-devel-gpu, instead of the latest. Also you can close it if it is fixed in latest. Thanks
		</comment>
		<comment id='8' author='alexcpn' date='2019-04-23T22:43:32Z'>
		yes this is still an issue with our 1.13 devel-gpu docker images (as it has TF 1.12 installed).
this does not happen with nightly-devel-gpu (noted above).
i will keep this issue open and ensure upcoming 1.14 release does not have this issue.
thanks for reporting it.
		</comment>
		<comment id='9' author='alexcpn' date='2019-06-04T19:08:36Z'>
		verified that this is fixed in the latest 1.14.0-rc0 docker image:
&lt;denchmark-code&gt;$ docker run -it tensorflow/serving:1.14.0-rc0-devel-gpu pip list | grep tensorflow
tensorflow-gpu             1.14.0rc0           
tensorflow-serving-api-gpu 1.14.0rc0
$ docker run --runtime=nvidia --rm -it tensorflow/serving:1.14.0-rc0-devel-gpu python -c 'import tensorflow as tf; print(tf.__version__)'
1.14.0-rc0
$
&lt;/denchmark-code&gt;

		</comment>
	</comments>
</bug>