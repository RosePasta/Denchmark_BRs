<bug id='1670' author='zhaocc1106' open_date='2020-06-19T06:49:46Z' closed_time='2020-07-10T15:37:25Z'>
	<summary>tensorflow serving returning NaN when predict</summary>
	<description>
Tensorflow version: 2.2.0
Tensorflow serving version: TensorFlow ModelServer: 2.2.0-rc2+dev.sha.d22fc19 TensorFlow Library: 2.2.0
I had trained one GAN model and saved the generator by the following function:
&lt;denchmark-code&gt;    tf.keras.models.save_model(
        generator,
        filepath=os.path.join(MODEL_PATH, 'model_saver'),
        overwrite=True,
        include_optimizer=False,
        save_format=None,
        options=None
    )
&lt;/denchmark-code&gt;

It predicts successfully when load model by tf.keras.models.load_model in python. But when serving the model in tensorflow model server, the model returns NaN value. I serve the model as follows:
&lt;denchmark-code&gt;zhaocc:~/products/tensorflow_server$ sudo docker run -t --rm -p 8502:8501     -v "/tmp/pix2pix/sketch_photo/model_saver:/models/photo2sketch"     -e MODEL_NAME=photo2sketch     tensorflow/serving &amp;
[3] 30089
zhaocc:~/products/tensorflow_server$ 2020-06-17 12:57:31.745339: I tensorflow_serving/model_servers/server.cc:86] Building single TensorFlow model file config:  model_name: photo2sketch model_base_path: /models/photo2sketch
2020-06-17 12:57:31.745448: I tensorflow_serving/model_servers/server_core.cc:464] Adding/updating models.
2020-06-17 12:57:31.745459: I tensorflow_serving/model_servers/server_core.cc:575]  (Re-)adding model: photo2sketch
2020-06-17 12:57:31.846162: I tensorflow_serving/core/basic_manager.cc:739] Successfully reserved resources to load servable {name: photo2sketch version: 1}
2020-06-17 12:57:31.846213: I tensorflow_serving/core/loader_harness.cc:66] Approving load for servable version {name: photo2sketch version: 1}
2020-06-17 12:57:31.846233: I tensorflow_serving/core/loader_harness.cc:74] Loading servable version {name: photo2sketch version: 1}
2020-06-17 12:57:31.846282: I external/org_tensorflow/tensorflow/cc/saved_model/reader.cc:31] Reading SavedModel from: /models/photo2sketch/1
2020-06-17 12:57:31.874158: I external/org_tensorflow/tensorflow/cc/saved_model/reader.cc:54] Reading meta graph with tags { serve }
2020-06-17 12:57:31.874182: I external/org_tensorflow/tensorflow/cc/saved_model/loader.cc:295] Reading SavedModel debug info (if present) from: /models/photo2sketch/1
2020-06-17 12:57:31.874315: I external/org_tensorflow/tensorflow/core/platform/cpu_feature_guard.cc:143] Your CPU supports instructions that this TensorFlow binary was not compiled to use: AVX2 FMA
2020-06-17 12:57:31.952982: I external/org_tensorflow/tensorflow/cc/saved_model/loader.cc:234] Restoring SavedModel bundle.
2020-06-17 12:57:32.172641: I external/org_tensorflow/tensorflow/cc/saved_model/loader.cc:183] Running initialization op on SavedModel bundle at path: /models/photo2sketch/1
2020-06-17 12:57:32.248514: I external/org_tensorflow/tensorflow/cc/saved_model/loader.cc:364] SavedModel load for tags { serve }; Status: success: OK. Took 402236 microseconds.
2020-06-17 12:57:32.256576: I tensorflow_serving/servables/tensorflow/saved_model_warmup.cc:105] No warmup data file found at /models/photo2sketch/1/assets.extra/tf_serving_warmup_requests
2020-06-17 12:57:32.265064: I tensorflow_serving/core/loader_harness.cc:87] Successfully loaded servable version {name: photo2sketch version: 1}
2020-06-17 12:57:32.267113: I tensorflow_serving/model_servers/server.cc:355] Running gRPC ModelServer at 0.0.0.0:8500 ...
[warn] getaddrinfo: address family for nodename not supported
2020-06-17 12:57:32.269289: I tensorflow_serving/model_servers/server.cc:375] Exporting HTTP/REST API at:localhost:8501 ...
[evhttp_server.cc : 238] NET_LOG: Entering the event loop ...
&lt;/denchmark-code&gt;

When I predict by REST request, it return NaN with correct shape:
&lt;denchmark-code&gt;[[[[nan nan nan]
   [nan nan nan]
   [nan nan nan]
   ...
   [nan nan nan]
   [nan nan nan]
   [nan nan nan]]
&lt;/denchmark-code&gt;

The generator functional model is as follows:
&lt;denchmark-code&gt;def downsample(filters, size, apply_batchnorm=True):
    """Use convolution layer to downsample

    Args:
        filters: The filters number.
        size: The kernel size.
        apply_batchnorm: If apply batch normalization.

    Returns:
        The downsample model.
    """
    initializer = tf.random_normal_initializer(0, 0.02)

    model = tf.keras.Sequential()
    model.add(tf.keras.layers.Conv2D(filters=filters,
                                     kernel_size=(size, size),
                                     strides=(2, 2),
                                     padding='same',
                                     kernel_initializer=initializer,
                                     use_bias=False))
    if apply_batchnorm:
        model.add(tf.keras.layers.BatchNormalization())
    model.add(tf.keras.layers.LeakyReLU())
    return model


def upsample(filters, size, apply_dropout=True):
    """Use convolution layers to upsample.

    Args:
        filters: The filters number.
        size: The kernel size.
        apply_dropout: If apply dropout.

    Returns:
        The upsample model.
    """
    initializer = tf.random_normal_initializer(0, 0.02)

    model = tf.keras.models.Sequential()
    model.add(tf.keras.layers.Conv2DTranspose(filters=filters,
                                              kernel_size=(size, size),
                                              strides=(2, 2),
                                              padding="same",
                                              kernel_initializer=initializer,
                                              use_bias=False))
    model.add(tf.keras.layers.BatchNormalization())

    if apply_dropout:
        model.add(tf.keras.layers.Dropout(0.5))
    model.add(tf.keras.layers.ReLU())
    return model


def Generator():
    """The generator model."""
    inputs = tf.keras.layers.Input(shape=[IMG_HEIGHT, IMG_WIDTH, 3])
    down_stack = [
        downsample(64, 4, apply_batchnorm=True),  # (bs, 128, 128, 64)
        downsample(128, 4),  # (bs, 64, 64, 128)
        downsample(256, 4),  # (bs, 32, 32, 256)
        downsample(512, 4),  # (bs, 16, 16, 512)
        downsample(512, 4),  # (bs, 8, 8, 512)
        downsample(512, 4),  # (bs, 4, 4, 512)
        downsample(512, 4),  # (bs, 2, 2, 512)
        downsample(512, 4),  # (bs, 1, 1, 512)
    ]

    up_stack = [
        upsample(512, 4, apply_dropout=True),  # (bs, 2, 2, 1024)
        upsample(512, 4, apply_dropout=True),  # (bs, 4, 4, 1024)
        upsample(512, 4, apply_dropout=True),  # (bs, 8, 8, 1024)
        upsample(512, 4),  # (bs, 16, 16, 1024)
        upsample(256, 4),  # (bs, 32, 32, 512)
        upsample(128, 4),  # (bs, 64, 64, 256)
        upsample(64, 4),  # (bs, 128, 128, 128)
    ]

    initializer = tf.random_normal_initializer(0., 0.02)
    last = tf.keras.layers.Conv2DTranspose(OUTPUT_CHANNELS, 4,
                                           strides=2,
                                           padding='same',
                                           kernel_initializer=initializer,
                                           activation='tanh')  # (bs, 256, 256, 3)

    x = inputs

    # Downsampling through the model.
    skips = []
    for down in down_stack:
        x = down(x)
        skips.append(x)

    skips = reversed(skips[:-1])

    # Upsampling through the model.
    for (up, skip) in zip(up_stack, skips):
        x = up(x)
        x = tf.keras.layers.Concatenate()([x, skip])  # Skip connect.

    x = last(x)
    return tf.keras.Model(inputs=inputs, outputs=x)
&lt;/denchmark-code&gt;

The complete code link is as follows:
&lt;denchmark-link:https://github.com/zhaocc1106/machine_learn/blob/master/NeuralNetworks-tensorflow/generation_network_model/GAN/photo2sketch.py&gt;https://github.com/zhaocc1106/machine_learn/blob/master/NeuralNetworks-tensorflow/generation_network_model/GAN/photo2sketch.py&lt;/denchmark-link&gt;

How can I debug it? Thanks very much!
	</description>
	<comments>
		<comment id='1' author='zhaocc1106' date='2020-06-19T09:43:33Z'>
		I tried serve this model on gpu-serving. Has the same problem.
Serving another rnn classifer model is okay...
		</comment>
		<comment id='2' author='zhaocc1106' date='2020-06-22T07:02:07Z'>
		&lt;denchmark-link:https://github.com/zhaocc1106&gt;@zhaocc1106&lt;/denchmark-link&gt;
,
Can you please provide the  of your  (using  command) and the Command that you have used to perform Inference using  so that we can reproduce the issue? Thanks!
		</comment>
		<comment id='3' author='zhaocc1106' date='2020-06-23T09:33:24Z'>
		Like the follows:
&lt;denchmark-link:https://stackoverflow.com/a/62483768/13766029&gt;https://stackoverflow.com/a/62483768/13766029&lt;/denchmark-link&gt;

There is  temporary workaround solution and the problem maybe caused by 'training' param.
		</comment>
		<comment id='4' author='zhaocc1106' date='2020-06-26T13:09:24Z'>
		&lt;denchmark-link:https://github.com/zhaocc1106&gt;@zhaocc1106&lt;/denchmark-link&gt;
 Can you please explain in depth about the training param? Thanks!
		</comment>
		<comment id='5' author='zhaocc1106' date='2020-07-10T15:37:24Z'>
		Closing this issue as it has been inactive for more than 2 weeks. Please add additional comments to open this issue again.Thanks!
		</comment>
		<comment id='6' author='zhaocc1106' date='2020-07-30T04:05:40Z'>
		I'm having the same problem. I served an image classifier and it's giving me nan on only some images. I stacked 4 images so I have a tensor of shape (4, 380, 380, 3). Now the prediction worked fine for the first image, but the next three returned nans. I've checked that the values are properly normalized. This is very weird because I've manually loaded the model using tf.keras.models.load_model and it worked totally fine on the same images that returned nan from tf-serving.
		</comment>
		<comment id='7' author='zhaocc1106' date='2020-08-12T07:05:46Z'>
		&lt;denchmark-link:https://github.com/taninaim&gt;@taninaim&lt;/denchmark-link&gt;
 I am having the exact same issue. For some images it works fine and for others it return nans.
Do you use EfficientNet? Did you find any solution for that problem?
		</comment>
		<comment id='8' author='zhaocc1106' date='2020-08-12T09:26:09Z'>
		
@taninaim I am having the exact same issue. For some images it works fine and for others it return nans.
Do you use EfficientNet? Did you find any solution for that problem?

Like the follows:
&lt;denchmark-link:https://stackoverflow.com/a/62483768/13766029&gt;https://stackoverflow.com/a/62483768/13766029&lt;/denchmark-link&gt;

I set the 'training' param to false, which solve my problem. I think it's a bug.
		</comment>
		<comment id='9' author='zhaocc1106' date='2020-12-29T06:12:11Z'>
		Same Question.
		</comment>
	</comments>
</bug>