<bug id='243' author='inocsin' open_date='2020-11-26T10:13:39Z' closed_time='2021-01-11T23:51:49Z'>
	<summary>üêõ [Bug] Encountered bug when using add/sub with scale != 1</summary>
	<description>
When I try to write converter of aten::rsub.Tensor(Tensor self, Tensor other, Scalar alpha=1) -&gt; (Tensor), I found the original "aten::add.Tensor(Tensor self, Tensor other, Scalar alpha=1) -&gt; Tensor" operator will run into error when scale != 1,
other operator like sub will encounter same bug when alpha != 1
To reproduce bug

modify tests/core/converters/test_element_wise.cpp, value=1 -&gt; value=2

&lt;denchmark-code&gt;TEST(Converters, ATenAddConvertsCorrectly) {
  const auto graph = R"IR(
      graph(%0 : Tensor, %1 : Tensor):
        %2 : int = prim::Constant[value=2]()
        %3 : Tensor = aten::add(%0, %1, %2)
        return (%3))IR";
  pointwise_test_helper(graph, false);
  pointwise_test_helper(graph, false, false, {3, 4}, {4});
  pointwise_test_helper(graph, false, false, {4}, {3, 4});
  pointwise_test_helper(graph, false, true, {3, 4, 3}, {4, 3});
  pointwise_test_helper(graph, false, true, {4, 3}, {3, 4, 3});
}
&lt;/denchmark-code&gt;

error message:
&lt;denchmark-code&gt;DEBUG: [TRTorch - Debug Build] - Running JIT version
DEBUG: [TRTorch - Debug Build] - Running TRT version
DEBUG: [TRTorch - Debug Build] - Settings requested for TensorRT engine:
    Operating Precision: Float32
    Make Refittable Engine: 0
    Debuggable Engine: 0
    Strict Types: 0
    GPU ID: 0
    Allow GPU Fallback (if running on DLA): 0
    Min Timing Iterations: 2
    Avg Timing Iterations: 1
    Max Workspace Size: 1048576
    Max Batch Size: Not set
    Device Type: GPU
    GPU ID: 0
    Engine Capability: Default
    Calibrator Created: 0
INFO: [TRTorch Conversion Context] - Converting Block
INFO: [TRTorch Conversion Context] - Adding Input 0 named input_0 in engine (conversion.AddInputs)
DEBUG: [TRTorch Conversion Context] - Input shape set to [5]
INFO: [TRTorch Conversion Context] - Adding Input 1 named input_1 in engine (conversion.AddInputs)
DEBUG: [TRTorch Conversion Context] - Input shape set to [5]
DEBUG: [TRTorch Conversion Context] - Evaluating %2 : int = prim::Constant[value=2]()
DEBUG: [TRTorch Conversion Context] - Found the value to be: 2
INFO: [TRTorch Conversion Context] - Adding Layer %3 : Tensor = aten::add(%0, %1, %2) (ctx.AddLayer)
DEBUG: [TRTorch Conversion Context] - Node input is an already converted tensor
DEBUG: [TRTorch Conversion Context] - Node input is an already converted tensor
DEBUG: [TRTorch Conversion Context] - Node input is a result of a previously evaluated value
DEBUG: [TRTorch - Debug Build] - Frozen tensor shape: [5]
DEBUG: [TRTorch - Debug Build] - Frozen tensor shape: [5]
ERROR: [TRTorch Conversion Context] - (Unnamed Layer* 0) [Scale]: at least 4 dimensions are required for input
ERROR: [TRTorch Conversion Context] - (Unnamed Layer* 0) [Scale]: at least 4 dimensions are required for input
ERROR: [TRTorch Conversion Context] - (Unnamed Layer* 0) [Scale]: at least 4 dimensions are required for input
DEBUG: [TRTorch - Debug Build] - Output tensor shape: []
INFO: [TRTorch Conversion Context] - Marking Output 3 named output_0 in engine (ctx.MarkOutput)
ERROR: [TRTorch Conversion Context] - (Unnamed Layer* 0) [Scale]: at least 4 dimensions are required for input
ERROR: [TRTorch Conversion Context] - (Unnamed Layer* 0) [Scale]: at least 4 dimensions are required for input
ERROR: [TRTorch Conversion Context] - Layer (Unnamed Layer* 0) [Scale] failed validation
ERROR: [TRTorch Conversion Context] - Network validation failed.
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='inocsin' date='2020-12-12T11:59:35Z'>
		Scale layer supports only tensor &gt;=3 dimensions which is the issue here. This PR fixes the issue &lt;denchmark-link:https://github.com/NVIDIA/TRTorch/pull/249&gt;#249&lt;/denchmark-link&gt;
.
Let me know if this resolves your issue.
		</comment>
	</comments>
</bug>