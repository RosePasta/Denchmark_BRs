<bug id='219' author='joelkuiper' open_date='2019-08-05T21:03:56Z' closed_time='2020-04-21T21:22:22Z'>
	<summary>Using the loss of hyperbolic space in Keras</summary>
	<description>
The paper mentioned that there was a convenience function for hyperbolic loss, however I tried
passing this to Keras with the appropriate space
&lt;denchmark-code&gt;def poincare_loss(metric):
    def loss(y_true, y_pred):
        L = metric.dist(y_pred, y_true)
        return L
    return loss
&lt;/denchmark-code&gt;

but got
&lt;denchmark-code&gt;tensorflow.python.framework.errors_impl.InvalidArgumentError: 2 root error(s) found.
  (0) Invalid argument: Input to reshape is a tensor with 1536 values, but the requested shape has 1792
         [[node loss/semantic_output_loss/einsum_3/Reshape_1 (defined at /anaconda3/lib/python3.7/site-packages/geomstats/backend/tensorflow.py:247) ]]
         [[bidirectional_1/TensorArrayUnstack_1/range/_227]]
  (1) Invalid argument: Input to reshape is a tensor with 1536 values, but the requested shape has 1792
         [[node loss/semantic_output_loss/einsum_3/Reshape_1 (defined at /anaconda3/lib/python3.7/site-packages/geomstats/backend/tensorflow.py:247) ]]
0 successful operations.
0 derived errors ignored.   
&lt;/denchmark-code&gt;

Using the TF backend of geomstats.
I also wasn't able to find any diff of what was changed to Keras in the applications folder or documentation on implementing a version of gradient descent that stays on the Poincar√© ball.
Note that my concrete problem is something like &lt;denchmark-link:https://datascience.stackexchange.com/questions/56889/hyperbolic-coordinates-poincar%c3%a9-embeddings-as-the-output-of-a-neural-network&gt;https://datascience.stackexchange.com/questions/56889/hyperbolic-coordinates-poincar%c3%a9-embeddings-as-the-output-of-a-neural-network&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='joelkuiper' date='2020-04-21T21:22:22Z'>
		Sorry for the delay in answering this. However, good news: this should be solved with the latest version of geomstats!
In the command line:
&lt;denchmark-code&gt;export GEOMSTATS_BACKEND=tensorflow
&lt;/denchmark-code&gt;

Code:
&lt;denchmark-code&gt;from geomstats.geometry.poincare_ball import PoincareBall

ball = PoincareBall(dim=2)
y_true = ball.random_uniform()
y_pred = ball.random_uniform()
loss = ball.metric.dist(y_pred, y_true)
&lt;/denchmark-code&gt;

Let us know if you are still interested, and are still encountering difficulties? We will be happy to help!
		</comment>
	</comments>
</bug>