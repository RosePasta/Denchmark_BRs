<bug id='246' author='nbara' open_date='2019-11-18T18:08:35Z' closed_time='2020-04-12T10:00:57Z'>
	<summary>tangent PCA bug</summary>
	<description>
Hello,
I'm trying to apply tangent PCA on SPD matrices, something along the lines of: &lt;denchmark-link:https://github.com/geomstats/geomstats/blob/master/examples/tangent_pca_so3.py&gt;https://github.com/geomstats/geomstats/blob/master/examples/tangent_pca_so3.py&lt;/denchmark-link&gt;

The following code doesn't work:
manifold = SPDMatricesSpace(10)
X = manifold.random_uniform(n_samples=140)
# X = manifold.vector_from_symmetric_matrix(X)   # this doesn't work either
mean = manifold.metric.mean(X[None, :])
tpca = TangentPCA(metric=manifold.metric)
tpca = tpca.fit(X)
tangent_projected_data = tpca.transform(X)
Passing the SPD matrices as vectors, I get the following error :

  File "/Users/nicolas/anaconda3/lib/python3.7/site-packages/geomstats/learning/pca.py", line 128, in fit
    self._fit(X, base_point, point_type)
  File "/Users/nicolas/anaconda3/lib/python3.7/site-packages/geomstats/learning/pca.py", line 164, in _fit
    tangent_vecs = self.metric.log(X, base_point=base_point)
  File "/Users/nicolas/anaconda3/lib/python3.7/site-packages/geomstats/spd_matrices_space.py", line 233, in log
    sqrt_base_point = gs.linalg.sqrtm(base_point)
  File "/Users/nicolas/anaconda3/lib/python3.7/site-packages/geomstats/backend/numpy_linalg.py", line 19, in sqrtm
    scipy.linalg.sqrtm, signature='(n,m)-&gt;(n,m)')(x)
  File "/Users/nicolas/anaconda3/lib/python3.7/site-packages/scipy/linalg/_matfuncs_sqrtm.py", line 170, in sqrtm
    T, Z = schur(A)
  File "/Users/nicolas/anaconda3/lib/python3.7/site-packages/scipy/linalg/decomp_schur.py", line 126, in schur
    raise ValueError('expected square matrix')
ValueError: expected square matrix

When passing a matrix, I get a different error in riemannian_metric:

  File "/Users/nicolas/anaconda3/lib/python3.7/site-packages/geomstats/riemannian_metric.py", line 389, in &lt;lambda&gt;
    lambda i, m, v, sq: while_loop_body(i, m, v, sq),
  File "/Users/nicolas/anaconda3/lib/python3.7/site-packages/geomstats/riemannian_metric.py", line 340, in while_loop_body
    tangent_mean += gs.einsum('nk,nj-&gt;j', weights, logs)
  File "/Users/nicolas/anaconda3/lib/python3.7/site-packages/geomstats/backend/numpy.py", line 256, in einsum
    return np.einsum(*args, **kwargs)
  File "&lt;__array_function__ internals&gt;", line 6, in einsum
  File "/Users/nicolas/anaconda3/lib/python3.7/site-packages/numpy/core/einsumfunc.py", line 1356, in einsum
    return c_einsum(*operands, **kwargs)
ValueError: operand has more dimensions than subscripts given in einstein sum, but no '...' ellipsis provided to broadcast the extra dimensions.

From what I can tell, the TangentPCA.fit() only &lt;denchmark-link:https://github.com/geomstats/geomstats/blob/master/geomstats/learning/pca.py#L158-L162&gt;supports vectors&lt;/denchmark-link&gt;
. However, the SPDMatricesSpace.log() requires a &lt;denchmark-link:https://github.com/geomstats/geomstats/blob/master/geomstats/geometry/spd_matrices_space.py#L225&gt;square matrix&lt;/denchmark-link&gt;
.
Is there any way around this ?
	</description>
	<comments>
		<comment id='1' author='nbara' date='2020-04-12T10:00:57Z'>
		Hello, thank you for submitting this issue and sorry for the late response. PCA had now been fixed for matrices and the following code should work for you:
from geomstats.geometry.spd_matrices import SPDMatrices, SPDMetricAffine
from geomstats.learning.pca import TangentPCA

spd = SPDMatrices(10)
spd_metric = SPDMetricAffine(10)
X =spd.random_uniform(n_samples=140)
tpca = TangentPCA(metric=spd_metric, point_type='matrix')
tangent_projected_data = tpca.fit_transform(X)
		</comment>
	</comments>
</bug>