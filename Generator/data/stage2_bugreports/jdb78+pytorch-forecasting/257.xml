<bug id='257' author='dempseyryan' open_date='2021-01-11T14:20:56Z' closed_time='2021-01-12T21:06:16Z'>
	<summary>All results very different from tutorial</summary>
	<description>

PyTorch-Forecasting version: 0.8.0
PyTorch version: 1.7.1
Python version: 3.7.9
Operating System: Ubuntu 18.04

&lt;denchmark-h:h3&gt;Expected behavior&lt;/denchmark-h&gt;

I'm working through the tutorial, and am not getting any of the same training results. I eventually got tired of trying to debug, and copy-pasted the exact code from the tutorial, and nothing changed. The learning rate plot is super weird and very different from what the tutorial shows.
This is the expected learning rate and accompanying plot, from &lt;denchmark-link:https://pytorch-forecasting.readthedocs.io/en/latest/tutorials/stallion.html&gt;https://pytorch-forecasting.readthedocs.io/en/latest/tutorials/stallion.html&lt;/denchmark-link&gt;

&lt;denchmark-link:https://user-images.githubusercontent.com/50927217/104192624-133c3700-53ed-11eb-8d6d-98205638815e.png&gt;&lt;/denchmark-link&gt;

I also want to mention the actual learning itself. As I mentioned, I ended up copying and pasted the entire tutorial because it wasn't working. The expected results can be found in the link above.
&lt;denchmark-h:h3&gt;Actual behavior&lt;/denchmark-h&gt;

The learning rate is extremely tiny, with a strange plot, as seen below. As mentioned, I eventually decided to copy-paste the code from the tutorial to see what happened, so I'm at a loss as to what could be causing this.
&lt;denchmark-link:https://user-images.githubusercontent.com/50927217/104192594-07e90b80-53ed-11eb-9941-6fe0bce2f198.png&gt;&lt;/denchmark-link&gt;

And here are the actual training results:
&lt;denchmark-link:https://user-images.githubusercontent.com/50927217/104319772-58c13880-54af-11eb-9296-e4ba3c98c88f.png&gt;&lt;/denchmark-link&gt;

&lt;denchmark-link:https://user-images.githubusercontent.com/50927217/104319791-61b20a00-54af-11eb-8d94-f464e696aba1.png&gt;&lt;/denchmark-link&gt;

&lt;denchmark-link:https://user-images.githubusercontent.com/50927217/104319808-6971ae80-54af-11eb-8271-140bda3be88d.png&gt;&lt;/denchmark-link&gt;

All the subsequent plots and plots for different parameters are also vastly different from the tutorial, but I've just shown these as an example (they are the first three in the tutorial).
Like I said I copy-pasted so at this point it makes no sense for it to be so different. What gives? Are the tutorials outdated?
Edit: also want to mention that the last 4 of the shown type of plot, have nothing at all, like so:
&lt;denchmark-link:https://user-images.githubusercontent.com/50927217/104322750-4d700c00-54b3-11eb-8a95-e22a75bb034f.png&gt;&lt;/denchmark-link&gt;

&lt;denchmark-h:h3&gt;Code to reproduce the problem - learning rate&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;# find optimal learning rate
res = trainer.tuner.lr_find(
    tft,
    train_dataloader=train_dataloader,
    val_dataloaders=val_dataloader,
    max_lr=10.0,
    min_lr=1e-6,
)

print(f"suggested learning rate: {res.suggestion()}")
fig = res.plot(show=True, suggest=True)
fig.show()
&lt;/denchmark-code&gt;

&lt;denchmark-h:h3&gt;Code to reproduce the problem - training plot&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;# raw predictions are a dictionary from which all kind of information including quantiles can be extracted
raw_predictions, x = best_tft.predict(val_dataloader, mode="raw", return_x=True)

for idx in range(10):  # plot 10 examples
    best_tft.plot_prediction(x, raw_predictions, idx=idx, add_loss_to_title=True);
&lt;/denchmark-code&gt;

The code used to initialize the trainer and dataset was also ripped straight from the tutorial.
Thanks for developing this! It will be nice to have a simple way of implementing timeseries tft (once I can get it working!)
Please let me know if you have any ideas.
Best,
Ryan
	</description>
	<comments>
		<comment id='1' author='dempseyryan' date='2021-01-11T15:02:51Z'>
		May be it is related to bag with target rescaling, try to change this line
elif self.output_transformer is None or out.get("output_transformation", None) is None:
to
elif self.output_transformer is None and out.get("output_transformation", None) is None:
in file models/base_model.py
		</comment>
	</comments>
</bug>