<bug id='39' author='hkvision' open_date='2019-03-06T10:09:04Z' closed_time='2020-05-18T00:04:20Z'>
	<summary>Question: CRF can't be loaded by tf.keras.models.load_model()</summary>
	<description>
I notice that in the models of this repo, only weights are saved. During model loading, a new model is constructed using model topology and weights are set to it.
If I construct a model using tf.keras.layers and CRF, save the whole model using model.save(path), if I call tf.keras.models.load_model(path, custom_objects={"CRF": CRF}) to load it, it will throw the following error:
&lt;denchmark-code&gt;cls = &lt;class 'nlp_architect.contrib.tensorflow.python.keras.layers.crf.CRF'&gt;
config = {'dtype': 'float32', 'mode': 'reg', 'name': 'intent_slot_crf', 'output_dim': 5, ...}

    @classmethod
    def from_config(cls, config):
      """Creates a layer from its config.
    
      This method is the reverse of `get_config`,
      capable of instantiating the same layer from the config
      dictionary. It does not handle layer connectivity
      (handled by Network), nor weights (handled by `set_weights`).
    
      Arguments:
          config: A Python dictionary, typically the
              output of get_config.
    
      Returns:
          A layer instance.
      """
&gt;     return cls(**config)
E     TypeError: __init__() missing 1 required positional argument: 'num_classes'
&lt;/denchmark-code&gt;

Seems that num_classes not included in get_config?
If I modify get_config, it will throw another error:
&lt;denchmark-code&gt;identifier = 'loss'
module_objects = {'K': &lt;module 'tensorflow.python.keras.backend' from '/home/kai/.local/lib/python3.5/site-packages/tensorflow/python/k...ction mean_absolute_error at 0x7fd2cb6926a8&gt;, 'MAPE': &lt;function mean_absolute_percentage_error at 0x7fd2cb692730&gt;, ...}
custom_objects = None, printable_module_name = 'loss function'

    @tf_export('keras.utils.deserialize_keras_object')
    def deserialize_keras_object(identifier,
                                 module_objects=None,
                                 custom_objects=None,
                                 printable_module_name='object'):
      if isinstance(identifier, dict):
        # In this case we are dealing with a Keras config dictionary.
        config = identifier
        if 'class_name' not in config or 'config' not in config:
          raise ValueError('Improper config format: ' + str(config))
        class_name = config['class_name']
        if custom_objects and class_name in custom_objects:
          cls = custom_objects[class_name]
        elif class_name in _GLOBAL_CUSTOM_OBJECTS:
          cls = _GLOBAL_CUSTOM_OBJECTS[class_name]
        else:
          module_objects = module_objects or {}
          cls = module_objects.get(class_name)
          if cls is None:
            raise ValueError('Unknown ' + printable_module_name + ': ' + class_name)
        if hasattr(cls, 'from_config'):
          arg_spec = tf_inspect.getargspec(cls.from_config)
          custom_objects = custom_objects or {}
    
          if 'custom_objects' in arg_spec.args:
            return cls.from_config(
                config['config'],
                custom_objects=dict(
                    list(_GLOBAL_CUSTOM_OBJECTS.items()) +
                    list(custom_objects.items())))
          with CustomObjectScope(custom_objects):
            return cls.from_config(config['config'])
        else:
          # Then `cls` may be a function returning a class.
          # in this case by convention `config` holds
          # the kwargs of the function.
          custom_objects = custom_objects or {}
          with CustomObjectScope(custom_objects):
            return cls(**config['config'])
      elif isinstance(identifier, six.string_types):
        function_name = identifier
        if custom_objects and function_name in custom_objects:
          fn = custom_objects.get(function_name)
        elif function_name in _GLOBAL_CUSTOM_OBJECTS:
          fn = _GLOBAL_CUSTOM_OBJECTS[function_name]
        else:
          fn = module_objects.get(function_name)
          if fn is None:
            raise ValueError('Unknown ' + printable_module_name + ':' +
&gt;                            function_name)
E           ValueError: Unknown loss function:loss
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='hkvision' date='2019-03-10T06:56:18Z'>
		Hi &lt;denchmark-link:https://github.com/hkvision&gt;@hkvision&lt;/denchmark-link&gt;
, thanks for reporting. We're aware of this issue and going to fix the model persistency methods in the next release.
		</comment>
		<comment id='2' author='hkvision' date='2019-03-11T01:11:54Z'>
		Thanks so much!
		</comment>
		<comment id='3' author='hkvision' date='2020-05-18T00:04:19Z'>
		Issue marked as stale, closing.
		</comment>
	</comments>
</bug>