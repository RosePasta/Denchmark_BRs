<bug id='1623' author='lschmelzeisen' open_date='2017-11-21T15:15:51Z' closed_time='2017-11-26T16:41:44Z'>
	<summary>Loading a spacy language breaks the regex module?</summary>
	<description>
Consider the following program:
#!/usr/bin/env python3

import regex as re
import spacy

re.compile(r'(\[)([^][]*)(\])')

spacy.load('en') # or alternatively spacy.blank('en')

re.compile(r'(\[)([^][]*)(\])')
On two of my machines the regex module throws an error on the last line!
&lt;denchmark-code&gt;Traceback (most recent call last):
  File "./test.py", line 10, in &lt;module&gt;
    re.compile(r'(\[)([^][]*)(\])')
  File "/home/lukas/anaconda3/envs/Research/lib/python3.6/site-packages/regex.py", line 345, in compile
    return _compile(pattern, flags, kwargs)
  File "/home/lukas/anaconda3/envs/Research/lib/python3.6/site-packages/regex.py", line 501, in _compile
    caught_exception.pos)
_regex_core.error: unterminated character set at position 16
&lt;/denchmark-code&gt;

The behavior is also reproducible if one substitutes spacy.load('en') with spacy.blank('en') or changes the language code. If one comments that line out the program runs without error.
I therefore believe that spacy somehow modifies the regex module, however I could not find any offending code.
&lt;denchmark-h:h2&gt;Info about spaCy (Machine 1)&lt;/denchmark-h&gt;


regex version: 2017.4.5
spaCy version: 2.0.3
Platform: Linux-4.9.61-3-MANJARO-x86_64-with-glibc2.9
Python version: 3.6.3
Models: en_vectors_web_lg, en, en_core_web_sm, en_core_web_lg, de, de_core_news_sm, en_core_web_md

&lt;denchmark-h:h2&gt;Info about spaCy (Machine 2)&lt;/denchmark-h&gt;


regex version: 2017.4.5
spaCy version: 2.0.3
Platform: Linux-4.4.0-98-generic-x86_64-with-debian-stretch-sid
Python version: 3.6.2
Models: en_core_web_lg, en_core_web_md, en_vectors_web_lg, de_core_news_sm, en_core_web_sm

	</description>
	<comments>
		<comment id='1' author='lschmelzeisen' date='2017-11-21T15:24:14Z'>
		Thanks for the report – it might be related to the regex customisations in spacy/lang/char_classes.py:



spaCy/spacy/lang/char_classes.py


        Lines 4 to 7
      in
      ab2342a






 import regex as re 



 



 



 re.DEFAULT_VERSION = re.VERSION1 





The regex stuff in the language data has always been a little tricky... If I remember correctly, the modifications were needed to work around some issues with the regex module, which again is needed to work around issues with the standard re module.
But we might be able to add some workaround here? If you have any ideas or suggestions, we'd definitely appreciate it.
		</comment>
		<comment id='2' author='lschmelzeisen' date='2017-11-21T15:27:46Z'>
		Yes, that is definitely the relevant line. Since the following throws the same error:
re.DEFAULT_VERSION = re.VERSION1
re.compile(r'(\[)([^][]*)(\])')
I'm not too familiar with the regex module, but I'll get back to you if I find some way to isolate such state change.
		</comment>
		<comment id='3' author='lschmelzeisen' date='2017-11-21T15:42:18Z'>
		The &lt;denchmark-link:https://pypi.python.org/pypi/regex/&gt;regex module documentation&lt;/denchmark-link&gt;
 states


Version 0 behaviour (old behaviour, compatible with the current re module):

Indicated by the VERSION0 or V0 flag, or (?V0) in the pattern.
...


Version 1 behaviour (new behaviour, different from the current re module):

Indicated by the VERSION1 or V1 flag, or (?V1) in the pattern.
...



If no version is specified, the regex module will default to regex.DEFAULT_VERSION.

Since overwriting re.DEFAULT_VERSION clearly breaks code in other modules, the following options remain: for example, code compiling a pattern a la re.compile(r'&lt;pattern&gt;') needs to be changed to either

using a flag in the function call: re.compile(r'&lt;pattern&gt;', flags=re.VERSION1), or
using a modifier inside the pattern: re.compile(r'(?V1)&lt;pattern&gt;')

		</comment>
		<comment id='4' author='lschmelzeisen' date='2017-11-21T16:12:27Z'>
		Thanks for looking into this!

using a flag in the function call: re.compile(r'&lt;pattern&gt;', flags=re.VERSION1)

This sounds like the best and most readable option to me – and it's also much better than defining random defaults in the top-level scope (especially considering the pretty bad side effects).
If I remember correctly, the version setting was only really necessary for the char_classes, so it'll only have to be added there. Considering the bad side-effects of setting it globally, I wonder if it might have also caused some of the other issues around the tokenization speed (parts of which we've tracked down to the prefix/suffix/infix rules).
Edit: Also labeling this as help wanted in case other users have ideas, suggestions or test cases that might help with this.
		</comment>
		<comment id='5' author='lschmelzeisen' date='2017-11-26T16:41:44Z'>
		Merging this with &lt;denchmark-link:https://github.com/explosion/spaCy/issues/1642&gt;#1642&lt;/denchmark-link&gt;
!
		</comment>
		<comment id='6' author='lschmelzeisen' date='2018-05-08T06:55:23Z'>
		This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue for related bugs.
		</comment>
	</comments>
</bug>