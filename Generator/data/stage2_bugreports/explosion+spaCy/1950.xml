<bug id='1950' author='jjtapia' open_date='2018-02-07T19:22:39Z' closed_time='2018-02-09T09:23:50Z'>
	<summary>Rule based matching breaks when using a regular expression that includes letters and numbers</summary>
	<description>
Consider the following code
&lt;denchmark-code&gt;from __future__ import unicode_literals
import en_core_web_sm
import re


nlp = en_core_web_sm.load()

TEST_CODE = nlp.vocab.add_flag(re.compile('abc[0-9]+').match)
doc = nlp('abc123')
&lt;/denchmark-code&gt;

When running this code, spacy will fail with the following error
&lt;denchmark-code&gt;Traceback (most recent call last):
  File "untitled.py", line 9, in &lt;module&gt;
    doc = nlp('123a')
  File "/home/.../venv2b/lib/python3.6/site-packages/spacy/language.py", line 337, in __call__
    doc = self.make_doc(text)
  File "/home.../venv2b/lib/python3.6/site-packages/spacy/language.py", line 365, in make_doc
    return self.tokenizer(text)
  File "tokenizer.pyx", line 120, in spacy.tokenizer.Tokenizer.__call__
  File "tokenizer.pyx", line 161, in spacy.tokenizer.Tokenizer._tokenize
  File "tokenizer.pyx", line 240, in spacy.tokenizer.Tokenizer._attach_tokens
  File "vocab.pyx", line 134, in spacy.vocab.Vocab.get
  File "vocab.pyx", line 170, in spacy.vocab.Vocab._new_lexeme
TypeError: an integer is required
&lt;/denchmark-code&gt;

This error is only triggered when including a regular expression that has both numbers and letters. Including one or the other passes without issues.
&lt;denchmark-h:h2&gt;Info about spaCy&lt;/denchmark-h&gt;


spaCy version: 2.0.7
Platform: Linux-4.4.0-21-generic-x86_64-with-LinuxMint-18-sarah
Python version: 3.6.1

	</description>
	<comments>
		<comment id='1' author='jjtapia' date='2018-02-08T10:14:43Z'>
		Thanks for the report. I'm still understanding this in detail but it looks to me like the error comes from re.match() returning a Python object, when the Vocab is expecting the function to return a boolean. The following should work:
TEST_CODE = nlp.vocab.add_flag(lambda string: bool(re.compile('abc[0-9]+').match))
I suspect the match over letters and numbers is a red herring, and what matters is whether the token has been seen before. I'm still a bit confused though.
		</comment>
		<comment id='2' author='jjtapia' date='2018-02-08T19:36:01Z'>
		Thank you &lt;denchmark-link:https://github.com/honnibal&gt;@honnibal&lt;/denchmark-link&gt;
. I was following &lt;denchmark-link:https://spacy.io/usage/linguistic-features#section-rule-based-matching&gt;this example&lt;/denchmark-link&gt;
 (IS_DEFINITELY) but I should have read more into the documentation for add_flag. I modified your code example a little bit
TEST_CODE = nlp.vocab.add_flag(lambda string: bool(re.compile('abc[0-9]+').match(string)))
and this worked for my use case.
		</comment>
		<comment id='3' author='jjtapia' date='2018-02-09T09:19:26Z'>
		&lt;denchmark-link:https://github.com/jjtapia&gt;@jjtapia&lt;/denchmark-link&gt;
 Thanks, looks like this is actually a mistake in our docs! Fixing! 
		</comment>
		<comment id='4' author='jjtapia' date='2018-05-07T23:55:31Z'>
		This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue for related bugs.
		</comment>
	</comments>
</bug>