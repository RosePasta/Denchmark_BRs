<bug id='6140' author='Nuccy90' open_date='2020-09-24T14:40:51Z' closed_time='2020-10-07T22:44:17Z'>
	<summary>Tagger and parser disappear when NER is added to model</summary>
	<description>
I trained a tagger and parser for Swedish on UD and then I wanted to add NER on top of the same model. I trained the NER model on different data from the command line as follows:
python -m spacy train sv models/tagger_parser_ner json-files/suc3_train.json json-files/suc3_dev.json --base-model models/tagger_parser/model-best --pipeline 'ner' -ne 5
When I went to load the model and test it, it only does NER (the tagger and parser are gone). In the folder for the new model I can see three folders called ner, tagger and parser, so it did take them from the previous model, but "pipeline" in meta.json says only ["ner"]. If I manually change "pipeline" to ["tagger, parser, ner"] I get this error message:

KeyError: "[E002] Can't find factory for 'tagger,parser,ner'. This usually happens when spaCy calls nlp.create_pipe with a component name that's not built in - for example, when constructing the pipeline from a model's meta.json. If you're using a custom component, you can write to Language.factories['tagger,parser,ner'] or remove it from the model meta and add it via nlp.add_pipe instead."

I was looking at PR &lt;denchmark-link:https://github.com/explosion/spaCy/pull/4911&gt;#4911&lt;/denchmark-link&gt;
 and it says "When the final model and best model are saved, disabled components are reenabled and the meta information is merged to include the full pipeline". This did not happen for me. Did I do something wrong or is this still not entirely fixed?
&lt;denchmark-h:h2&gt;Your Environment&lt;/denchmark-h&gt;


spaCy version: 2.3.2
Platform: Linux-5.4.0-47-generic-x86_64-with-glibc2.29
Python version: 3.8.2

	</description>
	<comments>
		<comment id='1' author='Nuccy90' date='2020-09-25T06:19:11Z'>
		That does look like a bug with how the base model settings are included in the train CLI.
I think you can update the meta to get your current model to work, but the pipeline needs to look like this with separate component names as a JSON list, not like how you wrote it on the commandline:
&lt;denchmark-code&gt;  "pipeline":[
    "tagger",
    "parser",
    "ner"
  ],
&lt;/denchmark-code&gt;

I think we need to revert &lt;denchmark-link:https://github.com/explosion/spaCy/pull/5751&gt;#5751&lt;/denchmark-link&gt;
. The commandline meta is used as the base meta for the models, but will have changes in it based on the training options that shouldn't be overridden, at least not like this.
Probably we need to update the model meta from the commandline meta in a final step rather than using it as the base meta. Then if your commandline meta breaks parts of the pipeline config, etc., presumably you know how to handle it, but if you haven't provided a commandline meta, you get something sensible.
		</comment>
		<comment id='2' author='Nuccy90' date='2020-09-30T12:10:52Z'>
		No, I was wrong above. The meta just needs to be updated to reflect the reenabled pipeline components. Otherwise I think it's okay as it is.
		</comment>
		<comment id='3' author='Nuccy90' date='2020-10-07T19:12:20Z'>
		I think you're right Adriane, just a simple update of meta["pipeline"] seems to do the trick.
When I first train on a tagger, than on a parser, following the steps from the original post, I get:
&lt;denchmark-code&gt;print(nlp.pipeline)
&lt;/denchmark-code&gt;


[('parser', &lt;spacy.pipeline.pipes.DependencyParser object at 0x00000259D5224048&gt;)]

With the fix in PR &lt;denchmark-link:https://github.com/explosion/spaCy/pull/6219&gt;#6219&lt;/denchmark-link&gt;
, I get:
&lt;denchmark-code&gt;print(nlp.pipeline)
&lt;/denchmark-code&gt;


[('tagger', &lt;spacy.pipeline.pipes.Tagger object at 0x00000259D67E0FD0&gt;), ('parser', &lt;spacy.pipeline.pipes.DependencyParser object at 0x00000259D55D7888&gt;)]

		</comment>
		<comment id='4' author='Nuccy90' date='2020-10-07T19:30:19Z'>
		The final meta isn't 100% right (the evaluation and labels for the disabled components go missing), but this is also basically the solution that I had, and the model should work, at least. I think it's good enough? Merging everything successfully with a provided meta would be tricky.
		</comment>
		<comment id='5' author='Nuccy90' date='2020-10-07T19:36:40Z'>
		Yea, and I think this will be addressed more properly in v3, right...
		</comment>
	</comments>
</bug>