<bug id='938' author='f11r' open_date='2017-03-29T15:30:46Z' closed_time='2017-03-31T11:16:57Z'>
	<summary>spaCy and tcmalloc compiled module leads to "Attempt to free invalid pointer"</summary>
	<description>
Running spacy after importing a module that is linked against tcmalloc_minimal leads to "Attempt to free invalid pointer".
&lt;denchmark-h:h1&gt;Steps to recreate&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;docker run -ti fedora:25 bash
dnf install python3-devel gperftools-devel gcc-c++ redhat-rpm-config
pip3 install spacy==1.7.3 cython==0.25.2
python3 -m spacy download en
cd /tmp
touch testclass.pyx
&lt;/denchmark-code&gt;

Create setup.py with the following content:
&lt;denchmark-code&gt;from setuptools import setup
from setuptools.extension import Extension


setup(
    name='testpackage',
    version='0.1',
    ext_modules=[
        Extension('testclass',
                  ['testclass.pyx'],
                  language='c++',
                  libraries=['tcmalloc_minimal']),
    ]
)
&lt;/denchmark-code&gt;

Run:
&lt;denchmark-code&gt;python3 setup.py install
python3 -c "import testclass; import spacy; spacy.load('en')('Test')"
&lt;/denchmark-code&gt;

Having the imports the other way around runs without problems.
&lt;denchmark-h:h2&gt;gdb dump&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;#0  0x00007ffff6c4992f in raise () from /lib64/libc.so.6
#1  0x00007ffff6c4b52a in abort () from /lib64/libc.so.6
#2  0x00007ffff67d6509 in tcmalloc::Log(tcmalloc::LogMode, char const*, int, tcmalloc::LogItem, tcmalloc::LogItem, tcmalloc::LogItem, tcmalloc::LogItem) () from /lib64/libtcmalloc_minimal.so.4
#3  0x00007ffff67d2319 in (anonymous namespace)::InvalidFree(void*) () from /lib64/libtcmalloc_minimal.so.4
#4  0x00007ffff67e0c2d in tc_free () from /lib64/libtcmalloc_minimal.so.4
#5  0x00007fffd56f8909 in __pyx_t_5spacy_6syntax_6_state_StateC::~__pyx_t_5spacy_6syntax_6_state_StateC (this=0x55555e19dff0, __in_chrg=&lt;optimized out&gt;) at spacy/syntax/parser.cpp:18569
#6  __pyx_f_5spacy_6syntax_6parser_6Parser_parseC (__pyx_v_self=0x7fffe6139d68, __pyx_v_tokens=0x5555615361c8, __pyx_v_length=1, __pyx_v_nr_feat=&lt;optimized out&gt;) at spacy/syntax/parser.cpp:9247
#7  0x00007fffd56e8b3b in __pyx_pf_5spacy_6syntax_6parser_6Parser_6__call__ (__pyx_v_tokens=&lt;optimized out&gt;, __pyx_v_self=0x7fffe6139d68) at spacy/syntax/parser.cpp:7654
#8  __pyx_pw_5spacy_6syntax_6parser_6Parser_7__call__ (__pyx_v_self=0x7fffe6139d68, __pyx_args=&lt;optimized out&gt;, __pyx_kwds=&lt;optimized out&gt;) at spacy/syntax/parser.cpp:7593
#9  0x00007ffff796e167 in PyObject_Call () from /lib64/libpython3.5m.so.1.0
#10 0x00007ffff7a2a5ea in PyEval_EvalFrameEx () from /lib64/libpython3.5m.so.1.0
#11 0x00007ffff7a2f9b3 in _PyEval_EvalCodeWithName () from /lib64/libpython3.5m.so.1.0
#12 0x00007ffff7a2fa93 in PyEval_EvalCodeEx () from /lib64/libpython3.5m.so.1.0
#13 0x00007ffff7999278 in function_call () from /lib64/libpython3.5m.so.1.0
#14 0x00007ffff796e167 in PyObject_Call () from /lib64/libpython3.5m.so.1.0
#15 0x00007ffff7984d04 in method_call () from /lib64/libpython3.5m.so.1.0
#16 0x00007ffff796e167 in PyObject_Call () from /lib64/libpython3.5m.so.1.0
#17 0x00007ffff79cd460 in slot_tp_call () from /lib64/libpython3.5m.so.1.0
#18 0x00007ffff796e167 in PyObject_Call () from /lib64/libpython3.5m.so.1.0
#19 0x00007ffff7a2a5ea in PyEval_EvalFrameEx () from /lib64/libpython3.5m.so.1.0
#20 0x00007ffff7a2f9b3 in _PyEval_EvalCodeWithName () from /lib64/libpython3.5m.so.1.0
#21 0x00007ffff7a2fa93 in PyEval_EvalCodeEx () from /lib64/libpython3.5m.so.1.0
#22 0x00007ffff7a2fabb in PyEval_EvalCode () from /lib64/libpython3.5m.so.1.0
#23 0x00007ffff7a4ed44 in run_mod () from /lib64/libpython3.5m.so.1.0
#24 0x00007ffff7a506e5 in PyRun_StringFlags () from /lib64/libpython3.5m.so.1.0
#25 0x00007ffff7a5074b in PyRun_SimpleStringFlags () from /lib64/libpython3.5m.so.1.0
#26 0x00007ffff7a67957 in Py_Main () from /lib64/libpython3.5m.so.1.0
#27 0x0000555555554b60 in main ()
&lt;/denchmark-code&gt;

	</description>
	<comments>
		<comment id='1' author='f11r' date='2017-03-31T09:59:50Z'>
		Thanks for the clear report. Do you have any insight into what's going on here? I don't call into that library directly, so I'm a bit puzzled.
		</comment>
		<comment id='2' author='f11r' date='2017-03-31T11:16:57Z'>
		One thing that's come to mind is that it is something similar/related to &lt;denchmark-link:https://github.com/gperftools/gperftools/issues/110#issuecomment-133672248&gt;gperftools/gperftools#110 (comment)&lt;/denchmark-link&gt;
, i.e. the memory is allocated by one allocator and then free'd by another. Not sure why the switch would occur.
Also found &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/8146&gt;tensorflow/tensorflow#8146&lt;/denchmark-link&gt;
 and &lt;denchmark-link:https://github.com/ros-perception/vision_opencv/issues/161&gt;ros-perception/vision_opencv#161&lt;/denchmark-link&gt;
 (same issue involving tensorflow and opencv), where the solution was to  .
For our case, running   work, which seems to confirm that it is a "switching of allocators" problem.
Another interesting thing is that when I install spacy via conda the problem also does not occur (using this for my real project, haven't tested it for the minimal example posted above but I don't see any reason why it should be different for that).
&lt;denchmark-h:h1&gt;Bottom line&lt;/denchmark-h&gt;

I don't think this is related to spacy, so closing this issue.
&lt;denchmark-h:h1&gt;Workaround&lt;/denchmark-h&gt;

As a workaround I am currently using spacy installed via conda.
		</comment>
		<comment id='3' author='f11r' date='2018-05-09T00:39:05Z'>
		This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue for related bugs.
		</comment>
	</comments>
</bug>