<bug id='6518' author='kinghuang' open_date='2020-12-07T22:44:08Z' closed_time='2020-12-08T11:17:29Z'>
	<summary>EntityRuler doesn't disable subsequent pipes correctly if it's not named entity_ruler</summary>
	<description>
I have a language pipeline that contains multiple entity rulers and several custom components. Because there are multiple instances of EntityRuler, the model's meta.json has entries resembling the following.
{
  "pipeline": [
    "entity_ruler_1",
    "custom_component",
    "entity_ruler_2"
  ],
  "factories": {
    "entity_ruler_1": "entity_ruler",
    "entity_ruler_2": "entity_ruler"
  }
}
When I add text patterns to entity_ruler_1 and it has to generate docs for them, I expect it to run only the pipeline up to itself to generate the docs. The EntityRuler accomplishes this by using a context manager to find itself in the pipeline and temporarily disable subsequent components.



spaCy/spacy/pipeline/entityruler.py


        Lines 201 to 204
      in
      52fa46d






 current_index = self.nlp.pipe_names.index(self.name) 



 subsequent_pipes = [ 



 pipe for pipe in self.nlp.pipe_names[current_index + 1 :] 



 ] 





To find itself, it uses self.name as the component name. However, this is set to the name of the factory (entity_ruler), and not its name in the pipeline (entity_ruler_1). As a result, it doesn't find itself and disable subsequent pipes. This is a problem in my pipeline because there are components after the entity ruler that do token splits and merges after the entity ruler, resulting in Doc objects that won't match while at the ruler.
In general, there isn't an obvious way for any component to know its own name in a pipeline without looping over all the components in a language pipeline.
&lt;denchmark-h:h2&gt;How to reproduce the behaviour&lt;/denchmark-h&gt;

This example uses a custom pipeline component that simply throws an exception to illustrate that it's not disabled.
from spacy.lang.en import English
from spacy.language import component

@component("custom")
def custom_component(doc):
	raise Exception("Called custom_component.")


nlp = English()

ruler = nlp.create_pipe("entity_ruler")
nlp.add_pipe(ruler, name="entity_ruler_1")

custom = nlp.create_pipe("custom")
nlp.add_pipe(custom, after="entity_ruler_1")

ruler.add_patterns([{"label": "MY_LABEL", "pattern": "Some text."}])
&lt;denchmark-code&gt;Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/usr/local/lib/python3.8/site-packages/spacy/pipeline/entityruler.py", line 222, in add_patterns
    for label, pattern, ent_id in zip(
  File "/usr/local/lib/python3.8/site-packages/spacy/language.py", line 829, in pipe
    for doc in docs:
  File "/usr/local/lib/python3.8/site-packages/spacy/language.py", line 1150, in _pipe
    doc = proc(doc, **kwargs)
  File "&lt;stdin&gt;", line 3, in custom_component
Exception: Called custom_component.
&lt;/denchmark-code&gt;

&lt;denchmark-h:h2&gt;Your Environment&lt;/denchmark-h&gt;


spaCy version: 2.3.2
Platform: Linux-4.19.121-linuxkit-x86_64-with-glibc2.2.5
Python version: 3.8.6

	</description>
	<comments>
		<comment id='1' author='kinghuang' date='2020-12-08T09:00:30Z'>
		Thanks for the report, we'll have a look!
		</comment>
	</comments>
</bug>