<bug id='4098' author='svlandeg' open_date='2019-08-08T14:09:12Z' closed_time='2019-10-15T08:32:45Z'>
	<summary>Flaky matcher test and ghost IDs</summary>
	<description>
When merging PR &lt;denchmark-link:https://github.com/explosion/spaCy/pull/4097&gt;#4097&lt;/denchmark-link&gt;
 we ran into an error for &lt;denchmark-link:https://github.com/explosion/spaCy/blob/master/spacy/tests/regression/test_issue1501-2000.py#L319&gt;test_issue_1971_4 &lt;/denchmark-link&gt;
 which was resolved after restarting. What &lt;denchmark-link:https://dev.azure.com/explosion-ai/Public/_build/results?buildId=1276&gt;happened&lt;/denchmark-link&gt;
 is that test, which is supposed to produce 1 match like , produced 1 for each token instead: . I can't reproduce the error on my own system, even though I also run Windows and Python 3.6.
Note that the unit test has a comment:
# Uncommenting this caused a segmentation fault
After discussing with &lt;denchmark-link:https://github.com/ines&gt;@ines&lt;/denchmark-link&gt;
, this seems related to previous issues &lt;denchmark-link:https://github.com/explosion/spaCy/issues/3839&gt;#3839&lt;/denchmark-link&gt;
 and &lt;denchmark-link:https://github.com/explosion/spaCy/issues/3291&gt;#3291&lt;/denchmark-link&gt;
, where the matcher was producing "ghost matches" with IDs that weren't in the string store.
Possibly, the fix that was supposed to resolve the original issue (matcher segfault) didn't fully fix it...
Not very clear on how to proceed here because it's so difficult to test, but we wanted to record this for future reference.
	</description>
	<comments>
		<comment id='1' author='svlandeg' date='2019-08-08T14:12:50Z'>
		More background: &lt;denchmark-link:https://github.com/explosion/spaCy/issues/1971&gt;#1971&lt;/denchmark-link&gt;

		</comment>
		<comment id='2' author='svlandeg' date='2019-08-21T21:44:29Z'>
		Again &lt;denchmark-link:https://dev.azure.com/explosion-ai/Public/_build/results?buildId=1458&amp;view=logs&gt;weird behaviour&lt;/denchmark-link&gt;
 with the tests running Windows and Python 3.6, this time the flaky failing test is &lt;denchmark-link:https://github.com/explosion/spaCy/issues/3839&gt;#3839&lt;/denchmark-link&gt;
 (noted earlier to be related)

Traceback (most recent call last):
File "D:\a\1\s\spacy\tests\regression\test_issue3839.py", line 17, in test_issue3839
assert matches[0][0] == en_vocab.strings[match_id]
AssertionError: assert 10304252664499679735 == 11920309760829426267

		</comment>
		<comment id='3' author='svlandeg' date='2019-08-23T13:43:22Z'>
		Do we believe this resolved by &lt;denchmark-link:https://github.com/explosion/spaCy/pull/4179&gt;#4179&lt;/denchmark-link&gt;
, or should we keep this open?
		</comment>
		<comment id='4' author='svlandeg' date='2019-08-23T14:39:45Z'>
		Maybe assume it's resolved and reopen if it turns out it's not? ðŸ˜… Alternatively, we could wait for a week or two and if we don't get a random ghost match test failure, assume it's resolved?
		</comment>
		<comment id='5' author='svlandeg' date='2019-08-26T21:13:58Z'>
		Sure :-)
I'll keep a close watch and if anything happens again, we'll reopen ;-)
		</comment>
		<comment id='6' author='svlandeg' date='2019-08-31T11:52:13Z'>
		This flaky behaviour is still here :(
PR &lt;denchmark-link:https://github.com/explosion/spaCy/pull/4219&gt;#4219&lt;/denchmark-link&gt;
 &lt;denchmark-link:https://dev.azure.com/explosion-ai/Public/_build/results?buildId=1602&gt;failed &lt;/denchmark-link&gt;
 on Windows with Python 3.6 with

______________________________ test_issue_1971_4 ______________________________
Traceback (most recent call last):
File "D:\a\1\s\spacy\tests\regression\test_issue1501-2000.py", line 331, in test_issue_1971_4
assert len(matches) == 1
AssertionError: assert 2 == 1

where 2 = len([(10304252440187197422, 0, 2), (10304252440187197422, 1, 3)])


and on Windows with Python 3.7 with

_______________________________ test_issue2464 ________________________________
Traceback (most recent call last):
File "D:\a\1\s\spacy\tests\regression\test_issue2001-2500.py", line 133, in test_issue2464
assert len(matches) == 3
AssertionError: assert 2 == 3

where 2 = len([(10304315948257444260, 0, 1), (10304315948257444260, 1, 2)])


		</comment>
		<comment id='7' author='svlandeg' date='2019-09-03T09:25:42Z'>
		Another puzzling one just now on &lt;denchmark-link:https://github.com/explosion/spaCy/pull/4219&gt;#4219&lt;/denchmark-link&gt;
. Windows 3.7 only, likely producing a ghost ID:
&lt;denchmark-code&gt;___________________ test_matcher_sets_return_correct_tokens ___________________
Traceback (most recent call last):
  File "D:\a\1\s\spacy\tests\matcher\test_matcher_logic.py", line 144, in test_matcher_sets_return_correct_tokens
    texts = [Span(doc, s, e, label=L).text for L, s, e in matches]
  File "D:\a\1\s\spacy\tests\matcher\test_matcher_logic.py", line 144, in &lt;listcomp&gt;
    texts = [Span(doc, s, e, label=L).text for L, s, e in matches]
  File "span.pyx", line 118, in spacy.tokens.span.Span.__cinit__
ValueError: [E084] Error assigning label ID 9223502301541240625 to span: not in StringStore.
&lt;/denchmark-code&gt;

 &lt;denchmark-link:https://dev.azure.com/explosion-ai/Public/_build/results?buildId=1790&amp;view=logs&gt;Another one&lt;/denchmark-link&gt;
:
&lt;denchmark-code&gt;================================== FAILURES ===================================
______________________________ test_issue_1971_3 ______________________________
Traceback (most recent call last):
  File "D:\a\1\s\spacy\tests\regression\test_issue1501-2000.py", line 314, in test_issue_1971_3
    matches = sorted((en_vocab.strings[m_id], s, e) for m_id, s, e in matcher(doc))
  File "D:\a\1\s\spacy\tests\regression\test_issue1501-2000.py", line 314, in &lt;genexpr&gt;
    matches = sorted((en_vocab.strings[m_id], s, e) for m_id, s, e in matcher(doc))
  File "strings.pyx", line 138, in spacy.strings.StringStore.__getitem__
KeyError: "[E018] Can't retrieve string for hash '10304393180431526374'. This usually refers to an issue with the `Vocab` or `StringStore`."
&lt;/denchmark-code&gt;

		</comment>
		<comment id='8' author='svlandeg' date='2019-09-16T11:39:52Z'>
		Thinking about this some more ... ghost id's could exist after calling vocab.strings[my_string] directly to retrieve a hash. This will succeed even if my_string is not known in the vocab. This is in contrast with calling vocab[my_string] which will actually add my_string to the string store (if it was previously unknown).
So perhaps we need to carefully review all cases (there's quite a few) that call vocab.strings[my_string] directly?
		</comment>
		<comment id='9' author='svlandeg' date='2019-10-07T15:57:12Z'>
		A new one this time on Windows, Python 3.7 (&lt;denchmark-link:https://dev.azure.com/explosion-ai/Public/_build/results?buildId=2113&gt;build&lt;/denchmark-link&gt;
):
&lt;denchmark-code&gt;    def test_issue4120(en_vocab):
        """Test that matches without a final {OP: ?} token are returned."""
        matcher = Matcher(en_vocab)
        matcher.add("TEST", None, [{"ORTH": "a"}, {"OP": "?"}])
        doc1 = Doc(en_vocab, words=["a"])
        assert len(matcher(doc1)) == 1  # works
    
        doc2 = Doc(en_vocab, words=["a", "b", "c"])
&gt;       assert len(matcher(doc2)) == 2  # fixed
E       assert 1 == 2
E        +  where 1 = len([(9799931953538066242, 0, 1)])
E        +    where [(9799931953538066242, 0, 1)] = &lt;spacy.matcher.matcher.Matcher object at 0x000001BA0F5D95C8&gt;(a b c )
&lt;/denchmark-code&gt;

 Seems to occur much more frequently now? Next build, 3.5 Windows (&lt;denchmark-link:https://dev.azure.com/explosion-ai/Public/_build/results?buildId=2116&amp;view=logs&amp;jobId=b6689c10-1f59-59eb-4080-b69aa5b281ce&gt;see here&lt;/denchmark-link&gt;
).
&lt;denchmark-code&gt;================================== FAILURES ===================================
___________________ test_matcher_sets_return_correct_tokens ___________________

en_vocab = &lt;spacy.vocab.Vocab object at 0x000001FC685BE348&gt;

    def test_matcher_sets_return_correct_tokens(en_vocab):
        matcher = Matcher(en_vocab)
        patterns = [
            [{"LOWER": {"IN": ["zero"]}}],
            [{"LOWER": {"IN": ["one"]}}],
            [{"LOWER": {"IN": ["two"]}}],
        ]
        matcher.add("TEST", None, *patterns)
        doc = Doc(en_vocab, words="zero one two three".split())
        matches = matcher(doc)
&gt;       texts = [Span(doc, s, e, label=L).text for L, s, e in matches]

C:\hostedtoolcache\windows\Python\3.5.4\x64\lib\site-packages\spacy\tests\matcher\test_matcher_logic.py:144: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
C:\hostedtoolcache\windows\Python\3.5.4\x64\lib\site-packages\spacy\tests\matcher\test_matcher_logic.py:144: in &lt;listcomp&gt;
    texts = [Span(doc, s, e, label=L).text for L, s, e in matches]
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

&gt;   ???
E   ValueError: [E084] Error assigning label ID 9224158191957360250 to span: not in StringStore.
&lt;/denchmark-code&gt;

		</comment>
		<comment id='10' author='svlandeg' date='2019-10-09T11:28:01Z'>
		Have also been seeing quite a lot of failures on  (e.g. recently &lt;denchmark-link:https://dev.azure.com/explosion-ai/Public/_build/results?buildId=2158&gt;here&lt;/denchmark-link&gt;
)

def test_issue3879(en_vocab):
doc = Doc(en_vocab, words=["This", "is", "a", "test", "."])
assert len(doc) == 5
pattern = [{"ORTH": "This", "OP": "?"}, {"OP": "?"}, {"ORTH": "test"}]
matcher = Matcher(en_vocab)
matcher.add("TEST", None, pattern)
assert len(matcher(doc)) == 2  # fails because of a FP match 'is a test'
E       assert 5 == 2
E        +  where 5 = len([(10304289264116413296, 0, 1), (10304289264116413296, 1, 1), (10304289264116413296, 2, 2), (10304289264116413296, 3, 3), (10304289264116413296, 4, 4)])
E        +    where [(10304289264116413296, 0, 1), (10304289264116413296, 1, 1), (10304289264116413296, 2, 2), (10304289264116413296, 3, 3), (10304289264116413296, 4, 4)] = &lt;spacy.matcher.matcher.Matcher object at 0x000001AF50CD1BC8&gt;(This is a test . )

		</comment>
		<comment id='11' author='svlandeg' date='2019-10-10T06:25:43Z'>
		Another matcher-related test &lt;denchmark-link:https://dev.azure.com/explosion-ai/Public/_build/results?buildId=2182&gt;failing&lt;/denchmark-link&gt;
 :(

def test_issue3951(en_vocab):
"""Test that combinations of optional rules are matched correctly."""
matcher = Matcher(en_vocab)
pattern = [
{"LOWER": "hello"},
{"LOWER": "this", "OP": "?"},
{"OP": "?"},
{"LOWER": "world"},
]
matcher.add("TEST", None, pattern)
doc = Doc(en_vocab, words=["Hello", "my", "new", "world"])
matches = matcher(doc)

  assert len(matches) == 0


E       assert 1 == 0
E        +  where 1 = len([(1046765068364475028, 0, 1)])

		</comment>
		<comment id='12' author='svlandeg' date='2019-10-10T08:31:28Z'>
		I was planning to open a new issue but I am seeing following exception randomly but looks the same problem mentioned here.
"[E018] Can't retrieve string for hash '10304854973658986072'. This usually refers to an issue with the Vocab or StringStore."
It happens every few run (same code base/no change).
And I am using matcher with spacy_stanfordnlp. Not sure it is related.
Is it possible it could be related with Bloom Embeddings ?
Spacy version 2.2.0 (same problem 2.1 as well)
		</comment>
		<comment id='13' author='svlandeg' date='2019-10-10T08:33:29Z'>
		Hi &lt;denchmark-link:https://github.com/mehmetilker&gt;@mehmetilker&lt;/denchmark-link&gt;
, thanks for the report! Could be related. Can you give a bit more information on your system &amp; Python version? And the specific code that runs into this issue, preferably with an example text?
		</comment>
		<comment id='14' author='svlandeg' date='2019-10-10T13:55:31Z'>
		Hopeful that PR &lt;denchmark-link:https://github.com/explosion/spaCy/pull/4423&gt;#4423&lt;/denchmark-link&gt;
 may have fixed this. Let's keep this open for a week orso and close if we don't see any more ghost matches!
		</comment>
		<comment id='15' author='svlandeg' date='2019-10-11T05:31:07Z'>
		Hi &lt;denchmark-link:https://github.com/svlandeg&gt;@svlandeg&lt;/denchmark-link&gt;

Please find version details as follows.
&lt;denchmark-h:h2&gt;Info about spaCy&lt;/denchmark-h&gt;


spaCy version: 2.2.0
Platform: Windows-10-10.0.18362-SP0
Python version: 3.7.4

I am trying to prepare an example code but my rules are more then 5000.
I am adding them as CITY, COUNTRY, TITLE etc...
&lt;denchmark-code&gt;matcher = Matcher(nlp.vocab)
matcher.add("COUNTRY", None, *[
    [{'LEMMA': 'Angola'}],
    [{'LEMMA': 'SERBIA'}]
])

matcher.add("CITY", None, *[
    [{'LEMMA': 'Tokyo'}],
    [{'LEMMA': 'Bogota'}]
])
&lt;/denchmark-code&gt;

I am sure it is not related with sentence.
Matcher gives me the start and end token index but when try to access label, throws an exception I mentioned above.
for (match_id, start, end) in matches:
         try:
               label = doc.vocab.strings[match_id]
         except KeyError as err:
              print(err)
When it happens throws exception only for COUNTRY or only for CITY label.
Maybe  I should check vocabulary first for those labels and add them if there are not in vocab.
I will wait for a release to try.
		</comment>
		<comment id='16' author='svlandeg' date='2019-10-15T08:26:14Z'>
		&lt;denchmark-link:https://github.com/mehmetilker&gt;@mehmetilker&lt;/denchmark-link&gt;
 : thanks for the details. The matcher shouldn't be returning 's that are not known in the Vocab, so that is definitely a bug. If it's an option for you to build spaCy from source, I would love to hear whether the current version on master fixes your problems. If not, let's check in the next minor patch release.
If the problem persists, feel free to open a specific issue.
		</comment>
		<comment id='17' author='svlandeg' date='2019-10-15T08:32:41Z'>
		Meanwhile, I've seen no ghost matches anymore in the open PRs since PR &lt;denchmark-link:https://github.com/explosion/spaCy/pull/4423&gt;#4423&lt;/denchmark-link&gt;
 was merged. Tentatively closing this issue, but will keep an eye out. Here's to hoping we don't have to reopen  
		</comment>
		<comment id='18' author='svlandeg' date='2019-10-15T08:52:22Z'>
		&lt;denchmark-link:https://github.com/svlandeg&gt;@svlandeg&lt;/denchmark-link&gt;
 The thing is I could not understand why it happens randomly. If it is not in vocab it should throw exception on every run.
Another thing is, maybe I am wrong, it is just a label I am assigning to the rule. It is not related with the text that I am parsing. Why it has to be in vocab?
Trying to build... Unfortunately I am working on windows and every few months I need to refresh my installation. When I install Visual Studio I need to find right C++ dependency installation combination and I forgot what I have installed last time.
I still could not install v2.2.1 either. Building Windows binary wheel takes sometimes I guess.
Anyway, I will try and let you know if there is new findings.
Thank you for letting me know.
		</comment>
		<comment id='19' author='svlandeg' date='2019-10-15T09:03:03Z'>
		&lt;denchmark-link:https://github.com/mehmetilker&gt;@mehmetilker&lt;/denchmark-link&gt;
 : I know, it's quite a pain to get the right compiler stuff set up for Windows... (I need to format my laptop too but have been reluctanct exactly because of this!)
The original issue described here (ghost IDs) were very much the same random erratic behaviour as what you describe. We found a spot in the code where we were reading corrupt data from memory which would every once in a while result in this type of behaviour. So I really do think you're issue was the same and should also be resolved with the latest PR. In the meantime I'm afraid there's no easy workaround.
&lt;denchmark-link:https://github.com/honnibal&gt;@honnibal&lt;/denchmark-link&gt;
 &amp; &lt;denchmark-link:https://github.com/ines&gt;@ines&lt;/denchmark-link&gt;
 : should we include this patch in a minor release anytime soon?
		</comment>
		<comment id='20' author='svlandeg' date='2019-10-28T15:00:28Z'>
		I am still getting a problem with the match_id missing from doc.vocab.strings
sentence = 'I misunderstood you'
doc = nlp(sentence)
matches = PSYCH_VERB_MATCHER(doc)
match_id, start, end = matches[0]
doc.vocab.strings[match_id]
&lt;denchmark-h:h2&gt;Gives the following&lt;/denchmark-h&gt;

KeyError                                  Traceback (most recent call last)
 in 
3 matches = PSYCH_VERB_MATCHER(doc)
4 match_id, start, end = matches[0]
----&gt; 5 doc.vocab.strings[match_id]
strings.pyx in spacy.strings.StringStore.getitem()
KeyError: "[E018] Can't retrieve string for hash '1840701988003946082'. This usually refers to an issue with the Vocab or StringStore."
		</comment>
		<comment id='21' author='svlandeg' date='2019-11-27T15:55:25Z'>
		This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue for related bugs.
		</comment>
	</comments>
</bug>