<bug id='1537' author='manvithn' open_date='2017-11-10T08:33:57Z' closed_time='2018-12-30T14:18:34Z'>
	<summary>Segmentation fault after Span.as_doc</summary>
	<description>
When I run the following code, I get a segmentation fault:
&lt;denchmark-code&gt;&gt;&gt;&gt; import spacy
&gt;&gt;&gt; nlp = spacy.load('en')
&gt;&gt;&gt; doc = nlp("The sky is blue. The man is pink. The dog is purple.")
&gt;&gt;&gt; sents = [s.as_doc() for s in doc.sents]
&gt;&gt;&gt; list(sents[0].noun_chunks)
[The sky]
&gt;&gt;&gt; list(sents[1].noun_chunks)
Segmentation fault: 11
&lt;/denchmark-code&gt;

Why do I get this behavior and how do I fix it?
&lt;denchmark-h:h2&gt;Your Environment&lt;/denchmark-h&gt;

&lt;denchmark-h:h2&gt;Info about spaCy&lt;/denchmark-h&gt;


spaCy version: 2.0.2
Platform: Darwin-16.7.0-x86_64-i386-64bit
Python version: 3.6.3
Models: en

	</description>
	<comments>
		<comment id='1' author='manvithn' date='2017-11-10T11:30:30Z'>
		Thanks for the report. A segmentation fault is always a bug â€“ will investigate this!
		</comment>
		<comment id='2' author='manvithn' date='2018-01-09T17:23:11Z'>
		I am having the same issue here -- Spacy 2.0.5, Ubuntu 16.04.3 LTS, Python 3.6.3 (Anaconda distribution).
		</comment>
		<comment id='3' author='manvithn' date='2018-01-15T14:29:43Z'>
		Thanks for the reports.
The issue occurs when we try to use some parts of the dependency parse in Doc objects created from span.as_doc(). The .as_doc() method is creating the Doc objects as a view. The new Doc holds a pointer to part of the underlying TokenC* array. The Doc object thinks it's holding the start of the array, but it isn't. Mostly this doesn't matter because the TokenC uses relative offsets for the head attribute. Because the offset is relative, it doesn't matter that we're in the middle of the array, instead of the start.
However, there are three TokenC attributes that do refer to absolute positions:


token.idx, the character offset. This one doesn't matter for this bug, but will for other situations such as creating doc.char_span() objects


token.l_edge: The leftmost edge of the token's subtree. This is used in token.lefts, which is called by token.children, and ultimately in doc.noun_chunks. This is what triggers the bug.


token.r_edge: Same as l_edge, but for rightmost edge.


I think the edge features probably should be relative positions, for consistency. However, the idx attribute will still be incorrect, so I think the idea of having span.as_doc() return a view is just bad. We should create a new copy of the TokenC data for the new doc, so that we can set all the attributes correctly.
The only alternative would be for Doc objects to know they might be "views", from a span of a Doc. This would be a huge mess; I think we can rule it out right away.
		</comment>
		<comment id='4' author='manvithn' date='2018-12-30T14:18:34Z'>
		Fixed!
		</comment>
		<comment id='5' author='manvithn' date='2019-01-29T14:53:22Z'>
		This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue for related bugs.
		</comment>
	</comments>
</bug>