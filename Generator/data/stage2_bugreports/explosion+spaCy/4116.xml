<bug id='4116' author='Gonzalo933' open_date='2019-08-14T07:39:16Z' closed_time='2019-08-20T14:25:30Z'>
	<summary>Raising: [E084] Error assigning label ID even with string added to vocab</summary>
	<description>
I am trying to add a new match to doc.ents but Spacy raises an error after executing span = Span(doc, start, end, label=match_id):

*** ValueError: [E084] Error assigning label ID 10305103465695748238 to span: not in StringStore.

I tried to add the string doc[start:end] to the vocab with nlp.vocab.strings.add(str(doc[start:end]) but first I get returned a different hash

1395163539440239885

and second I still get the same error. So it does seems that the match text is different from doc[start:end] (which is: "No fiebre").
This is extra weird as the same match was added yesterday without raising any errors

Operating System: Windows 10
Python Version Used: 3.7.3
spaCy Version Used: 2.1.4
Environment Information: N/A

	</description>
	<comments>
		<comment id='1' author='Gonzalo933' date='2019-08-14T08:06:07Z'>
		I located the error. The problem was with the following pattern:
[{'lower': 'no'}, {'REGEX': '(?:presenta|observa|tiene|signos\\sde)', 'OP': '?'}, {'ENT_TYPE': {'REGEX': 'HP\\:\\d+$'}}]
So I changed it to this equivalent one ( I could also remove the typo, the double slashes from \\sde):
[{'lower': 'no'}, {'REGEX': '(?:presenta|observa|tiene|signos)', 'OP': '?'}, {'lower': 'de', 'OP': '?'}, {'ENT_TYPE': {'REGEX': 'HP\\:\\d+$'}}]
However, I don't think the exception I was getting was describing the real problem. I will leave this open in case developers need more information about this
		</comment>
		<comment id='2' author='Gonzalo933' date='2019-08-14T08:37:24Z'>
		I think the real problem here that spaCy is complaining about is the  that you're trying to assign as the  â€“ not the text of the matched span. This should happen by default, so you might be running into a similar problem as the one described in &lt;denchmark-link:https://github.com/explosion/spaCy/issues/4098&gt;#4098&lt;/denchmark-link&gt;
, where the matcher produces "ghost IDs" that are not in the vocab. Can you check what that match ID (name of the pattern) is?
There's also another potential problem in the second token of your pattern:
&lt;denchmark-code&gt;{'REGEX': '(?:presenta|observa|tiene|signos)', 'OP': '?'}
&lt;/denchmark-code&gt;

Here, you're using REGEX as a top-level key â€“Â but it always needs to refer to a token attribute you want to apply the expression to (e.g. like you do with ENT_TYPE). So this pattern would be interpreted as {'OP': '?'}.
		</comment>
		<comment id='3' author='Gonzalo933' date='2019-08-14T10:07:56Z'>
		
Can you check what that match ID (name of the pattern) is?

This is extremely weird, this bug seems not to be deterministic, sometimes it happens and sometimes it doesn't even running the same code. The name for the pattern with match_id = 13055779130471031426 is the string "no".

Here, you're using REGEX as a top-level key â€“ but it always needs to refer to a token attribute you want to apply the expression to (e.g. like you do with ENT_TYPE). So this pattern would be interpreted as {'OP': '?'}.

But even when using REGEX as top-level key the pattern is working, it matches phrases like
no presenta signos de XXX 
(where XXX is my custom ENT_TYPE),
but no phrases like:
no presenta otros de XXX
so it's working even if it shouldn't. However, I will change it to make it correct
&lt;denchmark-code&gt;[{'lower': 'no'},
{'lower': {'IN': ['presenta', 'observa', 'tiene', 'signos']},'OP': '?'},
{'lower': 'de', 'OP': '?'},
{'ENT_TYPE': {'REGEX': 'HP\\:\\d+$'}}]
&lt;/denchmark-code&gt;

A bit off-topic then, but can REGEX be used with lower? will this pattern be the same as the other ones:
&lt;denchmark-code&gt;[{'lower': 'no'},
{'lower': {'REGEX': '(?:presenta|observa|tiene|signos)'}, 'OP': '?'},
{'lower': 'de', 'OP': '?'},
{'ENT_TYPE': {'REGEX': 'HP\\:\\d+$'}}]
&lt;/denchmark-code&gt;

(it works but I don't know if it's correct)
		</comment>
		<comment id='4' author='Gonzalo933' date='2019-08-20T13:20:54Z'>
		Thanks for checking!

The name for the pattern with match_id = 13055779130471031426 is the string "no".

That's very interesting... so it somehow ends up with a match with the ID of the value of a pattern attribute ðŸ¤”
Wait, I misread: The ID reported in your error message is 10305103465695748238. That's the one that's not found in the string store. If you've actually called your pattern "no", that shouldn't be a problem.

This is extremely weird, this bug seems not to be deterministic, sometimes it happens and sometimes it doesn't even running the same code.

Okay, this also sounds very much like &lt;denchmark-link:https://github.com/explosion/spaCy/issues/4098&gt;#4098&lt;/denchmark-link&gt;
. That's also the reason it took us a while to notice: sometimes our tests would just randomly fail and then never again. I wouldn't be surprised if all of this is related to the same underlying issue.
To address the other questions:

so it's working even if it shouldn't. However, I will change it to make it correct

I think what you've observed here is a side-effect that just happens to make it match the correct thing. The top-level REGEX key will be ignored, so the token pattern will be interpreted as {} (meaning "any token").

A bit off-topic then, but can REGEX be used with lower?

Yes, the REGEX operator can be used with any property that has a string value. The expression will then be matched on the string value of the attribute.
 Merging this with &lt;denchmark-link:https://github.com/explosion/spaCy/issues/4098&gt;#4098&lt;/denchmark-link&gt;
.
		</comment>
		<comment id='5' author='Gonzalo933' date='2019-09-19T14:42:46Z'>
		This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue for related bugs.
		</comment>
	</comments>
</bug>