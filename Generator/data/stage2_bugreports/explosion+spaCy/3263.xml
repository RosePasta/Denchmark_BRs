<bug id='3263' author='tamarit' open_date='2019-02-12T13:59:01Z' closed_time='2019-02-25T18:31:30Z'>
	<summary>batch_size parameter is hard-coded in nlp.evaluate()</summary>
	<description>
&lt;denchmark-h:h2&gt;How to reproduce the behaviour&lt;/denchmark-h&gt;

Hi,
first of all congratulations for your nice tool. It is really powerful.
I was training a model using CLI commands with relatively small dataset. Then, I increased the size of the training dataset (and consequently of the development dataset) and start getting problems. It was training till suddenly stopped at ~26%, then printed some "tcmalloc: large alloc ..." and stopped. My computer is 8 GB of RAM, so I ask a workmate to run the same with his computer with 32GB of RAM. He could run it perfectly. So the problem was related to the memory.
After some code inspection, prints ,etc I discovered that the problem was here:
&lt;denchmark-link:https://github.com/explosion/spaCy/blob/master/spacy/language.py#L485&gt;https://github.com/explosion/spaCy/blob/master/spacy/language.py#L485&lt;/denchmark-link&gt;

The hard-coded batch_size value is too big for my system, so I modified the module placing a smaller value and then I could use the CLI for training without any problem.
Additionally, the fact I commented above that the training stopped at ~26%, is due to that it is discarding a lot of documents due to max_doc_len default value. This is expected but percentage should be updated accordingly and it is not. This problem  is related to the way the pbar is updated here:
&lt;denchmark-link:https://github.com/explosion/spaCy/blob/master/spacy/cli/train.py#L135&gt;https://github.com/explosion/spaCy/blob/master/spacy/cli/train.py#L135&lt;/denchmark-link&gt;

which is not correct since it should take into account the unfiltered batch. I would suggest to add a batch_initial variable just before replacing the value of batch:
&lt;denchmark-link:https://github.com/explosion/spaCy/blob/master/spacy/cli/train.py#L129&gt;https://github.com/explosion/spaCy/blob/master/spacy/cli/train.py#L129&lt;/denchmark-link&gt;

So it could be used afterwards when updating pbar.
Thanks in advance!
&lt;denchmark-h:h2&gt;Info about spaCy&lt;/denchmark-h&gt;


Python version: 3.5.2
Platform: Linux-4.4.0-45-generic-x86_64-with-Ubuntu-16.04-xenial
spaCy version: 2.0.18
Models: es

	</description>
	<comments>
		<comment id='1' author='tamarit' date='2019-02-17T11:53:20Z'>
		I think these issues should be resolved in v2.1. Could you try again with spacy-nightly and let me know how you go?
		</comment>
		<comment id='2' author='tamarit' date='2019-02-19T09:26:09Z'>
		Thanks &lt;denchmark-link:https://github.com/honnibal&gt;@honnibal&lt;/denchmark-link&gt;
 for your prompt answer.
I have tried spacy-nightly version and I would say that obtained results are even worse with it than with stable version. Using Google Colab with the nigtly version and running the command:
&lt;denchmark-code&gt;!python3 -m spacy train es  /content/drive/My\ Drive/models /content/drive/My\ Drive/data/ner/train.json /content/drive/My\ Drive/data/ner/test.json -p ner -n 20
&lt;/denchmark-code&gt;

I obtained the following output:
&lt;denchmark-code&gt;Training pipeline: ['ner']
Starting with blank model 'es'
Counting training words (limit=0)

Itn    Dep Loss    NER Loss      UAS    NER P    NER R    NER F    Tag %  Token %  CPU WPS  GPU WPS
---  ----------  ----------  -------  -------  -------  -------  -------  -------  -------  -------
tcmalloc: large alloc 2429968384 bytes == 0xcf56000 @  0x7f4878624001 0x7f48761abf25 0x7f48762107e1 0x7f48762128bf 0x7f48762aad68 0x566103 0x7f47e4a071e9 0x566103 0x7f47e6e4c0d8 0x566103 0x7f47e6e65e34 0x555421 0x7f47e6e2cd4a 0x566103 0x7f47e6e3b922 0x7f47e6e58058 0x7f47e6e23a1a 0x7f47e6e2db15 0x585784 0x5859be 0x555421 0x5a730c 0x503073 0x506859 0x504c28 0x58650d 0x59ebbe 0x507c17 0x504c28 0x502540 0x502f3d
tcmalloc: large alloc 9301024768 bytes == 0x7f45a299a000 @  0x7f4878624001 0x7f48761abf25 0x7f48762107e1 0x7f48762128bf 0x7f48762aad68 0x566103 0x7f47e4a071e9 0x566103 0x7f47e6e4c0d8 0x566103 0x7f47e6e65e34 0x555421 0x7f47e6e2cd4a 0x566103 0x7f47e6e3b922 0x7f47e6e58058 0x7f47e6e23a1a 0x7f47e6e2db15 0x585784 0x5859be 0x555421 0x5a730c 0x503073 0x506859 0x504c28 0x58650d 0x59ebbe 0x507c17 0x504c28 0x502540 0x502f3d
tcmalloc: large alloc 1800478720 bytes == 0xcf56000 @  0x7f4878624001 0x7f48761abf25 0x7f48762107e1 0x7f48762128bf 0x7f48762aad68 0x566103 0x7f47e4a071e9 0x566103 0x7f47e6e4c0d8 0x566103 0x7f47e6e65e34 0x555421 0x7f47e6e2cd4a 0x566103 0x7f47e6e3b922 0x7f47e6e58058 0x7f47e6e23a1a 0x7f47e6e2db15 0x585784 0x5859be 0x555421 0x5a730c 0x503073 0x506859 0x504c28 0x58650d 0x59ebbe 0x507c17 0x504c28 0x502540 0x502f3d
tcmalloc: large alloc 5500887040 bytes == 0x7f45a299a000 @  0x7f4878624001 0x7f48761abf25 0x7f48762107e1 0x7f48762128bf 0x7f48762aad68 0x566103 0x7f47e4a071e9 0x566103 0x7f47e6e4c0d8 0x566103 0x7f47e6e65e34 0x555421 0x7f47e6e2cd4a 0x566103 0x7f47e6e3b922 0x7f47e6e58058 0x7f47e6e23a1a 0x7f47e6e2db15 0x585784 0x5859be 0x555421 0x5a730c 0x503073 0x506859 0x504c28 0x58650d 0x59ebbe 0x507c17 0x504c28 0x502540 0x502f3d
tcmalloc: large alloc 2530091008 bytes == 0x7f45a299a000 @  0x7f4878624001 0x7f48761abf25 0x7f48762107e1 0x7f48762128bf 0x7f48762aad68 0x566103 0x7f47e4a071e9 0x566103 0x7f47e6e4c0d8 0x566103 0x7f47e6e65e34 0x555421 0x7f47e6e2cd4a 0x566103 0x7f47e6e3b922 0x7f47e6e58058 0x7f47e6e23a1a 0x7f47e6e2db15 0x585784 0x5859be 0x555421 0x5a730c 0x503073 0x506859 0x504c28 0x58650d 0x59ebbe 0x507c17 0x504c28 0x502540 0x502f3d
tcmalloc: large alloc 21905645568 bytes == 0x7f407fac0000 @  0x7f4878624001 0x7f48761abf25 0x7f48762107e1 0x7f48762128bf 0x7f48762aad68 0x566103 0x7f47e4a071e9 0x566103 0x7f47e6e4c0d8 0x566103 0x7f47e6e65e34 0x555421 0x7f47e6e2cd4a 0x566103 0x7f47e6e3b922 0x7f47e6e58058 0x7f47e6e23a1a 0x7f47e6e2db15 0x585784 0x5859be 0x555421 0x5a730c 0x503073 0x506859 0x504c28 0x58650d 0x59ebbe 0x507c17 0x504c28 0x502540 0x502f3d
^C
&lt;/denchmark-code&gt;

As we can see, there is not percentage (one of the reported problems) and it stills being suddenly stopped (last line ^C is the way Google Colab indicate this). After some code inspection of the spacy-nightly code , I think that maybe the unreliable percentages are fixed (since max_doc_length has been removed) while the hard-coded batch-size in evaluate method (in language.py) is still there (that's probably what is making the whole computation to stop).
Thanks is advance.
		</comment>
		<comment id='3' author='tamarit' date='2019-02-25T18:31:30Z'>
		Added the setting in Language.evaluate()
		</comment>
		<comment id='4' author='tamarit' date='2019-03-27T18:31:50Z'>
		This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue for related bugs.
		</comment>
	</comments>
</bug>