<bug id='4936' author='Frojdholm' open_date='2020-01-22T22:30:01Z' closed_time='2020-02-03T12:12:51Z'>
	<summary>Possible bug in spacy.gold.align</summary>
	<description>
The b2a mapping is not one-to-one when the longer sequence is passed as tokens_a. Additionally the many-to-one mappings are only created when the longer sequence is passed as tokens_a.
From my understanding similar to how  is explained in the &lt;denchmark-link:https://spacy.io/api/goldparse&gt;documentation&lt;/denchmark-link&gt;


If a2b[3] == 2, that means that tokens_a[3] aligns to tokens_b[2]. If thereâ€™s no one-to-one alignment for a token, it has the value -1.

the same should be true for b2a. If b2a[2] == 3 then tokens_b[2] == tokens_a[3]
&lt;denchmark-h:h2&gt;How to reproduce the behaviour&lt;/denchmark-h&gt;

The following code shows the alignment using a2b.
from spacy.gold import align
import numpy as np

other_tokens = ["obama", "'", "s", "podcast"]
spacy_tokens = ["obama", "'s", "podcast"]

cost, a2b, b2a, a2b_multi, b2a_multi = align(other_tokens, spacy_tokens)

for a, b in enumerate(a2b):
    if b != -1:
        print(f"other_tokens: {other_tokens[a]:&gt;10}\tspacy_tokens: {spacy_tokens[b]:&gt;10}")

# Output:
# other_tokens:      obama        spacy_tokens:      obama
# other_tokens:    podcast        spacy_tokens:    podcast
Testing b2a we get.
for b, a in enumerate(b2a):
    if a != -1:
        print(f"other_tokens: {other_tokens[a]:&gt;10}\tspacy_tokens: {spacy_tokens[b]:&gt;10}")

# Output:
# other_tokens:      obama        spacy_tokens:      obama
# other_tokens:          s        spacy_tokens:         's    &lt;- tokens differ
# other_tokens:    podcast        spacy_tokens:    podcast 
The many-to-one mappings seem to be correct.
print(a2b_multi, b2a_multi)

# Output:
# {1: 1, 2: 1} {}
However, if we switch other_tokens and spacy_tokens the one-to-one mappings are now correct, but the many-to-one mapping is empty.
# switch other_tokens and spacy_tokens
cost, a2b, b2a, a2b_multi, b2a_multi = align(spacy_tokens, other_tokens)

for a, b in enumerate(a2b):
    if b != -1:
        print(f"other_tokens: {other_tokens[b]:&gt;10}\tspacy_tokens: {spacy_tokens[a]:&gt;10}")

# Output:
# other_tokens:      obama        spacy_tokens:      obama
# other_tokens:    podcast        spacy_tokens:    podcast
This time, using b2a, the result is the same as using a2b.
for b, a in enumerate(b2a):
    if a != -1:
        print(f"other_tokens: {other_tokens[b]:&gt;10}\tspacy_tokens: {spacy_tokens[a]:&gt;10}")

# Output:
# other_tokens:      obama        spacy_tokens:      obama
# other_tokens:    podcast        spacy_tokens:    podcast
Many-to-one mapping is now empty.
print(a2b_multi, b2a_multi)

# Output:
# {} {}
&lt;denchmark-h:h2&gt;Your Environment&lt;/denchmark-h&gt;


spaCy version: 2.2.3
Platform: Windows 10
Python version: 3.7.6

	</description>
	<comments>
		<comment id='1' author='Frojdholm' date='2020-01-23T12:15:14Z'>
		Hi, thanks for the report! We're aware of this (&lt;denchmark-link:https://github.com/explosion/spaCy/issues/4525&gt;#4525&lt;/denchmark-link&gt;
) and there's a faster alignment method that will be used in the next version of spacy (&lt;denchmark-link:https://github.com/explosion/spaCy/pull/4526&gt;#4526&lt;/denchmark-link&gt;
). It requires the raw text to match the token orths more closely, but is faster and the multi alignments are correct.
You can use it in v2.2.3 by setting spacy.gold.USE_NEW_ALIGN = True.
		</comment>
		<comment id='2' author='Frojdholm' date='2020-03-10T19:10:14Z'>
		This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue for related bugs.
		</comment>
	</comments>
</bug>