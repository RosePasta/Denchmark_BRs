<bug id='2121' author='hadsed' open_date='2018-03-20T23:05:49Z' closed_time='2018-03-28T21:42:46Z'>
	<summary>`Language.to_bytes()` and pickling are broken</summary>
	<description>
As far as I understand it, spacy strives (promises?) pickle support. But pickling a Language object does not work properly. Here is the error I get for that:
(env) [hadsed@MacBook-Pro nlp]$ ipython
Python 3.6.2 (default, Jul 17 2017, 16:44:45)
Type 'copyright', 'credits' or 'license' for more information
IPython 6.1.0 -- An enhanced Interactive Python. Type '?' for help.

In [1]: import spacy

In [2]: import pickle as pk

In [3]: nlp = spacy.load('en')

In [4]: pk.dumps(nlp)
---------------------------------------------------------------------------
AttributeError                            Traceback (most recent call last)
&lt;ipython-input-4-1d2ddf3fb2ea&gt; in &lt;module&gt;()
----&gt; 1 pk.dumps(nlp)

AttributeError: Can't pickle local object 'FeatureExtracter.&lt;locals&gt;.feature_extracter_fwd'
OK, so that's a problem. But even Language.to_bytes() and/or Language.from_bytes() doesn't work:
(env) [hadsed@MacBook-Pro nlp]$ ipython
Python 3.6.2 (default, Jul 17 2017, 16:44:45)
Type 'copyright', 'credits' or 'license' for more information
IPython 6.1.0 -- An enhanced Interactive Python. Type '?' for help.

In [1]: import spacy

In [2]: nlp = spacy.load('en')

In [3]: b = nlp.to_bytes()

In [4]: nlp2 = spacy.lang.en.Language().from_bytes(b)

In [5]: nlp.meta
Out[5]:
{'accuracy': {'ents_f': 85.2975560875,
  'ents_p': 84.9664503965,
  'ents_r': 85.6312524451,
  'las': 89.800872413,
  'tags_acc': 97.0403350292,
  'token_acc': 99.8698372794,
  'uas': 91.7237657538},
 'author': 'Explosion AI',
 'description': 'English multi-task CNN trained on OntoNotes, with GloVe vectors trained on Common Crawl. Assigns word vectors, context-specific token vectors, POS tags, dependency parse and named entities.',
 'email': 'contact@explosion.ai',
 'lang': 'en',
 'license': 'CC BY-SA 3.0',
 'name': 'core_web_sm',
 'parent_package': 'spacy',
 'pipeline': ['tagger', 'parser', 'ner'],
 'sources': ['OntoNotes 5', 'Common Crawl'],
 'spacy_version': '&gt;=2.0.0a18',
 'speed': {'cpu': 5122.3040471407, 'gpu': None, 'nwords': 291344},
 'url': 'https://explosion.ai',
 'vectors': {'keys': 0, 'vectors': 0, 'width': 0},
 'version': '2.0.0'}

In [6]: nlp2.meta
Out[6]:
{'accuracy': {'ents_f': 85.2975560875,
  'ents_p': 84.9664503965,
  'ents_r': 85.6312524451,
  'las': 89.800872413,
  'tags_acc': 97.0403350292,
  'token_acc': 99.8698372794,
  'uas': 91.7237657538},
 'author': 'Explosion AI',
 'description': 'English multi-task CNN trained on OntoNotes, with GloVe vectors trained on Common Crawl. Assigns word vectors, context-specific token vectors, POS tags, dependency parse and named entities.',
 'email': 'contact@explosion.ai',
 'lang': 'en',
 'license': 'CC BY-SA 3.0',
 'name': 'core_web_sm',
 'parent_package': 'spacy',
 'pipeline': [],
 'sources': ['OntoNotes 5', 'Common Crawl'],
 'spacy_version': '&gt;=2.0.0a18',
 'speed': {'cpu': 5122.3040471407, 'gpu': None, 'nwords': 291344},
 'url': 'https://explosion.ai',
 'vectors': {'keys': 0, 'vectors': 0, 'width': 0},
 'version': '2.0.0'}

In [7]: nlp('I went to Switzerland to go skiing with Mary Poppins.').ents
Out[7]: (Switzerland, Mary Poppins)

In [8]: nlp2('I went to Switzerland to go skiing with Mary Poppins.').ents
Out[8]: ()
As you can see, the pipeline attribute is empty on the model loaded back from the bytes. Thus the entities are not recognized.
However, to_disk() and from_disk() actually do work.
For others facing this problem, here is my work-around to patch these language objects to be pickleable:
def make_spacy_model_picklable():
    def __getstate__(self):
	model_str = ""
        with tempfile.TemporaryDirectory(suffix='.spacy') as dir:
            self.to_disk(dir)
            tarfile_name = dir+'.tar'
            with tarfile.open(tarfile_name, 'w:') as tar:
                tar.add(dir, arcname=os.path.sep)
            with open(tarfile_name, 'rb') as f:
                model_str = f.read()
        d = {'model_str': model_str}
        return d

    def __setstate__(self, state):
        with tempfile.NamedTemporaryFile(suffix='.spacy.tar', delete=True) as f:
            f.write(state['model_str'])
            with tarfile.open(f.name, 'r:') as tar:
                with tempfile.TemporaryDirectory(suffix='.spacy') as dir:
                    tar.extractall(dir)
                    model = spacy.util.load_model_from_path(dir)
            self.__dict__ = model.__dict__

    spacy.load('en')
    cls = spacy.lang.en.Language
    cls.__getstate__ = __getstate__
    cls.__setstate__ = __setstate__
This dumps the model to a directory, tars it, and then reads the tar file back as raw bytes. Then on unpickling it does the reverse.
&lt;denchmark-h:h2&gt;Info about spaCy&lt;/denchmark-h&gt;


spaCy version: 2.0.9
Platform: Darwin-17.4.0-x86_64-i386-64bit
Python version: 3.6.2
Models: en_core_web_md, en_core_web_lg, en

	</description>
	<comments>
		<comment id='1' author='hadsed' date='2018-03-27T19:13:29Z'>
		This is now fixed in the next version of Thinc. Sorry for the regression!
		</comment>
		<comment id='2' author='hadsed' date='2018-05-07T17:53:21Z'>
		This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue for related bugs.
		</comment>
	</comments>
</bug>