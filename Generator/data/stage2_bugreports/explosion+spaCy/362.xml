<bug id='362' author='wbwseeker' open_date='2016-05-05T06:47:42Z' closed_time='2016-05-09T10:38:25Z'>
	<summary>ArcEager Break transition doesn't work as expected</summary>
	<description>
The parameter of  is never used in the function's body: &lt;denchmark-link:https://github.com/spacy-io/spaCy/blob/master/spacy/syntax/_state.pxd#L283&gt;https://github.com/spacy-io/spaCy/blob/master/spacy/syntax/_state.pxd#L283&lt;/denchmark-link&gt;

The function will therefore always set the break on the first item in the buffer.
However, the Break transition here wants to set it on the left_edge of the first item in the buffer: &lt;denchmark-link:https://github.com/spacy-io/spaCy/blob/master/spacy/syntax/arc_eager.pyx#L240&gt;https://github.com/spacy-io/spaCy/blob/master/spacy/syntax/arc_eager.pyx#L240&lt;/denchmark-link&gt;

This will only make a difference for tokens that have been shifted back onto the buffer (unshift), but it will not work as expected since  doesn't actually use the provided value of its parameter.
	</description>
	<comments>
		<comment id='1' author='wbwseeker' date='2016-05-05T09:07:28Z'>
		Wow. I'm sure I'd seen this bug before ages ago, but I guess I fixed it on a branch and never pushed it.
The fix is obvious. It'd be nice to have tests and to run the required experiment.
Do you want to do that, or shall I?
		</comment>
		<comment id='2' author='wbwseeker' date='2016-05-05T09:16:31Z'>
		with obvious, you mean replacing this.B(0) with i in the function's body, I assume.
I am writing tests for this right now anyway, so I'll do it. What kind of experiment do you have in mind for this?
EDIT: hm, and now that I'm writing the test, I realize it's more serious than I thought. It's not just the unshifted tokens that are affected, this could happen quite frequently if the parser builds  a bit of the next sentence before it predicts the sentence boundary.
		</comment>
		<comment id='3' author='wbwseeker' date='2016-05-05T09:59:34Z'>
		Retraining both the English and German parsing models, and evaluating the difference on the dev data.
		</comment>
		<comment id='4' author='wbwseeker' date='2016-05-05T22:24:30Z'>
		Hmm. I think the former behaviour of the Break transition masked this bug. Remember how the Break transition used to have that constraint, where you could only beak at a token boundary? That meant that you couldn't build a left tree before inserting the break. This bug may have been why that version of the transition system was doing better.
Interested to see the impact on accuracy!
		</comment>
		<comment id='5' author='wbwseeker' date='2016-05-09T10:38:25Z'>
		(Pasting results from &lt;denchmark-link:https://github.com/wbwseeker&gt;@wbwseeker&lt;/denchmark-link&gt;
 into here for future reference)
Before
UAS 91.1190112106
LAS 89.1020833536
After:
UAS 91.1569449423
LAS 89.1333821627
So, not much difference. Fixed now, anyway.
		</comment>
		<comment id='6' author='wbwseeker' date='2018-05-09T12:12:41Z'>
		This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue for related bugs.
		</comment>
	</comments>
</bug>