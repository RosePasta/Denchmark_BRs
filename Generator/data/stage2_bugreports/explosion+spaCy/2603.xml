<bug id='2603' author='pommedeterresautee' open_date='2018-07-26T15:44:04Z' closed_time='2019-02-27T10:19:02Z'>
	<summary>Documentation of missing value (NER)</summary>
	<description>
Hi,
In the documentation, it s said that it is possible for NER to have a token with "missing value".
In this case, loss is not applied on the token.
In the documentation it is said that it will happen when offset doesn't match a word boundary.
However it is not said how, as a user, we can declare ourself a token as missing value, for instance because we know there is a risk this token is part of an entity but we are not sure.
In particular, when declaring offset directly as a tuple?
Can you please complete the documentation on this point?
&lt;denchmark-h:h2&gt;Which page or section is this issue related to?&lt;/denchmark-h&gt;

&lt;denchmark-link:https://spacy.io/usage/linguistic-features&gt;https://spacy.io/usage/linguistic-features&lt;/denchmark-link&gt;

	</description>
	<comments>
		<comment id='1' author='pommedeterresautee' date='2018-08-05T14:32:46Z'>
		Hey,
There's a way to do this, but the API around it isn't quite perfect. There's two ways to specify the NER labels: either as (start, end, label) offsets, or as the BILUO tags for each token. If you use the BILUO tags, you can set some values to None to indicate the value is missing. There's no equivalent way to do this with the tuples, unfortunately.
You can also write the None values to the gold.ner list after creating the GoldParse object.
		</comment>
		<comment id='2' author='pommedeterresautee' date='2018-08-05T15:29:11Z'>
		Just to confirm, you say that in biluo annotations, unknown tag is None. I ask because I have noticed that when offsets are wrong (because not matching word boundaries) spacy use "-" to indicate unknown entity. "-" is the same as None for spacy?
		</comment>
		<comment id='3' author='pommedeterresautee' date='2018-08-07T09:34:21Z'>
		This is a bit inconsistent in spaCy unfortunately, and I'm always going back and rechecking it myself to be honest. In the early days I had a few different ways to indicate missing values, but I've been trying to standardise on None as the right way to do it, as we've been steadily trying to improve the API around the GoldParse class and the data formats in general.
I expect None to work, and it'll be the recommended way going forward. If it seems to not, please do let me know and I'll try to fix that.
		</comment>
		<comment id='4' author='pommedeterresautee' date='2018-08-07T22:33:44Z'>
		I think there is a bug when the first item is None.
from spacy.gold import GoldParse
# other import
...
# build empty Spacy French model (internal function of this project)
nlp = get_empty_model(load_labels_for_training=True)
doc: Doc = nlp.make_doc("Ceci est un test.")
# works
GoldParse(doc, entities=['O', 'O', 'O', 'O'])
# works
GoldParse(doc, entities=['O', 'O', 'O', None, 'O'])
# crash
GoldParse(doc, entities=[None, 'O', 'O', 'O', 'O'])
Traceback (most recent call last):
  File "&lt;input&gt;", line 1, in &lt;module&gt;
  File "gold.pyx", line 422, in spacy.gold.GoldParse.__init__
  File "gold.pyx", line 524, in spacy.gold.biluo_tags_from_offsets
TypeError: 'NoneType' object is not iterable
I know - doesn't crash in my code.
If I use it, is it assimilated to 'O' tag or to unknown tag?
FYI, I m using v2.0.12
		</comment>
		<comment id='5' author='pommedeterresautee' date='2019-02-24T21:25:04Z'>
		Just looking at this again sorry. I think you're right and there's a bug here. We have:
&lt;denchmark-code&gt;462         elif not isinstance(entities[0], basestring):
&lt;/denchmark-code&gt;

Which will fail if None is provided as the first value. I think the implementation is easier if all the values are strings, but the API is better if we pass None. So a good solution is probably to translate the None values into - or '' internally near the start of the function.
		</comment>
		<comment id='6' author='pommedeterresautee' date='2019-03-29T10:42:42Z'>
		This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue for related bugs.
		</comment>
	</comments>
</bug>