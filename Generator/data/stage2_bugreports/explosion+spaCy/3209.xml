<bug id='3209' author='thomasgirault' open_date='2019-01-29T16:25:20Z' closed_time='2019-02-13T15:34:48Z'>
	<summary>NER training : inconsistency of models loaded from disk (SpaCy 2.1.0a6)</summary>
	<description>
&lt;denchmark-h:h2&gt;How to reproduce the behaviour&lt;/denchmark-h&gt;

Hello,
I am trying to train my own NER model with this script :
&lt;denchmark-link:https://github.com/explosion/spacy/blob/master/examples/training/train_ner.py&gt;https://github.com/explosion/spacy/blob/master/examples/training/train_ner.py&lt;/denchmark-link&gt;

&lt;denchmark-code&gt;$ python train_ner.py -o /tmp/model_en_test
Created blank 'en' model
Losses {'ner': 8.800000429153442}
Losses {'ner': 8.395351529121399}
...
Losses {'ner': 3.7243169265383405e-12}

Saved model to /tmp/model_en_test
Loading from /tmp/model_en_test
&lt;/denchmark-code&gt;

The nlp model works just after training, when it is still in memory :
&lt;denchmark-code&gt;Entities [('London', 'LOC'), ('Berlin', 'LOC')]
Tokens [('I', '', 2), ('like', '', 2), ('London', 'LOC', 3), ('and', '', 2), ('Berlin', 'LOC', 3), ('.', '', 2)]
Entities [('Shaka Khan', 'PERSON')]
Tokens [('Who', '', 2), ('is', '', 2), ('Shaka', 'PERSON', 3), ('Khan', 'PERSON', 1), ('?', '', 2)]
&lt;/denchmark-code&gt;

However, when the model nlp2 is loaded from disk, it provides wrong and different predictions :
&lt;denchmark-code&gt;Entities [('I like', 'PERSON'), ('and Berlin', 'PERSON'), ('.', 'PERSON')]
Tokens [('I', 'PERSON', 3), ('like', 'PERSON', 1), ('London', '', 2), ('and', 'PERSON', 3), ('Berlin', 'PERSON', 1), ('.', 'PERSON', 3)]
Entities [('Who is', 'PERSON'), ('Shaka Khan', 'LOC'), ('?', 'PERSON')]
Tokens [('Who', 'PERSON', 3), ('is', 'PERSON', 1), ('Shaka', 'LOC', 3), ('Khan', 'LOC', 1), ('?', 'PERSON', 3)]
&lt;/denchmark-code&gt;

All the tokens seem to be recognized as named entities and are strangely chunked.
This behavior seems to occur only with SpaCy 2.1alpha but it worked with 2.0.x.
I observed the same behavior with my French corpus.
Should I try the python -m train command with a JSON format ?
Thanks for your help !
Thomas
&lt;denchmark-h:h2&gt;Your Environment&lt;/denchmark-h&gt;


Operating System: Ubuntu 18.10
Python Version Used: 3.6.7 | packaged by conda-forge
spaCy Version Used: 2.1.0a6
Environment Information: miniconda

	</description>
	<comments>
		<comment id='1' author='thomasgirault' date='2019-02-12T14:20:23Z'>
		Thanks for the report. Definitely a bug here.
Label-to-class maps are surprisingly tricky for the parser, because there are some ordering constraints we want to keep across models, but we might be adding the labels in a variety of orders. There have been a number of bugs associated with this over the years, and I simplified the code in v2.1...But unfortunately introduced a different bug.
The code I've pushed to fix this isn't wonderful, but it should work. I added another test as well.
		</comment>
		<comment id='2' author='thomasgirault' date='2019-03-15T16:08:15Z'>
		This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue for related bugs.
		</comment>
	</comments>
</bug>