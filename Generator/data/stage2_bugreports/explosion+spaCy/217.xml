<bug id='217' author='savkov' open_date='2016-01-05T09:58:38Z' closed_time='2016-01-19T22:18:19Z'>
	<summary>Custom NER classes</summary>
	<description>
Hi guys,
somewhere between versions 0.93 and 0.99 custom NER class names stopped working. I don't know whether that was intended to happen or they were not intended to work in the first place. By custom class names I mean, something like COMPANY instead of ORG.
The following error occurs when the nlp command is called:
&lt;denchmark-code&gt;File "/Users/aleksandar/Projects/data_eng_rep_new/src/Python3Modules/protopipe/nlp/matcher.py",       
line 75, in match
doc = self.nlp(text)
File "/usr/local/lib/python3.5/site-packages/spacy/language.py", line 242, in __call__
self.entity(tokens)
File "spacy/syntax/parser.pyx", line 107, in spacy.syntax.parser.Parser.__call__   
(spacy/syntax/parser.cpp:6395)
ValueError: Illegal action: M-
&lt;/denchmark-code&gt;

Is there a way for them to work in the current version? Is this something that will work again in the future?
Thanks
	</description>
	<comments>
		<comment id='1' author='savkov' date='2016-01-05T11:51:39Z'>
		Hey,
This wasn't intentional. Will fix, thanks.
		</comment>
		<comment id='2' author='savkov' date='2016-01-05T13:46:22Z'>
		Thanks, it is a very useful feature!
		</comment>
		<comment id='3' author='savkov' date='2016-01-19T19:23:24Z'>
		Okay this is working in master now:
    EN.matcher.add('LAX_Airport', 'AIRPORT', {}, [[{ORTH: 'LAX'}]])
    EN.matcher.add('SFO_Airport', 'AIRPORT', {}, [[{ORTH: 'SFO'}]])
    doc = EN(u'get me a flight from SFO to LAX leaving 20 December and arriving on January 5th')

    ents = [(ent.label_, ent.text) for ent in doc.ents]
    assert ents[0] == ('AIRPORT', 'SFO')
    assert ents[1] == ('AIRPORT', 'LAX')
    assert ents[2] == ('DATE', '20 December')
    assert ents[3] == ('DATE', 'January 5th')
This regression was caused by another bug fix: previously the NER model was allowed to clobber the matches, which isn't what we want. So I added a constraint that it could only make moves that were consistent with the existing entities. However, if it had no moves that matched the label, it was left with no moves to do --- hence the run-time error.
The root cause of these problems is that I've been trying to keep the Language class as small/simple/dumb as possible. It just loads the pipeline and applies each piece of it in turn. I still think this is a good design.
The downside of this is that you talk directly to Matcher when you add an entity, and the Parser instance that does the statistical NER, at .entity, doesn't get the message.
I've added a method add_label to Parser, and I've added some logic inside Language.__call__ to call this automatically. But if you invoke the pipeline directly, you'll need to call this method yourself:
    EN.matcher.add('LAX_Airport', 'AIRPORT', {}, [[{ORTH: 'LAX'}]])
    EN.matcher.add('SFO_Airport', 'AIRPORT', {}, [[{ORTH: 'SFO'}]])
    doc = EN.tokenizer(u'get me a flight from SFO to LAX leaving 20 December and arriving on January 5th')
    EN.tagger(doc)
    EN.matcher(doc)

    EN.entity.add_label('AIRPORT') # &lt;--- Add the label if you're using EN.entity directly

    EN.entity(doc)
		</comment>
		<comment id='4' author='savkov' date='2016-01-19T22:18:19Z'>
		Just pushed v0.100, which should have this fixed. If you have any problems, please reopen this and let us know.
		</comment>
		<comment id='5' author='savkov' date='2018-05-09T15:31:46Z'>
		This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue for related bugs.
		</comment>
	</comments>
</bug>