<bug id='6300' author='gnegrelli' open_date='2020-10-23T21:48:49Z' closed_time='2020-11-05T08:16:27Z'>
	<summary>Bugs on DependencyMatcher</summary>
	<description>
Hello!
I was working on some patterns that require the on_match method of DependencyMatcher and found some bugs in it.



spaCy/spacy/matcher/dependencymatcher.pyx


        Lines 236 to 244
      in
      01aec7a






         matched_trees = [] 



 self.recurse(_tree,id_to_position,_node_operator_map,0,[],matched_trees) 



         matched_key_trees.append((key,matched_trees)) 



 



 for i, (ent_id, nodes) in enumerate(matched_key_trees): 



         on_match = self._callbacks.get(ent_id) 



 if on_match is not None: 



             on_match(self, doc, i, matched_key_trees) 



 return matched_key_trees 





As it is today, the on_match method is executed after each match is added to the matched_key_trees instead of being called once after all patterns were evaluated. To fix it, the for loop in the snippet above should be outside the main for loop, so the on_match method is only executed once for each item in the matched_key_trees.
Also, the DependencyMatcher appends a tuple of (key, matched_trees) to the matched_key_trees even if there's no match (matched_trees is an empty list in this case). Shouldn't it only add in case matched_trees is not empty? A simple if statement would do?
&lt;denchmark-h:h2&gt;How to reproduce the behaviour&lt;/denchmark-h&gt;

I wrote a simple test based on the script available in &lt;denchmark-link:https://github.com/explosion/spaCy/issues/4590&gt;#4590&lt;/denchmark-link&gt;
 so you guys can have a look at it.
from spacy.matcher import DependencyMatcher
from spacy import load


def my_on_match(matcher, doc, i, matches):
    print('inside my_on_match:')
    print('Matches found: {}'.format(matches))
    print('Treating match of \"{}\"'.format(doc.vocab.strings[matches[i][0]]))
    print('================')


nlp = load('en_core_web_sm')
doc = nlp('The quick brown fox jumped over the lazy dog.')

dep_matcher = DependencyMatcher(nlp.vocab)

dep_pattern_1 = [
    {"SPEC": {"NODE_NAME": "fox"}, "PATTERN": {"ORTH": "fox"}},
    {"SPEC": {"NODE_NAME": "quick", "NBOR_RELOP": "&gt;", "NBOR_NAME": "fox"}, "PATTERN": {"ORTH": "quick"}},
]

dep_pattern_2 = [
    {"SPEC": {"NODE_NAME": "quick"}, "PATTERN": {"ORTH": "quick"}},
    {"SPEC": {"NODE_NAME": "brown", "NBOR_RELOP": "$+", "NBOR_NAME": "quick"}, "PATTERN": {"ORTH": "brown"}},
]

dep_pattern_3 = [
    {"SPEC": {"NODE_NAME": "quick"}, "PATTERN": {"ORTH": "quick"}},
    {"SPEC": {"NODE_NAME": "brown", "NBOR_RELOP": "$-", "NBOR_NAME": "quick"}, "PATTERN": {"ORTH": "brown"}},
]

dep_matcher.add('first_pattern', my_on_match, dep_pattern_1)
dep_matcher.add('second_pattern', my_on_match, dep_pattern_2)
dep_matcher.add('third_pattern', my_on_match, dep_pattern_3)

matches = dep_matcher(doc)

print('all matches')
for match in matches:
    print(match)
&lt;denchmark-h:h2&gt;Your Environment&lt;/denchmark-h&gt;


spaCy version: 2.1.8
Platform: Linux-5.4.0-51-generic-x86_64-with-Ubuntu-18.04-bionic
Python version: 3.6.9

	</description>
	<comments>
		<comment id='1' author='gnegrelli' date='2020-10-26T07:21:26Z'>
		Thanks for the report! Those do both look like bugs. If you'd like to submit a PR, we'd be happy to accept it, but it's also no problem if you'd prefer for us to handle it.
		</comment>
		<comment id='2' author='gnegrelli' date='2020-10-28T17:33:19Z'>
		Hi, &lt;denchmark-link:https://github.com/adrianeboyd&gt;@adrianeboyd&lt;/denchmark-link&gt;
.
Sorry I didn't answer your question. ðŸ˜ž Anyway, thanks for the PR!
		</comment>
		<comment id='3' author='gnegrelli' date='2020-10-29T08:31:24Z'>
		Do you need this fix in v2.1 in particular? We can backport bug fixes on request, but the current PR would only end up in v2.3.3 as it stands.
		</comment>
		<comment id='4' author='gnegrelli' date='2020-10-29T11:17:19Z'>
		Yeah! If you could backport it to both v2.1 and v2.2, that would be great!
		</comment>
	</comments>
</bug>