<bug id='2464' author='benhachey' open_date='2018-06-19T05:10:37Z' closed_time='2018-12-29T15:18:54Z'>
	<summary>Inconsistent matcher behaviour when using contiguous 0 or 1 quantifiers</summary>
	<description>
A few things..

Contiguous '?' quantifiers behave differently when using {'OP': '?'} versus {IS_SPACE: False, 'OP': '?'}:

{'OP': '?'} â€” ignores the rest of the pattern including later required expressions;
{IS_SPACE: False, 'OP': '?'} â€” equivalent to not using the quantifiers.


What I'm really trying to do is limit the length of wildcard matches without exploding the number of patterns. Any suggestion for building a pattern that matches "bla blaa", "bla bla blaaa" and "bla bla bla blaaa" without matching "bla bla bla bla blaaa"?

&lt;denchmark-h:h2&gt;How to reproduce the behaviour&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;from spacy.matcher import Matcher
from spacy.attrs import IS_SPACE, ORTH
import spacy

nlp = spacy.load('en_core_web_sm')

def test_pattern(pattern):
    matcher = Matcher(nlp.vocab)
    matcher.add(
        'TEST',
        None,
        pattern
    )
    print('PATTERN:', pattern, '\n')
    for i in range(1, 5):
        text = ' '.join(['bla'] * i) + ' blaaa'
        print('TEXT:', repr(text))
        print('MATCHES:', matcher(nlp(text)), '\n')
&lt;/denchmark-code&gt;

&lt;denchmark-h:h4&gt;Pattern 1:&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;test_pattern([{ORTH: 'bla'}, {'OP': '?'}, {'OP': '?'}, {ORTH: 'blaaa'}])
&lt;/denchmark-code&gt;

gives:
&lt;denchmark-code&gt;PATTERN: [{65: 'bla'}, {'OP': '?'}, {'OP': '?'}, {65: 'blaaa'}] 

TEXT: 'bla blaaa'
MATCHES: [(3458773305017611411, 0, 1)] 

TEXT: 'bla bla blaaa'
MATCHES: [(3458773305017611411, 0, 1), (3458773305017611411, 1, 2)] 

TEXT: 'bla bla bla blaaa'
MATCHES: [(3458773305017611411, 0, 1), (3458773305017611411, 1, 2), (3458773305017611411, 2, 3)] 

TEXT: 'bla bla bla bla blaaa'
MATCHES: [(3458773305017611411, 0, 1), (3458773305017611411, 1, 2), (3458773305017611411, 2, 3), (3458773305017611411, 3, 4)] 
&lt;/denchmark-code&gt;

&lt;denchmark-h:h4&gt;Pattern 2:&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;test_pattern([{ORTH: 'bla'}, {IS_SPACE: False, 'OP': '?'}, {IS_SPACE: False, 'OP': '?'}, {ORTH: 'blaaa'}])
&lt;/denchmark-code&gt;

gives:
&lt;denchmark-code&gt;PATTERN: [{65: 'bla'}, {6: False, 'OP': '?'}, {6: False, 'OP': '?'}, {65: 'blaaa'}] 

TEXT: 'bla blaaa'
MATCHES: [] 

TEXT: 'bla bla blaaa'
MATCHES: [] 

TEXT: 'bla bla bla blaaa'
MATCHES: [(1046765068364475028, 0, 4)] 

TEXT: 'bla bla bla bla blaaa'
MATCHES: [(1046765068364475028, 1, 5)] 
&lt;/denchmark-code&gt;

&lt;denchmark-h:h2&gt;Your Environment&lt;/denchmark-h&gt;


spaCy version: 2.0.11
Platform: Darwin-16.7.0-x86_64-i386-64bit
Python version: 3.6.4

	</description>
	<comments>
		<comment id='1' author='benhachey' date='2018-06-19T08:24:00Z'>
		I've rewritten the Matcher engine; the new one is on the develop branch. It's pending release into v2.1.0 because the fixes change the behaviour of some match patterns, which previously may have relied on bugs.
Would you mind submitting a pull request to develop with your test case? This will tell us whether the issue is fixed with the new engine.
		</comment>
		<comment id='2' author='benhachey' date='2018-06-26T00:30:18Z'>
		I'm not actually sure I understand expected quantifier behaviour here. Should there be three matches for the bla bla bla bla blaaa text starting at 1, 2 and 3 respectively?
We're exploring custom automata at the moment since we have matching requirements beyond terms. So I haven't had a chance to play with the new features on develop.
		</comment>
		<comment id='3' author='benhachey' date='2018-12-29T15:18:54Z'>
		Fixed! ðŸŽ‰
		</comment>
		<comment id='4' author='benhachey' date='2019-01-28T16:05:33Z'>
		This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue for related bugs.
		</comment>
	</comments>
</bug>