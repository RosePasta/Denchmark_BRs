<bug id='1591' author='sdmonov' open_date='2017-11-16T14:29:09Z' closed_time='2018-01-14T13:37:38Z'>
	<summary>-march=native option makes gcc compiler to fail on Power8 system with Ubuntu</summary>
	<description>
My Environment:

Operating System: Ubuntu 16.04.3 LTS on Power8
Python Version Used: Python 3.6.2 |Anaconda, Inc.| (default, Sep 15 2017, 20:38:23) [GCC 4.8.4] on linux
spaCy Version Used: Master from 11/16/2017 (commit a3d4dd1)
gcc version: 5.4.0 20160609 (Ubuntu/IBM 5.4.0-6ubuntu1~16.04.5)
System Information: PowerNV 8335-GTB with POWER8NVL CPU

Recent commit &lt;denchmark-link:https://github.com/explosion/spaCy/commit/79fcf8576aa077749c91315d102c0d70d888ca60&gt;79fcf85&lt;/denchmark-link&gt;
 added  to the compile options for gcc/clang in setup.py. The problem is that  is not supported by all the gcc compilers and as far as I know some older versions of clang too. I've tested it with  on . Also tested  ARM cross compiler on x86 with Ubuntu 14.04.
This is the output of the ppc64le:
&lt;denchmark-code&gt;............
copying spacy/tokens/doc.pyx -&gt; build/lib.linux-ppc64le-3.6/spacy/tokens
copying spacy/tokens/token.pyx -&gt; build/lib.linux-ppc64le-3.6/spacy/tokens
copying spacy/tokens/span.pxd -&gt; build/lib.linux-ppc64le-3.6/spacy/tokens
copying spacy/tokens/token.pxd -&gt; build/lib.linux-ppc64le-3.6/spacy/tokens
copying spacy/tokens/__init__.pxd -&gt; build/lib.linux-ppc64le-3.6/spacy/tokens
copying spacy/tokens/doc.pxd -&gt; build/lib.linux-ppc64le-3.6/spacy/tokens
copying spacy/tests/tokenizer/sun.txt -&gt; build/lib.linux-ppc64le-3.6/spacy/tests/tokenizer
running build_ext
building 'spacy.parts_of_speech' extension
creating build/temp.linux-ppc64le-3.6
creating build/temp.linux-ppc64le-3.6/spacy
gcc -pthread -Wno-unused-result -Wsign-compare -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes -fPIC -I/home/user/miniconda3/envs/spacy/include/python3.6m -I/home/user/AI/spaCy/include -I/home/user/miniconda3/envs/spacy/include/python3.6m -c spacy/parts_of_speech.cpp -o build/temp.linux-ppc64le-3.6/spacy/parts_of_speech.o -O3 -Wno-strict-prototypes -Wno-unused-function -march=native
gcc: error: unrecognized command line option ‘-march=native’
error: command 'gcc' failed with exit status 1
&lt;/denchmark-code&gt;

After removing the -march=native option, spaCy builds and runs just fine.
Here is the output from the arm cross compiler.
&lt;denchmark-code&gt;................
writing top-level names to spacy.egg-info/top_level.txt
reading manifest file 'spacy.egg-info/SOURCES.txt'
reading manifest template 'MANIFEST.in'
writing manifest file 'spacy.egg-info/SOURCES.txt'
installing library code to build/bdist.linux-x86_64/egg
running install_lib
running build_py
running build_ext
building 'spacy.parts_of_speech' extension
arm-linux-gnueabihf-gcc -Wsign-compare -DNDEBUG -g -fwrapv -O3 -Wall -Wstrict-prototypes -fPIC -I/home/moni/miniconda3/envs/pytorch/include/python3.6m -I/home/moni/src/ibm/AI/spaCy/include -I/home/moni/miniconda3/envs/pytorch/include/python3.6m -c spacy/parts_of_speech.cpp -o build/temp.linux-x86_64-3.6/spacy/parts_of_speech.o -O3 -Wno-strict-prototypes -Wno-unused-function -march=native
cc1plus: error: unrecognized argument in option ‘-march=native’
cc1plus: note: valid arguments to ‘-march=’ are: armv2 armv2a armv3 armv3m armv4 armv4t armv5 armv5e armv5t armv5te armv6 armv6-m armv6j armv6k armv6s-m armv6t2 armv6z armv6zk armv7 armv7-a armv7-m armv7-r armv7e-m armv8-a armv8-a+crc iwmmxt iwmmxt2 native
cc1plus: warning: command line option ‘-Wno-strict-prototypes’ is valid for C/ObjC but not for C++ [enabled by default]
error: command 'arm-linux-gnueabihf-gcc' failed with exit status 1
&lt;/denchmark-code&gt;

I guess the best solution would be to add code to detect the best CPU flags and add them as -march parameters or simply detect if -march=native is supported by the compiler and only use it in such case.
	</description>
	<comments>
		<comment id='1' author='sdmonov' date='2017-11-16T15:17:43Z'>
		Thanks; very valuable report and analysis.
I think spaCy should not set -march=native. There are a few dot products implemented as basic loops. This is fine so long as the compiler vectorises the loops reasonably well, but I see that cross-platform support is going to be a real problem. Instead of trying to get this right in spaCy, it'll be better to call into a library.
If we get rid of these dot products we can also compile with -O2, to hopefully reduce compile times, which have been creeping upwards. The long compilation is starting to get quite annoying, and there was a report of an out-of-memory error on a 1gb VM.
		</comment>
		<comment id='2' author='sdmonov' date='2017-11-16T20:16:10Z'>
		Somewhat related, the default  seems to cause problems in the conda packages: &lt;denchmark-link:https://github.com/conda-forge/spacy-feedstock/issues/24&gt;conda-forge/spacy-feedstock#24&lt;/denchmark-link&gt;

		</comment>
		<comment id='3' author='sdmonov' date='2017-11-18T17:16:07Z'>
		Looks like the best would be the if compiler CPU optimization flags can be provided through env variable for example in case of binaries  generation or detected using a library if not provided for local installs optimization.
		</comment>
		<comment id='4' author='sdmonov' date='2017-12-11T21:01:34Z'>
		I think this might cause &lt;denchmark-link:https://github.com/explosion/spaCy/issues/1589&gt;#1589&lt;/denchmark-link&gt;

I was building a Docker image with spaCy with a different set of supported CPU instructions to the target set, which results in Illegal instruction. It would seem -march=native causes this to be the case.
I think the built library should be largely independent of target platform. For now, the workaround is simply to build the Docker image on the target platform (instead of "anywhere"!)
		</comment>
		<comment id='5' author='sdmonov' date='2018-01-10T22:16:42Z'>
		We weren't able to use spaCy 2.0.5 on EMR because of this issue. We had to publish an internal version that reverses commit &lt;denchmark-link:https://github.com/explosion/spaCy/commit/a3d4dd1a5d1ea827761bcf04302762936d0e143c&gt;a3d4dd1&lt;/denchmark-link&gt;
 in order to avoid the  error at import time. I second folks suggesting that the  option should not be the default bdist option.
		</comment>
		<comment id='6' author='sdmonov' date='2018-01-14T13:35:59Z'>
		Thanks all for the report. I've now removed the march=native flag.
		</comment>
		<comment id='7' author='sdmonov' date='2018-04-12T18:17:52Z'>
		The closest equivalent option for Power systems is currently . See &lt;denchmark-link:https://gcc.gnu.org/onlinedocs/gcc/RS_002f6000-and-PowerPC-Options.html&gt;these gcc docs&lt;/denchmark-link&gt;
 for details.
		</comment>
		<comment id='8' author='sdmonov' date='2018-05-12T18:57:54Z'>
		This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue for related bugs.
		</comment>
	</comments>
</bug>