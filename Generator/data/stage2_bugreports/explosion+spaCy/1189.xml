<bug id='1189' author='morelandjs' open_date='2017-07-12T20:41:33Z' closed_time='2017-09-19T13:47:04Z'>
	<summary>nlp.pipe returning slightly modified word tags</summary>
	<description>
&lt;denchmark-h:h2&gt;The Bug&lt;/denchmark-h&gt;

I'm encountering a bug where nlp.pipe behaves differently on subsequent passes through the same text generator. The tag discrepancies appear to be rare, but nevertheless are there.
&lt;denchmark-h:h2&gt;Info about spaCy&lt;/denchmark-h&gt;


spaCy version: 1.8.2
Platform: Linux-4.11.9-1-ARCH-x86_64-with-arch
Python version: 3.6.1
Installed models:

&lt;denchmark-h:h2&gt;Code which reproduces the bug&lt;/denchmark-h&gt;

&lt;denchmark-code&gt;#!/usr/bin/env python3

import pickle
from pathlib import Path

import en_core_web_sm as en

nlp = en.load()


class ReadText:
    def __init__(self):
        self.file_paths = Path(
                '/home/moreland/AI/wikicorpus-small/'
                ).glob('*.p')

    def __iter__(self):
        for filename in sorted(self.file_paths):
            print('Reading: {}'.format(filename))
            with open(filename, 'rb') as f:
                for article in pickle.load(f):
                    yield article


class Corpus:
    def __iter__(self):
        for article in nlp.pipe(
                ReadText(),
                batch_size=1000,
                n_threads=4):

            yield article
&lt;/denchmark-code&gt;

First let's test the text generator to make sure we can loop through it multiple times and retrieve the same object. This test passes without any problems.
&lt;denchmark-code&gt;gen_first = [text for text in ReadText()]
gen_second = [text for text in ReadText()]

# this passes (text generator can be repeated)
assert gen_first == gen_second
&lt;/denchmark-code&gt;

Next let's test that nlp.pipe is deterministic, i.e., that it produces the same object given the same inputs. First we test that it contains the same text (this passes). Then we can check that it produces the same part-of-speech tags (this fails).
&lt;denchmark-code&gt;doc_first = [d for d in Corpus()]
doc_second = [d for d in Corpus()]

# This passes (document text is the same)
assert str(doc_first) == str(doc_second)

tags_first = []
for article in doc_first:
    for sentence in article.sents:
        tags_first.extend([w.tag_ for w in sentence])

tags_second= []
for article in doc_second:
    for sentence in article.sents:
        tags_second.extend([w.tag_ for w in sentence])

# This DOES NOT pass. Some tags change on the second pass?
assert tags_first == tags_second
&lt;/denchmark-code&gt;

&lt;denchmark-h:h2&gt;What's broken&lt;/denchmark-h&gt;

Unfortunately, tags_first != tags_second although they should be the same!
The tag which flipped was word.tag_ = 'MD' on the first pass and word.tag_ = 'UH' on the second pass.
	</description>
	<comments>
		<comment id='1' author='morelandjs' date='2017-07-13T16:14:13Z'>
		Interesting bug! The  should always respect preset tags, see here: &lt;denchmark-link:https://github.com/explosion/spaCy/blob/v1.8.2/spacy/tagger.pyx#L207&gt;https://github.com/explosion/spaCy/blob/v1.8.2/spacy/tagger.pyx#L207&lt;/denchmark-link&gt;

So I'm not sure what's happening. My best guess is that somehow the first pass has the tag set but not the .pos attribute. Perhaps the tag is set by a special case rule, or something? Then in the second pass, the tagger somehow conditions on different information, flipping the decision.
		</comment>
		<comment id='2' author='morelandjs' date='2017-09-19T13:47:04Z'>
		This should be fixed in recent versions. The problem was that some of the special-case rules assigned only .pos and .lemma attributes, but not .tag. This has been corrected.
		</comment>
		<comment id='3' author='morelandjs' date='2018-05-08T16:28:01Z'>
		This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue for related bugs.
		</comment>
	</comments>
</bug>