<bug id='4717' author='RandomJungle' open_date='2019-11-26T11:37:36Z' closed_time='2019-12-06T18:22:58Z'>
	<summary>Error on token attribute in pattern matcher</summary>
	<description>
Hello,
I noticed a strange behavior when updating to new version 2.2.3 from the version I was using before, which was 2.1.4. The 'LENGTH' attribute of token used in patterns started to match on anything. Below is the piece of code I used to reproduce the error:
&lt;denchmark-code&gt;import spacy
from spacy.matcher import Matcher
nlp = spacy.load("fr_core_news_md")
matcher = Matcher(nlp.vocab)
pattern = [{'SHAPE': 'dddd', 'LENGTH': 9}]
matcher.add("number", None, pattern)
doc = nlp("Bonjour nous sommes bien en 2005 ! Il est 9h du matin")
matches = matcher(doc)
print(matches)
&lt;/denchmark-code&gt;

On former version, there was no match, which is expected behavior. On newer version however, I get a match on 2005, [(432, 5, 6)]. Now here's a run of the same code, without the "shape" ingredient :
&lt;denchmark-code&gt;import spacy
from spacy.matcher import Matcher
nlp = spacy.load("fr_core_news_md")
matcher = Matcher(nlp.vocab)
pattern = [{'LENGTH': 10}]
matcher.add("number", None, pattern)
doc = nlp("Bonjour nous sommes bien en 2005 ! Il est 9h du matin, surprenant !")
matches = matcher(doc)
if matches:
    for match in matches:
        print(doc[match[1]:match[2]])
&lt;/denchmark-code&gt;

It prints out every token of the sentence, which is odd to me, since LENGTH is listed as one of the token attribute that can be used in matcher on the official doc. Now if I run the exact same code with the former version (2.1.4) with model 2.1 of fr_core_news_md, it prints out "surprenant", which makes sense.
Is the LENGTH attribute of the token deprecated in the new model version ?
	</description>
	<comments>
		<comment id='1' author='RandomJungle' date='2019-11-26T15:03:36Z'>
		Update : I noticed that on release 2.2.2 it was mentioned that a new pattern adding behavior had been added, meant to replace the former. I tried using that but it produced the same result :
&lt;denchmark-code&gt;import spacy
from spacy.matcher import Matcher
nlp = spacy.load("fr_core_news_md")
matcher = Matcher(nlp.vocab)
pattern = [[{'LENGTH': 10}]]
matcher.add("number", pattern)
doc = nlp("Bonjour nous sommes bien en 2005 ! Il est 9h du matin, surprenant !")
matches = matcher(doc)
if matches:
    for match in matches:
        print(doc[match[1]:match[2]])
&lt;/denchmark-code&gt;

prints out :
&lt;denchmark-code&gt;Bonjour
nous
sommes
bien
en
2005
!
Il
est
9h
du
matin
,
surprenant
!
&lt;/denchmark-code&gt;

Unless I missed another major change on version 2.2 that explains that behavior ?
		</comment>
		<comment id='2' author='RandomJungle' date='2019-11-26T15:06:20Z'>
		No, this looks like an unrelated bug. I can reproduce the problem and will see if I can figure out what's going on.
		</comment>
		<comment id='3' author='RandomJungle' date='2019-11-29T08:09:32Z'>
		In spacy v2.1, invalid features were silently discarded, so you could have {'ASDF': 'asdf'} and it would act like {}. We tried to improve the validation so that you couldn't add as many obviously invalid patterns without validate=True and so that Matcher with validate=True would run a complete pattern scheme validation.
It looks like  ends up passing the validation (see &lt;denchmark-link:https://github.com/explosion/spaCy/issues/4442&gt;#4442&lt;/denchmark-link&gt;
) but is still being silently discarded, which is kind of the worst of both options.
I still have to figure out why the integer version is not working as expected, but in the meanwhile, this pattern syntax does work:
&lt;denchmark-code&gt;[{'LENGTH': {"==": 2}}]
&lt;/denchmark-code&gt;

		</comment>
		<comment id='4' author='RandomJungle' date='2019-11-29T09:25:15Z'>
		Got it,
I ended up using the 'REGEX' operator but I think this will be faster, thanks a lot for the workaround !
		</comment>
		<comment id='5' author='RandomJungle' date='2020-01-05T19:35:49Z'>
		This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue for related bugs.
		</comment>
	</comments>
</bug>