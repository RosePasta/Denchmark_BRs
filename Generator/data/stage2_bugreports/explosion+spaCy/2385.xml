<bug id='2385' author='mpszumowski' open_date='2018-05-28T10:12:20Z' closed_time='2018-05-30T10:28:46Z'>
	<summary>iob_to_biluo converter does not handle multi-word entities</summary>
	<description>
The spacy.gold.iob_to_biluo function mismatches NER tags for entities longer than one word. The problem seems to lie in _consume_ent function which increments length only for each I- tag and having encountered L- tag does not treat it as a part of entity. Thus it sets length = 1 where len(entity) == 1 token and length = len(entity) - 1 where len(entity) &gt;= 2 tokens (in pseudocode, of course).
Another problem I see is that the line: target = tags.pop(0).replace('B', 'I') corrupts all labels with a 'B' character, eg. it converts the following NER labels into the form:
U-BRAWLERS -&gt; U-IRAWLERS
U-BAWLERS -&gt; U-IAWLERS
U-BASTARDS -&gt; - U-IASTARDS
In fact, this sets all labels with a 'B' to U- labels, because the formatted tag I-IAWLER will be compared to
yet intact tag from the list I-BAWLER.
&lt;denchmark-h:h2&gt;How to reproduce the behaviour&lt;/denchmark-h&gt;

You can reproduce the behavior sending to the read_iob (or any other converter from cli.converters) a list of line or lines in a iob (or appropriate) format.
&lt;denchmark-code&gt;def read_iob(raw_sents):
    sentences = []
    for line in raw_sents:
        if not line.strip():
            continue
        tokens = [t.split('|') for t in line.split()]
        if len(tokens[0]) == 3:
            words, pos, iob = zip(*tokens)
        else:
            words, iob = zip(*tokens)
            pos = ['-'] * len(words)
        biluo = iob_to_biluo(iob)
        sentences.append([
            {'orth': w, 'tag': p, 'ner': ent}
            for (w, p, ent) in zip(words, pos, biluo)
        ])
    sentences = [{'tokens': sent} for sent in sentences]
    paragraphs = [{'sentences': [sent]} for sent in sentences]
    docs = [{'id': 0, 'paragraphs': [para]} for para in paragraphs]
    return docs


def iob_to_biluo(tags):
    out = []
    curr_label = None
    tags = list(tags)
    while tags:
        out.extend(_consume_os(tags))
        out.extend(_consume_ent(tags))
    return out


def _consume_os(tags):
    while tags and tags[0] == 'O':
        yield tags.pop(0)


def _consume_ent(tags):
    if not tags:
        return []
    target = tags.pop(0).replace('B', 'I')
    length = 1
    while tags and tags[0] == target:
        length += 1
        tags.pop(0)
    label = target[2:]
    if length == 1:
        return ['U-' + label]
    else:
        start = 'B-' + label
        end = 'L-' + label
        middle = ['I-%s' % label for _ in range(1, length - 1)]
        return [start] + middle + [end]


text = ['participants|_|O :|_|O Angela|_|B-PERSON Merkel|_|L-PERSON and|_|O Virgil|_|B-PERSON van|_|I-PERSON Dijk|_|L-PERSON have|_|O convinced|_|O Polanski|_|U-BAWLER to|_|O make|_|O']
read_iob(text)
&lt;/denchmark-code&gt;

output:
&lt;class 'list'&gt;: ['O', 'O', 'U-PERSON', 'U-PERSON', 'O', 'B-PERSON', 'L-PERSON', 'U-PERSON', 'O', 'O', 'U-IAWLER', 'O', 'O']
should be:
&lt;class 'list'&gt;: ['O', 'O', 'B-PERSON', L-PERSON', 'O', 'B-PERSON', 'I-PERSON', 'L-PERSON', 'O', 'O', 'U-BAWLER', 'O', 'O']
&lt;denchmark-h:h2&gt;Your Environment&lt;/denchmark-h&gt;


Operating System: Windows 10
Python Version Used: 3.6.5
spaCy Version Used: 2.0.11

	</description>
	<comments>
		<comment id='1' author='mpszumowski' date='2018-05-28T10:38:47Z'>
		Also, the lines:
&lt;denchmark-code&gt;def _consume_ent(tags):
    if not tags:
        return []
    target = tags.pop(0).replace('B', 'I')
    length = 1
    while tags and tags[0] == target:
        length += 1
        tags.pop(0)
    label = target[2:]
    if length == 1:
        return ['U-' + label]
&lt;/denchmark-code&gt;

are the place where it is possible to validate the input. If the tags are flawed (len(label) &lt;= 2, hence  &lt;= 2)  the converter will return "U-", which in turn will raise an error not until you pass the json to the train function. I have had problems with formatting the files correctly a couple of times, and from what I have seen here on Github, I am not the only one. But perhaps the general strategy with validation will depend on the implementation of a more complete converter &lt;denchmark-link:https://github.com/explosion/spaCy/issues/1966#issuecomment-364732317&gt;mentioned by Matthew some time ago&lt;/denchmark-link&gt;
.
		</comment>
		<comment id='2' author='mpszumowski' date='2018-05-28T15:01:49Z'>
		I have made a simple fix to the bug and will make a pull request shortly.
		</comment>
		<comment id='3' author='mpszumowski' date='2018-06-29T11:11:41Z'>
		This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue for related bugs.
		</comment>
	</comments>
</bug>