<bug id='5338' author='koaning' open_date='2020-04-22T09:58:26Z' closed_time='2020-04-23T13:05:43Z'>
	<summary>local model does not link/package properly</summary>
	<description>
&lt;denchmark-h:h2&gt;How to reproduce the behaviour&lt;/denchmark-h&gt;

I am creating a model with a pattern matcher. These are the rules;
{"label":"PROGLANG","pattern":[{"LOWER":"golang"}]}
{"label":"PROGLANG","pattern":[{"LOWER":"go", "POS": {"NOT_IN": "VERB"}}]}
{"label":"PROGLANG","pattern":[{"LOWER":"sql"}]}
{"label":"PROGLANG","pattern":[{"LOWER":"python"}]}
{"label":"PROGLANG","pattern":[{"LOWER":{"REGEX":"(python\\d+\\.?\\d*.?\\d*)"}}]}
{"label":"PROGLANG","pattern":[{"LOWER":"python"}, {"TEXT":{"REGEX":"(\\d+\\.?\\d*.?\\d*)"}}]}
{"label":"PROGLANG","pattern":[{"LOWER": {"IN": ["node", "nodejs", "js", "javascript"]}}]}
{"label":"PROGLANG","pattern":[{"LOWER": {"IN": ["node", "nodejs", "js", "javascript"]}}, {"TEXT": {"REGEX": "(\\d+\\.?\\d*.?\\d*)"}}]}
This is the script that creates the model and saves it to disk.
import pathlib

import spacy
from spacy.lang.en import English
from spacy.pipeline import EntityRuler


if __name__ == "__main__":
    path = pathlib.Path('matcher-rules/proglang.jsonl')
    # note that we could have also used `English()` as a starting point
    # if our matching rules weren't using part of speech 
    nlp = spacy.load("en_core_web_sm")

    # create a new rule based NER detector loading in settings from disk
    ruler = EntityRuler(nlp).from_disk(path)
    print(f"Will now create model for {path}.")

    # add the detector to the model
    nlp.add_pipe(ruler, name="proglang-detector")

    # save the model to disk
    nlp.meta["name"] = "custom-proglang-model"
    nlp.to_disk(nlp.meta["name"])
    print(f"spaCy model saved over at {nlp.meta['name']}.")
I now create this model and link it, because linking feels like the formal thing to do.
&lt;denchmark-code&gt;&gt; python mkmodel.py
Will now create model for matcher-rules/proglang.jsonl.
spaCy model saved over at custom-proglang-model.
&gt; python -m spacy link custom-proglang-model proglang-model --force
✔ Linking successful
You can now load the model via spacy.load('proglang-model')
&lt;/denchmark-code&gt;

However, when I now load the model, stuff starts breaking.
&lt;denchmark-code&gt;(venv) ➜  rasa-spacy-integration git:(master) ✗ python
Python 3.6.8 (v3.6.8:3c6b436a57, Dec 24 2018, 02:04:31) 
[GCC 4.2.1 Compatible Apple LLVM 6.0 (clang-600.0.57)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import spacy
&gt;&gt;&gt; spacy.load("proglang-model") 
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/Users/vincent/Development/rasa-spacy-integration/venv/lib/python3.6/site-packages/spacy/__init__.py", line 30, in load
    return util.load_model(name, **overrides)
  File "/Users/vincent/Development/rasa-spacy-integration/venv/lib/python3.6/site-packages/spacy/util.py", line 162, in load_model
    return load_model_from_link(name, **overrides)
  File "/Users/vincent/Development/rasa-spacy-integration/venv/lib/python3.6/site-packages/spacy/util.py", line 176, in load_model_from_link
    cls = import_file(name, path)
  File "/Users/vincent/Development/rasa-spacy-integration/venv/lib/python3.6/site-packages/spacy/compat.py", line 157, in import_file
    spec.loader.exec_module(module)
  File "&lt;frozen importlib._bootstrap_external&gt;", line 674, in exec_module
  File "&lt;frozen importlib._bootstrap_external&gt;", line 780, in get_code
  File "&lt;frozen importlib._bootstrap_external&gt;", line 832, in get_data
FileNotFoundError: [Errno 2] No such file or directory: '/Users/vincent/Development/rasa-spacy-integration/venv/lib/python3.6/site-packages/spacy/data/proglang-model/__init__.py'
&lt;/denchmark-code&gt;

The irony is that if I directly point to the folder (which isn't what you'd want to recommend to folks for production ... I think) then it works just fine.
&lt;denchmark-code&gt;&gt;&gt;&gt; spacy.load("custom-proglang-model")
&lt;spacy.lang.en.English object at 0x1221314e0&gt;
&lt;/denchmark-code&gt;

This is independant of the nlp.meta["name"] = "custom-proglang-model" line in mkmodel.py.
&lt;denchmark-h:h2&gt;Info about spaCy&lt;/denchmark-h&gt;


spaCy version: 2.2.4
Platform: Darwin-19.3.0-x86_64-i386-64bit
Python version: 3.6.8

	</description>
	<comments>
		<comment id='1' author='koaning' date='2020-04-22T11:41:50Z'>
		Hmm, yeah, spacy link is definitely not working as advertised here.
I would actually recommend against using links. We're planning to get rid of them entirely because adding symlinks within the spacy install directory can be problematic due to permissions issues and without them, the spacy package could be zip safe. (I think those are the main points anyway, Ines is the expert here.)
You can use spacy package to create a model package that you can install with like any other package (and then link, if you really want).
There's nothing wrong with loading from a path with spacy.load(), but for production using model packages is probably the better option.
		</comment>
		<comment id='2' author='koaning' date='2020-04-22T11:51:44Z'>
		Ah. I was afraid it was something like that. I tried packages too but it had similar issues. Will fetch that code now.
		</comment>
		<comment id='3' author='koaning' date='2020-04-22T11:58:31Z'>
		It's showing some other strange behavior now.
&lt;denchmark-code&gt;&gt; python mkmodel.py
Will now create model for matcher-rules/proglang.jsonl.
spaCy model saved over at custom-proglang-model.
&gt; python -m spacy package custom-proglang-model . --force
✔ Loaded meta.json from file
custom-proglang-model/meta.json
✔ Successfully created package 'en_custom-proglang-model-2.2.5'
en_custom-proglang-model-2.2.5
To build the package, run `python setup.py sdist` in this directory.
&gt; cd en_custom-proglang-model-2.2.5
&gt; python setup.py sdist
&gt; cd .. 
&lt;/denchmark-code&gt;

This should install everything. But now when I import it via python.
&lt;denchmark-code&gt;&gt; python
(venv) ➜  rasa-spacy-integration git:(master) ✗ python
Python 3.6.8 (v3.6.8:3c6b436a57, Dec 24 2018, 02:04:31) 
[GCC 4.2.1 Compatible Apple LLVM 6.0 (clang-600.0.57)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt; import spacy
&gt;&gt;&gt; spacy.load("en_custom-proglang-model-2.2.5")
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/Users/vincent/Development/rasa-spacy-integration/venv/lib/python3.6/site-packages/spacy/__init__.py", line 30, in load
    return util.load_model(name, **overrides)
  File "/Users/vincent/Development/rasa-spacy-integration/venv/lib/python3.6/site-packages/spacy/util.py", line 166, in load_model
    return load_model_from_path(Path(name), **overrides)
  File "/Users/vincent/Development/rasa-spacy-integration/venv/lib/python3.6/site-packages/spacy/util.py", line 211, in load_model_from_path
    return nlp.from_disk(model_path, exclude=disable)
  File "/Users/vincent/Development/rasa-spacy-integration/venv/lib/python3.6/site-packages/spacy/language.py", line 947, in from_disk
    util.from_disk(path, deserializers, exclude)
  File "/Users/vincent/Development/rasa-spacy-integration/venv/lib/python3.6/site-packages/spacy/util.py", line 654, in from_disk
    reader(path / key)
  File "/Users/vincent/Development/rasa-spacy-integration/venv/lib/python3.6/site-packages/spacy/language.py", line 934, in &lt;lambda&gt;
    p, exclude=["vocab"]
  File "tokenizer.pyx", line 526, in spacy.tokenizer.Tokenizer.from_disk
  File "/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/pathlib.py", line 1183, in open
    opener=self._opener)
  File "/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/pathlib.py", line 1037, in _opener
    return self._accessor.open(self, flags, mode)
  File "/Library/Frameworks/Python.framework/Versions/3.6/lib/python3.6/pathlib.py", line 387, in wrapped
    return strfunc(str(pathobj), *args)
FileNotFoundError: [Errno 2] No such file or directory: 'en_custom-proglang-model-2.2.5/tokenizer'
&lt;/denchmark-code&gt;

I can confirm that there is no tokenizer folder. But is this something I need to manually do? I'd assumed that nlp.to_disk would take care of that.
		</comment>
		<comment id='4' author='koaning' date='2020-04-22T12:21:06Z'>
		nlp.to_disk() should definitely save the tokenizer. I think you're accidentally loading a local directory from the package rather than the model package itself and I think you're missing a step where you install the model. There shouldn't be a version number or dashes in the model you're loading.
Try this: pick a new model name without dashes, package it as you did before (this creates an archive in dist/), and then install the model package from the dist directory with pip.
		</comment>
		<comment id='5' author='koaning' date='2020-04-22T14:09:03Z'>
		I now run this script to create the model.
import pathlib

import spacy
from spacy.lang.en import English
from spacy.pipeline import EntityRuler


if __name__ == "__main__":
    path = pathlib.Path('matcher-rules/proglang.jsonl')
    # note that we could have also used `English()` as a starting point
    # if our matching rules weren't using part of speech 
    nlp = spacy.load("en_core_web_sm")

    # create a new rule based NER detector loading in settings from disk
    ruler = EntityRuler(nlp).from_disk(path)
    print(f"Will now create model for {path}.")

    # add the detector to the model
    nlp.add_pipe(ruler, name="proglang")

    # save the model to disk
    nlp.meta["name"] = "proglang"
    nlp.to_disk(nlp.meta["name"])
    print(f"spaCy model saved over at {nlp.meta['name']}.")
This creates the proglang folder. When I now run this;
&lt;denchmark-code&gt;&gt; python -m spacy package proglang . --force
✔ Loaded meta.json from file
proglang/meta.json
✔ Successfully created package 'en_proglang-2.2.5'
en_proglang-2.2.5
To build the package, run `python setup.py sdist` in this directory.
&lt;/denchmark-code&gt;

It seems to add en to it. Let's check the folders.
&lt;denchmark-code&gt;&gt; tree en_proglang-2.2.5
en_proglang-2.2.5
├── MANIFEST.in
├── dist
│   └── en_proglang-2.2.5.tar.gz
├── en_proglang
│   ├── __init__.py
│   └── en_proglang-2.2.5
│       ├── meta.json
│       ├── ner
│       │   ├── cfg
│       │   ├── model
│       │   └── moves
│       ├── parser
│       │   ├── cfg
│       │   ├── model
│       │   └── moves
│       ├── proglang
│       │   ├── cfg
│       │   └── patterns.jsonl
│       ├── tagger
│       │   ├── cfg
│       │   ├── model
│       │   └── tag_map
│       ├── tokenizer
│       └── vocab
│           ├── key2row
│           ├── lexemes.bin
│           ├── lookups.bin
│           ├── strings.json
│           └── vectors
├── en_proglang.egg-info
│   ├── PKG-INFO
│   ├── SOURCES.txt
│   ├── dependency_links.txt
│   ├── not-zip-safe
│   ├── requires.txt
│   └── top_level.txt
├── meta.json
└── setup.py
&lt;/denchmark-code&gt;

Ok. Tokenizer is there. Then I run pip to package.
&lt;denchmark-code&gt;&gt; python -m pip install en_proglang-2.2.5/dist/en_proglang-2.2.5.tar.gz
Processing ./en_proglang-2.2.5/dist/en_proglang-2.2.5.tar.gz
Requirement already satisfied: spacy&gt;=2.2.2 in ./venv/lib/python3.6/site-packages (from en-proglang==2.2.5) (2.2.4)
Requirement already satisfied: catalogue&lt;1.1.0,&gt;=0.0.7 in ./venv/lib/python3.6/site-packages (from spacy&gt;=2.2.2-&gt;en-proglang==2.2.5) (1.0.0)
Requirement already satisfied: preshed&lt;3.1.0,&gt;=3.0.2 in ./venv/lib/python3.6/site-packages (from spacy&gt;=2.2.2-&gt;en-proglang==2.2.5) (3.0.2)
Requirement already satisfied: tqdm&lt;5.0.0,&gt;=4.38.0 in ./venv/lib/python3.6/site-packages (from spacy&gt;=2.2.2-&gt;en-proglang==2.2.5) (4.45.0)
Requirement already satisfied: srsly&lt;1.1.0,&gt;=1.0.2 in ./venv/lib/python3.6/site-packages (from spacy&gt;=2.2.2-&gt;en-proglang==2.2.5) (1.0.2)
Requirement already satisfied: murmurhash&lt;1.1.0,&gt;=0.28.0 in ./venv/lib/python3.6/site-packages (from spacy&gt;=2.2.2-&gt;en-proglang==2.2.5) (1.0.2)
Requirement already satisfied: requests&lt;3.0.0,&gt;=2.13.0 in ./venv/lib/python3.6/site-packages (from spacy&gt;=2.2.2-&gt;en-proglang==2.2.5) (2.23.0)
Requirement already satisfied: blis&lt;0.5.0,&gt;=0.4.0 in ./venv/lib/python3.6/site-packages (from spacy&gt;=2.2.2-&gt;en-proglang==2.2.5) (0.4.1)
Requirement already satisfied: wasabi&lt;1.1.0,&gt;=0.4.0 in ./venv/lib/python3.6/site-packages (from spacy&gt;=2.2.2-&gt;en-proglang==2.2.5) (0.6.0)
Requirement already satisfied: numpy&gt;=1.15.0 in ./venv/lib/python3.6/site-packages (from spacy&gt;=2.2.2-&gt;en-proglang==2.2.5) (1.18.2)
Requirement already satisfied: setuptools in ./venv/lib/python3.6/site-packages (from spacy&gt;=2.2.2-&gt;en-proglang==2.2.5) (46.1.3)
Requirement already satisfied: plac&lt;1.2.0,&gt;=0.9.6 in ./venv/lib/python3.6/site-packages (from spacy&gt;=2.2.2-&gt;en-proglang==2.2.5) (1.1.3)
Requirement already satisfied: thinc==7.4.0 in ./venv/lib/python3.6/site-packages (from spacy&gt;=2.2.2-&gt;en-proglang==2.2.5) (7.4.0)
Requirement already satisfied: cymem&lt;2.1.0,&gt;=2.0.2 in ./venv/lib/python3.6/site-packages (from spacy&gt;=2.2.2-&gt;en-proglang==2.2.5) (2.0.3)
Requirement already satisfied: importlib-metadata&gt;=0.20; python_version &lt; "3.8" in ./venv/lib/python3.6/site-packages (from catalogue&lt;1.1.0,&gt;=0.0.7-&gt;spacy&gt;=2.2.2-&gt;en-proglang==2.2.5) (1.6.0)
Requirement already satisfied: idna&lt;3,&gt;=2.5 in ./venv/lib/python3.6/site-packages (from requests&lt;3.0.0,&gt;=2.13.0-&gt;spacy&gt;=2.2.2-&gt;en-proglang==2.2.5) (2.9)
Requirement already satisfied: chardet&lt;4,&gt;=3.0.2 in ./venv/lib/python3.6/site-packages (from requests&lt;3.0.0,&gt;=2.13.0-&gt;spacy&gt;=2.2.2-&gt;en-proglang==2.2.5) (3.0.4)
Requirement already satisfied: urllib3!=1.25.0,!=1.25.1,&lt;1.26,&gt;=1.21.1 in ./venv/lib/python3.6/site-packages (from requests&lt;3.0.0,&gt;=2.13.0-&gt;spacy&gt;=2.2.2-&gt;en-proglang==2.2.5) (1.25.8)
Requirement already satisfied: certifi&gt;=2017.4.17 in ./venv/lib/python3.6/site-packages (from requests&lt;3.0.0,&gt;=2.13.0-&gt;spacy&gt;=2.2.2-&gt;en-proglang==2.2.5) (2020.4.5.1)
Requirement already satisfied: zipp&gt;=0.5 in ./venv/lib/python3.6/site-packages (from importlib-metadata&gt;=0.20; python_version &lt; "3.8"-&gt;catalogue&lt;1.1.0,&gt;=0.0.7-&gt;spacy&gt;=2.2.2-&gt;en-proglang==2.2.5) (3.1.0)
Building wheels for collected packages: en-proglang
  Running setup.py bdist_wheel for en-proglang ... done
  Stored in directory: /Users/vincent/Library/Caches/pip/wheels/37/80/f5/1190457030b0cd85c181cac24cd78ffd52784071faee93b219
Successfully built en-proglang
Installing collected packages: en-proglang
  Found existing installation: en-proglang 2.2.5
    Uninstalling en-proglang-2.2.5:
      Successfully uninstalled en-proglang-2.2.5
Successfully installed en-proglang-2.2.5
&lt;/denchmark-code&gt;

It seems that python -m spacy validate does not detect it though. And unfortunately;
&lt;denchmark-code&gt;&gt; python
&gt;&gt;&gt; import spacy 

&gt;&gt;&gt; spacy.load("en-proglang-2.2.5")
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/Users/vincent/Development/rasa-spacy-integration/venv/lib/python3.6/site-packages/spacy/__init__.py", line 30, in load
    return util.load_model(name, **overrides)
  File "/Users/vincent/Development/rasa-spacy-integration/venv/lib/python3.6/site-packages/spacy/util.py", line 169, in load_model
    raise IOError(Errors.E050.format(name=name))
OSError: [E050] Can't find model 'en-proglang-2.2.5'. It doesn't seem to be a shortcut link, a Python package or a valid path to a data directory.

&gt;&gt;&gt; spacy.load("en-proglang")
Traceback (most recent call last):
  File "&lt;stdin&gt;", line 1, in &lt;module&gt;
  File "/Users/vincent/Development/rasa-spacy-integration/venv/lib/python3.6/site-packages/spacy/__init__.py", line 30, in load
    return util.load_model(name, **overrides)
  File "/Users/vincent/Development/rasa-spacy-integration/venv/lib/python3.6/site-packages/spacy/util.py", line 169, in load_model
    raise IOError(Errors.E050.format(name=name))
OSError: [E050] Can't find model 'en-proglang'. It doesn't seem to be a shortcut link, a Python package or a valid path to a data directory.
&gt;&gt;&gt; exit()

&lt;/denchmark-code&gt;

		</comment>
		<comment id='6' author='koaning' date='2020-04-22T14:24:40Z'>
		More strange behavior. I figured removing all folders and starting from scratch might be a good "reset". I also ran python -m pip uninstall en-proglang==2.2.5 just to be safe.
This is mkmodel.py now;
import pathlib

import spacy
from spacy.lang.en import English
from spacy.pipeline import EntityRuler


if __name__ == "__main__":
    path = pathlib.Path('matcher-rules/proglang.jsonl')
    # note that we could have also used `English()` as a starting point
    # if our matching rules weren't using part of speech 
    nlp = spacy.load("en_core_web_sm")

    # create a new rule based NER detector loading in settings from disk
    ruler = EntityRuler(nlp).from_disk(path)
    print(f"Will now create model for {path}.")

    # add the detector to the model
    nlp.add_pipe(ruler, name="proglang")

    # save the model to disk
    nlp.meta["name"] = "proglang"
    nlp.to_disk(nlp.meta["name"])
    print(f"spaCy model saved over at {nlp.meta['name']}.")
And now when I run this;
&lt;denchmark-code&gt;&gt; python mkmodel.py
Will now create model for matcher-rules/proglang.jsonl.
spaCy model saved over at proglang.

&gt; python -m spacy package proglang . --force
✔ Loaded meta.json from file
proglang/meta.json
✔ Successfully created package 'en_proglang-2.2.5'
en_proglang-2.2.5
To build the package, run `python setup.py sdist` in this directory.

&gt; tree en_proglang-2.2.5
en_proglang-2.2.5
├── MANIFEST.in
├── en_proglang
│   ├── __init__.py
│   └── en_proglang-2.2.5
│       ├── meta.json
│       ├── ner
│       │   ├── cfg
│       │   ├── model
│       │   └── moves
│       ├── parser
│       │   ├── cfg
│       │   ├── model
│       │   └── moves
│       ├── proglang
│       │   ├── cfg
│       │   └── patterns.jsonl
│       ├── tagger
│       │   ├── cfg
│       │   ├── model
│       │   └── tag_map
│       ├── tokenizer
│       └── vocab
│           ├── key2row
│           ├── lexemes.bin
│           ├── lookups.bin
│           ├── strings.json
│           └── vectors
├── meta.json
└── setup.py

7 directories, 22 files
&lt;/denchmark-code&gt;

There's no dist folder anymore.
		</comment>
		<comment id='7' author='koaning' date='2020-04-22T20:28:04Z'>
		I think the installed package will be called en_proglang. After running pip install dist/model.tar.gz you should be able to find the directory for the installed package in venv/lib/python3.x/site-packages to double-check the name, too.
&lt;denchmark-code&gt;spacy.load("en_proglang")
&lt;/denchmark-code&gt;

As an alternative, you can also try importing the package directly:
&lt;denchmark-code&gt;import en_proglang
nlp = en_proglang.load()
&lt;/denchmark-code&gt;

You have to run python setup.py sdist to regenerate the dist folder.
		</comment>
		<comment id='8' author='koaning' date='2020-04-23T10:07:11Z'>
		That seems to work! Thanks!
Is there a reason why python -m spacy validate still does not recognise it?
I wonder if this process could be made easier though. If I don't include the python mkmodel.py needed to save to disk I need to run 5 commands.
&lt;denchmark-code&gt;python -m spacy package proglang . --force
cd en_proglang-2.2.5
python setup.py sdist 
cd .. 
python -m pip install en_proglang-2.2.5/dist/sdist 
&lt;/denchmark-code&gt;

Does it make sense to add a flag to spacy package, such that the command becomes;
&lt;denchmark-code&gt;python -m spacy package proglang . --force --install
&lt;/denchmark-code&gt;

		</comment>
		<comment id='9' author='koaning' date='2020-04-23T11:49:50Z'>
		To do this, spacy validate would have to search through every installed package to check whether it's a model or not. It looks like if you add it as a link it does check because the directory with the symlinks is easy to go through, but it doesn't search through every single python package. It does search for all the default/provided models as packages since it can refer to compatibility table with all the names.
I think spacy package should really just package. I think more typically people are packaging for release/distribution, not to install locally right then.
		</comment>
		<comment id='10' author='koaning' date='2020-04-23T13:05:43Z'>
		Fair enough. This work is part of a guide on how to get a custom spaCy pipeline to work inside of &lt;denchmark-link:https://rasa.com/docs/&gt;Rasa&lt;/denchmark-link&gt;
 and I'll make sure I mention that final comment.
The original error with spacy link is still an issue but the approach listed here will work for my usecase. I'll close the issue because it seems like link will eventually be deprecated. If anybody thinks this issue should remain open; feel free to re-open.
&lt;denchmark-link:https://github.com/adrianeboyd&gt;@adrianeboyd&lt;/denchmark-link&gt;
 thanks :) !
		</comment>
	</comments>
</bug>