<bug_data>
<bug id='600' author='williewillus' open_date='2020-11-13T04:28:36Z' closed_time='2020-11-26T23:54:02Z'>
 	<summary>Concurrent map read/write crash on import</summary>
 	<description>
 Set up with docker-compose and default options (besides changing uid and adding volumes), started an import, then crash.
 Log: &lt;denchmark-link:https://gist.github.com/williewillus/07d6f5930a45cda9e6364095abc3fa63&gt;https://gist.github.com/williewillus/07d6f5930a45cda9e6364095abc3fa63&lt;/denchmark-link&gt;
 
 	</description>
 	<comments>
 		<comment id='1' author='williewillus' date='2020-11-15T10:10:54Z'>
 		Looks like an issue in go-exif/v3 at first sight:
 &lt;denchmark-code&gt;fatal error: concurrent map read and map write
 
 goroutine 1285 [running]:
 runtime.throw(0x10c8c7f, 0x21)
 	/usr/local/go/src/runtime/panic.go:1116 +0x72 fp=0xc02adb3e80 sp=0xc02adb3e50 pc=0x442712
 runtime.mapaccess2(0xf83c80, 0xc02b12d110, 0xc02adb3ef6, 0x3, 0xc02b400bf8)
 	/usr/local/go/src/runtime/map.go:469 +0x25b fp=0xc02adb3ec0 sp=0xc02adb3e80 pc=0x41b71b
 github.com/dsoprea/go-exif/v3.(*TagIndex).Get(0xc0002f50f0, 0xc0198f0420, 0xc02b518769, 0x0, 0x0, 0x0)
 	/go/pkg/mod/github.com/dsoprea/go-exif/v3@v3.0.0-20200807075213-089aa48c91e6/tags.go:252 +0xe5 fp=0xc02adb3f18 sp=0xc02adb3ec0 pc=0xb08805
 github.com/dsoprea/go-exif/v3.(*IfdEnumerate).parseTag(0xc02adb44f0, 0xc0198f0420, 0x7, 0xc02b518420, 0x0, 0x0, 0x0)
 	/go/pkg/mod/github.com/dsoprea/go-exif/v3@v3.0.0-20200807075213-089aa48c91e6/ifd_enumerate.go:249 +0x3a5 fp=0xc02adb4018 sp=0xc02adb3f18 pc=0xafdfe5
 github.com/dsoprea/go-exif/v3.(*IfdEnumerate).parseIfd(0xc02adb44f0, 0xc0198f0420, 0xc02b518420, 0x0, 0x0, 0x0, 0x0, 0xc02b524de0, 0x3, 0x4, ...)
 	/go/pkg/mod/github.com/dsoprea/go-exif/v3@v3.0.0-20200807075213-089aa48c91e6/ifd_enumerate.go:434 +0x25e fp=0xc02adb41b8 sp=0xc02adb4018 pc=0xaff53e
 github.com/dsoprea/go-exif/v3.(*IfdEnumerate).Collect(0xc02adb44f0, 0xc000000008, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0)
 	/go/pkg/mod/github.com/dsoprea/go-exif/v3@v3.0.0-20200807075213-089aa48c91e6/ifd_enumerate.go:1342 +0xb29 fp=0xc02adb4488 sp=0xc02adb41b8 pc=0xb05e49
 github.com/dsoprea/go-exif/v3.Collect(0xc000130600, 0xc0002f50f0, 0xc02adde006, 0x4ed4, 0x4ed4, 0x125ef80, 0x22271d0, 0x8, 0x0, 0x0, ...)
 	/go/pkg/mod/github.com/dsoprea/go-exif/v3@v3.0.0-20200807075213-089aa48c91e6/exif.go:230 +0x26c fp=0xc02adb4548 sp=0xc02adb4488 pc=0xafcd6c
 github.com/photoprism/photoprism/internal/meta.(*Data).Exif(0xc02ae19250, 0xc01bc77920, 0x55, 0x109c434, 0x3, 0x0, 0x0)
 	/go/src/github.com/photoprism/photoprism/internal/meta/exif.go:78 +0x2f3 fp=0xc02adb49b0 sp=0xc02adb4548 pc=0xb71433
 &lt;/denchmark-code&gt;
 
 Didn't upgrade to the latest   version for some reason, but can't remember why... was this already fixed, &lt;denchmark-link:https://github.com/dsoprea&gt;@dsoprea&lt;/denchmark-link&gt;
 ?
 		</comment>
 		<comment id='2' author='williewillus' date='2020-11-16T13:59:54Z'>
 		&lt;denchmark-link:https://github.com/williewillus&gt;@williewillus&lt;/denchmark-link&gt;
  Can you provide us with an example file, so that we can debug this further? You may attach it to this issue, or send via email to &lt;denchmark-link:mailto:hello@photoprism.org&gt;hello@photoprism.org&lt;/denchmark-link&gt;
 . Looks like unexpected data, maybe not standards compliant.
 		</comment>
 		<comment id='3' author='williewillus' date='2020-11-17T20:09:19Z'>
 		&lt;denchmark-link:https://github.com/lastzero&gt;@lastzero&lt;/denchmark-link&gt;
  I see a concurrency issue. What makes you think unexpected data?
 It's worth mentioning that go-exif obviously doesn't manage concurrency. Make sure that we're serializing the requests from the PP side.
 		</comment>
 		<comment id='4' author='williewillus' date='2020-11-17T22:27:07Z'>
 		Thanks, that's good to know! Using a mutex should be enough? Might slow indexing down a bit.
 		</comment>
 		<comment id='5' author='williewillus' date='2020-11-18T00:03:27Z'>
 		Correct. It would be a necessary cost. As go-exif doesn't not have nor need any parallel processes, locking is somewhat well out of scope.
 That said, this is no heavy feat of engineering, so I might just add it. It looks like it's just a thing with a race on the caching. There aren't many situations where parallel processes would get tripped up, so for me to serialize it here might just completely solve it.
 		</comment>
 		<comment id='6' author='williewillus' date='2020-11-21T22:48:33Z'>
 		Just pushed to master. New Docker build for testing available soon.
 		</comment>
 		<comment id='7' author='williewillus' date='2020-11-22T06:49:32Z'>
 		Fixed in go-exif, as well.
 		</comment>
 		<comment id='8' author='williewillus' date='2020-11-22T06:50:05Z'>
 		Sorry for the delay.
 		</comment>
 		<comment id='9' author='williewillus' date='2020-11-22T12:29:09Z'>
 		No worries, we're super busy too... fixed all obvious issues this weekend. Hope that's it, so that we can tag a release soon!
 		</comment>
 		<comment id='10' author='williewillus' date='2020-11-26T23:54:01Z'>
 		Closing this since no negative test reports came in.
 		</comment>
 		<comment id='11' author='williewillus' date='2020-12-20T04:39:57Z'>
 		Hi, sorry for the lack of updates on this, but I just pulled and tried importing again and so far things are looking good. Thanks for the fix!
 		</comment>
 	</comments>
 </bug>
<commit id='25e88bb1fca7b6a641084bc1a1812b3279e58075' author='Michael Mayer' date='2020-11-21 23:43:53+01:00'>
 	<dmm_unit complexity='0.0' interfacing='1.0' size='0.0'></dmm_unit>
 	<modification change_type='MODIFY' old_name='internal\meta\exif.go' new_name='internal\meta\exif.go'>
 		<file_info nloc='231' complexity='82' token_count='1858'></file_info>
 		<method name='Exif' parameters='string,FileType'>
 				<method_info nloc='193' complexity='75' token_count='1671' nesting_level='0' start_line='48' end_line='293'></method_info>
 			<added_lines>49,50,51</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines>10,23</added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 </commit>
</bug_data>
