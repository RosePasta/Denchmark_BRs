<bug_data>
<bug id='35' author='marcromeyn' open_date='2017-08-17T16:41:54Z' closed_time='2017-08-17T17:49:11Z'>
 	<summary>java.lang.NullPointerException when accessing featureNames/featureValues of MultiFeatureSpec</summary>
 	<description>
 I am getting a java.lang.NullPointerException when I am trying to access either featureNames or featureValues. When I use either one of the 2 specs separately it works fine but when I try to combine them in a MultiFeatureSpec it fails. Is it a bug or am I doing something wrong?
 @BigQueryType.fromQuery(
     """
       |#standardSQL
       |SELECT album_gid, album.num_tracks AS num_tracks,
       |album.availability.latest_date AS latest_date,
       |global_popularity.popularity_normalized AS popularity_normalized,
       |album.duration AS duration
       |FROM (SELECT * FROM `knowledge-graph-112233.album_entity.album_entity_%s` LIMIT 1000)
       |WHERE album.num_tracks &gt;= 3
     """.stripMargin, "$LATEST"
   ) class AlbumMeta
 
   def main(cmdlineArgs: Array[String]): Unit = {
     val (sc, args) = ContextAndArgs(cmdlineArgs)
 
     val date = args("date").replace("-", "")
     val output = args("output")
 
     val albumFeatures = sc.typedBigQuery[AlbumMeta](AlbumMeta.query.format(date))
 
     val conSpec = FeatureSpec.of[AlbumMeta]
       .required(_.duration.get.toDouble)(StandardScaler("duration"))
       .required(_.duration.get.toDouble)(StandardScaler("duration_mean", withMean=true))
       .required(_.duration.get.toDouble)(Identity("identity"))
       .required(_.duration.get.toDouble)(MinMaxScaler("min_max"))
 
     val albumSpec = FeatureSpec.of[AlbumMeta]
       .required(_.album_gid.get)(OneHotEncoder("album"))
 
     //    val spec_extracted = albumSpec.extract(albumFeatures)
     val spec_extracted = MultiFeatureSpec(conSpec, albumSpec).extract(albumFeatures)
 
     val t = spec_extracted.featureNames
 
     sc.close().waitUntilFinish()
   }
 Error:
 Caused by: java.lang.NullPointerException
 at com.spotify.featran.FeatureSet.multiFeatureNames(FeatureSpec.scala:231)
 at com.spotify.featran.MultiFeatureExtractor$$anonfun$featureNames$1.apply(MultiFeatureExtractor.scala:56)
 at com.spotify.featran.MultiFeatureExtractor$$anonfun$featureNames$1.apply(MultiFeatureExtractor.scala:56)
 at com.spotify.scio.util.Functions$$anon$8.processElement(Functions.scala:145)
 	</description>
 	<comments>
 		<comment id='1' author='marcromeyn' date='2017-08-17T17:45:12Z'>
 		Confirmed that I can reproduce with this minimized code
 import com.spotify.scio._
 import com.spotify.featran._
 import com.spotify.featran.scio._
 import com.spotify.featran.transformers._
 
 object Test {
   def main(args: Array[String]): Unit = {
     val data = (1 to 100).map(x =&gt; (x.toDouble, "key" + x))
 
     val (sc, _) = ContextAndArgs(args)
     val in = sc.parallelize(data)
 
     val f1 = FeatureSpec.of[(Double, String)]
       .required(_._1)(StandardScaler("duration"))
       .required(_._1)(StandardScaler("duration_mean", withMean=true))
       .required(_._1)(Identity("identity"))
       .required(_._1)(MinMaxScaler("min_max"))
     val f2 = FeatureSpec.of[(Double, String)]
       .required(_._2)(OneHotEncoder("album"))
     val f = MultiFeatureSpec(f1, f2).extract(in)
     val n = f.featureNames.materialize
 
     sc.close()
     n.waitForResult().value.foreach(println)
   }
 }
 		</comment>
 	</comments>
 </bug>
<commit id='e25ba4ff7590f21d935ce29fbb4a524e9fe2601b' author='Neville Li' date='2017-08-17 13:49:08-04:00'>
 	<dmm_unit complexity='None' interfacing='None' size='None'></dmm_unit>
 	<modification change_type='MODIFY' old_name='core\src\main\scala\com\spotify\featran\MultiFeatureExtractor.scala' new_name='core\src\main\scala\com\spotify\featran\MultiFeatureExtractor.scala'>
 		<file_info nloc='35' complexity='0' token_count='367'></file_info>
 		<modified_lines>
 			<added_lines>34</added_lines>
 			<deleted_lines>34</deleted_lines>
 		</modified_lines>
 	</modification>
 </commit>
</bug_data>
