<bug_data>
<bug id='67' author='matt-deboer' open_date='2019-01-16T23:40:46Z' closed_time='2019-01-24T18:18:42Z'>
 	<summary>INITIALIZE_FROM_FILE requires a 'current_user'</summary>
 	<description>
 Related to &lt;denchmark-link:https://github.com/jsbroks/coco-annotator/issues/50&gt;#50&lt;/denchmark-link&gt;
 , it looks like this feature may have been broken in recent user-based changes.
 Specifically:
 &lt;denchmark-code&gt;[ERROR] Exception in worker process
 Traceback (most recent call last):
   File "/usr/local/lib/python3.6/site-packages/gunicorn/arbiter.py", line 583, in spawn_worker
     worker.init_process()
   File "/usr/local/lib/python3.6/site-packages/gunicorn/workers/base.py", line 129, in init_process
     self.load_wsgi()
   File "/usr/local/lib/python3.6/site-packages/gunicorn/workers/base.py", line 138, in load_wsgi
     self.wsgi = self.app.wsgi()
   File "/usr/local/lib/python3.6/site-packages/gunicorn/app/base.py", line 67, in wsgi
     self.callable = self.load()
   File "/usr/local/lib/python3.6/site-packages/gunicorn/app/wsgiapp.py", line 52, in load
     return self.load_wsgiapp()
   File "/usr/local/lib/python3.6/site-packages/gunicorn/app/wsgiapp.py", line 41, in load_wsgiapp
     return util.import_app(self.app_uri)
   File "/usr/local/lib/python3.6/site-packages/gunicorn/util.py", line 350, in import_app
     __import__(module)
   File "/workspace/app/__init__.py", line 61, in &lt;module&gt;
     create_from_json(Config.INITIALIZE_FROM_FILE)
   File "/workspace/app/models.py", line 374, in create_from_json
     upsert(DatasetModel, query={ "name": name}, update=dataset_json)
   File "/workspace/app/models.py", line 347, in upsert
     new_model.save()
   File "/workspace/app/models.py", line 45, in save
     self.owner = current_user.username
   File "/usr/local/lib/python3.6/site-packages/werkzeug/local.py", line 347, in __getattr__
     return getattr(self._get_current_object(), name)
 AttributeError: 'NoneType' object has no attribute 'username'
 &lt;/denchmark-code&gt;
 
 It looks like in models.py:45,
 &lt;denchmark-code&gt;self.owner = current_user.username
 &lt;/denchmark-code&gt;
 
 there will not be any current_user available when the app is initializing; maybe there should be a special 'system' owner? Or perhaps the initializer.json file could contain a user section which would associate the datasets/categories created with a particular user...
 Or maybe this feature should just be replaced with an API call so it will always have an associated user?
 Then again, that would create a need to manually create users before being able to use the API...probably at least need a builtin admin account for such bootstrap concerns...
 	</description>
 	<comments>
 		<comment id='1' author='matt-deboer' date='2019-01-23T23:58:19Z'>
 		&lt;denchmark-link:https://github.com/jsbroks&gt;@jsbroks&lt;/denchmark-link&gt;
  I'm thinking the best approach is to add a built-in  user with a password configured via environment variables--then, use this account for bootstrapping concerns via API calls.
 So, if the env ADMIN_PASSWORD is specified, then an admin user is created on startup with that password, defaulting to username admin (overridden via env ADMIN_USERNAME).
 Then, the effects of INITIALIZE_FROM_FILE can be accomplished with normal api calls.
 What do you think?
 		</comment>
 		<comment id='2' author='matt-deboer' date='2019-01-24T01:13:56Z'>
 		I'm not quite for the idea of adding users using environment variables as it starts to complicate the experience.
 Even adding a simple line such as:
 username = current.username
 ... = username if username else "system"
 would be a simple fix.
 		</comment>
 		<comment id='3' author='matt-deboer' date='2019-01-24T17:40:38Z'>
 		ok, sounds good. PR coming shortly.
 		</comment>
 	</comments>
 </bug>
<commit id='1a2da49bb2d9f839f924893163506dbaa37de9b3' author='Matt DeBoer' date='2019-01-24 13:18:41-05:00'>
 	<dmm_unit complexity='0.0' interfacing='0.0' size='1.0'></dmm_unit>
 	<modification change_type='MODIFY' old_name='app\models.py' new_name='app\models.py'>
 		<file_info nloc='253' complexity='55' token_count='2042'></file_info>
 		<method name='save' parameters='self,copy,args,kwargs'>
 				<method_info nloc='12' complexity='6' token_count='106' nesting_level='1' start_line='190' end_line='206'></method_info>
 			<added_lines>201,202,203,204,205</added_lines>
 			<deleted_lines>198</deleted_lines>
 		</method>
 		<method name='save' parameters='self,args,kwargs'>
 				<method_info nloc='12' complexity='3' token_count='96' nesting_level='1' start_line='35' end_line='50'></method_info>
 			<added_lines>45,46,47,48</added_lines>
 			<deleted_lines>45</deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines>267,268</added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 </commit>
</bug_data>
