<bug_data>
<bug id='1286' author='theNded' open_date='2019-10-30T17:12:07Z' closed_time='2019-11-01T05:59:56Z'>
 	<summary>Unexpected Colored ICP failure</summary>
 	<description>
 
 Minimal reproducible bug described in &lt;denchmark-link:https://github.com/intel-isl/Open3D/issues/1264&gt;#1264&lt;/denchmark-link&gt;
 , &lt;denchmark-link:https://github.com/intel-isl/Open3D/issues/1281&gt;#1281&lt;/denchmark-link&gt;
 : Colored ICP fails unexpectedly with a reasonable initialization.
 Before registration:
 &lt;denchmark-link:https://user-images.githubusercontent.com/6127282/67880808-c042d080-fb15-11e9-9fb4-1ff691ff246c.png&gt;&lt;/denchmark-link&gt;
 
 &lt;denchmark-code&gt;Pose is from multi-scale ICP:
 [[ 0.99696919  0.0052096  -0.07762277 -0.2456588 ]
  [-0.00870445  0.99896014 -0.04475343 -0.43198081]
  [ 0.0773089   0.04529345  0.99597783  0.52008339]
  [ 0.          0.          0.          1.        ]]
 &lt;/denchmark-code&gt;
 
 After registration:
 &lt;denchmark-link:https://user-images.githubusercontent.com/6127282/67880814-c46eee00-fb15-11e9-80bd-3d25422a323f.png&gt;&lt;/denchmark-link&gt;
 
 &lt;denchmark-code&gt;[[-6.78238736e-01  4.42398071e-01  5.86750513e-01 -4.48030729e+00]
  [ 3.04820107e-01  8.95911960e-01 -3.23150836e-01 -4.01951769e+01]
  [-6.68638108e-01 -4.03200603e-02 -7.42494022e-01  6.79608267e+01]
  [ 0.00000000e+00  0.00000000e+00  0.00000000e+00  1.00000000e+00]]
 &lt;/denchmark-code&gt;
 
 Log:
 &lt;denchmark-code&gt;[Open3D DEBUG] InitializePointCloudForColoredICP
 [Open3D DEBUG] ICP Iteration #0: Fitness 0.4250, RMSE 0.0057
 [Open3D DEBUG] Residual : 2.25e+01 (# of elements : 38595)
 [Open3D DEBUG] ICP Iteration #1: Fitness 0.0001, RMSE 0.0082
 [Open3D DEBUG] Residual : 6.95e-03 (# of elements : 13)
 [Open3D DEBUG] ICP Iteration #2: Fitness 0.0000, RMSE 0.0000
 &lt;/denchmark-code&gt;
 
 
 Minimal example extracted from the reconstruction system. Files can be found as provided:
 &lt;denchmark-link:https://www.dropbox.com/s/1pydy6cv8prxawn/trans.npy?dl=0&gt;trans.npy&lt;/denchmark-link&gt;
 
 &lt;denchmark-link:https://www.dropbox.com/s/lv6wbl28dr4ae2o/fragment_011.ply?dl=0&gt;fragment_011.ply&lt;/denchmark-link&gt;
 
 &lt;denchmark-link:https://www.dropbox.com/s/hjr1qm4r99i6is1/fragment_012.ply?dl=0&gt;fragment_012.ply&lt;/denchmark-link&gt;
 
 import numpy as np
 import copy
 import open3d as o3d
 
 
 def draw_registration_result_original_color(source, target, transformation):
     flip_transform = [[1, 0, 0, 0], [0, -1, 0, 0], [0, 0, -1, 0], [0, 0, 0, 1]]
     source_temp = copy.deepcopy(source)
     target_temp = copy.deepcopy(target)
     source_temp.transform(transformation)
     source_temp.transform(flip_transform)
     target_temp.transform(flip_transform)
     o3d.visualization.draw_geometries([source_temp, target_temp])
 
 
 if __name__ == '__main__':
     o3d.utility.set_verbosity_level(o3d.utility.Debug)
     voxel_size = 0.05 / 4
 
     init_trans = np.load('trans.npy')
     print(init_trans)
 
     source = o3d.io.read_point_cloud('fragment_011.ply')
     target = o3d.io.read_point_cloud('fragment_012.ply')
     source_down = source.voxel_down_sample(voxel_size)
     target_down = target.voxel_down_sample(voxel_size)
 
     draw_registration_result_original_color(source_down, target_down,
                                             init_trans)
 
     source_down.estimate_normals(
         o3d.geometry.KDTreeSearchParamHybrid(radius=voxel_size * 2.0,
                                              max_nn=30))
     target_down.estimate_normals(
         o3d.geometry.KDTreeSearchParamHybrid(radius=voxel_size * 2.0,
                                              max_nn=30))
 
     result_icp = o3d.registration.registration_colored_icp(
         source_down, target_down, voxel_size, init_trans,
         o3d.registration.ICPConvergenceCriteria(relative_fitness=1e-6,
                                                 relative_rmse=1e-6,
                                                 max_iteration=14))
 
     draw_registration_result_original_color(source_down, target_down,
                                             result_icp.transformation)
     print(result_icp.transformation)
 Expected behavior
 Successful registration.
 Additional notes
 Point-to-point and point-to-plane ICP succeeds on this pair.
 Reverting the order of fragments and using the inverse of init_pose will also produce a failure registration, but less abusrd:
 &lt;denchmark-link:https://user-images.githubusercontent.com/6127282/67881330-b1a8e900-fb16-11e9-8303-72c487135c41.png&gt;&lt;/denchmark-link&gt;
 
 Environment (please complete the following information):
 
 OS: Ubuntu 18.04 | macOS
 Python version: 3.7.4
 Open3D version: 0.8.0.0
 Is this remote workstation?: no
 How did you install Open3D?: conda
 
 	</description>
 	<comments>
 		<comment id='1' author='theNded' date='2019-10-31T01:49:52Z'>
 		Hello &lt;denchmark-link:https://github.com/theNded&gt;@theNded&lt;/denchmark-link&gt;
 . This is not expected behavior. I haven't noticed before, so I presume some commits were problematic. Could you try &lt;denchmark-link:https://git-scm.com/docs/git-bisect&gt;bisect git&lt;/denchmark-link&gt;
  and find the problematic commit?
 		</comment>
 		<comment id='2' author='theNded' date='2019-10-31T06:47:39Z'>
 		I change the method of "icp_method": "point_to_plane" in config/tutorial.json
 The picture below is a comparison of two icp_methods, in the same fragments folder (generated by using --make once), and run --register --refine --integrate with different icp_method
 So the color_icp has some unpredictable problems ?
 &lt;denchmark-link:https://user-images.githubusercontent.com/35401968/67924892-c192fc80-fbec-11e9-93bf-88d61b39b252.png&gt;&lt;/denchmark-link&gt;
 
 
 the left is "icp_method": "point_to_plane" and the right is "icp_method": "color"
 
 		</comment>
 		<comment id='3' author='theNded' date='2019-10-31T15:02:23Z'>
 		&lt;denchmark-link:https://github.com/syncle&gt;@syncle&lt;/denchmark-link&gt;
  I have traced back to 0.7.0 and the bug has already been there. Before that Open3D's structure was totally different, it might be harder to config.
 I'm trying to directly modify the code now. There are surely some problems with the color part: when I turn the photometric coeff to 0, the registration is correct, and the linear system looks like
 &lt;denchmark-code&gt;JTJ: 
  97338.5 -1696.52  16632.3  3870.86 -41394.1 -27123.3
 -1696.52  26066.7 -1141.67    10016 -1008.41  6525.47
  16632.3 -1141.67  15425.4  2668.18 -6787.57 -2862.44
  3870.86    10016  2668.18  5818.21  -2230.1   2376.6
 -41394.1 -1008.41 -6787.57  -2230.1  19794.5  12441.9
 -27123.3  6525.47 -2862.44   2376.6  12441.9  11747.2
 JTr: 
  14.2091 -1.46349 -1.02842  1.28828 -4.84222  -5.1516
 &lt;/denchmark-code&gt;
 
 But when I turn it on, the results become
 &lt;denchmark-code&gt;JTJ: 
  9.04476e+09 -2.15437e+10 -3.10165e+09  8.25759e+08  2.38016e+09 -1.41246e+10
 -2.15437e+10   5.1318e+10  7.38836e+09 -1.96696e+09  -5.6697e+09  3.36451e+10
 -3.10165e+09  7.38836e+09  1.06374e+09 -2.83185e+08 -8.16286e+08  4.84395e+09
  8.25759e+08 -1.96696e+09 -2.83185e+08  7.53997e+07  2.17314e+08 -1.28959e+09
  2.38016e+09  -5.6697e+09 -8.16286e+08  2.17314e+08  6.26426e+08 -3.71719e+09
 -1.41246e+10  3.36451e+10  4.84395e+09 -1.28959e+09 -3.71719e+09  2.20586e+10
 JTr: 
  4.54983e+07 -1.08011e+08 -1.55415e+07  4.12067e+06  1.18777e+07 -7.04842e+07
 &lt;/denchmark-code&gt;
 
 I will dig deeper here.
 		</comment>
 		<comment id='4' author='theNded' date='2019-10-31T15:43:03Z'>
 		&lt;denchmark-link:https://github.com/syncle&gt;@syncle&lt;/denchmark-link&gt;
  it seems that some ill color gradiants polluted the linear system:
 &lt;denchmark-code&gt;suspicious gradient: -24266.6 -69947.5   415081 from 3 nn
 suspicious gradient:   -24278 -69980.1   415275 from 3 nn
 suspicious gradient: -24280.3 -69986.9   415315 from 3 nn
 &lt;/denchmark-code&gt;
 
 Actually, we need at least 4-nn here
 &lt;denchmark-link:https://github.com/intel-isl/Open3D/blob/master/src/Open3D/Registration/ColoredICP.cpp#L104&gt;https://github.com/intel-isl/Open3D/blob/master/src/Open3D/Registration/ColoredICP.cpp#L104&lt;/denchmark-link&gt;
 
 In the 3-nn case, we are building a 3x3 linear system with only 2 constraints (even if we have a regularizor, this is still pretty ill-posed).
 After setting it to 4-nn, the problem is gone. Does it make sense? If so I will make a PR.
 		</comment>
 		<comment id='5' author='theNded' date='2019-11-01T05:57:34Z'>
 		Thanks &lt;denchmark-link:https://github.com/theNded&gt;@theNded&lt;/denchmark-link&gt;
  &lt;denchmark-link:https://github.com/MaxChanger&gt;@MaxChanger&lt;/denchmark-link&gt;
  for the analysis. That sounds feasible. I will review the PR.
 		</comment>
 	</comments>
 </bug>
<commit id='ebc2621195406f22ac2efed870513b322ccf31a0' author='Wei Dong' date='2019-11-01 14:59:08+09:00'>
 	<dmm_unit complexity='None' interfacing='None' size='None'></dmm_unit>
 	<modification change_type='MODIFY' old_name='src\Open3D\Registration\ColoredICP.cpp' new_name='src\Open3D\Registration\ColoredICP.cpp'>
 		<file_info nloc='202' complexity='19' token_count='1864'></file_info>
 		<method name='open3d::InitializePointCloudForColoredICP' parameters='target,search_param'>
 				<method_info nloc='55' complexity='5' token_count='566' nesting_level='2' start_line='78' end_line='141'></method_info>
 			<added_lines>105</added_lines>
 			<deleted_lines>105</deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines></added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 </commit>
</bug_data>
