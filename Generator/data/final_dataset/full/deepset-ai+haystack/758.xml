<bug_data>
<bug id='758' author='krishanudb' open_date='2021-01-21T22:29:16Z' closed_time='2021-01-25T11:54:35Z'>
 	<summary>SQLite OperationalError in SQLDocumentStore</summary>
 	<description>
 In the following lines, I get errors:
 &lt;denchmark-code&gt;document_store.delete_all_documents()
 
 # Write documents to document store
 document_store.write_documents(documents)
 
 # Add documents embeddings to index
 document_store.update_embeddings(retriever=retriever)
 &lt;/denchmark-code&gt;
 
 The error message:
 &lt;denchmark-code&gt;01/21/2021 22:03:34 - INFO - haystack.document_store.faiss -   Updating embeddings for 75 docs...
   0%|          | 0/75 [00:00&lt;?, ?it/s]
 ---------------------------------------------------------------------------
 OperationalError                          Traceback (most recent call last)
 /usr/local/lib/python3.6/dist-packages/sqlalchemy/engine/base.py in _execute_context(self, dialect, constructor, statement, parameters, *args)
    1276                     self.dialect.do_execute(
 -&gt; 1277                         cursor, statement, parameters, context
    1278                     )
 
 17 frames
 /usr/local/lib/python3.6/dist-packages/sqlalchemy/engine/default.py in do_execute(self, cursor, statement, parameters, context)
     608     def do_execute(self, cursor, statement, parameters, context=None):
 --&gt; 609         cursor.execute(statement, parameters)
     610 
 
 OperationalError: near "(": syntax error
 
 The above exception was the direct cause of the following exception:
 
 OperationalError                          Traceback (most recent call last)
 &lt;ipython-input-8-0ae6e12f6b98&gt; in &lt;module&gt;()
       6 
       7 # Add documents embeddings to index
 ----&gt; 8 document_store.update_embeddings(retriever=retriever)
 
 /usr/local/lib/python3.6/dist-packages/haystack/document_store/faiss.py in update_embeddings(self, retriever, index, batch_size)
     188         batched_documents = get_batches_from_generator(result, batch_size)
     189         with tqdm(total=document_count) as progress_bar:
 --&gt; 190             for document_batch in batched_documents:
     191                 embeddings = retriever.embed_passages(document_batch)  # type: ignore
     192                 assert len(document_batch) == len(embeddings)
 
 /usr/local/lib/python3.6/dist-packages/haystack/utils.py in get_batches_from_generator(iterable, n)
     122     """
     123     it = iter(iterable)
 --&gt; 124     x = tuple(islice(it, n))
     125     while x:
     126         yield x
 
 /usr/local/lib/python3.6/dist-packages/haystack/document_store/faiss.py in get_all_documents_generator(self, index, filters, return_embedding, batch_size)
     241             return_embedding = self.return_embedding
     242 
 --&gt; 243         for doc in documents:
     244             if return_embedding:
     245                 if doc.meta and doc.meta.get("vector_id") is not None:
 
 /usr/local/lib/python3.6/dist-packages/haystack/document_store/sql.py in get_all_documents_generator(self, index, filters, return_embedding, batch_size)
     183 
     184         documents_map = {}
 --&gt; 185         for i, row in enumerate(self._windowed_query(documents_query, DocumentORM.id, batch_size), start=1):
     186             documents_map[row.id] = Document(
     187                 id=row.id,
 
 /usr/local/lib/python3.6/dist-packages/haystack/document_store/sql.py in _windowed_query(self, q, column, windowsize)
     464         for whereclause in self._column_windows(
     465                 q.session,
 --&gt; 466                 column, windowsize):
     467             for row in q.filter(whereclause).order_by(column):
     468                 yield row
 
 /usr/local/lib/python3.6/dist-packages/haystack/document_store/sql.py in _column_windows(self, session, column, windowsize)
     449             q = q.filter(text("rownum %% %d=1" % windowsize))
     450 
 --&gt; 451         intervals = [id for id, in q]
     452 
     453         while intervals:
 
 /usr/local/lib/python3.6/dist-packages/sqlalchemy/orm/query.py in __iter__(self)
    3533         if self._autoflush and not self._populate_existing:
    3534             self.session._autoflush()
 -&gt; 3535         return self._execute_and_instances(context)
    3536 
    3537     def __str__(self):
 
 /usr/local/lib/python3.6/dist-packages/sqlalchemy/orm/query.py in _execute_and_instances(self, querycontext)
    3558         )
    3559 
 -&gt; 3560         result = conn.execute(querycontext.statement, self._params)
    3561         return loading.instances(querycontext.query, result, querycontext)
    3562 
 
 /usr/local/lib/python3.6/dist-packages/sqlalchemy/engine/base.py in execute(self, object_, *multiparams, **params)
    1009             )
    1010         else:
 -&gt; 1011             return meth(self, multiparams, params)
    1012 
    1013     def _execute_function(self, func, multiparams, params):
 
 /usr/local/lib/python3.6/dist-packages/sqlalchemy/sql/elements.py in _execute_on_connection(self, connection, multiparams, params)
     296     def _execute_on_connection(self, connection, multiparams, params):
     297         if self.supports_execution:
 --&gt; 298             return connection._execute_clauseelement(self, multiparams, params)
     299         else:
     300             raise exc.ObjectNotExecutableError(self)
 
 /usr/local/lib/python3.6/dist-packages/sqlalchemy/engine/base.py in _execute_clauseelement(self, elem, multiparams, params)
    1128             distilled_params,
    1129             compiled_sql,
 -&gt; 1130             distilled_params,
    1131         )
    1132         if self._has_events or self.engine._has_events:
 
 /usr/local/lib/python3.6/dist-packages/sqlalchemy/engine/base.py in _execute_context(self, dialect, constructor, statement, parameters, *args)
    1315         except BaseException as e:
    1316             self._handle_dbapi_exception(
 -&gt; 1317                 e, statement, parameters, cursor, context
    1318             )
    1319 
 
 /usr/local/lib/python3.6/dist-packages/sqlalchemy/engine/base.py in _handle_dbapi_exception(self, e, statement, parameters, cursor, context)
    1509             elif should_wrap:
    1510                 util.raise_(
 -&gt; 1511                     sqlalchemy_exception, with_traceback=exc_info[2], from_=e
    1512                 )
    1513             else:
 
 /usr/local/lib/python3.6/dist-packages/sqlalchemy/util/compat.py in raise_(***failed resolving arguments***)
     180 
     181         try:
 --&gt; 182             raise exception
     183         finally:
     184             # credit to
 
 /usr/local/lib/python3.6/dist-packages/sqlalchemy/engine/base.py in _execute_context(self, dialect, constructor, statement, parameters, *args)
    1275                 if not evt_handled:
    1276                     self.dialect.do_execute(
 -&gt; 1277                         cursor, statement, parameters, context
    1278                     )
    1279 
 
 /usr/local/lib/python3.6/dist-packages/sqlalchemy/engine/default.py in do_execute(self, cursor, statement, parameters, context)
     607 
     608     def do_execute(self, cursor, statement, parameters, context=None):
 --&gt; 609         cursor.execute(statement, parameters)
     610 
     611     def do_execute_no_params(self, cursor, statement, context=None):
 
 OperationalError: (sqlite3.OperationalError) near "(": syntax error
 [SQL: SELECT anon_1.document_id AS anon_1_document_id 
 FROM (SELECT document.id AS document_id, row_number() OVER (ORDER BY document.id) AS rownum 
 FROM document) AS anon_1 
 WHERE rownum % 10000=1]
 (Background on this error at: http://sqlalche.me/e/13/e3q8)
 &lt;/denchmark-code&gt;
 
 	</description>
 	<comments>
 		<comment id='1' author='krishanudb' date='2021-01-21T22:58:14Z'>
 		Can you please check the SQLite version?
 Error is coming from windowing query and it's support was introduced since &lt;denchmark-link:https://sqlite.org/windowfunctions.html#history&gt;3.25 version&lt;/denchmark-link&gt;
 . So I am suspecting your colab have lower version of SQLite install. Try upgrading to latest version and try again.
 &lt;denchmark-link:https://github.com/tanaysoni&gt;@tanaysoni&lt;/denchmark-link&gt;
  I think we might need to disable windowing queries by default.
 		</comment>
 		<comment id='2' author='krishanudb' date='2021-01-21T23:22:51Z'>
 		SQLite3 version (3, 22, 0)
 it seems updating sqlite3 on colab is not as easy
 		</comment>
 		<comment id='3' author='krishanudb' date='2021-01-21T23:36:52Z'>
 		Try this &lt;denchmark-link:https://stackoverflow.com/questions/59427642/upgrading-sqlite-in-colab&gt;https://stackoverflow.com/questions/59427642/upgrading-sqlite-in-colab&lt;/denchmark-link&gt;
 
 		</comment>
 		<comment id='4' author='krishanudb' date='2021-01-25T11:56:31Z'>
 		&lt;denchmark-link:https://github.com/krishanudb&gt;@krishanudb&lt;/denchmark-link&gt;
  thank you for raising the issue. With &lt;denchmark-link:https://github.com/deepset-ai/haystack/pull/768&gt;#768&lt;/denchmark-link&gt;
 , the use of window functions is disabled for older versions of SQLite. Could you try the tutorial again after pulling in the latest master branch?
 		</comment>
 	</comments>
 </bug>
<commit id='d9f011da9a7a4eb4423f16b783b55fb034fd5c12' author='Tanay Soni' date='2021-01-25 12:54:34+01:00'>
 	<dmm_unit complexity='1.0' interfacing='1.0' size='1.0'></dmm_unit>
 	<modification change_type='MODIFY' old_name='haystack\document_store\sql.py' new_name='haystack\document_store\sql.py'>
 		<file_info nloc='342' complexity='62' token_count='2710'></file_info>
 		<modified_lines>
 			<added_lines>99,100,101,102,103,190,191,192,193,194</added_lines>
 			<deleted_lines>185</deleted_lines>
 		</modified_lines>
 	</modification>
 	<modification change_type='MODIFY' old_name='test\test_document_store.py' new_name='test\test_document_store.py'>
 		<file_info nloc='384' complexity='34' token_count='2955'></file_info>
 		<method name='test_get_all_documents_with_correct_filters_legacy_sqlite' parameters='document_store_with_docs'>
 				<method_info nloc='9' complexity='3' token_count='108' nesting_level='0' start_line='55' end_line='64'></method_info>
 			<added_lines>55,56,57,58,59,60,61,62,63,64</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines>54,65,66</added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 </commit>
</bug_data>
