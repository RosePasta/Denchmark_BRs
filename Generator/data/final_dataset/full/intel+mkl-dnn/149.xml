<bug_data>
<bug id='149' author='kruus' open_date='2017-11-10T20:52:24Z' closed_time='2017-11-20T15:44:08Z'>
 	<summary>primitive iterator segfaults, if you are lucky.</summary>
 	<description>
 &lt;denchmark-h:h3&gt;Description&lt;/denchmark-h&gt;
 
 
 mkldnn_primitive_desc_create passes a nullptr argument to ...
 mkldnn_primitive_desc_iterator_create_v2, which passes the address of a temporary stack variable into new primitive_desc_iterator ...
 which is unsafe for the primitives to copy [or use] after returning from ...create_v2
 
 &lt;denchmark-h:h3&gt;Quick-fix (move and modify one line of code)&lt;/denchmark-h&gt;
 
 Make the const primitive_attr_t * argument used when nullptr is given to mkldnn_primitive_desc_iterator_create_v2 point to a static default-constructed one at file scope.
 Move the dummy_attr declaration up a few lines:
 static const primitive_attr_t dummy_attr; // (file scope)
 Verified by rerunning valgrind on a test program that uses iterators.
 &lt;denchmark-h:h3&gt;Environment&lt;/denchmark-h&gt;
 
 Probably any. (in debug compiles, sometimes it failed to segfault, but valgrind still identifies the bug)
 &lt;denchmark-h:h3&gt;Steps to reproduce&lt;/denchmark-h&gt;
 
 You need a test program that uses iterators
 (I have such a basic test in my tests/api.c on the necla-ml/gen-dnn.git fork)
 &lt;denchmark-h:h3&gt;Actual behavior&lt;/denchmark-h&gt;
 
 Segfault with default compile, and valgrind reports:
 &lt;denchmark-code&gt;==24519== Conditional jump or move depends on uninitialised value(s)
 ==24519==    at 0x4E5D171: mkldnn::impl::scales_t::set(int, int, float const*) (primitive_attr.cpp:32)
 &lt;/denchmark-code&gt;
 
 &lt;denchmark-h:h3&gt;Expected behavior&lt;/denchmark-h&gt;
 
 No segfault and no valgrind complaints
 	</description>
 	<comments>
 		<comment id='1' author='kruus' date='2017-11-10T21:28:17Z'>
 		Thanks for catching that!
 Though i am still not sure i see the exact reason of the problem... primitive_desc copies the attribute, so it should not actually de-reference that stack dummy_attr...
 Am looking into the issue.
 		</comment>
 		<comment id='2' author='kruus' date='2017-11-10T21:42:20Z'>
 		The pointer is copied in the iterator constructor.  There is no new memory allocation. It quickly becomes stale.
 Sure the primitive creates a copy, but this is via the copy constructor of attr, but by then
 the src pointer is invalid.
 Sorry, don't have full valgrind trace available anymore.
 		</comment>
 		<comment id='3' author='kruus' date='2017-11-10T21:56:09Z'>
 		No worries about valgrind traces.
 I got your point. But the thing is that iterator is used with-in the function mkldnn_primitive_desc_iterator_create_v2, so dummy_attr should be alive during this time.
 I definitely miss something... :(
 		</comment>
 		<comment id='4' author='kruus' date='2017-11-11T04:39:24Z'>
 		
 You almost have it. And thing are great while within scope of ...create_v2, where the pointer is alive.
 But &amp;dummy_attr the pointer is passed out to mkldnn_primitive_desc_iterator constructor, and stored as mkldnn_primitive_desc_iterator::attr_.
 The iterator creates no primitive (pd_(nullptr)).
 Primitive factory functions are invoked later as mkldnn_primitive_desc_iterator::operator++  moves the iterator forward.
 It is true that ...create_v2 invokes operator++ to find a first valid impl.  &amp;dummy_attr is still OK. You are happy. I am happy.
 
 &lt;denchmark-code&gt;primitive_desc_iterator_t &amp;operator++() {
   // loop over primitive construction functions
   auto s = impl_list_[idx_](&amp;pd_, op_desc_, attr_/* oops */, engine_, hint_fwd_pd_);
   //            attr_     had better still point to valid memory
   // etc.
 }
 &lt;/denchmark-code&gt;
 
 
 So what if we want to iterate with our iterator?
 
 To get the next valid impl, I call mkldnn_primitive_desc_iterator_next, ...
 invoking operator++ and
 attr_ now points to ???. Attribute copy constructors get called. I am sad. You are sad.
 
 
 
 &lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;
 
 btw, the double delete destructor bug seems still there. Please set pd_ = nullptr after delete pd_ in operator++ so that ~mkldnn_primitive_desc_iterator doesn't delete it a second time.  This also can segfault if you iterate through every single available impl for a primitive.
 		</comment>
 		<comment id='5' author='kruus' date='2017-11-13T19:02:52Z'>
 		Arrrh, i am careless... :(
 All that time i thought about mkldnn_primitive_desc_create_v2, not mkldnn_primitive_desc_iterator_create_v2. The latter of course has a bug... :(
 I am reworking this part.
 I also added test that catches the problem. Should've done that earlier.
 Thanks a lot for a quick eye and patience.
 		</comment>
 		<comment id='6' author='kruus' date='2017-11-13T21:12:14Z'>
 		Tentatively push the fix into my fork of mkl-dnn.
 There is some work happening meanwhile, so the patch will be promoted to the main repo slightly later...
 		</comment>
 		<comment id='7' author='kruus' date='2017-11-13T21:18:49Z'>
 		On my fork, api.c (test4, iirc?) has an iteration demo that has been regularly catching such oversights, but maybe a shorter/separate test/gtest can be cooked up "in your copious free time" :)
 		</comment>
 		<comment id='8' author='kruus' date='2017-11-13T21:20:59Z'>
 		Just as you &lt;denchmark-link:https://github.com/emfomenk/mkl-dnn/commit/b21425d30973b2b66c7fd11ad630232ca952e942#diff-81a8585a3380fda77805f0d64a945572&gt;wanted&lt;/denchmark-link&gt;
  :)
 		</comment>
 	</comments>
 </bug>
<commit id='46a599230bcdd8e90309d3d0f44298a9df0421f0' author='Fomenko, Evarist M' date='2017-11-14 17:18:19+00:00'>
 	<dmm_unit complexity='None' interfacing='None' size='None'></dmm_unit>
 	<modification change_type='MODIFY' old_name='src\common\primitive_iterator.cpp' new_name='src\common\primitive_iterator.cpp'>
 		<file_info nloc='114' complexity='32' token_count='752'></file_info>
 		<method name='mkldnn_primitive_desc_iterator::mkldnn_primitive_desc_iterator' parameters='engine,op_desc,attr,hint_fwd_pd'>
 				<method_info nloc='8' complexity='2' token_count='87' nesting_level='1' start_line='32' end_line='39'></method_info>
 			<added_lines>34,35</added_lines>
 			<deleted_lines>34,35</deleted_lines>
 		</method>
 		<method name='mkldnn_primitive_desc_iterator::operator ++' parameters=''>
 				<method_info nloc='9' complexity='4' token_count='61' nesting_level='1' start_line='50' end_line='58'></method_info>
 			<added_lines>51,53</added_lines>
 			<deleted_lines>51,53</deleted_lines>
 		</method>
 		<method name='mkldnn_primitive_desc_iterator_create_v2' parameters='iterator,c_op_desc,attr,engine,hint_fwd_pd'>
 				<method_info nloc='18' complexity='4' token_count='109' nesting_level='0' start_line='82' end_line='103'></method_info>
 			<added_lines></added_lines>
 			<deleted_lines>88,89,90,91</deleted_lines>
 		</method>
 		<method name='mkldnn_primitive_desc_iterator::mkldnn_primitive_desc_iterator' parameters='engine,last_idx'>
 				<method_info nloc='4' complexity='1' token_count='46' nesting_level='1' start_line='76' end_line='79'></method_info>
 			<added_lines>78</added_lines>
 			<deleted_lines>78</deleted_lines>
 		</method>
 		<method name='mkldnn_primitive_desc_create_v2' parameters='primitive_desc,c_op_desc,attr,engine,hint_fwd_pd'>
 				<method_info nloc='12' complexity='3' token_count='93' nesting_level='0' start_line='141' end_line='155'></method_info>
 			<added_lines></added_lines>
 			<deleted_lines>146,147,148,149</deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines>70</added_lines>
 			<deleted_lines>70</deleted_lines>
 		</modified_lines>
 	</modification>
 	<modification change_type='MODIFY' old_name='tests\gtests\CMakeLists.txt' new_name='tests\gtests\CMakeLists.txt'>
 		<file_info nloc='None' complexity='None' token_count='None'></file_info>
 		<modified_lines>
 			<added_lines>30</added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 	<modification change_type='ADD' old_name='None' new_name='tests\gtests\test_iface_pd_iter.cpp'>
 		<file_info nloc='39' complexity='4' token_count='228'></file_info>
 	</modification>
 </commit>
</bug_data>
