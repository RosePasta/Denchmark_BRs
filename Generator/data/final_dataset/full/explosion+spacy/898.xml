<bug_data>
<bug id='898' author='adam-ra' open_date='2017-03-21T12:36:34Z' closed_time='2017-03-31T10:32:19Z'>
 	<summary>Dependencies not deprojectivized in spaCy 1.7</summary>
 	<description>
 I've noticed suspiciously large amount of evident parser errors after migrating from Spacy 1.6.0 and generic ‘en’ model to 1.7.2 + ‘en_depent_web_md’.
 Environment: Python 3.4.3 / 3.5.1 on 64-bit Linux (Ubuntu).
 Some example below (please note the abundance of proper noun tags).
 1.6.0: pain in lower back
 &lt;denchmark-code&gt; 0) ROOT    pain                    NOUN  NN    ROOT
  1) prep   ---- in                  ADP   IN    prep
  3) pobj   -------- back            NOUN  NN    pobj
  2) amod   ------------ low         ADJ   JJR   amod
 &lt;/denchmark-code&gt;
 
 1.7.2: pain in lower back
 &lt;denchmark-code&gt; 3) ROOT    back                    PROPN NNP   ROOT
  0) nsubj  ---- pain                NOUN  NN    nsubj
  1) nmod   ---- in                  X     XX    nmod
  2) compound ---- lower             PROPN NNP   compound
 &lt;/denchmark-code&gt;
 
 1.6.0: I feel pain in lower back
 &lt;denchmark-code&gt; 1) ROOT    feel                    VERB  VBP   ROOT
  0) nsubj  ---- i                   PRON  PRP   nsubj
  2) dobj   ---- pain                NOUN  NN    dobj
  3) prep   -------- in              ADP   IN    prep
  5) pobj   ------------ back        NOUN  NN    pobj
  4) amod   ---------------- low     ADJ   JJR   amod
 &lt;/denchmark-code&gt;
 
 1.7.2: I feel pain in lower back
 &lt;denchmark-code&gt; 1) ROOT    feel                    VERB  VBP   ROOT
  0) nsubj  ---- i                   NOUN  NN    nsubj
  2) dobj   ---- pain                NOUN  NN    dobj
  3) prep   -------- in              ADP   IN    prep
  5) pobj   ------------ back        PROPN NNP   pobj
  4) compound ---------------- lower PROPN NNP   compound
 &lt;/denchmark-code&gt;
 
 1.6.0: sores on my dick
 &lt;denchmark-code&gt; 0) ROOT    sore                    NOUN  NNS   ROOT
  1) prep   ---- on                  ADP   IN    prep
  3) pobj   -------- dick            NOUN  NN    pobj
  2) poss   ------------ my          ADJ   PRP$  poss
 &lt;/denchmark-code&gt;
 
 1.7.2: sores on my dick
 &lt;denchmark-code&gt; 0) ROOT    sore                    NOUN  NN    ROOT
  1) prep   ---- on                  ADP   IN    prep
  3) pobj   -------- dick            PROPN NNP   pobj
  2) compound ------------ my        PROPN NNP   compound
 &lt;/denchmark-code&gt;
 
 	</description>
 	<comments>
 		<comment id='1' author='adam-ra' date='2017-03-21T12:39:12Z'>
 		Literally just pushed a fix to this. Could you try redownloading? It should give you en_depent_web_md-1.2.1, which should have this fixed.
 		</comment>
 		<comment id='2' author='adam-ra' date='2017-03-21T12:51:21Z'>
 		Wow, what a coincidence :)
 It keeps downloading 1.2.0… not sure if it's the new or old one, will let you know
 		</comment>
 		<comment id='3' author='adam-ra' date='2017-03-21T12:58:10Z'>
 		1.2.0 behaves as the old one (perhaps it is the old one?) while:
 &lt;denchmark-code&gt;python -m spacy download en_depent_web_md-1.2.1
 
     Compatibility error
 
     No compatible model found for en_depent_web_md-1.2.1 (spaCy v1.7.2).```
 &lt;/denchmark-code&gt;
 
 		</comment>
 		<comment id='4' author='adam-ra' date='2017-03-21T13:00:50Z'>
 		1.2.0 is the old one -- 1.2.1 is the fix. Sorry, missed an entry in our compatibility table (for future reference: &lt;denchmark-link:https://github.com/explosion/spacy-models/blob/master/compatibility.json&gt;https://github.com/explosion/spacy-models/blob/master/compatibility.json&lt;/denchmark-link&gt;
  )
 Try now?
 		</comment>
 		<comment id='5' author='adam-ra' date='2017-03-21T13:37:36Z'>
 		It took me some time to realise that I need to try en_depent_web_md without version suffix.
 The main issue — superfluous proper noun tags — seems gone now! Thanks for the quick reaction.
 There is, however, some bug — broken pronoun lemma.
 I feel pain in lower back:
 &lt;denchmark-code&gt; 1) ROOT    feel                    VERB  VBP   ROOT
  0) nsubj  ---- -PRON-              PRON  PRP   nsubj
  2) dobj   ---- pain                NOUN  NN    dobj
  3) prep   -------- in              ADP   IN    prep
  4) advmod ---- low                 ADJ   JJR   advmod
  5) prt    -------- back            ADV   RB    prt
 &lt;/denchmark-code&gt;
 
 Also, here is some unexpected dependency links but perhaps these are just within the expected margin of error.
 pain in lower back: “back” as an adverbial particle, lower as phrase head :(
 &lt;denchmark-code&gt; 0) ROOT    pain                    NOUN  NN    ROOT
  1) prep   ---- in                  ADP   IN    prep
  2) pobj   -------- low             ADJ   JJR   pobj
  3) prt    ------------ back        ADV   RB    prt```
 
 BTW, the downloader has a bit unfriendly symlinking policy, it fails if the link target already exists.
 &lt;/denchmark-code&gt;
 
 		</comment>
 		<comment id='6' author='adam-ra' date='2017-03-21T14:12:18Z'>
 		The  lemma is &lt;denchmark-link:https://spacy.io/docs/api/annotation#lemmatization&gt;expected behaviour&lt;/denchmark-link&gt;
  --- it was actually a bug that caused pronouns to not be lemmatised in the previous version.
 		</comment>
 		<comment id='7' author='adam-ra' date='2017-03-21T14:26:48Z'>
 		This seems quite a controversial decision to me… I understand at least some reasons (for instance, there's no obvious base form for 3rd person personal pronouns), but other than that one would expect that lemma is a form belonging to the language vocabulary (unlike stems). Also, this brings personal, possessive and other pronouns into the same lemma, which is not always a good thing.
 Out of curiosity: does this decision stem from OntoNotes or is it your idea? I've checked CLEAR guidelines and it's not part of it. Also, it would be nice if this was added to the annotation docs.
 EDIT: sorry, either I missed the part in the docs or you just added it :)
 Is there any other special lemma like this?
 		</comment>
 		<comment id='8' author='adam-ra' date='2017-03-21T15:21:18Z'>
 		Sorry for flooding with syntactic details, but chances are the following behaviour was not intended.
 &lt;denchmark-code&gt;Pain in back, headache
  0) ROOT    pain                    PROPN NNP   ROOT
  1) prep   ---- in                  ADP   IN    prep
  2) pobj   -------- back            NOUN  NN    pobj
  3) punct  ---- ,                   PUNCT ,     punct
  4) relcl||pobj ---- headache       NOUN  NN    relcl||pobj
 &lt;/denchmark-code&gt;
 
 What got me thinking is both ‘relcl’ label itself (I'd expect ‘rcmod’ if anything) and the x||y syntax.
 Also, the new model seems to like appositions a lot more than the old one (some “NP, NP” constructs are labelled as appositions rather than coordinations, but I guess this distinction is semantic/pragmatic, so hard to expect a supervised parser to perform well in this task).
 		</comment>
 		<comment id='9' author='adam-ra' date='2017-03-21T17:55:52Z'>
 		The -PRON- lemma was my idea, and yes I agree that it's controversial. I see your argument about it not being within the language, but it seemed to me to be the best solution for pronouns. I should check again what the Universal Dependencies project does.
 Thanks for the note about the dependency labels. I think the de-projectiviser isn't running after the parser. That explains the | labels.
 I'm not sure what the situation is with the appositions.
 		</comment>
 		<comment id='10' author='adam-ra' date='2017-03-22T09:05:00Z'>
 		Thanks for the explanations!
 I understand the reason and for some practical reasons this artificial lemma is actually quite convenient (including my use case). Anyway I've got a comment loosely related to personal pronoun lemmas. My first language is Polish, a morphologically rich language. Polish adjective inflects for number, gender and case. In noun phrases adjective gender depends on the gender of the noun being the syntactic head of the noun (strictly speaking, adjectives and noun agree on number, gender and grammatical case). So, aside for picking nominative case, there is no proper way to decide which adjective form should be used as lemma. The tradition has it masculine, singular, nominative — both in old dictionaries and in modern tagsets. Similar situation happens for other Slavic languages (e.g. Slovene, Czech, Croatian).
 BTW in the tagset of the National Corpus of Polish, 3rd person pronouns are lemmatised to the male form, also (&lt;denchmark-link:http://nkjp.pl/poliqarp/help/ense2.html#x3-20002&gt;http://nkjp.pl/poliqarp/help/ense2.html#x3-20002&lt;/denchmark-link&gt;
 , see ppron3). In the case of the MULTEXT-East tagset, the decisions made differ (&lt;denchmark-link:http://nl.ijs.si/ME/V4/msd/html/index.html&gt;http://nl.ijs.si/ME/V4/msd/html/index.html&lt;/denchmark-link&gt;
 ). There is also an interesting discussion on the Universal Dependencies project you mentioned: &lt;denchmark-link:https://github.com/UniversalDependencies/docs/issues/276&gt;UniversalDependencies/docs#276&lt;/denchmark-link&gt;
 
 		</comment>
 		<comment id='11' author='adam-ra' date='2018-05-09T00:39:09Z'>
 		This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue for related bugs.
 		</comment>
 	</comments>
 </bug>
<commit id='47a3ef06a69607c747ae4b7d0f34ec37635c6317' author='Matthew Honnibal' date='2017-03-31 12:31:50+02:00'>
 	<dmm_unit complexity='1.0' interfacing='1.0' size='1.0'></dmm_unit>
 	<modification change_type='MODIFY' old_name='spacy\language.py' new_name='spacy\language.py'>
 		<file_info nloc='347' complexity='97' token_count='2675'></file_info>
 		<method name='create_pipeline' parameters='self,nlp'>
 				<method_info nloc='12' complexity='5' token_count='70' nesting_level='1' start_line='139' end_line='150'></method_info>
 			<added_lines>147</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines></added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 	<modification change_type='MODIFY' old_name='spacy\syntax\arc_eager.pyx' new_name='spacy\syntax\arc_eager.pyx'>
 		<file_info nloc='None' complexity='None' token_count='None'></file_info>
 		<modified_lines>
 			<added_lines></added_lines>
 			<deleted_lines>430,431</deleted_lines>
 		</modified_lines>
 	</modification>
 </commit>
</bug_data>
