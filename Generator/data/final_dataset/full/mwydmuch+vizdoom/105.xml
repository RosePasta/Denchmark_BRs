<bug_data>
<bug id='105' author='shehroze37-zz' open_date='2016-07-30T14:10:17Z' closed_time='2016-12-06T09:52:35Z'>
 	<summary>Depth buffer for 'on my way home' scenario not working</summary>
 	<description>
 Hi the depth buffer for on my way home scenario is not working. And what metric does the depth buffer values represent. I am using that for research and its very important I get the scale of that correct so wasn't sure how to convert those depth values into a suitable metric i.e (meters, cm, mm etc). I would appreciate any help on this. Even if it doesnt represent any metric, are the depth buffer values consistent throughout different scenarios?
 When I was testing the on my way home scenario, the max value in the depth buffer was 4 and the minimum was 4 as well so not sure whats going wrong there.
 Cheers !
 	</description>
 	<comments>
 		<comment id='1' author='shehroze37-zz' date='2016-07-30T18:13:20Z'>
 		It's strange but it actually doesn't work for this one scenario. I'll examine this.
 And as for the question about metric:
 It is not intended to represent any and the values are the same for the same distances regardless of the scenario and main wad.
 So using this &lt;denchmark-link:http://doomwiki.org/wiki/Map_unit&gt;http://doomwiki.org/wiki/Map_unit&lt;/denchmark-link&gt;
  and a map with known dimensions you can calculate how to translate buffer's values to real world units.
 Let us know if you do it, I'm curious about results :)
 EDIT:
 Additional explanation:
 Depth is calculated based on the texture's scale value which is represented in a rather unusual way (at least for me) in ZDoom/Doom engine and I have no idea how to translate that value to more meaningful unit.
 		</comment>
 		<comment id='2' author='shehroze37-zz' date='2016-08-12T14:52:34Z'>
 		I found it is possible to get the correct depth buffer in my_way_home.
 Its just not very likely and doesn't work if you render the window.
 In general this looks a lot like &lt;denchmark-link:https://github.com/Marqt/ViZDoom/issues/72&gt;issue 72&lt;/denchmark-link&gt;
 .
 A little experiment (see code below):
 Ubuntu 14.04, approx. 4 weeks old vizdoom version
 
 
 Turning off all rendering options (incl window):
 Found 6.5 % correct depth buffers (65/1000) in 233.9 s.
 
 
 Turning on all rendering options (except window):
 Found 13.4 % correct depth buffers (134/1000) in 228.6 s.
 
 
 Turning on all rendering options (incl window):
 Found 0.0 % correct depth buffers (0/500) in 333.1 s.
 
 
 import numpy as np
 from vizdoom import DoomGame, ScreenFormat
 
 import time
 
 
 def create_game(config_path = 'config/my_way_home.cfg'):
     '''
         Create and initialize a new game
         Set screenformat manually
         Start a new episode
     '''
     game = DoomGame()
     game.load_config(config_path)
     game.set_screen_format(ScreenFormat.CRCGCBDB) # Set screenformat manually
     game.init()
     game.new_episode()
     return game
 
 
 def functional_depth_buffer():
     game = create_game()
     img_buffer = game.get_state().image_buffer
     depth = img_buffer[-1,:,:]
 
     # Test if correct depth buffer this can be incorrect because
     # standing straight in front of a wall might result in a uniform depth buffer.
     if np.std(depth) &gt; 0.0001:
         functional = True
     else:
         functional = False
 
     game.close()
 
     return functional
 
 
 def test_functional_depth_buffer(n = 100):
     n_funct = 0.
     for i in xrange(n):
         if functional_depth_buffer():
             n_funct += 1
     return round(n_funct/n,3)
 
 
 if __name__ == '__main__':
     n = 500
     before = time.time()
     r_funct = test_functional_depth_buffer(n)
     duration = round(time.time() - before,1)
     print 'Found {} % correct depth buffers ({}/{}) in {} s.'.format(r_funct*100., int(n*r_funct), n, duration)
 		</comment>
 		<comment id='3' author='shehroze37-zz' date='2016-12-06T09:52:34Z'>
 		I cannot reproduce this bug anymore (tested on Linux and Windows) - closing.
 		</comment>
 	</comments>
 </bug>
<commit id='7db09bb3a8031f5d5764e5428896efb5ed26a0be' author='Marqt' date='2016-11-10 23:46:50+01:00'>
 	<dmm_unit complexity='0.0' interfacing='1.0' size='0.0'></dmm_unit>
 	<modification change_type='MODIFY' old_name='src\vizdoom\src\d_main.cpp' new_name='src\vizdoom\src\d_main.cpp'>
 		<file_info nloc='2208' complexity='437' token_count='11672'></file_info>
 		<method name='D_Display' parameters=''>
 				<method_info nloc='246' complexity='60' token_count='1261' nesting_level='0' start_line='666' end_line='967'></method_info>
 			<added_lines>823,824,825,826,827,848,849,850</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines></added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 </commit>
</bug_data>
