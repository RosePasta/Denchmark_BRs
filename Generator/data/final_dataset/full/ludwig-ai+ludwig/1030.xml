<bug_data>
<bug id='1030' author='michaelbzhu' open_date='2020-11-28T20:09:51Z' closed_time='2020-12-24T02:11:42Z'>
 	<summary>Hyperopt metric_score uses last epoch instead of best epoch</summary>
 	<description>
 hyperopt() generates a hyperopt_statistics.json file which contains training_stats and the metric_score from each sample
 I'm optimizing for validation accuracy, but I noticed that the final metric_score that gets reported in the json file uses the validation accuracy from the last epoch during training rather than the best epoch during training
 Below is the output from my hyperopt_statistics.json file
 &lt;denchmark-code&gt;"hyperopt_results": [
         {
             "eval_stats": {
                 "combined": {
                     "loss": 1.4781785011291504
                 },
                 "label": {
                     "accuracy": 0.47138965129852295,  // this is the final reported accuracy
 ...
             },
             "metric_score": 0.47138965129852295,   // this value comes from HyperoptExecutor.get_metric_score(self, eval_stats) which just copies the value above
             "parameters": {
                 "training.learning_rate": 0.0006019209790229743,
                 "utterance.cell_type": "gru",
                 "utterance.num_layers": 1,
                 "utterance.state_size": 495
             },
             "training_stats": {
                 "validation": {
                     "combined": {
                         "loss": [
                             1.3932547569274902,
                             1.2642898559570312,
                             1.3837428092956543,
                             1.2704368829727173,
                             1.3504513502120972,
                             1.3695340156555176,
                             1.6437498331069946,
                             1.589107632637024,
                             1.4781785011291504
                         ]
                     },
                     "label": {
                         "accuracy": [
                             0.40962761640548706,
                             0.440508633852005,
                             0.4423251450061798,
                             0.47320616245269775,  // this is the best validation accuracy from training
                             0.47320616245269775,
                             0.440508633852005,
                             0.4523160755634308,
                             0.40690281987190247,
                             0.47138965129852295   // this value from the last epoch is what's actually reported above
                         ],
 ...
 &lt;/denchmark-code&gt;
 
 Is this intended because the logger output from LudwigModel.train() uses the best validation accuracy so I thought hyperopt would have similar behavior?
 If this is a bug I can try to help fix it as I have a general idea of where this behavior comes from in the codebase
 Environment:
 
 Run in Google Colab
 Python version 3.6.9
 Ludwig version 0.3.1
 
 	</description>
 	<comments>
 		<comment id='1' author='michaelbzhu' date='2020-11-29T01:46:58Z'>
 		This is not expected behavior, you are correctly pointing out that the best score should be returned.
 There could be a couple explanations for this. In particular if the model is not saved during the training part of an experiment, the model at the last epoch is used for evaluation, so I suspect this is what's happening. So if your skip_save_model=True that could explain the behavior.
 Anyway, will look into it and thank you for spotting this!
 		</comment>
 		<comment id='2' author='michaelbzhu' date='2020-11-29T02:33:41Z'>
 		This PR is a first attempt at fixing the issue: &lt;denchmark-link:https://github.com/ludwig-ai/ludwig/pull/1031&gt;#1031&lt;/denchmark-link&gt;
 
 		</comment>
 	</comments>
 </bug>
<commit id='8af2181d64aab2b823db204f02d63227e07b8604' author='Piero Molino' date='2020-12-23 18:11:42-08:00'>
 	<dmm_unit complexity='None' interfacing='None' size='None'></dmm_unit>
 	<modification change_type='MODIFY' old_name='ludwig\hyperopt\execution.py' new_name='ludwig\hyperopt\execution.py'>
 		<file_info nloc='664' complexity='41' token_count='3093'></file_info>
 		<method name='get_metric_score_from_eval_stats' parameters='self,eval_stats'>
 				<method_info nloc='21' complexity='6' token_count='111' nesting_level='1' start_line='41' end_line='61'></method_info>
 			<added_lines>41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<method name='get_metric_score_from_train_stats' parameters='self,train_stats'>
 				<method_info nloc='13' complexity='1' token_count='83' nesting_level='1' start_line='63' end_line='80'></method_info>
 			<added_lines>63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<method name='get_metric_score' parameters='self,eval_stats'>
 				<method_info nloc='2' complexity='1' token_count='21' nesting_level='1' start_line='23' end_line='24'></method_info>
 			<added_lines>24</added_lines>
 			<deleted_lines>23</deleted_lines>
 		</method>
 		<method name='get_metric_score' parameters='self,train_stats,eval_stats'>
 				<method_info nloc='15' complexity='6' token_count='88' nesting_level='1' start_line='24' end_line='39'></method_info>
 			<added_lines>24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<method name='_run_experiment_gpu' parameters='self,hyperopt_dict'>
 				<method_info nloc='16' complexity='2' token_count='90' nesting_level='1' start_line='268' end_line='283'></method_info>
 			<added_lines>275</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<method name='_run_experiment' parameters='self,hyperopt_dict'>
 				<method_info nloc='10' complexity='1' token_count='51' nesting_level='1' start_line='256' end_line='266'></method_info>
 			<added_lines>259</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines>10,40,81,209,624</added_lines>
 			<deleted_lines>153,203,219,568</deleted_lines>
 		</modified_lines>
 	</modification>
 	<modification change_type='MODIFY' old_name='ludwig\preprocess.py' new_name='ludwig\preprocess.py'>
 		<file_info nloc='229' complexity='3' token_count='602'></file_info>
 		<method name='cli' parameters='sys_argv'>
 				<method_info nloc='84' complexity='2' token_count='309' nesting_level='0' start_line='166' end_line='267'></method_info>
 			<added_lines>211</added_lines>
 			<deleted_lines>211</deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines></added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 	<modification change_type='MODIFY' old_name='tests\integration_tests\test_hyperopt.py' new_name='tests\integration_tests\test_hyperopt.py'>
 		<file_info nloc='217' complexity='4' token_count='1250'></file_info>
 		<method name='test_hyperopt_executor_get_metric_score' parameters=''>
 				<method_info nloc='72' complexity='1' token_count='424' nesting_level='0' start_line='196' end_line='272'></method_info>
 			<added_lines>196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269,270,271,272</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines></added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 </commit>
</bug_data>
