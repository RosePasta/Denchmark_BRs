<bug_data>
<bug id='3386' author='reyoung' open_date='2017-08-10T07:23:26Z' closed_time='2017-08-10T10:23:32Z'>
 	<summary>Boost Variadic Template and NVCC has bugs if nvcc != 7.5</summary>
 	<description>
 It seems that in this &lt;denchmark-link:https://github.com/boostorg/config/blame/develop/include/boost/config/compiler/nvcc.hpp&gt;file&lt;/denchmark-link&gt;
 ,  boost disable variadic template support when nvcc != 7.5. It says that  has bug to handle C++ variadic template.
 But our refactoring code is using boost::variant, which is used the variadic template in C++ 11. If we use boost &gt; 1.61 and nvcc != 7.5, the error will occurred like below:
 &lt;denchmark-code&gt;Undefined symbols for architecture x86_64:
   "paddle::platform::is_cpu_place(boost::variant&lt;paddle::platform::GPUPlace, paddle::platform::CPUPlace, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_&gt; const&amp;)", referenced from:
       float* paddle::framework::Tensor::mutable_data&lt;float&gt;(boost::variant&lt;paddle::platform::GPUPlace, paddle::platform::CPUPlace, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_&gt;) in libadd_op.a(add_op_generated_add_op.cu.o)
       paddle::framework::Tensor::PlaceholderImpl&lt;float, paddle::platform::CPUPlace&gt;::PlaceholderImpl(paddle::platform::CPUPlace, unsigned long) in libadd_op.a(add_op_generated_add_op.cu.o)
       paddle::framework::Tensor::PlaceholderImpl&lt;float, paddle::platform::GPUPlace&gt;::PlaceholderImpl(paddle::platform::GPUPlace, unsigned long) in libadd_op.a(add_op_generated_add_op.cu.o)
   "paddle::platform::is_gpu_place(boost::variant&lt;paddle::platform::GPUPlace, paddle::platform::CPUPlace, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_&gt; const&amp;)", referenced from:
       paddle::framework::OperatorWithKernel::OpKernelHash::operator()(paddle::framework::OperatorWithKernel::OpKernelKey const&amp;) const in libadd_op.a(add_op_generated_add_op.cu.o)
       float* paddle::framework::Tensor::mutable_data&lt;float&gt;(boost::variant&lt;paddle::platform::GPUPlace, paddle::platform::CPUPlace, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_&gt;) in libadd_op.a(add_op_generated_add_op.cu.o)
   "paddle::platform::places_are_same_class(boost::variant&lt;paddle::platform::GPUPlace, paddle::platform::CPUPlace, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_&gt; const&amp;, boost::variant&lt;paddle::platform::GPUPlace, paddle::platform::CPUPlace, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_, boost::detail::variant::void_&gt; const&amp;)", referenced from:
       paddle::framework::OperatorWithKernel::OpKernelKey::operator==(paddle::framework::OperatorWithKernel::OpKernelKey const&amp;) const in libadd_op.a(add_op_generated_add_op.cu.o)
 ld: symbol(s) not found for architecture x86_64
 &lt;/denchmark-code&gt;
 
 There should be two situations.
 
 
 Check boost and nvcc version in CMake, and give a reasonable error. Freeze our boost and nvcc to some version.
 
 
 Always define BOOST_NO_CXX11_VARIADIC_TEMPLATES when GPU=ON. To generate same function symbols between gcc/clang and nvcc
 
 
 	</description>
 	<comments>
 	</comments>
 </bug>
<commit id='2df628af884f78f9019e28dc1f242264581bbdb4' author='Yu Yang' date='2017-08-10 15:47:30+08:00'>
 	<dmm_unit complexity='None' interfacing='None' size='None'></dmm_unit>
 	<modification change_type='MODIFY' old_name='paddle\framework\attribute.h' new_name='paddle\framework\attribute.h'>
 		<file_info nloc='125' complexity='20' token_count='750'></file_info>
 		<modified_lines>
 			<added_lines>26</added_lines>
 			<deleted_lines>17</deleted_lines>
 		</modified_lines>
 	</modification>
 	<modification change_type='MODIFY' old_name='paddle\framework\ddim.h' new_name='paddle\framework\ddim.h'>
 		<file_info nloc='57' complexity='7' token_count='434'></file_info>
 		<modified_lines>
 			<added_lines>22</added_lines>
 			<deleted_lines>17</deleted_lines>
 		</modified_lines>
 	</modification>
 	<modification change_type='MODIFY' old_name='paddle\framework\operator.h' new_name='paddle\framework\operator.h'>
 		<file_info nloc='221' complexity='31' token_count='1657'></file_info>
 		<modified_lines>
 			<added_lines>29</added_lines>
 			<deleted_lines>18</deleted_lines>
 		</modified_lines>
 	</modification>
 	<modification change_type='MODIFY' old_name='paddle\platform\place.h' new_name='paddle\platform\place.h'>
 		<file_info nloc='31' complexity='9' token_count='253'></file_info>
 		<modified_lines>
 			<added_lines>18</added_lines>
 			<deleted_lines>17</deleted_lines>
 		</modified_lines>
 	</modification>
 	<modification change_type='ADD' old_name='None' new_name='paddle\platform\variant.h'>
 		<file_info nloc='2' complexity='0' token_count='4'></file_info>
 	</modification>
 </commit>
</bug_data>
