<bug_data>
<bug id='7105' author='elpollouk' open_date='2020-02-10T10:26:59Z' closed_time='2020-02-11T06:40:10Z'>
 	<summary>[Ray] Attempting to fetch an object that has been freed blocks forever</summary>
 	<description>
 &lt;denchmark-h:h3&gt;What is the problem?&lt;/denchmark-h&gt;
 
 Ray: 0.8.0/0.8.1
 OS: Ubuntu 16.04/18.04
 Attempting to ray.get() an object freed using ray.internal.free() causes the get request to block forever.
 RLlib has the function &lt;denchmark-link:https://github.com/ray-project/ray/blob/247a4d022ac4ca0a10553616b7c806c4429ed355/rllib/utils/memory.py#L12&gt;ray_get_and_free()&lt;/denchmark-link&gt;
  which is used to fetch and free up samples returned from environment workers. However, when attempting to recover after a worker failure, it will try to re-fetch the last sample batch but ends up blocking the main thread as it tries to fetch an already freed object.
 When a process has become stuck in this state, it must be terminated using the kill command as Ctrl+C has no effect.
 &lt;denchmark-h:h3&gt;Expected Behaviour&lt;/denchmark-h&gt;
 
 An error is raised if attempting to fetch a freed object. This allows API users to quickly detect problems related to API misuse.
 &lt;denchmark-h:h3&gt;Reproduction&lt;/denchmark-h&gt;
 
 &lt;denchmark-code&gt;import ray
 
 @ray.remote
 class Sampler:
     def sample(self):
         return [1, 2, 3, 4, 5]
 
 ray.init()
 sampler = Sampler.remote()
 
 obj_id = sampler.sample.remote()
 sample = ray.get(obj_id)
 print("Sample: {}".format(sample))
 
 ray.internal.free(obj_id)
 sample = ray.get(obj_id) # Will block forever here
 print("Refetched sample: {}".format(sample))
 &lt;/denchmark-code&gt;
 
 	</description>
 	<comments>
 		<comment id='1' author='elpollouk' date='2020-02-10T18:59:23Z'>
 		This is very likely hanging on the in-memory store get() call - ray.internal.free deletes the object from both the in-memory and plasma stores so the subsequent ray.get() blocks forever waiting for the in-memory store entry to appear (which it never does).
 Not sure the right solution here. We could leave a "freed" object in the store but it's not obvious when we can clean it up (maybe once all Python references are gone).
 		</comment>
 		<comment id='2' author='elpollouk' date='2020-02-10T19:49:33Z'>
 		I see, I thought we only freed from plasma before actually. I think that is fine since local objects are recounted already.
 		</comment>
 		<comment id='3' author='elpollouk' date='2020-02-11T10:13:09Z'>
 		I can confirm that my test script runs to completion with the latest nightly.
 		</comment>
 	</comments>
 </bug>
<commit id='58c94f6381922b2f1b8cd53b5c351468c0537898' author='Eric Liang' date='2020-02-10 22:40:09-08:00'>
 	<dmm_unit complexity='1.0' interfacing='1.0' size='0.19047619047619047'></dmm_unit>
 	<modification change_type='MODIFY' old_name='build.sh' new_name='build.sh'>
 		<file_info nloc='None' complexity='None' token_count='None'></file_info>
 		<modified_lines>
 			<added_lines>123,140,141,142,143</added_lines>
 			<deleted_lines>123,140,141</deleted_lines>
 		</modified_lines>
 	</modification>
 	<modification change_type='MODIFY' old_name='python\ray\tests\test_advanced.py' new_name='python\ray\tests\test_advanced.py'>
 		<file_info nloc='544' complexity='118' token_count='4295'></file_info>
 		<method name='test_internal_free' parameters='shutdown_only'>
 				<method_info nloc='17' complexity='1' token_count='116' nesting_level='0' start_line='25' end_line='50'></method_info>
 			<added_lines>25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<method name='test_internal_free.sample_big' parameters='self'>
 				<method_info nloc='2' complexity='1' token_count='14' nesting_level='2' start_line='33' end_line='34'></method_info>
 			<added_lines>33,34</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<method name='test_internal_free.sample' parameters='self'>
 				<method_info nloc='2' complexity='1' token_count='17' nesting_level='2' start_line='30' end_line='31'></method_info>
 			<added_lines>30,31</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines>24,51,52</added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 	<modification change_type='MODIFY' old_name='src\ray\core_worker\core_worker.cc' new_name='src\ray\core_worker\core_worker.cc'>
 		<file_info nloc='1002' complexity='170' token_count='8050'></file_info>
 		<method name='ray::CoreWorker::Delete' parameters='object_ids,local_only,delete_creating_tasks'>
 				<method_info nloc='11' complexity='2' token_count='76' nesting_level='1' start_line='615' end_line='631'></method_info>
 			<added_lines>620,621,622,623,624,625,626</added_lines>
 			<deleted_lines>617,618,619,620,624</deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines></added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 	<modification change_type='MODIFY' old_name='src\ray\core_worker\core_worker.h' new_name='src\ray\core_worker\core_worker.h'>
 		<file_info nloc='223' complexity='14' token_count='1849'></file_info>
 		<modified_lines>
 			<added_lines>272</added_lines>
 			<deleted_lines>272</deleted_lines>
 		</modified_lines>
 	</modification>
 </commit>
</bug_data>
