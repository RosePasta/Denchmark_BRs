<bug_data>
<bug id='8176' author='rkooo567' open_date='2020-04-25T05:25:54Z' closed_time='2020-04-25T16:32:39Z'>
 	<summary>Ray async api is not working with uvloop.</summary>
 	<description>
 &lt;denchmark-h:h3&gt;What is the problem?&lt;/denchmark-h&gt;
 
 Current Ray async api uses asyncio event loop's internal attribute to identify if the loop is running in the current current thread.
     loop = asyncio.get_event_loop()
     if loop.is_running():
         if loop._thread_id != threading.get_ident():
             # If the loop is runing outside current thread, we actually need
             # to do this to make sure the context is initialized.
             asyncio.run_coroutine_threadsafe(_async_init(), loop=loop)
 This causes a problem when we uses Ray APIs inside Fast API because Fast API uses uvloop as its main event loop, and uvloop doesn't have _thread_id attribute.
 &lt;denchmark-link:https://github.com/simon-mo&gt;@simon-mo&lt;/denchmark-link&gt;
  Any good idea to fix this? It doesn't seem to be trivial. What about we do async_init() whenever asyncio loop is created in a different thread instead of checking if the event loop's thread id? I assume the only use case where asyncio loop is defined in a different thread is only inside async actor?
 &lt;denchmark-h:h3&gt;Reproduction (REQUIRED)&lt;/denchmark-h&gt;
 
 Please provide a script that can be run to reproduce the issue. The script should have no external library dependencies (i.e., use fake or mock data / environments):
 import time
 import asyncio 
 ​
 import ray
 import psutil
 from fastapi import FastAPI, APIRouter
 ​
 ​
 app = FastAPI(
     title="API template",
     description="Template to build upon for API serving and distributed computation",
     version="0.1.0",
     openapi_url="/openapi.json",
     docs_url="/docs",
 )
 ​
 @app.on_event("startup")
 def startup_event():
     ray.init(num_cpus=2)
 ​
 ​
 ​
 @app.on_event("shutdown")
 def shutdown_event():
     ray.shutdown()
 ​
 ​
 @app.get('/async')
 async def non_seq_async_process():
     """
     async distributed execution
     """
     @ray.remote
     def slow_function(i):
         time.sleep(i)
         return i
 ​
     start_time = time.time()
 ​
     # result_ids = []
     # for i in range(10, 60, 10):
     #     result_ids.append(slow_function.remote(i))
     
     # results = ray.get(result_ids)
 ​
     results = await asyncio.wait([slow_function.remote(i) for i in range(10, 60, 10)])
 ​
     
     duration = time.time() - start_time
     out = "Executing the for loop took {:.3f} seconds.\n".format(duration)
     out += f"The results are: {results}\n"
 If we cannot run your script, we cannot fix your issue.
 
  I have verified my script runs in a clean environment and reproduces the issue.
  I have verified the issue also occurs with the latest wheels.
 
 	</description>
 	<comments>
 		<comment id='1' author='rkooo567' date='2020-04-25T09:38:05Z'>
 		Sounds promising!
 		</comment>
 	</comments>
 </bug>
<commit id='13c14eac076c81227a96e24f749392f5b75aa2ce' author='Simon Mo' date='2020-04-25 09:32:38-07:00'>
 	<dmm_unit complexity='0.0' interfacing='0.0' size='0.0'></dmm_unit>
 	<modification change_type='MODIFY' old_name='python\ray\_raylet.pyx' new_name='python\ray\_raylet.pyx'>
 		<file_info nloc='None' complexity='None' token_count='None'></file_info>
 		<modified_lines>
 			<added_lines>1145,1146</added_lines>
 			<deleted_lines>1145,1146</deleted_lines>
 		</modified_lines>
 	</modification>
 	<modification change_type='MODIFY' old_name='python\ray\experimental\async_api.py' new_name='python\ray\experimental\async_api.py'>
 		<file_info nloc='23' complexity='6' token_count='122'></file_info>
 		<method name='_async_init' parameters=''>
 				<method_info nloc='8' complexity='2' token_count='47' nesting_level='0' start_line='13' end_line='20'></method_info>
 			<added_lines>13</added_lines>
 			<deleted_lines>13</deleted_lines>
 		</method>
 		<method name='init' parameters=''>
 				<method_info nloc='9' complexity='2' token_count='56' nesting_level='0' start_line='10' end_line='20'></method_info>
 			<added_lines>10,11,12,13</added_lines>
 			<deleted_lines>13</deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines></added_lines>
 			<deleted_lines>1,2,4,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47</deleted_lines>
 		</modified_lines>
 	</modification>
 	<modification change_type='MODIFY' old_name='python\ray\tests\test_asyncio.py' new_name='python\ray\tests\test_asyncio.py'>
 		<file_info nloc='129' complexity='29' token_count='920'></file_info>
 		<method name='test_asyncio_get' parameters='ray_start_regular_shared,event_loop'>
 				<method_info nloc='27' complexity='1' token_count='183' nesting_level='0' start_line='110' end_line='158'></method_info>
 			<added_lines>116,117</added_lines>
 			<deleted_lines>116,117</deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines></added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 </commit>
</bug_data>
