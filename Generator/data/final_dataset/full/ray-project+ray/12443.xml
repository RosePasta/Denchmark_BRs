<bug_data>
<bug id='12443' author='PidgeyBE' open_date='2020-11-26T10:42:11Z' closed_time='2020-12-01T00:03:31Z'>
 	<summary>[autoscaler] Request resources behaves inconsistently</summary>
 	<description>
 &lt;denchmark-h:h3&gt;What is the problem?&lt;/denchmark-h&gt;
 
 
 Ray nightly
 
 &lt;denchmark-h:h3&gt;Reproduction (REQUIRED)&lt;/denchmark-h&gt;
 
 
 set up k8s autoscaling cluster
 Run this (I did it in ipython on ray head):
 
 &lt;denchmark-code&gt;import os
 import ray
 from ray.autoscaler.sdk import request_resources
 
 ray.init(address="auto")
 
 @ray.remote(num_cpus=0.2)
 class ActorA:
     def __init__(self):
         pass
 
 a = ActorA.remote()
 
 request_resources(bundles=[{"CPU": 0.1}, {"CPU": 0.1}])
 &lt;/denchmark-code&gt;
 
 -&gt; Output of autoscaling monitor is
 &lt;denchmark-code&gt;2020-11-26 10:37:16,419 INFO resource_demand_scheduler.py:193 -- Resource demands: [{'CPU': 0.2}]
 ...
 2020-11-26 10:37:16,425 INFO autoscaler.py:612 -- StandardAutoscaler: resource_requests=[{'CPU': 0.1}, {'CPU': 0.1}]
 ...
 2020-11-26 10:37:26,588 INFO resource_demand_scheduler.py:193 -- Resource demands: [{'CPU': 0.2}, {'CPU': 0.1}]
 &lt;/denchmark-code&gt;
 
 -&gt; The expected output is [{'CPU': 0.2}, {'CPU': 0.1}, {'CPU': 0.1}]
 In other tests I did, the requested resources where totally ignored.
 
 If I do ray.kill(a) now, the output shows:
 Resource demands: [{'CPU': 0.2}, {'CPU': 0.1}, {'CPU': 0.1}]
 So the missing request shows up, but the the request related to the actor is not cleaned up (#12441)
 
 
  I have verified my script runs in a clean environment and reproduces the issue.
  I have verified the issue also occurs with the latest wheels.
 
 	</description>
 	<comments>
 		<comment id='1' author='PidgeyBE' date='2020-11-27T09:59:42Z'>
 		Hi &lt;denchmark-link:https://github.com/PidgeyBE&gt;@PidgeyBE&lt;/denchmark-link&gt;
 ,
 when you call  you get these resources "immediately", but they do not add on top of what you already have.
 So if you resource demands are {"CPU": 0.2} the available resources become:
  the  becomes available immediately but the remaining  might take more time to become available.
 Checkout how  works &lt;denchmark-link:https://docs.ray.io/en/master/cluster/autoscaling.html?highlight=request_resources#ray.autoscaler.sdk.request_resources&gt;here&lt;/denchmark-link&gt;
 .
 Does it make sense?
 		</comment>
 		<comment id='2' author='PidgeyBE' date='2020-11-27T14:14:52Z'>
 		So if I do:
 &lt;denchmark-code&gt;ray.remote(num_cpus=0.2)(ActorA).remote()
 request_resources(bundles=[{"CPU": 0.1}, {"CPU": 0.1}])
 &lt;/denchmark-code&gt;
 
 the total Resource Demands become [{'CPU': 0.2}, {'CPU': 0.1}], because one requested bundle {'CPU': 0.1} fits into the currently deployed task with{'CPU': 0.2}.
 But if I do
 &lt;denchmark-code&gt;request_resources(bundles=[{"CPU": 0.2}, {"CPU": 0.2}])
 ray.remote(num_cpus=0.1)(ActorA).remote()
 &lt;/denchmark-code&gt;
 
 the total Resource Demand becomes [{'CPU': 0.1}, {'CPU': 0.2}, {'CPU': 0.2}], because non of the requested bundles fits into one of the already deployed tasks?
 So the Resource Demands are basically the requested resources, minus the bundles that are smaller or equal to running tasks?
 		</comment>
 		<comment id='3' author='PidgeyBE' date='2020-11-28T00:02:18Z'>
 		&lt;denchmark-link:https://github.com/PidgeyBE&gt;@PidgeyBE&lt;/denchmark-link&gt;
  that's right. Note that you're seeing here an artifact of the implementation of request_resources() (the internal bin packing algorithm). If only  were used instead of different shapes, this artifact were disappear. We could in the future improve the algorithm to fix this edge case.
 The intended use of request_resources() is as a hint to scale the cluster to accommodate the requests, ignoring any existing utilization of the cluster; the result cluster size might be slightly larger than necessary due to sub-optimal packing.
 		</comment>
 	</comments>
 </bug>
<commit id='234df9091e57f2a4d7574e2ae53635bb5c862b9e' author='Eric Liang' date='2020-11-30 16:03:30-08:00'>
 	<dmm_unit complexity='None' interfacing='None' size='None'></dmm_unit>
 	<modification change_type='MODIFY' old_name='python\ray\autoscaler\sdk.py' new_name='python\ray\autoscaler\sdk.py'>
 		<file_info nloc='226' complexity='15' token_count='816'></file_info>
 		<modified_lines>
 			<added_lines>186,188,189,190,191,192,193,194,195,196,197,198,199,204,207</added_lines>
 			<deleted_lines>186,188,189,194,197</deleted_lines>
 		</modified_lines>
 	</modification>
 </commit>
</bug_data>
