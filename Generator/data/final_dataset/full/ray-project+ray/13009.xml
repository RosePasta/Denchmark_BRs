<bug_data>
<bug id='13009' author='sumanthratna' open_date='2020-12-21T03:48:42Z' closed_time='2021-01-05T16:04:19Z'>
 	<summary>[tune] sample_from validation fails with functools.partial and callables with kwargs</summary>
 	<description>
 CC &lt;denchmark-link:https://github.com/richardliaw&gt;@richardliaw&lt;/denchmark-link&gt;
 
 (labeling as bug because functools.partial and callables with kwargs should definitely be supported [IMO] and there's no indication in the docs that they don't work)
 &lt;denchmark-h:h3&gt;What is the problem?&lt;/denchmark-h&gt;
 
 
 
 
 ray/python/ray/tune/sample.py
 
 
         Lines 317 to 320
       in
       4caa6c6
 
 
 
 
 
 
  if len(signature(func).parameters) &gt; 1: 
 
 
 
  raise ValueError( 
 
 
 
  "The function passed to a `Function` parameter must accept " 
 
 
 
  "either 0 or 1 parameters.") 
 
 
 
 
 
 In tune.sample_from we have a check to see if the passed callable has either 0 or 1 arguments. This fails for functools.partial and callables that have argument with default values.
 &lt;denchmark-h:h3&gt;Reproduction (REQUIRED)&lt;/denchmark-h&gt;
 
 # untested; you get the idea
 from ray import tune
 
 
 def trainable(config):
     return config["a"]
 
 def get_a(spec, base=2):
     return base/(spec.b**2)
 
 config = {
     "b": tune.uniform(0, 10),
     "a": tune.sample_from(get_a),
 }
 tune.run(trainable, config=config)
 
  I have verified my script runs in a clean environment and reproduces the issue.
  I have verified the issue also occurs with the latest wheels.
 
 &lt;denchmark-h:h3&gt;Solutions&lt;/denchmark-h&gt;
 
 &lt;denchmark-h:h4&gt;Make spec a positional argument&lt;/denchmark-h&gt;
 
 i.e., instruct users to make this their sample_from signature:
 def func(spec, /, arg, kwarg=None):
     pass
 then we could change the check to if len(frozenset(name for name, param in signature(func).parameters.items() if param.kind == Parameter.POSITIONAL_ONLY)) &gt; 1
 pros:
 
 we get to keep the check
 
 cons:
 
 seems a little unintuitive for users to be required to do this
 
 &lt;denchmark-h:h4&gt;Remove the check&lt;/denchmark-h&gt;
 
 pros:
 
 this GH issue is resolved
 
 cons:
 
 uglier error message is user passes function with an incorrect signature?
 
 we can except NameError to print a prettier error message
 
 
 
 	</description>
 	<comments>
 		<comment id='1' author='sumanthratna' date='2021-01-04T12:55:02Z'>
 		Let's use sig.bind() for this as we do for detect_checkpoint_func and alike. That way we stay very flexible and still support all kinds of callables.
 I pushed a small PR for this, would be great to get your feedback on it.
 		</comment>
 	</comments>
 </bug>
<commit id='96c2d3d2b50a25821336ed2b56daa187f293ef09' author='Kai Fricke' date='2021-01-05 08:04:18-08:00'>
 	<dmm_unit complexity='None' interfacing='None' size='None'></dmm_unit>
 	<modification change_type='MODIFY' old_name='python\ray\tune\sample.py' new_name='python\ray\tune\sample.py'>
 		<file_info nloc='341' complexity='83' token_count='2536'></file_info>
 		<method name='__init__' parameters='self,Callable'>
 				<method_info nloc='16' complexity='4' token_count='67' nesting_level='1' start_line='348' end_line='366'></method_info>
 			<added_lines>349,350,351,352,353,354,355,356,357,358,359,360,361,362,363,364,365</added_lines>
 			<deleted_lines>350,351,352,353,354</deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines>336</added_lines>
 			<deleted_lines>336,337</deleted_lines>
 		</modified_lines>
 	</modification>
 	<modification change_type='MODIFY' old_name='python\ray\tune\tests\test_sample.py' new_name='python\ray\tune\tests\test_sample.py'>
 		<file_info nloc='825' complexity='58' token_count='7902'></file_info>
 		<method name='testFunctionSignature' parameters='self'>
 				<method_info nloc='14' complexity='2' token_count='87' nesting_level='1' start_line='145' end_line='169'></method_info>
 			<added_lines>145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<method name='testFunctionSignature.sample_a' parameters=''>
 				<method_info nloc='2' complexity='1' token_count='6' nesting_level='2' start_line='148' end_line='149'></method_info>
 			<added_lines>148,149</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<method name='testFunctionSignature.sample_d_invalid' parameters='spec,b'>
 				<method_info nloc='2' complexity='1' token_count='9' nesting_level='2' start_line='157' end_line='158'></method_info>
 			<added_lines>157,158</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<method name='testFunctionSignature.sample_b' parameters='spec'>
 				<method_info nloc='2' complexity='1' token_count='7' nesting_level='2' start_line='151' end_line='152'></method_info>
 			<added_lines>151,152</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<method name='testFunctionSignature.sample_c' parameters='spec,b'>
 				<method_info nloc='2' complexity='1' token_count='11' nesting_level='2' start_line='154' end_line='155'></method_info>
 			<added_lines>154,155</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines>170</added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 </commit>
</bug_data>
