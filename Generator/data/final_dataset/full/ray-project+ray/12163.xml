<bug_data>
<bug id='12163' author='Manuscrit' open_date='2020-11-19T15:28:24Z' closed_time='2020-12-01T09:45:18Z'>
 	<summary>[rllib] LR not updated by LearningRateSchedule in TorchPolicy</summary>
 	<description>
 &lt;denchmark-h:h3&gt;What is the problem?&lt;/denchmark-h&gt;
 
 In a  (I did not test with ) with  mixin, the lr value of the optimizers lr_group are not updated (LR stays constant). The  attribute has the right value but the optimizers are being updated to use it.
 This may be related/similar to &lt;denchmark-link:https://github.com/ray-project/ray/pull/6101&gt;#6101&lt;/denchmark-link&gt;
  and &lt;denchmark-link:https://github.com/ray-project/ray/issues/10423&gt;#10423&lt;/denchmark-link&gt;
 .
 The  method of the Policy is not overridden when using the  mixin.
 Tested with DQN and PPO (PyTorch only).
 Ray version and other system information (Python version, TensorFlow version, OS):
 ray version 1.0.0 and nightly
 python 3.8.5
 torch 1.7.0
 &lt;denchmark-h:h3&gt;Reproduction (REQUIRED)&lt;/denchmark-h&gt;
 
 Please provide a script that can be run to reproduce the issue. The script should have no external library dependencies (i.e., use fake or mock data / environments):
 import argparse
 
 import ray
 from ray import tune
 from ray.rllib.examples.env.parametric_actions_cartpole import \
     ParametricActionsCartPole
 from ray.rllib.examples.models.parametric_actions_model import \
     ParametricActionsModel, TorchParametricActionsModel
 from ray.rllib.models import ModelCatalog
 from ray.rllib.utils.test_utils import check_learning_achieved
 from ray.tune.registry import register_env
 from ray.rllib.agents.callbacks import DefaultCallbacks
 
 parser = argparse.ArgumentParser()
 parser.add_argument("--run", type=str, default="PPO")
 parser.add_argument("--torch", action="store_true")
 parser.add_argument("--as-test", action="store_true")
 parser.add_argument("--stop-iters", type=int, default=200)
 parser.add_argument("--stop-reward", type=float, default=150.0)
 parser.add_argument("--stop-timesteps", type=int, default=100000)
 
 
 class MyCallbacks(DefaultCallbacks):
 
     def on_train_result(self, *, trainer, result: dict, **kwargs):
         def print_true_lr(policy, policy_id):
             print("policy.cur_lr", policy.cur_lr)
             for j, opt in enumerate(policy._optimizers):
                 print(policy_id, j, [p["lr"] for p in opt.param_groups])
                 for p in opt.param_groups:
                     assert p["lr"] == policy.cur_lr, f'should have p["lr"] == policy.cur_lr but got p["lr"] ' \
                                                      f'= {p["lr"]} and policy.cur_lr {policy.cur_lr}'
         trainer.workers.foreach_policy(print_true_lr)
 
 
 if __name__ == "__main__":
     args = parser.parse_args()
     ray.init()
 
     register_env("pa_cartpole", lambda _: ParametricActionsCartPole(10))
     ModelCatalog.register_custom_model(
         "pa_model", TorchParametricActionsModel
         if args.torch else ParametricActionsModel)
 
     if args.run == "DQN":
         cfg = {
             # TODO(ekl) we need to set these to prevent the masked values
             # from being further processed in DistributionalQModel, which
             # would mess up the masking. It is possible to support these if we
             # defined a custom DistributionalQModel that is aware of masking.
             "hiddens": [],
             "dueling": False,
         }
     else:
         cfg = {}
 
     config = dict({
         "env": "pa_cartpole",
         "model": {
             "custom_model": "pa_model",
         },
         "num_workers": 0,
         "framework": "torch" if args.torch else "tf",
 
         "callbacks": MyCallbacks,
         # === Optimization ===
         # Learning rate for adam optimizer
         "lr": 1e-3,
         # Learning rate schedule
         "lr_schedule": [(0, 1e-3), (20000, 3e-5 / 1e9)],
 
     }, **cfg)
 
     stop = {
         "training_iteration": args.stop_iters,
         "timesteps_total": args.stop_timesteps,
         "episode_reward_mean": args.stop_reward,
     }
 
     results = tune.run(args.run, stop=stop, config=config, verbose=1)
 
     if args.as_test:
         check_learning_achieved(results, args.stop_reward)
 
     ray.shutdown()
 If we cannot run your script, we cannot fix your issue.
 
  I have verified my script runs in a clean environment and reproduces the issue.
  I have verified the issue also occurs with the latest wheels.
 
 	</description>
 	<comments>
 		<comment id='1' author='Manuscrit' date='2020-11-25T09:46:34Z'>
 		Thanks for filing this issue &lt;denchmark-link:https://github.com/Manuscrit&gt;@Manuscrit&lt;/denchmark-link&gt;
 
 PR: &lt;denchmark-link:https://github.com/ray-project/ray/pull/12396&gt;#12396&lt;/denchmark-link&gt;
 
 		</comment>
 	</comments>
 </bug>
<commit id='6475297bd3774fa1bdad5233164d2aa65e2c86e5' author='Sven Mika' date='2020-11-26 13:14:11+01:00'>
 	<dmm_unit complexity='1.0' interfacing='0.8125' size='0.9375'></dmm_unit>
 	<modification change_type='MODIFY' old_name='rllib\agents\ppo\tests\test_ppo.py' new_name='rllib\agents\ppo\tests\test_ppo.py'>
 		<file_info nloc='325' complexity='53' token_count='2670'></file_info>
 		<method name='test_ppo_compilation' parameters='self'>
 				<method_info nloc='24' complexity='5' token_count='170' nesting_level='1' start_line='48' end_line='74'></method_info>
 			<added_lines>48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,73</added_lines>
 			<deleted_lines>48</deleted_lines>
 		</method>
 		<method name='on_train_result' parameters='self,trainer,dict,kwargs'>
 				<method_info nloc='3' complexity='2' token_count='39' nesting_level='1' start_line='59' end_line='61'></method_info>
 			<added_lines>59,60,61</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<method name='_check_lr_tf' parameters='policy,policy_id'>
 				<method_info nloc='10' complexity='2' token_count='68' nesting_level='1' start_line='48' end_line='57'></method_info>
 			<added_lines>48,49,50,51,52,53,54,55,56,57</added_lines>
 			<deleted_lines>48</deleted_lines>
 		</method>
 		<method name='test_ppo_compilation_and_lr_schedule' parameters='self'>
 				<method_info nloc='25' complexity='5' token_count='176' nesting_level='1' start_line='73' end_line='102'></method_info>
 			<added_lines>73,76,77,78</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<method name='_check_lr_torch' parameters='policy,policy_id'>
 				<method_info nloc='4' complexity='3' token_count='37' nesting_level='1' start_line='42' end_line='45'></method_info>
 			<added_lines>42,43,44,45</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines>6,40,41,46,47</added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 	<modification change_type='MODIFY' old_name='rllib\policy\torch_policy.py' new_name='rllib\policy\torch_policy.py'>
 		<file_info nloc='478' complexity='41' token_count='3051'></file_info>
 		<method name='optimizer' parameters='self'>
 				<method_info nloc='5' complexity='3' token_count='31' nesting_level='1' start_line='619' end_line='623'></method_info>
 			<added_lines></added_lines>
 			<deleted_lines>619,623</deleted_lines>
 		</method>
 		<method name='on_global_var_update' parameters='self,global_vars'>
 				<method_info nloc='6' complexity='3' token_count='52' nesting_level='1' start_line='614' end_line='619'></method_info>
 			<added_lines>615</added_lines>
 			<deleted_lines>615,617,618,619</deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines></added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 </commit>
</bug_data>
