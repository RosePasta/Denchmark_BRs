<bug_data>
<bug id='5774' author='johann-petrak' open_date='2019-09-25T11:41:43Z' closed_time='2019-10-08T06:56:08Z'>
 	<summary>Actor class attributes not visible in actor methods?</summary>
 	<description>
 &lt;denchmark-h:h3&gt;System information&lt;/denchmark-h&gt;
 
 
 OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Ubuntu 18.04
 Ray installed from (source or binary): pip install under per-user Anaconda installation
 Ray version:  0.7.4
 Python version: 3.6.8
 Exact command to reproduce: N/A see code below
 
 &lt;denchmark-h:h3&gt;Describe the problem&lt;/denchmark-h&gt;
 
 I tried to use and existing class as an actor with ray. That class assigns a number of constant values to class-level attributes and then uses those constants
 with the class methods, like so:
 class C:
     CONST1 = 123
     def method(self):
         tmp = CONST1  
     ...
 When I use that class with Ray, when calling the class method, I get the exception "AttributeError: 'ActorClass' object has no attribute 'CONST1'"
 &lt;denchmark-h:h3&gt;Source code / logs&lt;/denchmark-h&gt;
 
 Here is a full example ready to try and run. The class wrapped as an actor is not able to access the class-level attribute:
 import ray
 ray.init()
 
 class Test0:
     X = 1
     def __init__(self):
         print("Test 0 initialised")
     def run(self):
         print("Test 0 called")
         return Test0.X
 t0 = Test0()
 print("Test0 result:", t0.run())
 
 class Test1:
     X = 1
     def __init__(self):
         print("Test 1 Initialised" )
     def run(self):
         print("Test 1 Called")
         return Test1.X
 
 print("Test1 defined, X=", Test1.X)
 Test1 = ray.remote(Test1)
 
 t1 = Test1.remote()
 print("Test1 result:", ray.get(t1.run.remote()))
 
 @ray.remote
 class Test2:
     X = 1
     def __init__(self):
         print("Test 2 Initialised" )
     def run(self):
         print("Test 2 Called")
         return Test2.X
 
 t2 = Test2.remote()
 print("Test2 result:", ray.get(t2.run.remote()))
 	</description>
 	<comments>
 		<comment id='1' author='johann-petrak' date='2019-09-28T01:10:34Z'>
 		Thanks a lot for reporting this and also for the reproduction code which is very useful! This is indeed a bug, let me look into it. As a workaround for now you can do this:
 class Test1:
     X = 1
     def __init__(self):
         print("Test 1 Initialised" )
     def run(self):
         print("Test 1 Called")
         return self.X
 
 Test1 = ray.remote(Test1)
 t1 = Test1.remote()
 
 In [7]: print("Test1 result:", ray.get(t1.run.remote()))                                                     
 Test1 result: 1
 i.e. replace the Test1.X with self.X, which works.
 		</comment>
 		<comment id='2' author='johann-petrak' date='2019-10-05T20:59:08Z'>
 		The problem is that that workaround then makes the class break when used without Ray.
 Another symptom of probably the same underlying problem is that static methods do not work:
 Running this:
 &lt;denchmark-code&gt;class Test0:
     @staticmethod
     def m():
         return 2
     def __init__(self):
         print("Test 0 initialised")
     def run(self):
         print("Test 0 called")
         return Test0.m()
 t0 = Test0()
 print("Test0 result:", t0.run())
 
 @ray.remote
 class Test1:
     @staticmethod
     def m():
         return 2
     def __init__(self):
         print("Test 1 Initialised" )
     def run(self):
         print("Test 1 Called")
         return Test1.m()
 
 t1 = Test1.remote()
 print("Test1 result:", ray.get(t1.run.remote()))
 &lt;/denchmark-code&gt;
 
 causes an exception "Methods must take a 'self' argument, but the method 'm' does not have one."
 This is a real problem for classes outside of the direct control of the programmer but also awkward for own classes because it means that all static classes must be copied to fake instance methods, invocation from outside the class and inside has to be made slightly different etc.
 Maybe I am unlucky but I am hitting this problem quite frequently.
 		</comment>
 		<comment id='3' author='johann-petrak' date='2019-10-08T07:17:42Z'>
 		&lt;denchmark-link:https://github.com/johann-petrak&gt;@johann-petrak&lt;/denchmark-link&gt;
  The fix has now been merged into master, do you want to check if it solves your problems? You can install and try it out from &lt;denchmark-link:https://ray.readthedocs.io/en/latest/installation.html#latest-snapshots-nightlies&gt;https://ray.readthedocs.io/en/latest/installation.html#latest-snapshots-nightlies&lt;/denchmark-link&gt;
 
 		</comment>
 	</comments>
 </bug>
<commit id='785670bc18a8595219c96e9512192922fafcf510' author='Philipp Moritz' date='2019-10-07 23:56:07-07:00'>
 	<dmm_unit complexity='1.0' interfacing='0.8620689655172413' size='1.0'></dmm_unit>
 	<modification change_type='MODIFY' old_name='python\ray\actor.py' new_name='python\ray\actor.py'>
 		<file_info nloc='503' complexity='53' token_count='2419'></file_info>
 		<method name='__init__' parameters='cls,name,bases,attr'>
 				<method_info nloc='12' complexity='3' token_count='53' nesting_level='1' start_line='221' end_line='244'></method_info>
 			<added_lines>226,238,239</added_lines>
 			<deleted_lines>221,222,223,224,226,227,228,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244</deleted_lines>
 		</method>
 		<method name='_from_modified_class' parameters='cls,modified_class,class_id,max_reconstructions,num_cpus,num_gpus,memory,object_store_memory,resources'>
 				<method_info nloc='3' complexity='1' token_count='21' nesting_level='1' start_line='194' end_line='196'></method_info>
 			<added_lines>194,195,196</added_lines>
 			<deleted_lines>194,195,196</deleted_lines>
 		</method>
 		<method name='__init__' parameters='self'>
 				<method_info nloc='2' complexity='1' token_count='6' nesting_level='3' start_line='178' end_line='179'></method_info>
 			<added_lines>178,179</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<method name='class_id' parameters='self'>
 				<method_info nloc='2' complexity='1' token_count='9' nesting_level='1' start_line='395' end_line='396'></method_info>
 			<added_lines></added_lines>
 			<deleted_lines>395,396</deleted_lines>
 		</method>
 		<method name='_ray_from_modified_class' parameters='cls,modified_class,class_id,max_reconstructions,num_cpus,num_gpus,memory,object_store_memory,resources'>
 				<method_info nloc='3' complexity='1' token_count='21' nesting_level='1' start_line='262' end_line='264'></method_info>
 			<added_lines>262,263,264</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<method name='__call__' parameters='self,args,kwargs'>
 				<method_info nloc='5' complexity='1' token_count='33' nesting_level='1' start_line='246' end_line='259'></method_info>
 			<added_lines>258,259</added_lines>
 			<deleted_lines>246,247,248,249,250,252,253,254</deleted_lines>
 		</method>
 		<method name='__init__' parameters='self,modified_class,class_id,max_reconstructions,num_cpus,num_gpus,memory,object_store_memory,resources'>
 				<method_info nloc='2' complexity='1' token_count='21' nesting_level='1' start_line='153' end_line='154'></method_info>
 			<added_lines>153,154</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines>120,121,124,126,127,128,130,132,133,134,135,136,142,143,147,148,149,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,180,181,182,183,184,185,186,187,188,189,190,191,192,193,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,265,266,267,268,269,270,271,272,273,274,276,277,278,279,281,282,284,285,286,342,343,348,349,360,365,366,375,382,387,390,393,394,406,411,416,417,418,419,420,421,705</added_lines>
 			<deleted_lines>120,121,122,123,126,128,129,130,132,134,135,136,137,138,144,145,149,150,151,160,172,191,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,245,314,315,326,331,332,341,348,353,356,359,360,372,377,382,383,384,385,386,387,394,397,675</deleted_lines>
 		</modified_lines>
 	</modification>
 	<modification change_type='MODIFY' old_name='python\ray\function_manager.py' new_name='python\ray\function_manager.py'>
 		<file_info nloc='528' complexity='93' token_count='3007'></file_info>
 		<method name='_load_actor_from_local' parameters='self,job_id,function_descriptor'>
 				<method_info nloc='17' complexity='3' token_count='96' nesting_level='1' start_line='654' end_line='671'></method_info>
 			<added_lines>663</added_lines>
 			<deleted_lines>663</deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines></added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 	<modification change_type='MODIFY' old_name='python\ray\tests\test_actor.py' new_name='python\ray\tests\test_actor.py'>
 		<file_info nloc='1904' complexity='495' token_count='14784'></file_info>
 		<method name='test_actor_class_attributes.f' parameters='cls'>
 				<method_info nloc='6' complexity='1' token_count='31' nesting_level='2' start_line='284' end_line='289'></method_info>
 			<added_lines>284,285,286,287,288,289</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<method name='test_actor_class_attributes.g' parameters='self'>
 				<method_info nloc='6' complexity='1' token_count='35' nesting_level='2' start_line='291' end_line='296'></method_info>
 			<added_lines>291,292,293,294,295,296</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<method name='test_actor_class_attributes' parameters='ray_start_regular'>
 				<method_info nloc='15' complexity='1' token_count='75' nesting_level='0' start_line='269' end_line='299'></method_info>
 			<added_lines>269,270,271,272,273,274,275,276,277,278,279,280,281,282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297,298,299</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines>267,268,300,301</added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 </commit>
</bug_data>
