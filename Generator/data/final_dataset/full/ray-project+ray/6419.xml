<bug_data>
<bug id='6419' author='ericl' open_date='2019-12-10T19:53:32Z' closed_time='2019-12-20T06:21:31Z'>
 	<summary>reporter.py using large amounts of CPU in get_workers()</summary>
 	<description>
 &lt;denchmark-h:h3&gt;What is the problem?&lt;/denchmark-h&gt;
 
 reporter.py uses a lot of CPU on machines with many processes running. The culprit from profiling is get_workers:
 &lt;denchmark-code&gt;    memory_info (psutil/_pslinux.py:1608)
     wrapper (psutil/_pslinux.py:1402)
     memory_info (psutil/__init__.py:1048)
     wrapper (psutil/_common.py:342)
     as_dict (psutil/__init__.py:527)
     &lt;listcomp&gt; (ray/reporter.py:118)
     get_workers (ray/reporter.py:117)
     get_all_stats (ray/reporter.py:143)
     perform_iteration (ray/reporter.py:152)
     run (ray/reporter.py:163)
     &lt;module&gt; (ray/reporter.py:205)
 &lt;/denchmark-code&gt;
 
 The get workers call is this:
 &lt;denchmark-code&gt;    @staticmethod
     def get_workers():
         return [
             x.as_dict(attrs=[
                 "pid", "create_time", "cpu_percent", "cpu_times", "name",
                 "cmdline", "memory_info", "memory_full_info"
             ]) for x in psutil.process_iter(attrs=["cmdline"])
             if is_worker(x.info["cmdline"])
         ]
 &lt;/denchmark-code&gt;
 
 We call this twice a second by default.
 cc &lt;denchmark-link:https://github.com/pcmoritz&gt;@pcmoritz&lt;/denchmark-link&gt;
  &lt;denchmark-link:https://github.com/mitchellstern&gt;@mitchellstern&lt;/denchmark-link&gt;
 
 	</description>
 	<comments>
 		<comment id='1' author='ericl' date='2019-12-10T19:59:51Z'>
 		&lt;denchmark-link:https://github.com/edoakes&gt;@edoakes&lt;/denchmark-link&gt;
  does this also affect the current release?
 		</comment>
 		<comment id='2' author='ericl' date='2019-12-19T22:51:33Z'>
 		I see this issue also in 0.7.6. I have a training job involving ~8 actors, and get informed on launch that there are something like 25 ray workers. reporter.py typically consumes like 75% of a CPU core, see this typical screenshot from htop:
 &lt;denchmark-link:https://user-images.githubusercontent.com/5598968/71216232-d85de300-226e-11ea-8ca8-e2e29b21a8be.png&gt;&lt;/denchmark-link&gt;
 
 For a quick fix, is there a way to just disable reporter? It's pretty annoying to have to kill the process each time you need all your cores.
 		</comment>
 		<comment id='3' author='ericl' date='2019-12-19T23:06:20Z'>
 		Whoops, didn't notice there was a new release. It seems marginally better in 0.8.0, around 50% cpu on the same example:
 &lt;denchmark-link:https://user-images.githubusercontent.com/5598968/71216982-11975280-2271-11ea-9087-fc66a2edf9bc.png&gt;&lt;/denchmark-link&gt;
 
 		</comment>
 	</comments>
 </bug>
<commit id='de22cdb233596697d6aa13ee0214307518e1642f' author='Eric Liang' date='2019-12-19 22:21:30-08:00'>
 	<dmm_unit complexity='1.0' interfacing='1.0' size='1.0'></dmm_unit>
 	<modification change_type='MODIFY' old_name='python\ray\dashboard\client\src\api.ts' new_name='python\ray\dashboard\client\src\api.ts'>
 		<file_info nloc='102' complexity='8' token_count='591'></file_info>
 		<modified_lines>
 			<added_lines></added_lines>
 			<deleted_lines>73</deleted_lines>
 		</modified_lines>
 	</modification>
 	<modification change_type='MODIFY' old_name='python\ray\ray_constants.py' new_name='python\ray\ray_constants.py'>
 		<file_info nloc='107' complexity='10' token_count='489'></file_info>
 		<modified_lines>
 			<added_lines>153,154</added_lines>
 			<deleted_lines>153,154</deleted_lines>
 		</modified_lines>
 	</modification>
 	<modification change_type='MODIFY' old_name='python\ray\reporter.py' new_name='python\ray\reporter.py'>
 		<file_info nloc='172' complexity='32' token_count='1055'></file_info>
 		<method name='get_workers' parameters=''>
 				<method_info nloc='12' complexity='3' token_count='51' nesting_level='1' start_line='112' end_line='123'></method_info>
 			<added_lines>115,116,117,118,119,120</added_lines>
 			<deleted_lines>115,116</deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines></added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 </commit>
</bug_data>
