<bug_data>
<bug id='12214' author='simon-mo' open_date='2020-11-20T18:40:27Z' closed_time='2020-12-14T23:09:44Z'>
 	<summary>[Serve] client.shutdown() is not complete</summary>
 	<description>
 &lt;denchmark-h:h3&gt;What is the problem?&lt;/denchmark-h&gt;
 
 Ray version and other system information (Python version, TensorFlow version, OS):
 &lt;denchmark-link:https://github.com/crypdick&gt;@crypdick&lt;/denchmark-link&gt;
  found this issue.
 &lt;denchmark-h:h3&gt;Reproduction (REQUIRED)&lt;/denchmark-h&gt;
 
 Please provide a script that can be run to reproduce the issue. The script should have no external library dependencies (i.e., use fake or mock data / environments):
 If we cannot run your script, we cannot fix your issue.
 from ray import serve
 
 client = serve.start(detached=True)
 client.shutdown()
 client = serve.start(detached=True)
 &lt;denchmark-code&gt;File descriptor limit 256 is too low for production servers and may result in connection errors. At least 8192 is recommended. --- Fix with 'ulimit -n 8192'
 2020-11-20 10:38:27,065	INFO services.py:1173 -- View the Ray dashboard at http://127.0.0.1:8265
 (pid=raylet) 2020-11-20 10:38:29,628	INFO controller.py:313 -- Starting router with name 'SERVE_CONTROLLER_ACTOR:SERVE_PROXY_ACTOR-node:192.168.31.141-0' on node 'node:192.168.31.141-0' listening on '127.0.0.1:8000'
 (pid=32847) INFO:     Started server process [32847]
 Traceback (most recent call last):
   File "detached.py", line 5, in &lt;module&gt;
     client = serve.start(detached=True)
   File "/Users/simonmo/Desktop/ray/ray/python/ray/serve/api.py", line 414, in start
     raise RayServeException("Called serve.start(detached=True) but a "
 ray.serve.exceptions.RayServeException: Called serve.start(detached=True) but a detached instance is already running. Please use serve.connect() to connect to the running instance instead.
 &lt;/denchmark-code&gt;
 
 I think this is because we didn't delete the entry in named actor registry.
 
  I have verified my script runs in a clean environment and reproduces the issue.
  I have verified the issue also occurs with the latest wheels.
 
 	</description>
 	<comments>
 		<comment id='1' author='simon-mo' date='2020-11-20T18:46:27Z'>
 		This is actually a race condition in ray core:
 import ray
 import time
 ray.init()
 
 @ray.remote
 class A:
     pass
 a = A.options(lifetime="detached", name="a").remote()
 ray.kill(a)
 ray.get_actor("a") # You can still get the actor!
 time.sleep(2)
 ray.get_actor("a") # Now you can't.
 		</comment>
 	</comments>
 </bug>
<commit id='b56db5a22ff332d09ec6bdf2881cdd9a836e7057' author='Simon Mo' date='2020-12-14 15:09:43-08:00'>
 	<dmm_unit complexity='None' interfacing='None' size='None'></dmm_unit>
 	<modification change_type='MODIFY' old_name='python\ray\serve\api.py' new_name='python\ray\serve\api.py'>
 		<file_info nloc='488' complexity='35' token_count='1874'></file_info>
 		<method name='shutdown' parameters='self'>
 				<method_info nloc='23' complexity='6' token_count='98' nesting_level='1' start_line='79' end_line='104'></method_info>
 			<added_lines>85,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103</added_lines>
 			<deleted_lines>84</deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines>2</added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 </commit>
</bug_data>
