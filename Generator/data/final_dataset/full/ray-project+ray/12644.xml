<bug_data>
<bug id='12644' author='edoakes' open_date='2020-12-07T04:22:54Z' closed_time='2020-12-12T03:47:17Z'>
 	<summary>Segfault when submitting actor tasks from background thread</summary>
 	<description>
 &lt;denchmark-h:h3&gt;What is the problem?&lt;/denchmark-h&gt;
 
 Ray into this when running the prototyped beam runner on my laptop (mac). Frequently (majority of the time) get a segfault when submitting tasks to the actors from a background thread. Traceback:
 &lt;denchmark-code&gt;Process 55677 stopped
 * thread #46, stop reason = EXC_BAD_ACCESS (code=1, address=0x48)
     frame #0: 0x00000001592e4814 _raylet.so`ray::CoreWorker::SubmitActorTask(ray::ActorID const&amp;, ray::RayFunction const&amp;, std::__1::vector&lt;std::__1::unique_ptr&lt;ray::TaskArg, std::__1::default_delete&lt;ray::TaskArg&gt; &gt;, std::__1::allocator&lt;std::__1::unique_ptr&lt;ray::TaskArg, std::__1::default_delete&lt;ray::TaskArg&gt; &gt; &gt; &gt; const&amp;, ray::TaskOptions const&amp;, std::__1::vector&lt;ray::ObjectID, std::__1::allocator&lt;ray::ObjectID&gt; &gt;*) + 1508
 _raylet.so`ray::CoreWorker::SubmitActorTask:
 -&gt;  0x1592e4814 &lt;+1508&gt;: movl   0x48(%rax), %r8d
     0x1592e4818 &lt;+1512&gt;: leaq   -0xa0(%rbp), %rdx
     0x1592e481f &lt;+1519&gt;: leaq   -0xe0(%rbp), %rbx
     0x1592e4826 &lt;+1526&gt;: movq   %r15, %rdi
 Target 0: (python) stopped.
 &lt;/denchmark-code&gt;
 
 &lt;denchmark-h:h3&gt;Reproduction (REQUIRED)&lt;/denchmark-h&gt;
 
 Run  on this branch: &lt;denchmark-link:https://github.com/ericl/ray/tree/beam-runner&gt;https://github.com/ericl/ray/tree/beam-runner&lt;/denchmark-link&gt;
 .
 If we cannot run your script, we cannot fix your issue.
 
  I have verified my script runs in a clean environment and reproduces the issue.
  I have verified the issue also occurs with the latest wheels.
 
 	</description>
 	<comments>
 		<comment id='1' author='edoakes' date='2020-12-07T04:23:02Z'>
 		&lt;denchmark-link:https://github.com/ericl&gt;@ericl&lt;/denchmark-link&gt;
 
 		</comment>
 		<comment id='2' author='edoakes' date='2020-12-07T04:25:33Z'>
 		Here's the relevant code being called from the background thread:
 144         actor = BeamWorker.options(
 145             override_environment_variables=env_dict).remote()
 147         actor.run_beam_tasks.remote()
 148         try:
 149             ray.get(actor.await_termination.remote())
 150         finally:
 151             logging_server.stop(0)
 		</comment>
 		<comment id='3' author='edoakes' date='2020-12-07T04:26:07Z'>
 		Adding a 1s sleep between creating the actor and submitting the subsequent task seems to solve the problem locally.
 		</comment>
 		<comment id='4' author='edoakes' date='2020-12-07T09:03:48Z'>
 		Maybe potential indication that our APIs are not thread-safe? (which I believe it is not currently)
 		</comment>
 		<comment id='5' author='edoakes' date='2020-12-07T15:21:25Z'>
 		&lt;denchmark-link:https://github.com/rkooo567&gt;@rkooo567&lt;/denchmark-link&gt;
  the APIs are advertised as (and should be) thread safe
 		</comment>
 		<comment id='6' author='edoakes' date='2020-12-11T00:21:46Z'>
 		&lt;denchmark-link:https://github.com/edoakes&gt;@edoakes&lt;/denchmark-link&gt;
  can you try running this under asan? I think you can do that by adding  to the bazel command in setup.py.
 		</comment>
 		<comment id='7' author='edoakes' date='2020-12-11T16:49:22Z'>
 		&lt;denchmark-link:https://github.com/ericl&gt;@ericl&lt;/denchmark-link&gt;
  trying that gives me the following error:
 &lt;denchmark-code&gt;(base) ray/serve % pytest -vs tests/test_api.py 
 ==20501==ERROR: Interceptors are not working. This may be because AddressSanitizer is loaded too late (e.g. via dlopen). Please launch the executable with:
 DYLD_INSERT_LIBRARIES=/Library/Developer/CommandLineTools/usr/lib/clang/11.0.3/lib/darwin/libclang_rt.asan_osx_dynamic.dylib
 "interceptors not installed" &amp;&amp; 0zsh: abort      pytest -vs tests/test_api.py
 &lt;/denchmark-code&gt;
 
 This seems like it's potentially mac-specific based on some googling -- is ASAN only working on linux?
 		</comment>
 		<comment id='8' author='edoakes' date='2020-12-11T17:08:05Z'>
 		Looks like this can actually be reproduced just by running the serve test_api.py (happens ~50% of the time):
 &lt;denchmark-code&gt;```tests/test_api.py .....(pid=27967) 2020-12-11 11:06:43,112      DEBUG long_poll.py:163 -- LongPollHost: Notify change for key LongPollKey.REPLICA_HANDLES.
 (pid=27967) 2020-12-11 11:06:43,112     DEBUG long_poll.py:163 -- LongPollHost: Notify change for key LongPollKey.BACKEND_CONFIGS.
 (pid=27967) 2020-12-11 11:06:43,114     DEBUG controller.py:609 -- Writing checkpoint
 (pid=27965) 2020-12-11 11:06:43,114     DEBUG long_poll.py:68 -- LongPollClient received updates for keys: [LongPollKey.BACKEND_CONFIGS].
 (pid=28010) 2020-12-11 11:06:43,111     DEBUG long_poll.py:68 -- LongPollClient received updates for keys: [LongPollKey.BACKEND_CONFIGS].
 (pid=28010) 2020-12-11 11:06:43,113     DEBUG long_poll.py:68 -- LongPollClient received updates for keys: [LongPollKey.BACKEND_CONFIGS].
 (pid=27967) 2020-12-11 11:06:43,115     DEBUG controller.py:618 -- Wrote checkpoint in 0.00
 (pid=27965) 2020-12-11 11:06:43,117     DEBUG long_poll.py:68 -- LongPollClient received updates for keys: [LongPollKey.REPLICA_HANDLES].
 Process 27933 stopped
 * thread #22, stop reason = EXC_BAD_ACCESS (code=1, address=0x48)
     frame #0: 0x000000010435ab9d _raylet.so`ray::CoreWorker::SubmitActorTask(ray::ActorID const&amp;, ray::RayFunction const&amp;, std::__1::vector&lt;std::__1::unique_ptr&lt;ray::TaskArg, std::__1::default_delete&lt;ray::TaskArg&gt; &gt;, std::__1::allocator&lt;std::__1::unique_ptr&lt;ray::TaskArg, std::__1::default_delete&lt;ray::TaskArg&gt; &gt; &gt; &gt; const&amp;, ray::TaskOptions const&amp;, std::__1::vector&lt;ray::ObjectID, std::__1::allocator&lt;ray::ObjectID&gt; &gt;*) + 1565
 _raylet.so`ray::CoreWorker::SubmitActorTask:
 -&gt;  0x10435ab9d &lt;+1565&gt;: movl   0x48(%rax), %r8d
     0x10435aba1 &lt;+1569&gt;: leaq   -0xa0(%rbp), %rdx
     0x10435aba8 &lt;+1576&gt;: leaq   -0xe0(%rbp), %r15
     0x10435abaf &lt;+1583&gt;: movq   %r14, %rdi
 Target 0: (python) stopped.
 &lt;/denchmark-code&gt;
 
 		</comment>
 	</comments>
 </bug>
<commit id='03d869d51cdb8c72016f2b74ed82bf9068e66b51' author='Edward Oakes' date='2020-12-11 21:47:16-06:00'>
 	<dmm_unit complexity='None' interfacing='None' size='None'></dmm_unit>
 	<modification change_type='MODIFY' old_name='python\ray\_raylet.pyx' new_name='python\ray\_raylet.pyx'>
 		<file_info nloc='None' complexity='None' token_count='None'></file_info>
 		<modified_lines>
 			<added_lines>1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,1104,1105,1243,1244,1245,1246,1247,1248,1249,1250</added_lines>
 			<deleted_lines>1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,1241,1242,1243,1244,1245,1246</deleted_lines>
 		</modified_lines>
 	</modification>
 </commit>
</bug_data>
