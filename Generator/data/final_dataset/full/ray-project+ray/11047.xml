<bug_data>
<bug id='11047' author='Karol-G' open_date='2020-09-26T15:12:07Z' closed_time='2020-10-20T23:03:24Z'>
 	<summary>[tune] TypeError: __init__() got multiple values for argument 'arch' when using 'with_parameters'</summary>
 	<description>
 Hi,
 &lt;denchmark-h:h3&gt;What is the problem?&lt;/denchmark-h&gt;
 
 I compiled ray from source from the commit &lt;denchmark-link:https://github.com/ray-project/ray/commit/552ebdbedae7327b2e6f084c989bae6c1010f58d&gt;552ebdb&lt;/denchmark-link&gt;
  to be able to use the new  function &lt;denchmark-link:https://github.com/ray-project/ray/pull/10679&gt;#10679&lt;/denchmark-link&gt;
  to pass constant variables to my trainable class. However, I get the following error when calling :
 &lt;denchmark-code&gt;Failure # 1 (occurred at 2020-09-26_16-50-01)
 Traceback (most recent call last):
   File "/home/karol/PycharmProjects/ray/python/ray/tune/trial_runner.py", line 518, in _process_trial
     result = self.trial_executor.fetch_result(trial)
   File "/home/karol/PycharmProjects/ray/python/ray/tune/ray_trial_executor.py", line 488, in fetch_result
     result = ray.get(trial_future[0], timeout=DEFAULT_GET_TIMEOUT)
   File "/home/karol/PycharmProjects/ray/python/ray/worker.py", line 1438, in get
     raise value.as_instanceof_cause()
 ray.exceptions.RayTaskError(TuneError): ÔøΩ[36mray::ImplicitFunc.train()ÔøΩ[39m (pid=25150, ip=141.12.239.114)
   File "python/ray/_raylet.pyx", line 484, in ray._raylet.execute_task
   File "python/ray/_raylet.pyx", line 438, in ray._raylet.execute_task.function_executor
   File "/home/karol/PycharmProjects/ray/python/ray/tune/trainable.py", line 336, in train
     result = self.step()
   File "/home/karol/PycharmProjects/ray/python/ray/tune/function_runner.py", line 346, in step
     self._report_thread_runner_error(block=True)
   File "/home/karol/PycharmProjects/ray/python/ray/tune/function_runner.py", line 464, in _report_thread_runner_error
     raise TuneError(("Trial raised an exception. Traceback:\n{}"
 ray.tune.error.TuneError: Trial raised an exception. Traceback:
 ÔøΩ[36mray::ImplicitFunc.train()ÔøΩ[39m (pid=25150, ip=141.12.239.114)
   File "/home/karol/PycharmProjects/ray/python/ray/tune/function_runner.py", line 233, in run
     self._entrypoint()
   File "/home/karol/PycharmProjects/ray/python/ray/tune/function_runner.py", line 295, in entrypoint
     return self._trainable_func(self.config, self._status_reporter,
   File "/home/karol/PycharmProjects/ray/python/ray/tune/function_runner.py", line 527, in _trainable_func
     output = fn()
   File "/home/karol/PycharmProjects/ray/python/ray/tune/function_runner.py", line 595, in _inner
     inner(config, checkpoint_dir=None)
   File "/home/karol/PycharmProjects/ray/python/ray/tune/function_runner.py", line 589, in inner
     fn(config, **fn_kwargs)
 TypeError: __init__() got multiple values for argument 'arch'
 &lt;/denchmark-code&gt;
 
 I am using Ubuntu 18.04.4 LTS (GNU/Linux 5.4.0-42-generic x86_64) with python 3.8.3 and pytorch 1.5.0
 &lt;denchmark-h:h3&gt;Reproduction&lt;/denchmark-h&gt;
 
 from ray import tune
 from ray.tune.schedulers import PopulationBasedTraining
 from ray.tune.function_runner import with_parameters
 
 ray.init(num_cpus=3, num_gpus=3, _memory=7516192768, object_store_memory=7516192768)
 pbt = PopulationBasedTraining(
             time_attr="training_iteration",
             metric="val_dice",
             mode="max",
             perturbation_interval=2,
             hyperparam_mutations={
                 "lr": lambda: np.random.uniform(0.001, 0.0001)
             })
 analysis = tune.run(with_parameters(MyTrainable,
                                             arch="FPN",
                                             encoder=encoder,
                                             train_loader=train_loader,
                                             val_loader=val_loader,
                                             optimizer="adam",
                                             device=device),
                     scheduler=pbt,
                     reuse_actors=True,
                     keep_checkpoints_num=3,
                     verbose=1,
                     config={"lr": tune.uniform(0.001, 0.0001)},
                     num_samples=2,
                     resources_per_trial={"gpu": 1, "cpu": 1})
 
 class MyTrainable(tune.Trainable):
     def __init__(self, arch, encoder, train_loader, val_loader, optimizer="adam", device="cuda"):
         super().__init__()
         self.train_loader = train_loader
         self.val_loader = val_loader
         self.device = device
         self.model = NoiseSegModel(arch=arch, encoder=encoder)
         if str(self.device) != "cpu":
             self.model = self.model.cuda()
         self.optimizer = optimizer
 
     def _setup(self, config):
         if self.optimizer == "adam":
             self.optimizer = torch.optim.Adam(self.model.parameters(), lr=config.get("lr"))
         elif self.optimizer == "RMSprop":
             self.optimizer = torch.optim.RMSprop(self.model.parameters(), lr=config.get("lr"), weight_decay=1e-8, momentum=0.9)
         else:
             raise NotImplementedError
 
         self.criterion = nn.BCEWithLogitsLoss()
         self.best_val_score = 0
         self.best_global_step = 0
         self.start_epoch = 0
 
    # Other methods from MyTrainable
 
  I have verified my script runs in a clean environment and reproduces the issue.
 [Not possible] I have verified the issue also occurs with the latest wheels.
 
 Best
 Karol
 	</description>
 	<comments>
 		<comment id='1' author='Karol-G' date='2020-10-19T19:08:28Z'>
 		I think what we should do is just raise a better error here; &lt;denchmark-link:https://github.com/krfricke&gt;@krfricke&lt;/denchmark-link&gt;
  will take care of this.
 		</comment>
 		<comment id='2' author='Karol-G' date='2020-10-20T16:10:19Z'>
 		Hi &lt;denchmark-link:https://github.com/Karol-G&gt;@Karol-G&lt;/denchmark-link&gt;
 , thanks for raising the issue.
  only works with the &lt;denchmark-link:https://docs.ray.io/en/master/tune/api_docs/trainable.html#function-api&gt;function API&lt;/denchmark-link&gt;
 . I would suggest to take a look if you could convert your trainable to a function trainable. Please note that we recommend the function API over the older class API.
 Let me know if you need any help with that.
 		</comment>
 		<comment id='3' author='Karol-G' date='2020-10-21T10:20:45Z'>
 		
 Hi @Karol-G, thanks for raising the issue.
 tune.with_parameters() only works with the function API. I would suggest to take a look if you could convert your trainable to a function trainable. Please note that we recommend the function API over the older class API.
 Let me know if you need any help with that.
 
 Thanks for the reply. I managed to convert the trainable class to a trainable function. It works fine now üëç
 		</comment>
 	</comments>
 </bug>
<commit id='6d11fb8bc6a7eaed92e9e3247ed244c6a9b218f3' author='Kai Fricke' date='2020-10-20 16:03:24-07:00'>
 	<dmm_unit complexity='1.0' interfacing='1.0' size='1.0'></dmm_unit>
 	<modification change_type='MODIFY' old_name='python\ray\tune\function_runner.py' new_name='python\ray\tune\function_runner.py'>
 		<file_info nloc='427' complexity='94' token_count='2272'></file_info>
 		<method name='with_parameters' parameters='fn,kwargs'>
 				<method_info nloc='15' complexity='4' token_count='66' nesting_level='0' start_line='587' end_line='653'></method_info>
 			<added_lines>619,620,621,622,623,624</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines></added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 </commit>
</bug_data>
