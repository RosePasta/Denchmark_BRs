<bug_data>
<bug id='3440' author='raulchen' open_date='2018-11-30T03:44:40Z' closed_time='2020-03-04T00:51:27Z'>
 	<summary>[bug] Actor handle cannot be handled twice</summary>
 	<description>
 Script to reproduce:
 &lt;denchmark-code&gt;ray.init()
 
 @ray.remote
 class Foo(object):
     def method(self):
 	pass
 
 f = Foo.remote()
 ray.get(f.method.remote())
 f1 = ray.worker.pickle.loads(ray.worker.pickle.dumps(f))
 ray.get(f1.method.remote())
 f2 = ray.worker.pickle.loads(ray.worker.pickle.dumps(f1))
 ray.get(f2.method.remote())
 &lt;/denchmark-code&gt;
 
 Right now, the above script will fail, because when we pickle and unpickle f1 to get f2. f1._ray_actor_handle_id is None. Then this line will fail: 
 
 
 ray/python/ray/actor.py
 
 
          Line 756
       in
       07d8cbf
 
 
 
 
 
 
  state["previous_actor_handle_id"])) 
 
 
 
 
 .
 However, if it's also wrong to simply change that line to previous_actor_handle_id=ray.ObjectID(state["previous_actor_handle_id"])) if state["previous_actor_handle_id"] else None. Because then f2's previous_actor_handle_id will be None and it will be considered as the original handle.
 Also, If I let f2 share f1's previous_actor_handle_id, this script still doesn't work. because f1.method.remote() and f2.method.remote() will use the same handle id (because of compute_actor_handle_id_non_forked) and counter to submit task. The latter task will be dropped by raylet, because raylet thinks it's a duplicate task submission.
 &lt;denchmark-link:https://github.com/robertnishihara&gt;@robertnishihara&lt;/denchmark-link&gt;
  &lt;denchmark-link:https://github.com/stephanie-wang&gt;@stephanie-wang&lt;/denchmark-link&gt;
  what do you think is the best way to fix this issue?
 	</description>
 	<comments>
 		<comment id='1' author='raulchen' date='2018-11-30T18:19:16Z'>
 		Related to &lt;denchmark-link:https://github.com/ray-project/ray/issues/2115&gt;#2115&lt;/denchmark-link&gt;
 .
 This is a bit tricky. Actor handles are a bit brittle currently in the way they can be used and passed around.
 		</comment>
 		<comment id='2' author='raulchen' date='2018-12-20T03:17:44Z'>
 		In &lt;denchmark-link:https://github.com/ray-project/ray/pull/3560&gt;#3560&lt;/denchmark-link&gt;
 , I'm changing this to always set an actor handle ID, so we no longer store .
 How does the following solution sound?
 
 The original handle has num_forks = 0, handle_id = nil.
 If the handle is passed into another task, then we do handle.num_forks += 1 and store the new handle ID as handle_id' = hash(handle.handle_id || num_forks). When the handle is unpickled as part of the task argument, it uses handle_id' as its handle ID directly.
 If the handle is pickled, then we do handle.num_forks += 1 and store the new handle ID as handle_id' = hash(handle.handle_id || num_forks). When the handle is manually unpickled, it takes the stored value and hashes it with the current task ID, so its ID will be hash(handle_id' || worker.current_task_id).
 
 		</comment>
 		<comment id='3' author='raulchen' date='2018-12-21T08:37:16Z'>
 		&lt;denchmark-link:https://github.com/stephanie-wang&gt;@stephanie-wang&lt;/denchmark-link&gt;
  sounds good to me.
 It looks like that in &lt;denchmark-link:https://github.com/ray-project/ray/pull/3560&gt;#3560&lt;/denchmark-link&gt;
 , you change the code to generate a permanent handle id when the handle is unpickled. So this issue should be easy to fix.
 Previously, the handle will be computed dynamically every time when we submit a task. &lt;denchmark-link:https://github.com/robertnishihara&gt;@robertnishihara&lt;/denchmark-link&gt;
  commented with a counter example in that PR, but I didn't understand that example. I also left a comment there.
 		</comment>
 		<comment id='4' author='raulchen' date='2020-03-04T00:51:33Z'>
 		No longer relevant.
 		</comment>
 	</comments>
 </bug>
<commit id='34bab6291c78ed064fe50917aa29ed26da4241df' author='Stephanie Wang' date='2018-12-20 16:37:21-08:00'>
 	<dmm_unit complexity='1.0' interfacing='1.0' size='1.0'></dmm_unit>
 	<modification change_type='MODIFY' old_name='python\ray\actor.py' new_name='python\ray\actor.py'>
 		<file_info nloc='522' complexity='59' token_count='2673'></file_info>
 		<method name='_deserialization_helper' parameters='self,state,ray_forking'>
 				<method_info nloc='23' complexity='4' token_count='162' nesting_level='1' start_line='708' end_line='753'></method_info>
 			<added_lines>720,722,723,724,725,726,727,728,729,730,731,732,733,734,753</added_lines>
 			<deleted_lines>714,717,726,727,748,749,750,752</deleted_lines>
 		</method>
 		<method name='__init__' parameters='self,actor_id,module_name,class_name,actor_cursor,actor_method_names,method_signatures,method_num_return_vals,actor_creation_dummy_object_id,actor_method_cpus,actor_driver_id,actor_handle_id'>
 				<method_info nloc='12' complexity='1' token_count='29' nesting_level='1' start_line='490' end_line='501'></method_info>
 			<added_lines>501</added_lines>
 			<deleted_lines>492,493,494,495</deleted_lines>
 		</method>
 		<method name='_serialization_helper' parameters='self,ray_forking'>
 				<method_info nloc='26' complexity='5' token_count='149' nesting_level='1' start_line='668' end_line='706'></method_info>
 			<added_lines>678,679,680,681,682,683,686,694</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<method name='compute_actor_handle_id_non_forked' parameters='actor_handle_id,current_task_id'>
 				<method_info nloc='7' complexity='1' token_count='58' nesting_level='0' start_line='47' end_line='72'></method_info>
 			<added_lines>47,62</added_lines>
 			<deleted_lines>47,48,62,64,65,71</deleted_lines>
 		</method>
 		<method name='__init__' parameters='self,actor_id,module_name,class_name,actor_cursor,actor_counter,actor_method_names,method_signatures,method_num_return_vals,actor_creation_dummy_object_id,actor_method_cpus,actor_driver_id,actor_handle_id,previous_actor_handle_id'>
 				<method_info nloc='14' complexity='1' token_count='35' nesting_level='1' start_line='498' end_line='511'></method_info>
 			<added_lines>501,502,503,506</added_lines>
 			<deleted_lines>503,510,511</deleted_lines>
 		</method>
 		<method name='compute_actor_handle_id_non_forked' parameters='actor_id,actor_handle_id,current_task_id'>
 				<method_info nloc='2' complexity='1' token_count='9' nesting_level='0' start_line='47' end_line='48'></method_info>
 			<added_lines>47</added_lines>
 			<deleted_lines>47,48</deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines>430,431,432,433,434,435,513,582</added_lines>
 			<deleted_lines>432,433,434,437,438,439,514,515,516,517,524,534,535,589,590,591,592,593,594,595,596,597,598,599,600,601,602,603,604,605,606,607,614,764,772,773,774</deleted_lines>
 		</modified_lines>
 	</modification>
 </commit>
</bug_data>
