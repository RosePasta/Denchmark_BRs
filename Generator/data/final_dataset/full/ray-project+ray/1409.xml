<bug_data>
<bug id='1409' author='richardliaw' open_date='2018-01-10T02:13:06Z' closed_time='2018-02-08T08:57:28Z'>
 	<summary>[rllib] Occasional Thread Error from RLlib</summary>
 	<description>
 &lt;denchmark-h:h3&gt;System information&lt;/denchmark-h&gt;
 
 
 Linux Ubuntu 16.04
 Ray installed via Binary
 Python 3.6.3
 on branch https://github.com/richardliaw/ray/tree/shard_autoscale
 git checkout 6b993974265 &amp;&amp; cd [rllib_dir] &amp;&amp; python train.py -f shard/pong-shard.yaml
 
 &lt;denchmark-h:h3&gt;Describe the problem&lt;/denchmark-h&gt;
 
 I get this error occasionally when running a custom agent.
 &lt;denchmark-h:h3&gt;Source code / logs&lt;/denchmark-h&gt;
 
 &lt;denchmark-code&gt;Traceback (most recent call last):
   File "/home/ubuntu/ray/python/ray/worker.py", line 1625, in fetch_and_execute_function_to_run
     function = pickle.loads(serialized_function)
   File "/home/ubuntu/ray/python/ray/tune/__init__.py", line 6, in &lt;module&gt;
     from ray.tune.tune import run_experiments
   File "/home/ubuntu/ray/python/ray/tune/tune.py", line 88, in &lt;module&gt;
     from ray.rllib.shard.shardedagent import ShardedAgent
   File "/home/ubuntu/ray/python/ray/rllib/__init__.py", line 18, in &lt;module&gt;
     _register_all()
   File "/home/ubuntu/ray/python/ray/rllib/__init__.py", line 13, in _register_all
     register_trainable(key, get_agent_class(key))
   File "/home/ubuntu/ray/python/ray/rllib/agent.py", line 368, in get_agent_class
     from ray.rllib import es
   File "/home/ubuntu/ray/python/ray/rllib/es/__init__.py", line 1, in &lt;module&gt;
     from ray.rllib.es.es import (ESAgent, DEFAULT_CONFIG)
   File "/home/ubuntu/ray/python/ray/rllib/es/es.py", line 43, in &lt;module&gt;
     @ray.remote
   File "/home/ubuntu/ray/python/ray/worker.py", line 2579, in remote
     max_calls, checkpoint_interval)(args[0])
   File "/home/ubuntu/ray/python/ray/worker.py", line 2482, in remote_decorator
     function_properties)
   File "/home/ubuntu/ray/python/ray/worker.py", line 2541, in remote_function_decorator
     func_invoker, function_properties)
   File "/home/ubuntu/ray/python/ray/worker.py", line 2380, in export_remote_function
     check_main_thread()
   File "/home/ubuntu/ray/python/ray/worker.py", line 959, in check_main_thread
     .format(threading.current_thread().getName()))
 Exception: The Ray methods are not thread safe and must be called from the main thread. This method was called from thread Thread-4.
 
 &lt;/denchmark-code&gt;
 
 	</description>
 	<comments>
 		<comment id='1' author='richardliaw' date='2018-01-13T03:46:40Z'>
 		I've also seen this before at high scales, it seems a module import may happen off the main thread. The workaround was just to remove that check. Cc &lt;denchmark-link:https://github.com/pcmoritz&gt;@pcmoritz&lt;/denchmark-link&gt;
  if you know if this is safe in the general case
 		</comment>
 		<comment id='2' author='richardliaw' date='2018-01-22T00:12:59Z'>
 		I've been looking into this more, and I think there may be a couple of ways that this issue can arise.
 
 
 If there are two jobs sharing the same cluster, an export from one job gets imported by the driver for the second job and causes this exception in the driver for the second job. The solution here is to have separate export queues for different jobs.
 
 
 If a worker defines a custom serializer (or some other export), which somehow closes over a module that defines a remote function, such that when the custom serializer is unpickled by the driver, the driver imports the module and attempts to export the remote function. This is probably the issue that's happening above. I'll come up with some simpler ways of reproducing this problem and propose a fix.
 
 
 		</comment>
 		<comment id='3' author='richardliaw' date='2018-01-22T00:34:06Z'>
 		Another approach would be to just get rid of the import thread entirely (see &lt;denchmark-link:https://github.com/ray-project/ray/issues/951&gt;#951&lt;/denchmark-link&gt;
 ). I may give this a try.
 		</comment>
 		<comment id='4' author='richardliaw' date='2018-02-07T00:55:01Z'>
 		Flow lab is seeing this in their multiagent runs:
 &lt;denchmark-code&gt;Traceback (most recent call last):
   File "/home/ubuntu/ray/python/ray/worker.py", line 1624, in fetch_and_execute_function_to_run
     function = pickle.loads(serialized_function)
   File "/home/ubuntu/ray/python/ray/rllib/__init__.py", line 20, in &lt;module&gt;
     _register_all()
   File "/home/ubuntu/ray/python/ray/rllib/__init__.py", line 15, in _register_all
     register_trainable(key, get_agent_class(key))
   File "/home/ubuntu/ray/python/ray/rllib/agent.py", line 219, in get_agent_class
     from ray.rllib import es
   File "/home/ubuntu/ray/python/ray/rllib/es/__init__.py", line 1, in &lt;module&gt;
     from ray.rllib.es.es import (ESAgent, DEFAULT_CONFIG)
   File "/home/ubuntu/ray/python/ray/rllib/es/es.py", line 45, in &lt;module&gt;
     @ray.remote
   File "/home/ubuntu/ray/python/ray/worker.py", line 2576, in remote
     max_calls, checkpoint_interval)(args[0])
   File "/home/ubuntu/ray/python/ray/worker.py", line 2479, in remote_decorator
     function_properties)
   File "/home/ubuntu/ray/python/ray/worker.py", line 2538, in remote_function_decorator
     func_invoker, function_properties)
   File "/home/ubuntu/ray/python/ray/worker.py", line 2377, in export_remote_function
     check_main_thread()
   File "/home/ubuntu/ray/python/ray/worker.py", line 955, in check_main_thread
     .format(threading.current_thread().getName()))
 Exception: The Ray methods are not thread safe and must be called from the main thread. This method was called from thread Thread-4.
 &lt;/denchmark-code&gt;
 
 Should we just merge the workaround? This actually seems a pretty common issue.
 		</comment>
 		<comment id='5' author='richardliaw' date='2018-02-08T09:19:35Z'>
 		Oh, was this fixed by &lt;denchmark-link:https://github.com/ray-project/ray/pull/1441&gt;#1441&lt;/denchmark-link&gt;
 ? That's good, though there are likely some remaining ways this error could occur.
 		</comment>
 		<comment id='6' author='richardliaw' date='2018-06-13T00:32:28Z'>
 		Encounter the error with actor today,  the call is invoked from a thread instead of the main thread. Do we want to remove this check?
 		</comment>
 		<comment id='7' author='richardliaw' date='2018-06-13T04:08:02Z'>
 		We do want to remove the check, but it will need to be accompanied by making the Ray API thread safe, e.g., something like &lt;denchmark-link:https://github.com/ray-project/ray/pull/2034&gt;#2034&lt;/denchmark-link&gt;
 , however that implementation is buggy and I haven't had a chance to fix it up yet.
 		</comment>
 	</comments>
 </bug>
<commit id='4ec51a4660a28399461c56ed9f1f5b0bae5f2191' author='Eric Liang' date='2018-02-06 20:30:11-08:00'>
 	<dmm_unit complexity='0.0' interfacing='1.0' size='0.0'></dmm_unit>
 	<modification change_type='MODIFY' old_name='python\ray\worker.py' new_name='python\ray\worker.py'>
 		<file_info nloc='1474' complexity='241' token_count='9117'></file_info>
 		<method name='fetch_and_execute_function_to_run' parameters='key,worker'>
 				<method_info nloc='18' complexity='6' token_count='128' nesting_level='0' start_line='1634' end_line='1661'></method_info>
 			<added_lines>1638,1639,1640,1641,1642,1643,1644</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines></added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 </commit>
</bug_data>
