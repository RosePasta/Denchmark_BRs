<bug_data>
<bug id='12384' author='simon-mo' open_date='2020-11-25T03:44:58Z' closed_time='2020-12-01T21:07:44Z'>
 	<summary>[Asyncio] await RayActorError throw the wrong error</summary>
 	<description>
 &lt;denchmark-h:h3&gt;What is the problem?&lt;/denchmark-h&gt;
 
 Ray version and other system information (Python version, TensorFlow version, OS):
 import ray
 import asyncio
 
 ray.init()
 @ray.remote
 class A:
     def hi(self): return "hi"
 
 a = A.remote()
 async def main():
     await a.hi.remote()
     ray.kill(a)
     await a.hi.remote()
 
 asyncio.get_event_loop().run_until_complete(main())
 You will see
 &lt;denchmark-code&gt;Exception in callback async_set_result.&lt;locals&gt;.set_future()
 handle: &lt;Handle async_set_result.&lt;locals&gt;.set_future()&gt;
 Traceback (most recent call last):
   File "/Users/simonmo/miniconda3/lib/python3.6/asyncio/events.py", line 145, in _run
     self._callback(*self._args)
   File "python/ray/_raylet.pyx", line 1530, in ray._raylet.async_set_result.set_future
 AttributeError: 'RayActorError' object has no attribute 'as_instanceof_cause'
 
 &lt;/denchmark-code&gt;
 
 &lt;denchmark-h:h3&gt;Reproduction (REQUIRED)&lt;/denchmark-h&gt;
 
 Please provide a script that can be run to reproduce the issue. The script should have no external library dependencies (i.e., use fake or mock data / environments):
 If we cannot run your script, we cannot fix your issue.
 
  I have verified my script runs in a clean environment and reproduces the issue.
  I have verified the issue also occurs with the latest wheels.
 
 	</description>
 	<comments>
 		<comment id='1' author='simon-mo' date='2020-11-25T03:46:16Z'>
 		The fix should be return as_instanceof_cause when it's RayTaskError and just the error otherwise.
 		</comment>
 	</comments>
 </bug>
<commit id='ef1b0c13c35391434fdc0ccaa750bd9d30ce24dc' author='Simon Mo' date='2020-12-01 13:07:43-08:00'>
 	<dmm_unit complexity='1.0' interfacing='1.0' size='0.625'></dmm_unit>
 	<modification change_type='MODIFY' old_name='python\ray\_raylet.pyx' new_name='python\ray\_raylet.pyx'>
 		<file_info nloc='None' complexity='None' token_count='None'></file_info>
 		<modified_lines>
 			<added_lines>1508,1509,1510</added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 	<modification change_type='MODIFY' old_name='python\ray\serve\long_poll.py' new_name='python\ray\serve\long_poll.py'>
 		<file_info nloc='120' complexity='13' token_count='661'></file_info>
 		<method name='_do_long_poll' parameters='self'>
 				<method_info nloc='13' complexity='4' token_count='79' nesting_level='1' start_line='64' end_line='83'></method_info>
 			<added_lines>66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83</added_lines>
 			<deleted_lines>66,67,68,69,70,71,72,73,74</deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines></added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 	<modification change_type='MODIFY' old_name='python\ray\tests\test_asyncio.py' new_name='python\ray\tests\test_asyncio.py'>
 		<file_info nloc='141' complexity='30' token_count='1004'></file_info>
 		<method name='test_asyncio_get' parameters='ray_start_regular_shared,event_loop'>
 				<method_info nloc='27' complexity='1' token_count='184' nesting_level='0' start_line='112' end_line='159'></method_info>
 			<added_lines>157,158,159</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines>160</added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 </commit>
</bug_data>
