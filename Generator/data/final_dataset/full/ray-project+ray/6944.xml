<bug_data>
<bug id='6944' author='alindkhare' open_date='2020-01-28T22:53:57Z' closed_time='2020-02-10T06:58:41Z'>
 	<summary>[Ray] Cannot have empty byte string (b"")  argument for remote calls</summary>
 	<description>
 &lt;denchmark-h:h3&gt;What is the problem?&lt;/denchmark-h&gt;
 
 Ray version: 0.8.1
 Getting this traceback for below script -
 &lt;denchmark-code&gt;---------------------------------------------------------------------------
 IndexError                                Traceback (most recent call last)
 IndexError: Out of bounds on buffer access (axis 0)
 Exception ignored in: 'ray._raylet.prepare_args'
 IndexError: Out of bounds on buffer access (axis 0)
 ---------------------------------------------------------------------------
 RayTaskError(AssertionError)              Traceback (most recent call last)
 &lt;ipython-input-1-f78ed339f691&gt; in &lt;module&gt;
       4     return a
       5 ray.init()
 ----&gt; 6 result = ray.get(f.remote(b""))
       7 print(result)
 
 ~/anaconda3/envs/check-ray/lib/python3.6/site-packages/ray/worker.py in get(object_ids, timeout)
    1490                     worker.core_worker.dump_object_store_memory_usage()
    1491                 if isinstance(value, RayTaskError):
 -&gt; 1492                     raise value.as_instanceof_cause()
    1493                 else:
    1494                     raise value
 
 RayTaskError(AssertionError): ray_worker (pid=19607, ip=130.207.124.200)
   File "python/ray/_raylet.pyx", line 633, in ray._raylet.execute_task
   File "python/ray/_raylet.pyx", line 634, in ray._raylet.execute_task
   File "python/ray/_raylet.pyx", line 521, in ray._raylet.deserialize_args
   File "/nethome/akhare39/anaconda3/envs/check-ray/lib/python3.6/site-packages/ray/signature.py", line 163, in recover_args
     "Flattened arguments need to be even-numbered. See `flatten_args`.")
 AssertionError: Flattened arguments need to be even-numbered. See `flatten_args`.
 &lt;/denchmark-code&gt;
 
 &lt;denchmark-h:h3&gt;Reproduction (REQUIRED)&lt;/denchmark-h&gt;
 
 import ray
 @ray.remote
 def f(a):
     return a
 ray.init()
 result = ray.get(f.remote(b""))
 print(result)
 If we cannot run your script, we cannot fix your issue.
 
  I have verified my script runs in a clean environment and reproduces the issue.
  I have verified the issue also occurs with the latest wheels.
 
 	</description>
 	<comments>
 		<comment id='1' author='alindkhare' date='2020-01-28T22:54:08Z'>
 		&lt;denchmark-link:https://github.com/simon-mo&gt;@simon-mo&lt;/denchmark-link&gt;
 
 		</comment>
 		<comment id='2' author='alindkhare' date='2020-01-28T23:29:29Z'>
 		&lt;denchmark-link:https://github.com/chaokunyang&gt;@chaokunyang&lt;/denchmark-link&gt;
  is there a change from ray streaming/xlang that prevent  from serializing zero length bytes?
 It seems like &amp;buffer[0] will error in cython.
 &lt;denchmark-code&gt;elif type(arg) is bytes:
             buffer = arg
             size = buffer.nbytes
             arg_data = dynamic_pointer_cast[CBuffer, LocalMemoryBuffer](
                 make_shared[LocalMemoryBuffer](
                     &lt;uint8_t*&gt;(&amp;buffer[0]), size, True))
 &lt;/denchmark-code&gt;
 
 but if we do
 &lt;denchmark-code&gt;if len(arg) == 0:
                 arg_data = dynamic_pointer_cast[CBuffer, LocalMemoryBuffer](
                     make_shared[LocalMemoryBuffer](0)
                 )
 &lt;/denchmark-code&gt;
 
 the deserialization will fail and print out
 &lt;denchmark-code&gt;*** Aborted at 1580253913 (unix time) try "date -d @1580253913" if you are using GNU date ***
 PC: @                0x0 (unknown)
 *** SIGSEGV (@0x0) received by PID 90230 (TID 0x118952dc0) stack trace: ***
     @     0x7fff6ca63b1d _sigtramp
     @        0x10dde63ec call_function
     @        0x10e0ffdea __Pyx_PyObject_GenericGetAttrNoDict()
     @        0x10e1025b2 __pyx_f_3ray_7_raylet_6Buffer_make()
     @        0x10e1497f7 __pyx_f_3ray_7_raylet_deserialize_args()
     @        0x10e13d6bd __pyx_f_3ray_7_raylet_execute_task()
     @        0x10e13500f __pyx_f_3ray_7_raylet_task_execution_handler()
     @        0x10e14ff8b std::__1::__function::__func&lt;&gt;::operator()()
     @        0x10e1895e5 ray::CoreWorker::ExecuteTask()
     @        0x10e1bb23e std::__1::__function::__func&lt;&gt;::operator()()
     @        0x10e1e6090 ray::CoreWorkerDirectTaskReceiver::HandlePushTask()::$_2::operator()()
     @        0x10e1e5365 ray::CoreWorkerDirectTaskReceiver::HandlePushTask()
     @        0x10e1c6d4e boost::asio::detail::completion_handler&lt;&gt;::do_complete()
     @        0x10e1b3e90 boost::asio::detail::scheduler::do_run_one()
     @        0x10e1b3a02 boost::asio::detail::scheduler::run()
     @        0x10e192382 ray::CoreWorker::StartExecutingTasks()
     @        0x10e117f0b __pyx_pw_3ray_7_raylet_10CoreWorker_3run_task_loop()
     @        0x10dd10f95 _PyCFunction_FastCallDict
     @        0x10dde638f call_function
     @        0x10dde3ef2 _PyEval_EvalFrameDefault
     @        0x10dde673c fast_function
     @        0x10dde63ec call_function
     @        0x10dde3ef2 _PyEval_EvalFrameDefault
     @        0x10ddd7659 _PyEval_EvalCodeWithName
     @        0x10de3010c PyRun_FileExFlags
     @        0x10de2f5e4 PyRun_SimpleFileExFlags
     @        0x10de562a6 Py_Main
     @        0x10dc88009 main
     @     0x7fff6c8622e5 start
     @                0xc (unknown)
 &lt;/denchmark-code&gt;
 
 		</comment>
 		<comment id='3' author='alindkhare' date='2020-02-03T01:16:04Z'>
 		&lt;denchmark-link:https://github.com/simon-mo&gt;@simon-mo&lt;/denchmark-link&gt;
    is a bug. But  shouldn't fail. I'll look into this and submit a PR after I figured out.
 		</comment>
 		<comment id='4' author='alindkhare' date='2020-02-03T03:05:10Z'>
 		I think &lt;denchmark-link:https://github.com/jovany-wang&gt;@jovany-wang&lt;/denchmark-link&gt;
  has encountered and fixed this bug in our internal version.
 		</comment>
 		<comment id='5' author='alindkhare' date='2020-02-03T07:18:40Z'>
 		Yes, I have ran into this issue before in xlang. Iâ€˜m not sure it's the same issue as this one.
 Anyway, it's actually a bug, I'll look into it later as well.
 		</comment>
 		<comment id='6' author='alindkhare' date='2020-02-04T12:38:51Z'>
 		After new serialization introduced in &lt;denchmark-link:https://github.com/ray-project/ray/pull/6948&gt;#6948&lt;/denchmark-link&gt;
 , the error is:
 &lt;denchmark-code&gt;PC: @                0x0 (unknown)
 *** SIGABRT (@0x7fff711a7b66) received by PID 30645 (TID 0x7fffa970c380) stack trace: ***
     @     0x7fff71365f5a _sigtramp
     @        0x10032b279 PyErr_Occurred
     @     0x7fff711031ae abort
     @        0x10807f679 google::logging_fail()
     @        0x10807f66a google::LogMessage::Fail()
     @        0x10807e548 google::LogMessage::SendToLog()
     @        0x10807eb9c google::LogMessage::Flush()
     @        0x10807ec6f google::LogMessage::~LogMessage()
     @        0x107cf5a05 arrow::util::ArrowLog::~ArrowLog()
     @        0x1089400c7 arrow::py::PyBuffer::Init()
     @        0x108940159 arrow::py::PyBuffer::FromPyObject()
     @        0x107ac80bf __pyx_pw_7pyarrow_3lib_131py_buffer()
     @        0x100d8e958 __Pyx_PyObject_CallMethO()
     @        0x100d975e9 __pyx_f_3ray_7_raylet_write_serialized_object()
     @        0x100db09c1 __pyx_f_3ray_7_raylet_prepare_args()
     @        0x100da2efa __pyx_pw_3ray_7_raylet_10CoreWorker_29submit_task()
     @        0x100295967 _PyCFunction_FastCallDict
     @        0x100317927 call_function
     @        0x1003140d2 _PyEval_EvalFrameDefault
     @        0x10031838f _PyEval_EvalCodeWithName
     @        0x100318c41 fast_function
     @        0x100317901 call_function
     @        0x1003140d2 _PyEval_EvalFrameDefault
     @        0x10031838f _PyEval_EvalCodeWithName
     @        0x100318c41 fast_function
     @        0x100317901 call_function
     @        0x100314171 _PyEval_EvalFrameDefault
     @        0x10031838f _PyEval_EvalCodeWithName
     @        0x100318c41 fast_function
     @        0x100317901 call_function
     @        0x1003140d2 _PyEval_EvalFrameDefault
     @        0x10031838f _PyEval_EvalCodeWithName
 Abort trap: 6
 &lt;/denchmark-code&gt;
 
 It's failed in pyarrow.py_buffer():
 Status PyBuffer::Init(PyObject* obj) {
   if (!PyObject_GetBuffer(obj, &amp;py_buf_, PyBUF_ANY_CONTIGUOUS)) {
     data_ = reinterpret_cast&lt;const uint8_t*&gt;(py_buf_.buf);
     ARROW_CHECK_NE(data_, nullptr) &lt;&lt; "Null pointer in Py_buffer";
     size_ = py_buf_.len;
     capacity_ = py_buf_.len;
     is_mutable_ = !py_buf_.readonly;
     if (is_mutable_) {
       mutable_data_ = reinterpret_cast&lt;uint8_t*&gt;(py_buf_.buf);
     }
     return Status::OK();
   } else {
     return ConvertPyError(StatusCode::Invalid);
   }
 }
 It caused by NULL buffer returned by vector.data() when make_shared[LocalMemoryBuffer](0). I'll fix this
 		</comment>
 		<comment id='7' author='alindkhare' date='2020-02-10T04:10:04Z'>
 		&lt;denchmark-link:https://github.com/alindkhare&gt;@alindkhare&lt;/denchmark-link&gt;
   just FYI: The PR to fix this issue was merged.
 		</comment>
 	</comments>
 </bug>
<commit id='247a4d022ac4ca0a10553616b7c806c4429ed355' author='chaokunyang' date='2020-02-10 12:07:29+08:00'>
 	<dmm_unit complexity='0.0' interfacing='0.6666666666666666' size='0.0'></dmm_unit>
 	<modification change_type='MODIFY' old_name='python\ray\_raylet.pyx' new_name='python\ray\_raylet.pyx'>
 		<file_info nloc='None' complexity='None' token_count='None'></file_info>
 		<modified_lines>
 			<added_lines>569,570,571,572,573,574,575</added_lines>
 			<deleted_lines>569,570,571,572</deleted_lines>
 		</modified_lines>
 	</modification>
 	<modification change_type='MODIFY' old_name='python\ray\tests\test_basic.py' new_name='python\ray\tests\test_basic.py'>
 		<file_info nloc='1224' complexity='288' token_count='9659'></file_info>
 		<method name='test_simple_serialization' parameters='ray_start_regular'>
 				<method_info nloc='53' complexity='7' token_count='360' nesting_level='0' start_line='38' end_line='101'></method_info>
 			<added_lines>46,47</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines></added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 	<modification change_type='MODIFY' old_name='src\ray\core_worker\core_worker.cc' new_name='src\ray\core_worker\core_worker.cc'>
 		<file_info nloc='1002' complexity='169' token_count='8061'></file_info>
 		<method name='ray::CoreWorker::ExecuteTask' parameters='task_spec,resource_ids,return_objects'>
 				<method_info nloc='74' complexity='15' token_count='602' nesting_level='1' start_line='916' end_line='1000'></method_info>
 			<added_lines>970,971</added_lines>
 			<deleted_lines>970</deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines></added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 	<modification change_type='MODIFY' old_name='src\ray\core_worker\transport\direct_actor_transport.cc' new_name='src\ray\core_worker\transport\direct_actor_transport.cc'>
 		<file_info nloc='259' complexity='48' token_count='2134'></file_info>
 		<method name='ray::CoreWorkerDirectTaskReceiver::HandlePushTask' parameters='request,reply,send_reply_callback'>
 				<method_info nloc='111' complexity='24' token_count='927' nesting_level='1' start_line='198' end_line='342'></method_info>
 			<added_lines>268</added_lines>
 			<deleted_lines>268</deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines></added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 </commit>
</bug_data>
