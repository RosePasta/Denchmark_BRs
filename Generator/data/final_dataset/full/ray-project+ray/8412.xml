<bug_data>
<bug id='8412' author='Purpleslz' open_date='2020-05-12T06:46:54Z' closed_time='2020-06-05T16:31:03Z'>
 	<summary>[rllib] rllib not saving Tensorflow AdamOptimizer's momentum and accumulators</summary>
 	<description>
 &lt;denchmark-h:h3&gt;What is the problem?&lt;/denchmark-h&gt;
 
 Ray: 0.8.4
 Tensorflow: 1.14
 RLLib is using its own checkpoint saving API instead of  tensorflow's, and this API is not saving AdamOptimizer's momentum and accumulators.
 When using  AdamOptimizer, the momentum and accumulators (m, v, beta1_power, beta2_power &lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/v1.14.0/tensorflow/python/training/adam.py#L118&gt;https://github.com/tensorflow/tensorflow/blob/v1.14.0/tensorflow/python/training/adam.py#L118&lt;/denchmark-link&gt;
 ) is not saved.
 &lt;denchmark-h:h3&gt;Reproduction (REQUIRED)&lt;/denchmark-h&gt;
 
 Using official example which default optimizer is Adam: &lt;denchmark-link:https://github.com/ray-project/ray/blob/master/rllib/examples/custom_tf_policy.py&gt;https://github.com/ray-project/ray/blob/master/rllib/examples/custom_tf_policy.py&lt;/denchmark-link&gt;
 
 
 add checkpoint_freq=1 to tune.run's argument.
 Run example to save checkpoints.
 add restore=${checkpoint_path} to tune.run 's argument, restore from one checkpoint and rerun example.
 
 I checked from this line: &lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/v1.14.0/tensorflow/python/training/optimizer.py#L1169&gt;https://github.com/tensorflow/tensorflow/blob/v1.14.0/tensorflow/python/training/optimizer.py#L1169&lt;/denchmark-link&gt;
 
 Tensorflow first creates these slot variables, then restore them. If there are no variables to restore, the deferred_restorations will be an empty list. These new created slot variables will be zero.
 	</description>
 	<comments>
 		<comment id='1' author='Purpleslz' date='2020-05-12T22:59:21Z'>
 		What's a good way of saving them? Now that we have deprecated modelv1, perhaps we can standardize on a Keras method? cc &lt;denchmark-link:https://github.com/sven1977&gt;@sven1977&lt;/denchmark-link&gt;
 
 		</comment>
 		<comment id='2' author='Purpleslz' date='2020-05-13T03:43:37Z'>
 		
 What's a good way of saving them? Now that we have deprecated modelv1, perhaps we can standardize on a Keras method? cc @sven1977
 
 &lt;denchmark-link:https://github.com/ray-project/ray/blob/master/rllib/agents/trainer.py#L629&gt;Trainer's save method&lt;/denchmark-link&gt;
  will only save &lt;denchmark-link:https://github.com/ray-project/ray/blob/master/rllib/policy/tf_policy.py#L229&gt;self._variables in tf policy class&lt;/denchmark-link&gt;
  which will not contain optimizer's accumulators.
 I noticed we have implementations about export_checkpoint/export_model in policy, perhaps we should save model checkpoints and training checkpoints separately.
 		</comment>
 		<comment id='3' author='Purpleslz' date='2020-05-13T23:22:29Z'>
 		Hmm is the right thing to register those variables for saving as well? I think the optimizer variables used to be saved by TensorFlowVariables with ModelV1, so this is a regression with ModelV2, which only registers the model variables instead of walking the graph looking for them: &lt;denchmark-link:https://github.com/ray-project/ray/blob/master/rllib/policy/tf_policy.py#L230&gt;https://github.com/ray-project/ray/blob/master/rllib/policy/tf_policy.py#L230&lt;/denchmark-link&gt;
 
 		</comment>
 		<comment id='4' author='Purpleslz' date='2020-05-14T12:52:01Z'>
 		Maybe you're right. The "export_checkpoint way" can support more frameworks (e.g. pytorch), torch_policy and tf_policy can use the same interface export_checkpoint and the implementation for tf&amp;pytorch is very simple.
 I think both ways are sufficient and reasonable to fix this issue, maybe "register optimizers' variable" is a better one. However, I'm not very familiar with tensorflow, I don't know how to do this.
 		</comment>
 		<comment id='5' author='Purpleslz' date='2020-05-18T07:56:02Z'>
 		&lt;denchmark-link:https://github.com/Purpleslz&gt;@Purpleslz&lt;/denchmark-link&gt;
  Could you try this PR here and confirm whether this fixes your issue? I just made the ModelV2 branch behave the same as the ModelV1 one in terms of automatically collecting all vars in the tf-graph.
 		</comment>
 		<comment id='6' author='Purpleslz' date='2020-05-18T15:25:20Z'>
 		&lt;denchmark-link:https://github.com/ray-project/ray/pull/8480&gt;#8480&lt;/denchmark-link&gt;
 
 		</comment>
 		<comment id='7' author='Purpleslz' date='2020-05-20T07:03:59Z'>
 		This PR &lt;denchmark-link:https://github.com/ray-project/ray/pull/8480&gt;#8480&lt;/denchmark-link&gt;
  doesn't solve my problem. I'm not sure whether my verification method is correctï¼š
 
 I checked the https://github.com/tensorflow/tensorflow/blob/v1.14.0/tensorflow/python/training/optimizer.py#L1169 this line, this line is restoring optimizers' variables. If there are no variables to restore, the deferred_restorations will be an empty list. After the PR, the list is still empty.
 I think the Adam optimizers' momentum variables will have Adam suffix, accumulators will have Beta suffix.  I print self._variables keys in https://github.com/ray-project/ray/blob/master/python/ray/experimental/tf_utils.py#L94, there is no such variables.
 
 		</comment>
 		<comment id='8' author='Purpleslz' date='2020-05-22T09:25:55Z'>
 		I don't actually think the problem is ModelV1/V2 related at all.
 In tf, optimizer variables are generated after initializing the global vars: self._sess.run(tf.global_variables_initializer()) and this is happening after we store a Model's vars (V1/V2 doesn't matter here) in self._variables, so the optimizer vars were never part of that list.
 When creating a checkpoint, only things in self._variables are stored as the Policy's state.
 Let's store the optimizer vars separately (I don't think they should be returned in Policy.get_weights()) and then do include them in the storing process (Policy.get_state()).
 		</comment>
 		<comment id='9' author='Purpleslz' date='2020-05-22T10:37:08Z'>
 		Can you try again? This is working now on my end:
 &lt;denchmark-code&gt;trainer.train(). # &lt;- e.g. DQN with an Adam optimizer
 chkpoint= trainer.save()
 ...
 new_trainer = ...
 new_trainer.restore(chkpoint)
 p = new_trainer.get_policy()
 p._sess.run(p._optimizer._slots)
 &lt;/denchmark-code&gt;
 
 		</comment>
 		<comment id='10' author='Purpleslz' date='2020-05-22T10:38:18Z'>
 		&lt;denchmark-link:https://github.com/Purpleslz&gt;@Purpleslz&lt;/denchmark-link&gt;
 
 		</comment>
 		<comment id='11' author='Purpleslz' date='2020-05-23T02:24:37Z'>
 		Yeah, it makes sense to not include them in the policy get_weights, but only in trainer checkpoints.
 		</comment>
 		<comment id='12' author='Purpleslz' date='2020-05-23T12:38:09Z'>
 		
 Can you try again? This is working now on my end:
 trainer.train(). # &lt;- e.g. DQN with an Adam optimizer
 chkpoint= trainer.save()
 ...
 new_trainer = ...
 new_trainer.restore(chkpoint)
 p = new_trainer.get_policy()
 p._sess.run(p._optimizer._slots)
 
 
 I am using ray repo in the master branch, and merged the &lt;denchmark-link:https://github.com/ray-project/ray/pull/8480&gt;#8840&lt;/denchmark-link&gt;
 .
 However, I got this error:
 &lt;denchmark-code&gt;  File "xxxxx/.pyenv/versions/anaconda3-5.0.1/envs/ray/lib/python3.6/site-packages/tensorflow/python/keras/optimizer_v2/optimizer_v2
 .py", line 532, in __getattribute__
     return super(OptimizerV2, self).__getattribute__(name)
 AttributeError: 'Adam' object has no attribute 'compute_gradients'
 &lt;/denchmark-code&gt;
 
 I think the problem is in this line: 
 
 
 ray/rllib/policy/tf_policy.py
 
 
          Line 721
       in
       497493d
 
 
 
 
 
 
  return tf.keras.optimizers.Adam(learning_rate=self.cur_lr) 
 
 
 
 
 , when I changed this optimzier to tf.train.AdamOptimizer the code could run correctly.
 It seems that the optimizers' variables could be saved and restored, when will the pull request be merged?
 		</comment>
 		<comment id='13' author='Purpleslz' date='2020-06-05T16:31:03Z'>
 		This PR fixes (and tests) saving optimizer state for later restoring.
 &lt;denchmark-link:https://github.com/ray-project/ray/pull/8480&gt;#8480&lt;/denchmark-link&gt;
 
 Will be merged later today.
 Closing this issue.
 		</comment>
 	</comments>
 </bug>
<commit id='25c09745437ac51d37fcb87bd4dc52b3bfcf5a34' author='Sven Mika' date='2020-06-05 21:07:02+02:00'>
 	<dmm_unit complexity='0.7534246575342466' interfacing='1.0' size='0.7534246575342466'></dmm_unit>
 	<modification change_type='MODIFY' old_name='python\ray\experimental\tf_utils.py' new_name='python\ray\experimental\tf_utils.py'>
 		<file_info nloc='112' complexity='32' token_count='721'></file_info>
 		<method name='__init__' parameters='self,output,sess,input_variables'>
 				<method_info nloc='40' complexity='15' token_count='292' nesting_level='1' start_line='33' end_line='99'></method_info>
 			<added_lines>51</added_lines>
 			<deleted_lines>50,51</deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines>4,5</added_lines>
 			<deleted_lines>4</deleted_lines>
 		</modified_lines>
 	</modification>
 	<modification change_type='MODIFY' old_name='rllib\agents\ars\ars_tf_policy.py' new_name='rllib\agents\ars\ars_tf_policy.py'>
 		<file_info nloc='57' complexity='9' token_count='514'></file_info>
 		<method name='set_state' parameters='self,state'>
 				<method_info nloc='2' complexity='1' token_count='17' nesting_level='1' start_line='70' end_line='71'></method_info>
 			<added_lines>70,71</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<method name='get_state' parameters='self'>
 				<method_info nloc='2' complexity='1' token_count='15' nesting_level='1' start_line='67' end_line='68'></method_info>
 			<added_lines>67,68</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines>69,72</added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 	<modification change_type='MODIFY' old_name='rllib\agents\es\es_tf_policy.py' new_name='rllib\agents\es\es_tf_policy.py'>
 		<file_info nloc='93' complexity='20' token_count='759'></file_info>
 		<method name='set_state' parameters='self,state'>
 				<method_info nloc='2' complexity='1' token_count='17' nesting_level='1' start_line='126' end_line='127'></method_info>
 			<added_lines>126,127</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<method name='get_state' parameters='self'>
 				<method_info nloc='2' complexity='1' token_count='15' nesting_level='1' start_line='123' end_line='124'></method_info>
 			<added_lines>123,124</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines>125,128</added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 	<modification change_type='MODIFY' old_name='rllib\policy\eager_tf_policy.py' new_name='rllib\policy\eager_tf_policy.py'>
 		<file_info nloc='530' complexity='102' token_count='3366'></file_info>
 		<method name='set_state' parameters='self,state'>
 				<method_info nloc='13' complexity='4' token_count='79' nesting_level='2' start_line='476' end_line='490'></method_info>
 			<added_lines>476,477,478,479,480,481,482,483,484,485,486,487,488,489,490</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<method name='get_state' parameters='self'>
 				<method_info nloc='4' complexity='1' token_count='32' nesting_level='2' start_line='470' end_line='473'></method_info>
 			<added_lines>470,471,472,473</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines>335,336,337,338,339,340,469,474,475,491</added_lines>
 			<deleted_lines>335,336,337,338</deleted_lines>
 		</modified_lines>
 	</modification>
 	<modification change_type='MODIFY' old_name='rllib\policy\tf_policy.py' new_name='rllib\policy\tf_policy.py'>
 		<file_info nloc='546' complexity='88' token_count='3719'></file_info>
 		<method name='set_state' parameters='self,state'>
 				<method_info nloc='6' complexity='2' token_count='43' nesting_level='1' start_line='387' end_line='394'></method_info>
 			<added_lines>387,388,389,390,391,392,393,394</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<method name='optimizer' parameters='self'>
 				<method_info nloc='5' complexity='2' token_count='40' nesting_level='1' start_line='479' end_line='484'></method_info>
 			<added_lines>482</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<method name='get_state' parameters='self'>
 				<method_info nloc='7' complexity='3' token_count='51' nesting_level='1' start_line='377' end_line='384'></method_info>
 			<added_lines>377,378,379,380,381,382,383,384</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<method name='_initialize_loss' parameters='self,loss,loss_inputs'>
 				<method_info nloc='42' complexity='13' token_count='380' nesting_level='1' start_line='221' end_line='270'></method_info>
 			<added_lines>266,267,268,269,270</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines>142,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,185,186,187,376,385,386,395,727</added_lines>
 			<deleted_lines>142,147,148,149,150,151,152,153,154,155,156,157,158,173,174,444,689</deleted_lines>
 		</modified_lines>
 	</modification>
 	<modification change_type='MODIFY' old_name='rllib\policy\torch_policy.py' new_name='rllib\policy\torch_policy.py'>
 		<file_info nloc='340' complexity='56' token_count='2269'></file_info>
 		<method name='set_state' parameters='self,state'>
 				<method_info nloc='8' complexity='3' token_count='67' nesting_level='1' start_line='335' end_line='344'></method_info>
 			<added_lines>335,336,337,338,339,340,341,342,343,344</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<method name='get_state' parameters='self'>
 				<method_info nloc='6' complexity='2' token_count='48' nesting_level='1' start_line='327' end_line='332'></method_info>
 			<added_lines>327,328,329,330,331,332</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines>326,333,334,345</added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 	<modification change_type='MODIFY' old_name='rllib\tests\test_checkpoint_restore.py' new_name='rllib\tests\test_checkpoint_restore.py'>
 		<file_info nloc='131' complexity='27' token_count='771'></file_info>
 		<method name='test_ppo_checkpoint_restore' parameters='self'>
 				<method_info nloc='2' complexity='1' token_count='9' nesting_level='1' start_line='156' end_line='157'></method_info>
 			<added_lines>156,157</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<method name='test_ars_checkpoint_restore' parameters='self'>
 				<method_info nloc='2' complexity='1' token_count='9' nesting_level='1' start_line='144' end_line='145'></method_info>
 			<added_lines>144,145</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<method name='ckpt_restore_test' parameters='use_object_store,alg_name,failures,framework'>
 				<method_info nloc='34' complexity='9' token_count='276' nesting_level='0' start_line='66' end_line='104'></method_info>
 			<added_lines>66,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104</added_lines>
 			<deleted_lines>66,67,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104</deleted_lines>
 		</method>
 		<method name='test_a3c_checkpoint_restore' parameters='self'>
 				<method_info nloc='2' complexity='1' token_count='9' nesting_level='1' start_line='138' end_line='139'></method_info>
 			<added_lines>138,139</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<method name='test_sac_checkpoint_restore' parameters='self'>
 				<method_info nloc='2' complexity='1' token_count='9' nesting_level='1' start_line='159' end_line='160'></method_info>
 			<added_lines>159,160</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<method name='test_ddpg_checkpoint_restore' parameters='self'>
 				<method_info nloc='2' complexity='1' token_count='9' nesting_level='1' start_line='147' end_line='148'></method_info>
 			<added_lines>147,148</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<method name='test_apex_ddpg_checkpoint_restore' parameters='self'>
 				<method_info nloc='2' complexity='1' token_count='9' nesting_level='1' start_line='141' end_line='142'></method_info>
 			<added_lines>141,142</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<method name='ckpt_restore_test' parameters='alg_name,tfe'>
 				<method_info nloc='48' complexity='15' token_count='401' nesting_level='0' start_line='66' end_line='126'></method_info>
 			<added_lines>66,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126</added_lines>
 			<deleted_lines>66,67,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,116,117,118,119,120,121,122,123,124,125,126</deleted_lines>
 		</method>
 		<method name='test_es_checkpoint_restore' parameters='self'>
 				<method_info nloc='2' complexity='1' token_count='9' nesting_level='1' start_line='153' end_line='154'></method_info>
 			<added_lines>153,154</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<method name='test_dqn_checkpoint_restore' parameters='self'>
 				<method_info nloc='2' complexity='1' token_count='9' nesting_level='1' start_line='150' end_line='151'></method_info>
 			<added_lines>150,151</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<method name='test_checkpoint_restore' parameters='self'>
 				<method_info nloc='14' complexity='4' token_count='85' nesting_level='1' start_line='116' end_line='130'></method_info>
 			<added_lines>116,117,118,119,120,121,122,123,124,125,126</added_lines>
 			<deleted_lines>116,117,118,119,120,121,122,123,124,125,126,127,128,129,130</deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines>8,140,143,146,149,152,155,158</added_lines>
 			<deleted_lines>8</deleted_lines>
 		</modified_lines>
 	</modification>
 	<modification change_type='MODIFY' old_name='rllib\tests\test_local.py' new_name='rllib\tests\test_local.py'>
 		<file_info nloc='19' complexity='4' token_count='129'></file_info>
 		<method name='test_local' parameters='self'>
 				<method_info nloc='6' complexity='2' token_count='41' nesting_level='1' start_line='15' end_line='20'></method_info>
 			<added_lines>17,20</added_lines>
 			<deleted_lines>17</deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines></added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 	<modification change_type='MODIFY' old_name='rllib\utils\torch_ops.py' new_name='rllib\utils\torch_ops.py'>
 		<file_info nloc='50' complexity='24' token_count='556'></file_info>
 		<method name='sequence_mask' parameters='lengths,maxlen,dtype'>
 				<method_info nloc='7' complexity='3' token_count='80' nesting_level='0' start_line='61' end_line='75'></method_info>
 			<added_lines>61,62,63</added_lines>
 			<deleted_lines>61,62,63</deleted_lines>
 		</method>
 		<method name='sequence_mask' parameters='lengths,maxlen,dtype'>
 				<method_info nloc='7' complexity='3' token_count='78' nesting_level='0' start_line='61' end_line='75'></method_info>
 			<added_lines>61,62,63</added_lines>
 			<deleted_lines>61,62,63</deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines></added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 </commit>
</bug_data>
