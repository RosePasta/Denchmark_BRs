<bug_data>
<bug id='531' author='swarwick' open_date='2020-04-03T20:17:50Z' closed_time='2020-04-06T19:00:06Z'>
 	<summary>toString broken for byte[] data types</summary>
 	<description>
 Describe the bug
 If you create a StructType that contains a StructField of type smile.data.type.DataTypes.ByteArrayType and create a tuple with that struct it will crash during the toString() call because the ArrayType tries to cast it to an Object[]
 Expected behavior
 I would expect the toString to not crash and produce some meaningful result
 Actual behavior
 java.lang.ClassCastException: class [B cannot be cast to class [Ljava.lang.Object; ([B and [Ljava.lang.Object; are in module java.base of loader 'bootstrap')
 at smile.data.type.ArrayType.toString(ArrayType.java:80)
 at smile.data.type.StructField.toString(StructField.java:73)
 at smile.data.type.StructType.lambda$toString$6(StructType.java:154)
 at java.base/java.util.stream.ReferencePipeline$3$1.accept(ReferencePipeline.java:195)
 at java.base/java.util.Spliterators$ArraySpliterator.forEachRemaining(Spliterators.java:948)
 at java.base/java.util.stream.AbstractPipeline.copyInto(AbstractPipeline.java:484)
 at java.base/java.util.stream.AbstractPipeline.wrapAndCopyInto(AbstractPipeline.java:474)
 at java.base/java.util.stream.ReduceOps$ReduceOp.evaluateSequential(ReduceOps.java:913)
 at java.base/java.util.stream.AbstractPipeline.evaluate(AbstractPipeline.java:234)
 at java.base/java.util.stream.ReferencePipeline.collect(ReferencePipeline.java:578)
 at smile.data.type.StructType.toString(StructType.java:157)
 at smile.data.AbstractTuple.toString(AbstractTuple.java:28)
 at com.streambase.sb.adapter.datascience.smile.TestSmileDataTypeRegistry.testSmileBinaryToString(TestSmileDataTypeRegistry.java:77)
 at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
 at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
 at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
 at java.base/java.lang.reflect.Method.invoke(Method.java:566)
 at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
 at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
 at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
 at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
 at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
 at org.junit.runners.BlockJUnit4ClassRunner$1.evaluate(BlockJUnit4ClassRunner.java:100)
 at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:366)
 at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:103)
 at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:63)
 at org.junit.runners.ParentRunner$4.run(ParentRunner.java:331)
 at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:79)
 at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:329)
 at org.junit.runners.ParentRunner.access$100(ParentRunner.java:66)
 at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:293)
 at org.junit.runners.ParentRunner$3.evaluate(ParentRunner.java:306)
 at org.junit.runners.ParentRunner.run(ParentRunner.java:413)
 at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:89)
 at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:41)
 at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:542)
 at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:770)
 at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:464)
 at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:210)
 
 &lt;denchmark-link:https://github.com/test&gt;@test&lt;/denchmark-link&gt;
 
 public void testSmileBinaryToString() throws Exception {
 StructType structType = new StructType(Arrays.asList(new StructField [] { new StructField("binary", smile.data.type.DataTypes.ByteArrayType) }));
 Object [] tupleData = new Object[structType.fields().length];
 tupleData[0] = new byte[] { 1,2,3,4,5,6,7,8,9 };
 smile.data.Tuple smileTuple = smile.data.Tuple.of(tupleData, structType);
 logger.info("Smile Tuple:\r\n{}", smileTuple.toString());
 }
 Input data
 The sample data
 Additional context
 Oracle Java 11
 Smile 2.3.0
 Windows/macos/linux
 	</description>
 	<comments>
 		<comment id='1' author='swarwick' date='2020-04-03T20:36:45Z'>
 		Thanks. I fix it. Please try the master branch. It passes your code snippet.
 		</comment>
 		<comment id='2' author='swarwick' date='2020-04-03T21:22:33Z'>
 		Tried it out and works for this case, thanks.
 		</comment>
 		<comment id='3' author='swarwick' date='2020-04-06T13:47:30Z'>
 		There it still an issue if you have StructType fields inside an ArrayType field, I would also assume from the code it would fail with ArrayType inside ArrayType
 		</comment>
 		<comment id='4' author='swarwick' date='2020-04-06T13:53:35Z'>
 		Can you share the code snippet? Thanks
 BTW, what's your use case? Although we support nested data structure in DataFrame, it is quite rare in machine learning use cases.
 		</comment>
 		<comment id='5' author='swarwick' date='2020-04-06T15:16:54Z'>
 		I am building some generic data conversion code from an internal format for other developers so they can use whatever format they want from our internal structure into this library. I am trying to flush out any and all uses cases and so some of these are coming up.
 `    &lt;denchmark-link:https://github.com/test&gt;@test&lt;/denchmark-link&gt;
 
 public void testStructInArray() throws Exception {
 StructType internalStructType = new StructType(Arrays.asList(new StructField [] {
 new StructField("field1", smile.data.type.DataTypes.IntegerType),
 new StructField("field2", smile.data.type.DataTypes.StringType) }));
 &lt;denchmark-code&gt;	StructType structType = new StructType(new StructField("data", smile.data.type.DataTypes.array(internalStructType)));
 	
     logger.info("Struct:\r\n{}",structType.toString());
     
     Object [] internalTupleData = new Object[internalStructType.fields().length];
     internalTupleData[0] = 1;
     internalTupleData[1] = "testing";
     smile.data.Tuple internalSmileTuple = smile.data.Tuple.of(internalTupleData, internalStructType);
     logger.info("Tuple1:\r\n{}",internalSmileTuple.toString());
     
     Object [] internalTupleData2 = new Object[internalStructType.fields().length];
     internalTupleData2[0] = 2;
     internalTupleData2[1] = "testing 2";
     smile.data.Tuple internalSmileTuple2 = smile.data.Tuple.of(internalTupleData2, internalStructType);
     logger.info("Tuple2:\r\n{}",internalSmileTuple2.toString());
     
 	List&lt;smile.data.Tuple&gt; dataTuples = new ArrayList&lt;&gt;();
 	dataTuples.add(internalSmileTuple);
 	dataTuples.add(internalSmileTuple2);
     Object [] tupleData = new Object[structType.fields().length];
     tupleData[0] = DataFrame.of(dataTuples, internalStructType);
     logger.info("DataFrame:\r\n{}", ((DataFrame)tupleData[0]).toString());
     
     smile.data.Tuple smileTuple = smile.data.Tuple.of(tupleData, structType);
     logger.info("Smile Tuple:\r\n{}", smileTuple.toString());
 }`
 &lt;/denchmark-code&gt;
 
 		</comment>
 		<comment id='6' author='swarwick' date='2020-04-06T16:57:07Z'>
 		You got the data wrong. tupleData[0] is of DataFrame, not of StructType.
 		</comment>
 		<comment id='7' author='swarwick' date='2020-04-06T17:00:09Z'>
 		Sorry yes the name of my test was wrong but still this is causing an exception.
 		</comment>
 		<comment id='8' author='swarwick' date='2020-04-06T17:04:30Z'>
 		I was talking about your code, not the name. The field is of StructType, but you supply a DataFrame object.
 		</comment>
 		<comment id='9' author='swarwick' date='2020-04-06T17:29:09Z'>
 		Isnt 'smile.data.type.DataTypes.array(internalStructType)' equal to a DataFrame? as DataFrame is an array of records right?
 		</comment>
 		<comment id='10' author='swarwick' date='2020-04-06T17:31:36Z'>
 		Nope. Even if DataFrame is an array of StructType, they are different things in sense of type theory.
 		</comment>
 		<comment id='11' author='swarwick' date='2020-04-06T17:39:38Z'>
 		Ok so I changed it up to use array data
 `    &lt;denchmark-link:https://github.com/test&gt;@test&lt;/denchmark-link&gt;
 
 public void testDataFrameInArray() throws Exception {
 StructType internalStructType = new StructType(Arrays.asList(new StructField [] {
 new StructField("field1", smile.data.type.DataTypes.IntegerType),
 new StructField("field2", smile.data.type.DataTypes.StringType) }));
 &lt;denchmark-code&gt;	StructType structType = new StructType(new StructField("data", smile.data.type.DataTypes.array(internalStructType)));
 	
     logger.info("Struct:\r\n{}",structType.toString());
     
     Object [] internalTupleData = new Object[internalStructType.fields().length];
     internalTupleData[0] = 1;
     internalTupleData[1] = "testing";
     smile.data.Tuple internalSmileTuple = smile.data.Tuple.of(internalTupleData, internalStructType);
     logger.info("Tuple1:\r\n{}",internalSmileTuple.toString());
     
     Object [] internalTupleData2 = new Object[internalStructType.fields().length];
     internalTupleData2[0] = 2;
     internalTupleData2[1] = "testing 2";
     smile.data.Tuple internalSmileTuple2 = smile.data.Tuple.of(internalTupleData2, internalStructType);
     logger.info("Tuple2:\r\n{}",internalSmileTuple2.toString());
     
     Object [] arrayData = new Object[2];
     arrayData[0] = internalTupleData;
     arrayData[1] = internalTupleData2;
 
     Object [] tupleData = new Object[structType.fields().length];
     tupleData[0] = arrayData;
     smile.data.Tuple smileTuple = smile.data.Tuple.of(tupleData, structType);
     logger.info("Smile Tuple:\r\n{}", smileTuple.toString());
 }`
 &lt;/denchmark-code&gt;
 
 Does that seem correct. If so when I output this last "Smile Tuple" I get:
 Data: { data: [[Ljava.lang.Object;@7dfb0c0f, [Ljava.lang.Object;@626abbd0] }
 With the internal array not actually printing.
 		</comment>
 		<comment id='12' author='swarwick' date='2020-04-06T17:43:29Z'>
 		It is probably better to make internalStructType an ObjectType(DataFrame.class)
 		</comment>
 		<comment id='13' author='swarwick' date='2020-04-06T18:05:48Z'>
 		smile.data.type.ObjectType is package internal so there is now was to access that constructor to create a new type.
 		</comment>
 		<comment id='14' author='swarwick' date='2020-04-06T18:09:47Z'>
 		DataTypes.object()
 		</comment>
 		<comment id='15' author='swarwick' date='2020-04-06T18:19:28Z'>
 		Even switching that out I still get an exception trying to toString the object
 `    &lt;denchmark-link:https://github.com/test&gt;@test&lt;/denchmark-link&gt;
 
 public void testDataFrameInArray() throws Exception {
 StructType internalStructType = new StructType(Arrays.asList(new StructField [] {
 new StructField("field1", smile.data.type.DataTypes.IntegerType),
 new StructField("field2", smile.data.type.DataTypes.StringType) }));
 &lt;denchmark-code&gt;	StructType structType = new StructType(new StructField("data", smile.data.type.DataTypes.array(smile.data.type.DataTypes.object(smile.data.DataFrame.class))));
     logger.info("Struct:\r\n{}",structType.toString());
     
     Object [] internalTupleData = new Object[internalStructType.fields().length];
     internalTupleData[0] = 1;
     internalTupleData[1] = "testing";
     smile.data.Tuple internalSmileTuple = smile.data.Tuple.of(internalTupleData, internalStructType);
     logger.info("Tuple1:\r\n{}",internalSmileTuple.toString());
     
     Object [] internalTupleData2 = new Object[internalStructType.fields().length];
     internalTupleData2[0] = 2;
     internalTupleData2[1] = "testing 2";
     smile.data.Tuple internalSmileTuple2 = smile.data.Tuple.of(internalTupleData2, internalStructType);
     logger.info("Tuple2:\r\n{}",internalSmileTuple2.toString());
     
     List&lt;smile.data.Tuple&gt; dataTuples = new ArrayList&lt;&gt;();
 	dataTuples.add(internalSmileTuple);
 	dataTuples.add(internalSmileTuple2);
     
     Object [] tupleData = new Object[structType.fields().length];
     tupleData[0] = DataFrame.of(dataTuples, internalStructType);
     smile.data.Tuple smileTuple = smile.data.Tuple.of(tupleData, structType);
     logger.info("Smile Tuple:\r\n{}", smileTuple.toString());
 }`
 &lt;/denchmark-code&gt;
 
 		</comment>
 		<comment id='16' author='swarwick' date='2020-04-06T18:20:13Z'>
 		Or are you saying done do an array of data frames... I guess they are already internally an array.
 		</comment>
 		<comment id='17' author='swarwick' date='2020-04-06T18:21:55Z'>
 		I removed the smile.data.type.DataTypes.array part around the dataframe part and that does print properly and I think works for our use case as well, so if you dont want to investigate an error with a dataframe inside an array I am ok with closing this issue.
 		</comment>
 		<comment id='18' author='swarwick' date='2020-04-06T18:52:25Z'>
 		You can close it. Again it is not an error as a wrong typed object was used (more importantly, you seems still confused about the type and its semantic meaning).
 		</comment>
 	</comments>
 </bug>
<commit id='aee9593a44acbc6499e7cb97897eb058a3dd1249' author='Haifeng Li' date='2020-04-03 16:35:25-04:00'>
 	<dmm_unit complexity='0.0' interfacing='1.0' size='0.0'></dmm_unit>
 	<modification change_type='MODIFY' old_name='data\src\main\java\smile\data\type\ArrayType.java' new_name='data\src\main\java\smile\data\type\ArrayType.java'>
 		<file_info nloc='69' complexity='18' token_count='487'></file_info>
 		<method name='ArrayType::toString' parameters='o'>
 				<method_info nloc='22' complexity='9' token_count='160' nesting_level='1' start_line='79' end_line='100'></method_info>
 			<added_lines>80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99</added_lines>
 			<deleted_lines>80</deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines></added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 </commit>
</bug_data>
