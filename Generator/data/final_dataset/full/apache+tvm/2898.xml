<bug_data>
<bug id='2898' author='derisavi' open_date='2019-03-26T15:35:03Z' closed_time='2019-04-26T21:10:43Z'>
 	<summary>[TEXPR][PASS] Loop distribution pass generates incorrect code</summary>
 	<description>
 With the following input DSL:
 import tvm
 m = 48
 A = tvm.placeholder((m,), name='A', dtype="float16")
 C = tvm.compute((m,), lambda i: A[i], name='C')
 D = tvm.compute((m,), lambda i: C[i], name='D')
 
 s = tvm.create_schedule(D.op)
 # We split the two axis with factors where neither counts the other
 co, ci = s[C].split(C.op.axis[0], 10)
 do, di = s[D].split(D.op.axis[0], 32)
 s[C].compute_at(s[D], do)
 
 bounds = tvm.schedule.InferBound(s)
 stmt = tvm.schedule.ScheduleOps(s, bounds)
 stmt = tvm.ir_pass.CanonicalSimplify(stmt)
 print(stmt)
 
 stmt = tvm.ir_pass.LoopPartition(stmt, True)
 stmt = tvm.ir_pass.CanonicalSimplify(stmt)
 print(stmt)
 The following is the output of first print statement. Code is correct.
 &lt;denchmark-code&gt;// attr [compute(D, 0x1e4d7e0)] realize_scope = ""
 realize D([0, 48]) {
   produce D {
     for (i.outer, 0, 2) {
       // attr [compute(C, 0x195b3a0)] realize_scope = ""
       realize C([(i.outer*32), 32]) {
         produce C {
           for (i.outer, 0, 4) {
             for (i.inner, 0, 10) {
               if (likely((((i.outer*10) + i.inner) &lt; 32))) {
                 if (likely(((((i.outer*32) + (i.outer*10)) + i.inner) &lt; 48))) {
                   C((((i.outer*32) + (i.outer*10)) + i.inner)) =A((((i.outer*32) + (i.outer*10)) + i.inner))
                 }
               }
             }
           }
         }
         for (i.inner, 0, 32) {
           if (likely((((i.outer*32) + i.inner) &lt; 48))) {
             if (likely((((i.outer*32) + i.inner) &lt; 48))) {
               D(((i.outer*32) + i.inner)) =C(((i.outer*32) + i.inner))
             }
           }
         }
       }
     }
   }
 }
 &lt;/denchmark-code&gt;
 
 The following is the output of the second print statement. Code is incorrect in that in the second produce C only 10 (instead of 16) elements of A are copied to C.
 &lt;denchmark-code&gt;// attr [compute(D, 0x1e4d7e0)] realize_scope = ""
 realize D([0, 48]) {
   produce D {
     for (i.outer, 0, 1) {
       // attr [compute(C, 0x195b3a0)] realize_scope = ""
       realize C([(i.outer*32), 32]) {
         produce C {
           for (i.outer, 0, 3) {
             for (i.inner, 0, 10) {
               C((((i.outer*32) + (i.outer*10)) + i.inner)) =A((((i.outer*32) + (i.outer*10)) + i.inner))
             }
           }
           for (i.inner, 0, 2) {
             C(((30 + (i.outer*32)) + i.inner)) =A(((30 + (i.outer*32)) + i.inner))
           }
         }
         for (i.inner, 0, 32) {
           D(((i.outer*32) + i.inner)) =C(((i.outer*32) + i.inner))
         }
       }
     }
     // attr [compute(C, 0x195b3a0)] realize_scope = ""
     realize C([32, 32]) {
       produce C {
         for (i.outer, 0, 1) {
           for (i.inner, 0, 10) {
             C(((32 + (i.outer*10)) + i.inner)) =A(((32 + (i.outer*10)) + i.inner))
           }
         }
       }
       for (i.inner, 0, 16) {
         D((32 + i.inner)) =C((32 + i.inner))
       }
     }
   }
 }
 &lt;/denchmark-code&gt;
 
 	</description>
 	<comments>
 		<comment id='1' author='derisavi' date='2019-03-26T16:12:51Z'>
 		Thanks for reporting this, we should fix this asap. Let us see if it is caused by some of the recent changes &lt;denchmark-link:https://github.com/dmlc/tvm/commits/master/src/pass/loop_partition.cc&gt;https://github.com/dmlc/tvm/commits/master/src/pass/loop_partition.cc&lt;/denchmark-link&gt;
  or was just something we overlooked.
 		</comment>
 		<comment id='2' author='derisavi' date='2019-03-26T16:18:38Z'>
 		I'm working on a fix now. In addition to this problem, I'm trying to fix general problems that I have found in the code as well. I will submit a PR as soon as I have it ready (likely in the next day or two).
 To answer your question, I don't know whether this has been caused by recent changes in loop_partition.cc or not.
 		</comment>
 		<comment id='3' author='derisavi' date='2019-03-26T16:37:32Z'>
 		Please also check if it has something to do with the fact that high-level produce consume pattern is involved, i.e. if we can reproduce the same error using tvm.lower
 		</comment>
 		<comment id='4' author='derisavi' date='2019-04-01T21:55:37Z'>
 		The bug is also reproducible using tvm.lower. Setting the input DSL to:
 import tvm
 m = 48
 A = tvm.placeholder((m,), name='A', dtype="float16")
 C = tvm.compute((m,), lambda i: A[i], name='C')
 D = tvm.compute((m,), lambda i: C[i], name='D')
 
 s = tvm.create_schedule(D.op)
 co, ci = s[C].split(C.op.axis[0], factor=10)
 do, di = s[D].split(D.op.axis[0], 32)
 s[C].compute_at(s[D], do)
 
 with tvm.build_config(partition_const_loop=True):
     print(tvm.lower(s, [A, C, D], name="fadd1", simple_mode=False).body);
 generates the following output, which has the same problem explained above:
 &lt;denchmark-code&gt;...
 // attr [0] compute_scope = "fadd1_compute_"
 produce D {
   for (i.outer, 0, 1) {
     produce C {
       for (i.outer, 0, 3) {
         for (i.inner, 0, 10) {
           C[(((i.outer*32) + (i.outer*10)) + i.inner)] = A[(((i.outer*32) + (i.outer*10)) + i.inner)]
         }
       }
       for (i.inner, 0, 2) {
         C[(((i.outer*32) + i.inner) + 30)] = A[(((i.outer*32) + i.inner) + 30)]
       }
     }
     for (i.inner, 0, 32) {
       D[((i.outer*32) + i.inner)] = C[((i.outer*32) + i.inner)]
     }
   }
   produce C {
     for (i.outer, 0, 1) {
       for (i.inner, 0, 10) {
         C[(((i.outer*10) + i.inner) + 32)] = A[(((i.outer*10) + i.inner) + 32)]
       }
     }
   }
   for (i.inner, 0, 16) {
     D[(i.inner + 32)] = C[(i.inner + 32)]
   }
 }
 &lt;/denchmark-code&gt;
 
 		</comment>
 		<comment id='5' author='derisavi' date='2019-04-03T02:38:07Z'>
 		This bug will not be fixed only by the change in Halide IR. It also requires quite a bit of code in TVM (I am almost ready to send a PR for that part). So should we reopen this issue?
 		</comment>
 		<comment id='6' author='derisavi' date='2019-04-03T03:00:32Z'>
 		it was automatically closed by github association rule :)
 		</comment>
 	</comments>
 </bug>
<commit id='7e68d63f75dfa961c50cfeb7a55f78db9dcc90f0' author='Salem Derisavi' date='2019-04-26 14:10:42-07:00'>
 	<dmm_unit complexity='0.44144144144144143' interfacing='0.6126126126126126' size='0.23423423423423423'></dmm_unit>
 	<modification change_type='MODIFY' old_name='src\pass\loop_partition.cc' new_name='src\pass\loop_partition.cc'>
 		<file_info nloc='443' complexity='106' token_count='3556'></file_info>
 		<method name='tvm::ir::LoopPartitioner::MakeFor' parameters='node,extent,body'>
 				<method_info nloc='10' complexity='2' token_count='110' nesting_level='2' start_line='597' end_line='607'></method_info>
 			<added_lines>600,601,602,603,604,605,606</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<method name='tvm::ir::AppendStmts' parameters='a,b'>
 				<method_info nloc='9' complexity='3' token_count='56' nesting_level='2' start_line='416' end_line='424'></method_info>
 			<added_lines>416,417,418,419,420,421,422,423,424</added_lines>
 			<deleted_lines>418</deleted_lines>
 		</method>
 		<method name='tvm::ir::ThreadPartitionInserter::ThreadPartitionInserter' parameters='ps,cond'>
 				<method_info nloc='2' complexity='1' token_count='36' nesting_level='3' start_line='231' end_line='232'></method_info>
 			<added_lines>231,232</added_lines>
 			<deleted_lines>231</deleted_lines>
 		</method>
 		<method name='tvm::ir::ConditionEliminator::Mutate' parameters='e'>
 				<method_info nloc='6' complexity='3' token_count='51' nesting_level='3' start_line='261' end_line='266'></method_info>
 			<added_lines>262,263,264</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<method name='tvm::ir::LoopPartitioner::TryPartition' parameters='node,stmt,var,min,max,body,partition_thread_scope'>
 				<method_info nloc='97' complexity='24' token_count='712' nesting_level='2' start_line='472' end_line='595'></method_info>
 			<added_lines>481,482,483,484,485,486,487,488,489,490,491,492,493,494,495,496,497,498,499,500,501,504,505,506,507,508,509,510,511,514,515,516,523,524,535,536,539,540,541,542,549,550,553,554,555,563,564,566,567,568,569,570,571,572,573,574,575,576,577,578,579,580,581,582,585,586,591</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<method name='tvm::ir::LoopPartitioner::Mutate_' parameters='op,stmt'>
 				<method_info nloc='12' complexity='3' token_count='134' nesting_level='3' start_line='316' end_line='330'></method_info>
 			<added_lines>323</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<method name='tvm::ir::PartitionFinder::InverseCond' parameters='cond'>
 				<method_info nloc='13' complexity='5' token_count='150' nesting_level='3' start_line='228' end_line='246'></method_info>
 			<added_lines>228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246</added_lines>
 			<deleted_lines>231</deleted_lines>
 		</method>
 		<method name='tvm::ir::ConditionEliminator::ConditionEliminator' parameters='ps,cond_value'>
 				<method_info nloc='2' complexity='1' token_count='31' nesting_level='3' start_line='257' end_line='258'></method_info>
 			<added_lines>257,258</added_lines>
 			<deleted_lines>258</deleted_lines>
 		</method>
 		<method name='tvm::ir::ThreadPartitionInserter::ThreadPartitionInserter' parameters='ps,cond'>
 				<method_info nloc='2' complexity='1' token_count='34' nesting_level='3' start_line='277' end_line='278'></method_info>
 			<added_lines>277</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<method name='tvm::ir::ConditionEliminator::ConditionEliminator' parameters='ps'>
 				<method_info nloc='2' complexity='1' token_count='23' nesting_level='3' start_line='214' end_line='215'></method_info>
 			<added_lines>214,215</added_lines>
 			<deleted_lines>214,215</deleted_lines>
 		</method>
 		<method name='tvm::ir::LoopPartitioner::GetIntervalAndCondset' parameters='partitions,for_interval,cond_value'>
 				<method_info nloc='27' complexity='11' token_count='263' nesting_level='2' start_line='383' end_line='414'></method_info>
 			<added_lines>383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412,413,414</added_lines>
 			<deleted_lines>383,384,385,386,387,388,389,390,391,392,401,402,403,404,405,406,407,408,409,410,412</deleted_lines>
 		</method>
 		<method name='tvm::ir::PartitionFinder::Visit_' parameters='op'>
 				<method_info nloc='23' complexity='6' token_count='167' nesting_level='3' start_line='196' end_line='223'></method_info>
 			<added_lines>201,202,203,205,207,208,209,210,211,212,213,214,215,216,217</added_lines>
 			<deleted_lines>202,211,214,215,219</deleted_lines>
 		</method>
 		<method name='tvm::ir::PartitionKeyHash::operator ( )' parameters='k'>
 				<method_info nloc='5' complexity='1' token_count='58' nesting_level='3' start_line='43' end_line='47'></method_info>
 			<added_lines>43,44,45,46,47</added_lines>
 			<deleted_lines>43,44</deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines>41,42,50,51,52,53,54,151,152,153,225,247,254,269,270,299,304,305,366,367,368,369,370,371,380,381,382,415,425,426,427,428,429,430,431,432,433,434,435,436,437,438,439,440,441,442,443,444,445,446,447,448,449,450,451,452,453,454,455,456,457,458,459,460,461,462,463,464,465,466,467,468,469,470,471</added_lines>
 			<deleted_lines>41,42,143,192,194,224,253,276,336,337,338,339,340,341,342,344,348,349,350,358,370,371,372,380,382,427,428</deleted_lines>
 		</modified_lines>
 	</modification>
 	<modification change_type='MODIFY' old_name='tests\python\unittest\test_pass_loop_partition.py' new_name='tests\python\unittest\test_pass_loop_partition.py'>
 		<file_info nloc='340' complexity='24' token_count='4061'></file_info>
 		<method name='test_double_splitting_with_indivisible_factors' parameters=''>
 				<method_info nloc='23' complexity='1' token_count='362' nesting_level='0' start_line='356' end_line='385'></method_info>
 			<added_lines>356,357,358,359,360,361,362,363,364,365,366,367,368,369,370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<method name='find_top_produce.f' parameters='x,ret'>
 				<method_info nloc='3' complexity='2' token_count='25' nesting_level='1' start_line='26' end_line='28'></method_info>
 			<added_lines>26,27,28</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<method name='find_top_produce' parameters='stmt'>
 				<method_info nloc='5' complexity='1' token_count='35' nesting_level='0' start_line='25' end_line='31'></method_info>
 			<added_lines>25,26,27,28,29,30,31</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines>18,32,386,404</added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 </commit>
</bug_data>
