<bug_data>
<bug id='608' author='pinzhenx' open_date='2019-11-29T06:20:38Z' closed_time='2019-12-04T15:54:15Z'>
 	<summary>Reorder not work like 0.x on submemory?</summary>
 	<description>
 As per this &lt;denchmark-link:https://github.com/intel/mkl-dnn/issues/69#issuecomment-306867254&gt;thread&lt;/denchmark-link&gt;
 , this seems not to work anymore:
 #include &lt;stdio.h&gt;
 #include "dnnl.hpp"
 
 using namespace dnnl;
 using tag = memory::format_tag;
 using dt = memory::data_type;
 
 int main() {
   engine eng(engine::kind::cpu, 0);
   stream strm(eng);
 
   float dst_buf[2] = {1, 0};
   float src_buf[1] = {35};
 
   memory dst({{2}, dt::f32, tag::a}, eng, dst_buf);
   memory src({{1}, dt::f32, tag::a}, eng, src_buf);
 
   auto dst_view = dst.get_desc().submemory_desc({1}, {1});
   dnnl::reorder({src.get_engine(), src.get_desc(), dst.get_engine(), dst_view})
     .execute(strm, src, dst);
 
   for (size_t i = 0; i &lt; dst.get_desc().get_size() / sizeof(float); i++)
     printf("%g\n", ((float*)dst.get_data_handle())[i]);
 
   return 0;
 }
 &lt;denchmark-code&gt;expect: [1, 35]
 actual: [35, 0]
 &lt;/denchmark-code&gt;
 
 I'm not sure if I'm using it right. If the reorder indeed cannot work on submemory, how can I manipulate part of memory before insert and extract are provided?
 Update: It works on the v.1.1.1 release version
 	</description>
 	<comments>
 		<comment id='1' author='pinzhenx' date='2019-11-29T09:46:51Z'>
 		Hi &lt;denchmark-link:https://github.com/pinzhenx&gt;@pinzhenx&lt;/denchmark-link&gt;
 ,
 Thank you very much for reporting the issue and for the reproducer!
 This is a bug, the behavior changes were introduced by me in &lt;denchmark-link:https://github.com/oneapi-src/oneDNN/commit/ebeab4fc2f6d7c1e1d30f9f82984df0becbca4c5&gt;ebeab4f&lt;/denchmark-link&gt;
  unintentionally.
 I am glad we catch this issue before we release DNNL v1.2 (thanks to you)! 
 Could you please validate &lt;denchmark-link:https://gist.github.com/emfomenk/eb07b8622cb3ece4262c265c5dd5cece&gt;the fix&lt;/denchmark-link&gt;
 ?
 If you are interested, below is the detailed explanation why this problem appeared in the first place and how it is fixed.
 &lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;
 
 
 Copy-pasted from the commit message to the potentional fix:
 https://gist.github.com/emfomenk/eb07b8622cb3ece4262c265c5dd5cece
 
 The unwanted change appeared with recent MatMul enabling, namely with the run-time dimensions support. In order to retrieve the run-time sizes and strides, the primitives started using memory descriptors from the memory arguments instead of the memory descriptors kept in the primitive descriptor.
     // Before:
     auto src_mdw = memory_descriptor_wrapper(pd()-&gt;src_md());
 
     // After:
     auto src_mdw = ctx.memory_mdw(DNNL_ARG_SRC);
 These two approaches are almost interchangeable when the original memory descriptor was fully defined (i.e. no run-time dimensions), except for the sub-memory case. The sub-memory workflow (as a successor of view from Intel MKL-DNN v0.x) assumes that it is used at primitive descriptor creation time only, while input memory should be used as is. Example:
     memory src({{10, 10}, ...}, ...); // original src memory
     memory::desc submemory_src_md
             = src.get_desc().submemory_desc({5, 5}, {1, 1});
 
     primitive_desc pd(submemory_src_md, ...); // use sub-memory
     primitive p(pd);
 
     p.execute(stream, {
             {DNNL_ARG_SRC, src},  // use the original src memory,
                                   // not a sub-memory based!
             ...});
 To restore the original sub-memory behavior, the recently added function ctx.memory_mdw() is extended with new optional parameter md_from_primitive_desc that points to the memory descriptor stored in the primitive descriptor, and is used whenever it is fully defined (i.e. there is no intention to use run-time sizes and / or strides):
 memory_desc_wrapper memory_mdw(int arg,
         const memory_desc_t *md_from_primitive_desc = nullptr) const;
 In general, the interaction between run-time defined memory descriptors and sub-memory seems to be broken. This should probably be revisited by DNNL v2 time-frame. All future extensions of the run-time memory descriptors support should be done with caution and this particular issue in mind.
 		</comment>
 		<comment id='2' author='pinzhenx' date='2019-11-29T11:51:37Z'>
 		Hi &lt;denchmark-link:https://github.com/emfomenk&gt;@emfomenk&lt;/denchmark-link&gt;
 
 Thanks so much for prompt reply. It works well on my models.
 		</comment>
 	</comments>
 </bug>
<commit id='9b49a989102f015500031d5bedf522d76a08983b' author='Fomenko, Evarist M' date='2019-12-03 10:32:26-08:00'>
 	<dmm_unit complexity='1.0' interfacing='1.0' size='0.21739130434782608'></dmm_unit>
 	<modification change_type='MODIFY' old_name='src\common\primitive_exec_types.cpp' new_name='src\common\primitive_exec_types.cpp'>
 		<file_info nloc='75' complexity='23' token_count='551'></file_info>
 		<method name='dnnl::impl::exec_ctx_t::memory_mdw' parameters='arg,md_from_primitive_desc'>
 				<method_info nloc='10' complexity='4' token_count='74' nesting_level='2' start_line='86' end_line='95'></method_info>
 			<added_lines>86,87,88,89,90,91,92</added_lines>
 			<deleted_lines>86</deleted_lines>
 		</method>
 		<method name='dnnl::impl::exec_ctx_t::memory_mdw' parameters='arg'>
 				<method_info nloc='4' complexity='2' token_count='45' nesting_level='2' start_line='86' end_line='89'></method_info>
 			<added_lines>86,87,88,89</added_lines>
 			<deleted_lines>86</deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines></added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 	<modification change_type='MODIFY' old_name='src\common\primitive_exec_types.hpp' new_name='src\common\primitive_exec_types.hpp'>
 		<file_info nloc='39' complexity='4' token_count='222'></file_info>
 		<modified_lines>
 			<added_lines>67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83</added_lines>
 			<deleted_lines>67</deleted_lines>
 		</modified_lines>
 	</modification>
 	<modification change_type='MODIFY' old_name='src\cpu\matmul\gemm_f32_matmul.cpp' new_name='src\cpu\matmul\gemm_f32_matmul.cpp'>
 		<file_info nloc='117' complexity='39' token_count='1088'></file_info>
 		<method name='dnnl::impl::cpu::gemm_f32_matmul_t::execute_ref' parameters='ctx'>
 				<method_info nloc='55' complexity='13' token_count='627' nesting_level='3' start_line='92' end_line='161'></method_info>
 			<added_lines>100,101,102</added_lines>
 			<deleted_lines>100,101,102</deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines></added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 	<modification change_type='MODIFY' old_name='src\cpu\matmul\gemm_x8s8s32x_matmul.cpp' new_name='src\cpu\matmul\gemm_x8s8s32x_matmul.cpp'>
 		<file_info nloc='177' complexity='52' token_count='1618'></file_info>
 		<method name='dnnl::impl::cpu::gemm_x8s8s32x_matmul_t&lt;src_type,weights_type,dst_type&gt;::execute_ref' parameters='ctx'>
 				<method_info nloc='102' complexity='27' token_count='1005' nesting_level='3' start_line='98' end_line='225'></method_info>
 			<added_lines>122,123,124</added_lines>
 			<deleted_lines>122,123,124</deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines></added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 	<modification change_type='MODIFY' old_name='src\cpu\matmul\ref_matmul.cpp' new_name='src\cpu\matmul\ref_matmul.cpp'>
 		<file_info nloc='97' complexity='18' token_count='965'></file_info>
 		<method name='dnnl::impl::cpu::ref_matmul_t&lt;src_type,weights_type,dst_type,acc_type&gt;::execute_ref' parameters='ctx'>
 				<method_info nloc='71' complexity='18' token_count='801' nesting_level='3' start_line='35' end_line='120'></method_info>
 			<added_lines>47,48,49,50</added_lines>
 			<deleted_lines>47,48,49,50</deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines></added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 	<modification change_type='MODIFY' old_name='src\cpu\simple_reorder.hpp' new_name='src\cpu\simple_reorder.hpp'>
 		<file_info nloc='1056' complexity='241' token_count='9798'></file_info>
 		<method name='dnnl::impl::cpu::simple_reorder_impl&lt;SIMPLE_REORDER_TEMPL_CALL,typenameutils::enable_if&lt;tag_i==format_tag::any&amp;&amp;tag_o==format_tag::any&amp;&amp;order_keep==fmt_order::any,spec::reference&gt;::type&gt;::execute' parameters='pd_object,ctx'>
 				<method_info nloc='35' complexity='5' token_count='373' nesting_level='4' start_line='1230' end_line='1277'></method_info>
 			<added_lines>1245,1246</added_lines>
 			<deleted_lines>1245,1246</deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines>76,77</added_lines>
 			<deleted_lines>76,77</deleted_lines>
 		</modified_lines>
 	</modification>
 	<modification change_type='MODIFY' old_name='src\ocl\ref_matmul.cpp' new_name='src\ocl\ref_matmul.cpp'>
 		<file_info nloc='100' complexity='18' token_count='1012'></file_info>
 		<method name='dnnl::impl::ocl::ref_matmul_t::execute_ref' parameters='ctx'>
 				<method_info nloc='90' complexity='18' token_count='991' nesting_level='3' start_line='27' end_line='127'></method_info>
 			<added_lines>47,48,49,50</added_lines>
 			<deleted_lines>47,48,49,50</deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines></added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 	<modification change_type='ADD' old_name='None' new_name='tests\gtests\api\test_submemory.cpp'>
 		<file_info nloc='59' complexity='3' token_count='459'></file_info>
 	</modification>
 </commit>
</bug_data>
