<bug_data>
<bug id='6786' author='printomi' open_date='2018-11-28T15:58:49Z' closed_time='2018-12-14T02:52:34Z'>
 	<summary>KFoldIterator calculates incorrect batch sizes</summary>
 	<description>
 KfoldIterator calculates incorrect batch and lastBatch sizes. The later can be non-positive (lastBatch&lt;=0). E.g.: Number of examples in allData N = 13, number of folds k = 6, then the current implementation calculates that batch = 3 and lastBatch = -2, which is obviously not what we wanted.
 Current constructor looks like this:
 public KFoldIterator(int k, DataSet allData) {
 	this.k = k;
 	this.allData = allData.copy();
 	if (k &lt;= 1)
 		throw new IllegalArgumentException();
 	if (allData.numExamples() % k != 0) {
 		this.batch = (int)Math.ceil(allData.numExamples() / (double)k);
 		this.lastBatch = allData.numExamples() - (k-1) * this.batch;
 	} else {
 		this.batch = allData.numExamples() / k;
 		this.lastBatch = allData.numExamples() / k;
 	}
 }
 My suggested implementation is the following:
 public KFoldIterator(int k, DataSet allData) {
 	this.k = k;
 	this.allData = allData.copy();
 	if (k &lt;= 1) {
 		throw new IllegalArgumentException();
 	}
 	this.batch = allData.numExamples() / k;
 	this.lastBatch = batch + allData.numExamples() % k;
 }
 My implementation would give batch = 2 and lastBatch = 3 in the above example.
 I have not tried your test (deeplearning4j/deeplearning4j/pull/5993), but I have made a simple test class that passes with my implementation, and fails with the current one. My test tries every possible k numbers from 2 to N, and sums number of test examples in the folds.
 import static org.junit.Assert.*;
 import org.junit.Test;
 import org.nd4j.linalg.api.ndarray.INDArray;
 import org.nd4j.linalg.dataset.DataSet;
 import org.nd4j.linalg.factory.Nd4j;
 
 import org.nd4j.linalg.dataset.api.iterator.KFoldIterator;
 
 public class KFoldIteratorTest {
 
 	private static final int NUM_EXAMPLES = 13;
 	private static final int NUM_FEATURES = 3;
 	
 	@Test
 	public void testTestFold() {
 		INDArray features = Nd4j.rand(new int[] {NUM_EXAMPLES, NUM_FEATURES});
 		INDArray labels = Nd4j.ones(NUM_EXAMPLES, 1);
 		DataSet dataSet = new DataSet(features, labels);
 		
 		for (int k = 2; k &lt;= NUM_EXAMPLES; k++) {
 			KFoldIterator kFoldIterator = new KFoldIterator(k, dataSet);
 			int numTestExamples = 0;
 			for (int i = 0; i &lt; k; i++) {
 				kFoldIterator.next();
 				numTestExamples += kFoldIterator.testFold().numExamples();
 			}
 			assertEquals(NUM_EXAMPLES, numTestExamples);
 		}
 	}
 	
 }
 The above test of KFoldIterator (version 1.0.0-beta3) fails with the following exception stack trace:
 &lt;denchmark-code&gt;java.lang.IllegalArgumentException: Beginning index (15) in range must be less than or equal to end (13)
 	at org.nd4j.base.Preconditions.throwEx(Preconditions.java:636)
 	at org.nd4j.base.Preconditions.checkArgument(Preconditions.java:110)
 	at org.nd4j.linalg.indexing.NDArrayIndex.interval(NDArrayIndex.java:666)
 	at org.nd4j.linalg.indexing.NDArrayIndex.interval(NDArrayIndex.java:698)
 	at org.nd4j.linalg.dataset.DataSet.getRange(DataSet.java:237)
 	at org.nd4j.linalg.dataset.api.iterator.KFoldIterator.nextFold(KFoldIterator.java:188)
 	at org.nd4j.linalg.dataset.api.iterator.KFoldIterator.next(KFoldIterator.java:158)
 	at hu.printnet.anne.node.task.impl.KFoldIteratorTest.testTestFold(KFoldIteratorTest.java:28)
 	at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
 	at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
 	at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
 	at java.lang.reflect.Method.invoke(Method.java:498)
 	at org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:50)
 	at org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
 	at org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:47)
 	at org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
 	at org.junit.runners.ParentRunner.runLeaf(ParentRunner.java:325)
 	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:78)
 	at org.junit.runners.BlockJUnit4ClassRunner.runChild(BlockJUnit4ClassRunner.java:57)
 	at org.junit.runners.ParentRunner$3.run(ParentRunner.java:290)
 	at org.junit.runners.ParentRunner$1.schedule(ParentRunner.java:71)
 	at org.junit.runners.ParentRunner.runChildren(ParentRunner.java:288)
 	at org.junit.runners.ParentRunner.access$000(ParentRunner.java:58)
 	at org.junit.runners.ParentRunner$2.evaluate(ParentRunner.java:268)
 	at org.junit.runners.ParentRunner.run(ParentRunner.java:363)
 	at org.eclipse.jdt.internal.junit4.runner.JUnit4TestReference.run(JUnit4TestReference.java:86)
 	at org.eclipse.jdt.internal.junit.runner.TestExecution.run(TestExecution.java:38)
 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:459)
 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.runTests(RemoteTestRunner.java:678)
 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.run(RemoteTestRunner.java:382)
 	at org.eclipse.jdt.internal.junit.runner.RemoteTestRunner.main(RemoteTestRunner.java:192)
 &lt;/denchmark-code&gt;
 
 	</description>
 	<comments>
 		<comment id='1' author='printomi' date='2018-11-29T00:00:00Z'>
 		&lt;denchmark-link:https://github.com/printomi&gt;@printomi&lt;/denchmark-link&gt;
  What wersion of DL4J/ND4J are you using?
 This looks like an issue that was fixed a few releases ago.
 Maybe try upgrading to 1.0.0-beta3 and try again?
 		</comment>
 		<comment id='2' author='printomi' date='2018-11-29T07:31:11Z'>
 		&lt;denchmark-link:https://github.com/AlexDBlack&gt;@AlexDBlack&lt;/denchmark-link&gt;
  I use 1.0.0-beta3 version of ND4J and DL4J. The KFoldIterator constructor that I quoted above is from &lt;denchmark-link:https://github.com/deeplearning4j/deeplearning4j/blob/release/1.0.0-beta3/nd4j/nd4j-backends/nd4j-api-parent/nd4j-api/src/main/java/org/nd4j/linalg/dataset/api/iterator/KFoldIterator.java&gt;here&lt;/denchmark-link&gt;
 
 The problem with the current implementation is that in case of allData.numExamples() % k != 0 i.e. (N mod k) &gt; 0, the size of the first k-1 batch is larger by one, and the last batch size is calculated from this, which can result in 0 or negative batch size in the last batch.
 The correct approach would be to use always the integer part (floor) of N / k for the first k-1 batch, and use N / k + (N mod k) for the last batch. This way, we can eliminate an if clause from the current implementation.
 		</comment>
 		<comment id='3' author='printomi' date='2018-11-30T08:11:09Z'>
 		The following equations may make my approach more easy to understood:
 N = allData.numExamples()
 N = k*(N / k) + (N % k)
 N = (k-1)*(N / k) + (N / k) + (N % k)
 batch=N / k
 lastBatch=(N / k) + (N % k)
 where N / k is the quotient, and N % k is the remainder (modulo) of the division
 		</comment>
 		<comment id='4' author='printomi' date='2018-12-04T00:25:35Z'>
 		Hello &lt;denchmark-link:https://github.com/printomi&gt;@printomi&lt;/denchmark-link&gt;
  , Thanks for creating the issue, you clearly put a lot of effort in it which we appreciate. I was able to reproduce the failing test. The new implementation passes this test so would be an improvement.
 However all the &lt;denchmark-link:https://github.com/deeplearning4j/deeplearning4j/blob/master/nd4j/nd4j-backends/nd4j-tests/src/test/java/org/nd4j/linalg/dataset/KFoldIteratorTest.java&gt;existing tests&lt;/denchmark-link&gt;
  fail with the new implementation.
 Please have a look at those. Then we can work on doing a pull request to improve the KFoldIterator.
 		</comment>
 		<comment id='5' author='printomi' date='2018-12-05T14:21:51Z'>
 		I reviewed the &lt;denchmark-link:https://github.com/deeplearning4j/deeplearning4j/blob/master/nd4j/nd4j-backends/nd4j-tests/src/test/java/org/nd4j/linalg/dataset/KFoldIteratorTest.java&gt;existing tests&lt;/denchmark-link&gt;
 , and found some problems:
 
 
 The test checkFolds() has a problem with the following line: https://github.com/deeplearning4j/deeplearning4j/blob/d9f8836dd64e3346906a50ff0d4cdfd21a30f37d/nd4j/nd4j-backends/nd4j-tests/src/test/java/org/nd4j/linalg/dataset/KFoldIteratorTest.java#L42
 On this line, a RandomDataSet is created, which will consist of preset sized (3, 3, 3, 2) folds, resulting in
 3+3+3+2=11 examples in the next line: https://github.com/deeplearning4j/deeplearning4j/blob/d9f8836dd64e3346906a50ff0d4cdfd21a30f37d/nd4j/nd4j-backends/nd4j-tests/src/test/java/org/nd4j/linalg/dataset/KFoldIteratorTest.java#L43
 Then, it creates a KFoldIterator with k = 4: https://github.com/deeplearning4j/deeplearning4j/blob/d9f8836dd64e3346906a50ff0d4cdfd21a30f37d/nd4j/nd4j-backends/nd4j-tests/src/test/java/org/nd4j/linalg/dataset/KFoldIteratorTest.java#L44
 Here is the difference, which causes this test to fail:
 
 the current implementation will calculate batch = 3 and lastBatch = 2
 https://github.com/deeplearning4j/deeplearning4j/blob/41f220fbc2410efe71d535f8344f74e11ea8a44a/nd4j/nd4j-backends/nd4j-api-parent/nd4j-api/src/main/java/org/nd4j/linalg/dataset/api/iterator/KFoldIterator.java#L58
 my proposed implementation would calculate batch = 2 and lastBatch = 5 (see code in my first comment)
 So I would replace the line creating randomDS with the following:
 RandomDataSet randomDS = new RandomDataSet(new int[] {2, 3}, new int[] {2, 2, 2, 5});
 
 
 
 For the same reason, I would replace the following line of checkCornerCaseA() https://github.com/deeplearning4j/deeplearning4j/blob/d9f8836dd64e3346906a50ff0d4cdfd21a30f37d/nd4j/nd4j-backends/nd4j-tests/src/test/java/org/nd4j/linalg/dataset/KFoldIteratorTest.java#L89 with the following code:
  RandomDataSet randomDS = new RandomDataSet(new int[] {2, 3}, new int[] {1, 2});
 
 
 For the same reason, test5974() will have to be modified to the following:
 
 
     @Test
     public void test5974(){
         int N = 99;
         int k = 10;
         DataSet ds = new DataSet(Nd4j.linspace(1,N,N).transpose(), Nd4j.linspace(1,N,N).transpose());
 
         KFoldIterator iter = new KFoldIterator(k, ds);
 
         int count = 0;
         while(iter.hasNext()){
             DataSet fold = iter.next();
             INDArray testFold;
             int countTrain;
             int rem = N % k;
             if(count &lt; k-1){
                 //Folds 0 to 8: should have 9 examples for test (N=99,k=10)
                 testFold = Nd4j.linspace(rem*count+1, rem*count+rem, k).transpose();
                 countTrain = N - rem;
             } else {
                 //Fold 9 should have 18 examples for test (N=99,k=10)
                 int lastBatch = N-(k-1)*rem;
                 testFold = Nd4j.linspace(rem*count+1, rem*count+lastBatch, lastBatch).transpose();
                 countTrain = N - lastBatch;
             }
             String s = String.valueOf(count);
             DataSet test = iter.testFold();
             assertEquals(s, testFold, test.getFeatures());
             assertEquals(s, testFold, test.getLabels());
             assertEquals(s, countTrain, fold.getFeatures().length());
             assertEquals(s, countTrain, fold.getLabels().length());
             count++;
         }
     }
 I created an Excel worksheet camparing the batch sizes of two implementations: &lt;denchmark-link:https://github.com/deeplearning4j/deeplearning4j/files/2648988/KFoldIterator_batch_sizes.xlsx&gt;KFoldIterator_batch_sizes.xlsx&lt;/denchmark-link&gt;
 
 TL-DR: the current implementation's batch sizes are hard-coded in the current unit tests (by &lt;denchmark-link:https://github.com/eraly&gt;@eraly&lt;/denchmark-link&gt;
  ). That's why they all fail with my proposed implementation of .
 		</comment>
 		<comment id='6' author='printomi' date='2018-12-05T23:52:57Z'>
 		Well, that is an impressive effort.Thanks again. Would you submit a Pull Request for KFoldIterator.java and
 KFoldIteratorTest.java ? You can ping us here if you need any help.
 		</comment>
 		<comment id='7' author='printomi' date='2018-12-06T14:24:04Z'>
 		I will be happy to create a Pull Request. However, I was not satisfied with my previously proposed implementation, because of the large differences of batch sizes in case of . For example, with  = 11 and  = 6,  = 1 and  = 6.
 I found a better implementation &lt;denchmark-link:https://github.com/scikit-learn/scikit-learn/blob/55bf5d93e5674f13a1134d93a11fd0cd11aabcd1/sklearn/model_selection/_split.py#L438&gt;in scikit-learn&lt;/denchmark-link&gt;
 , which sets the size of every batch to  , and then increments the size of the first  batches by 1. This way, the difference between batch sizes will be at most 1, which is a good news, if we expect that the cross-validation would consist of similar sized training and test sets.
 We can implement this with this  constructor and  method:
 // new fields
 private int N;
 private int baseBatchSize;
 private int numIncrementedBatches;
 /* ... */
 // modified constructor
 public KFoldIterator(int k, DataSet allData) {
     if (k &lt;= 1) {
         throw new IllegalArgumentException();
     }
     this.k = k;
     this.N = allData.numExamples();
     this.baseBatchSize = N / k;
     this.numIncrementedBatches = N % k;
     this.allData = allData.copy();
 }
 /* ... */
 private void nextFold() {
     int left;
     int right;
     if (kCursor &lt; numIncrementedBatches) {
         left = kCursor * (baseBatchSize + 1);
         right = left + (baseBatchSize + 1);
     } else {
         left = rem * (baseBatchSize + 1) + (kCursor - numIncrementedBatches) * baseBatchSize;
         right = left + rem;
     }
 
     List&lt;DataSet&gt; kMinusOneFoldList = new ArrayList&lt;DataSet&gt;();
     if (right &lt; totalExamples()) {
         if (left &gt; 0) {
             kMinusOneFoldList.add((DataSet) allData.getRange(0, left));
         }
         kMinusOneFoldList.add((DataSet) allData.getRange(right, totalExamples()));
         train = DataSet.merge(kMinusOneFoldList);
     } else {
         train = (DataSet) allData.getRange(0, left);
     }
     test = (DataSet) allData.getRange(left, right);
 
     kCursor++;
 
 }
 We will then have to modify the tests also.
 		</comment>
 		<comment id='8' author='printomi' date='2018-12-06T23:44:21Z'>
 		Looks good. Lets take the conversation to the PR.  No point copying and pasting code here. I am not closing this issue yet as I am not sure if WIP Pull Requests are the way to go. We will find out quickly if we are not supposed to.
 		</comment>
 		<comment id='9' author='printomi' date='2019-01-13T05:40:36Z'>
 		This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue for related bugs.
 		</comment>
 	</comments>
 </bug>
<commit id='4670eee4f25cef84afca2ba2e2ebf46577968308' author='Tamás Fenyvesi' date='2018-12-14 11:52:33+09:00'>
 	<dmm_unit complexity='1.0' interfacing='1.0' size='0.0'></dmm_unit>
 	<modification change_type='MODIFY' old_name='nd4j\nd4j-backends\nd4j-api-parent\nd4j-api\src\main\java\org\nd4j\linalg\dataset\api\iterator\KFoldIterator.java' new_name='nd4j\nd4j-backends\nd4j-api-parent\nd4j-api\src\main\java\org\nd4j\linalg\dataset\api\iterator\KFoldIterator.java'>
 		<file_info nloc='113' complexity='23' token_count='628'></file_info>
 		<method name='KFoldIterator::batch' parameters=''>
 				<method_info nloc='3' complexity='1' token_count='18' nesting_level='1' start_line='143' end_line='145'></method_info>
 			<added_lines>144</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<method name='KFoldIterator::totalExamples' parameters=''>
 				<method_info nloc='3' complexity='1' token_count='8' nesting_level='1' start_line='97' end_line='99'></method_info>
 			<added_lines>98</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<method name='KFoldIterator::nextFold' parameters=''>
 				<method_info nloc='16' complexity='3' token_count='134' nesting_level='1' start_line='178' end_line='196'></method_info>
 			<added_lines>178,179,180</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<method name='KFoldIterator::lastBatch' parameters=''>
 				<method_info nloc='3' complexity='1' token_count='8' nesting_level='1' start_line='132' end_line='134'></method_info>
 			<added_lines></added_lines>
 			<deleted_lines>132,133</deleted_lines>
 		</method>
 		<method name='KFoldIterator::KFoldIterator' parameters='k,allData'>
 				<method_info nloc='19' complexity='4' token_count='138' nesting_level='1' start_line='63' end_line='85'></method_info>
 			<added_lines>64,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84</added_lines>
 			<deleted_lines>77,78</deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines>27,28,30,33,34,35,36,37,38,39,40,41,42,45,46,47,48,49,50,51,56,57,58,59,137,138</added_lines>
 			<deleted_lines>27,28,32,33,34,35,36,37,38,45,46,47,51,53,54,55,57,58,59,60,61,62,117,123,124,125,126,127,128,129,130,131,167,168,169,170,171,172,173,174,175,176</deleted_lines>
 		</modified_lines>
 	</modification>
 	<modification change_type='MODIFY' old_name='nd4j\nd4j-backends\nd4j-tests\src\test\java\org\nd4j\linalg\dataset\KFoldIteratorTest.java' new_name='nd4j\nd4j-backends\nd4j-tests\src\test\java\org\nd4j\linalg\dataset\KFoldIteratorTest.java'>
 		<file_info nloc='175' complexity='25' token_count='1546'></file_info>
 		<method name='KFoldIteratorTest::KBatchRandomDataSet::KBatchRandomDataSet' parameters='dataShape,batchSizes'>
 				<method_info nloc='27' complexity='4' token_count='246' nesting_level='2' start_line='165' end_line='191'></method_info>
 			<added_lines>165,168,169,170,171,172,174,176,177,178,179,180,181,183,184,186,187,190</added_lines>
 			<deleted_lines>166,169,172,175,176,179,186,191</deleted_lines>
 		</method>
 		<method name='KFoldIteratorTest::RandomDataSet::RandomDataSet' parameters='dataShape,ks'>
 				<method_info nloc='29' complexity='4' token_count='266' nesting_level='2' start_line='121' end_line='149'></method_info>
 			<added_lines>121,122,123,130,131,133,134,135,136,142,143,144,145,146,147,148,149</added_lines>
 			<deleted_lines>121,124,125,126,127,128,129,131,132,134,135,136,137,138,139,141,142,144,145,148</deleted_lines>
 		</method>
 		<method name='KFoldIteratorTest::RandomDataSet::getFoldbutk' parameters='k,feat'>
 				<method_info nloc='15' complexity='4' token_count='91' nesting_level='2' start_line='159' end_line='173'></method_info>
 			<added_lines>160,161,162,163,164,165,168,169,170,171,172</added_lines>
 			<deleted_lines>159,160,162,166,169,172</deleted_lines>
 		</method>
 		<method name='KFoldIteratorTest::checkCornerCaseException' parameters=''>
 				<method_info nloc='6' complexity='1' token_count='71' nesting_level='1' start_line='110' end_line='116'></method_info>
 			<added_lines>110,111,112,113,114,115</added_lines>
 			<deleted_lines>113,114,115</deleted_lines>
 		</method>
 		<method name='KFoldIteratorTest::checkCornerCase' parameters=''>
 				<method_info nloc='18' complexity='2' token_count='192' nesting_level='1' start_line='119' end_line='140'></method_info>
 			<added_lines>119,120,121,122,123,130,131,133,134,135,136</added_lines>
 			<deleted_lines>119,121,124,125,126,127,128,129,131,132,134,135,136,137,138,139</deleted_lines>
 		</method>
 		<method name='KFoldIteratorTest::RandomDataSet::getfoldK' parameters='k,feat'>
 				<method_info nloc='3' complexity='2' token_count='23' nesting_level='2' start_line='155' end_line='157'></method_info>
 			<added_lines>157</added_lines>
 			<deleted_lines>155,156</deleted_lines>
 		</method>
 		<method name='KFoldIteratorTest::checkFolds' parameters=''>
 				<method_info nloc='20' complexity='2' token_count='206' nesting_level='1' start_line='83' end_line='106'></method_info>
 			<added_lines>84,85,86,87,94,96,99,100,101,102</added_lines>
 			<deleted_lines>83,84,86,89,90,91,98,99,101,102,104</deleted_lines>
 		</method>
 		<method name='KFoldIteratorTest::checkTestFoldContent' parameters=''>
 				<method_info nloc='20' complexity='4' token_count='188' nesting_level='1' start_line='51' end_line='79'></method_info>
 			<added_lines>51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79</added_lines>
 			<deleted_lines>51,53,56,57,59,63,64,65,66,67,68,69,70,71,72,73,74,76,77,78,79</deleted_lines>
 		</method>
 		<method name='KFoldIteratorTest::KBatchRandomDataSet::getBatchButK' parameters='k,feat'>
 				<method_info nloc='15' complexity='4' token_count='91' nesting_level='2' start_line='211' end_line='225'></method_info>
 			<added_lines>211,212,214,218,221,224</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<method name='KFoldIteratorTest::KBatchRandomDataSet::getAllBatches' parameters=''>
 				<method_info nloc='3' complexity='1' token_count='8' nesting_level='2' start_line='193' end_line='195'></method_info>
 			<added_lines>193,194</added_lines>
 			<deleted_lines>195</deleted_lines>
 		</method>
 		<method name='KFoldIteratorTest::KBatchRandomDataSet::getBatchK' parameters='k,feat'>
 				<method_info nloc='3' complexity='2' token_count='23' nesting_level='2' start_line='202' end_line='204'></method_info>
 			<added_lines>202,203</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<method name='KFoldIteratorTest::test5974' parameters=''>
 				<method_info nloc='25' complexity='3' token_count='270' nesting_level='1' start_line='230' end_line='258'></method_info>
 			<added_lines>231,232,243,247</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<method name='KFoldIteratorTest::RandomDataSet::getAllFolds' parameters=''>
 				<method_info nloc='3' complexity='1' token_count='8' nesting_level='2' start_line='151' end_line='153'></method_info>
 			<added_lines>153</added_lines>
 			<deleted_lines>151,152</deleted_lines>
 		</method>
 		<method name='KFoldIteratorTest::checkCornerCaseA' parameters=''>
 				<method_info nloc='17' complexity='2' token_count='180' nesting_level='1' start_line='89' end_line='107'></method_info>
 			<added_lines>94,96,99,100,101,102</added_lines>
 			<deleted_lines>89,90,91,98,99,101,102,104</deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines>19,20,32,44,45,46,47,48,49,50,80,81,108,109,154,158,197,198,199,200,201,206,207,208,209,210,227,228</added_lines>
 			<deleted_lines>43,44,80,81,82,109,118</deleted_lines>
 		</modified_lines>
 	</modification>
 </commit>
</bug_data>
