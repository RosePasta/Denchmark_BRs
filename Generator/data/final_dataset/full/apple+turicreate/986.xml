<bug_data>
<bug id='986' author='nickjong' open_date='2018-08-17T01:18:30Z' closed_time='2018-08-27T17:29:57Z'>
 	<summary>Activity classifier data prep computes majority, not mode</summary>
 	<description>
 The activity classifier downsamples the raw data, so that  consecutive rows are assigned the same target classification. To compute the chunk's label from the  raw labels, it performs the &lt;denchmark-link:https://en.wikipedia.org/wiki/Boyer%E2%80%93Moore_majority_vote_algorithm&gt;Boyer-Moore majority vote algorithm&lt;/denchmark-link&gt;
 . However, this algorithm only guarantees that if the data has a majority value (occurs at least  times), then it outputs that value. Otherwise, it outputs an arbitrary element.
 In particular, suppose k = 9 and the raw labels are ABABABABC. Then the Boyer-Moore algorithm outputs C, instead of one of the two modes.
 Since we convert the labels into integers in 0..(num classes - 1), we should just generate a histogram. Computing the mode in this fashion is O(n+k) time and O(k) space, which for small k is just as good as Boyer-Moore's O(n) time and O(1) space.
 	</description>
 	<comments>
 		<comment id='1' author='nickjong' date='2018-08-17T01:20:58Z'>
 		Note that all the comments in src/unity/toolkits/activity_classification/sequence_iterator.cpp refer to the return value from vec_majority_value as the "statistical mode", so mode is clearly what was intended.
 		</comment>
 		<comment id='2' author='nickjong' date='2018-08-17T20:28:31Z'>
 		&lt;denchmark-link:https://github.com/nickjong&gt;@nickjong&lt;/denchmark-link&gt;
  This sounds like it would affect the accuracy of the resulting model - do you have a sense for how much effect it would have?
 		</comment>
 		<comment id='3' author='nickjong' date='2018-08-17T20:42:47Z'>
 		It depends on the data. Honestly, I suspect that this is fine for most datasets most of the time. If the window only has two unique labels, then the algorithm is correct. So it's only wrong if the window has three or more labels, and none are in the majority.
 For example, the HAPT dataset in the user's guide has a prediction window of one second's worth of samples. Then the algorithm could do the wrong thing if the window contains an interval of less than half a second labeled with A, preceded and followed by two distinct labels B and C. You would think that for most domains, you would choose a prediction window whose granularity matches the data labeling granularity to some degree.
 But while I think this may not be a critical bug to fix (AFAICT, we've had it for a while), it should not be hard to implement a fix. The histogram may even be faster than Boyer-Moore, since it involves fewer branch instructions.
 		</comment>
 		<comment id='4' author='nickjong' date='2018-08-19T08:14:20Z'>
 		&lt;denchmark-link:https://github.com/nickjong&gt;@nickjong&lt;/denchmark-link&gt;
  nice catch! I wasn't aware of this disadvantage of Boyre-Moore algorithm.
 &lt;denchmark-link:https://github.com/znation&gt;@znation&lt;/denchmark-link&gt;
  - As Nick has mentioned, this shouldn't really affect the correctness too much (if at all). Most prediction windows are expected to contain a single label, besides transition windows that may have two.
 In the HATP example Nick mentioned - it's not likely that a user has done 3 completely different activities (e.g. walking, running and swimming) within a single second. This probably indicates either wrong data labeling or selecting an inappropriate window size - both of which are errors of a much larger magnitude.
 I would even say that if the histogram solution (which &lt;denchmark-link:https://github.com/abhishekpratapa&gt;@abhishekpratapa&lt;/denchmark-link&gt;
  has already &lt;denchmark-link:https://github.com/apple/turicreate/pull/1005/&gt;implemented&lt;/denchmark-link&gt;
 ) is a bit slower - it might even not be worth it.
 		</comment>
 	</comments>
 </bug>
<commit id='c7bd4544eb17cb540f0147e7721d4327795319cc' author='Abhishek' date='2018-08-21 22:34:27-07:00'>
 	<dmm_unit complexity='0.0' interfacing='0.0' size='1.0'></dmm_unit>
 	<modification change_type='MODIFY' old_name='src\unity\toolkits\activity_classification\sequence_iterator.cpp' new_name='src\unity\toolkits\activity_classification\sequence_iterator.cpp'>
 		<file_info nloc='200' complexity='29' token_count='1297'></file_info>
 		<method name='turi::sdk_model::activity_classification::vec_mode' parameters='input_vec'>
 				<method_info nloc='13' complexity='3' token_count='141' nesting_level='3' start_line='34' end_line='53'></method_info>
 			<added_lines>34,35,37,38,39,40,41,42,43,45,46,48,49,50,51,52</added_lines>
 			<deleted_lines>34,35,37,38,39,40,41,42,43,44,47</deleted_lines>
 		</method>
 		<method name='turi::sdk_model::activity_classification::_activity_classifier_prepare_data_impl' parameters='data,features,session_id,prediction_window,predictions_in_chunk,target,verbose'>
 				<method_info nloc='113' complexity='17' token_count='717' nesting_level='3' start_line='120' end_line='273'></method_info>
 			<added_lines>150,217</added_lines>
 			<deleted_lines>145,212</deleted_lines>
 		</method>
 		<method name='turi::sdk_model::activity_classification::vec_majority_value' parameters='input_vec'>
 				<method_info nloc='16' complexity='4' token_count='86' nesting_level='3' start_line='33' end_line='48'></method_info>
 			<added_lines>33,34,35,37,38,39,40,41,42,43,45,46,48</added_lines>
 			<deleted_lines>33,34,35,37,38,39,40,41,42,43,44,47</deleted_lines>
 		</method>
 		<method name='turi::sdk_model::activity_classification::finalize_chunk' parameters='curr_chunk_features,curr_chunk_targets,curr_window_targets,curr_session_id,output_writer,chunk_size,feature_size,predictions_in_chunk,use_target'>
 				<method_info nloc='37' complexity='5' token_count='210' nesting_level='3' start_line='68' end_line='117'></method_info>
 			<added_lines>91</added_lines>
 			<deleted_lines>86</deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines>8</added_lines>
 			<deleted_lines>27</deleted_lines>
 		</modified_lines>
 	</modification>
 </commit>
</bug_data>
