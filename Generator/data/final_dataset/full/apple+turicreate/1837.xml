<bug_data>
<bug id='1837' author='fbomb111' open_date='2019-05-06T16:52:38Z' closed_time='2019-05-08T08:30:00Z'>
 	<summary>Bounding box errors and troubleshooting when using 'explore'</summary>
 	<description>
 In using the following with my own dataset:
 &lt;denchmark-code&gt;data['image_with_ground_truth'] = \
     tc.object_detector.util.draw_bounding_boxes(data['image'], data['annotations'])
 data.explore()
 &lt;/denchmark-code&gt;
 
 I often get the following error:
 &lt;denchmark-code&gt;/anaconda3/lib/python3.6/site-packages/turicreate/data_structures/sframe.py in &lt;listcomp&gt;(.0)
    2477         assert callable(fn), "Input must be callable"
    2478         test_sf = self[:10]
 -&gt; 2479         dryrun = [fn(row) for row in test_sf]
    2480         if dtype is None:
    2481             dtype = SArray(dryrun).dtype
 
 /anaconda3/lib/python3.6/site-packages/turicreate/toolkits/object_detector/util/_visualization.py in draw_single_image(row)
     140                                     _width=image.shape[1],
     141                                     _height=image.shape[0],
 --&gt; 142                                     _channels=image.shape[2],
     143                                     _format_enum=FORMAT_RAW,
     144                                     _image_data_size=image.size)
 
 IndexError: tuple index out of range
 &lt;/denchmark-code&gt;
 
 There is no indication of which image it failed on, or why (at least to me) it failed which is difficult to troubleshoot.  I ran explore() half-splitting my images until I finally found a culprit.
 Here is the image:
 &lt;denchmark-link:https://user-images.githubusercontent.com/482183/57240833-86c55880-6ffd-11e9-9f09-a3f7cd13fc79.jpg&gt;&lt;/denchmark-link&gt;
 
 And the data in my SFrame for this image:
 &lt;denchmark-code&gt;{'image': Height: 768px
  Width: 1024px
  Channels: 3,
  'name': '5290f4027491d09b',
  'annotations': [{'label': 'Window',
    'coordinates': {'x': 344.514048,
     'y': 252.271488,
     'width': 101.89312000000001,
     'height': 93.66297600000001}},
   {'label': 'Window',
    'coordinates': {'x': 674.277376,
     'y': 240.79296,
     'width': 59.78316799999993,
     'height': 163.097856}},
   {'label': 'Window',
    'coordinates': {'x': 702.357504,
     'y': 203.64288,
     'width': 77.89977599999997,
     'height': 103.29599999999999}}]}
 &lt;/denchmark-code&gt;
 
 Actually data.explore() runs fine unless I run data['image_with_ground_truth'] = \ tc.object_detector.util.draw_bounding_boxes(data['image'], data['annotations']) (taken from the Readme) before it.
 Any assistance would be greatly appreciated.  Also please consider my suggestion of providing a little more feedback about which image failed in this process so they are easier to isolate.  Thank you kindly!
 	</description>
 	<comments>
 		<comment id='1' author='fbomb111' date='2019-05-06T18:06:53Z'>
 		Hi &lt;denchmark-link:https://github.com/fbomb111&gt;@fbomb111&lt;/denchmark-link&gt;
  ,
 Thanks for using and providing great feedback on the Turi Create Object Detector. We created an issue tracking making  provide more helpful debugging information (&lt;denchmark-link:https://github.com/apple/turicreate/issues/1838&gt;#1838&lt;/denchmark-link&gt;
  ).
 Regarding the error you get, let's confirm that this is the image that draw_bounding_boxes failed on. I downloaded the image and ran draw_bounding_boxes on just that image and the annotation you provided and I saw bounding boxes (see attachment). There could be a few possibilities:
 
 There is a bad image in your SFrame (probably the one you attached).
 There is no bad image in your SFrame and there's a bad codepath that gets triggered either on a particular image or on the SFrame as a whole.
 
 Could you run the following code snippet (replace sf, image_column_name, and annotation_column_name) to see if this still points to the same image you attached?
 &lt;denchmark-code&gt;for row in sf.num_rows():
     image = sf[image_column_name][row]
     annotation = sf[annotation_column_name][row]
     try:
         tc.object_detector.util.draw_bounding_boxes(image, annotation)
     except:
         print("Bad image row number:")
         print(row)
         print("Bad image")
         image.show()
 &lt;/denchmark-code&gt;
 
 Let us know what you get when you run this!
 &lt;denchmark-link:https://user-images.githubusercontent.com/14062641/57244400-20d0d500-6fed-11e9-81cf-6ad9d0cdf7d7.png&gt;&lt;/denchmark-link&gt;
 
 		</comment>
 		<comment id='2' author='fbomb111' date='2019-05-06T19:41:17Z'>
 		First off, thank you so much for the idea on how to capture the image names and row!  That helped and led me to find that I was looking at one index after the error index.  So here is the actual image I believe is causing the issue.
 &lt;denchmark-link:https://user-images.githubusercontent.com/482183/57249692-9a7bb980-7013-11e9-98ec-23aa4290404d.jpg&gt;&lt;/denchmark-link&gt;
 
 And it's associated data for that row in the SFrame
 &lt;denchmark-code&gt;{'image': Height: 1024px
  Width: 680px
  Channels: 1,
  'name': '9971996f732fce6e',
  'annotations': [{'label': 'Window',
    'coordinates': {'x': 340.00374,
     'y': 688.01792,
     'width': 679.99252,
     'height': 571.1370239999999}}]}
 &lt;/denchmark-code&gt;
 
 		</comment>
 		<comment id='3' author='fbomb111' date='2019-05-07T06:33:26Z'>
 		&lt;denchmark-link:https://github.com/fbomb111&gt;@fbomb111&lt;/denchmark-link&gt;
  After some investigation, it seems like the  utility cannot support grayscale images. When we try to convert a grayscale image to a Pillow Image and then get the pixel data out, the shape gets registered as (height, width) and we lose the channel dimension, hence the "tuple index out of range" error. I'm working on a fix right now and will update this issue thread with more details. In the meantime, could you try converting all the grayscale images in your SFrame to RGB to visualize the bounding boxes on them?
 		</comment>
 		<comment id='4' author='fbomb111' date='2019-05-07T19:44:14Z'>
 		&lt;denchmark-link:https://github.com/fbomb111&gt;@fbomb111&lt;/denchmark-link&gt;
  Fix is up in &lt;denchmark-link:https://github.com/apple/turicreate/pull/1845&gt;#1845&lt;/denchmark-link&gt;
  !
 		</comment>
 		<comment id='5' author='fbomb111' date='2019-05-07T20:00:53Z'>
 		&lt;denchmark-link:https://github.com/shantanuchhabra&gt;@shantanuchhabra&lt;/denchmark-link&gt;
  Thanks for the fast fix!  I will update and try it out tonight and report back.
 		</comment>
 		<comment id='6' author='fbomb111' date='2019-05-08T19:45:47Z'>
 		&lt;denchmark-link:https://github.com/shantanuchhabra&gt;@shantanuchhabra&lt;/denchmark-link&gt;
  Sorry to bother you, but I am having trouble checking out the latest changes.  Would you suggest:
  to get the latest from master?
 I'm getting some errors I think related to a missing setup.py ?  Still newish to python, just enough to be dangerous.
 &lt;denchmark-code&gt;ERROR: Complete output from command python setup.py egg_info:
  ERROR: Traceback (most recent call last):
    File "&lt;string&gt;", line 1, in &lt;module&gt;
    File "/anaconda3/lib/python3.6/tokenize.py", line 452, in open
      buffer = _builtin_open(filename, 'rb')
  FileNotFoundError: [Errno 2] No such file or directory: '/private/var/folders/1c/whcs34_s7xjc5k2rmthb1v2c0000gq/T/pip-req-build-novgch0f/setup.py'
  ----------------------------------------
 ERROR: Command "python setup.py egg_info" failed with error code 1 in /private/var/folders/1c/whcs34_s7xjc5k2rmthb1v2c0000gq/T/pip-req-build-novgch0f/
 &lt;/denchmark-code&gt;
 
 		</comment>
 		<comment id='7' author='fbomb111' date='2019-05-08T22:27:55Z'>
 		Hi &lt;denchmark-link:https://github.com/fbomb111&gt;@fbomb111&lt;/denchmark-link&gt;
  ,
 I don't think it's possible to pip install a git repository. You could, however, clone from master, build from source, and then work with Turi Create built from source. &lt;denchmark-link:https://github.com/apple/turicreate/blob/master/BUILD.md&gt;Here&lt;/denchmark-link&gt;
  are the steps to make that happen.
 This fix will become available in our next release, which will be in a few weeks. If you don't want to wait for the next release, here is a workaround code snippet to help you convert all the grayscale images in your SFrame to RGB so you can then visualize bounding boxes on them:
 import turicreate as tc
 import numpy as np
 
 def gray2rgb(image):
     # grayscale tc.Image -&gt; RGB tc.Image
     if image.channels == 1:
         rgb_pixel_data = image.pixel_data[..., np.newaxis]
         image_rgb =  np.concatenate(3 * (rgb_pixel_data,), axis=-1)
         FORMAT_RAW = 2
         return tc.Image(_image_data=image_rgb.tobytes(),
                         _width=image_rgb.shape[1],
                         _height=image_rgb.shape[0],
                         _channels=image_rgb.shape[2],
                         _format_enum=FORMAT_RAW,
                         _image_data_size=image_rgb.size)
     return image
 
 # Note: replace sf, "image", and "annotation"
 sf["converted_image"] = sf["image"].apply(gray2rgb)
 
 sf["bbox"] = tc.object_detector.util.draw_bounding_boxes(sf["converted_image"], sf["annotation"])
 Feel free to follow up with more questions!
 		</comment>
 		<comment id='8' author='fbomb111' date='2019-05-11T03:25:47Z'>
 		Thanks for providing such a great work around!  I was finally able to draw all my bounding boxes.
 		</comment>
 	</comments>
 </bug>
<commit id='20705de59e1552a46b9e275f27a75fdb8ff4e232' author='Shantanu Chhabra' date='2019-05-08 01:29:59-07:00'>
 	<dmm_unit complexity='0.0' interfacing='1.0' size='0.0'></dmm_unit>
 	<modification change_type='MODIFY' old_name='src\unity\python\turicreate\toolkits\object_detector\util\_visualization.py' new_name='src\unity\python\turicreate\toolkits\object_detector\util\_visualization.py'>
 		<file_info nloc='107' complexity='18' token_count='947'></file_info>
 		<method name='draw_bounding_boxes' parameters='images,annotations,confidence_threshold'>
 				<method_info nloc='11' complexity='3' token_count='102' nesting_level='0' start_line='95' end_line='164'></method_info>
 			<added_lines>141,142,143</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<method name='draw_bounding_boxes.draw_single_image' parameters='row'>
 				<method_info nloc='26' complexity='6' token_count='193' nesting_level='1' start_line='129' end_line='156'></method_info>
 			<added_lines>141,142,143</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines></added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 </commit>
</bug_data>
