<bug_data>
<bug id='2833' author='guihao-liang' open_date='2019-12-10T18:50:29Z' closed_time='2019-12-18T19:53:21Z'>
 	<summary>OD: invalid coordinate value gets no error and make it through</summary>
 	<description>
 &lt;denchmark-link:https://github.com/apple/turicreate/issues/2830&gt;#2830&lt;/denchmark-link&gt;
 
 same repro, except change the func into:
 &lt;denchmark-code&gt; 39 def func(x):
  40     for y in x:
  41         # y["coordinates"]['x'] = None # y["coordinates"]['y'] = None
  42         y["coordinates"]['width'] = None
  43         y["coordinates"]['height'] = None
  44     return x
 &lt;/denchmark-code&gt;
 
 feel free to play with it.
 	</description>
 	<comments>
 		<comment id='1' author='guihao-liang' date='2019-12-10T18:50:58Z'>
 		hmmmm cool ;)
 		</comment>
 		<comment id='2' author='guihao-liang' date='2019-12-10T20:28:18Z'>
 		&lt;denchmark-code&gt;+--------------+--------------+--------------+
 | Iteration    | Loss         | Elapsed Time |
 +--------------+--------------+--------------+
 | 1            | 4.39937      | 2.92s        |
 | 2            | 4.5508       | 3.53s        |
 | 3            | 4.50975      | 4.63s        |
 | 4            | 4.43646      | 5.56s        |
 | 5            | 4.30856      | 6.29s        |
 | 6            | 4.39513      | 7.02s        |
 | 11           | 4.18712      | 10.68s       |
 | 16           | 4.43339      | 14.34s       |
 | 21           | 4.43974      | 18.50s       |
 | 26           | 3.96112      | 22.16s       |
 | 31           | 3.98385      | 25.81s       |
 | 36           | 3.64385      | 29.48s       |
 | 41           | 3.83445      | 34.50s       |
 | 46           | 4.22252      | 38.24s       |
 | 51           | 3.56531      | 43.04s       |
 | 56           | 4.0538       | 46.69s       |
 | 61           | 3.85165      | 51.21s       |
 | 66           | 3.63041      | 54.87s       |
 | 71           | 3.45167      | 58.53s       |
 | 76           | 3.37094      | 1m 2s        |
 | 81           | 3.50457      | 1m 6s        |
 | 86           | 3.10482      | 1m 10s       |
 | 91           | 3.43324      | 1m 13s       |
 | 96           | 3.18027      | 1m 17s       |
 | 100          | 3.40443      | 1m 20s       |
 +--------------+--------------+--------------+
 &lt;/denchmark-code&gt;
 
 haha interesting ;)
 		</comment>
 		<comment id='3' author='guihao-liang' date='2019-12-10T22:11:18Z'>
 		I bet the missing value is skipped. Check the log while you run this code snippet. If there's a log associated with it, it should be better we can surface it to users.
 what you need to do is to get the log file location of current running python process
 &lt;denchmark-code&gt;tc.config.get_server_log_location()
 &lt;/denchmark-code&gt;
 
 don't close the process. At the same time,
 &lt;denchmark-code&gt;tail -f &lt;log&gt;
 &lt;/denchmark-code&gt;
 
 and run the repro code. In this way, you can check whether the missing value is logged or not.
 		</comment>
 		<comment id='4' author='guihao-liang' date='2019-12-10T22:12:22Z'>
 		None is converted to 0 in data iterator. nvm it is a easy fix.
 		</comment>
 		<comment id='5' author='guihao-liang' date='2019-12-10T22:16:06Z'>
 		
 None is converted to 0 in the data iterator. nvm, it is an easy fix.
 
 Okay, it should be an easy fix in the documentation to mention how None is treated under a certain context. It's reasonable to set None as 0 for width and height but not for x and y. You can surface it to the user to let them know None is treated as zero during runtime so they can choose to stop the training process and call dropna first.
 		</comment>
 		<comment id='6' author='guihao-liang' date='2019-12-10T22:18:11Z'>
 		
 
 None is converted to 0 in the data iterator. nvm, it is an easy fix.
 
 Okay, it should be an easy fix in the documentation to mention how None is treated under a certain context. It's reasonable to set None as 0 for width and height but not for x and y. You can surface it to the user to let them know None is treated as zero during runtime so they can choose to stop the training process and call dropna first.
 
 hmmmm I don't think either this 4 number should be None,
 if width and height is 0 that means the bounding box is invalid.
 		</comment>
 		<comment id='7' author='guihao-liang' date='2019-12-10T22:19:11Z'>
 		
 
 
 None is converted to 0 in the data iterator. nvm, it is an easy fix.
 
 Okay, it should be an easy fix in the documentation to mention how None is treated under a certain context. It's reasonable to set None as 0 for width and height but not for x and y. You can surface it to the user to let them know None is treated as zero during runtime so they can choose to stop the training process and call dropna first.
 
 hmmmm I don't think either this 4 number should be None,
 if width and height is 0 that means the bounding box is invalid.
 
 it could mean there's no bounding box?
 		</comment>
 	</comments>
 </bug>
<commit id='b6d90beb55a209b24ecc5900d765d9eb7b6b2c9c' author='Henry Tao' date='2019-12-18 11:53:05-08:00'>
 	<dmm_unit complexity='0.75' interfacing='0.75' size='0.0'></dmm_unit>
 	<modification change_type='MODIFY' old_name='src\python\turicreate\test\test_object_detector.py' new_name='src\python\turicreate\test\test_object_detector.py'>
 		<file_info nloc='402' complexity='57' token_count='3934'></file_info>
 		<method name='test_create_with_invalid_annotations_coordinate' parameters='self'>
 				<method_info nloc='21' complexity='1' token_count='307' nesting_level='1' start_line='182' end_line='205'></method_info>
 			<added_lines>182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205</added_lines>
 			<deleted_lines>189,190,191,192,193,194,195,196,197,198</deleted_lines>
 		</method>
 		<method name='test_evaluate_with_missing_annotations_label' parameters='self'>
 				<method_info nloc='7' complexity='1' token_count='56' nesting_level='1' start_line='361' end_line='373'></method_info>
 			<added_lines>369,370,371,372,373</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<method name='test_create_with_missing_annotations_label' parameters='self'>
 				<method_info nloc='7' complexity='1' token_count='56' nesting_level='1' start_line='208' end_line='219'></method_info>
 			<added_lines>215,216,217,218,219</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines>206,207</added_lines>
 			<deleted_lines>348,349,350,351,352,353,354,355</deleted_lines>
 		</modified_lines>
 	</modification>
 	<modification change_type='MODIFY' old_name='src\toolkits\object_detection\od_data_iterator.cpp' new_name='src\toolkits\object_detection\od_data_iterator.cpp'>
 		<file_info nloc='298' complexity='61' token_count='2007'></file_info>
 		<method name='turi::object_detection::parse_annotations' parameters='flex_annotations,image_width,image_height,class_to_index_map,annotation_origin,annotation_scale,annotation_position'>
 				<method_info nloc='113' complexity='31' token_count='735' nesting_level='3' start_line='83' end_line='255'></method_info>
 			<added_lines>128,129,130,131,132,133,134,135</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines></added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 </commit>
</bug_data>
