<bug_data>
<bug id='127' author='AndyShih12' open_date='2020-07-28T08:19:01Z' closed_time='2020-07-29T19:19:42Z'>
 	<summary>Entropy log-prob estimation</summary>
 	<description>
 I think this line should be negated, since entropy_loss should store the negated entropy.
 
 
 
 stable-baselines3/stable_baselines3/ppo/ppo.py
 
 
          Line 201
       in
       bd2aae0
 
 
 
 
 
 
  entropy_loss = -log_prob.mean() 
 
 
 
 
 
 	</description>
 	<comments>
 		<comment id='1' author='AndyShih12' date='2020-07-28T08:25:50Z'>
 		Hello,
 nice catch ;)
 In fact, we have a test for that:
 
 
 
 stable-baselines3/tests/test_distributions.py
 
 
          Line 89
       in
       bd2aae0
 
 
 
 
 
 
  assert th.allclose(entropy.mean(), -log_prob.mean(), rtol=5e-3) 
 
 
 
 
 
 We would appreciate a PR that solve that issue ;) (for A2C too)
 		</comment>
 		<comment id='2' author='AndyShih12' date='2020-07-28T10:02:59Z'>
 		I guess there is a misunderstanding, we mean that in
 
 
 
 stable-baselines3/stable_baselines3/ppo/ppo.py
 
 
          Line 207
       in
       bd2aae0
 
 
 
 
 
 
  loss = policy_loss + self.ent_coef * entropy_loss + self.vf_coef * value_loss 
 
 
 
 
 
 this loss is designed to maximize the entropy of the policy in the meanwhile, so the entropy should be subtract from the policy loss and the value function loss
 the following 2 lines are right because it computes the negative entropy
 
 
 
 stable-baselines3/stable_baselines3/ppo/ppo.py
 
 
         Lines 202 to 203
       in
       bd2aae0
 
 
 
 
 
 
  else: 
 
 
 
  entropy_loss = -th.mean(entropy) 
 
 
 
 
 
 but the following 2 lines computes the entropy
 
 
 
 stable-baselines3/stable_baselines3/ppo/ppo.py
 
 
         Lines 199 to 201
       in
       bd2aae0
 
 
 
 
 
 
  if entropy is None: 
 
 
 
  # Approximate entropy when no analytical form 
 
 
 
  entropy_loss = -log_prob.mean() 
 
 
 
 
 
 		</comment>
 		<comment id='3' author='AndyShih12' date='2020-07-28T10:11:23Z'>
 		Yup, we understood it this way from the original post. A PR to fix this issue would welcome, along with similar fix for A2C :)
 		</comment>
 	</comments>
 </bug>
<commit id='8f9aaaebe9909c38622c429f1b82e1af39fdbb24' author='Andy Shih' date='2020-07-29 21:19:41+02:00'>
 	<dmm_unit complexity='None' interfacing='None' size='None'></dmm_unit>
 	<modification change_type='MODIFY' old_name='docs\misc\changelog.rst' new_name='docs\misc\changelog.rst'>
 		<file_info nloc='None' complexity='None' token_count='None'></file_info>
 		<modified_lines>
 			<added_lines>35,361</added_lines>
 			<deleted_lines>360</deleted_lines>
 		</modified_lines>
 	</modification>
 	<modification change_type='MODIFY' old_name='stable_baselines3\a2c\a2c.py' new_name='stable_baselines3\a2c\a2c.py'>
 		<file_info nloc='156' complexity='8' token_count='860'></file_info>
 		<method name='train' parameters='self'>
 				<method_info nloc='35' complexity='6' token_count='348' nesting_level='1' start_line='111' end_line='167'></method_info>
 			<added_lines>144</added_lines>
 			<deleted_lines>144</deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines></added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 	<modification change_type='MODIFY' old_name='stable_baselines3\ppo\ppo.py' new_name='stable_baselines3\ppo\ppo.py'>
 		<file_info nloc='211' complexity='17' token_count='1275'></file_info>
 		<method name='train' parameters='self'>
 				<method_info nloc='69' complexity='12' token_count='692' nesting_level='1' start_line='133' end_line='240'></method_info>
 			<added_lines>201</added_lines>
 			<deleted_lines>201</deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines></added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 </commit>
</bug_data>
