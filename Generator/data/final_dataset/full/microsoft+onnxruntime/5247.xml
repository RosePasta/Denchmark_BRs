<bug_data>
<bug id='5247' author='fdwr' open_date='2020-09-22T03:15:38Z' closed_time='2020-09-23T05:01:10Z'>
 	<summary>lp_norm CPU operator leaves output element uninitialized when 0 norm.</summary>
 	<description>
 Describe the bug
 LpNorm leaves some output tensor elements unwritten if the norm is 0 (leaving random values), but it should write every output element, either 0 or NaN. When comparing GPU vs CPU paths, I was getting 0 in the DML GPU but 0xCDCDCDCD for the CPU ðŸ¤¨, which was from this line:
 \onnxruntime\core\providers\cpu\nn\lp_norm.cc
 void DoNormalizeP1(
     const float* xData,
     float* yData,
     const int64_t m,
     const int64_t n,
     const int64_t sf) {
   for (int i = 0; i &lt; n; ++i) {
     auto base = (i / sf) * sf * m + (i % sf);
     ConstStridedVec xVec(xData + base, 1, m, InnerStride(sf));
     auto norm = xVec.template lpNorm&lt;1&gt;();
 &gt;&gt;&gt; if (norm != 0) {
       StridedVec yVec(yData + base, 1, m, InnerStride(sf));
 &gt;&gt;&gt;   yVec = xVec / norm;
     }
   }
 };
 Repro:
     // P = 1. 2D. Axis 0.
     {
       "op_type": "LpNormalization",
       "axis": 0,
       "p": 1,
       "input":  [[1, 0, 3, 2],
                  [0, 0, 0, 2]],
       "output": [[1, 0, 1, 0.5],
                  [0, 0, 0, 0.5]],
       "T": "float32"
     },
 Expected output:
 &lt;denchmark-code&gt;Expected outputs:
     float32 output[2,4]:
         [0]/[0,0]: 1 (0x3F800000)
         [1]/[0,1]: 0 (0x00000000)
         [2]/[0,2]: 1 (0x3F800000)
         [3]/[0,3]: 0.5 (0x3F000000)
         [4]/[1,0]: 0 (0x00000000)
         [5]/[1,1]: 0 (0x00000000)
         [6]/[1,2]: 0 (0x00000000)
         [7]/[1,3]: 0.5 (0x3F000000)
 Actual outputs:
     float32 output[2,4]:
         [0]/[0,0]: 1 (0x3F800000)
         [1]/[0,1]: -4.31602e+08 (0xCDCDCDCD) &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;
         [2]/[0,2]: 1 (0x3F800000)
         [3]/[0,3]: 0.5 (0x3F000000)
         [4]/[1,0]: 0 (0x00000000)
         [5]/[1,1]: -4.31602e+08 (0xCDCDCDCD) &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;
         [6]/[1,2]: 0 (0x00000000)
         [7]/[1,3]: 0.5 (0x3F000000)
 &lt;/denchmark-code&gt;
 
 Urgency
 Not urgent. We've disabled the test case on our side for ORT 1.5.
 System information
 
 OS Platform and Distribution: Windows 10 latest
 ONNX Runtime installed from (source or binary): source
 ONNX Runtime version: master 2020-09-21
 Python version: NA
 Visual Studio version (if applicable): Visual Studio 2017
 GCC/Compiler version (if compiling from source): NA
 CUDA/cuDNN version: NA
 GPU model and memory: NA
 
 To Reproduce
 &lt;denchmark-code&gt;ir_version: 4
 producer_name: "OnnxConformanceTest"
 graph {
   node {
     input: "input"
     output: "output"
     op_type: "LpNormalization"
     attribute {
       name: "axis"
       i: 0
       type: INT
     }
     attribute {
       name: "p"
       i: 1
       type: INT
     }
     domain: ""
   }
   name: "LpNormalization_1"
   input {
     name: "input"
     type {
       tensor_type {
         elem_type: FLOAT
         shape {
           dim {
             dim_value: 2
           }
           dim {
             dim_value: 4
           }
         }
       }
     }
   }
   output {
     name: "output"
     type {
       tensor_type {
         elem_type: FLOAT
         shape {
           dim {
             dim_value: 2
           }
           dim {
             dim_value: 4
           }
         }
       }
     }
   }
 }
 opset_import {
   domain: ""
   version: 1
 }
 opset_import {
   domain: ""
   version: 7
 }
 &lt;/denchmark-code&gt;
 
 Expected behavior
 0 or NaN, but all elements written.
 	</description>
 	<comments>
 	</comments>
 </bug>
<commit id='75d994f1940444022bc22127c87f56636df884a6' author='Hariharan Seshadri' date='2020-09-22 22:01:09-07:00'>
 	<dmm_unit complexity='1.0' interfacing='0.8260869565217391' size='0.8260869565217391'></dmm_unit>
 	<modification change_type='MODIFY' old_name='onnxruntime\core\providers\cpu\nn\lp_norm.cc' new_name='onnxruntime\core\providers\cpu\nn\lp_norm.cc'>
 		<file_info nloc='65' complexity='9' token_count='565'></file_info>
 		<method name='onnxruntime::DoNormalizeP1' parameters='xData,yData,m,n,sf'>
 				<method_info nloc='18' complexity='3' token_count='130' nesting_level='1' start_line='40' end_line='59'></method_info>
 			<added_lines>49,50,54,55,56</added_lines>
 			<deleted_lines>47</deleted_lines>
 		</method>
 		<method name='onnxruntime::DoNormalizeP2' parameters='xData,yData,m,n,sf'>
 				<method_info nloc='18' complexity='3' token_count='130' nesting_level='1' start_line='19' end_line='38'></method_info>
 			<added_lines>28,29,33,34,35</added_lines>
 			<deleted_lines>30</deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines></added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 	<modification change_type='MODIFY' old_name='onnxruntime\test\providers\cpu\nn\lp_norm_op_test.cc' new_name='onnxruntime\test\providers\cpu\nn\lp_norm_op_test.cc'>
 		<file_info nloc='107' complexity='6' token_count='1338'></file_info>
 		<method name='onnxruntime::test::TEST' parameters='LpNormalizationTest,L1NormalizationWithZeroNorm'>
 				<method_info nloc='10' complexity='1' token_count='123' nesting_level='2' start_line='110' end_line='123'></method_info>
 			<added_lines>110,111,112,113,114,115,116,117,118,119,120,121,122,123</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<method name='onnxruntime::test::TEST' parameters='LpNormalizationTest,L2NormalizationWithZeroNorm'>
 				<method_info nloc='9' complexity='1' token_count='108' nesting_level='2' start_line='125' end_line='137'></method_info>
 			<added_lines>125,126,127,128,129,130,131,132,133,134,135,136,137</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines>124,138</added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 </commit>
</bug_data>
