<bug_data>
<bug id='3071' author='slevental' open_date='2020-02-22T00:55:15Z' closed_time='2020-02-25T18:43:11Z'>
 	<summary>Using Java library with DNNL</summary>
 	<description>
 Describe the bug
 I've compiled java jar with options:
 ./build.sh --use_dnnl --use_openmp  --build_java --parallel --config RelWithDebInfo
 At the end, I've used onnxruntime4j-1.1.0-with-binaries.jar in my java application; but after trying some of the benchmarks and analyzing model exec with profiler I've noticed that DNNL is not in the call stack and MLAS is used instead;
 I've found an option:
 &lt;denchmark-code&gt;var opts = new OrtSession.SessionOptions()
 opts.addDnnl(true);
 &lt;/denchmark-code&gt;
 
 which gives me an error:
 &lt;denchmark-code&gt;ai.onnxruntime.OrtException: Error code - ORT_INVALID_ARGUMENT - message: This binary was not compiled with DNNL support.
 	at ai.onnxruntime.OrtSession$SessionOptions.addDnnl(Native Method)
 &lt;/denchmark-code&gt;
 
 Is this the way of turning DNNL in java env or I'm doing something wrong?
 Urgency
 Actually this blocks an integration of ONNX runtime into one of our production services;
 System information
 
 OS Platform and Distribution (e.g., Linux Ubuntu 16.04): macOS
 ONNX Runtime installed from (source or binary): source
 ONNX Runtime version: 1.1.0
 Python version: 3.7
 Visual Studio version (if applicable): n/a
 GCC/Compiler version (if compiling from source): clang Apple LLVM version 10.0.1 (clang-1001.0.46.4)
 CUDA/cuDNN version: n/a
 GPU model and memory: n/a
 
 To Reproduce
 see above
 	</description>
 	<comments>
 		<comment id='1' author='slevental' date='2020-02-22T01:10:16Z'>
 		It's a bug.
 &lt;denchmark-code&gt;if (onnxruntime_USE_DNNL)
   target_compile_definitions(onnxruntime_pybind11_state PRIVATE USE_DNNL=1)
 endif()
 &lt;/denchmark-code&gt;
 
 We need to have the similar thing on the jni project.
 		</comment>
 		<comment id='2' author='slevental' date='2020-02-23T20:07:54Z'>
 		&lt;denchmark-link:https://github.com/slevental&gt;@slevental&lt;/denchmark-link&gt;
  As the developer on MLAS, I'm curious about the model architecture used here where DNNL is faster than the out of box experience with MLAS. Let me know if you'd be willing to share any info about the model to help improve MLAS.
 		</comment>
 		<comment id='3' author='slevental' date='2020-02-24T19:32:42Z'>
 		&lt;denchmark-link:https://github.com/tracysh&gt;@tracysh&lt;/denchmark-link&gt;
  model that we are using is Seq2Seq with LSTM encoder/decoder; I'm not sure that DNNL is faster - I'm trying to conduct a comparison using java but it seems that DNNL doesn't work there; If you have any benchmarks on MLAS vs DNNL for LSTM-RNN - I would appreciate it; also interesting to hear what CPU optimizations are possible for these model architectures; I was thinking about quantization to INT8 for instance
 		</comment>
 		<comment id='4' author='slevental' date='2020-02-24T19:59:42Z'>
 		&lt;denchmark-link:https://github.com/slevental&gt;@slevental&lt;/denchmark-link&gt;
  if you checkout the branch referenced in my PR (&lt;denchmark-link:https://github.com/microsoft/onnxruntime/pull/3082&gt;#3082&lt;/denchmark-link&gt;
 ) you can build the Java package with DNNL support.
 		</comment>
 		<comment id='5' author='slevental' date='2020-02-25T03:28:35Z'>
 		&lt;denchmark-link:https://github.com/snnn&gt;@snnn&lt;/denchmark-link&gt;
  now when I'm doing the same build using the most recent master (as well as using the PR you had sent) I'm constantly getting an error on a linking stage:
 &lt;denchmark-code&gt;Undefined symbols for architecture x86_64:
   "onnxruntime::CreateExecutionProviderFactory_Dnnl(int)", referenced from:
       onnxruntime::test::DefaultDnnlExecutionProvider(bool) in libonnxruntime_test_utils.a(default_providers.cc.o)
 ld: symbol(s) not found for architecture x86_64
 clang: error: linker command failed with exit code 1 (use -v to see invocation)
 make[2]: *** [onnxruntime_test_all] Error 1
 &lt;/denchmark-code&gt;
 
 Not sure what's the reason. It seems that CI is working, but I'm curious if CI contains --build_java  with --use_dnnl
 		</comment>
 		<comment id='6' author='slevental' date='2020-02-25T17:02:37Z'>
 		I've upgraded cmake and re-cloned everything; and the problem went away - not sure what was the reason; I had to do this first, before submitting a comment, sorry for bothering;
 		</comment>
 		<comment id='7' author='slevental' date='2020-02-25T18:43:11Z'>
 		Thank you for confirming.
 		</comment>
 		<comment id='8' author='slevental' date='2020-10-27T21:39:25Z'>
 		I'm also getting a link error:
 &lt;denchmark-code&gt;java.lang.UnsatisfiedLinkError at InferenceTest.java:1295
 &lt;/denchmark-code&gt;
 
 when using both --build_java and --use_dnnl, building from master on Ubuntu 20.04 / gcc-9.
 &lt;denchmark-link:https://github.com/Craigacp&gt;@Craigacp&lt;/denchmark-link&gt;
  would you mind looking into it?
 		</comment>
 		<comment id='9' author='slevental' date='2020-10-27T21:59:44Z'>
 		What library is the link error coming out of? And what does ldd output for the two so files that should be packaged into the jar?
 		</comment>
 		<comment id='10' author='slevental' date='2020-10-27T23:03:57Z'>
 		Full error is:
 &lt;denchmark-code&gt;  &lt;failure message="java.lang.UnsatisfiedLinkError: /tmp/onnxruntime-java4622990253883325212/libonnxruntime.so: /snap/core18/current/lib/x86_64-linux-gnu/libm.so.6: version `GLIBC_2.29' not found (required by /tmp/onnxruntime-java4622990253883325212/libonnxruntime.so)" type="java.lang.UnsatisfiedLinkError"&gt;java.lang.UnsatisfiedLinkError: /tmp/onnxruntime-java4622990253883325212/libonnxruntime.so: /snap/core18/current/lib/x86_64-linux-gnu/libm.so.6: version `GLIBC_2.29' not found (required by /tmp/onnxruntime-java4622990253883325212/libonnxruntime.so)
 &lt;/denchmark-code&gt;
 
 My glibc version is 2.31. Should be ok, no?
 		</comment>
 		<comment id='11' author='slevental' date='2020-10-28T00:08:48Z'>
 		ldd output:
 &lt;denchmark-code&gt;$ ldd libonnxruntime.so 
 	linux-vdso.so.1 (0x00007ffc37f07000)
 	libdl.so.2 =&gt; /lib/x86_64-linux-gnu/libdl.so.2 (0x00007f5e75e8e000)
 	libpthread.so.0 =&gt; /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007f5e75e6b000)
 	libstdc++.so.6 =&gt; /lib/x86_64-linux-gnu/libstdc++.so.6 (0x00007f5e75c8a000)
 	libm.so.6 =&gt; /lib/x86_64-linux-gnu/libm.so.6 (0x00007f5e75b3b000)
 	libgcc_s.so.1 =&gt; /lib/x86_64-linux-gnu/libgcc_s.so.1 (0x00007f5e75b20000)
 	libc.so.6 =&gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007f5e7592c000)
 	/lib64/ld-linux-x86-64.so.2 (0x00007f5e7687e000)
 &lt;/denchmark-code&gt;
 
 and
 &lt;denchmark-code&gt;$ ldd libonnxruntime4j_jni.so 
 	linux-vdso.so.1 (0x00007fff3aff9000)
 	libonnxruntime.so.1.5.2 =&gt; /home/selvelrel/dev/onnxruntime/build/Linux/RelWithDebInfo/libonnxruntime.so.1.5.2 (0x00007f15ae204000)
 	libc.so.6 =&gt; /lib/x86_64-linux-gnu/libc.so.6 (0x00007f15adffb000)
 	libdl.so.2 =&gt; /lib/x86_64-linux-gnu/libdl.so.2 (0x00007f15adff5000)
 	libpthread.so.0 =&gt; /lib/x86_64-linux-gnu/libpthread.so.0 (0x00007f15adfd2000)
 	libstdc++.so.6 =&gt; /lib/x86_64-linux-gnu/libstdc++.so.6 (0x00007f15addf1000)
 	libm.so.6 =&gt; /lib/x86_64-linux-gnu/libm.so.6 (0x00007f15adca0000)
 	libgcc_s.so.1 =&gt; /lib/x86_64-linux-gnu/libgcc_s.so.1 (0x00007f15adc85000)
 	/lib64/ld-linux-x86-64.so.2 (0x00007f15aebe5000)
 &lt;/denchmark-code&gt;
 
 		</comment>
 		<comment id='12' author='slevental' date='2020-10-28T01:45:36Z'>
 		Why is ldd pulling things out of /lib/ and the libm failure is happening inside a snap? Do you have a custom library path (or is the onnx runtime being packaged inside a snap)?
 I'll try to replicate this tomorrow.
 Edit: seems like it might be snap related, there are a bunch of other issues with similar glibc errors -&lt;denchmark-link:https://bugs.launchpad.net/snapcraft/+bug/1889409&gt;https://bugs.launchpad.net/snapcraft/+bug/1889409&lt;/denchmark-link&gt;
 . The snap maintainers note that it's usually an issue with the snap packaging, but as onnx runtime isn't a snap I'm not sure how snap gets involved.
 		</comment>
 		<comment id='13' author='slevental' date='2020-10-28T13:36:04Z'>
 		ahh, I see. No need to try to replicate, thanks.
 I'm not usually a gradle user, nor snap. The standard version in the Ubuntu repos didn't meet your recommended version, so I tried snapping it, thought it would be smart enough to jive with apt, guess not. Clearly there is a version conflict going on, I'll clean things up.
 		</comment>
 		<comment id='14' author='slevental' date='2020-10-28T15:59:43Z'>
 		Ok. We can look into it if it turns out to be an issue somewhere in ORT.
 		</comment>
 		<comment id='15' author='slevental' date='2020-10-28T16:35:29Z'>
 		build &amp; test works now. Noticed the dnnl lib is still not packed in, but with some path magic I was able to test the DNNL provider, thanks.
 		</comment>
 		<comment id='16' author='slevental' date='2020-10-28T16:55:00Z'>
 		Yeah, nobody checked the Java packaging when they broke DNNL out into a separate shared library. I only noticed that had happened yesterday when I started to dig into this. &lt;denchmark-link:https://github.com/faxu&gt;@faxu&lt;/denchmark-link&gt;
  is there a way we can get the Java API added to the list of things that people check when they make shared library packaging changes? I noticed that Python and nuget got updated, but I didn't know about it and no-one in MS checked that the Java packaging would include the necessary extra shared library to make DNNL work.
 		</comment>
 	</comments>
 </bug>
<commit id='b23b7f0fea6c12d149d1825f49b78ababd61eabf' author='Adam Pocock' date='2020-02-24 15:47:26-08:00'>
 	<dmm_unit complexity='None' interfacing='None' size='None'></dmm_unit>
 	<modification change_type='MODIFY' old_name='cmake\onnxruntime_java.cmake' new_name='cmake\onnxruntime_java.cmake'>
 		<file_info nloc='None' complexity='None' token_count='None'></file_info>
 		<modified_lines>
 			<added_lines>53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,96</added_lines>
 			<deleted_lines>72</deleted_lines>
 		</modified_lines>
 	</modification>
 	<modification change_type='MODIFY' old_name='java\README.md' new_name='java\README.md'>
 		<file_info nloc='None' complexity='None' token_count='None'></file_info>
 		<modified_lines>
 			<added_lines>36,37,38,39,43,44,45</added_lines>
 			<deleted_lines>36,37,38,39,43,44,45</deleted_lines>
 		</modified_lines>
 	</modification>
 	<modification change_type='MODIFY' old_name='java\build.gradle' new_name='java\build.gradle'>
 		<file_info nloc='None' complexity='None' token_count='None'></file_info>
 		<modified_lines>
 			<added_lines>42,43</added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 </commit>
</bug_data>
