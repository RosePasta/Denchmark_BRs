<bug_data>
<bug id='531' author='josh146' open_date='2020-03-05T07:19:45Z' closed_time='2020-04-02T14:58:03Z'>
 	<summary>`default.qubit`  returns analytic probabilities when `analytic=False`</summary>
 	<description>
 Currently, when qml.probs() is returned from a QNode, the QubitDevice.probability() abstract method is returned directly to the user.
 For hardware-like devices that don't support analytic mode, this should behave as expected; the probability will be computed on the device by binning the generated computational basis samples.
 However, for analytic devices, such as default.qubit, care must be taken here. Currently, there is a bug in DefaultQubit.probability(), in that the analytic probability is always returned, regardless what the value of device.analytic is:
 def probability(self, wires=None):
     if self._state is None:
         return None
 
     wires = wires or range(self.num_wires)
     prob = self.marginal_prob(np.abs(self._state) ** 2, wires)
     return prob
 This should be modified as follows:
 def probability(self, wires=None):
     if self._state is None:
         return None
 
     wires = wires or range(self.num_wires)
 
     if self.analytic:
         prob = self.marginal_prob(np.abs(self._state) ** 2, wires)
         return prob
 
     # non-analytic mode, estimate the probability from the generated samples
 
     # consider only the requested wires
     wires = np.hstack(wires)
     samples = self._samples[:, np.array(wires)]
 
     # convert samples from a list of 0, 1 integers,
     # to base 10 representation
     unraveled_indices = [2] * len(wires)
     indices = np.ravel_multi_index(samples.T, unraveled_indices)
 
     # count the basis state occurrences, and construct
     # the probability vector
     basis_states, counts = np.unique(indices, return_counts=True)
     prob = np.zeros([len(wires)**2], dtype=np.float64)
     prob[basis_states] = counts/self.shots
     return prob
 	</description>
 	<comments>
 	</comments>
 </bug>
<commit id='c7ac33fa3996665a96cf2672d8482188211af097' author='Theodor' date='2020-04-02 10:58:01-04:00'>
 	<dmm_unit complexity='1.0' interfacing='0.5925925925925926' size='0.9444444444444444'></dmm_unit>
 	<modification change_type='MODIFY' old_name='.github\CHANGELOG.md' new_name='.github\CHANGELOG.md'>
 		<file_info nloc='None' complexity='None' token_count='None'></file_info>
 		<modified_lines>
 			<added_lines>224,225,226,227,244</added_lines>
 			<deleted_lines>240</deleted_lines>
 		</modified_lines>
 	</modification>
 	<modification change_type='MODIFY' old_name='pennylane\_qubit_device.py' new_name='pennylane\_qubit_device.py'>
 		<file_info nloc='224' complexity='35' token_count='994'></file_info>
 		<method name='generate_samples' parameters='self'>
 				<method_info nloc='22' complexity='2' token_count='54' nesting_level='1' start_line='267' end_line='293'></method_info>
 			<added_lines>283,284,285,286,287,288,289,290,291</added_lines>
 			<deleted_lines>283</deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines></added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 	<modification change_type='MODIFY' old_name='pennylane\plugins\default_qubit.py' new_name='pennylane\plugins\default_qubit.py'>
 		<file_info nloc='177' complexity='30' token_count='1118'></file_info>
 		<method name='estimate_probability' parameters='self,wires'>
 				<method_info nloc='9' complexity='1' token_count='102' nesting_level='1' start_line='253' end_line='269'></method_info>
 			<added_lines>253,254,255,256,257,258,259,260,261,262,263,264,265,266,267,268,269</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<method name='analytic_probability' parameters='self,wires'>
 				<method_info nloc='6' complexity='3' token_count='50' nesting_level='1' start_line='243' end_line='251'></method_info>
 			<added_lines>243,244,249</added_lines>
 			<deleted_lines>243</deleted_lines>
 		</method>
 		<method name='probability' parameters='self,wires'>
 				<method_info nloc='5' complexity='3' token_count='42' nesting_level='1' start_line='271' end_line='277'></method_info>
 			<added_lines>271,272,273,274,275,276,277</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines>252,270</added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 	<modification change_type='MODIFY' old_name='tests\conftest.py' new_name='tests\conftest.py'>
 		<file_info nloc='111' complexity='28' token_count='784'></file_info>
 		<method name='mock_qubit_device' parameters='monkeypatch'>
 				<method_info nloc='7' complexity='1' token_count='68' nesting_level='0' start_line='176' end_line='184'></method_info>
 			<added_lines>176,177,178,179,180,181,182,183,184</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines>175,185</added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 	<modification change_type='MODIFY' old_name='tests\test_default_qubit.py' new_name='tests\test_default_qubit.py'>
 		<file_info nloc='1224' complexity='93' token_count='19350'></file_info>
 		<method name='test_probability' parameters='self,x,tol'>
 				<method_info nloc='9' complexity='1' token_count='129' nesting_level='1' start_line='1624' end_line='1640'></method_info>
 			<added_lines>1624,1625,1626,1627,1628,1629,1630,1631,1632,1633,1634,1635,1636,1637,1638,1639,1640</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<method name='test_call_generate_samples_no_analytic_fn' parameters='self,analytic,mock_qubit_device,monkeypatch'>
 				<method_info nloc='7' complexity='1' token_count='65' nesting_level='1' start_line='1658' end_line='1672'></method_info>
 			<added_lines>1658,1659,1660,1661,1662,1663,1664,1665,1666,1667,1668,1669,1670,1671,1672</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<method name='test_probability.circuit' parameters='x'>
 				<method_info nloc='5' complexity='1' token_count='56' nesting_level='2' start_line='1629' end_line='1633'></method_info>
 			<added_lines>1629,1630,1631,1632,1633</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<method name='test_call_generate_samples' parameters='self,analytic,monkeypatch'>
 				<method_info nloc='6' complexity='1' token_count='54' nesting_level='1' start_line='1643' end_line='1654'></method_info>
 			<added_lines>1643,1644,1645,1646,1647,1648,1649,1650,1651,1652,1653,1654</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<method name='mock_analytic_counter' parameters='self,wires'>
 				<method_info nloc='3' complexity='1' token_count='33' nesting_level='1' start_line='1619' end_line='1621'></method_info>
 			<added_lines>1619,1620,1621</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines>1615,1616,1617,1618,1622,1623,1641,1642,1655,1656,1657</added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 </commit>
</bug_data>
