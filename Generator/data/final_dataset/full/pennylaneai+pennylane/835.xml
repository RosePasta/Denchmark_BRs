<bug_data>
<bug id='835' author='josh146' open_date='2020-10-01T13:53:50Z' closed_time='2020-10-09T04:01:05Z'>
 	<summary>Applying operations in `default.qubit.tf` errors if the number of wires is 9 or larger</summary>
 	<description>
 If the number of wires instantiated on  is larger than 9, circuit evaluation fails using the new, more efficient, apply implementation from &lt;denchmark-link:https://github.com/PennyLaneAI/pennylane/pull/772&gt;#772&lt;/denchmark-link&gt;
 . For example:
 import pennylane as qml
 import tensorflow as tf
 import numpy as np
 
 n_wires = 9
 dev = qml.device("default.qubit.tf", wires=n_wires)
 
 @qml.qnode(dev, interface="tf")
 def circuit(weights, x=None):
     qml.templates.embeddings.AngleEmbedding(x, wires=range(n_wires))
     qml.templates.layers.StronglyEntanglingLayers(weights, range(n_wires))
     return qml.expval(qml.PauliZ(0))
 
 weights = qml.init.strong_ent_layers_uniform(n_layers=2, n_wires=n_wires)
 weights = tf.Variable(weights)
 data = np.random.random(size=[n_wires])
 
 circuit(weights, x=data)
 Evaluating this circuit with n_wires=9 or larger results in the following error:
 &lt;denchmark-code&gt;  File "pennylane/pennylane/devices/default_qubit.py", line 288, in _apply_cnot
     state_x = self._apply_x(state[sl_1], axes=target_axes)
   File "/usr/lib/python3.7/site-packages/tensorflow/python/util/dispatch.py", line 201, in wrapper
     return target(*args, **kwargs)
   File "/usr/lib/python3.7/site-packages/tensorflow/python/ops/array_ops.py", line 1024, in _slice_helper
     name=name)
   File "/usr/lib/python3.7/site-packages/tensorflow/python/util/dispatch.py", line 201, in wrapper
     return target(*args, **kwargs)
   File "/usr/lib/python3.7/site-packages/tensorflow/python/ops/array_ops.py", line 1196, in strided_slice
     shrink_axis_mask=shrink_axis_mask)
   File "/usr/lib/python3.7/site-packages/tensorflow/python/ops/gen_array_ops.py", line 10320, in strided_slice
     _ops.raise_from_not_ok_status(e, name)
   File "/usr/lib/python3.7/site-packages/tensorflow/python/framework/ops.py", line 6843, in raise_from_not_ok_status
     six.raise_from(core._status_to_exception(e.code, message), None)
   File "&lt;string&gt;", line 3, in raise_from
 tensorflow.python.framework.errors_impl.UnimplementedError: Unhandled input dimensions 9 [Op:StridedSlice] name: strided_slice/
 &lt;/denchmark-code&gt;
 
 This same bug is not observed with default.qubit or default.qubit.autograd.
 	</description>
 	<comments>
 		<comment id='1' author='josh146' date='2020-10-01T13:55:02Z'>
 		A solution might be to simply override _apply_cnot() in default.qubit.tf to have it revert to the tensordot implementation. However, it might be worth understanding what is happening here, and if it affects any of the other new gate implementations.
 		</comment>
 		<comment id='2' author='josh146' date='2020-10-02T14:16:57Z'>
 		The error seems to be related to the &lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/8d9132b8bfacf51a28ac4e21a8c99ec0d5679929/tensorflow/core/kernels/strided_slice_op.cc#L173&gt;code in TensorFlow for handling strides up to certain number of dimensions&lt;/denchmark-link&gt;
 . The &lt;denchmark-link:https://www.tensorflow.org/api_docs/python/tf/strided_slice?hl=zh-cn&gt;tf.strided_slice&lt;/denchmark-link&gt;
  is being used when indexing into a Tensor with slices.
 a = np.ones([2]*8)
 
 b = tf.Variable(a, dtype=tf.complex128)
 c = tf.convert_to_tensor(b)
 slices = (slice(None, None, None), 1, slice(None, None, None), slice(None, None, None), slice(None, None, None), slice(None, None, None), slice(None, None, None), slice(None, None, None))
 print(len(slices))
 c[slices]
 Outputs similarly UnimplementedError: Unhandled input dimensions.
 a = np.ones([2]*7)
 
 b = tf.Variable(a, dtype=tf.complex128)
 c = tf.convert_to_tensor(b)
 slices = (1, slice(None, None, None), slice(None, None, None), slice(None, None, None), slice(None, None, None), slice(None, None, None), slice(None, None, None))
 print(len(slices))
 c[slices]
 Outputs the sliced tensor.
 		</comment>
 		<comment id='3' author='josh146' date='2020-10-02T14:39:12Z'>
 		 Thanks for tracking this down &lt;denchmark-link:https://github.com/antalszava&gt;@antalszava&lt;/denchmark-link&gt;
 , super cool that you found the source code!
 Since this affects _get_slice(), this likely also affects the CZ and the PhaseShift gates (although the CZ gate on default.qubit.tf is currently not using the faster implementation).
 While it would be nice to support the faster implementations of the CNOT and PhaseShift gates on default.qubit.tf, I had a look at the source code and this seems non-trivial. For now, we could just default to standard tensordot behaviour for these gates, by adding the following to the __init__.py:
     def __init__(self, wires, *, shots=1000, analytic=True):
         super().__init__(wires, shots=shots, analytic=analytic)
 
         # prevent using special apply method for this gate due to slowdown in TF implementation
         del self._apply_ops["CZ"]
 
         # prevent using special apply method for the following gates as TF strides only support a
         # maximum of 9 dimensions
         del self._apply_ops["CNOT"]
         del self._apply_ops["PhaseShift"]
 		</comment>
 	</comments>
 </bug>
<commit id='f82bf708dbbd98d030c8433cf82c058e84a8df4e' author='Tom Bromley' date='2020-10-09 12:01:03+08:00'>
 	<dmm_unit complexity='1.0' interfacing='0.5217391304347826' size='1.0'></dmm_unit>
 	<modification change_type='MODIFY' old_name='pennylane\devices\default_qubit_tf.py' new_name='pennylane\devices\default_qubit_tf.py'>
 		<file_info nloc='147' complexity='8' token_count='484'></file_info>
 		<method name='__init__' parameters='self,wires,shots,analytic'>
 				<method_info nloc='5' complexity='3' token_count='54' nesting_level='1' start_line='159' end_line='170'></method_info>
 			<added_lines>165,166,167,168,169,170</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines>18,28,29,31,171</added_lines>
 			<deleted_lines>28</deleted_lines>
 		</modified_lines>
 	</modification>
 	<modification change_type='MODIFY' old_name='tests\devices\test_default_qubit_tf.py' new_name='tests\devices\test_default_qubit_tf.py'>
 		<file_info nloc='899' complexity='83' token_count='10122'></file_info>
 		<method name='test_apply_ops_above_8_wires_using_special' parameters='self'>
 				<method_info nloc='5' complexity='1' token_count='47' nesting_level='1' start_line='356' end_line='363'></method_info>
 			<added_lines>356,357,358,359,360,361,362,363</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<method name='test_apply_ops_above_8_wires' parameters='self,mocker'>
 				<method_info nloc='7' complexity='1' token_count='60' nesting_level='1' start_line='338' end_line='349'></method_info>
 			<added_lines>338,339,340,341,342,343,344,345,346,347,348,349</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<method name='test_apply_ops_not_supported' parameters='self,mocker,monkeypatch'>
 				<method_info nloc='9' complexity='1' token_count='79' nesting_level='1' start_line='323' end_line='336'></method_info>
 			<added_lines>323,324,325,326,327,328,329,330,331,332,333,334,335,336</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines>337,350,351,352,353,354,355,364</added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 </commit>
</bug_data>
