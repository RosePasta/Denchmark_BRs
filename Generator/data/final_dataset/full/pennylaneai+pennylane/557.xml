<bug_data>
<bug id='557' author='smite' open_date='2020-03-21T03:27:03Z' closed_time='2020-10-02T06:56:04Z'>
 	<summary>Three bugs with auxiliary args in immutable QNodes</summary>
 	<description>
 &lt;denchmark-h:h4&gt;Issue description&lt;/denchmark-h&gt;
 
 The recent implementation of structured parameter names for the circuit drawer introduced the following three bugs that only affect auxiliary parameters of immutable QNodes.
 
 
 Expected behavior: All three code snippets below should work.
 
 
 Actual behavior: None of them do.
 
 
 Bug 1: qnodes/base.py:_make_variables only converts kwonlyargs (it should convert all keyword args).
 import numpy as np
 import pennylane as qml
 
 dev = qml.device('default.qubit', wires=1)
 
 @qml.qnode(dev, mutable=False)
 def circuit(a, b=None):
     qml.ops.RX(a[0], wires=[0])
     qml.ops.RY(b[0], wires=[0])
     return qml.expval(qml.PauliZ(0))
 
 a = [0.4]
 b = [0.7]
 circuit(a, b=b)   # TypeError: 'NoneType' object is not subscriptable 
 Bug 2: qnodes/base.py:_make_variables can only handle np.ndarrays, not e.g. lists.
 import numpy as np
 import pennylane as qml
 
 dev = qml.device('default.qubit', wires=1)
 
 @qml.qnode(dev, mutable=False)
 def circuit(a, *, b=None):
     qml.ops.RX(a[0], wires=[0])
     qml.ops.RY(b[0], wires=[0])
     return qml.expval(qml.PauliZ(0))
 
 a = [0.4]
 b = [0.7] 
 circuit(a, b=b)   # TypeError: 'Variable' object does not support indexing
 Bug 3: variable.py:Variable.val: Structured name of the auxiliary parameter is not the correct the dict key, the base parameter name is.
 import numpy as np
 import pennylane as qml
 
 dev = qml.device('default.qubit', wires=1)
 
 @qml.qnode(dev, mutable=False)
 def circuit(a, *, b=None):
     qml.ops.RX(a[0], wires=[0])
     qml.ops.RY(b[0], wires=[0])
     return qml.expval(qml.PauliZ(0))
 
 
 a = [0.4]
 b = np.array([0.7])  
 circuit(a, b=b)  # KeyError: 'b[0]'
 	</description>
 	<comments>
 		<comment id='1' author='smite' date='2020-06-10T23:38:38Z'>
 		&lt;denchmark-link:https://github.com/josh146&gt;@josh146&lt;/denchmark-link&gt;
  is this PR now out of sync, given the recent updates to the QNode variable processing?
 		</comment>
 		<comment id='2' author='smite' date='2020-06-11T04:54:32Z'>
 		No, these three bugs are still relevant. They relate to bugs in how we perform the function signature introspection, and extracting information from the variables. Now that the Variable refactor refactor is complete, it's time to go back and see if these can be resolved.
 		</comment>
 		<comment id='3' author='smite' date='2020-06-11T04:55:21Z'>
 		Note that they only apply to immutable QNodes, and aren't picked up as we don't have unit tests for immutable QNodes (fixed in &lt;denchmark-link:https://github.com/PennyLaneAI/pennylane/pull/510&gt;#510&lt;/denchmark-link&gt;
 )
 		</comment>
 		<comment id='4' author='smite' date='2020-10-02T06:56:04Z'>
 		This is no longer a bug that needs fixing, it light of the &lt;denchmark-link:https://pennylane.readthedocs.io/en/latest/code/qml_tape.html&gt;extensive tape-mode refactor&lt;/denchmark-link&gt;
 . As a result:
 
 
 there are no longer any restrictions on QNode signatures; they follow the same logic and behave exactly as python functions.
 
 
 The Variable class has been marked for deprecation and removal.
 
 
 Closing this for now.
 		</comment>
 	</comments>
 </bug>
<commit id='a239c6b736fe32bebe48b1a32d0e9b02695d43e0' author='Ville Bergholm' date='2020-03-28 01:14:49+02:00'>
 	<dmm_unit complexity='1.0' interfacing='0.68' size='0.36'></dmm_unit>
 	<modification change_type='MODIFY' old_name='tests\qnodes\test_qnode_base.py' new_name='tests\qnodes\test_qnode_base.py'>
 		<file_info nloc='1016' complexity='158' token_count='10767'></file_info>
 		<method name='test_all_auxiliary_arg_kinds.circuit' parameters='a,kwargs'>
 				<method_info nloc='4' complexity='1' token_count='51' nesting_level='2' start_line='899' end_line='902'></method_info>
 			<added_lines>899,900,901,902</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<method name='test_immutable_qfunc_with_array_parameters' parameters='self,tol'>
 				<method_info nloc='16' complexity='1' token_count='212' nesting_level='1' start_line='995' end_line='1025'></method_info>
 			<added_lines>995,996,997,998,999,1000,1001,1002,1003,1004,1005,1006,1007,1008,1009,1010,1011,1012,1013,1014,1015,1016,1017,1018,1019,1020,1021,1022,1023,1024,1025</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<method name='test_immutable_qfunc_with_array_parameters.non_mutable_circuit' parameters='x,c'>
 				<method_info nloc='6' complexity='1' token_count='75' nesting_level='2' start_line='1000' end_line='1007'></method_info>
 			<added_lines>1000,1001,1002,1003,1004,1005,1006,1007</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<method name='test_all_auxiliary_arg_kinds.circuit' parameters='a,b'>
 				<method_info nloc='4' complexity='1' token_count='51' nesting_level='2' start_line='890' end_line='893'></method_info>
 			<added_lines>890,891,892,893</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<method name='test_all_auxiliary_arg_kinds.circuit' parameters='a,b'>
 				<method_info nloc='4' complexity='1' token_count='49' nesting_level='2' start_line='881' end_line='884'></method_info>
 			<added_lines>881,882,883,884</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<method name='test_all_auxiliary_arg_kinds' parameters='self,qubit_device_1_wire,mutable,tol'>
 				<method_info nloc='16' complexity='1' token_count='143' nesting_level='1' start_line='873' end_line='906'></method_info>
 			<added_lines>873,874,875,876,877,878,879,880,881,882,883,884,885,886,887,888,889,890,891,892,893,894,895,896,897,898,899,900,901,902,903,904,905,906</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines>872,907,1026</added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 </commit>
</bug_data>
