<bug_data>
<bug id='533' author='cvjjm' open_date='2020-03-06T14:19:48Z' closed_time='2020-03-16T10:28:10Z'>
 	<summary>.inv() not correctly inverting `Operation.decomposition()`</summary>
 	<description>
 Update: I thought this would only be a problem in the drawer but also the circuit does not yield the expected result.
 A user (like myself) might want to define their own Operation and start from one of the PennyLane Operations, e.g., Rot.
 Now, If I just copy the definition of Rot to my module and rename it to MyRot, then the operation is no longer natively supported by, e.g., the default.qubit device, but it has a decomposition (the same as that of Rot into supported gates) and so I can use it without problems in my qnode circuits. However problems start to occur when I use MyRot(...).inv().
 A circuit such as
 &lt;denchmark-code&gt;@qml.qnode(dev)
 def circuit(*params):
     MyRot(0.1, 0.2, 0.3, wires=0).inv()
     Rot(0.1, 0.2, 0.3, wires=0)
     return qml.probs(range(wires))
 &lt;/denchmark-code&gt;
 
 does not yield the expected result (the two gates should cancel) and circuit.draw() looks the same irrespective of whether the .inv() is there or not. If I put the .inv() on Rot instead of the MyRot then the correct result is obtained.
 As expected, the Rot gate is displayed as such by the circuit drawer and MyRot is decomposed into elementary rotations, but the individual rotations do not get an .inv when MyRot is inverted and their order is not reversed.
 	</description>
 	<comments>
 		<comment id='1' author='cvjjm' date='2020-03-06T15:49:20Z'>
 		Hi &lt;denchmark-link:https://github.com/cvjjm&gt;@cvjjm&lt;/denchmark-link&gt;
 , thanks so much for opening an issue for this! 
 Could you please provide more details on how exactly the definition of MyRot looks like in your case? In specific, was it decorated with @template?
 		</comment>
 		<comment id='2' author='cvjjm' date='2020-03-07T10:01:14Z'>
 		It sounds like  is not a template, but a custom operation, can you confirm &lt;denchmark-link:https://github.com/cvjjm&gt;@cvjjm&lt;/denchmark-link&gt;
 ? It might be useful if you could post your minimal (non)-working example 
 Most likely this could be a bug in how either PennyLane or the default.qubit simulator is treating the inverses of decomposed operations!
 		</comment>
 		<comment id='3' author='cvjjm' date='2020-03-09T07:56:08Z'>
 		I agree that for what I originally wanted to achieve I could just as well define a template, but I then found it more convenient to subclass Operation (for example because I can define num_params and num_wires) and in this way discovered what I think is indeed a bug in how PL (or default.qubit?) treats the inverse of decomposable operations. Inv on operations that need to be decomposed doesn't seem to do anything. Instead of queuing the inverse of the gates from the decomposition in the reverse order, the gates from the decomposition are applied normally.
 MyRot is just of demonstration purposes and a plain vanilla copy of Rot() and consequently looks like this:
 &lt;denchmark-code&gt;class MyRot(Operation):
     r"""MyRot(phi, theta, omega, wires)
     A simple copy or Rot() to demonstrate a problem.
     .. math::
         R(\phi,\theta,\omega) = RZ(\omega)RY(\theta)RZ(\phi)= \begin{bmatrix}
         e^{-i(\phi+\omega)/2}\cos(\theta/2) &amp; -e^{i(\phi-\omega)/2}\sin(\theta/2) \\
         e^{-i(\phi-\omega)/2}\sin(\theta/2) &amp; e^{i(\phi+\omega)/2}\cos(\theta/2)
         \end{bmatrix}.
     **Details:**
     * Number of wires: 1
     * Number of parameters: 3
     * Gradient recipe: :math:`\frac{d}{d\phi}f(R(\phi, \theta, \omega)) = \frac{1}{2}\left[f(R(\phi+\pi/2, \theta, \omega)) - f(R(\phi-\pi/2, \theta, \omega))\right]`
       where :math:`f` is an expectation value depending on :math:`R(\phi, \theta, \omega)`.
       This gradient recipe applies for each angle argument :math:`\{\phi, \theta, \omega\}`.
     .. note::
         If the ``Rot`` gate is not supported on the targeted device, PennyLane
         will attempt to decompose the gate into :class:`~.RZ` and :class:`~.RY` gates.
     Args:
         phi (float): rotation angle :math:`\phi`
         theta (float): rotation angle :math:`\theta`
         omega (float): rotation angle :math:`\omega`
         wires (Sequence[int] or int): the wire the operation acts on
     """
     num_params = 3
     num_wires = 1
     par_domain = "R"
     grad_method = "A"
 
     @staticmethod
     def _matrix(*params):
         a, b, c = params
         return RZ._matrix(c) @ (RY._matrix(b) @ RZ._matrix(a))
 
     @staticmethod
     def decomposition(phi, theta, omega, wires):
         decomp_ops = [RZ(phi, wires=wires), RY(theta, wires=wires), RZ(omega, wires=wires)]
         return decomp_ops
 &lt;/denchmark-code&gt;
 
 This together with the qnode above (and the usual boilerplate to set up a one wire device and such) is a minimal non, working example. Observe that the output of the above qnode is [1,0] in case the .inv() is on Rot() and it is not in case .inv is on MyRot(). Printing circuit.draw() reveals that MyRot() is deomposed but the resulting sequence of gates is not inverted.
 		</comment>
 		<comment id='4' author='cvjjm' date='2020-03-09T08:31:44Z'>
 		Indeed looks like a bug in ! Thanks for alerting this to us &lt;denchmark-link:https://github.com/cvjjm&gt;@cvjjm&lt;/denchmark-link&gt;
 
 		</comment>
 		<comment id='5' author='cvjjm' date='2020-03-16T10:28:10Z'>
 		Hi &lt;denchmark-link:https://github.com/cvjjm&gt;@cvjjm&lt;/denchmark-link&gt;
 , this was fixed in PR &lt;denchmark-link:https://github.com/PennyLaneAI/pennylane/pull/543&gt;#543&lt;/denchmark-link&gt;
 . You can use the new functionality when directly installing the latest master branch of PennyLane.
 		</comment>
 		<comment id='6' author='cvjjm' date='2020-03-16T10:37:51Z'>
 		Thank you very much for fixing this so fast!
 		</comment>
 	</comments>
 </bug>
<commit id='1de545dd1df74e7c20eb06f86f1ecb2aba9e28dc' author='Johannes Jakob Meyer' date='2020-03-13 16:21:36+01:00'>
 	<dmm_unit complexity='1.0' interfacing='1.0' size='0.023809523809523808'></dmm_unit>
 	<modification change_type='MODIFY' old_name='pennylane\qnodes\base.py' new_name='pennylane\qnodes\base.py'>
 		<file_info nloc='409' complexity='117' token_count='2495'></file_info>
 		<method name='_decompose_queue' parameters='ops,device'>
 				<method_info nloc='12' complexity='4' token_count='81' nesting_level='0' start_line='86' end_line='107'></method_info>
 			<added_lines>101,102,103</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines></added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 	<modification change_type='MODIFY' old_name='tests\qnodes\test_qnode_base.py' new_name='tests\qnodes\test_qnode_base.py'>
 		<file_info nloc='917' complexity='139' token_count='9439'></file_info>
 		<method name='test_regular_arguments' parameters='self,mock_device'>
 				<method_info nloc='13' complexity='2' token_count='105' nesting_level='1' start_line='1186' end_line='1210'></method_info>
 			<added_lines>1188</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<method name='test_array_arguments' parameters='self,mock_device'>
 				<method_info nloc='14' complexity='2' token_count='111' nesting_level='1' start_line='1212' end_line='1238'></method_info>
 			<added_lines>1214</added_lines>
 			<deleted_lines>1228</deleted_lines>
 		</method>
 		<method name='test_variadic_arguments' parameters='self,mock_device'>
 				<method_info nloc='16' complexity='2' token_count='137' nesting_level='1' start_line='1311' end_line='1338'></method_info>
 			<added_lines>1313</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<method name='test_decompose_queue_inv' parameters='self,operable_mock_device_2_wires_with_inverses'>
 				<method_info nloc='26' complexity='1' token_count='261' nesting_level='1' start_line='1117' end_line='1157'></method_info>
 			<added_lines>1117,1118,1119,1120,1121,1122,1123,1124,1125,1126,1127,1128,1129,1130,1131,1132,1133,1134,1135,1136,1137,1138,1139,1140,1141,1142,1143,1144,1145,1146,1147,1148,1149,1150,1151,1152,1153,1154,1155,1156,1157</added_lines>
 			<deleted_lines>1129,1132,1133,1134,1135,1141,1146</deleted_lines>
 		</method>
 		<method name='test_mutable_qnode' parameters='self,theta,phi,varphi,tol'>
 				<method_info nloc='13' complexity='1' token_count='158' nesting_level='1' start_line='908' end_line='930'></method_info>
 			<added_lines>912</added_lines>
 			<deleted_lines>919,924</deleted_lines>
 		</method>
 		<method name='test_decompose_queue_recursive' parameters='self,operable_mock_device_2_wires_with_inverses'>
 				<method_info nloc='36' complexity='1' token_count='380' nesting_level='1' start_line='1058' end_line='1115'></method_info>
 			<added_lines>1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,1104,1105,1106,1107,1108,1109,1110,1111,1112,1113,1114,1115</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<method name='test_regular_keyword_arguments' parameters='self,mock_device'>
 				<method_info nloc='17' complexity='3' token_count='144' nesting_level='1' start_line='1240' end_line='1268'></method_info>
 			<added_lines>1242,1252,1255,1256,1257,1258,1264,1265,1266,1267</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<method name='test_mutable_qnode_for_loop_varying_executions' parameters='self,tol'>
 				<method_info nloc='10' complexity='1' token_count='157' nesting_level='1' start_line='932' end_line='952'></method_info>
 			<added_lines>937,942</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<method name='test_array_keyword_arguments.circuit' parameters='a,0'>
 				<method_info nloc='9' complexity='1' token_count='166' nesting_level='2' start_line='1273' end_line='1282'></method_info>
 			<added_lines>1273</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<method name='test_mutable_qnode_for_loop_varying_executions.node' parameters='x,n'>
 				<method_info nloc='5' complexity='3' token_count='62' nesting_level='2' start_line='940' end_line='944'></method_info>
 			<added_lines>942</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<method name='operable_mock_device_2_wires_with_inverses' parameters='monkeypatch'>
 				<method_info nloc='11' complexity='1' token_count='147' nesting_level='0' start_line='63' end_line='75'></method_info>
 			<added_lines>63,64,65,66,67,68,69,70,71,72,73,74,75</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<method name='test_array_keyword_arguments' parameters='self,mock_device'>
 				<method_info nloc='25' complexity='3' token_count='195' nesting_level='1' start_line='1270' end_line='1309'></method_info>
 			<added_lines>1272,1273,1285,1288,1294,1305,1306,1307,1308</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<method name='test_prune_tensors_construct' parameters='self,mock_device'>
 				<method_info nloc='7' complexity='1' token_count='70' nesting_level='1' start_line='334' end_line='345'></method_info>
 			<added_lines>336</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<method name='test_draw_before_construction_error' parameters='self'>
 				<method_info nloc='9' complexity='1' token_count='45' nesting_level='1' start_line='1349' end_line='1363'></method_info>
 			<added_lines>1359,1360,1361,1362</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines>62,76,77,347,954,1116,1158</added_lines>
 			<deleted_lines>894,1158,1161,1167,1178</deleted_lines>
 		</modified_lines>
 	</modification>
 </commit>
</bug_data>
