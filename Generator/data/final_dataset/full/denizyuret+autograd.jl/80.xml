<bug_data>
<bug id='80' author='CarloLucibello' open_date='2018-08-16T03:46:15Z' closed_time='2018-08-23T07:25:59Z'>
 	<summary>broadcast error for integer power</summary>
 	<description>
 On master and julia 0.7
 julia&gt; grad(x-&gt;sum(x.^2))([1,2,3])
 ┌ Warning: broadcast will default to iterating over its arguments in the future. Wrap arguments of
 │ type `x::Rec{Array{Int64,1}}` with `Ref(x)` to ensure they broadcast as "scalar" elements.
 │   caller = ip:0x0
 └ @ Core :-1
 ERROR: DimensionMismatch("Cannot multiply two vectors")
 Stacktrace:
  [1] *(::Array{Int64,1}, ::Array{Int64,1}) at /buildworker/worker/package_linux64/build/usr/share/julia/stdlib/v0.7/LinearAlgebra/src/deprecated.jl:566
  [2] power_by_squaring(::Array{Int64,1}, ::Int64) at ./intfuncs.jl:192
  [3] ^(::Array{Int64,1}, ::Int64) at ./deprecated.jl:55
  [4] (::getfield(AutoGrad, Symbol("##rfun#7#9")){typeof(^)})(::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::Rec{Array{Int64,1}}, ::Vararg{Any,N} where N) at /home/carlo/.julia/dev/AutoGrad/src/core.jl:133
  [5] rfun at /home/carlo/.julia/dev/AutoGrad/src/core.jl:130 [inlined]
  [6] ^ at ./none:0 [inlined]
  [7] macro expansion at ./none:0 [inlined]
  [8] literal_pow at ./none:0 [inlined]
  [9] _broadcast_getindex_evalf at ./broadcast.jl:574 [inlined]
  [10] _broadcast_getindex at ./broadcast.jl:547 [inlined]
  [11] getindex at ./broadcast.jl:507 [inlined]
  [12] copy at ./broadcast.jl:734 [inlined]
  [13] materialize at ./broadcast.jl:724 [inlined]
  [14] (::getfield(Main, Symbol("##15#16")))(::Rec{Array{Int64,1}}) at ./REPL[11]:1
  [15] (::getfield(AutoGrad, Symbol("##gradfun#1#2")){getfield(Main, Symbol("##15#16")),Int64})(::Base.Iterators.Pairs{Union{},Union{},Tuple{},NamedTuple{(),Tuple{}}}, ::Function, ::Array{Int64,1}) at /home/carlo/.julia/dev/AutoGrad/src/core.jl:95
  [16] (::getfield(AutoGrad, Symbol("#gradfun#3")){getfield(AutoGrad, Symbol("##gradfun#1#2")){getfield(Main, Symbol("##15#16")),Int64}})(::Array{Int64,1}) at /home/carlo/.julia/dev/AutoGrad/src/core.jl:39
  [17] top-level scope at none:0
 The temporary workaround would be to use a float exponent
 julia&gt; grad(x-&gt;sum(x.^2.0))([1,2,3])
 3-element Array{Float64,1}:
  2.0
  4.0
  6.0
 	</description>
 	<comments>
 		<comment id='1' author='CarloLucibello' date='2018-08-16T04:03:13Z'>
 		In src/base.jl we have
 @primitive ^(x1,x2),dy,y  unbroadcast(x1,dxndx(x1,x2,dy))  unbroadcast(x2,dy.*y.*log.(x1))
 @primitive ^(x1,x2::Integer),dy,y  unbroadcast(x1,dxndx(x1,x2,dy))  unbroadcast(x2,dy.*y.*log.(x1)) # ambiguity fix
 dxndx(x1,x2,dy)=(if x2==0; zero(dy); elseif x2==1; dy; elseif x2==2; 2 .* x1 .* dy; else; dy.*x2.*x1.^(x2 .- 1); end) # optimize common cases
 		</comment>
 		<comment id='2' author='CarloLucibello' date='2018-08-19T00:47:29Z'>
 		In addition to integer powers, matrix powers are also broken, e.g. rand(3,3)^2.0
 		</comment>
 		<comment id='3' author='CarloLucibello' date='2018-08-19T12:00:07Z'>
 		
 In addition to integer powers, matrix powers are also broken, e.g. rand(3,3)^2.0
 
 Matrix powers are working for me
 julia&gt; r=rand(2,2)
 2×2 Array{Float64,2}:
  0.783298  0.554936
  0.904212  0.51457 
 
 julia&gt; grad(x-&gt;sum(x^2.0))(r)
 2×2 Array{Float64,2}:
  1.5666   1.10987
  1.80842  1.02914
 
 julia&gt; grad(x-&gt;sum(x^2))(r)
 2×2 Array{Float64,2}:
  1.5666   1.10987
  1.80842  1.02914
 		</comment>
 		<comment id='4' author='CarloLucibello' date='2018-08-19T12:05:55Z'>
 		I see what you mean now, matrix powers are treated as elements wise powers. Continuing the example above we have
 julia&gt; grad(x-&gt;sum(x.^2))(r)
 ┌ Warning: broadcast will default to iterating over its arguments in the future. Wrap arguments of
 │ type `x::Rec{Array{Float64,2}}` with `Ref(x)` to ensure they broadcast as "scalar" elements.
 │   caller = ip:0x0
 └ @ Core :-1
 2×2 Array{Float64,2}:
  1.5666   1.10987
  1.80842  1.02914
 
 julia&gt; grad(x-&gt;sum(x.^2.0))(r)
 2×2 Array{Float64,2}:
  1.5666   1.10987
  1.80842  1.02914
 		</comment>
 		<comment id='5' author='CarloLucibello' date='2018-08-19T12:14:42Z'>
 		Also non-integer matrix powers are broken. This is a very serious bug.
 julia&gt; r^3.1
 2×2 Array{Float64,2}:
  1.49742  1.16269
  2.06055  1.60003
 
 julia&gt; r.^3.1
 2×2 Array{Float64,2}:
  0.35567   0.136366
  0.803742  0.432063
 
 julia&gt; grad(x-&gt;sum(x^3.1))(r)
 2×2 Array{Float64,2}:
  1.53898  0.803888
  2.67353  1.7558  
 
 julia&gt; grad(x-&gt;sum(x.^3.1))(r)
 2×2 Array{Float64,2}:
  1.53898  0.803888
  2.67353  1.7558  
 		</comment>
 		<comment id='6' author='CarloLucibello' date='2018-08-22T22:49:56Z'>
 		Latest master fixes this (matrix powers still missing), please test and close.
 &lt;denchmark-code&gt;julia&gt; grad(x-&gt;sum(x.^2))([1,2,3])
 grad(x-&gt;sum(x.^2))([1,2,3])
 3-element Array{Int64,1}:
  2
  4
  6
 
 julia&gt; grad(x-&gt;sum(x.^2.0))([1,2,3])
 grad(x-&gt;sum(x.^2.0))([1,2,3])
 3-element Array{Float64,1}:
  2.0
  4.0
  6.0
 
 julia&gt; r = [1. 2.; 3. 4.]
 r = [1. 2.; 3. 4.]
 2×2 Array{Float64,2}:
  1.0  2.0
  3.0  4.0
 
 julia&gt; grad(x-&gt;sum(x^2.0))(r)
 grad(x-&gt;sum(x^2.0))(r)
 ERROR: Derivatives of real matrix powers not defined.
 
 julia&gt; grad(x-&gt;sum(x^2))(r)
 grad(x-&gt;sum(x^2))(r)
 ERROR: Derivatives of integer matrix powers not defined.
 
 julia&gt; grad(x-&gt;sum(x.^2))(r)
 grad(x-&gt;sum(x.^2))(r)
 2×2 Array{Float64,2}:
  2.0  4.0
  6.0  8.0
 
 julia&gt; grad(x-&gt;sum(x.^2))(r)
 grad(x-&gt;sum(x.^2))(r)
 2×2 Array{Float64,2}:
  2.0  4.0
  6.0  8.0
 
 julia&gt; grad(x-&gt;sum(x.^2.0))(r)
 grad(x-&gt;sum(x.^2.0))(r)
 2×2 Array{Float64,2}:
  2.0  4.0
  6.0  8.0
 
 julia&gt; r^3.1
 r^3.1
 2×2 Array{Complex{Float64},2}:
  43.7868-0.0109935im   63.8808+0.00502871im
  95.8212+0.00754306im  139.608-0.0034504im
 
 julia&gt; r.^3.1
 r.^3.1
 2×2 Array{Float64,2}:
   1.0      8.57419
  30.1353  73.5167
 
 julia&gt; grad(x-&gt;sum(x^3.1))(r)
 grad(x-&gt;sum(x^3.1))(r)
 ERROR: Derivatives of real matrix powers not defined.
 
 julia&gt; grad(x-&gt;sum(x.^3.1))(r)
 grad(x-&gt;sum(x.^3.1))(r)
 2×2 Array{Float64,2}:
   3.1     13.29
  31.1398  56.9754
 &lt;/denchmark-code&gt;
 
 		</comment>
 		<comment id='7' author='CarloLucibello' date='2018-08-23T07:25:59Z'>
 		NIce, tanks, this is working for me now. I'll open a different issue for matrix powers
 		</comment>
 	</comments>
 </bug>
<commit id='e404118db60c02dacb00b636b8bb3e4e79ba2b6e' author='Deniz Yuret' date='2018-08-23 01:49:25+03:00'>
 	<dmm_unit complexity='None' interfacing='None' size='None'></dmm_unit>
 	<modification change_type='MODIFY' old_name='src\AutoGrad.jl' new_name='src\AutoGrad.jl'>
 		<file_info nloc='None' complexity='None' token_count='None'></file_info>
 		<modified_lines>
 			<added_lines>8</added_lines>
 			<deleted_lines>8</deleted_lines>
 		</modified_lines>
 	</modification>
 	<modification change_type='MODIFY' old_name='src\base.jl' new_name='src\base.jl'>
 		<file_info nloc='None' complexity='None' token_count='None'></file_info>
 		<modified_lines>
 			<added_lines>2,52,53,54,55,57,58,59,60</added_lines>
 			<deleted_lines>2,52,53</deleted_lines>
 		</modified_lines>
 	</modification>
 	<modification change_type='MODIFY' old_name='src\linearalgebra.jl' new_name='src\linearalgebra.jl'>
 		<file_info nloc='None' complexity='None' token_count='None'></file_info>
 		<modified_lines>
 			<added_lines>97,98,103,104,105</added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 	<modification change_type='MODIFY' old_name='test\base.jl' new_name='test\base.jl'>
 		<file_info nloc='None' complexity='None' token_count='None'></file_info>
 		<modified_lines>
 			<added_lines>62,63,67,68,69</added_lines>
 			<deleted_lines>62</deleted_lines>
 		</modified_lines>
 	</modification>
 	<modification change_type='MODIFY' old_name='test\gradcheck.jl' new_name='test\gradcheck.jl'>
 		<file_info nloc='None' complexity='None' token_count='None'></file_info>
 		<modified_lines>
 			<added_lines>82,83</added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 	<modification change_type='MODIFY' old_name='test\linearalgebra.jl' new_name='test\linearalgebra.jl'>
 		<file_info nloc='None' complexity='None' token_count='None'></file_info>
 		<modified_lines>
 			<added_lines>58,59</added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 </commit>
</bug_data>
