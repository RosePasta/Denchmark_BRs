<bug_data>
<bug id='998' author='Glorialiujie' open_date='2018-12-31T14:36:04Z' closed_time='2019-01-03T21:05:13Z'>
 	<summary>failed to run the examples in the tutorial_api_cpp form 4 to 9</summary>
 	<description>
 &lt;denchmark-h:h3&gt;Issue Summary&lt;/denchmark-h&gt;
 
 after I successfully run openpose.bin and the c++ API first 3 examples in the tutorial_api_cpp,I tried to run  rest examples such as 7_synchronous_custom_input, but it cannot work and shows that  (Segmentation fault).
 And when I run it in Clion ,it shows that:
 Process finished with exit code 139 (interrupted by signal 11: SIGSEGV)
 after debugging，pointed at line46  in wPoseExtractor.hpp:  spPoseExtractor-&gt;initializationOnThread();
 &lt;denchmark-h:h3&gt;Type of Issue&lt;/denchmark-h&gt;
 
 Execution error_
 &lt;denchmark-h:h3&gt;System Configuration&lt;/denchmark-h&gt;
 
 ubuntu 18.04
 Caffe version:caffe -1.0
 CMake version:3.12
 opencv : opencv3.2.0
 cuda : 9.1
 GPU model: GTX 1060 6g
 	</description>
 	<comments>
 		<comment id='1' author='Glorialiujie' date='2019-01-01T08:42:49Z'>
 		I faced same problem.
 &lt;denchmark-h:h2&gt;7_synchronous_custom_input&lt;/denchmark-h&gt;
 
 In the following statement, producerSharedPtr is empty and get functions fails.
 // Display
 const auto numberViews = (intRound(producerSharedPtr-&gt;get(ProducerProperty::NumberViews)));
 auto finalOutputSizeGui = finalOutputSize;
 if (numberViews &gt; 1 &amp;&amp; finalOutputSizeGui.x &gt; 0)
     finalOutputSizeGui.x *= numberViews;
 &lt;denchmark-h:h3&gt;Work Around&lt;/denchmark-h&gt;
 
 Use WrapperStructInput and set ThreadManagerMode.AsynchronousIn to wrapper.
 		</comment>
 		<comment id='2' author='Glorialiujie' date='2019-01-01T13:52:37Z'>
 		
 I faced same problem.
 7_synchronous_custom_input
 In the following statement, producerSharedPtr is empty and get functions fails.
 // Display
 const auto numberViews = (intRound(producerSharedPtr-&gt;get(ProducerProperty::NumberViews)));
 auto finalOutputSizeGui = finalOutputSize;
 if (numberViews &gt; 1 &amp;&amp; finalOutputSizeGui.x &gt; 0)
     finalOutputSizeGui.x *= numberViews;
 Work Around
 Use WrapperStructInput and set ThreadManagerMode.AsynchronousIn to wrapper.
 
 
 I faced same problem.
 7_synchronous_custom_input
 In the following statement, producerSharedPtr is empty and get functions fails.
 // Display
 const auto numberViews = (intRound(producerSharedPtr-&gt;get(ProducerProperty::NumberViews)));
 auto finalOutputSizeGui = finalOutputSize;
 if (numberViews &gt; 1 &amp;&amp; finalOutputSizeGui.x &gt; 0)
     finalOutputSizeGui.x *= numberViews;
 Work Around
 Use WrapperStructInput and set ThreadManagerMode.AsynchronousIn to wrapper.
 
 Hi,firstly thanks for your reply. I am a novice and could you please give more details about how to solve this？I just want to get some output in the console desk from video or camera . Besides, I have tried to run these examples in former releases that do not have the statement in  you mentioned and it also failed.
 		</comment>
 		<comment id='3' author='Glorialiujie' date='2019-01-01T14:52:26Z'>
 		I tried windows 10. Not ubuntu. But I believe environmental does not matter.
 I changed code to. Please get diff if you want to know modification.
 // ------------------------- OpenPose C++ API Tutorial - Example 7 - XXXXXXXXXXXXX -------------------------
 // If the user wants to learn to use the OpenPose library, we highly recommend to start with the
 // examples in `examples/tutorial_api_cpp/`.
 // This example summarizes all the functionality of the OpenPose library:
     // 1. Read folder of images / video / webcam  (`producer` module)
     // 2. Extract and render body keypoint / heatmap / PAF of that image (`pose` module)
     // 3. Extract and render face keypoint / heatmap / PAF of that image (`face` module)
     // 4. Save the results on disk (`filestream` module)
     // 5. Display the rendered pose (`gui` module)
     // Everything in a multi-thread scenario (`thread` module)
     // Points 2 to 5 are included in the `wrapper` module
 // In addition to the previous OpenPose modules, we also need to use:
     // 1. `core` module:
         // For the Array&lt;float&gt; class that the `pose` module needs
         // For the Datum struct that the `thread` module sends between the queues
     // 2. `utilities` module: for the error &amp; logging functions, i.e., op::error &amp; op::log respectively
 // This file should only be used for the user to take specific examples.
 
 // Command-line user intraface
 //#define OPENPOSE_FLAGS_DISABLE_PRODUCER
 #include &lt;openpose/flags.hpp&gt;
 // OpenPose dependencies
 #include &lt;openpose/headers.hpp&gt;
 
 // Custom OpenPose flags
 // Producer
 //DEFINE_string(image_dir, "examples/media/",
 //    "Process a directory of images. Read all standard formats (jpg, png, bmp, etc.).");
 
 // If the user needs his own variables, he can inherit the op::Datum struct and add them in there.
 // UserDatum can be directly used by the OpenPose wrapper because it inherits from op::Datum, just define
 // WrapperT&lt;std::vector&lt;UserDatum&gt;&gt; instead of Wrapper (or equivalently WrapperT&lt;std::vector&lt;UserDatum&gt;&gt;)
 struct UserDatum : public op::Datum
 {
     bool boolThatUserNeedsForSomeReason;
 
     UserDatum(const bool boolThatUserNeedsForSomeReason_ = false) :
         boolThatUserNeedsForSomeReason{boolThatUserNeedsForSomeReason_}
     {}
 };
 
 // The W-classes can be implemented either as a template or as simple classes given
 // that the user usually knows which kind of data he will move between the queues,
 // in this case we assume a std::shared_ptr of a std::vector of UserDatum
 
 // This worker will just read and return all the jpg files in a directory
 class WUserInput : public op::WorkerProducer&lt;std::shared_ptr&lt;std::vector&lt;UserDatum&gt;&gt;&gt;
 {
 public:
     WUserInput(const std::string&amp; directoryPath) :
         mImageFiles{op::getFilesOnDirectory(directoryPath, "jpg")},
         // If we want "jpg" + "png" images
         // mImageFiles{op::getFilesOnDirectory(directoryPath, std::vector&lt;std::string&gt;{"jpg", "png"})},
         mCounter{0}
     {
         if (mImageFiles.empty())
             op::error("No images found on: " + directoryPath, __LINE__, __FUNCTION__, __FILE__);
     }
 
     void initializationOnThread() {}
 
     std::shared_ptr&lt;std::vector&lt;UserDatum&gt;&gt; workProducer()
     {
         try
         {
             // Close program when empty frame
             if (mImageFiles.size() &lt;= mCounter)
             {
                 op::log("Last frame read and added to queue. Closing program after it is processed.",
                         op::Priority::High);
                 // This funtion stops this worker, which will eventually stop the whole thread system once all the
                 // frames have been processed
                 this-&gt;stop();
                 return nullptr;
             }
             else
             {
                 // Create new datum
                 auto datumsPtr = std::make_shared&lt;std::vector&lt;UserDatum&gt;&gt;();
                 datumsPtr-&gt;emplace_back();
                 auto&amp; datum = datumsPtr-&gt;at(0);
 
                 // Fill datum
                 datum.cvInputData = cv::imread(mImageFiles.at(mCounter++));
 
                 // If empty frame -&gt; return nullptr
                 if (datum.cvInputData.empty())
                 {
                     op::log("Empty frame detected on path: " + mImageFiles.at(mCounter-1) + ". Closing program.",
                         op::Priority::High);
                     this-&gt;stop();
                     datumsPtr = nullptr;
                 }
 
                 return datumsPtr;
             }
         }
         catch (const std::exception&amp; e)
         {
             this-&gt;stop();
             op::error(e.what(), __LINE__, __FUNCTION__, __FILE__);
             return nullptr;
         }
     }
 
 private:
     const std::vector&lt;std::string&gt; mImageFiles;
     unsigned long long mCounter;
 };
 
 int tutorialApiCpp7()
 {
     try
     {
 		FLAGS_image_dir = "examples/media/";
         op::log("Starting OpenPose demo...", op::Priority::High);
         const auto timerBegin = std::chrono::high_resolution_clock::now();
 
         // logging_level
         op::check(0 &lt;= FLAGS_logging_level &amp;&amp; FLAGS_logging_level &lt;= 255, "Wrong logging_level value.",
                   __LINE__, __FUNCTION__, __FILE__);
         op::ConfigureLog::setPriorityThreshold((op::Priority)FLAGS_logging_level);
         op::Profiler::setDefaultX(FLAGS_profile_speed);
         // // For debugging
         // // Print all logging messages
         // op::ConfigureLog::setPriorityThreshold(op::Priority::None);
         // // Print out speed values faster
         // op::Profiler::setDefaultX(100);
 
         // Applying user defined configuration - GFlags to program variables
         // cameraSize
 		const auto cameraSize = op::flagsToPoint(FLAGS_camera_resolution, "-1x-1");
         // outputSize
         const auto outputSize = op::flagsToPoint(FLAGS_output_resolution, "-1x-1");
         // netInputSize
         const auto netInputSize = op::flagsToPoint(FLAGS_net_resolution, "-1x368");
         // faceNetInputSize
         const auto faceNetInputSize = op::flagsToPoint(FLAGS_face_net_resolution, "368x368 (multiples of 16)");
         // handNetInputSize
         const auto handNetInputSize = op::flagsToPoint(FLAGS_hand_net_resolution, "368x368 (multiples of 16)");
 		// producerType
 		op::ProducerType producerType;
 		std::string producerString;
 		std::tie(producerType, producerString) = op::flagsToProducer(
 			FLAGS_image_dir, FLAGS_video, FLAGS_ip_camera, FLAGS_camera, FLAGS_flir_camera, FLAGS_flir_camera_index);
         // poseModel
         const auto poseModel = op::flagsToPoseModel(FLAGS_model_pose);
         // JSON saving
         if (!FLAGS_write_keypoint.empty())
             op::log("Flag `write_keypoint` is deprecated and will eventually be removed."
                     " Please, use `write_json` instead.", op::Priority::Max);
         // keypointScale
         const auto keypointScale = op::flagsToScaleMode(FLAGS_keypoint_scale);
         // heatmaps to add
         const auto heatMapTypes = op::flagsToHeatMaps(FLAGS_heatmaps_add_parts, FLAGS_heatmaps_add_bkg,
                                                       FLAGS_heatmaps_add_PAFs);
         const auto heatMapScale = op::flagsToHeatMapScaleMode(FLAGS_heatmaps_scale);
         // &gt;1 camera view?
         // const auto multipleView = (FLAGS_3d || FLAGS_3d_views &gt; 1 || FLAGS_flir_camera);
         const auto multipleView = false;
         // Enabling Google Logging
         const bool enableGoogleLogging = true;
 
         // OpenPose wrapper
         op::log("Configuring OpenPose...", op::Priority::High);
         op::WrapperT&lt;std::vector&lt;UserDatum&gt;&gt; opWrapperT(op::ThreadManagerMode::AsynchronousIn);
 
         // Initializing the user custom classes
         // Frames producer (e.g., video, webcam, ...)
         auto wUserInput = std::make_shared&lt;WUserInput&gt;(FLAGS_image_dir);
         // Add custom processing
         const auto workerInputOnNewThread = true;
         opWrapperT.setWorker(op::WorkerType::Input, wUserInput, workerInputOnNewThread);
 
         // Pose configuration (use WrapperStructPose{} for default and recommended configuration)
         const op::WrapperStructPose wrapperStructPose{
             !FLAGS_body_disable, netInputSize, outputSize, keypointScale, FLAGS_num_gpu, FLAGS_num_gpu_start,
             FLAGS_scale_number, (float)FLAGS_scale_gap, op::flagsToRenderMode(FLAGS_render_pose, multipleView),
             poseModel, !FLAGS_disable_blending, (float)FLAGS_alpha_pose, (float)FLAGS_alpha_heatmap,
             FLAGS_part_to_show, FLAGS_model_folder, heatMapTypes, heatMapScale, FLAGS_part_candidates,
             (float)FLAGS_render_threshold, FLAGS_number_people_max, FLAGS_maximize_positives, FLAGS_fps_max,
             enableGoogleLogging};
         opWrapperT.configure(wrapperStructPose);
         // Face configuration (use op::WrapperStructFace{} to disable it)
         const op::WrapperStructFace wrapperStructFace{
             FLAGS_face, faceNetInputSize, op::flagsToRenderMode(FLAGS_face_render, multipleView, FLAGS_render_pose),
             (float)FLAGS_face_alpha_pose, (float)FLAGS_face_alpha_heatmap, (float)FLAGS_face_render_threshold};
         opWrapperT.configure(wrapperStructFace);
         // Hand configuration (use op::WrapperStructHand{} to disable it)
         const op::WrapperStructHand wrapperStructHand{
             FLAGS_hand, handNetInputSize, FLAGS_hand_scale_number, (float)FLAGS_hand_scale_range, FLAGS_hand_tracking,
             op::flagsToRenderMode(FLAGS_hand_render, multipleView, FLAGS_render_pose), (float)FLAGS_hand_alpha_pose,
             (float)FLAGS_hand_alpha_heatmap, (float)FLAGS_hand_render_threshold};
         opWrapperT.configure(wrapperStructHand);
         // Extra functionality configuration (use op::WrapperStructExtra{} to disable it)
         const op::WrapperStructExtra wrapperStructExtra{
             FLAGS_3d, FLAGS_3d_min_views, FLAGS_identification, FLAGS_tracking, FLAGS_ik_threads};
         opWrapperT.configure(wrapperStructExtra);
 		// Producer (use default to disable any input)
 		const op::WrapperStructInput wrapperStructInput{
 			producerType, producerString, FLAGS_frame_first, FLAGS_frame_step, FLAGS_frame_last,
 			FLAGS_process_real_time, FLAGS_frame_flip, FLAGS_frame_rotate, FLAGS_frames_repeat,
 			cameraSize, FLAGS_camera_parameter_path, FLAGS_frame_undistort, FLAGS_3d_views };
 		opWrapperT.configure(wrapperStructInput);
         // Output (comment or use default argument to disable any output)
         const op::WrapperStructOutput wrapperStructOutput{
             FLAGS_cli_verbose, FLAGS_write_keypoint, op::stringToDataFormat(FLAGS_write_keypoint_format),
             FLAGS_write_json, FLAGS_write_coco_json, FLAGS_write_coco_foot_json, FLAGS_write_coco_json_variant,
             FLAGS_write_images, FLAGS_write_images_format, FLAGS_write_video, FLAGS_write_video_fps,
             FLAGS_write_heatmaps, FLAGS_write_heatmaps_format, FLAGS_write_video_3d, FLAGS_write_video_adam,
             FLAGS_write_bvh, FLAGS_udp_host, FLAGS_udp_port};
         opWrapperT.configure(wrapperStructOutput);
         // GUI (comment or use default argument to disable any visual output)
         const op::WrapperStructGui wrapperStructGui{
             op::flagsToDisplayMode(FLAGS_display, FLAGS_3d), !FLAGS_no_gui_verbose, FLAGS_fullscreen};
         opWrapperT.configure(wrapperStructGui);
         // Set to single-thread (for sequential processing and/or debugging and/or reducing latency)
         if (FLAGS_disable_multi_thread)
             opWrapperT.disableMultiThreading();
 
         // Start, run, and stop processing - exec() blocks this thread until OpenPose wrapper has finished
         op::log("Starting thread(s)...", op::Priority::High);
         opWrapperT.exec();
 
         // Measuring total time
         const auto now = std::chrono::high_resolution_clock::now();
         const auto totalTimeSec = (double)std::chrono::duration_cast&lt;std::chrono::nanoseconds&gt;(now-timerBegin).count()
                                 * 1e-9;
         const auto message = "OpenPose demo successfully finished. Total time: "
                            + std::to_string(totalTimeSec) + " seconds.";
         op::log(message, op::Priority::High);
 
         // Return successful message
         return 0;
     }
     catch (const std::exception&amp; e)
     {
         return -1;
     }
 }
 
 int main(int argc, char *argv[])
 {
     // Parsing command line flags
     gflags::ParseCommandLineFlags(&amp;argc, &amp;argv, true);
 
     // Running tutorialApiCpp7
     return tutorialApiCpp7();
 }
 		</comment>
 		<comment id='4' author='Glorialiujie' date='2019-01-02T03:34:24Z'>
 		
 I tried windows 10. Not ubuntu. But I believe environmental does not matter.
 I changed code to. Please get diff if you want to know modification.
 // ------------------------- OpenPose C++ API Tutorial - Example 7 - XXXXXXXXXXXXX -------------------------
 // If the user wants to learn to use the OpenPose library, we highly recommend to start with the
 // examples in `examples/tutorial_api_cpp/`.
 // This example summarizes all the functionality of the OpenPose library:
     // 1. Read folder of images / video / webcam  (`producer` module)
     // 2. Extract and render body keypoint / heatmap / PAF of that image (`pose` module)
     // 3. Extract and render face keypoint / heatmap / PAF of that image (`face` module)
     // 4. Save the results on disk (`filestream` module)
     // 5. Display the rendered pose (`gui` module)
     // Everything in a multi-thread scenario (`thread` module)
     // Points 2 to 5 are included in the `wrapper` module
 // In addition to the previous OpenPose modules, we also need to use:
     // 1. `core` module:
         // For the Array&lt;float&gt; class that the `pose` module needs
         // For the Datum struct that the `thread` module sends between the queues
     // 2. `utilities` module: for the error &amp; logging functions, i.e., op::error &amp; op::log respectively
 // This file should only be used for the user to take specific examples.
 
 // Command-line user intraface
 //#define OPENPOSE_FLAGS_DISABLE_PRODUCER
 #include &lt;openpose/flags.hpp&gt;
 // OpenPose dependencies
 #include &lt;openpose/headers.hpp&gt;
 
 // Custom OpenPose flags
 // Producer
 //DEFINE_string(image_dir, "examples/media/",
 //    "Process a directory of images. Read all standard formats (jpg, png, bmp, etc.).");
 
 // If the user needs his own variables, he can inherit the op::Datum struct and add them in there.
 // UserDatum can be directly used by the OpenPose wrapper because it inherits from op::Datum, just define
 // WrapperT&lt;std::vector&lt;UserDatum&gt;&gt; instead of Wrapper (or equivalently WrapperT&lt;std::vector&lt;UserDatum&gt;&gt;)
 struct UserDatum : public op::Datum
 {
     bool boolThatUserNeedsForSomeReason;
 
     UserDatum(const bool boolThatUserNeedsForSomeReason_ = false) :
         boolThatUserNeedsForSomeReason{boolThatUserNeedsForSomeReason_}
     {}
 };
 
 // The W-classes can be implemented either as a template or as simple classes given
 // that the user usually knows which kind of data he will move between the queues,
 // in this case we assume a std::shared_ptr of a std::vector of UserDatum
 
 // This worker will just read and return all the jpg files in a directory
 class WUserInput : public op::WorkerProducer&lt;std::shared_ptr&lt;std::vector&lt;UserDatum&gt;&gt;&gt;
 {
 public:
     WUserInput(const std::string&amp; directoryPath) :
         mImageFiles{op::getFilesOnDirectory(directoryPath, "jpg")},
         // If we want "jpg" + "png" images
         // mImageFiles{op::getFilesOnDirectory(directoryPath, std::vector&lt;std::string&gt;{"jpg", "png"})},
         mCounter{0}
     {
         if (mImageFiles.empty())
             op::error("No images found on: " + directoryPath, __LINE__, __FUNCTION__, __FILE__);
     }
 
     void initializationOnThread() {}
 
     std::shared_ptr&lt;std::vector&lt;UserDatum&gt;&gt; workProducer()
     {
         try
         {
             // Close program when empty frame
             if (mImageFiles.size() &lt;= mCounter)
             {
                 op::log("Last frame read and added to queue. Closing program after it is processed.",
                         op::Priority::High);
                 // This funtion stops this worker, which will eventually stop the whole thread system once all the
                 // frames have been processed
                 this-&gt;stop();
                 return nullptr;
             }
             else
             {
                 // Create new datum
                 auto datumsPtr = std::make_shared&lt;std::vector&lt;UserDatum&gt;&gt;();
                 datumsPtr-&gt;emplace_back();
                 auto&amp; datum = datumsPtr-&gt;at(0);
 
                 // Fill datum
                 datum.cvInputData = cv::imread(mImageFiles.at(mCounter++));
 
                 // If empty frame -&gt; return nullptr
                 if (datum.cvInputData.empty())
                 {
                     op::log("Empty frame detected on path: " + mImageFiles.at(mCounter-1) + ". Closing program.",
                         op::Priority::High);
                     this-&gt;stop();
                     datumsPtr = nullptr;
                 }
 
                 return datumsPtr;
             }
         }
         catch (const std::exception&amp; e)
         {
             this-&gt;stop();
             op::error(e.what(), __LINE__, __FUNCTION__, __FILE__);
             return nullptr;
         }
     }
 
 private:
     const std::vector&lt;std::string&gt; mImageFiles;
     unsigned long long mCounter;
 };
 
 int tutorialApiCpp7()
 {
     try
     {
 		FLAGS_image_dir = "examples/media/";
         op::log("Starting OpenPose demo...", op::Priority::High);
         const auto timerBegin = std::chrono::high_resolution_clock::now();
 
         // logging_level
         op::check(0 &lt;= FLAGS_logging_level &amp;&amp; FLAGS_logging_level &lt;= 255, "Wrong logging_level value.",
                   __LINE__, __FUNCTION__, __FILE__);
         op::ConfigureLog::setPriorityThreshold((op::Priority)FLAGS_logging_level);
         op::Profiler::setDefaultX(FLAGS_profile_speed);
         // // For debugging
         // // Print all logging messages
         // op::ConfigureLog::setPriorityThreshold(op::Priority::None);
         // // Print out speed values faster
         // op::Profiler::setDefaultX(100);
 
         // Applying user defined configuration - GFlags to program variables
         // cameraSize
 		const auto cameraSize = op::flagsToPoint(FLAGS_camera_resolution, "-1x-1");
         // outputSize
         const auto outputSize = op::flagsToPoint(FLAGS_output_resolution, "-1x-1");
         // netInputSize
         const auto netInputSize = op::flagsToPoint(FLAGS_net_resolution, "-1x368");
         // faceNetInputSize
         const auto faceNetInputSize = op::flagsToPoint(FLAGS_face_net_resolution, "368x368 (multiples of 16)");
         // handNetInputSize
         const auto handNetInputSize = op::flagsToPoint(FLAGS_hand_net_resolution, "368x368 (multiples of 16)");
 		// producerType
 		op::ProducerType producerType;
 		std::string producerString;
 		std::tie(producerType, producerString) = op::flagsToProducer(
 			FLAGS_image_dir, FLAGS_video, FLAGS_ip_camera, FLAGS_camera, FLAGS_flir_camera, FLAGS_flir_camera_index);
         // poseModel
         const auto poseModel = op::flagsToPoseModel(FLAGS_model_pose);
         // JSON saving
         if (!FLAGS_write_keypoint.empty())
             op::log("Flag `write_keypoint` is deprecated and will eventually be removed."
                     " Please, use `write_json` instead.", op::Priority::Max);
         // keypointScale
         const auto keypointScale = op::flagsToScaleMode(FLAGS_keypoint_scale);
         // heatmaps to add
         const auto heatMapTypes = op::flagsToHeatMaps(FLAGS_heatmaps_add_parts, FLAGS_heatmaps_add_bkg,
                                                       FLAGS_heatmaps_add_PAFs);
         const auto heatMapScale = op::flagsToHeatMapScaleMode(FLAGS_heatmaps_scale);
         // &gt;1 camera view?
         // const auto multipleView = (FLAGS_3d || FLAGS_3d_views &gt; 1 || FLAGS_flir_camera);
         const auto multipleView = false;
         // Enabling Google Logging
         const bool enableGoogleLogging = true;
 
         // OpenPose wrapper
         op::log("Configuring OpenPose...", op::Priority::High);
         op::WrapperT&lt;std::vector&lt;UserDatum&gt;&gt; opWrapperT(op::ThreadManagerMode::AsynchronousIn);
 
         // Initializing the user custom classes
         // Frames producer (e.g., video, webcam, ...)
         auto wUserInput = std::make_shared&lt;WUserInput&gt;(FLAGS_image_dir);
         // Add custom processing
         const auto workerInputOnNewThread = true;
         opWrapperT.setWorker(op::WorkerType::Input, wUserInput, workerInputOnNewThread);
 
         // Pose configuration (use WrapperStructPose{} for default and recommended configuration)
         const op::WrapperStructPose wrapperStructPose{
             !FLAGS_body_disable, netInputSize, outputSize, keypointScale, FLAGS_num_gpu, FLAGS_num_gpu_start,
             FLAGS_scale_number, (float)FLAGS_scale_gap, op::flagsToRenderMode(FLAGS_render_pose, multipleView),
             poseModel, !FLAGS_disable_blending, (float)FLAGS_alpha_pose, (float)FLAGS_alpha_heatmap,
             FLAGS_part_to_show, FLAGS_model_folder, heatMapTypes, heatMapScale, FLAGS_part_candidates,
             (float)FLAGS_render_threshold, FLAGS_number_people_max, FLAGS_maximize_positives, FLAGS_fps_max,
             enableGoogleLogging};
         opWrapperT.configure(wrapperStructPose);
         // Face configuration (use op::WrapperStructFace{} to disable it)
         const op::WrapperStructFace wrapperStructFace{
             FLAGS_face, faceNetInputSize, op::flagsToRenderMode(FLAGS_face_render, multipleView, FLAGS_render_pose),
             (float)FLAGS_face_alpha_pose, (float)FLAGS_face_alpha_heatmap, (float)FLAGS_face_render_threshold};
         opWrapperT.configure(wrapperStructFace);
         // Hand configuration (use op::WrapperStructHand{} to disable it)
         const op::WrapperStructHand wrapperStructHand{
             FLAGS_hand, handNetInputSize, FLAGS_hand_scale_number, (float)FLAGS_hand_scale_range, FLAGS_hand_tracking,
             op::flagsToRenderMode(FLAGS_hand_render, multipleView, FLAGS_render_pose), (float)FLAGS_hand_alpha_pose,
             (float)FLAGS_hand_alpha_heatmap, (float)FLAGS_hand_render_threshold};
         opWrapperT.configure(wrapperStructHand);
         // Extra functionality configuration (use op::WrapperStructExtra{} to disable it)
         const op::WrapperStructExtra wrapperStructExtra{
             FLAGS_3d, FLAGS_3d_min_views, FLAGS_identification, FLAGS_tracking, FLAGS_ik_threads};
         opWrapperT.configure(wrapperStructExtra);
 		// Producer (use default to disable any input)
 		const op::WrapperStructInput wrapperStructInput{
 			producerType, producerString, FLAGS_frame_first, FLAGS_frame_step, FLAGS_frame_last,
 			FLAGS_process_real_time, FLAGS_frame_flip, FLAGS_frame_rotate, FLAGS_frames_repeat,
 			cameraSize, FLAGS_camera_parameter_path, FLAGS_frame_undistort, FLAGS_3d_views };
 		opWrapperT.configure(wrapperStructInput);
         // Output (comment or use default argument to disable any output)
         const op::WrapperStructOutput wrapperStructOutput{
             FLAGS_cli_verbose, FLAGS_write_keypoint, op::stringToDataFormat(FLAGS_write_keypoint_format),
             FLAGS_write_json, FLAGS_write_coco_json, FLAGS_write_coco_foot_json, FLAGS_write_coco_json_variant,
             FLAGS_write_images, FLAGS_write_images_format, FLAGS_write_video, FLAGS_write_video_fps,
             FLAGS_write_heatmaps, FLAGS_write_heatmaps_format, FLAGS_write_video_3d, FLAGS_write_video_adam,
             FLAGS_write_bvh, FLAGS_udp_host, FLAGS_udp_port};
         opWrapperT.configure(wrapperStructOutput);
         // GUI (comment or use default argument to disable any visual output)
         const op::WrapperStructGui wrapperStructGui{
             op::flagsToDisplayMode(FLAGS_display, FLAGS_3d), !FLAGS_no_gui_verbose, FLAGS_fullscreen};
         opWrapperT.configure(wrapperStructGui);
         // Set to single-thread (for sequential processing and/or debugging and/or reducing latency)
         if (FLAGS_disable_multi_thread)
             opWrapperT.disableMultiThreading();
 
         // Start, run, and stop processing - exec() blocks this thread until OpenPose wrapper has finished
         op::log("Starting thread(s)...", op::Priority::High);
         opWrapperT.exec();
 
         // Measuring total time
         const auto now = std::chrono::high_resolution_clock::now();
         const auto totalTimeSec = (double)std::chrono::duration_cast&lt;std::chrono::nanoseconds&gt;(now-timerBegin).count()
                                 * 1e-9;
         const auto message = "OpenPose demo successfully finished. Total time: "
                            + std::to_string(totalTimeSec) + " seconds.";
         op::log(message, op::Priority::High);
 
         // Return successful message
         return 0;
     }
     catch (const std::exception&amp; e)
     {
         return -1;
     }
 }
 
 int main(int argc, char *argv[])
 {
     // Parsing command line flags
     gflags::ParseCommandLineFlags(&amp;argc, &amp;argv, true);
 
     // Running tutorialApiCpp7
     return tutorialApiCpp7();
 }
 
 I have tried your code and it still failed. I found another error:"Cannot create Cublas handle. Cublas won't be available.". It always appears no matter it works(openppose.bin) or fail(7_synchronous_custom_input). Could it be the key of this problem?
 		</comment>
 		<comment id='5' author='Glorialiujie' date='2019-01-02T11:10:14Z'>
 		I tried Ubuntu 1804 with 1080 on CUDA 9.2.
 It works fine without any modification.
 But latest openpose does not work. I refer &lt;denchmark-link:https://github.com/CMU-Perceptual-Computing-Lab/openpose/issues/787#issuecomment-415476837&gt;#787 (comment)&lt;/denchmark-link&gt;
  and it works. This commit has not larger modification about 7_synchronous_custom_input.cpp.
 It is weird.
 &lt;denchmark-h:h3&gt;NOTE&lt;/denchmark-h&gt;
 
 It is a log of building openpose
 &lt;denchmark-code&gt;-- ******************* Caffe Configuration Summary *******************
 -- General:
 --   Version           :   1.0.0
 --   Git               :   1.0-118-gf019d0df
 --   System            :   Linux
 --   C++ compiler      :   /usr/bin/c++
 --   Release CXX flags :   -O3 -DNDEBUG -fPIC -Wall -Wno-sign-compare -Wno-uninitialized
 --   Debug CXX flags   :   -g -fPIC -Wall -Wno-sign-compare -Wno-uninitialized
 --   Build type        :   Release
 -- 
 --   BUILD_SHARED_LIBS :   ON
 --   BUILD_python      :   OFF
 --   BUILD_matlab      :   OFF
 --   BUILD_docs        :   OFF
 --   CPU_ONLY          :   OFF
 --   USE_OPENCV        :   OFF
 --   USE_LEVELDB       :   OFF
 --   USE_LMDB          :   OFF
 --   USE_NCCL          :   OFF
 --   ALLOW_LMDB_NOLOCK :   OFF
 -- 
 -- Dependencies:
 --   BLAS              :   Yes (Atlas)
 --   Boost             :   Yes (ver. 1.65)
 --   glog              :   Yes
 --   gflags            :   Yes
 --   protobuf          :   Yes (ver. 3.0.0)
 --   CUDA              :   Yes (ver. 9.2)
 -- 
 -- NVIDIA CUDA:
 --   Target GPU(s)     :   Auto
 --   GPU arch(s)       :   sm_61
 --   cuDNN             :   Yes (ver. 7.4.1)
 -- 
 -- Install:
 --   Install path      :   /media/hdd/work/OpenSource/OpenPoseDotNet/openpose/build/caffe
 &lt;/denchmark-code&gt;
 
 		</comment>
 		<comment id='6' author='Glorialiujie' date='2019-01-03T21:05:13Z'>
 		My apologies. Fixed (it was only example 7, the rest were working on my machine). Let me know whether it works or not now (and if so, which example is failing).
 		</comment>
 		<comment id='7' author='Glorialiujie' date='2019-01-03T22:57:10Z'>
 		I confirmed it works fine. Thanks.
 		</comment>
 		<comment id='8' author='Glorialiujie' date='2019-01-04T09:39:55Z'>
 		&lt;denchmark-link:https://github.com/takuya-takeuchi&gt;@takuya-takeuchi&lt;/denchmark-link&gt;
  I have reinstall almost everything in these two days and it seem to be the opencv that caused my problem.Now,it is fixed. Anyway, thanks for you help.
 		</comment>
 	</comments>
 </bug>
<commit id='fdbe68d1dabe27489fa7047649b17f827599219d' author='gineshidalgo99' date='2019-01-03 16:05:04-05:00'>
 	<dmm_unit complexity='0.0' interfacing='0.0' size='0.0'></dmm_unit>
 	<modification change_type='MODIFY' old_name='.travis.yml' new_name='.travis.yml'>
 		<file_info nloc='None' complexity='None' token_count='None'></file_info>
 		<modified_lines>
 			<added_lines>15,20,21,22,23,24,25,26,27,28,29,30,31,33,43,44,45,49,50,51,55,56,57,58,59,60,61,62</added_lines>
 			<deleted_lines>20,30,31,32,39,40</deleted_lines>
 		</modified_lines>
 	</modification>
 	<modification change_type='ADD' old_name='None' new_name='cmake\travis\defaults.sh'>
 		<file_info nloc='None' complexity='None' token_count='None'></file_info>
 	</modification>
 	<modification change_type='MODIFY' old_name='doc\installation.md' new_name='doc\installation.md'>
 		<file_info nloc='None' complexity='None' token_count='None'></file_info>
 		<modified_lines>
 			<added_lines>42</added_lines>
 			<deleted_lines>42</deleted_lines>
 		</modified_lines>
 	</modification>
 	<modification change_type='MODIFY' old_name='include\openpose\wrapper\wrapperAuxiliary.hpp' new_name='include\openpose\wrapper\wrapperAuxiliary.hpp'>
 		<file_info nloc='811' complexity='156' token_count='6380'></file_info>
 		<method name='op::configureThreadManager' parameters='threadManager,multiThreadEnabledTemp,threadManagerMode,wrapperStructPoseTemp,wrapperStructFace,wrapperStructHand,wrapperStructExtra,wrapperStructInput,wrapperStructOutput,wrapperStructGui,userWs,userWsOnNewThread'>
 				<method_info nloc='765' complexity='156' token_count='6121' nesting_level='1' start_line='85' end_line='1077'></method_info>
 			<added_lines>345,350,388,393,426,430,431,436,437,442,481,486,525,531,542,556,561,577,587,597,605,610,616,621,626,635,640,644,648,659,670,674,679,684,696,700,709,714,720,725,730,739,743,749,758,759,767,787,808,824</added_lines>
 			<deleted_lines>345,715</deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines></added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 </commit>
</bug_data>
