<bug_data>
<bug id='4705' author='LaRiffle' open_date='2020-10-24T13:20:39Z' closed_time='2020-11-05T12:59:50Z'>
 	<summary>Comparison between FPT and AST doesn't always works</summary>
 	<description>
 &lt;denchmark-h:h2&gt;Description&lt;/denchmark-h&gt;
 
 Some cases of handling comparison between FixedPrecision and AdditiveSharingTensor are supported, but some are not. We should systematize this.
 &lt;denchmark-h:h2&gt;How to Reproduce&lt;/denchmark-h&gt;
 
 t1 = torch.tensor([1.2, 1]).fix_precision().share(*workers, crypto_provider=crypto_provider, protocol="fss")
 t2 = torch.tensor([1.2, 1]).fix_precision()
 
 t1 &gt; t2 # FAILS but t1 &lt; t2 works
 &lt;denchmark-h:h2&gt;Stacktrace&lt;/denchmark-h&gt;
 
 &lt;denchmark-code&gt;AttributeError                            Traceback (most recent call last)
 &lt;ipython-input-10-c55d3fcd7179&gt; in &lt;module&gt;
       2 t2 = torch.tensor([1.2, 1]).fix_precision()#.share(*workers, crypto_provider=crypto_provider, protocol="fss", requires_grad=True)
       3 
 ----&gt; 4 t1 &gt; t2
 
 ~/code/PySyft/syft/generic/frameworks/hook/hook.py in overloaded_native_method(self, *args, **kwargs)
     218                 # Send the new command to the appropriate class and get the response
     219                 method = getattr(new_self, method_name)
 --&gt; 220                 response = method(*new_args, **new_kwargs)
     221 
     222                 # For inplace methods, just directly return self
 
 ~/code/PySyft/syft/generic/frameworks/overload.py in _hook_method_args(self, *args, **kwargs)
      25 
      26             # Send it to the appropriate class and get the response
 ---&gt; 27             response = attr(self, new_self, *new_args, **new_kwargs)
      28 
      29             # Put back SyftTensor on the tensors found in the response
 
 ~/code/PySyft/syft/frameworks/torch/tensors/interpreters/precision.py in __gt__(self, _self, other)
     821     def __gt__(self, _self, other):
     822         print("FPT gt", _self, other)
 --&gt; 823         result = _self.__gt__(other)
     824         return result.type(self.torch_dtype) * self.base ** self.precision_fractional
     825 
 
 ~/code/PySyft/syft/frameworks/torch/mpc/__init__.py in method(self, *args, **kwargs)
      33         def method(self, *args, **kwargs):
      34             f = protocol_store[(name, self.protocol)]
 ---&gt; 35             return f(self, *args, **kwargs)
      36 
      37         return method
 
 ~/code/PySyft/syft/frameworks/torch/tensors/interpreters/additive_shared.py in __gt__(self, other)
     938     @crypto_protocol("fss")
     939     def __gt__(self, other):
 --&gt; 940         return (other + 1) &lt;= self
     941 
     942     def ge(self, other):
 
 ~/code/PySyft/syft/generic/frameworks/hook/hook.py in overloaded_native_method(self, *args, **kwargs)
     156                     # arguments
     157                     if not isinstance(args[0].child, PointerTensor):
 --&gt; 158                         self = type(args[0].child)().on(self, wrap=True)
     159                         args = [args[0]]
     160                         return overloaded_native_method(self, *args, **kwargs)
 
 AttributeError: 'dict' object has no attribute 'on'
 
 &lt;/denchmark-code&gt;
 
 	</description>
 	<comments>
 	</comments>
 </bug>
<commit id='d2bbbc994aa7e7428d9686c3c160e3bcaff881d6' author='Anubhav Raj Singh' date='2020-11-05 18:17:49+05:18'>
 	<dmm_unit complexity='1.0' interfacing='0.3076923076923077' size='0.3076923076923077'></dmm_unit>
 	<modification change_type='MODIFY' old_name='pip-dep\requirements_udacity.txt' new_name='pip-dep\requirements_udacity.txt'>
 		<file_info nloc='None' complexity='None' token_count='None'></file_info>
 		<modified_lines>
 			<added_lines>2</added_lines>
 			<deleted_lines>1</deleted_lines>
 		</modified_lines>
 	</modification>
 	<modification change_type='MODIFY' old_name='syft\frameworks\torch\tensors\interpreters\additive_shared.py' new_name='syft\frameworks\torch\tensors\interpreters\additive_shared.py'>
 		<file_info nloc='798' complexity='227' token_count='5811'></file_info>
 		<method name='__gt__' parameters='self,other'>
 				<method_info nloc='2' complexity='1' token_count='17' nesting_level='1' start_line='931' end_line='932'></method_info>
 			<added_lines>932</added_lines>
 			<deleted_lines>932</deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines></added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 	<modification change_type='MODIFY' old_name='test\torch\tensors\test_additive_shared.py' new_name='test\torch\tensors\test_additive_shared.py'>
 		<file_info nloc='941' complexity='80' token_count='13115'></file_info>
 		<method name='test_eq_ast_fpt' parameters='workers,protocol'>
 				<method_info nloc='12' complexity='1' token_count='112' nesting_level='0' start_line='1370' end_line='1386'></method_info>
 			<added_lines>1370,1371,1372,1373,1374,1375,1376,1377,1378,1379,1380,1381,1382,1383,1384,1385,1386</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<method name='test_comp_ast_fpt' parameters='workers,protocol,force_preprocessing'>
 				<method_info nloc='27' complexity='2' token_count='427' nesting_level='0' start_line='1332' end_line='1366'></method_info>
 			<added_lines>1332,1333,1334,1335,1336,1337,1338,1339,1340,1341,1342,1343,1344,1345,1346,1347,1348,1349,1350,1351,1352,1353,1354,1355,1356,1357,1358,1359,1360,1361,1362,1363,1364,1365,1366</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines>1328,1329,1330,1331,1367,1368,1369</added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 </commit>
</bug_data>
