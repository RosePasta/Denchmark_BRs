<bug_data>
<bug id='3344' author='karlhigley' open_date='2020-04-12T15:44:42Z' closed_time='2020-04-15T14:43:05Z'>
 	<summary>`test_instantiate_tfe_layer` is flaky</summary>
 	<description>
 Describe the bug
 This test semi-regularly fails
 To Reproduce
 Run the test (or full suite) until it fails.
 Expected behavior
 The test should reliably pass.
 Screenshots
 &lt;denchmark-code&gt;        # compares results and raises error if not equal up to 0.001
 &gt;       np.testing.assert_allclose(actual, expected, rtol=0.001)
 E       AssertionError: 
 E       Not equal to tolerance rtol=0.001, atol=0
 E       
 E       Mismatched elements: 4 / 20 (20%)
 E       Max absolute difference: 0.00031287
 E       Max relative difference: 0.00110612
 E        x: array([[-0.163999, -1.074379, -1.394909, -0.963268,  0.888889],
 E              [-0.163999, -1.074379, -1.394909, -0.963268,  0.888889],
 E              [-0.163999, -1.074379, -1.394909, -0.963268,  0.888889],
 E              [-0.163999, -1.074379, -1.394909, -0.963268,  0.888889]])
 E        y: array([[-0.164181, -1.074468, -1.395135, -0.9634  ,  0.889202],
 E              [-0.164181, -1.074468, -1.395135, -0.9634  ,  0.889202],
 E              [-0.164181, -1.074468, -1.395135, -0.9634  ,  0.889202],...
 &lt;/denchmark-code&gt;
 
 Additional context
 This started being an issue when the order of the test suite was randomized (specifically to shake out flaky tests like this.)
 	</description>
 	<comments>
 		<comment id='1' author='karlhigley' date='2020-04-12T17:51:38Z'>
 		There are two potential issues here:
 
 Randomized functions in tests should be seeded, since integration tests should be deterministic. By randomizing the order of tests, the seed that these tolerance values are tuned against might be getting reset.
 The rtol value here is working against the test definition, which is what makes the error dependent on seed.
 
 To explain 2 a bit more:The loss of precision from TFE's fixed point representation truncating floating points is relatively worse for values closer to 0, and sampling kernel_initializer from a standard normal means we have a high likelihood of sampling numbers near 0. Relative error between the expected and actual value of the kernel will thus increase for numbers near 0 (whereas absolute error should be better).
 If you want to randomize testing order, I'd double check that you're setting seeds after sampling the testcase order (so that each test can still be deterministic). I'd additionally either change the kernel_initializer to a distribution that doesn't have an expected value at 0 (normal -&gt; uniform), or switch from rtol to atol (this is less satisfying but should at least make the test less susceptible to precision errors).
 		</comment>
 		<comment id='2' author='karlhigley' date='2020-04-12T18:08:12Z'>
 		The issue that prompted randomizing the test case order was that changes to the directory structure (without code changes) could cause test failures, since the tests are run in alphabetical order and randomized functions in the tests are inconsistently (re-)seeded.
 		</comment>
 		<comment id='3' author='karlhigley' date='2020-04-12T18:13:41Z'>
 		(For anyone picking up this issue, the test randomization is performed with &lt;denchmark-link:https://github.com/pytest-dev/pytest-randomly&gt;pytest-randomly&lt;/denchmark-link&gt;
 .)
 		</comment>
 		<comment id='4' author='karlhigley' date='2020-04-13T13:44:17Z'>
 		
 randomized functions in the tests are inconsistently (re-)seeded
 
 Seems like a great use case for &lt;denchmark-link:https://docs.pytest.org/en/latest/fixture.html&gt;pytest fixtures&lt;/denchmark-link&gt;
 
 		</comment>
 		<comment id='5' author='karlhigley' date='2020-04-13T14:34:12Z'>
 		Not sure I follow. Are you suggesting using fixtures to set random seeds?
 		</comment>
 		<comment id='6' author='karlhigley' date='2020-04-13T16:57:55Z'>
 		Yes, assuming there's a reason that no global seed is used.
 		</comment>
 		<comment id='7' author='karlhigley' date='2020-04-14T14:47:49Z'>
 		There is a global seed used, which is set to the timestamp of the start of the test run. (There are actually multiple random seeds at play though (the Python random seed, the PyTorch random seed, and the Numpy random seed), and I'm not sure they all get set. ðŸ¤”
 Setting fixed random seeds at the beginning of a test run doesn't solve the issue though, because the order of the tests is not fixed, so the numbers generated for each individual test may vary. If individual tests can't be written in a fashion that makes them (pretty much) deterministic despite the randomness within, they can set whatever random seeds they need to.
 		</comment>
 		<comment id='8' author='karlhigley' date='2020-04-14T18:43:46Z'>
 		
 Setting fixed random seeds at the beginning of a test run doesn't solve the issue though, because the order of the tests is not fixed, so the numbers generated for each individual test may vary.
 
 I see, I misunderstood. Dynamically setting the seed based on timestamp is not what I'd consider "fixed seed" because it doesn't allow for exact reproducibility of a test run across time &amp; machines (which is what all unit/integration tests should strive for imo). But at least the problem is clear now, we need same numbers across runs for this issue to be fixed
 		</comment>
 		<comment id='9' author='karlhigley' date='2020-04-15T14:42:01Z'>
 		It does allow for reproducibility, because each test run prints out the random seed at the beginning and you can pass it back in with a flag.
 IMO, we need tests that are resilient to receiving different numbers, because the tests are already not guaranteed to run in the same order on every run (due to package path changing refactors.) I'd much rather intentionally deal with the problem of tests that flake (by randomizing their order and fixing issues) than have unrelated tests fail unexpectedly while refactoring due to order dependence of the test suite.
 		</comment>
 		<comment id='10' author='karlhigley' date='2020-04-15T14:43:05Z'>
 		Anyway, &lt;denchmark-link:https://github.com/OpenMined/PySyft/pull/3358&gt;#3358&lt;/denchmark-link&gt;
  adjusts the thresholds to make this test pass reliably, so this game of whack-a-mole has shifted to other parts of the code base.
 		</comment>
 	</comments>
 </bug>
<commit id='f8dbe92bedd2b8faceadfbc9af4e8fa859a5556c' author='Karl Higley' date='2020-04-14 14:09:20-04:00'>
 	<dmm_unit complexity='None' interfacing='None' size='None'></dmm_unit>
 	<modification change_type='MODIFY' old_name='test\keras\test_sequential.py' new_name='test\keras\test_sequential.py'>
 		<file_info nloc='62' complexity='2' token_count='561'></file_info>
 		<method name='test_instantiate_tfe_layer' parameters=''>
 				<method_info nloc='24' complexity='1' token_count='240' nesting_level='0' start_line='13' end_line='54'></method_info>
 			<added_lines>54</added_lines>
 			<deleted_lines>54</deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines></added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 </commit>
</bug_data>
