<bug_data>
<bug id='431' author='TezRomacH' open_date='2019-10-10T12:42:22Z' closed_time='2019-11-05T13:34:30Z'>
 	<summary>Fix in BaseCheckpointCallback `_metrics` not only for the last stage but for all</summary>
 	<description>
 
 Now the  file created by &lt;denchmark-link:https://github.com/catalyst-team/catalyst/blob/master/catalyst/dl/callbacks/checkpoint.py#L13&gt;BaseCheckpointCallback&lt;/denchmark-link&gt;
  stores only the latest stage metrics (because the file is &lt;denchmark-link:https://github.com/catalyst-team/catalyst/blob/master/catalyst/dl/callbacks/checkpoint.py#L30&gt;simply overwritten there&lt;/denchmark-link&gt;
 )
 We need to make a normal metric manager for this checkpoint.
 To Reproduce
 Steps to reproduce the behavior:
 
 Add a config file with several training stages.
 Add a CheckpointCallback with save_n_best &gt; 1 to store several best checkpoints (for example 3)
 In logdir/checkpoints/_metrics.json we have logs only for the last stage
 
 Expected behavior
 Metrics are logged from all the stages.
 	</description>
 	<comments>
 		<comment id='1' author='TezRomacH' date='2019-10-16T10:54:44Z'>
 		I'll work on this one.
 My first thoughts on this is to add default argument for custom metrics filename in BaseCheckpointCallback:
 &lt;denchmark-code&gt;def save_metric(self, logdir: str, metrics: Dict, custom_metric_filename: str=None) -&gt; None:
     if custom_metric_filename is None:        
         safitty.save(metrics, f"{logdir}/checkpoints/{self.metric_filename}")
     else:
         safitty.save(metrics, f"{logdir}/checkpoints/{self.custom_metric_filename}")
 &lt;/denchmark-code&gt;
 
 And in CheckpointCallback:
 &lt;denchmark-code&gt;self.save_metric(logdir, metrics, custom_metric_filename=f"_metrics_{suffix}.json")
 &lt;/denchmark-code&gt;
 
 Something like that. I'll check the implementation myself, because i feel that there is something else has to be done with callbacks to get it working right. :)
 		</comment>
 		<comment id='2' author='TezRomacH' date='2019-10-16T10:56:56Z'>
 		Or we can just change metric_filename in CheckpointCallback before saving, and don't touch save_metric in BaseCheckpointCallback.
 		</comment>
 		<comment id='3' author='TezRomacH' date='2019-10-16T11:52:34Z'>
 		I've ran an example on master unchanged code catalyst/examples/_tests_mnist_stages/config1.yml, but with 9 stages.
 Got a _metrics.json file with 3 checkpoints + last and best.
 I think that for collecting all metrics we need to add separate metrics list with all the metrics and make one save for this one at stage end in separate file.
 Or we can save all metrics + n_best + best + last in one metrics file, if that suits our needs more.
 Got a thought that a PR will be more than a thousand words. :)
 		</comment>
 	</comments>
 </bug>
<commit id='67681675591bb856c248fb7a5d8e228835c65548' author='Artem Zolkin' date='2019-10-22 07:47:59+03:00'>
 	<dmm_unit complexity='1.0' interfacing='1.0' size='0.0'></dmm_unit>
 	<modification change_type='MODIFY' old_name='catalyst\dl\callbacks\checkpoint.py' new_name='catalyst\dl\callbacks\checkpoint.py'>
 		<file_info nloc='292' complexity='41' token_count='1612'></file_info>
 		<method name='get_metric' parameters='self,kwargs'>
 				<method_info nloc='15' complexity='3' token_count='74' nesting_level='1' start_line='289' end_line='304'></method_info>
 			<added_lines>290,294,295,296,297,299,300,301,302,303</added_lines>
 			<deleted_lines>290</deleted_lines>
 		</method>
 		<method name='get_metric' parameters='self,last_valid_metrics'>
 				<method_info nloc='18' complexity='3' token_count='100' nesting_level='1' start_line='130' end_line='148'></method_info>
 			<added_lines>131,135,136,137,138,139,142,143,144</added_lines>
 			<deleted_lines>131,135,138,139</deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines>101,198,199,200,280,329,330</added_lines>
 			<deleted_lines>101,193,194,195,197,285</deleted_lines>
 		</modified_lines>
 	</modification>
 </commit>
</bug_data>
