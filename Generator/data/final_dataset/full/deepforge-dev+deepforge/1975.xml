<bug_data>
<bug id='1975' author='brollb' open_date='2020-11-10T22:08:56Z' closed_time='2020-11-11T14:45:52Z'>
 	<summary>Create multiple plots in a single operation</summary>
 	<description>
 Currently, this does not appear to be supported...
 	</description>
 	<comments>
 		<comment id='1' author='brollb' date='2020-11-10T22:22:41Z'>
 		This is the code that I was running and expecting to see two plots generated:
 from matplotlib import pyplot as plt 
 from tensorflow.keras.optimizers import Adam
 
 class TrainNodePredictor():
     def __init__(self, model, learning_rate=0.005, epochs=50):
         self.model = model
         self.epochs = epochs
         self.learning_rate = learning_rate
     def execute(self, data, val_data):
         optimizer = Adam(lr=self.learning_rate)
         self.model.compile(optimizer=optimizer, loss='categorical_crossentropy', weighted_metrics=['acc'])
         self.model.summary()
         X, A, y = data
         val_X, val_A, val_y = val_data
         val_data = ([val_X, val_A], val_y)
         unknowns = X.argmin(2)
         history = self.model.fit([X, A],
                         y,
                         sample_weight=unknowns,
                         epochs=self.epochs,
                         validation_data=val_data,
                         shuffle=True)
         plt.figure(0)
         plt.plot(history.history['acc'], label='train')
         plt.plot(history.history['val_acc'], label='val')
         plt.title('Accuracy')
         plt.xlabel('epoch')
         plt.ylabel('accuracy')
         plt.legend(['train', 'val'])
         plt.show()
 
         plt.figure(1)
         plt.plot(history.history['loss'], label='train')
         plt.plot(history.history['val_loss'], label='val')
         plt.title('Loss')
         plt.xlabel('epoch')
         plt.ylabel('loss')
         plt.legend(['train', 'val'])
         plt.show()
         return self.model
 		</comment>
 		<comment id='2' author='brollb' date='2020-11-10T22:54:20Z'>
 		This needs a fix in upstream webgme-plotly, opening an issue there.
 The above comment is not correct. The widget already handles array of PlotlyJSONs.
 		</comment>
 	</comments>
 </bug>
<commit id='cead1ec7f8df746c89d312fe05646be6a2cf2925' author='Umesh Timalsina' date='2020-11-11 08:45:49-06:00'>
 	<dmm_unit complexity='None' interfacing='None' size='None'></dmm_unit>
 	<modification change_type='MODIFY' old_name='src\plugins\ExecuteJob\ExecuteJob.Metadata.js' new_name='src\plugins\ExecuteJob\ExecuteJob.Metadata.js'>
 		<file_info nloc='106' complexity='24' token_count='863'></file_info>
 		<method name='ExecuteJob.prototype.parseForMetadataCmds' parameters='job,lines,skip'>
 				<method_info nloc='41' complexity='6' token_count='282' nesting_level='0' start_line='59' end_line='127'></method_info>
 			<added_lines>105</added_lines>
 			<deleted_lines>105</deleted_lines>
 		</method>
 		<method name='(anonymous)' parameters=''>
 				<method_info nloc='1' complexity='1' token_count='14' nesting_level='0' start_line='105' end_line='105'></method_info>
 			<added_lines>105</added_lines>
 			<deleted_lines>105</deleted_lines>
 		</method>
 		<method name='ExecuteJob.prototype.onMetadataCommand' parameters='job,cmd,id,content'>
 				<method_info nloc='8' complexity='2' token_count='80' nesting_level='0' start_line='102' end_line='110'></method_info>
 			<added_lines>105</added_lines>
 			<deleted_lines>105</deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines></added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 </commit>
</bug_data>
