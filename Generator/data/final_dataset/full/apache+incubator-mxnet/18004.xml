<bug_data>
<bug id='18004' author='hgt312' open_date='2020-04-09T18:44:41Z' closed_time='2020-05-15T22:37:05Z'>
 	<summary>Wrong result when using new numpy ffi in deferred compute</summary>
 	<description>
 Find it in CI result of &lt;denchmark-link:https://github.com/apache/incubator-mxnet/pull/17958&gt;#17958&lt;/denchmark-link&gt;
 .
 &lt;denchmark-h:h2&gt;Reproduce:&lt;/denchmark-h&gt;
 
 Sample code, use master branch
 import mxnet as mx
 import mxnet._deferred_compute as dc
 from mxnet import np, npx
 npx.set_np()
 with dc.context():
     a = np.ones((2, 2))
     b = np.tril(a, 1)
     c = np.tril(a, -1)
 
 sym = dc.get_symbol([b, c], sym_cls=mx.sym.np._Symbol)
 res = sym.bind(mx.context.current_context(), args={}).forward()
 res
 Results:
 &lt;denchmark-code&gt;[
 [[1. 1.]
  [1. 1.]]
 &lt;NDArray 2x2 @cpu(0)&gt;,
 [[1. 1.]
  [1. 1.]]
 &lt;NDArray 2x2 @cpu(0)&gt;]
 &lt;/denchmark-code&gt;
 
 If replace _api_internal.tril by _npi.tril, the result is right.
 &lt;denchmark-link:https://github.com/leezu&gt;@leezu&lt;/denchmark-link&gt;
  Can you take a look at this?
 	</description>
 	<comments>
 		<comment id='1' author='hgt312' date='2020-04-09T19:07:50Z'>
 		&lt;denchmark-link:https://github.com/hzfan&gt;@hzfan&lt;/denchmark-link&gt;
 
 		</comment>
 		<comment id='2' author='hgt312' date='2020-04-09T21:52:15Z'>
 		Thanks for reporting the issue. I can confirm that disabling the new FFI for tril via below patch avoids the issue. I'll take a look why the two FFIs behave differently
 diff --git a/python/mxnet/ndarray/numpy/_op.py b/python/mxnet/ndarray/numpy/_op.py
 index 4820f56f3..8ff7ba073 100644
 --- a/python/mxnet/ndarray/numpy/_op.py
 +++ b/python/mxnet/ndarray/numpy/_op.py
 @@ -2051,7 +2051,7 @@ def tril(m, k=0):
             [ 7.,  8.,  0.],
             [10., 11., 12.]])
      """
 -    return _api_internal.tril(m, k)
 +    return _npi.tril(m, k)
 
 
  def _unary_func_helper(x, fn_array, fn_scalar, out=None, **kwargs):
 		</comment>
 		<comment id='3' author='hgt312' date='2020-04-17T03:48:46Z'>
 		&lt;denchmark-link:https://github.com/leezu&gt;@leezu&lt;/denchmark-link&gt;
  Have you been able to find the root cause for this bug?
 		</comment>
 		<comment id='4' author='hgt312' date='2020-04-19T03:55:07Z'>
 		&lt;denchmark-link:https://github.com/haojin2&gt;@haojin2&lt;/denchmark-link&gt;
  sorry, I didn't get to dive deep on this issue yet. I'll work on this during our bug bash in the coming week.
 		</comment>
 		<comment id='5' author='hgt312' date='2020-05-12T01:07:00Z'>
 		It's due to common expression elimination. As workaround one could set MXNET_ELIMINATE_COMMON_EXPR=0.
 
 
 
 incubator-mxnet/src/executor/eliminate_common_expr_pass.cc
 
 
         Lines 59 to 94
       in
       ab4f7f6
 
 
 
 
 
 
  /*! 
 
 
 
   * \brief Determine if two Nodes have equal function such that one Node can be eliminated. 
 
 
 
   */ 
 
 
 
  bool NodeEqual(const Node* n, const Node* m) { 
 
 
 
  if (n-&gt;is_variable() || m-&gt;is_variable()) return false; 
 
 
 
  if (n-&gt;op() != m-&gt;op()) return false; 
 
 
 
  // Nodes with different attributes are considered not identical, 
 
 
 
  // though this may reject Node pairs that are in fact functionally the same. 
 
 
 
  if (n-&gt;attrs.dict != m-&gt;attrs.dict) return false; 
 
 
 
  
 
 
 
  // Ops that mutate inputs cannot be optimized out 
 
 
 
  static auto&amp; fmutate_inputs = Op::GetAttr&lt;nnvm::FMutateInputs&gt;("FMutateInputs"); 
 
 
 
  if (fmutate_inputs.get(n-&gt;op(), nullptr) != nullptr) return false; 
 
 
 
  
 
 
 
  // Stateful ops cannot be be equal to each other 
 
 
 
  static auto&amp; fstateful = Op::GetAttr&lt;FCreateOpState&gt;("FCreateOpState"); 
 
 
 
  if (fstateful.get(n-&gt;op(), nullptr) != nullptr) 
 
 
 
  return false; 
 
 
 
  
 
 
 
  // Check to see if the user has explicitly set THasDeterministicOutput to override the 
 
 
 
  // subsequent determination of Node equality based on resource use. 
 
 
 
  static auto&amp; deterministic_output = 
 
 
 
        Op::GetAttr&lt;THasDeterministicOutput&gt;("THasDeterministicOutput"); 
 
 
 
  if (deterministic_output.contains(n-&gt;op())) 
 
 
 
  return deterministic_output[n-&gt;op()]; 
 
 
 
  
 
 
 
  // Ops that require resource could ask for 
 
 
 
  // random resource, so need to be explicitly marked 
 
 
 
  // to be eligible 
 
 
 
  static auto&amp; resource_request = Op::GetAttr&lt;FResourceRequest&gt;("FResourceRequest"); 
 
 
 
  static auto&amp; resource_request_ex = Op::GetAttr&lt;FResourceRequestEx&gt;("FResourceRequestEx"); 
 
 
 
  if (resource_request.get(n-&gt;op(), nullptr) != nullptr) return false; 
 
 
 
  if (resource_request_ex.get(n-&gt;op(), nullptr) != nullptr) return false; 
 
 
 
  
 
 
 
  return true; 
 
 
 
  } 
 
 
 
 
 
 For the old FFI, n-&gt;attrs.dict != m-&gt;attrs.dict and the two nodes are preserved.
 But in the new FFI, n-&gt;attrs.dict == m-&gt;attrs.dict and the np.tril(a, -1) is replaced by np.tril(a, 1).
 For the new FFI, the reason is
 
 
 
 incubator-mxnet/src/api/operator/utils.h
 
 
         Lines 52 to 57
       in
       7bef85e
 
 
 
 
 
 
  template&lt;typename T&gt; 
 
 
 
  void SetAttrDict(nnvm::NodeAttrs* attrs) { 
 
 
 
  if (is_recording()) { 
 
 
 
      ::dmlc::get&lt;T&gt;(attrs-&gt;parsed).SetAttrDict(&amp;(attrs-&gt;dict)); 
 
 
 
    } 
 
 
 
  } 
 
 
 
 
 
 only parses attributes if autograd is enabled, whereas the old FFI always parses attributes. This was an oversight when I rebased the DC PR on top of the FFI update PR.
 		</comment>
 	</comments>
 </bug>
<commit id='37280e4ddf00cacdac50c1e798fd2a14da38ae8d' author='Leonard Lausen' date='2020-05-15 15:36:55-07:00'>
 	<dmm_unit complexity='1.0' interfacing='1.0' size='1.0'></dmm_unit>
 	<modification change_type='MODIFY' old_name='src\api\operator\utils.cc' new_name='src\api\operator\utils.cc'>
 		<file_info nloc='77' complexity='16' token_count='573'></file_info>
 		<method name='mxnet::is_deferred_compute' parameters=''>
 				<method_info nloc='3' complexity='1' token_count='16' nesting_level='1' start_line='33' end_line='35'></method_info>
 			<added_lines>33,34,35</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<method name='mxnet::Invoke' parameters='op,attrs,num_inputs,inputs,num_outputs,outputs'>
 				<method_info nloc='26' complexity='5' token_count='226' nesting_level='1' start_line='80' end_line='107'></method_info>
 			<added_lines>101</added_lines>
 			<deleted_lines>97</deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines>36</added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 	<modification change_type='MODIFY' old_name='src\api\operator\utils.h' new_name='src\api\operator\utils.h'>
 		<file_info nloc='37' complexity='5' token_count='258'></file_info>
 		<method name='mxnet::SetAttrDict' parameters='attrs'>
 				<method_info nloc='5' complexity='3' token_count='45' nesting_level='1' start_line='54' end_line='58'></method_info>
 			<added_lines>55</added_lines>
 			<deleted_lines>54</deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines>51</added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 	<modification change_type='MODIFY' old_name='tests\python\unittest\test_deferred_compute.py' new_name='tests\python\unittest\test_deferred_compute.py'>
 		<file_info nloc='343' complexity='111' token_count='3336'></file_info>
 		<method name='test_dc_numpy_tril.f' parameters='a,nd'>
 				<method_info nloc='6' complexity='1' token_count='54' nesting_level='1' start_line='166' end_line='171'></method_info>
 			<added_lines>166,167,168,169,170,171</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<method name='test_dc_numpy_tril' parameters=''>
 				<method_info nloc='4' complexity='2' token_count='29' nesting_level='0' start_line='165' end_line='174'></method_info>
 			<added_lines>165,166,167,168,169,170,171,172,173,174</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines>175,176</added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 </commit>
</bug_data>
