<bug_data>
<bug id='19256' author='samskalicky' open_date='2020-09-30T07:13:03Z' closed_time='2020-10-02T22:52:31Z'>
 	<summary>Multiple subgraph properties with single backend issue with optimize_for</summary>
 	<description>
 &lt;denchmark-h:h2&gt;Description&lt;/denchmark-h&gt;
 
 Theres a difference in the flow between get_backend_symbol and optimize_for when a single backend has multiple subgraph properties that results in the indexed graph not being updated between subgraph properties.
 &lt;denchmark-h:h3&gt;Error Message&lt;/denchmark-h&gt;
 
 &lt;denchmark-code&gt;Traceback (most recent call last):
   File "test.py", line 22, in &lt;module&gt;
     sym_block.optimize_for(mx.nd.zeros((64, 4, 10, 10)), backend='MKLDNN_QUANTIZE')
   File "/home/ubuntu/v1.7.x/python/mxnet/gluon/block.py", line 1089, in optimize_for
     self._build_cache(x, *args)
   File "/home/ubuntu/v1.7.x/python/mxnet/gluon/block.py", line 979, in _build_cache
     out = out.optimize_for(self._backend, arg_array, aux_array, ctx, **self._backend_opts)
   File "/home/ubuntu/v1.7.x/python/mxnet/symbol/symbol.py", line 1531, in optimize_for
     ctypes.byref(new_aux_names)))
   File "/home/ubuntu/v1.7.x/python/mxnet/base.py", line 246, in check_call
     raise get_last_ffi_error()
 mxnet.base.MXNetError: Traceback (most recent call last):
   File "src/operator/subgraph/build_subgraph.cc", line 80
 MXNetError: Check failed: input_nid &lt; simple_nodes-&gt;size() (6 vs. 6) :
 &lt;/denchmark-code&gt;
 
 &lt;denchmark-h:h2&gt;To Reproduce&lt;/denchmark-h&gt;
 
 &lt;denchmark-code&gt;from mxnet.util import use_np
 from mxnet.gluon import nn, HybridBlock
 import mxnet as mx
 import numpy as np
 attr = {'sg_mkldnn_conv_bn_0' : {'with_bn': 'true'}}
 data = mx.symbol.Variable('data', shape=(64, 4, 10, 10), dtype='float32')
 data2 = mx.symbol.Variable('data2', shape=(64, 64, 10, 10), dtype='float32')
 weight1 = mx.symbol.Variable('conv1_weight', dtype='float32')
 weight2 = mx.symbol.Variable('conv2_weight', dtype='float32', shape=(64,64,1,1))
 conv1 = mx.symbol.Convolution(data=data, weight=weight1, name='conv1', num_filter=64,
                            kernel=(1, 1), stride=(1, 1), no_bias=True)
 bn1 = mx.symbol.BatchNorm(data=conv1, name="bn1")
 conv2 = mx.symbol.Convolution(data=bn1, weight=weight2, name='conv2', num_filter=64,
                            kernel=(1, 1), stride=(1, 1), no_bias=True)
 bn2 = mx.symbol.BatchNorm(data=conv2, name="bn2")
 sum = bn2 + data2
 inputs = mx.sym.var('data', dtype='float32')
 sym_block = mx.gluon.SymbolBlock(sum, [inputs])
 for k, v in sym_block.collect_params().items():
     v.initialize()
 mm = sym_block(mx.nd.zeros((64, 4, 10, 10)))
 sym_block.optimize_for(mx.nd.zeros((64, 4, 10, 10)), backend='MKLDNN_QUANTIZE')
 &lt;/denchmark-code&gt;
 
 &lt;denchmark-h:h3&gt;Steps to reproduce&lt;/denchmark-h&gt;
 
 
 clone v1.7.x branch and build from source
 run code above
 
 &lt;denchmark-h:h3&gt;Analysis&lt;/denchmark-h&gt;
 
 The error is occurring at the  on line 80 where theres a mismatch in the Graph definition (the input of a node is pointing to another node ID that hasnt been seen yet, so this is breaking topological ordering):
 
 
 Some debugging finds that the indexed graph inside of an &lt;denchmark-link:https://github.com/apache/incubator-tvm/blob/master/nnvm/src/core/graph.cc#L31-L36&gt;nnvm::Graph object is only built once&lt;/denchmark-link&gt;
 :
 const IndexedGraph&amp; Graph::indexed_graph() const {
   if (indexed_graph_ == nullptr) {
     indexed_graph_.reset(new IndexedGraph(*this));
   }
   return *indexed_graph_;
 }
 So after subsequent subgraph properties the graph is not updated, causing the error in this issue. Since the indexed_graph_ is private, theres no way to reset it.
 Comparing the get_backend_symbol flow the Graph is created every iteration for each subgraph property and stored in the Symbol between iterations:
 
 
 
 incubator-mxnet/src/c_api/c_api_symbolic.cc
 
 
         Lines 1302 to 1308
       in
       16280ad
 
 
 
 
 
 
  nnvm::Graph g = Symbol2Graph(*s); 
 
 
 
  property-&gt;SetAttr("graph", g); 
 
 
 
  g.attrs["subgraph_property"] = std::make_shared&lt;nnvm::any&gt;(property); 
 
 
 
  g = ApplyPass(std::move(g), "BuildSubgraph"); 
 
 
 
  property-&gt;RemoveAttr("graph"); 
 
 
 
  g.attrs.erase("subgraph_property"); 
 
 
 
  s-&gt;outputs = g.outputs; 
 
 
 
 
 
 Where as in the optimize_for flow the Graph is created once:
 
 
 
 incubator-mxnet/src/c_api/c_api_symbolic.cc
 
 
          Line 1375
       in
       16280ad
 
 
 
 
 
 
  nnvm::Graph g = Symbol2Graph(*s); 
 
 
 
 
 
 and then re-used for each subgraph propery:
 
 
 
 incubator-mxnet/src/c_api/c_api_symbolic.cc
 
 
         Lines 1498 to 1502
       in
       16280ad
 
 
 
 
 
 
  property-&gt;PrePartition(g, options_map); 
 
 
 
  g.attrs["subgraph_property"] = std::make_shared&lt;nnvm::any&gt;(property); 
 
 
 
  g = ApplyPass(std::move(g), "BuildSubgraph"); 
 
 
 
  g.attrs.erase("subgraph_property"); 
 
 
 
  property-&gt;PostPartition(g); 
 
 
 
 
 
 So we need to create a new Graph object for each iteration in order to fix this.
 FYI &lt;denchmark-link:https://github.com/mseth10&gt;@mseth10&lt;/denchmark-link&gt;
  &lt;denchmark-link:https://github.com/Kh4L&gt;@Kh4L&lt;/denchmark-link&gt;
  &lt;denchmark-link:https://github.com/ptrendx&gt;@ptrendx&lt;/denchmark-link&gt;
 
 	</description>
 	<comments>
 	</comments>
 </bug>
<commit id='7d3e027846b2767e330d488092e0c12b2d01b36d' author='Sam Skalicky' date='2020-10-02 15:52:30-07:00'>
 	<dmm_unit complexity='0.0' interfacing='0.0' size='0.0'></dmm_unit>
 	<modification change_type='MODIFY' old_name='src\c_api\c_api_symbolic.cc' new_name='src\c_api\c_api_symbolic.cc'>
 		<file_info nloc='1218' complexity='159' token_count='10507'></file_info>
 		<method name='MXOptimizeForBackend' parameters='sym_handle,backend_name,dev_type,ret_sym_handle,args_len,in_args_handle,aux_len,in_aux_handle,num_options,keys,vals,num_input_shapes,input_shape_names,input_shape_data,input_shape_idx,num_input_dtypes,input_dtype_names,input_dtypes,num_input_stypes,input_stype_names,input_stypes,skip_infer,new_args_cnt,new_args_handle,new_arg_names_handle,new_aux_cnt,new_aux_handle,new_aux_names_handle'>
 				<method_info nloc='190' complexity='22' token_count='1940' nesting_level='0' start_line='1268' end_line='1487'></method_info>
 			<added_lines>1301,1302,1303,1304,1305,1309,1310,1312,1313,1314,1315,1316,1317,1318,1319,1320,1321,1322,1323,1324,1325,1326,1327,1328,1329,1332,1333,1334,1335,1336,1337,1338,1339,1340,1342,1343,1344,1345,1346,1347,1348,1349,1350,1351,1352,1353,1355,1356,1357,1358,1359,1360,1361,1362,1363,1364,1365,1366,1367,1368,1369,1370,1371,1372,1373,1374,1375,1376,1377,1378,1379,1381,1385,1388,1389,1390,1391,1392,1393,1394,1395,1396,1397,1398,1399,1400,1401,1402,1403,1404,1405,1406,1407,1408,1409,1410,1411,1412,1413,1416,1417,1418,1419,1420,1421,1429,1435,1439,1452,1484</added_lines>
 			<deleted_lines>1301,1302,1303,1304,1305,1310,1311,1312,1313,1314,1315,1316,1317,1318,1319,1320,1321,1322,1325,1326,1327,1328,1329,1330,1331,1332,1333,1335,1336,1337,1338,1339,1340,1341,1342,1343,1344,1345,1346,1347,1348,1349,1350,1351,1352,1353,1354,1355,1356,1357,1358,1359,1360,1361,1362,1363,1364,1365,1366,1367,1369,1370,1371,1374,1376,1378,1381,1382,1383,1384,1385,1386,1388,1389,1390,1391,1392,1393,1394,1395,1396,1397,1398,1399,1400,1401,1402,1403,1404,1405,1406,1407,1408,1409,1410,1411,1413,1414,1415,1416,1475</deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines></added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 </commit>
</bug_data>
