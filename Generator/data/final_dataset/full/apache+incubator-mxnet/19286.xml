<bug_data>
<bug id='19286' author='szha' open_date='2020-10-03T20:48:19Z' closed_time='2020-10-06T18:11:45Z'>
 	<summary>infer shape error in hybridized block for zero-size input</summary>
 	<description>
 &lt;denchmark-h:h2&gt;Description&lt;/denchmark-h&gt;
 
 For a hybridized HybridBlock, the new forward interface throws an error for zero-size input
 &lt;denchmark-h:h3&gt;Error Message&lt;/denchmark-h&gt;
 
 &lt;denchmark-code&gt;MXNetError: MXNetError: Shape inconsistent, Provided = [2,4,0,128], inferred shape=[2,4,4,128]
 &lt;/denchmark-code&gt;
 
 
 Complete error
 ---&gt; 17 model(np.zeros((2, 2, 4, 0, 128)))
 ~/mxnet/python/mxnet/util.py in _with_np_shape(*args, **kwargs)
 296         def _with_np_shape(*args, **kwargs):
 297             with np_shape(active=True):
 --&gt; 298                 return func(*args, **kwargs)
 299         return _with_np_shape
 300     else:
 ~/mxnet/python/mxnet/util.py in _with_np_array(*args, **kwargs)
 480         def _with_np_array(*args, **kwargs):
 481             with np_array(active=True):
 --&gt; 482                 return func(*args, **kwargs)
 483         return _with_np_array
 484     else:
 ~/mxnet/python/mxnet/gluon/block.py in call(self, x, *args)
 1427
 1428             with x.ctx:
 -&gt; 1429                 return self._call_cached_op(x, *args)
 1430
 1431     def forward(self, x, *args):
 ~/mxnet/python/mxnet/util.py in _with_np_shape(*args, **kwargs)
 296         def _with_np_shape(*args, **kwargs):
 297             with np_shape(active=True):
 --&gt; 298                 return func(*args, **kwargs)
 299         return _with_np_shape
 300     else:
 ~/mxnet/python/mxnet/util.py in _with_np_array(*args, **kwargs)
 480         def _with_np_array(*args, **kwargs):
 481             with np_array(active=True):
 --&gt; 482                 return func(*args, **kwargs)
 483         return _with_np_array
 484     else:
 ~/mxnet/python/mxnet/gluon/block.py in _call_cached_op(self, *args)
 1096     def _call_cached_op(self, *args):
 1097         if self._cached_op is None:
 -&gt; 1098             self._build_cache(*args)
 1099         assert self._cached_op, "Gluon failed to build the cache. " 
 1100                                 "This should never happen. " \
 ~/mxnet/python/mxnet/util.py in _with_np_shape(*args, **kwargs)
 296         def _with_np_shape(*args, **kwargs):
 297             with np_shape(active=True):
 --&gt; 298                 return func(*args, **kwargs)
 299         return _with_np_shape
 300     else:
 ~/mxnet/python/mxnet/util.py in _with_np_array(*args, **kwargs)
 480         def _with_np_array(*args, **kwargs):
 481             with np_array(active=True):
 --&gt; 482                 return func(*args, **kwargs)
 483         return _with_np_array
 484     else:
 ~/mxnet/python/mxnet/gluon/block.py in _build_cache(self, *args)
 993
 994     def _build_cache(self, *args):
 --&gt; 995         data, out = self._get_graph(*args)
 996         data_names = {data.name: i for i, data in enumerate(data)}
 997         params = {p.var().name: p for p in self.collect_params().values()}
 ~/mxnet/python/mxnet/util.py in _with_np_shape(*args, **kwargs)
 296         def _with_np_shape(*args, **kwargs):
 297             with np_shape(active=True):
 --&gt; 298                 return func(*args, **kwargs)
 299         return _with_np_shape
 300     else:
 ~/mxnet/python/mxnet/util.py in _with_np_array(*args, **kwargs)
 480         def _with_np_array(*args, **kwargs):
 481             with np_array(active=True):
 --&gt; 482                 return func(*args, **kwargs)
 483         return _with_np_array
 484     else:
 ~/mxnet/python/mxnet/gluon/block.py in _get_graph(self, *args)
 989                 return self._get_graph_v1(*args)
 990             else:  # Gluon 2 based on deferred compute mode
 --&gt; 991                 return self._get_graph_v2(*args)
 992         return self._cached_graph
 993
 ~/mxnet/python/mxnet/util.py in _with_np_shape(*args, **kwargs)
 296         def _with_np_shape(*args, **kwargs):
 297             with np_shape(active=True):
 --&gt; 298                 return func(*args, **kwargs)
 299         return _with_np_shape
 300     else:
 ~/mxnet/python/mxnet/util.py in _with_np_array(*args, **kwargs)
 480         def _with_np_array(*args, **kwargs):
 481             with np_array(active=True):
 --&gt; 482                 return func(*args, **kwargs)
 483         return _with_np_array
 484     else:
 ~/mxnet/python/mxnet/gluon/block.py in _get_graph_v2(self, *args)
 978             args = _regroup(flatten_args, self._in_format)
 979             with autograd.pause(), dc.context():
 --&gt; 980                 out = super().call(*args)
 981             flatten_out, self._out_format = _flatten(out, "output")
 982             symbol_outputs = dc.get_symbol(flatten_out, sym_cls=type(symbol_inputs[0]))
 ~/mxnet/python/mxnet/gluon/block.py in call(self, *args)
 709             hook(self, args)
 710
 --&gt; 711         out = self.forward(*args)
 712
 713         for hook in self._forward_hooks.values():
 ~/mxnet/python/mxnet/util.py in _with_np_shape(*args, **kwargs)
 296         def _with_np_shape(*args, **kwargs):
 297             with np_shape(active=True):
 --&gt; 298                 return func(*args, **kwargs)
 299         return _with_np_shape
 300     else:
 ~/mxnet/python/mxnet/util.py in _with_np_array(*args, **kwargs)
 480         def _with_np_array(*args, **kwargs):
 481             with np_array(active=True):
 --&gt; 482                 return func(*args, **kwargs)
 483         return _with_np_array
 484     else:
  in forward(self, x)
 8         super().init()
 9     def forward(self, x):
 ---&gt; 10         return x[0]
 11
 12
 ~/mxnet/python/mxnet/numpy/multiarray.py in getitem(self, key)
 743                     'index {} is out of bounds for axis 0 with size {}'.format(
 744                         key, shape[0]))
 --&gt; 745             return self._at(key)
 746         elif isinstance(key, py_slice):
 747             # Unlike numpy/_symbol.py, calls MXNDArraySlice64 writable memory
 ~/mxnet/python/mxnet/ndarray/ndarray.py in _at(self, idx)
 1423         else:
 1424             check_call(_LIB.MXNDArrayAt(
 -&gt; 1425                 self.handle, ctypes.c_uint32(idx), ctypes.byref(handle)))
 1426         return self.class(handle=handle, writable=self.writable)
 1427
 ~/mxnet/python/mxnet/base.py in check_call(ret)
 244     """
 245     if ret != 0:
 --&gt; 246         raise get_last_ffi_error()
 247
 248
 MXNetError: MXNetError: Shape inconsistent, Provided = [2,4,0,128], inferred shape=[2,4,4,128]
 
 &lt;denchmark-h:h2&gt;To Reproduce&lt;/denchmark-h&gt;
 
 Run the following script
 &lt;denchmark-code&gt;from mxnet import np, npx, gluon, use_np
 
 npx.set_np()
 
 @use_np
 class TestModel(gluon.HybridBlock):
     def __init__(self):
         super().__init__()
     def forward(self, x):
         return x[0]
 
 
 model = TestModel()
 model.initialize()
 model.hybridize()
 
 model(np.zeros((2, 2, 4, 0, 128)))
 &lt;/denchmark-code&gt;
 
 &lt;denchmark-h:h2&gt;Environment&lt;/denchmark-h&gt;
 
 
 Environment Information
 ----------Python Info----------
 ('Version      :', '3.7.8')
 ('Compiler     :', 'GCC 4.2.1 Compatible Apple LLVM 11.0.3 (clang-1103.0.29.20) (-macos10.15-objc-')
 ('Build        :', ('default', 'Jun  5 2020 22:59:21'))
 ('Arch         :', ('64bit', ''))
 ------------Pip Info-----------
 No corresponding pip install for current python.
 ----------MXNet Info-----------
 No MXNet installed.
 ----------System Info----------
 ('Platform     :', 'Darwin-19.6.0-x86_64-i386-64bit')
 ('system       :', 'Darwin')
 ('node         :', 'a483e79ab3ab')
 ('release      :', '19.6.0')
 ('version      :', 'Darwin Kernel Version 19.6.0: Mon Aug 31 22:12:52 PDT 2020; root:xnu-6153.141.2~1/RELEASE_X86_64')
 ----------Hardware Info----------
 ('machine      :', 'x86_64')
 ('processor    :', 'i386')
 machdep.cpu.brand_string: Intel(R) Core(TM) i7-8569U CPU @ 2.80GHz
 machdep.cpu.features: FPU VME DE PSE TSC MSR PAE MCE CX8 APIC SEP MTRR PGE MCA CMOV PAT PSE36 CLFSH DS ACPI MMX FXSR SSE SSE2 SS HTT TM PBE SSE3 PCLMULQDQ DTES64 MON DSCPL VMX EST TM2 SSSE3 FMA CX16 TPR PDCM SSE4.1 SSE4.2 x2APIC MOVBE POPCNT AES PCID XSAVE OSXSAVE SEGLIM64 TSCTMR AVX1.0 RDRAND F16C
 machdep.cpu.leaf7_features: RDWRFSGS TSC_THREAD_OFFSET SGX BMI1 AVX2 SMEP BMI2 ERMS INVPCID FPU_CSDS MPX RDSEED ADX SMAP CLFSOPT IPT MDCLEAR TSXFA IBRS STIBP L1DF SSBD
 machdep.cpu.extfeatures: SYSCALL XD 1GBPAGE EM64T LAHF LZCNT PREFETCHW RDTSCP TSCI
 ----------Network Test----------
 Setting timeout: 10
 Timing for MXNet: https://github.com/apache/incubator-mxnet, DNS: 0.0040 sec, LOAD: 2.5430 sec.
 Timing for PYPI: https://pypi.python.org/pypi/pip, DNS: 0.6464 sec, LOAD: 9.0609 sec.
 Timing for FashionMNIST: https://apache-mxnet.s3-accelerate.dualstack.amazonaws.com/gluon/dataset/fashion-mnist/train-labels-idx1-ubyte.gz, DNS: 0.0006 sec, LOAD: 2.1972 sec.
 Error open Conda: https://repo.continuum.io/pkgs/free/, HTTP Error 403: Forbidden, DNS finished in 0.000483989715576 sec.
 Timing for Gluon Tutorial(en): http://gluon.mxnet.io, DNS: 0.0009 sec, LOAD: 2.8254 sec.
 Error open Gluon Tutorial(cn): https://zh.gluon.ai, &lt;urlopen error [SSL: CERTIFICATE_VERIFY_FAILED] certificate verify failed (_ssl.c:727)&gt;, DNS finished in 0.00119805335999 sec.
 ----------Environment----------
 CC="/usr/local/opt/llvm/bin/clang"
 CXX="/usr/local/opt/llvm/bin/clang++"
 
 
 	</description>
 	<comments>
 		<comment id='1' author='szha' date='2020-10-05T18:41:23Z'>
 		This bug is related to legacy (non-numpy) reshape operator. Reshape with 0 implies "copy this dimension from input".
 We can see that all shapes are correct prior to infer_shape pass:
 &lt;denchmark-code&gt;frame #6: 0x00007fff3bd1cb8b libmxnet.so`mxnet::imperative::SetShapeType(ctx=0x00007fffffff8f18, attrs=0x00007fffffff97a8, inputs=size=1, outputs=size=1, dispatch_mode=0x00007fffffff8f24) at imperative_utils.h:208:26
    205        common::ConvertToNumpyShape(&amp;in_shapes);
    206        common::ConvertToNumpyShape(&amp;out_shapes);
    207      }
 -&gt; 208      const bool success = infershape[attrs.op](attrs, &amp;in_shapes, &amp;out_shapes);
    209      if (!success) {
    210        std::stringstream os;
    211        os &lt;&lt; "Operator " &lt;&lt; attrs.op-&gt;name &lt;&lt; " inferring shapes failed.\n";
 (lldb) parray 5 in_shapes[0].data_heap_
 (long *) $15 = 0x0000555555f45700 {
   (long) [0] = 1
   (long) [1] = 2
   (long) [2] = 4
   (long) [3] = 0
   (long) [4] = 128
 }
 (lldb) p out_shapes                                                                                                                                                                    (mxnet::ShapeVector) $16 = size=1 {
   [0] = {
     mxnet::Tuple&lt;long&gt; = {
       ndim_ = 4
       num_heap_allocated_ = 0
       data_stack_ = ([0] = 2, [1] = 4, [2] = 0, [3] = 128)
       data_heap_ = 0x0000000000000000
     }
   }
 }
 &lt;/denchmark-code&gt;
 
 But after infer_shape, 0 is replaced by 4.
 &lt;denchmark-code&gt;frame #1: 0x00007fff4968c1be libmxnet.so`mxnet::op::ReshapeShape(attrs=0x00007fffffff97a8, in_attrs=0x00005555569cbb68, out_attrs=0x00005555569cbb80) at matrix_op-inl.h:235:3
    232      &lt;&lt; "Target: " &lt;&lt; oshape
    233      &lt;&lt; "\nSource: " &lt;&lt; dshape;
    234  #endif
 -&gt; 235    SHAPE_ASSIGN_CHECK(*out_attrs, 0, oshape);
    236    return ReverseReshapeInferShape(&amp;(*in_attrs)[0], (*out_attrs)[0]);
    237  }
    238
 (lldb) p oshape
 (mxnet::TShape) $17 = {
   mxnet::Tuple&lt;long&gt; = {
     ndim_ = 4
     num_heap_allocated_ = 0
     data_stack_ = ([0] = 2, [1] = 4, [2] = 4, [3] = 128)
     data_heap_ = 0x0000000000000000
   }
 }
 &lt;/denchmark-code&gt;
 
 
 
 
 incubator-mxnet/src/operator/tensor/matrix_op-inl.h
 
 
         Lines 194 to 237
       in
       f732530
 
 
 
 
 
 
  inline bool ReshapeShape(const nnvm::NodeAttrs&amp; attrs, 
 
 
 
                           mxnet::ShapeVector *in_attrs, 
 
 
 
                           mxnet::ShapeVector *out_attrs) { 
 
 
 
  const ReshapeParam&amp; param_ = nnvm::get&lt;ReshapeParam&gt;(attrs.parsed); 
 
 
 
  CHECK_EQ(in_attrs-&gt;size(), 1U) &lt;&lt; "Input: [data]"; 
 
 
 
  CHECK_EQ(out_attrs-&gt;size(), 1U); 
 
 
 
    mxnet::TShape &amp;dshape = (*in_attrs)[0]; 
 
 
 
  if (!mxnet::ndim_is_known(dshape)) return false; 
 
 
 
    mxnet::TShape oshape; 
 
 
 
  if (param_.shape.ndim() != 0) { 
 
 
 
      oshape = InferReshapeShape(param_.shape, dshape, param_.reverse); 
 
 
 
    } else if (param_.target_shape.ndim() != -1) { 
 
 
 
  LOG(INFO) &lt;&lt; "Using target_shape will be deprecated."; 
 
 
 
      oshape = param_.target_shape; 
 
 
 
  int neg_count = 0; 
 
 
 
  index_t inf_idx = 0; 
 
 
 
  index_t start_idx = param_.keep_highest ? 1 : 0; 
 
 
 
  if (param_.keep_highest) { 
 
 
 
        oshape[0] = dshape[0]; 
 
 
 
      } 
 
 
 
  for (int i = start_idx; i &lt; oshape.ndim(); ++i) { 
 
 
 
  if (oshape[i] == 0) { 
 
 
 
          neg_count++; 
 
 
 
          inf_idx = i; 
 
 
 
        } 
 
 
 
      } 
 
 
 
  if (neg_count == 1) { 
 
 
 
        oshape[inf_idx] = 1; 
 
 
 
        oshape[inf_idx] = dshape.Size() / oshape.Size(); 
 
 
 
      } 
 
 
 
    } else { 
 
 
 
  return shape_is_known((*out_attrs)[0]) 
 
 
 
             &amp;&amp; ReverseReshapeInferShape(&amp;(*in_attrs)[0], (*out_attrs)[0]); 
 
 
 
    } 
 
 
 
  ReverseReshapeInferShape(&amp;dshape, oshape); 
 
 
 
  #if 0 
 
 
 
    CHECK_EQ(oshape.Size(), dshape.Size()) 
 
 
 
      &lt;&lt; "Target shape size is different to source. " 
 
 
 
      &lt;&lt; "Target: " &lt;&lt; oshape 
 
 
 
      &lt;&lt; "\nSource: " &lt;&lt; dshape; 
 
 
 
  #endif 
 
 
 
  SHAPE_ASSIGN_CHECK(*out_attrs, 0, oshape); 
 
 
 
  return ReverseReshapeInferShape(&amp;(*in_attrs)[0], (*out_attrs)[0]); 
 
 
 
  } 
 
 
 
 
 
 The root cause is that MXNDArrayAt, MXNDArrayReshape and MXNDArraySlice do not sufficiently distinguish between the numpy and non-numpy mode and always record legacy operators.
 We need to update the recording step to record numpy / legacy operator based on if numpy / legacy mode is enabled:
 
 
 
 incubator-mxnet/src/ndarray/ndarray.cc
 
 
         Lines 302 to 308
       in
       72eff9b
 
 
 
 
 
 
  nnvm::NodeAttrs attrs; 
 
 
 
  attrs.op = nnvm::Op::Get("Reshape");; 
 
 
 
  std::ostringstream os; 
 
 
 
  os &lt;&lt; shape; 
 
 
 
  attrs.dict.insert({"shape", os.str()}); 
 
 
 
  attrs.op-&gt;attr_parser(&amp;attrs); 
 
 
 
  std::vector&lt;NDArray*&gt; inputs(1, this), outputs(1, &amp;ret); 
 
 
 
 
 
 		</comment>
 	</comments>
 </bug>
<commit id='7c61b4ba6687f61035458afcb0c3ab5d24b6571f' author='Leonard Lausen' date='2020-10-06 11:11:44-07:00'>
 	<dmm_unit complexity='0.7222222222222222' interfacing='1.0' size='0.7222222222222222'></dmm_unit>
 	<modification change_type='MODIFY' old_name='src\ndarray\ndarray.cc' new_name='src\ndarray\ndarray.cc'>
 		<file_info nloc='1884' complexity='423' token_count='17731'></file_info>
 		<method name='mxnet::NDArray::ReshapeWithRecord' parameters='shape'>
 				<method_info nloc='42' complexity='9' token_count='337' nesting_level='1' start_line='273' end_line='321'></method_info>
 			<added_lines>305,306,307,308,309,310,311</added_lines>
 			<deleted_lines>303,306</deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines></added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 	<modification change_type='MODIFY' old_name='tests\python\unittest\test_deferred_compute.py' new_name='tests\python\unittest\test_deferred_compute.py'>
 		<file_info nloc='384' complexity='119' token_count='3666'></file_info>
 		<method name='test_indexing_empty_shape.forward' parameters='self,x'>
 				<method_info nloc='2' complexity='1' token_count='12' nesting_level='2' start_line='583' end_line='584'></method_info>
 			<added_lines>583,584</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<method name='test_indexing_empty_shape' parameters=''>
 				<method_info nloc='11' complexity='2' token_count='71' nesting_level='0' start_line='580' end_line='592'></method_info>
 			<added_lines>580,581,582,583,584,585,586,587,588,589,590,591,592</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines>578,579</added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 </commit>
</bug_data>
