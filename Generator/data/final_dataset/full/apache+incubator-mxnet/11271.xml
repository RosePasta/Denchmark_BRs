<bug_data>
<bug id='11271' author='leezu' open_date='2018-06-14T04:58:13Z' closed_time='2018-08-25T18:00:52Z'>
 	<summary>nd.topk regression with nan values</summary>
 	<description>
 mxnet master contains a regression in the nd.topk operator compared to mxnet v1.2. Likely &lt;denchmark-link:https://github.com/apache/incubator-mxnet/pull/10997&gt;#10997&lt;/denchmark-link&gt;
  is at fault (but I have not performed an bisection to proof that).
 Consider the following:
 Behavior in mxnet master:
 &lt;denchmark-code&gt;In [1]: a = [np.nan] * 4 + list(range(2500))
     ...: a = mx.nd.array(a)
     ...: print(a)
     ...: for k in range(3,10):
     ...:     print(mx.nd.topk(a, k=k))
     ...:
     ...:
 [  nan   nan   nan ... 2497. 2498. 2499.]
 &lt;NDArray 2504 @cpu(0)&gt;
 
 [2. 0. 1.]
 &lt;NDArray 3 @cpu(0)&gt;
 
 [2. 0. 1. 3.]
 &lt;NDArray 4 @cpu(0)&gt;
 
 [2. 4. 0. 1. 3.]
 &lt;NDArray 5 @cpu(0)&gt;
 
 [5. 4. 2. 0. 1. 3.]
 &lt;NDArray 6 @cpu(0)&gt;
 
 [2. 6. 5. 4. 0. 1. 3.]
 &lt;NDArray 7 @cpu(0)&gt;
 
 [ 2.  1. 10.  9.  8.  6.  0.  3.]
 &lt;NDArray 8 @cpu(0)&gt;
 
 [ 2.  1. 11. 10.  9.  6.  8.  0.  3.]
 &lt;NDArray 9 @cpu(0)&gt;
 &lt;/denchmark-code&gt;
 
 Behavior in mxnet v1.2:
 &lt;denchmark-code&gt;In [1]: In [1]: a = [np.nan] * 4 + list(range(2500))
    ...:     ...: a = mx.nd.array(a)
    ...:     ...: print(a)
    ...:     ...: for k in range(3,10):
    ...:     ...:     print(mx.nd.topk(a, k=k))
    ...:
 
 [  nan   nan   nan ... 2497. 2498. 2499.]
 &lt;NDArray 2504 @cpu(0)&gt;
 
 [0. 1. 2.]
 &lt;NDArray 3 @cpu(0)&gt;
 
 [0. 1. 2. 3.]
 &lt;NDArray 4 @cpu(0)&gt;
 
 [0.000e+00 1.000e+00 2.000e+00 3.000e+00 2.503e+03]
 &lt;NDArray 5 @cpu(0)&gt;
 
 [0.000e+00 1.000e+00 2.000e+00 3.000e+00 2.503e+03 2.502e+03]
 &lt;NDArray 6 @cpu(0)&gt;
 
 [0.000e+00 1.000e+00 2.000e+00 3.000e+00 2.503e+03 2.502e+03 2.501e+03]
 &lt;NDArray 7 @cpu(0)&gt;
 
 [0.000e+00 1.000e+00 2.000e+00 3.000e+00 2.503e+03 2.502e+03 2.501e+03
  2.500e+03]
 &lt;NDArray 8 @cpu(0)&gt;
 
 [0.000e+00 1.000e+00 2.000e+00 3.000e+00 2.503e+03 2.502e+03 2.501e+03
  2.500e+03 2.499e+03]
 &lt;NDArray 9 @cpu(0)&gt;
 &lt;/denchmark-code&gt;
 
 Notice how the result is correct with mxnet version 1.2 but wrong on the master version. As a sidenote, even with mxnet version 1.2 the behavior of nd.topk is inconsistent with nd.max. The latter ignores 'nan' whereas the former considers it to be the maximum element.
 &lt;denchmark-code&gt;n [9]: mx.nd.argmax(mx.nd.array([np.nan, 1]), axis=0)
 Out[9]:
 
 [1.]
 &lt;NDArray 1 @cpu(0)&gt;
 
 In [10]: mx.nd.topk(mx.nd.array([np.nan, 1]), axis=0)
 Out[10]:
 
 [0.]
 &lt;NDArray 1 @cpu(0)&gt;
 
 
 &lt;/denchmark-code&gt;
 
 Arguably there was never a guarantee that nd.topk works under the presence of nan values, but legacy code may rely on this behavior and can break in unexpected ways.
 &lt;denchmark-link:https://github.com/asmushetzel&gt;@asmushetzel&lt;/denchmark-link&gt;
 
 	</description>
 	<comments>
 		<comment id='1' author='leezu' date='2018-06-14T21:49:25Z'>
 		&lt;denchmark-link:https://github.com/leezu&gt;@leezu&lt;/denchmark-link&gt;
  thanks for submitting this issue.
 &lt;denchmark-link:https://github.com/sandeep-krishnamurthy&gt;@sandeep-krishnamurthy&lt;/denchmark-link&gt;
  could you add label "Bug" to this?
 		</comment>
 		<comment id='2' author='leezu' date='2018-06-15T09:48:41Z'>
 		Do we have ever documented in MXNet how NAN is supposed to work in comparisons? I'm not feeling confident to make code work against an arbitrary chosen behavior of some implementation rather than a clearly defined and consistent behavior.
 		</comment>
 		<comment id='3' author='leezu' date='2018-06-15T16:50:16Z'>
 		I am not aware of any documentation. Maybe &lt;denchmark-link:https://github.com/szha&gt;@szha&lt;/denchmark-link&gt;
  has more insights.
 Already in v1.2 the behavior of topk vs argmax was inconsistent under the presence of nan. However, both returned meaningful results under the respective assumption to to treat nan as top value or to ignore nan values. Currently topk treats the whole order of the array as being undefined if it contains any nan value. It would be better to adopt a treatment of nan such that the order of the array to still well defined.
 		</comment>
 		<comment id='4' author='leezu' date='2018-06-15T23:03:48Z'>
 		&lt;denchmark-link:https://github.com/piiswrong&gt;@piiswrong&lt;/denchmark-link&gt;
 
 I searched a bit through the documentation and the only place where I could find something about NaN handling was in the nansum/nanprod operators (which are specifically designed for handling NaN). All the rest is undefined. Which is kind of o.k. as having NaN in any array is likely a severe problem (see all the issues in MxNet where people got suddenly an NaN during training and see this as a bug).
 While I agree that it would be desirable to standardize NaN handling, I think
 
 whatever we do, it must be documented. Otherwise we don't have a written convention and things may change erratically all the time.
 Labeling such issues as "bug" is not correct. It can only be a bug if it violates a defined behavior
 Whatever we do, it should be consistent across all comparison operators (max, min, broadcast_greater, .....). Which could mean that we won't find any consistent solution that does not alter the behavior of at least one of such operators.
 If we can't come up with consistent handling, then NaN should be declared has having undefined behaviour whenever encountered in comparisons in MXNet
 
 		</comment>
 		<comment id='5' author='leezu' date='2018-08-25T18:00:52Z'>
 		I opened a PR to document this in the v1.3 release notes: &lt;denchmark-link:https://github.com/apache/incubator-mxnet/pull/12357&gt;#12357&lt;/denchmark-link&gt;
 
 		</comment>
 	</comments>
 </bug>
<commit id='7b0258e863f77f9a84a3acab97215cbd8f15503e' author='Leonard Lausen' date='2018-08-25 12:38:35-07:00'>
 	<dmm_unit complexity='None' interfacing='None' size='None'></dmm_unit>
 	<modification change_type='MODIFY' old_name='NEWS.md' new_name='NEWS.md'>
 		<file_info nloc='None' complexity='None' token_count='None'></file_info>
 		<modified_lines>
 			<added_lines>113</added_lines>
 			<deleted_lines>113</deleted_lines>
 		</modified_lines>
 	</modification>
 </commit>
</bug_data>
