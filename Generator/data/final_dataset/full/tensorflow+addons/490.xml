<bug_data>
<bug id='490' author='PhilipMay' open_date='2019-09-09T21:54:09Z' closed_time='2019-11-05T02:20:34Z'>
 	<summary>Bug in F1 and FBeta implementation and test</summary>
 	<description>
 Describe the bug
 The tests for FBeta and F1 both use a softmax function with just one output.
 
 
 
 
 addons/tensorflow_addons/metrics/fbeta_test.py
 
 
          Line 122
       in
       7624954
 
 
 
 
 
 
  model.add(layers.Dense(1, activation='softmax')) 
 
 
 
 
 
 
 
 
 addons/tensorflow_addons/metrics/f1_test.py
 
 
          Line 116
       in
       7624954
 
 
 
 
 
 
  model.add(layers.Dense(1, activation='softmax')) 
 
 
 
 
 
 
 The effect is that the output (prediction) is always 1. The right activation function for a binary calssification (with just one output is sigmoid). But this is not the only problem. This bug in the test hides an even worse other bug.
 The other bug is that F1 and FBeta both can not handle values other then 1 (1.0) and 0 (0.0) as the predicted result. But the predictions of a binary classification (with simoid) and multi class classification with softmax is always somewhere between 1 and 0 (one hot encoded for multi class). The result of this bug is that this implementation of F1 and FBeta always return 0.0 when the predicted results are not exactly 0 (0.0) or 1 (1.0) - which is not realistic.
 Also all other tests of F1 and FBeta have values of 0 or 1 as the predicted results. This does not reflect reality.
 
 
 
 
 addons/tensorflow_addons/metrics/fbeta_test.py
 
 
          Line 91
       in
       7624954
 
 
 
 
 
 
  preds = tf.constant([[0, 0, 1], [1, 1, 0], [1, 1, 1]], dtype=tf.int32) 
 
 
 
 
 
 
 
 
 addons/tensorflow_addons/metrics/f1_test.py
 
 
          Line 88
       in
       7624954
 
 
 
 
 
 
  preds = tf.constant([[0, 0, 1], [1, 1, 0], [1, 1, 1]], dtype=tf.int32) 
 
 
 
 
 
 
 Code to reproduce the issue
 Just change softmax to sigmoid in the tests and change verbose=1 and see the results.
 	</description>
 	<comments>
 		<comment id='1' author='PhilipMay' date='2019-09-09T22:20:31Z'>
 		I guess something like this needs to be added:
 &lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/2ff39d00faf8f7e433ddcae0aa278f6e573b0c55/tensorflow/python/keras/metrics.py#L2767&gt;https://github.com/tensorflow/tensorflow/blob/2ff39d00faf8f7e433ddcae0aa278f6e573b0c55/tensorflow/python/keras/metrics.py#L2767&lt;/denchmark-link&gt;
 
 		</comment>
 		<comment id='2' author='PhilipMay' date='2019-09-09T22:23:37Z'>
 		Thanks, &lt;denchmark-link:https://github.com/PhilipMay&gt;@PhilipMay&lt;/denchmark-link&gt;
 . You are right that result will not be an exact number.
 The initial implementation we had do not indicate the probability.
 preds = tf.constant([[0, 0, 1], [1, 1, 0], [1, 1, 1]], dtype=tf.int32) 
 In this [0, 0, 1] does not indicate probability. Think we have 3 classes and the predicted is class 3 which is encoded as [0,0,1]
 We may need to add argmax to change that in case if we are feeding directly.
 Will take up this one and post the updates
 		</comment>
 		<comment id='3' author='PhilipMay' date='2019-09-09T22:28:43Z'>
 		
 We may need to add argmax to change that in case if we are feeding directly.
 
 Yes - if we want to be able to add the metric to keras at training time we need that. Mybe you could have a look at the metrics implementations in Tensorflow.
 Thanks you very much. :-)
 		</comment>
 		<comment id='4' author='PhilipMay' date='2019-09-09T22:30:04Z'>
 		&lt;denchmark-link:https://github.com/seanpmorgan&gt;@seanpmorgan&lt;/denchmark-link&gt;
  Can you please assign this issue to me?
 		</comment>
 		<comment id='5' author='PhilipMay' date='2019-09-10T10:54:53Z'>
 		This here seems to work for me - not sure if it still has bugs in border cases or can be implemented more efficient:
     def update_state(self, y_true, y_pred, sample_weight=None):
         cond = tf.equal(y_pred, tf.reduce_max(y_pred))
         y_pred = tf.where(cond, y_pred, tf.zeros_like(y_pred))
         not_cond = tf.math.logical_not(cond)
         y_pred = tf.where(not_cond, y_pred, tf.ones_like(y_pred))
         
         y_true = tf.cast(y_true, tf.int32)
         y_pred = tf.cast(y_pred, tf.int32)
 		</comment>
 		<comment id='6' author='PhilipMay' date='2019-09-10T12:24:24Z'>
 		For further tests I would suggest that you can compare your results with those from sklearn:
 from sklearn.metrics import f1_score
 ytrue = np.argmax(y_test, axis=-1)
 ypred = np.argmax(y_hat_test, axis=-1)
 
 print(f1_score(ytrue, ypred, average='macro'))  
 print(f1_score(ytrue, ypred, average='micro'))  
 print(f1_score(ytrue, ypred, average='weighted'))
 print(f1_score(ytrue, ypred, average=None))
 		</comment>
 		<comment id='7' author='PhilipMay' date='2019-09-10T13:52:40Z'>
 		Thanks &lt;denchmark-link:https://github.com/PhilipMay&gt;@PhilipMay&lt;/denchmark-link&gt;
 
 I have a working code ready now using threshold option. That will help in both multiclass and multilabel. Will create a PR today
 		</comment>
 		<comment id='8' author='PhilipMay' date='2019-09-10T15:05:46Z'>
 		
 Thanks @PhilipMay
 I have a working code ready now using threshold option. That will help in both multiclass and multilabel. Will create a PR today
 
 That is great. Thanks. I need that fix for my project. :-)
 Maybe you can add a comparison with f1_score from sklearn to the tests.
 		</comment>
 		<comment id='9' author='PhilipMay' date='2019-09-11T08:56:30Z'>
 		&lt;denchmark-link:https://github.com/SSaishruthi&gt;@SSaishruthi&lt;/denchmark-link&gt;
  I do not think that this implementation with threshold fixes the problem. Here is why:
 When you have a "single-label categorial classification" where one sample belongs to exactly one class of many possible classes you apply a softmax funcation. Let me give an example:
 You habe 3 classes: dog, cat and bike and do a one hot encoding.
 &lt;denchmark-code&gt;dog = [1, 0, 0]
 cat = [0, 1, 0]
 bike = [0, 0, 1]
 &lt;/denchmark-code&gt;
 
 Now when you put a dog into the model you might get the following from the softmax function:
 
 This means: dog because 0.5 is the highest value. And this is the reason why a threshold is not valid. You should apply something like  or . Something like this: &lt;denchmark-link:https://github.com/tensorflow/addons/issues/490#issuecomment-529882338&gt;#490 (comment)&lt;/denchmark-link&gt;
 
 		</comment>
 		<comment id='10' author='PhilipMay' date='2019-09-11T13:39:07Z'>
 		&lt;denchmark-link:https://github.com/PhilipMay&gt;@PhilipMay&lt;/denchmark-link&gt;
 
 I am taking binary accuracy as a reference here: &lt;denchmark-link:https://github.com/tensorflow/tensorflow/blob/2ff39d00faf8f7e433ddcae0aa278f6e573b0c55/tensorflow/python/keras/metrics.py#L630&gt;https://github.com/tensorflow/tensorflow/blob/2ff39d00faf8f7e433ddcae0aa278f6e573b0c55/tensorflow/python/keras/metrics.py#L630&lt;/denchmark-link&gt;
 
 In order for this to work you need to provide the threshold value as 0.49 above. I can probably fix the threshold default to be 0.5. I think below 0.5, it may not be considered as a good prediction.
 I have this tested with scikit learn as (that's the usual procedure I follow)
 well.&lt;denchmark-link:https://colab.research.google.com/drive/1qSq0SsYkPqjdKUgM1RM4kKM67X75ocFj&gt;https://colab.research.google.com/drive/1qSq0SsYkPqjdKUgM1RM4kKM67X75ocFj&lt;/denchmark-link&gt;
 
 Goal here is to make it compatible with both multi-class and multi-label
 		</comment>
 	</comments>
 </bug>
<commit id='c3aba0818b6e74ac3a4341d00242c464584c8b50' author='Dheeraj R Reddy' date='2019-11-04 21:20:33-05:00'>
 	<dmm_unit complexity='0.0' interfacing='0.17543859649122806' size='0.3508771929824561'></dmm_unit>
 	<modification change_type='MODIFY' old_name='tensorflow_addons\metrics\BUILD' new_name='tensorflow_addons\metrics\BUILD'>
 		<file_info nloc='None' complexity='None' token_count='None'></file_info>
 		<modified_lines>
 			<added_lines>48,51,53</added_lines>
 			<deleted_lines>48,51,53,54,55,56,57,58,59,60,61,62,63,64,65,66</deleted_lines>
 		</modified_lines>
 	</modification>
 	<modification change_type='MODIFY' old_name='tensorflow_addons\metrics\README.md' new_name='tensorflow_addons\metrics\README.md'>
 		<file_info nloc='None' complexity='None' token_count='None'></file_info>
 		<modified_lines>
 			<added_lines>15,16</added_lines>
 			<deleted_lines>15</deleted_lines>
 		</modified_lines>
 	</modification>
 	<modification change_type='DELETE' old_name='tensorflow_addons\metrics\f1_test.py' new_name='None'>
 		<file_info nloc='None' complexity='None' token_count='None'></file_info>
 	</modification>
 	<modification change_type='MODIFY' old_name='tensorflow_addons\metrics\f_scores.py' new_name='tensorflow_addons\metrics\f_scores.py'>
 		<file_info nloc='192' complexity='13' token_count='871'></file_info>
 		<method name='__init__' parameters='self,num_classes,average,beta,threshold,name,dtype'>
 				<method_info nloc='7' complexity='1' token_count='31' nesting_level='1' start_line='72' end_line='78'></method_info>
 			<added_lines>76</added_lines>
 			<deleted_lines>72,73,74,75,76,77,78</deleted_lines>
 		</method>
 		<method name='update_state._count_non_zero' parameters='val'>
 				<method_info nloc='3' complexity='1' token_count='32' nesting_level='2' start_line='136' end_line='138'></method_info>
 			<added_lines>136,137,138</added_lines>
 			<deleted_lines>136,137,138</deleted_lines>
 		</method>
 		<method name='__init__' parameters='self,num_classes,average,threshold,name,dtype'>
 				<method_info nloc='6' complexity='1' token_count='25' nesting_level='1' start_line='230' end_line='235'></method_info>
 			<added_lines>230,231,232,233,234</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<method name='get_config' parameters='self'>
 				<method_info nloc='10' complexity='2' token_count='77' nesting_level='1' start_line='167' end_line='180'></method_info>
 			<added_lines>175,176,177,178</added_lines>
 			<deleted_lines>167,168,169,170,171,172,173,174</deleted_lines>
 		</method>
 		<method name='result' parameters='self'>
 				<method_info nloc='17' complexity='3' token_count='156' nesting_level='1' start_line='145' end_line='165'></method_info>
 			<added_lines>146,147,148,149,150,153,154,155,157,160,161,162,163</added_lines>
 			<deleted_lines>145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165</deleted_lines>
 		</method>
 		<method name='reset_states' parameters='self'>
 				<method_info nloc='5' complexity='1' token_count='81' nesting_level='1' start_line='182' end_line='186'></method_info>
 			<added_lines>183,184,185,186</added_lines>
 			<deleted_lines>184,185,186</deleted_lines>
 		</method>
 		<method name='_zero_wt_init' parameters='name'>
 				<method_info nloc='6' complexity='1' token_count='28' nesting_level='2' start_line='109' end_line='114'></method_info>
 			<added_lines>109,110,111,112</added_lines>
 			<deleted_lines>109,110,111,112</deleted_lines>
 		</method>
 		<method name='update_state' parameters='self,y_true,y_pred,sample_weight'>
 				<method_info nloc='14' complexity='2' token_count='151' nesting_level='1' start_line='123' end_line='143'></method_info>
 			<added_lines>124,125,126,127,128,129,130,131,132,136,137,138,139,140,141,142,143</added_lines>
 			<deleted_lines>123,124,125,126,127,128,129,130,134,135,136,137,138,139,140,141,142,143</deleted_lines>
 		</method>
 		<method name='__init__' parameters='self,num_classes,average,name,dtype'>
 				<method_info nloc='2' complexity='1' token_count='19' nesting_level='1' start_line='338' end_line='339'></method_info>
 			<added_lines></added_lines>
 			<deleted_lines>338</deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines>15,22,25,26,27,29,30,31,33,36,37,38,39,40,41,42,43,44,45,48,51,52,54,55,58,59,60,61,62,63,64,65,67,68,69,80,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,116,117,118,119,120,189,191,193,194,195,197,200,201,202,203,204,205,206,209,212,213,216,217,218,219,221,222,223,224,225,226,227,237</added_lines>
 			<deleted_lines>15,22,23,26,27,29,30,32,33,34,35,36,37,38,39,40,43,44,45,46,47,48,49,50,53,56,57,59,60,64,65,66,67,68,69,70,71,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,122,144,166,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,205,206,207,208,209,210,211,212,215,216,217,218,219,220,221,222,224,227,228,244,245,246,247,248,249,250,251,252,253,254,258,260,261,262,264,267,268,269,270,271,272,273,274,277,280,281,282,283,284,288,289,290,291,292,293,294,295,296,297,298,299,300,301,302,303,304,305,306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,341,343,344</deleted_lines>
 		</modified_lines>
 	</modification>
 	<modification change_type='ADD' old_name='None' new_name='tensorflow_addons\metrics\f_test.py'>
 		<file_info nloc='110' complexity='15' token_count='1525'></file_info>
 	</modification>
 	<modification change_type='DELETE' old_name='tensorflow_addons\metrics\fbeta_test.py' new_name='None'>
 		<file_info nloc='None' complexity='None' token_count='None'></file_info>
 	</modification>
 	<modification change_type='MODIFY' old_name='tensorflow_addons\metrics\utils.py' new_name='tensorflow_addons\metrics\utils.py'>
 		<file_info nloc='36' complexity='5' token_count='339'></file_info>
 		<method name='_get_model' parameters='metric,num_output'>
 				<method_info nloc='11' complexity='1' token_count='122' nesting_level='0' start_line='71' end_line='83'></method_info>
 			<added_lines>71,72,73,74,75,76,77,78,79,80,81,82,83</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines>21,69,70</added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 </commit>
</bug_data>
