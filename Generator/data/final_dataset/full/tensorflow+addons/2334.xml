<bug_data>
<bug id='2334' author='vlawhern' open_date='2021-01-06T15:47:08Z' closed_time='2021-01-07T00:28:50Z'>
 	<summary>TypeError 'Not JSON Serializable' when using FilterResponseNormalization</summary>
 	<description>
 System information
 
 OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Ubuntu 18.04 LTS
 TensorFlow version and how it was installed (source or binary): 2.3, compiled
 TensorFlow-Addons version and how it was installed (source or binary): 0.11.2, compiled
 Python version: 3.8
 Is GPU used? (yes/no): Yes
 
 Describe the bug
 When trying to use FilterResponseNormalization I get the following error when trying to save the weights
 TypeError: ('Not JSON Serializable:', &lt;tf.Tensor: shape=(), dtype=float32, numpy=1e-06&gt;)
 Here's a sample code (simple MNIST CNN) which reproduces the issue:
 import tensorflow
 import tensorflow.keras
 from tensorflow.keras.datasets import mnist
 from tensorflow.keras.models import Sequential
 from tensorflow.keras.layers import Dense, Dropout, Flatten
 from tensorflow.keras.layers import Conv2D, MaxPooling2D
 from tensorflow.keras import backend as K
 from tensorflow.keras.callbacks import ModelCheckpoint
 from tensorflow_addons.layers.normalizations import FilterResponseNormalization
 
 # def train_model(batch_size, epochs):
 num_classes = 10
 
 # input image dimensions
 img_rows, img_cols = 28, 28
 
 # the data, split between train and test sets
 (x_train, y_train), (x_test, y_test) = mnist.load_data()
 
 if K.image_data_format() == 'channels_first':
     x_train = x_train.reshape(x_train.shape[0], 1, img_rows, img_cols)
     x_test = x_test.reshape(x_test.shape[0], 1, img_rows, img_cols)
     input_shape = (1, img_rows, img_cols)
 else:
     x_train = x_train.reshape(x_train.shape[0], img_rows, img_cols, 1)
     x_test = x_test.reshape(x_test.shape[0], img_rows, img_cols, 1)
     input_shape = (img_rows, img_cols, 1)
 
 x_train = x_train.astype('float32')
 x_test = x_test.astype('float32')
 x_train /= 255
 x_test /= 255
 print('x_train shape:', x_train.shape)
 print(x_train.shape[0], 'train samples')
 print(x_test.shape[0], 'test samples')
 
 # convert class vectors to binary class matrices
 y_train = tensorflow.keras.utils.to_categorical(y_train, num_classes)
 y_test = tensorflow.keras.utils.to_categorical(y_test, num_classes)
 
 model = Sequential()
 model.add(Conv2D(32, kernel_size=(3,3),
                  activation='relu',
                  input_shape=input_shape))
 model.add(FilterResponseNormalization())
 model.add(Conv2D(64, (3, 3), activation='relu'))
 model.add(MaxPooling2D(pool_size=(2, 2)))
 model.add(Dropout(0.25))
 model.add(Flatten())
 model.add(Dense(128, activation='relu'))
 model.add(Dropout(0.5))
 model.add(Dense(num_classes, activation='softmax'))
 
 checkpointer = ModelCheckpoint(filepath = '/tmp/check.hdf5', save_best_only = True,
                                verbose = 1)
 model.compile(loss=tensorflow.keras.losses.categorical_crossentropy,
               optimizer=tensorflow.keras.optimizers.Adadelta(),
               metrics=['accuracy'])
 model.summary()
 model.fit(x_train, y_train,
           batch_size=128,
           epochs=10,
           verbose=2,
           validation_data=(x_test, y_test),
           callbacks = [checkpointer])
 score = model.evaluate(x_test, y_test, verbose=0)
 print('Test loss:', score[0])
 print('Test accuracy:', score[1])
 The sample code works as intended when you remove the FilterResponseNormalization layer.
 	</description>
 	<comments>
 		<comment id='1' author='vlawhern' date='2021-01-06T21:47:05Z'>
 		Hi, &lt;denchmark-link:https://github.com/vlawhern&gt;@vlawhern&lt;/denchmark-link&gt;
 . Thanks for the report! I've filed a PR to fix it!
 		</comment>
 	</comments>
 </bug>
<commit id='e304f5c2a8b3763d33862be2db95216b1b85b8cf' author='Tzu-Wei Sung' date='2021-01-06 16:28:50-08:00'>
 	<dmm_unit complexity='1.0' interfacing='1.0' size='1.0'></dmm_unit>
 	<modification change_type='MODIFY' old_name='tensorflow_addons\layers\normalizations.py' new_name='tensorflow_addons\layers\normalizations.py'>
 		<file_info nloc='458' complexity='57' token_count='2377'></file_info>
 		<method name='call' parameters='self,inputs'>
 				<method_info nloc='7' complexity='2' token_count='94' nesting_level='1' start_line='442' end_line='448'></method_info>
 			<added_lines>443</added_lines>
 			<deleted_lines>443</deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines>401</added_lines>
 			<deleted_lines>401</deleted_lines>
 		</modified_lines>
 	</modification>
 	<modification change_type='MODIFY' old_name='tensorflow_addons\layers\tests\normalizations_test.py' new_name='tensorflow_addons\layers\tests\normalizations_test.py'>
 		<file_info nloc='355' complexity='45' token_count='3837'></file_info>
 		<method name='test_filter_response_normalization_save' parameters='tmpdir'>
 				<method_info nloc='8' complexity='1' token_count='81' nesting_level='0' start_line='466' end_line='473'></method_info>
 			<added_lines>466,467,468,469,470,471,472,473</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines>463,464,465</added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 </commit>
</bug_data>
