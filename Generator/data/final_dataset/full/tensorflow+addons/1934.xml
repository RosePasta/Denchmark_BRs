<bug_data>
<bug id='1934' author='AntPeixe' open_date='2020-06-17T08:27:26Z' closed_time='2020-06-24T17:18:54Z'>
 	<summary>Unable to restore model using crf_decode</summary>
 	<description>
 System information
 
 OS Platform and Distribution (e.g., Linux Ubuntu 16.04): macOS Cataline 10.15.3
 TensorFlow version and how it was installed (source or binary): 2.2.0 (from pypi)
 TensorFlow-Addons version and how it was installed (source or binary): 0.7.0 (from pypi)
 Python version: 3.7.4
 Is GPU used? (yes/no): no
 
 Describe the bug
 When trying to load a model with tf.keras.models.load_model which uses tfa.text.crf.crf_decode it fails on restoring the custom object. This seems to occur as it can't build the object because the init method takes extra arguments. Below there is a simple (standalone) example that fails and the traceback of the error.
 Code to reproduce the issue
 &lt;denchmark-code&gt;import numpy as np
 import tensorflow as tf
 import tensorflow_addons as tfa
 
 
 class CRFLoss:
     def __init__(self, transition):
         self.transition = transition
         self.__name__ = "CRFLoss"
 
     def __call__(self, true, pred):
         log_likelihood, _ = tfa.text.crf.crf_log_likelihood(
             inputs=pred,
             tag_indices=true,
             sequence_lengths=tf.ones(tf.shape(true)[0]) * 10,
             transition_params=self.transition,
         )
         return tf.reduce_mean(-log_likelihood)
 
     def get_config(self):
         """Return helper config."""
         config = {"transition": self.transition.numpy().tolist()}
         return config
 
     @classmethod
     def from_config(cls, config):
         config["transition"] = tf.constant(config["transition"], dtype=tf.float32)
         return cls(**config)
 
 
 def create_model():
     input_tensor = tf.keras.Input(shape=(10, 3), dtype=tf.float32, name="input_tensor")
     seq_len = tf.keras.Input(shape=(), dtype=tf.int32, name="seq_len")
     transition = tf.constant([[1, 1, 0], [0, 1, 1], [1, 0, 1]], dtype=tf.float32)
 
     output = tf.multiply(input_tensor, tf.constant(1.0))
     decoded, _ = tfa.text.crf.crf_decode(input_tensor, transition, seq_len)
 
     loss = CRFLoss(transition)
 
     model = tf.keras.Model(inputs=[input_tensor, seq_len], outputs=[output, decoded], name="example_model")
     model.compile(optimizer="Adam", loss={"tf_op_layer_Mul": loss})
     return model
 
 x_data = {
     "input_tensor": np.random.random_sample((5, 10, 3)).astype(dtype=np.float32),
     "seq_len": np.array([10] * 5, dtype=np.int32),
 }
 y_data = {"tf_op_layer_Mul": np.random.randint(0, 3, (5, 10))}
 
 model = create_model()
 model.fit(x_data, y_data)
 model.predict({"input_tensor": tf.expand_dims(x_data["input_tensor"][0], 0), "seq_len": np.array([10])})
 
 tf.saved_model.save(model, "./example_model/")
 
 tf.keras.backend.clear_session()
 model = tf.keras.models.load_model(
     "./example_model/",
     custom_objects={"CrfDecodeForwardRnnCell": tfa.text.crf.CrfDecodeForwardRnnCell, "CRFLoss": CRFLoss}
 )
 model.fit(x_data, y_data)
 model.predict({"input_tensor": tf.expand_dims(x_data["input_tensor"][0], 0), "seq_len": np.array([10])})
 &lt;/denchmark-code&gt;
 
 Other info / logs
 &lt;denchmark-code&gt;Traceback (most recent call last):
   File "addon_issue_snippet.py", line 60, in &lt;module&gt;
     custom_objects={"CrfDecodeForwardRnnCell": tfa.text.crf.CrfDecodeForwardRnnCell, "CRFLoss": CRFLoss}
   File "venv/lib/python3.7/site-packages/tensorflow/python/keras/saving/save.py", line 190, in load_model
     return saved_model_load.load(filepath, compile)
   File "venv/lib/python3.7/site-packages/tensorflow/python/keras/saving/saved_model/load.py", line 116, in load
     model = tf_load.load_internal(path, loader_cls=KerasObjectLoader)
   File "venv/lib/python3.7/site-packages/tensorflow/python/saved_model/load.py", line 604, in load_internal
     export_dir)
   File "venv/lib/python3.7/site-packages/tensorflow/python/keras/saving/saved_model/load.py", line 188, in __init__
     super(KerasObjectLoader, self).__init__(*args, **kwargs)
   File "venv/lib/python3.7/site-packages/tensorflow/python/saved_model/load.py", line 123, in __init__
     self._load_all()
   File "venv/lib/python3.7/site-packages/tensorflow/python/keras/saving/saved_model/load.py", line 209, in _load_all
     self._layer_nodes = self._load_layers()
   File "venv/lib/python3.7/site-packages/tensorflow/python/keras/saving/saved_model/load.py", line 309, in _load_layers
     layers[node_id] = self._load_layer(proto.user_object, node_id)
   File "venv/lib/python3.7/site-packages/tensorflow/python/keras/saving/saved_model/load.py", line 337, in _load_layer
     obj, setter = revive_custom_object(proto.identifier, metadata)
   File "venv/lib/python3.7/site-packages/tensorflow/python/keras/saving/saved_model/load.py", line 782, in revive_custom_object
     .format(identifier))
 ValueError: Unable to restore custom object of type _tf_keras_rnn_layer currently. Please make sure that the layer implements `get_config`and `from_config` when saving. In addition, please use the `custom_objects` arg when calling `load_model()`.
 &lt;/denchmark-code&gt;
 
 Possible solution
 I've tried to debug this a bit and the solution I've found to work is to implement get_config and from_config on tfa.text.crf.CrfDecodeForwardRnnCell.
 For now I'm patching those methods in the object but it isn't very clean. If the proposed solution is good I'd gladly add the methods and create a PR.
 	</description>
 	<comments>
 		<comment id='1' author='AntPeixe' date='2020-06-19T05:07:14Z'>
 		Hi &lt;denchmark-link:https://github.com/AntPeixe&gt;@AntPeixe&lt;/denchmark-link&gt;
 , your solution is correct IMO. Feel free to open an PR and request my review. Thank you!
 		</comment>
 	</comments>
 </bug>
<commit id='81d8defbe2e850fe4b290e17974cfca3487a53bf' author='AntÃ³nio Peixe' date='2020-06-24 22:36:53+05:18'>
 	<dmm_unit complexity='1.0' interfacing='1.0' size='0.22916666666666666'></dmm_unit>
 	<modification change_type='MODIFY' old_name='tensorflow_addons\text\crf.py' new_name='tensorflow_addons\text\crf.py'>
 		<file_info nloc='412' complexity='30' token_count='2483'></file_info>
 		<method name='get_config' parameters='self'>
 				<method_info nloc='6' complexity='1' token_count='64' nesting_level='1' start_line='425' end_line='430'></method_info>
 			<added_lines>425,426,427,428,429,430</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<method name='from_config' parameters='cls,dict'>
 				<method_info nloc='5' complexity='1' token_count='37' nesting_level='1' start_line='433' end_line='437'></method_info>
 			<added_lines>433,434,435,436,437</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines>431,432,438</added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 	<modification change_type='MODIFY' old_name='tensorflow_addons\text\tests\crf_test.py' new_name='tensorflow_addons\text\tests\crf_test.py'>
 		<file_info nloc='328' complexity='29' token_count='3313'></file_info>
 		<method name='test_crf_decode_save_load' parameters='tmpdir'>
 				<method_info nloc='37' complexity='1' token_count='380' nesting_level='0' start_line='370' end_line='412'></method_info>
 			<added_lines>370,371,372,373,374,375,376,377,378,379,380,381,382,383,384,385,386,387,388,389,390,391,392,393,394,395,396,397,398,399,400,401,402,403,404,405,406,407,408,409,410,411,412</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines>368,369</added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 </commit>
</bug_data>
