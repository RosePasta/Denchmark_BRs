<bug_data>
<bug id='1093' author='jo3w4rd' open_date='2018-08-14T17:34:52Z' closed_time='2018-12-17T19:43:52Z'>
 	<summary>On-Demand Decision training against a heuristic brain throws exception</summary>
 	<description>
 I made an environment of a two-player game using On-Demand decisions and two brains. Training functions properly if both brains are external, but the environment hangs if I set one brain to external and one to heuristic. Inference works fine with either or both brains set to internal or heuristic.
 The environment always hangs just before the second turn of the second player. In the environment log, I see two exceptions, listed below. The first is thrown a few hundred times and then after that the second is thrown from that point onward.
 Exception
 ArgumentNullException: Value cannot be null.
 Parameter name: values
 Google.Protobuf.Collections.RepeatedField1[T].AddRange (System.Collections.Generic.IEnumerable1[T] values) (at &lt;53efaed03be741309d533ea799514544&gt;:0)
 Google.Protobuf.Collections.RepeatedField1[T].Add (System.Collections.Generic.IEnumerable1[T] values) (at &lt;53efaed03be741309d533ea799514544&gt;:0)
 MLAgents.Batcher.AgentInfoConvertor (MLAgents.AgentInfo info) (at &lt;74dd45c0456640008ef7a6bc7fba4308&gt;:0)
 MLAgents.Batcher.SendBrainInfo (System.String brainKey, System.Collections.Generic.Dictionary2[TKey,TValue] agentInfo) (at &lt;74dd45c0456640008ef7a6bc7fba4308&gt;:0) MLAgents.CoreBrainHeuristic.DecideAction (System.Collections.Generic.Dictionary2[TKey,TValue] agentInfo) (at &lt;74dd45c0456640008ef7a6bc7fba4308&gt;:0)
 MLAgents.Brain.DecideAction () (at &lt;74dd45c0456640008ef7a6bc7fba4308&gt;:0)
 MLAgents.Academy.EnvironmentStep () (at &lt;74dd45c0456640008ef7a6bc7fba4308&gt;:0)
 MLAgents.Academy.FixedUpdate () (at &lt;74dd45c0456640008ef7a6bc7fba4308&gt;:0)
 Exception
 ArgumentException: An item with the same key has already been added. Key: OAgent (TicTacToeAgent)
 System.Collections.Generic.Dictionary2[TKey,TValue].TryInsert (TKey key, TValue value, System.Collections.Generic.InsertionBehavior behavior) (at &lt;e1a80661d61443feb3dbdaac88eeb776&gt;:0) System.Collections.Generic.Dictionary2[TKey,TValue].Add (TKey key, TValue value) (at :0)
 MLAgents.Brain.SendState (MLAgents.Agent agent, MLAgents.AgentInfo info) (at &lt;74dd45c0456640008ef7a6bc7fba4308&gt;:0)
 MLAgents.Agent.SendInfoToBrain () (at &lt;74dd45c0456640008ef7a6bc7fba4308&gt;:0)
 MLAgents.Agent.SendInfo () (at &lt;74dd45c0456640008ef7a6bc7fba4308&gt;:0)
 MLAgents.Academy.EnvironmentStep () (at &lt;74dd45c0456640008ef7a6bc7fba4308&gt;:0)
 MLAgents.Academy.FixedUpdate () (at &lt;74dd45c0456640008ef7a6bc7fba4308&gt;:0)
 	</description>
 	<comments>
 		<comment id='1' author='jo3w4rd' date='2018-08-14T18:03:14Z'>
 		Assets for this project are here: &lt;denchmark-link:https://github.com/jo3w4rd/roughdraft/tree/master/unity/Tic-Tac-Toe/Assets&gt;https://github.com/jo3w4rd/roughdraft/tree/master/unity/Tic-Tac-Toe/Assets&lt;/denchmark-link&gt;
 
 		</comment>
 		<comment id='2' author='jo3w4rd' date='2018-08-14T18:30:52Z'>
 		Thanks for pointing this out &lt;denchmark-link:https://github.com/jo3w4rd&gt;@jo3w4rd&lt;/denchmark-link&gt;
 . I am assigning &lt;denchmark-link:https://github.com/vincentpierre&gt;@vincentpierre&lt;/denchmark-link&gt;
  since he has worked most with ODD.
 		</comment>
 		<comment id='3' author='jo3w4rd' date='2018-08-15T00:48:15Z'>
 		Is due to the memory of the agent being set to null in the Heuristic Brain. One temporary fix is to modify the RandomDecision script method
     public List&lt;float&gt; MakeMemory(
             List&lt;float&gt; vectorObs,
             List&lt;Texture2D&gt; visualObs,
             float reward,
             bool done,
         List&lt;float&gt; memory){
         return null;
     }
 with
     public List&lt;float&gt; MakeMemory(
             List&lt;float&gt; vectorObs,
             List&lt;Texture2D&gt; visualObs,
             float reward,
             bool done,
         List&lt;float&gt; memory){
         return new List&lt;float&gt;();
     }
 But there should be a nice catching of null memories either in Agent or in Batcher.
 		</comment>
 		<comment id='4' author='jo3w4rd' date='2020-01-02T23:47:18Z'>
 		This thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue for related bugs.
 		</comment>
 	</comments>
 </bug>
<commit id='153bf0c53159e3152894350daf7d4881bd2d4218' author='vincentpierre' date='2018-08-21 18:30:19-04:00'>
 	<dmm_unit complexity='1.0' interfacing='1.0' size='0.0'></dmm_unit>
 	<modification change_type='MODIFY' old_name='unity-environment\Assets\ML-Agents\Scripts\Batcher.cs' new_name='unity-environment\Assets\ML-Agents\Scripts\Batcher.cs'>
 		<file_info nloc='228' complexity='25' token_count='1065'></file_info>
 		<method name='MLAgents::Batcher::AgentInfoConvertor' parameters='info'>
 				<method_info nloc='25' complexity='2' token_count='122' nesting_level='2' start_line='163' end_line='189'></method_info>
 			<added_lines>177,178,179,180,181</added_lines>
 			<deleted_lines>170</deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines></added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 </commit>
</bug_data>
