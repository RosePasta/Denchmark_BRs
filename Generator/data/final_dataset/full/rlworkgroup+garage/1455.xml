<bug_data>
<bug id='1455' author='AiRuiChen' open_date='2020-05-29T04:18:52Z' closed_time='2020-05-30T06:55:10Z'>
 	<summary>tar --auto-compress flag doesn't work on MacOS</summary>
 	<description>
 I get a tar option not found error when running examples calling experiment.py on MacOS:
 python garage/examples/tf/trpo_cartpole.py
 tar: Option --auto-compress is not supported
 Found that linux has tar as gnu tar, whereas MacOS has tar as bsdtar, which by default doesn't support --auto-compress.
 Suggested fixes &lt;denchmark-link:https://github.com/rlworkgroup/garage/blob/master/src/garage/experiment/experiment.py#L728&gt;here&lt;/denchmark-link&gt;
 :
 1: Add MacOS  dependency to install  for Mac users, and change  to  if os is MacOS in code.
 2: Remove  if os is MacOS. Caveat: this can result in files compressed in different ways across linux and MacOS.
 	</description>
 	<comments>
 		<comment id='1' author='AiRuiChen' date='2020-05-29T17:20:01Z'>
 		Rather than using --auto-compress, can we just force xz compression in all cases? I think this just chooses based on the file extension for convenience.
 Alternatively, calling subprocess is kind of hacky and exposes us to underlying OS deps (as this shows). Can we use zipfile or shutil? &lt;denchmark-link:https://github.com/krzentner&gt;@krzentner&lt;/denchmark-link&gt;
  is there a reason you didn't use the stdlib versions here?
 See:
 &lt;denchmark-link:https://docs.python.org/3.5/library/shutil.html#shutil.make_archive&gt;https://docs.python.org/3.5/library/shutil.html#shutil.make_archive&lt;/denchmark-link&gt;
 
 &lt;denchmark-link:https://docs.python.org/3.5/library/archiving.html&gt;https://docs.python.org/3.5/library/archiving.html&lt;/denchmark-link&gt;
 
 		</comment>
 		<comment id='2' author='AiRuiChen' date='2020-05-29T22:49:57Z'>
 		
 Rather than using --auto-compress, can we just force xz compression in all cases? I think this just chooses based on the file extension for convenience.
 Alternatively, calling subprocess is kind of hacky and exposes us to underlying OS deps (as this shows). Can we use zipfile or shutil? @krzentner is there a reason you didn't use the stdlib versions here?
 See:
 https://docs.python.org/3.5/library/shutil.html#shutil.make_archive
 https://docs.python.org/3.5/library/archiving.html
 
 I agree that avoiding subprocess call is a good practice. If we decide to switch I can take over and create a PR.
 		</comment>
 		<comment id='3' author='AiRuiChen' date='2020-05-29T22:57:30Z'>
 		Do what you think is best! The big risk of using stdlib is avoiding loading all the files into memory (they could be huge). Otherwise, it would be better not to be calling out to subprocess.
 		</comment>
 	</comments>
 </bug>
<commit id='19f944dc3f62db7a0afbb67114668e1d75389b19' author='Eric Yihan Chen' date='2020-05-29 23:55:09-07:00'>
 	<dmm_unit complexity='None' interfacing='None' size='None'></dmm_unit>
 	<modification change_type='MODIFY' old_name='src\garage\experiment\experiment.py' new_name='src\garage\experiment\experiment.py'>
 		<file_info nloc='447' complexity='62' token_count='2492'></file_info>
 		<method name='make_launcher_archive' parameters='git_root_path,log_dir'>
 				<method_info nloc='25' complexity='5' token_count='160' nesting_level='0' start_line='701' end_line='732'></method_info>
 			<added_lines>728,729</added_lines>
 			<deleted_lines>728,729</deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines></added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 </commit>
</bug_data>
