<bug_data>
<bug id='830' author='seyuboglu' open_date='2019-11-26T23:27:47Z' closed_time='2020-01-06T19:05:25Z'>
 	<summary>Failure modes of from_networkx</summary>
 	<description>
 &lt;denchmark-h:h2&gt;‚ùì Questions &amp; Help&lt;/denchmark-h&gt;
 
 Hi! What kinds of networkx graphs are expected to work with from_networkx. Right now, the documentation just says that it expects a networkx graph, but there are definitely some networkx graphs for which it doesn't work:
 Graphs without contiguous node labels:
 The following cell runs without error. Except the output is a little funky-
 &lt;denchmark-code&gt;from torch_geometric.utils.convert import from_networkx
 import networkx as nx 
 
 # build an nx graph 
 graph = nx.Graph()
 graph.add_node(4)
 graph.add_node(2)
 graph.add_node(6)
 graph.add_edge(4, 6)
 graph.add_edge(2, 6)
 for node in graph.nodes():
     graph.nodes[node]["x"] = node
 
 # convert to pyg
 data = from_networkx(graph)   
 print(f"X: {data.x}")
 print(f"Edge index: {data.edge_index}")
 &lt;/denchmark-code&gt;
 
 The output is:
 &lt;denchmark-code&gt;X: tensor([4, 2, 6])
 Edge index: tensor([[4, 2, 6, 6],
         [6, 6, 4, 2]])
 &lt;/denchmark-code&gt;
 
 The node indices in the edge_index have no correspondence with the order of the nodes in the feature matrix x. It seems to me like from_networkx is dependent on: (1) node labels of nx.Graph being consecutive numbers (i.e. from 0 to len(graph) - 1) and (2) that graph.nodes() returns these nodes in order. That being said, perhaps I am missing something with how Data is being used in message passing etc. In either case, I think it would be helpful to add a note in the documentation about the kinds of networkx graphs the function will work with.
 Graphs without edges:
 The following crashes with a IndexError: list index out of range
 &lt;denchmark-code&gt;from torch_geometric.utils.convert import from_networkx
 import networkx as nx 
 
 graph = nx.Graph()
 graph.add_node(1)
 graph.add_node(2)
 from_networkx(graph)
 &lt;/denchmark-code&gt;
 
 Graphs with non-numeric node labels
 Crashes with ValueError: too many dimensions 'str'
 &lt;denchmark-code&gt;from torch_geometric.utils.convert import from_networkx
 import networkx as nx 
 
 # build an nx graph 
 graph = nx.Graph()
 graph.add_node("4")
 graph.add_node("2")
 graph.add_edge("4", "2")
 
 # convert to pyg
 data = from_networkx(graph)
 &lt;/denchmark-code&gt;
 
 Thanks!!
 	</description>
 	<comments>
 		<comment id='1' author='seyuboglu' date='2019-11-27T06:38:04Z'>
 		Thanks for this issue. It is correct that from_networkx currently expects consecutive numbers as node indices. This should be fixed and I will work on it :)
 		</comment>
 		<comment id='2' author='seyuboglu' date='2020-01-06T19:05:25Z'>
 		Fixed in master (&lt;denchmark-link:https://github.com/rusty1s/pytorch_geometric/commit/c0458f0c0fb84c27570d91c6a971e29109649fca&gt;c0458f0&lt;/denchmark-link&gt;
 ).
 		</comment>
 	</comments>
 </bug>
<commit id='c0458f0c0fb84c27570d91c6a971e29109649fca' author='rusty1s' date='2020-01-06 20:04:58+01:00'>
 	<dmm_unit complexity='None' interfacing='None' size='None'></dmm_unit>
 	<modification change_type='MODIFY' old_name='test\utils\test_convert.py' new_name='test\utils\test_convert.py'>
 		<file_info nloc='112' complexity='12' token_count='1325'></file_info>
 		<method name='test_from_networkx_non_numeric_labels' parameters=''>
 				<method_info nloc='11' complexity='2' token_count='96' nesting_level='0' start_line='98' end_line='108'></method_info>
 			<added_lines>98,99,100,101,102,103,104,105,106,107,108</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<method name='test_from_networkx_without_edges' parameters=''>
 				<method_info nloc='7' complexity='1' token_count='50' nesting_level='0' start_line='111' end_line='117'></method_info>
 			<added_lines>111,112,113,114,115,116,117</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<method name='test_subgraph_convert' parameters=''>
 				<method_info nloc='7' complexity='1' token_count='75' nesting_level='0' start_line='120' end_line='129'></method_info>
 			<added_lines>120,121,122,123,124,125,126,127,128,129</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<method name='test_from_networkx_non_consecutive' parameters=''>
 				<method_info nloc='11' complexity='2' token_count='100' nesting_level='0' start_line='84' end_line='95'></method_info>
 			<added_lines>84,85,86,87,88,89,90,91,92,93,94,95</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<method name='test_networkx_vice_versa_convert' parameters=''>
 				<method_info nloc='9' complexity='1' token_count='64' nesting_level='0' start_line='73' end_line='81'></method_info>
 			<added_lines>73</added_lines>
 			<deleted_lines>73,74,75,76,77,78,79,80,81</deleted_lines>
 		</method>
 		<method name='test_vice_versa_convert' parameters=''>
 				<method_info nloc='9' complexity='1' token_count='64' nesting_level='0' start_line='83' end_line='91'></method_info>
 			<added_lines>84,85,86,87,88,89,90,91</added_lines>
 			<deleted_lines>83</deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines>6,7,8,96,97,109,110,118,119,130,131</added_lines>
 			<deleted_lines>6,7,72,82</deleted_lines>
 		</modified_lines>
 	</modification>
 	<modification change_type='MODIFY' old_name='torch_geometric\utils\convert.py' new_name='torch_geometric\utils\convert.py'>
 		<file_info nloc='112' complexity='25' token_count='742'></file_info>
 		<method name='from_networkx' parameters='G'>
 				<method_info nloc='26' complexity='10' token_count='230' nesting_level='0' start_line='81' end_line='113'></method_info>
 			<added_lines>89,93,95,97,99,101,104,105,106,107,109</added_lines>
 			<deleted_lines>92,93,94,95,97,99,101,103,106,108</deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines></added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 </commit>
</bug_data>
