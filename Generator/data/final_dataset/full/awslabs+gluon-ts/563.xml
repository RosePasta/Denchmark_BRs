<bug_data>
<bug id='563' author='lostella' open_date='2020-01-16T17:31:10Z' closed_time='2020-01-20T15:10:43Z'>
 	<summary>PiecewiseLinear gives wrong CRPS outside of distribution support</summary>
 	<description>
 It seems like the PiecewiseLinear's CRPS method does not compute correct results when the input falls outside of the distribution's support. The following example is for a uniform distribution between -1 and 1: I would expect CRPS(-2) = CRPS(2), but that's not the case.
 gamma = mx.nd.array([-1.0])
 slopes = mx.nd.array([
     [2.0, 2.0]]
 )
 knot_spacings = mx.nd.array([[0.5, 0.5]])
 
 distr = PiecewiseLinear(
     gamma=gamma,
     slopes=slopes,
     knot_spacings=knot_spacings,
 )
 
 print(distr.crps(mx.nd.array([-2.0])))
 print(distr.crps(mx.nd.array([2.0])))
 yields
 &lt;denchmark-code&gt;[1.6666667]
 &lt;NDArray 1 @cpu(0)&gt;
 
 [2.1666667]
 &lt;NDArray 1 @cpu(0)&gt;
 &lt;/denchmark-code&gt;
 
 With more complex example one can also get negative values of CRPS.
 gamma = mx.nd.array([-82.70746])
 slopes = mx.nd.array([
     [1.8083544e+01, 2.9134894e-02, 6.3528619e+00, 4.8505863e-05, 4.9647682e+01, 3.9714784e-16, 1.3027676e+01, 1.8006723e-14]]
 )
 knot_spacings = mx.nd.array([[0.001, 0.009, 0.09, 0.4, 0.4, 0.09, 0.009, 0.001]])
 x = mx.nd.array([-70.8735308])
 
 distr = PiecewiseLinear(
     gamma=gamma,
     slopes=slopes,
     knot_spacings=knot_spacings,
 )
 
 print(distr.crps(x))
 yields
 &lt;denchmark-code&gt;[-79.25251]
 &lt;NDArray 1 @cpu(0)&gt;
 &lt;/denchmark-code&gt;
 
 	</description>
 	<comments>
 		<comment id='1' author='lostella' date='2020-01-16T17:37:09Z'>
 		We could consider implement the computation of CRPS in its more intuitive form, see first equation in &lt;denchmark-link:https://journals.ametsoc.org/doi/pdf/10.1175/1520-0434%282000%29015%3C0559%3ADOTCRP%3E2.0.CO%3B2&gt;https://journals.ametsoc.org/doi/pdf/10.1175/1520-0434%282000%29015%3C0559%3ADOTCRP%3E2.0.CO%3B2&lt;/denchmark-link&gt;
 
 If all slopes are strictly positive then the quantile function is invertible and maybe things are easier to compute in the CDF domain instead of the quantile level domain.
 		</comment>
 		<comment id='2' author='lostella' date='2020-01-16T19:14:21Z'>
 		Well, one should probably end up with the same formula for the integral no matter what (equivalent) formulation one starts from. It looks like some summands are missing when x falls off of the support.
 		</comment>
 		<comment id='3' author='lostella' date='2020-01-20T15:10:43Z'>
 		fixed by &lt;denchmark-link:https://github.com/awslabs/gluon-ts/pull/564&gt;#564&lt;/denchmark-link&gt;
 
 		</comment>
 	</comments>
 </bug>
<commit id='6338eb2f6c921aae5ae200dc769e1029f8c97d14' author='Lorenzo Stella' date='2020-01-20 16:10:13+01:00'>
 	<dmm_unit complexity='1.0' interfacing='1.0' size='0.28'></dmm_unit>
 	<modification change_type='MODIFY' old_name='src\gluonts\distribution\piecewise_linear.py' new_name='src\gluonts\distribution\piecewise_linear.py'>
 		<file_info nloc='267' complexity='19' token_count='1277'></file_info>
 		<method name='cdf' parameters='self,Tensor'>
 				<method_info nloc='34' complexity='1' token_count='174' nesting_level='1' start_line='193' end_line='239'></method_info>
 			<added_lines>239</added_lines>
 			<deleted_lines>239</deleted_lines>
 		</method>
 		<method name='domain_map' parameters='cls,F,gamma,slopes,knot_spacings'>
 				<method_info nloc='4' complexity='1' token_count='53' nesting_level='1' start_line='337' end_line='344'></method_info>
 			<added_lines>339</added_lines>
 			<deleted_lines>339,340,341,342,343,344</deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines></added_lines>
 			<deleted_lines>345,346,347</deleted_lines>
 		</modified_lines>
 	</modification>
 	<modification change_type='MODIFY' old_name='test\distribution\test_piecewise_linear.py' new_name='test\distribution\test_piecewise_linear.py'>
 		<file_info nloc='131' complexity='5' token_count='1282'></file_info>
 		<method name='test_simple_symmetric' parameters=''>
 				<method_info nloc='14' complexity='1' token_count='216' nesting_level='0' start_line='141' end_line='159'></method_info>
 			<added_lines>141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<method name='test_robustness' parameters=''>
 				<method_info nloc='18' complexity='2' token_count='202' nesting_level='0' start_line='162' end_line='188'></method_info>
 			<added_lines>162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines>20,139,140,160,161</added_lines>
 			<deleted_lines>20</deleted_lines>
 		</modified_lines>
 	</modification>
 </commit>
</bug_data>
