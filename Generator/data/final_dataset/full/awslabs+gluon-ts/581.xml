<bug_data>
<bug id='581' author='canerturkmen' open_date='2020-01-30T16:48:40Z' closed_time='2020-01-30T20:06:26Z'>
 	<summary>HybridBlock to SymbolBlock conversion forgets about input/output formats</summary>
 	<description>
 &lt;denchmark-h:h2&gt;Description&lt;/denchmark-h&gt;
 
 Currently, GluonTS uses the HybridBlock.export and SymbolBlock.imports facilities to convert a HybridBlock to SymbolBlock. However, during this conversion, mxnet "forgets" about the _in_format and _out_format member variables which keep track of how a block object's inputs (resp. outputs) are nested within the call signature.
 This leads to several unexpected behaviors when converting blocks.
 &lt;denchmark-h:h2&gt;To Reproduce&lt;/denchmark-h&gt;
 
 import mxnet as mx
 
 from gluonts.support import util
 
 class TestBlock(mx.gluon.HybridBlock):
     def hybrid_forward(self, F, x1, x2):
         return F.broadcast_mul(x1, x2[0]) 
     
 x1 = mx.nd.array([1, 2, 3])
 x2 = [mx.nd.array([1, 5, 5])]
 
 my_block = TestBlock()
 my_block.collect_params().initialize()
 my_block.hybridize()
 my_block(x1, x2)
 
 sb = util.hybrid_block_to_symbol_block(my_block, [x1, x2])
 &lt;denchmark-h:h2&gt;Error Message&lt;/denchmark-h&gt;
 
 &lt;denchmark-code&gt;---------------------------------------------------------------------------
 AttributeError                            Traceback (most recent call last)
 &lt;ipython-input-18-f8f4e08a1a43&gt; in &lt;module&gt;
       7 my_block(x1, x2)
       8 
 ----&gt; 9 sb = util.hybrid_block_to_symbol_block(my_block, [x1, x2])
 
 ~/code/gluon-ts/src/gluonts/support/util.py in hybrid_block_to_symbol_block(hb, data_batch)
     216             net=hb,
     217             hybridize=True,
 --&gt; 218             data_batch=data_batch,
     219             static_alloc=True,
     220             static_shape=True,
 
 ~/code/gluon-ts/src/gluonts/support/util.py in import_symb_block(num_inputs, model_dir, model_name, epoch)
     276         The deserialized block.
     277     """
 --&gt; 278     if num_inputs == 1:
     279         input_names = ["data"]
     280     else:
 
 ~/VENVS/gluonts/lib/python3.6/site-packages/mxnet/gluon/block.py in imports(symbol_file, input_names, param_file, ctx)
    1022         ret = SymbolBlock(sym, inputs)
    1023         if param_file is not None:
 -&gt; 1024             ret.collect_params().load(param_file, ctx=ctx)
    1025         return ret
    1026 
 
 ~/VENVS/gluonts/lib/python3.6/site-packages/mxnet/gluon/parameter.py in load(self, filename, ctx, allow_missing, ignore_extra, restore_prefix)
     902         lprefix = len(restore_prefix)
     903         loaded = [(k[4:] if k.startswith('arg:') or k.startswith('aux:') else k, v) \
 --&gt; 904                   for k, v in ndarray.load(filename).items()]
     905         arg_dict = {restore_prefix+k: v for k, v in loaded}
     906         if not allow_missing:
 
 AttributeError: 'list' object has no attribute 'items'
 &lt;/denchmark-code&gt;
 
 	</description>
 	<comments>
 		<comment id='1' author='canerturkmen' date='2020-01-30T16:52:39Z'>
 		&lt;denchmark-link:https://github.com/canerturkmen&gt;@canerturkmen&lt;/denchmark-link&gt;
  looks like someone has a fix in the making ;-)
 		</comment>
 	</comments>
 </bug>
<commit id='2889be4952954798d827f197b22fc78d4fcb5609' author='Caner Turkmen' date='2020-01-30 21:01:29+01:00'>
 	<dmm_unit complexity='1.0' interfacing='0.7735849056603774' size='1.0'></dmm_unit>
 	<modification change_type='MODIFY' old_name='src\gluonts\support\util.py' new_name='src\gluonts\support\util.py'>
 		<file_info nloc='501' complexity='42' token_count='1966'></file_info>
 		<modified_lines>
 			<added_lines>36,179,207,208,209,210,211,228,248,249,250,251,252,283,284,285,286,287,288,289,292,295,298,299,300,301,302,303</added_lines>
 			<deleted_lines>41,206,274,277</deleted_lines>
 		</modified_lines>
 	</modification>
 	<modification change_type='MODIFY' old_name='test\support\test_util.py' new_name='test\support\test_util.py'>
 		<file_info nloc='134' complexity='14' token_count='1309'></file_info>
 		<method name='sym_block_import_export_test_cases' parameters=''>
 				<method_info nloc='12' complexity='1' token_count='66' nesting_level='0' start_line='126' end_line='174'></method_info>
 			<added_lines>126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<method name='test_symb_block_export_import_nested_array' parameters='block_type,hybridize'>
 				<method_info nloc='10' complexity='2' token_count='127' nesting_level='0' start_line='181' end_line='193'></method_info>
 			<added_lines>181,182,183,184,185,186,187,188,189,190,191,192,193</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<method name='sym_block_import_export_test_cases.__init__' parameters='self,kwargs'>
 				<method_info nloc='9' complexity='1' token_count='59' nesting_level='2' start_line='141' end_line='150'></method_info>
 			<added_lines>141,142,143,144,145,146,147,148,149,150</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<method name='sym_block_import_export_test_cases.hybrid_forward' parameters='self,F,Tensor'>
 				<method_info nloc='2' complexity='1' token_count='30' nesting_level='2' start_line='129' end_line='130'></method_info>
 			<added_lines>129,130</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<method name='sym_block_import_export_test_cases.hybrid_forward' parameters='self,F,Tensor,my_param'>
 				<method_info nloc='3' complexity='1' token_count='52' nesting_level='2' start_line='152' end_line='154'></method_info>
 			<added_lines>152,153,154</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines>13,14,23,124,125,175,176,177,178,179,180</added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 </commit>
</bug_data>
