<bug_data>
<bug id='1157' author='danielrjiang' open_date='2020-05-22T00:11:23Z' closed_time='2020-07-24T01:02:46Z'>
 	<summary>[Bug] Fantasizing is very slow on GPU due to torch.qr</summary>
 	<description>
 &lt;denchmark-h:h1&gt;üêõ Bug&lt;/denchmark-h&gt;
 
 torch.qr is causing things to be very slow on the GPU, when using fantasies. This is likely caused by &lt;denchmark-link:https://github.com/pytorch/pytorch/issues/22573&gt;pytorch/pytorch#22573&lt;/denchmark-link&gt;
 .
 &lt;denchmark-h:h2&gt;To reproduce&lt;/denchmark-h&gt;
 
 See the following notebook example.
 &lt;denchmark-link:https://github.com/cornellius-gp/gpytorch/files/4665346/KG_GPU_investigate.ipynb.txt&gt;KG_GPU_investigate.ipynb.txt&lt;/denchmark-link&gt;
 
 ** Stack trace/error message **
 See the following profile results.
 &lt;denchmark-link:https://user-images.githubusercontent.com/18407088/82617537-388de380-9b85-11ea-91c7-c5d86fe103b7.png&gt;&lt;/denchmark-link&gt;
 
 &lt;denchmark-link:https://user-images.githubusercontent.com/18407088/82617539-3b88d400-9b85-11ea-9ecc-c5171d8380b7.png&gt;&lt;/denchmark-link&gt;
 
 &lt;denchmark-link:https://github.com/cornellius-gp/gpytorch/files/4665343/kg_cpu.cprofile.txt&gt;kg_cpu.cprofile.txt&lt;/denchmark-link&gt;
 
 &lt;denchmark-link:https://github.com/cornellius-gp/gpytorch/files/4665344/kg_gpu.cprofile.txt&gt;kg_gpu.cprofile.txt&lt;/denchmark-link&gt;
 
 &lt;denchmark-h:h2&gt;Expected Behavior&lt;/denchmark-h&gt;
 
 Running on CUDA should show speedups compared to CPU.
 &lt;denchmark-h:h2&gt;System information&lt;/denchmark-h&gt;
 
 Please complete the following information:
 
 latest master
 1.6.0a0
 Mac OS X Catalina 10.15.4
 
 	</description>
 	<comments>
 		<comment id='1' author='danielrjiang' date='2020-05-22T00:52:51Z'>
 		Maybe we should put in some logic to use the Woodbury formula for small enough matrices? QR is better stability but likely slower for small matrices. &lt;denchmark-link:https://github.com/Balandat&gt;@Balandat&lt;/denchmark-link&gt;
  &lt;denchmark-link:https://github.com/gpleiss&gt;@gpleiss&lt;/denchmark-link&gt;
 
 		</comment>
 		<comment id='2' author='danielrjiang' date='2020-05-22T01:13:52Z'>
 		Yeah that makes sense. Also, looking through the code above that section, we know that the new_root here is diagonal if we use cholesky for the root decomposition (i.e. if L is lower triangualr). So we don't have to do any work, we can just do a triangular solve against eye to the get the inverse. So we should probably have two code paths, one where L is diagonal and one where it's not. For the general case of tall non-triangular L we can probably do woodbury.
 		</comment>
 		<comment id='3' author='danielrjiang' date='2020-07-24T01:02:46Z'>
 		Fixed for now by &lt;denchmark-link:https://github.com/cornellius-gp/gpytorch/pull/1224&gt;#1224&lt;/denchmark-link&gt;
 
 		</comment>
 	</comments>
 </bug>
<commit id='280b7e7794bf2ee118328075d49e27c009c063f2' author='Max Balandat' date='2020-07-23 15:05:34-07:00'>
 	<dmm_unit complexity='1.0' interfacing='0.0' size='0.0'></dmm_unit>
 	<modification change_type='MODIFY' old_name='gpytorch\models\exact_prediction_strategies.py' new_name='gpytorch\models\exact_prediction_strategies.py'>
 		<file_info nloc='448' complexity='67' token_count='3466'></file_info>
 		<method name='get_fantasy_strategy' parameters='self,inputs,targets,full_inputs,full_targets,full_output,kwargs'>
 				<method_info nloc='95' complexity='4' token_count='778' nesting_level='1' start_line='106' end_line='267'></method_info>
 			<added_lines>207,215,216,217,218,219,220,221,222,230,231,232,233,234,236</added_lines>
 			<deleted_lines>207,216,223,225</deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines></added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 </commit>
</bug_data>
