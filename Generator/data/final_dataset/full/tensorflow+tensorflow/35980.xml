<bug_data>
<bug id='35980' author='Intellicode' open_date='2020-01-17T11:07:41Z' closed_time='2020-01-28T19:10:51Z'>
 	<summary>Tensorflow predict call crashes when loading a model with gevent enabled</summary>
 	<description>
 System information
 
 Have I written custom code (as opposed to using a stock example script provided in TensorFlow): yes
 OS Platform and Distribution (e.g., Linux Ubuntu 16.04): MacOS 10.14.6, also tried it on the Docker container nvidia/cuda:10.1-cudnn7-runtime
 TensorFlow installed from (source or binary): binary
 TensorFlow version (use command below): v2.1.0-rc2-17-ge5bf8de410 2.1.0
 Python version: 3.7.4 on Mac, Python 3.6.9 :: Anaconda, Inc. in Docker
 CUDA/cuDNN version: N/A
 GPU model and memory: N/A
 
 Describe the current behavior
 Tensorflow crashes after calling predict on the model, this happens with gevent 1.4.0 and also 1.5a2
 Describe the expected behavior
 Tensorflow doesn't crash
 Code to reproduce the issue
 &lt;denchmark-code&gt;from gevent import monkey
 monkey.patch_all()
 
 import numpy as np
 import tensorflow as tf
 
 classifier = tf.keras.models.load_model('tensorflow_model_dir')
 classifier.predict(np.array(
     np.zeros((1, 12623))
 ))
 &lt;/denchmark-code&gt;
 
 Other info / logs
 &lt;denchmark-code&gt;Traceback (most recent call last):
   File "/opt/conda/envs/py36/lib/python3.6/site-packages/tensorflow_core/python/keras/backend.py", line 430, in eager_learning_phase_scope
     _GRAPH_LEARNING_PHASES[_DUMMY_EAGER_GRAPH] = value
   File "/opt/conda/envs/py36/lib/python3.6/weakref.py", line 407, in __setitem__
     self.data[ref(key, self._remove)] = value
 TypeError: cannot create weak reference to 'gevent._local.local' object
 
 During handling of the above exception, another exception occurred:
 
 Traceback (most recent call last):
   File "scripts/gevent_load_classifier.py", line 9, in &lt;module&gt;
     np.zeros((1, 12623))
   File "/opt/conda/envs/py36/lib/python3.6/site-packages/tensorflow_core/python/keras/engine/training.py", line 1013, in predict
     use_multiprocessing=use_multiprocessing)
   File "/opt/conda/envs/py36/lib/python3.6/site-packages/tensorflow_core/python/keras/engine/training_v2.py", line 498, in predict
     workers=workers, use_multiprocessing=use_multiprocessing, **kwargs)
   File "/opt/conda/envs/py36/lib/python3.6/site-packages/tensorflow_core/python/keras/engine/training_v2.py", line 475, in _model_iteration
     total_epochs=1)
   File "/opt/conda/envs/py36/lib/python3.6/site-packages/tensorflow_core/python/keras/engine/training_v2.py", line 128, in run_one_epoch
     batch_outs = execution_function(iterator)
   File "/opt/conda/envs/py36/lib/python3.6/site-packages/tensorflow_core/python/keras/engine/training_v2_utils.py", line 98, in execution_function
     distributed_function(input_fn))
   File "/opt/conda/envs/py36/lib/python3.6/site-packages/tensorflow_core/python/eager/def_function.py", line 568, in __call__
     result = self._call(*args, **kwds)
   File "/opt/conda/envs/py36/lib/python3.6/site-packages/tensorflow_core/python/eager/def_function.py", line 615, in _call
     self._initialize(args, kwds, add_initializers_to=initializers)
   File "/opt/conda/envs/py36/lib/python3.6/site-packages/tensorflow_core/python/eager/def_function.py", line 497, in _initialize
     *args, **kwds))
   File "/opt/conda/envs/py36/lib/python3.6/site-packages/tensorflow_core/python/eager/function.py", line 2389, in _get_concrete_function_internal_garbage_collected
     graph_function, _, _ = self._maybe_define_function(args, kwargs)
   File "/opt/conda/envs/py36/lib/python3.6/site-packages/tensorflow_core/python/eager/function.py", line 2703, in _maybe_define_function
     graph_function = self._create_graph_function(args, kwargs)
   File "/opt/conda/envs/py36/lib/python3.6/site-packages/tensorflow_core/python/eager/function.py", line 2593, in _create_graph_function
     capture_by_value=self._capture_by_value),
   File "/opt/conda/envs/py36/lib/python3.6/site-packages/tensorflow_core/python/framework/func_graph.py", line 978, in func_graph_from_py_func
     func_outputs = python_func(*func_args, **func_kwargs)
   File "/opt/conda/envs/py36/lib/python3.6/site-packages/tensorflow_core/python/eager/def_function.py", line 439, in wrapped_fn
     return weak_wrapped_fn().__wrapped__(*args, **kwds)
   File "/opt/conda/envs/py36/lib/python3.6/site-packages/tensorflow_core/python/keras/engine/training_v2_utils.py", line 85, in distributed_function
     per_replica_function, args=args)
   File "/opt/conda/envs/py36/lib/python3.6/site-packages/tensorflow_core/python/distribute/distribute_lib.py", line 763, in experimental_run_v2
     return self._extended.call_for_each_replica(fn, args=args, kwargs=kwargs)
   File "/opt/conda/envs/py36/lib/python3.6/site-packages/tensorflow_core/python/distribute/distribute_lib.py", line 1819, in call_for_each_replica
     return self._call_for_each_replica(fn, args, kwargs)
   File "/opt/conda/envs/py36/lib/python3.6/site-packages/tensorflow_core/python/distribute/distribute_lib.py", line 2164, in _call_for_each_replica
     return fn(*args, **kwargs)
   File "/opt/conda/envs/py36/lib/python3.6/site-packages/tensorflow_core/python/autograph/impl/api.py", line 292, in wrapper
     return func(*args, **kwargs)
   File "/opt/conda/envs/py36/lib/python3.6/site-packages/tensorflow_core/python/keras/engine/training_v2_utils.py", line 212, in _predict_on_batch
     result = predict_on_batch(model, x)
   File "/opt/conda/envs/py36/lib/python3.6/site-packages/tensorflow_core/python/keras/engine/training_v2_utils.py", line 555, in predict_on_batch
     with backend.eager_learning_phase_scope(0):
   File "/opt/conda/envs/py36/lib/python3.6/contextlib.py", line 81, in __enter__
     return next(self.gen)
   File "/opt/conda/envs/py36/lib/python3.6/site-packages/tensorflow_core/python/keras/backend.py", line 437, in eager_learning_phase_scope
     del _GRAPH_LEARNING_PHASES[_DUMMY_EAGER_GRAPH]
   File "/opt/conda/envs/py36/lib/python3.6/weakref.py", line 391, in __delitem__
     del self.data[ref(key)]
 TypeError: cannot create weak reference to 'gevent._local.local' object
 
 &lt;/denchmark-code&gt;
 
 	</description>
 	<comments>
 		<comment id='1' author='Intellicode' date='2020-01-23T10:33:46Z'>
 		Tried replicating the issue from&lt;denchmark-link:https://colab.sandbox.google.com/gist/oanush/6e224557fe243a2e53b7421176afbfa0/35980.ipynb&gt; given code&lt;/denchmark-link&gt;
 ,it just keeps running without any output.Thanks!
 		</comment>
 		<comment id='2' author='Intellicode' date='2020-01-23T12:22:42Z'>
 		Thanks for checking &lt;denchmark-link:https://github.com/oanush&gt;@oanush&lt;/denchmark-link&gt;
 , I tried the notebook, but I think the notebook environment loads tensorflow before doing the monkey patch:
 &lt;denchmark-code&gt;/usr/local/lib/python3.6/dist-packages/ipykernel_launcher.py:2: MonkeyPatchWarning: Monkey-patching ssl after ssl has already been imported may lead to errors, including RecursionError on Python 3.6. It may also silently lead to incorrect behaviour on Python 3.7. Please monkey-patch earlier. See https://github.com/gevent/gevent/issues/1016. Modules that had direct imports (NOT patched): ['urllib3.util (/usr/local/lib/python3.6/dist-packages/urllib3/util/__init__.py)', 'urllib3.util.ssl_ (/usr/local/lib/python3.6/dist-packages/urllib3/util/ssl_.py)']. 
 &lt;/denchmark-code&gt;
 
 This is the same warning I get when I import tensorflow before importing gevent. Also, to reproduce the error you probably need to load an actual tensorflow model (replace tensorflow_model_dir)
 		</comment>
 		<comment id='3' author='Intellicode' date='2020-01-23T23:02:48Z'>
 		Looks like an error in the environment itself. Can you try this in a new virtual environment and let me know if you are facing the same issue?
 		</comment>
 		<comment id='4' author='Intellicode' date='2020-01-24T09:58:26Z'>
 		&lt;denchmark-link:https://github.com/gowthamkpr&gt;@gowthamkpr&lt;/denchmark-link&gt;
  I've tried creating a seperate containter for this purpose:
 &lt;denchmark-code&gt;FROM python:3.6-slim
 
 RUN apt-get update \
     &amp;&amp; apt-get install -y --no-install-recommends build-essential \
     &amp;&amp; rm -rf /var/lib/apt/lists/*
 
 RUN pip install tensorflow gevent
 
 COPY tf_test.py /opt/test/tf_test.py
 COPY model_dir /opt/test/model_dir
 
 CMD python /opt/test/tf_test.py
 &lt;/denchmark-code&gt;
 
 where tf_test.py contains the following code:
 &lt;denchmark-code&gt;from gevent import monkey
 monkey.patch_all()
 
 import numpy as np
 import tensorflow as tf
 
 classifier = tf.keras.models.load_model('/opt/test/model_dir')
 classifier.predict(np.array(
     np.zeros((1, 12623))
 ))
 &lt;/denchmark-code&gt;
 
 This is the complete output:
 &lt;denchmark-code&gt;2020-01-24 09:56:31.304096: W tensorflow/stream_executor/platform/default/dso_loader.cc:55] Could not load dynamic library 'libnvinfer.so.6'; dlerror: libnvinfer.so.6: cannot open shared object file: No such file or directory
 2020-01-24 09:56:31.304280: W tensorflow/stream_executor/platform/default/dso_loader.cc:55] Could not load dynamic library 'libnvinfer_plugin.so.6'; dlerror: libnvinfer_plugin.so.6: cannot open shared object file: No such file or directory
 2020-01-24 09:56:31.304324: W tensorflow/compiler/tf2tensorrt/utils/py_utils.cc:30] Cannot dlopen some TensorRT libraries. If you would like to use Nvidia GPU with TensorRT, please make sure the missing libraries mentioned above are installed properly.
 2020-01-24 09:56:31.867084: W tensorflow/stream_executor/platform/default/dso_loader.cc:55] Could not load dynamic library 'libcuda.so.1'; dlerror: libcuda.so.1: cannot open shared object file: No such file or directory
 2020-01-24 09:56:31.867143: E tensorflow/stream_executor/cuda/cuda_driver.cc:351] failed call to cuInit: UNKNOWN ERROR (303)
 2020-01-24 09:56:31.867175: I tensorflow/stream_executor/cuda/cuda_diagnostics.cc:156] kernel driver does not appear to be running on this host (b3b6a3003434): /proc/driver/nvidia/version does not exist
 2020-01-24 09:56:31.867464: I tensorflow/core/platform/cpu_feature_guard.cc:142] Your CPU supports instructions that this TensorFlow binary was not compiled to use: AVX2 FMA
 2020-01-24 09:56:31.874365: I tensorflow/core/platform/profile_utils/cpu_utils.cc:94] CPU Frequency: 2208000000 Hz
 2020-01-24 09:56:31.875321: I tensorflow/compiler/xla/service/service.cc:168] XLA service 0x55a8216a44f0 initialized for platform Host (this does not guarantee that XLA will be used). Devices:
 2020-01-24 09:56:31.875375: I tensorflow/compiler/xla/service/service.cc:176]   StreamExecutor device (0): Host, Default Version
 Traceback (most recent call last):
   File "/usr/local/lib/python3.6/site-packages/tensorflow_core/python/keras/backend.py", line 430, in eager_learning_phase_scope
     _GRAPH_LEARNING_PHASES[_DUMMY_EAGER_GRAPH] = value
   File "/usr/local/lib/python3.6/weakref.py", line 407, in __setitem__
     self.data[ref(key, self._remove)] = value
 TypeError: cannot create weak reference to 'gevent._local.local' object
 
 During handling of the above exception, another exception occurred:
 
 Traceback (most recent call last):
   File "/opt/test/tf_test.py", line 9, in &lt;module&gt;
     np.zeros((1, 12623))
   File "/usr/local/lib/python3.6/site-packages/tensorflow_core/python/keras/engine/training.py", line 1013, in predict
     use_multiprocessing=use_multiprocessing)
   File "/usr/local/lib/python3.6/site-packages/tensorflow_core/python/keras/engine/training_v2.py", line 498, in predict
     workers=workers, use_multiprocessing=use_multiprocessing, **kwargs)
   File "/usr/local/lib/python3.6/site-packages/tensorflow_core/python/keras/engine/training_v2.py", line 475, in _model_iteration
     total_epochs=1)
   File "/usr/local/lib/python3.6/site-packages/tensorflow_core/python/keras/engine/training_v2.py", line 128, in run_one_epoch
     batch_outs = execution_function(iterator)
   File "/usr/local/lib/python3.6/site-packages/tensorflow_core/python/keras/engine/training_v2_utils.py", line 98, in execution_function
     distributed_function(input_fn))
   File "/usr/local/lib/python3.6/site-packages/tensorflow_core/python/eager/def_function.py", line 568, in __call__
     result = self._call(*args, **kwds)
   File "/usr/local/lib/python3.6/site-packages/tensorflow_core/python/eager/def_function.py", line 615, in _call
     self._initialize(args, kwds, add_initializers_to=initializers)
   File "/usr/local/lib/python3.6/site-packages/tensorflow_core/python/eager/def_function.py", line 497, in _initialize
     *args, **kwds))
   File "/usr/local/lib/python3.6/site-packages/tensorflow_core/python/eager/function.py", line 2389, in _get_concrete_function_internal_garbage_collected
     graph_function, _, _ = self._maybe_define_function(args, kwargs)
   File "/usr/local/lib/python3.6/site-packages/tensorflow_core/python/eager/function.py", line 2703, in _maybe_define_function
     graph_function = self._create_graph_function(args, kwargs)
   File "/usr/local/lib/python3.6/site-packages/tensorflow_core/python/eager/function.py", line 2593, in _create_graph_function
     capture_by_value=self._capture_by_value),
   File "/usr/local/lib/python3.6/site-packages/tensorflow_core/python/framework/func_graph.py", line 978, in func_graph_from_py_func
     func_outputs = python_func(*func_args, **func_kwargs)
   File "/usr/local/lib/python3.6/site-packages/tensorflow_core/python/eager/def_function.py", line 439, in wrapped_fn
     return weak_wrapped_fn().__wrapped__(*args, **kwds)
   File "/usr/local/lib/python3.6/site-packages/tensorflow_core/python/keras/engine/training_v2_utils.py", line 85, in distributed_function
     per_replica_function, args=args)
   File "/usr/local/lib/python3.6/site-packages/tensorflow_core/python/distribute/distribute_lib.py", line 763, in experimental_run_v2
     return self._extended.call_for_each_replica(fn, args=args, kwargs=kwargs)
   File "/usr/local/lib/python3.6/site-packages/tensorflow_core/python/distribute/distribute_lib.py", line 1819, in call_for_each_replica
     return self._call_for_each_replica(fn, args, kwargs)
   File "/usr/local/lib/python3.6/site-packages/tensorflow_core/python/distribute/distribute_lib.py", line 2164, in _call_for_each_replica
     return fn(*args, **kwargs)
   File "/usr/local/lib/python3.6/site-packages/tensorflow_core/python/autograph/impl/api.py", line 292, in wrapper
     return func(*args, **kwargs)
   File "/usr/local/lib/python3.6/site-packages/tensorflow_core/python/keras/engine/training_v2_utils.py", line 212, in _predict_on_batch
     result = predict_on_batch(model, x)
   File "/usr/local/lib/python3.6/site-packages/tensorflow_core/python/keras/engine/training_v2_utils.py", line 555, in predict_on_batch
     with backend.eager_learning_phase_scope(0):
   File "/usr/local/lib/python3.6/contextlib.py", line 81, in __enter__
     return next(self.gen)
   File "/usr/local/lib/python3.6/site-packages/tensorflow_core/python/keras/backend.py", line 437, in eager_learning_phase_scope
     del _GRAPH_LEARNING_PHASES[_DUMMY_EAGER_GRAPH]
   File "/usr/local/lib/python3.6/weakref.py", line 391, in __delitem__
     del self.data[ref(key)]
 TypeError: cannot create weak reference to 'gevent._local.local' object
 &lt;/denchmark-code&gt;
 
 		</comment>
 		<comment id='5' author='Intellicode' date='2020-01-24T10:10:23Z'>
 		You can also reproduce the error with the code from the &lt;denchmark-link:https://www.tensorflow.org/tutorials/quickstart/beginner&gt;official beginner tutorial&lt;/denchmark-link&gt;
 :
 &lt;denchmark-code&gt;from gevent import monkey
 monkey.patch_all()
 import tensorflow as tf
 
 mnist = tf.keras.datasets.mnist
 
 (x_train, y_train), (x_test, y_test) = mnist.load_data()
 x_train, x_test = x_train / 255.0, x_test / 255.0
 
 model = tf.keras.models.Sequential([
     tf.keras.layers.Flatten(input_shape=(28, 28)),
     tf.keras.layers.Dense(128, activation='relu'),
     tf.keras.layers.Dropout(0.2),
     tf.keras.layers.Dense(10, activation='softmax')
 ])
 
 model.compile(optimizer='adam',
               loss='sparse_categorical_crossentropy',
               metrics=['accuracy'])
 
 model.fit(x_train, y_train, epochs=5)
 
 model.evaluate(x_test, y_test, verbose=2)
 &lt;/denchmark-code&gt;
 
 		</comment>
 		<comment id='6' author='Intellicode' date='2020-01-27T20:59:54Z'>
 		I can confirm this issue. I spent some time browsing the code today, and discovered the following.
 _GRAPH_LEARNING_PHASES  is a weakref.WeakKeyDictionary, and at some point a learning phase is added with the key _DUMMY_EAGER_GRAPH, which is a threading.local() object. Because Gevent monkey patching replaces this local object with a gevent._local.local, which cannot be weakly referenced, lookups for _DUMMY_EAGER_GRAPH will throw the exception above.
 I am not sure the use of  is really necessary here, or perhaps there are alternatives. &lt;denchmark-link:https://github.com/iganichev&gt;@iganichev&lt;/denchmark-link&gt;
  I see that you introduced them a while back, perhaps you can shed some light on this?
 		</comment>
 		<comment id='7' author='Intellicode' date='2020-01-27T21:48:43Z'>
 		WeakKeyDictionary is definitely needed. There are a couple of issues here and I can submit a fix. Can somebody quickly test if something like this would work with gevent?
 &lt;denchmark-code&gt;diff --git a/google3/third_party/tensorflow/python/keras/backend.py b/google3/third_party/tensorflow/python/keras/backend.py
 --- a/google3/third_party/tensorflow/python/keras/backend.py
 +++ b/google3/third_party/tensorflow/python/keras/backend.py
 @@ -110,7 +110,14 @@ py_any = any
  # _DUMMY_EAGER_GRAPH is used as a key in _GRAPH_LEARNING_PHASES.
  # We keep a separate reference to it to make sure it does not get removed from
  # _GRAPH_LEARNING_PHASES.
 -_DUMMY_EAGER_GRAPH = threading.local()
 +class DummyEagerGraph(threading.local):
 +  class Foo(object):
 +    pass
 +  def __init__(self):
 +    super(DummyEagerGraph, self).__init__()
 +    self.key = Foo()
 +
 +
 +_DUMMY_EAGER_GRAPH = DummyEagerGraph()
  
  # This boolean flag can be set to True to leave variable initialization
  # up to the user.
 @@ -295,17 +302,17 @@ def learning_phase():
      # will always execute non-eagerly using a function-specific default
      # subgraph.
      if context.executing_eagerly():
 -      if _DUMMY_EAGER_GRAPH not in _GRAPH_LEARNING_PHASES:
 +      if _DUMMY_EAGER_GRAPH.key not in _GRAPH_LEARNING_PHASES:
          # Fallback to inference mode as default.
          return 0
 -      return _GRAPH_LEARNING_PHASES[_DUMMY_EAGER_GRAPH]
 +      return _GRAPH_LEARNING_PHASES[_DUMMY_EAGER_GRAPH.key]
      learning_phase = symbolic_learning_phase()
      _mark_func_graph_as_unsaveable(graph, learning_phase)
      return learning_phase
  
  
  def global_learning_phase_is_set():
 -  return _DUMMY_EAGER_GRAPH in _GRAPH_LEARNING_PHASES
 +  return _DUMMY_EAGER_GRAPH.key in _GRAPH_LEARNING_PHASES
  
  
  def _mark_func_graph_as_unsaveable(graph, learning_phase):
 @@ -356,7 +363,7 @@ def set_learning_phase(value):
      if context.executing_eagerly():
        # In an eager context, the learning phase values applies to both the eager
        # context and the internal Keras graph.
 -      _GRAPH_LEARNING_PHASES[_DUMMY_EAGER_GRAPH] = value
 +      _GRAPH_LEARNING_PHASES[_DUMMY_EAGER_GRAPH.key] = value
      _GRAPH_LEARNING_PHASES[get_graph()] = value
  
  
 @@ -384,7 +391,7 @@ def learning_phase_scope(value):
    with ops.init_scope():
      if context.executing_eagerly():
        previous_eager_value = _GRAPH_LEARNING_PHASES.get(
 -          _DUMMY_EAGER_GRAPH, None)
 +          _DUMMY_EAGER_GRAPH.key, None)
      previous_graph_value = _GRAPH_LEARNING_PHASES.get(get_graph(), None)
  
    try:
 @@ -395,9 +402,9 @@ def learning_phase_scope(value):
      with ops.init_scope():
        if context.executing_eagerly():
          if previous_eager_value is not None:
 -          _GRAPH_LEARNING_PHASES[_DUMMY_EAGER_GRAPH] = previous_eager_value
 -        elif _DUMMY_EAGER_GRAPH in _GRAPH_LEARNING_PHASES:
 -          del _GRAPH_LEARNING_PHASES[_DUMMY_EAGER_GRAPH]
 +          _GRAPH_LEARNING_PHASES[_DUMMY_EAGER_GRAPH.key] = previous_eager_value
 +        elif _DUMMY_EAGER_GRAPH.key in _GRAPH_LEARNING_PHASES:
 +          del _GRAPH_LEARNING_PHASES[_DUMMY_EAGER_GRAPH.key]
  
        graph = get_graph()
        if previous_graph_value is not None:
 @@ -427,14 +434,14 @@ def eager_learning_phase_scope(value):
    if global_learning_phase_was_set:
      previous_value = learning_phase()
    try:
 -    _GRAPH_LEARNING_PHASES[_DUMMY_EAGER_GRAPH] = value
 +    _GRAPH_LEARNING_PHASES[_DUMMY_EAGER_GRAPH.key] = value
      yield
    finally:
      # Restore learning phase to initial value or unset.
      if global_learning_phase_was_set:
 -      _GRAPH_LEARNING_PHASES[_DUMMY_EAGER_GRAPH] = previous_value
 +      _GRAPH_LEARNING_PHASES[_DUMMY_EAGER_GRAPH.key] = previous_value
      else:
 -      del _GRAPH_LEARNING_PHASES[_DUMMY_EAGER_GRAPH]
 +      del _GRAPH_LEARNING_PHASES[_DUMMY_EAGER_GRAPH.key]
  
  
  def _current_graph(op_input_list):
 &lt;/denchmark-code&gt;
 
 		</comment>
 		<comment id='8' author='Intellicode' date='2020-01-27T23:16:11Z'>
 		Yes, this seems to resolve the issue. I did have to modify the patch to reference 'Foo' correctly: self.key = DummyEagerGraph.Foo().
 		</comment>
 		<comment id='9' author='Intellicode' date='2020-01-27T23:40:25Z'>
 		Great. I will make the patch and send it out internally (a little easier). I should make it to github tomorrow night or a bit later.
 		</comment>
 		<comment id='10' author='Intellicode' date='2020-01-27T23:43:31Z'>
 		That's amazing, thanks for the quick response!
 		</comment>
 		<comment id='11' author='Intellicode' date='2020-01-28T19:10:52Z'>
 		Are you satisfied with the resolution of your issue?
 &lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/35980&gt;Yes&lt;/denchmark-link&gt;
 
 &lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/35980&gt;No&lt;/denchmark-link&gt;
 
 		</comment>
 	</comments>
 </bug>
<commit id='75286a79e7cdf9fdc27b15919f453786eee8936d' author='Igor Ganichev' date='2020-01-28 11:09:31-08:00'>
 	<dmm_unit complexity='1.0' interfacing='1.0' size='1.0'></dmm_unit>
 	<modification change_type='MODIFY' old_name='tensorflow\python\keras\backend.py' new_name='tensorflow\python\keras\backend.py'>
 		<file_info nloc='2817' complexity='568' token_count='18929'></file_info>
 		<method name='eager_learning_phase_scope' parameters='value'>
 				<method_info nloc='15' complexity='4' token_count='68' nesting_level='0' start_line='442' end_line='469'></method_info>
 			<added_lines>462,467,469</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<method name='__init__' parameters='self'>
 				<method_info nloc='3' complexity='1' token_count='24' nesting_level='1' start_line='137' end_line='142'></method_info>
 			<added_lines>137,138,139,140,141,142</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<method name='learning_phase_scope' parameters='value'>
 				<method_info nloc='24' complexity='9' token_count='139' nesting_level='0' start_line='397' end_line='438'></method_info>
 			<added_lines>419,430,431,432</added_lines>
 			<deleted_lines>398,399,400,430,435,437</deleted_lines>
 		</method>
 		<method name='learning_phase' parameters=''>
 				<method_info nloc='14' complexity='4' token_count='74' nesting_level='0' start_line='304' end_line='336'></method_info>
 			<added_lines>330,333</added_lines>
 			<deleted_lines>308</deleted_lines>
 		</method>
 		<method name='set_learning_phase' parameters='value'>
 				<method_info nloc='8' complexity='3' token_count='53' nesting_level='0' start_line='374' end_line='392'></method_info>
 			<added_lines>391</added_lines>
 			<deleted_lines>387</deleted_lines>
 		</method>
 		<method name='global_learning_phase_is_set' parameters=''>
 				<method_info nloc='2' complexity='1' token_count='10' nesting_level='0' start_line='339' end_line='340'></method_info>
 			<added_lines>340</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines>110,111,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,143,144,145</added_lines>
 			<deleted_lines>110,113,298,301,359</deleted_lines>
 		</modified_lines>
 	</modification>
 </commit>
</bug_data>
