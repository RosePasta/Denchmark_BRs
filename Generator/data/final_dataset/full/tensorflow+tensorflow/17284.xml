<bug_data>
<bug id='17284' author='rightaditya' open_date='2018-02-26T21:15:35Z' closed_time='2018-03-02T20:05:14Z'>
 	<summary>tensor-valued seeds in tf.data API can result in nondeterministic results</summary>
 	<description>
 &lt;denchmark-h:h3&gt;System information&lt;/denchmark-h&gt;
 
 
 Have I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes
 OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Linux Ubuntu 17.10
 TensorFlow installed from (source or binary): Source
 TensorFlow version (use command below): v1.5.0-11-g4588350f20 1.5.0
 Python version: 3.6.3
 Bazel version (if compiling from source): 0.11.0
 GCC/Compiler version (if compiling from source): 7.2.0
 CUDA/cuDNN version: N/A
 GPU model and memory: N/A
 Exact command to reproduce: See code below
 
 &lt;denchmark-h:h3&gt;Describe the problem&lt;/denchmark-h&gt;
 
 The tf.data API allows/requires seeds to be provided that are tf.tensors. This is an issue when the graph-level seed has been set to 0, and the provided op-level seed tensor takes on a value of 0. As noted in the comments in the code for tf.get_seed, a (0, 0) seed is problematic because the C++ ops assume this means nondeterminism. Of course, when a user is specifying these seeds, they're expecting deterministic behaviour. Unfortunately, tf.get_seed only checks for this issue for the case where the seeds are ints, not tensors. See the code below for an example.
 I would have been happy to submit a PR for this, but I have no idea where the fix should be for this bug. As I'm not especially familiar with the code base, it's not apparent whether it's even possible to have the code for tf.get_seed to check the value of a tensor seed. If not, I'm guessing the tf.data API would need to provide the checks.
 &lt;denchmark-h:h3&gt;Source code / logs&lt;/denchmark-h&gt;
 
 The following code reproduces the bug for me:
 import tensorflow as tf
 
 tf.set_random_seed(0)
 seed_tensor = tf.placeholder(tf.int64, shape=[], name='data_seed')
 data = tf.data.Dataset.range(10).shuffle(10, seed=seed_tensor)
 iterator = tf.data.Iterator.from_structure(tf.int64, tf.TensorShape([]))
 
 init = iterator.make_initializer(data)
 value = iterator.get_next()
 
 print('First run: ', end='')
 with tf.Session() as sess1:
     sess1.run(init, feed_dict={seed_tensor: 0})
     values = []
     while True:
         try:
             values.append(str(sess1.run(value)))
         except tf.errors.OutOfRangeError:
             break
 
     print(', '.join(values))
 
 print('Second run: ', end='')
 with tf.Session() as sess2:
     sess2.run(init, feed_dict={seed_tensor: 0})
     values = []
     while True:
         try:
             values.append(str(sess2.run(value)))
         except tf.errors.OutOfRangeError:
             break
 
     print(', '.join(values))
 The result I get is:
 &lt;denchmark-code&gt;First run: 8, 4, 6, 9, 1, 0, 5, 7, 3, 2
 Second run: 1, 6, 3, 0, 7, 5, 2, 9, 8, 4
 &lt;/denchmark-code&gt;
 
 I would expect the first and second runs to produce the exact same sequence, though the particular sequence might differ from environment to environment.
 If I change the feed_dict to provide a value of 0 for seed_tensor for both runs, I get the expected result:
 &lt;denchmark-code&gt;First run: 5, 2, 0, 1, 7, 4, 9, 3, 8, 6
 Second run: 5, 2, 0, 1, 7, 4, 9, 3, 8, 6
 &lt;/denchmark-code&gt;
 
 If I change the shuffle() call to take a value of 0 directly (i.e., `...shuffle(10, seed=0)), I get the expected result as well:
 &lt;denchmark-code&gt;First run: 4, 8, 7, 1, 3, 2, 6, 9, 0, 5
 Second run: 4, 8, 7, 1, 3, 2, 6, 9, 0, 5
 &lt;/denchmark-code&gt;
 
 For the record, I encountered this issue because I'm using an Iterator via Iterator.from_structure, and when I use that iterator on a Dataset.shuffle() I get the same order for each epoch. To get around this, I provided the epoch number as a seed to Dataset.shuffle(), with the first epoch being epoch 0. In my case I can avoid this bug by just starting the epoch count at 1, but it took me a while to track down, and there may be other cases where the API is used in a similar way that would be problematic for those expecting deterministic results.
 	</description>
 	<comments>
 		<comment id='1' author='rightaditya' date='2018-02-26T23:12:09Z'>
 		&lt;denchmark-link:https://github.com/mrry&gt;@mrry&lt;/denchmark-link&gt;
  Can you look at this?
 		</comment>
 		<comment id='2' author='rightaditya' date='2018-02-26T23:34:03Z'>
 		I'm a bit confused by the code example. Why would you expect the shuffled order to be the same when you feed two different values for seed_tensor?
 It might make sense to rewrite the seed, as tf.get_seed() does, when the runtime value is 0. Is that what you're suggesting?
 		</comment>
 		<comment id='3' author='rightaditya' date='2018-02-27T00:24:45Z'>
 		&lt;denchmark-link:https://github.com/mrry&gt;@mrry&lt;/denchmark-link&gt;
  Ugh, sorry, that's my mistake. Both fed values should be 0. I copied-and-pasted the code I was using to test it and had changed one of them but not the other. I've edited the code to reflect my intention.
 
 It might make sense to rewrite the seed, as tf.get_seed() does, when the runtime value is 0. Is that what you're suggesting?
 
 Yes, exactly. the tf.get_seed() check is insufficient if tensor-valued seeds are allowed, as it only does an identity check against 0.
 		</comment>
 		<comment id='4' author='rightaditya' date='2018-02-27T01:45:00Z'>
 		OK, that does seem like a bug, and the fix isn't too difficult. The gist is to set seed = tf.where(seed == 0, tf.constant(2 ** 31 - 1, dtype=tf.int64), seed) when seed is a tf.Tensor.
 Watch this space for a fix in the next few days.
 		</comment>
 		<comment id='5' author='rightaditya' date='2018-02-27T22:28:28Z'>
 		&lt;denchmark-link:https://github.com/mrry&gt;@mrry&lt;/denchmark-link&gt;
  I'd be willing to submit a PR for this if no one's already working on it.
 		</comment>
 		<comment id='6' author='rightaditya' date='2018-02-27T22:33:20Z'>
 		Thanks for offering! I've already got a fix under review, so it should be merged soon.
 		</comment>
 	</comments>
 </bug>
<commit id='f6bda409206dc642d7a6f02842e76b0be7234491' author='Derek Murray' date='2018-02-27 19:17:13-08:00'>
 	<dmm_unit complexity='1.0' interfacing='1.0' size='0.0'></dmm_unit>
 	<modification change_type='MODIFY' old_name='tensorflow\contrib\data\python\ops\random_ops.py' new_name='tensorflow\contrib\data\python\ops\random_ops.py'>
 		<file_info nloc='34' complexity='5' token_count='230'></file_info>
 		<method name='__init__' parameters='self,seed'>
 				<method_info nloc='3' complexity='1' token_count='34' nesting_level='1' start_line='33' end_line='36'></method_info>
 			<added_lines>36</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines>22</added_lines>
 			<deleted_lines>23,26,37,38,39,40,41,42,43,44,45,46</deleted_lines>
 		</modified_lines>
 	</modification>
 	<modification change_type='MODIFY' old_name='tensorflow\contrib\data\python\ops\shuffle_ops.py' new_name='tensorflow\contrib\data\python\ops\shuffle_ops.py'>
 		<file_info nloc='54' complexity='7' token_count='372'></file_info>
 		<modified_lines>
 			<added_lines>22,48</added_lines>
 			<deleted_lines>26,48,49,50,51,52,53,54,55,56,57,58</deleted_lines>
 		</modified_lines>
 	</modification>
 	<modification change_type='MODIFY' old_name='tensorflow\python\data\kernel_tests\shuffle_dataset_op_test.py' new_name='tensorflow\python\data\kernel_tests\shuffle_dataset_op_test.py'>
 		<file_info nloc='155' complexity='17' token_count='1225'></file_info>
 		<method name='testSeedZero' parameters='self'>
 				<method_info nloc='22' complexity='3' token_count='192' nesting_level='1' start_line='135' end_line='160'></method_info>
 			<added_lines>135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines>161</added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 	<modification change_type='MODIFY' old_name='tensorflow\python\data\ops\BUILD' new_name='tensorflow\python\data\ops\BUILD'>
 		<file_info nloc='None' complexity='None' token_count='None'></file_info>
 		<modified_lines>
 			<added_lines>26</added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 	<modification change_type='MODIFY' old_name='tensorflow\python\data\ops\dataset_ops.py' new_name='tensorflow\python\data\ops\dataset_ops.py'>
 		<file_info nloc='1063' complexity='254' token_count='7604'></file_info>
 		<modified_lines>
 			<added_lines>29,1487</added_lines>
 			<deleted_lines>35,1487,1488,1489,1490,1491,1492,1493,1494,1495,1496</deleted_lines>
 		</modified_lines>
 	</modification>
 	<modification change_type='MODIFY' old_name='tensorflow\python\data\util\BUILD' new_name='tensorflow\python\data\util\BUILD'>
 		<file_info nloc='None' complexity='None' token_count='None'></file_info>
 		<modified_lines>
 			<added_lines>89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112</added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 	<modification change_type='ADD' old_name='None' new_name='tensorflow\python\data\util\random_seed.py'>
 		<file_info nloc='28' complexity='3' token_count='226'></file_info>
 	</modification>
 	<modification change_type='ADD' old_name='None' new_name='tensorflow\python\data\util\random_seed_test.py'>
 		<file_info nloc='56' complexity='3' token_count='570'></file_info>
 	</modification>
 </commit>
</bug_data>
