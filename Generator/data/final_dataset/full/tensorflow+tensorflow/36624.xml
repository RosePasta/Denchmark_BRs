<bug_data>
<bug id='36624' author='durandg12' open_date='2020-02-10T14:48:15Z' closed_time='2020-02-18T22:19:59Z'>
 	<summary>LSTM return_state=True fail with tf.keras.Sequencial model</summary>
 	<description>
 
 Have I written custom code (as opposed to using a stock example script provided in TensorFlow): no
 OS Platform and Distribution (e.g., Linux Ubuntu 16.04): macOS 10.13.6
 TensorFlow installed from (source or binary): binary
 TensorFlow version (use command below): v2.1.0-rc2-17-ge5bf8de410 2.1.0
 Python version: v3.6.7:6ec5cf24b7, Oct 20 2018, 03:02:14
 
 Describe the current behavior
 The call method of a tf.keras.Sequential object fails and throws an error when one layer is an instance of the tf.keras.layers.LSTM class constructed with return_state=True. Given the error message, I believe it is because the output of the call method of such LSTM layer is a list instead of a Tensor, and the call method of Sequential does not know what to do with a list.
 Describe the expected behavior
 I think that the call method of Sequential should know that the Tensor output of LSTM is the first element of the list when return_state=True.
 Code to reproduce the issue
 Setting :
 &lt;denchmark-code&gt;import tensorflow as tf
 import numpy as np
 
 print('Using Tensorflow version {} (git version {})'.format(tf.version.VERSION, tf.version.GIT_VERSION))
 
 batch_size = 3
 ts = 9
 input_dim = 2
 nump = np.arange(examples*batch_size*ts*input_dim, dtype=np.float32).reshape(batch_size, ts, input_dim)
 dataset = tf.data.Dataset.from_tensor_slices(nump).batch(batch_size)
 for x in dataset:
     print(x.shape)
 return_state = True
 &lt;/denchmark-code&gt;
 
 Output:
 &lt;denchmark-code&gt;Using Tensorflow version 2.1.0 (git version v2.1.0-rc2-17-ge5bf8de410)
 (3, 9, 2)
 &lt;/denchmark-code&gt;
 
 Error with Sequential:
 &lt;denchmark-code&gt;model_seq = tf.keras.Sequential([tf.keras.layers.LSTM(3, return_state=return_state)])
 for x in dataset:
     print(model_seq(x))
 &lt;/denchmark-code&gt;
 
 Output:
 &lt;denchmark-code&gt;---------------------------------------------------------------------------
 AttributeError                            Traceback (most recent call last)
 &lt;ipython-input-57-5500870ab2fc&gt; in &lt;module&gt;
       1 model_seq = tf.keras.Sequential([tf.keras.layers.LSTM(3, return_state=return_state)])
       2 for x in dataset:
 ----&gt; 3     print(model_seq(x))
 
 ~/path/to/python3.6/site-packages/tensorflow_core/python/keras/engine/base_layer.py in __call__(self, inputs, *args, **kwargs)
     820           with base_layer_utils.autocast_context_manager(
     821               self._compute_dtype):
 --&gt; 822             outputs = self.call(cast_inputs, *args, **kwargs)
     823           self._handle_activity_regularization(inputs, outputs)
     824           self._set_mask_metadata(inputs, outputs, input_masks)
 
 ~/path/to/python3.6/site-packages/tensorflow_core/python/keras/engine/sequential.py in call(self, inputs, training, mask)
     283       # `outputs` will be the inputs to the next layer.
     284       inputs = outputs
 --&gt; 285       mask = outputs._keras_mask
     286 
     287     return outputs
 
 AttributeError: 'list' object has no attribute '_keras_mask'
 &lt;/denchmark-code&gt;
 
 It works when constructing the model with the Functional API:
 &lt;denchmark-code&gt;def lstm_model(return_state, ts, input_dim):
     inp = tf.keras.Input(shape=(ts, input_dim))
     out = tf.keras.layers.LSTM(3, return_state=return_state)(inp)
     return tf.keras.Model(inputs=inp, outputs=out)
     
 model_func = lstm_model(return_state, ts, input_dim)
 
 for x in dataset:
     print(model_func(x))
 &lt;/denchmark-code&gt;
 
 Output:
 &lt;denchmark-code&gt;[&lt;tf.Tensor: shape=(3, 3), dtype=float32, numpy=
 array([[-8.8475537e-01,  2.9517543e-03, -9.9753261e-01],
        [-9.7553629e-01,  9.5521700e-06, -9.9959475e-01],
        [-9.9497062e-01,  3.0903845e-08, -9.9979442e-01]], dtype=float32)&gt;, &lt;tf.Tensor: shape=(3, 3), dtype=float32, numpy=
 array([[-8.8475537e-01,  2.9517543e-03, -9.9753261e-01],
        [-9.7553629e-01,  9.5521700e-06, -9.9959475e-01],
        [-9.9497062e-01,  3.0903845e-08, -9.9979442e-01]], dtype=float32)&gt;, &lt;tf.Tensor: shape=(3, 3), dtype=float32, numpy=
 array([[-7.6066346e+00,  2.9581292e-03, -3.3488092e+00],
        [-8.9999275e+00,  9.5521846e-06, -4.2520967e+00],
        [-9.0000000e+00,  3.0903848e-08, -4.5915442e+00]], dtype=float32)&gt;]
 &lt;/denchmark-code&gt;
 
 Related question
 In my Functional API example, lstm_modelfails if I use inp = tf.keras.Input(shape=(ts, None)) instead of providing the explicit input dimension. The error message I get is:
 &lt;denchmark-code&gt;---------------------------------------------------------------------------
 TypeError                                 Traceback (most recent call last)
 &lt;ipython-input-64-9b042ffca48d&gt; in &lt;module&gt;
       4     return tf.keras.Model(inputs=inp, outputs=out)
       5 
 ----&gt; 6 model_func = lstm_model(return_state, ts, input_dim)
       7 
       8 for x in dataset:
 
 &lt;ipython-input-64-9b042ffca48d&gt; in lstm_model(return_state, ts, input_dim)
       1 def lstm_model(return_state, ts, input_dim):
       2     inp = tf.keras.Input(shape=(ts, None))
 ----&gt; 3     out = tf.keras.layers.LSTM(3, return_state=return_state)(inp)
       4     return tf.keras.Model(inputs=inp, outputs=out)
       5 
 
 ~/path/to/python3.6/site-packages/tensorflow_core/python/keras/layers/recurrent.py in __call__(self, inputs, initial_state, constants, **kwargs)
     642 
     643     if initial_state is None and constants is None:
 --&gt; 644       return super(RNN, self).__call__(inputs, **kwargs)
     645 
     646     # If any of `initial_state` or `constants` are specified and are Keras
 
 ~/path/to/python3.6/site-packages/tensorflow_core/python/keras/engine/base_layer.py in __call__(self, inputs, *args, **kwargs)
     746           # Build layer if applicable (if the `build` method has been
     747           # overridden).
 --&gt; 748           self._maybe_build(inputs)
     749           cast_inputs = self._maybe_cast_inputs(inputs)
     750 
 
 ~/path/to/python3.6/site-packages/tensorflow_core/python/keras/engine/base_layer.py in _maybe_build(self, inputs)
    2114         # operations.
    2115         with tf_utils.maybe_init_scope(self):
 -&gt; 2116           self.build(input_shapes)
    2117       # We must set self.built since user defined build functions are not
    2118       # constrained to set self.built.
 
 ~/path/to/python3.6/site-packages/tensorflow_core/python/keras/layers/recurrent.py in build(self, input_shape)
     562     if isinstance(self.cell, Layer):
     563       if not self.cell.built:
 --&gt; 564         self.cell.build(step_input_shape)
     565 
     566     # set or validate state_spec
 
 ~/path/to/python3.6/site-packages/tensorflow_core/python/keras/utils/tf_utils.py in wrapper(instance, input_shape)
     304     if input_shape is not None:
     305       input_shape = convert_shapes(input_shape, to_tuples=True)
 --&gt; 306     output_shape = fn(instance, input_shape)
     307     # Return shapes from `fn` as TensorShapes.
     308     if output_shape is not None:
 
 ~/path/to/python3.6/site-packages/tensorflow_core/python/keras/layers/recurrent.py in build(self, input_shape)
    2299         regularizer=self.kernel_regularizer,
    2300         constraint=self.kernel_constraint,
 -&gt; 2301         caching_device=default_caching_device)
    2302     self.recurrent_kernel = self.add_weight(
    2303         shape=(self.units, self.units * 4),
 
 ~/path/to/python3.6/site-packages/tensorflow_core/python/keras/engine/base_layer.py in add_weight(self, name, shape, dtype, initializer, regularizer, trainable, constraint, partitioner, use_resource, synchronization, aggregation, **kwargs)
     444         synchronization=synchronization,
     445         aggregation=aggregation,
 --&gt; 446         caching_device=caching_device)
     447     backend.track_variable(variable)
     448 
 
 ~/path/to/python3.6/site-packages/tensorflow_core/python/training/tracking/base.py in _add_variable_with_custom_getter(self, name, shape, dtype, initializer, getter, overwrite, **kwargs_for_getter)
     742         dtype=dtype,
     743         initializer=initializer,
 --&gt; 744         **kwargs_for_getter)
     745 
     746     # If we set an initializer and the variable processed it, tracking will not
 
 ~/path/to/python3.6/site-packages/tensorflow_core/python/keras/engine/base_layer_utils.py in make_variable(name, shape, dtype, initializer, trainable, caching_device, validate_shape, constraint, use_resource, collections, synchronization, aggregation, partitioner)
     140       synchronization=synchronization,
     141       aggregation=aggregation,
 --&gt; 142       shape=variable_shape if variable_shape else None)
     143 
     144 
 
 ~/path/to/python3.6/site-packages/tensorflow_core/python/ops/variables.py in __call__(cls, *args, **kwargs)
     256   def __call__(cls, *args, **kwargs):
     257     if cls is VariableV1:
 --&gt; 258       return cls._variable_v1_call(*args, **kwargs)
     259     elif cls is Variable:
     260       return cls._variable_v2_call(*args, **kwargs)
 
 ~/path/to/python3.6/site-packages/tensorflow_core/python/ops/variables.py in _variable_v1_call(cls, initial_value, trainable, collections, validate_shape, caching_device, name, variable_def, dtype, expected_shape, import_scope, constraint, use_resource, synchronization, aggregation, shape)
     217         synchronization=synchronization,
     218         aggregation=aggregation,
 --&gt; 219         shape=shape)
     220 
     221   def _variable_v2_call(cls,
 
 ~/path/to/python3.6/site-packages/tensorflow_core/python/ops/variables.py in &lt;lambda&gt;(**kwargs)
     195                         shape=None):
     196     """Call on Variable class. Useful to force the signature."""
 --&gt; 197     previous_getter = lambda **kwargs: default_variable_creator(None, **kwargs)
     198     for _, getter in ops.get_default_graph()._variable_creator_stack:  # pylint: disable=protected-access
     199       previous_getter = _make_getter(getter, previous_getter)
 
 ~/path/to/python3.6/site-packages/tensorflow_core/python/ops/variable_scope.py in default_variable_creator(next_creator, **kwargs)
    2594         synchronization=synchronization,
    2595         aggregation=aggregation,
 -&gt; 2596         shape=shape)
    2597   else:
    2598     return variables.RefVariable(
 
 ~/path/to/python3.6/site-packages/tensorflow_core/python/ops/variables.py in __call__(cls, *args, **kwargs)
     260       return cls._variable_v2_call(*args, **kwargs)
     261     else:
 --&gt; 262       return super(VariableMetaclass, cls).__call__(*args, **kwargs)
     263 
     264 
 
 ~/path/to/python3.6/site-packages/tensorflow_core/python/ops/resource_variable_ops.py in __init__(self, initial_value, trainable, collections, validate_shape, caching_device, name, dtype, variable_def, import_scope, constraint, distribute_strategy, synchronization, aggregation, shape)
    1409           aggregation=aggregation,
    1410           shape=shape,
 -&gt; 1411           distribute_strategy=distribute_strategy)
    1412 
    1413   def _init_from_args(self,
 
 ~/path/to/python3.6/site-packages/tensorflow_core/python/ops/resource_variable_ops.py in _init_from_args(self, initial_value, trainable, collections, caching_device, name, dtype, constraint, synchronization, aggregation, distribute_strategy, shape)
    1540           with ops.name_scope("Initializer"), device_context_manager(None):
    1541             initial_value = ops.convert_to_tensor(
 -&gt; 1542                 initial_value() if init_from_fn else initial_value,
    1543                 name="initial_value", dtype=dtype)
    1544           if shape is not None:
 
 ~/path/to/python3.6/site-packages/tensorflow_core/python/keras/engine/base_layer_utils.py in &lt;lambda&gt;()
     120           (type(init_ops.Initializer), type(init_ops_v2.Initializer))):
     121         initializer = initializer()
 --&gt; 122       init_val = lambda: initializer(shape, dtype=dtype)
     123       variable_dtype = dtype.base_dtype
     124   if use_resource is None:
 
 ~/path/to/python3.6/site-packages/tensorflow_core/python/ops/init_ops_v2.py in __call__(self, shape, dtype)
     413       scale /= max(1., fan_out)
     414     else:
 --&gt; 415       scale /= max(1., (fan_in + fan_out) / 2.)
     416     if self.distribution == "truncated_normal":
     417       # constant from scipy.stats.truncnorm.std(a=-2, b=2, loc=0., scale=1.)
 
 TypeError: unsupported operand type(s) for +: 'NoneType' and 'int'
 &lt;/denchmark-code&gt;
 
 Is it normal? If so, why is that?
 	</description>
 	<comments>
 		<comment id='1' author='durandg12' date='2020-02-11T11:06:24Z'>
 		Was able to reproduce the issue. Please find the Gist &lt;denchmark-link:https://colab.sandbox.google.com/gist/amahendrakar/895c54df8a066fec5cfd7fdf27fc431a/36624.ipynb&gt;here&lt;/denchmark-link&gt;
 . Thanks!
 		</comment>
 		<comment id='2' author='durandg12' date='2020-02-14T22:42:59Z'>
 		So for Sequential model, we expect the layer within it only have one input and one output. The LSTM layer with return_states=True will cause it to return more than 1 output, which violate this rule.
 I think the sequential model code need to be updated to show more explicit error for this case. We already show it if your model has the input_shape (which trigger model build under the hood), but we missed it in the deferred build case (input_shape is not provided by layers, but inferred when actual input is provided).
 		</comment>
 		<comment id='3' author='durandg12' date='2020-02-18T22:20:01Z'>
 		Are you satisfied with the resolution of your issue?
 &lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/36624&gt;Yes&lt;/denchmark-link&gt;
 
 &lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/36624&gt;No&lt;/denchmark-link&gt;
 
 		</comment>
 	</comments>
 </bug>
<commit id='619ca02f2d9ff61aedf7de6e6b43116e859f6913' author='Scott Zhu' date='2020-02-14 16:21:39-08:00'>
 	<dmm_unit complexity='0.4' interfacing='0.0' size='0.4'></dmm_unit>
 	<modification change_type='MODIFY' old_name='tensorflow\python\keras\engine\sequential.py' new_name='tensorflow\python\keras\engine\sequential.py'>
 		<file_info nloc='263' complexity='61' token_count='1512'></file_info>
 		<method name='add' parameters='self,layer'>
 				<method_info nloc='45' complexity='14' token_count='352' nesting_level='1' start_line='148' end_line='231'></method_info>
 			<added_lines>203,214</added_lines>
 			<deleted_lines>198,199,200,201,212,213,214,215</deleted_lines>
 		</method>
 		<method name='call' parameters='self,inputs,training,mask'>
 				<method_info nloc='19' complexity='7' token_count='147' nesting_level='1' start_line='268' end_line='294'></method_info>
 			<added_lines>288,289</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines>42,43,44,45,46</added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 	<modification change_type='MODIFY' old_name='tensorflow\python\keras\engine\sequential_test.py' new_name='tensorflow\python\keras\engine\sequential_test.py'>
 		<file_info nloc='407' complexity='33' token_count='3442'></file_info>
 		<method name='test_invalid_use_cases.compute_output_shape' parameters='self,input_shape'>
 				<method_info nloc='2' complexity='1' token_count='13' nesting_level='3' start_line='224' end_line='225'></method_info>
 			<added_lines></added_lines>
 			<deleted_lines>224,225</deleted_lines>
 		</method>
 		<method name='test_invalid_use_cases' parameters='self'>
 				<method_info nloc='14' complexity='1' token_count='115' nesting_level='1' start_line='212' end_line='233'></method_info>
 			<added_lines></added_lines>
 			<deleted_lines>218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233</deleted_lines>
 		</method>
 		<method name='test_invalid_use_cases.call' parameters='self,inputs'>
 				<method_info nloc='2' complexity='1' token_count='17' nesting_level='3' start_line='221' end_line='222'></method_info>
 			<added_lines></added_lines>
 			<deleted_lines>221,222</deleted_lines>
 		</method>
 		<method name='test_multi_output_layer_not_accepted' parameters='self'>
 				<method_info nloc='14' complexity='1' token_count='111' nesting_level='1' start_line='380' end_line='400'></method_info>
 			<added_lines>391,392,393,394,395,396,397,398,399,400</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines>401</added_lines>
 			<deleted_lines>234</deleted_lines>
 		</modified_lines>
 	</modification>
 </commit>
</bug_data>
