<bug_data>
<bug id='38403' author='keithchugg' open_date='2020-04-09T19:52:33Z' closed_time='2020-06-25T03:18:51Z'>
 	<summary>model.reset_states() does not work for bidirectional-RNNs in tf.keras</summary>
 	<description>
 System information
 
 
 Have I written custom code (as opposed to using a stock
 example script provided in TensorFlow): YES
 
 
 OS Platform and Distribution (e.g.,
 Linux Ubuntu 16.04): Ubuntu 18.04 LTS
 
 
 TensorFlow installed from (source or
 binary): binary
 
 
 TensorFlow version (use command below):
 TF 2.1
 and
 tf-nightly==2.2.0.dev20200407
 (both have bug around this issue, but different issues)
 
 
 Python version:  3.7.4
 
 
 CUDA/cuDNN version: 10.1, 7.6.5
 
 
 GPU model and memory: 2080ti, 11GB.  Bug is on both CPU/GPU.
 
 
 Describe the current behavior
 model.reset_states() does not work for bidirectional, stateful recurrent layers (bidi-RNNs).
 TF 2.1: model.reset_states() does nothing for stateful bidi-RNNs.
 tf-nightly: calling model.reset_states() for stateful bidi-RNNs causes a crash
 
 This was reported as a bug in TF 2.0 -- &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/34055&gt;model.reset_states() does nothing for bidi-RNNs&lt;/denchmark-link&gt;
 .  I thought this was fixed in tf-nightly at that time, but has returned in TF 2.1.
 model.reset_states() for standard RNNs changed in TF 2.1. has the following behavior:
 
 if model is stateful with NO initial state input: resets state to zero
 if model is stateful with initial state input: resets state to state input
 otherwise the state is carried over form the last call.
 
 Thus the expected behavior for stateful bidi-RNNs is:
 
 if model is stateful with NO initial state input: resets fwd and bwd state to zero
 if model is stateful with initial state input: resets fwd state to fwd state input and  resets bwd state to bwd state input
 otherwise the fwd state and bwd state are carried over form the last call (as is done in stateful bidi-RNNs).
 
 Standalone code to reproduce the issue
 Code to show this behavior with no state-inputs:
 import os
 os.environ['CUDA_DEVICE_ORDER']='PCI_BUS_ID'
 os.environ['CUDA_VISIBLE_DEVICES']=''
 
 import numpy as np
 from tensorflow.keras.layers import Input, Dense, SimpleRNN, GRU, LSTM, Bidirectional
 from tensorflow.keras.models import Model
 
 REC = LSTM
 
 sequence_length = 3
 feature_dim = 1
 features_in = Input(batch_shape=(1, sequence_length, feature_dim)) 
 
 rnn_out = Bidirectional( REC(1, activation=None, use_bias=False, return_sequences=True, return_state=False, stateful=False))(features_in)
 stateless_model = Model(inputs=[features_in], outputs=[rnn_out])
 
 stateful_rnn_out = Bidirectional( REC(1, activation=None, use_bias=False, return_sequences=True, return_state=False, stateful=True))(features_in)
 stateful_model = Model(inputs=features_in, outputs=stateful_rnn_out)
 
 stateful_model.set_weights( stateless_model.get_weights() )
 
 x_in = np.random.normal(0,10,sequence_length)
 x_in = x_in.reshape( (1, sequence_length, feature_dim) )
 
 def print_bidi_out(non_stateful_out, stateful_out):
 	fb = ['FWD::', 'BWD::']
 
 	for i in range(2):
 		print(fb[i])
 		print(f'non_stateful: {non_stateful_out.T[i]}')
 		print(f'stateful: {stateful_out.T[i]}')
 		print(f'delta: {stateful_out.T[i]-non_stateful_out.T[i]}')
 
 
 non_stateful_out = stateless_model.predict(x_in).reshape((sequence_length,2))
 stateful_out = stateful_model.predict(x_in).reshape((sequence_length,2))
 print_bidi_out(non_stateful_out, stateful_out)
 
 non_stateful_out = stateless_model.predict(x_in).reshape((sequence_length,2))
 stateful_out = stateful_model.predict(x_in).reshape((sequence_length,2))
 print_bidi_out(non_stateful_out, stateful_out)
 
 print('\n** RESETING STATES in STATEFUL MODEL **\n')
 stateful_model.reset_states()
 non_stateful_out = stateless_model.predict(x_in).reshape((sequence_length,2))
 stateful_out = stateful_model.predict(x_in).reshape((sequence_length,2))
 print_bidi_out(non_stateful_out, stateful_out)
 Code to demo with initial-state inputs:
 import os
 os.environ['CUDA_DEVICE_ORDER']='PCI_BUS_ID'
 os.environ['CUDA_VISIBLE_DEVICES']=''
 
 import numpy as np
 from tensorflow.keras.layers import Input, Dense, SimpleRNN, GRU, LSTM, Bidirectional
 from tensorflow.keras.models import Model
 
 REC = LSTM
 
 sequence_length = 3
 feature_dim = 1
 features_in = Input(batch_shape=(1, sequence_length, feature_dim)) 
 state_h_fwd_in = Input(batch_shape=(1, 1))
 state_h_bwd_in = Input(batch_shape=(1, 1))
 state_c_fwd_in = Input(batch_shape=(1, 1))
 state_c_bwd_in = Input(batch_shape=(1, 1))
 
 four_state_shape = [state_h_fwd_in, state_c_fwd_in, state_h_bwd_in, state_c_bwd_in]
 two_state_shape = [state_h_fwd_in, state_h_bwd_in]
 
 if REC == LSTM:
     rnn_out = Bidirectional( REC(1, activation='linear', use_bias=False, return_sequences=True, return_state=False, stateful=False))(features_in, initial_state=four_state_shape)
     stateful_rnn_out = Bidirectional( REC(1, activation='linear', use_bias=False, return_sequences=True, return_state=False, stateful=True))(features_in, initial_state=four_state_shape)
     rnn_inputs = [features_in, state_h_fwd_in, state_c_fwd_in, state_h_bwd_in, state_c_bwd_in]
 else:
     if REC == SimpleRNN:
         rnn_out = Bidirectional( REC(1, activation='linear', use_bias=False, return_sequences=True, return_state=False, stateful=False))(features_in, initial_state=two_state_shape)
         stateful_rnn_out = Bidirectional( REC(1, activation='linear', use_bias=False, return_sequences=True, return_state=False, stateful=True))(features_in, initial_state=two_state_shape)
     else:
         rnn_out = Bidirectional( REC(1, activation='linear', use_bias=False, return_sequences=True, return_state=False, stateful=False))(features_in, initial_state=two_state_shape)
         stateful_rnn_out = Bidirectional( REC(1, activation='linear', use_bias=False, return_sequences=True, return_state=False, stateful=True))(features_in, initial_state=two_state_shape)
     rnn_inputs = [features_in, state_h_fwd_in, state_h_bwd_in]
 
 stateless_model = Model(inputs=rnn_inputs, outputs=rnn_out)
 stateful_model = Model(inputs=rnn_inputs, outputs=stateful_rnn_out)
 
 
 # toy_weights = [np.asarray([[ 1.0]], dtype=np.float32), np.asarray([[0.5 ]], dtype=np.float32), np.asarray([[ -1.0 ]], dtype=np.float32), np.asarray([[ -0.5 ]], dtype=np.float32)]
 # stateless_model.set_weights(toy_weights)
 # stateful_model.set_weights(toy_weights)
 
 stateful_model.set_weights( stateless_model.get_weights() )
 
 stateful_model.save('temp_stateful.h5')
 stateless_model.save('temp_stateless.h5')
 
 x_in = np.random.normal(0,10,sequence_length)
 x_in = np.asarray([1,0,0])
 x_in = x_in.reshape( (1, sequence_length, feature_dim) )
 
 fwd_initial_h = np.asarray(2.75).reshape(1,1)
 fwd_initial_c = np.asarray(1.3).reshape(1,1)
 bwd_initial_h = np.asarray(-2.0).reshape(1,1)
 bwd_initial_c = np.asarray(-1.2).reshape(1,1)
 
 # fwd_initial_h = np.asarray(np.random.normal(0,10)).reshape(1,1)
 # fwd_initial_h = np.asarray(np.random.normal(0,10)).reshape(1,1)
 # bwd_initial_h = np.asarray(np.random.normal(0,10)).reshape(1,1)
 # fwd_initial_c = np.asarray(np.random.normal(0,10)).reshape(1,1)
 # bwd_initial_c = np.asarray(np.random.normal(0,10)).reshape(1,1)
 
 if REC == LSTM:
     rnn_input = [x_in, fwd_initial_h, fwd_initial_c, bwd_initial_h, bwd_initial_c]
 else:
     rnn_input = [x_in, fwd_initial_h, bwd_initial_h] 
     
 
 def print_bidi_out(non_stateful_out, stateful_out):
 	fb = ['FWD::', 'BWD::']
 
 	for i in range(2):
 		print(fb[i])
 		print(f'non_stateful: {non_stateful_out.T[i]}')
 		print(f'stateful: {stateful_out.T[i]}')
 		print(f'delta: {stateful_out.T[i]-non_stateful_out.T[i]}')
 
 non_stateful_out = stateless_model.predict(rnn_input).reshape((sequence_length,2))
 stateful_out = stateful_model.predict(rnn_input).reshape((sequence_length,2))
 print_bidi_out(non_stateful_out, stateful_out)
 
 non_stateful_out = stateless_model.predict(rnn_input).reshape((sequence_length,2))
 stateful_out = stateful_model.predict(rnn_input).reshape((sequence_length,2))
 print_bidi_out(non_stateful_out, stateful_out)
 
 print('\n** RESETING STATES in STATEFUL MODEL **\n')
 stateful_model.reset_states()
 non_stateful_out = stateless_model.predict(rnn_input).reshape((sequence_length,2))
 stateful_out = stateful_model.predict(rnn_input).reshape((sequence_length,2))
 print_bidi_out(non_stateful_out, stateful_out)
 Other info / logs Include any logs or source code that would be helpful to
 diagnose the problem. If including tracebacks, please include the full
 traceback. Large logs and files should be attached.
 sample output for a SimpleRNN with input states -- using TF 2.1:
 &lt;denchmark-code&gt;FWD::
 non_stateful: [7.375   3.6875  1.84375]
 stateful: [7.375   3.6875  1.84375]
 delta: [0. 0. 0.]
 BWD::
 non_stateful: [ 11.5 -25.   50. ]
 stateful: [ 11.5 -25.   50. ]
 delta: [0. 0. 0.]
 FWD::
 non_stateful: [7.375   3.6875  1.84375]
 stateful: [1.921875   0.9609375  0.48046875]
 delta: [-5.453125  -2.7265625 -1.3632812]
 BWD::
 non_stateful: [ 11.5 -25.   50. ]
 stateful: [-2.4375  2.875  -5.75  ]
 delta: [-13.9375  27.875  -55.75  ]
 
 ** RESETING STATES in STATEFUL MODEL **
 
 FWD::
 non_stateful: [7.375   3.6875  1.84375]
 stateful: [1.2402344 0.6201172 0.3100586]
 delta: [-6.1347656 -3.0673828 -1.5336914]
 BWD::
 non_stateful: [ 11.5 -25.   50. ]
 stateful: [-0.6953125 -0.609375   1.21875  ]
 delta: [-12.1953125  24.390625  -48.78125  ]
 &lt;/denchmark-code&gt;
 
 Crash when using 4/7 tf-nightly:
 &lt;denchmark-code&gt;Traceback (most recent call last):
   File "temp_bidi_state_in.py", line 89, in &lt;module&gt;
     stateful_model.reset_states()
   File "/home/keith/.pyenv/versions/tfn/lib/python3.7/site-packages/tensorflow/python/keras/engine/network.py", line 473, in reset_states
     layer.reset_states()
   File "/home/keith/.pyenv/versions/tfn/lib/python3.7/site-packages/tensorflow/python/keras/layers/wrappers.py", line 676, in reset_states
     self.forward_layer.reset_states()
   File "/home/keith/.pyenv/versions/tfn/lib/python3.7/site-packages/tensorflow/python/keras/layers/recurrent.py", line 903, in reset_states
     spec_shape = nest.flatten(self.input_spec[0])[0].shape
 AttributeError: 'NoneType' object has no attribute 'shape'
 &lt;/denchmark-code&gt;
 
 	</description>
 	<comments>
 		<comment id='1' author='keithchugg' date='2020-04-13T08:00:59Z'>
 		Works without issues with &lt;denchmark-link:https://colab.research.google.com/gist/amahendrakar/4dcad65983174e0f482251cf99f534d0/38403.ipynb&gt;TF v2.1&lt;/denchmark-link&gt;
 . Was able to reproduce the issue with &lt;denchmark-link:https://colab.research.google.com/gist/amahendrakar/230e360bfceb18658b1c800e4a7fd6f6/38403-2-2.ipynb&gt;TF v2.2.0-rc2&lt;/denchmark-link&gt;
  and &lt;denchmark-link:https://colab.research.google.com/gist/amahendrakar/65a2ce796d53b8b649918ee5bbf36cb3/38403-tf-nightly.ipynb&gt;TF-nightly&lt;/denchmark-link&gt;
 . Please find the attached gist. Thanks!
 		</comment>
 		<comment id='2' author='keithchugg' date='2020-04-13T16:05:51Z'>
 		
 Works without issues with TF v2.1. Was able to reproduce the issue with TF v2.2.0-rc2 and TF-nightly. Please find the attached gist. Thanks!
 
 For TF 2.1, it is not crashing, but it is not resetting the states in the stateful bidi models.  The results after the state-reset should be the same for the stateful and nonstateful models.  The only case that is working correctly is the when there is no initial-state-input and TF 2.2rc or tf-nightly is used.  This is consistent with my original post.  Sorry, it is a bit detailed, but here is teh summary:
 
 TF 2.1: state reset for stateful models does nothing.  Should resets the state to zero if no initial state is input or back to the input initial state if it is provided (same as uni-directional RNNs).
 TF 2.2rc and tf-nightly: behavior is correct when no initial state is provided, but reset_state crashes when initial-state is input to stateful models.
 
 Fixing the 2.2/nightly behavior would be a great fix as 2.2 is on the way..  Thanks!!
 		</comment>
 		<comment id='3' author='keithchugg' date='2020-04-13T17:39:46Z'>
 		Thanks for reporting the issue. Will take a closer look.
 		</comment>
 		<comment id='4' author='keithchugg' date='2020-06-25T00:02:13Z'>
 		&lt;denchmark-link:https://github.com/keithchugg&gt;@keithchugg&lt;/denchmark-link&gt;
  I think this was resolved in recent  by &lt;denchmark-link:https://github.com/qlzh727&gt;@qlzh727&lt;/denchmark-link&gt;
  . I checked it with  and cannot reproduce the issue. &lt;denchmark-link:https://colab.research.google.com/gist/jvishnuvardhan/be5bbce7844f13ffc44fda50d392e2fb/38403-tf-nightly.ipynb&gt;Here&lt;/denchmark-link&gt;
  is the gist for your reference.
 Please verify once and close the issue, if this was resolved for you. Thanks!
 		</comment>
 		<comment id='5' author='keithchugg' date='2020-06-25T03:18:50Z'>
 		Oh, thanks for the notice, I think this should be fixed already. I just forgot to close the github issue.
 		</comment>
 		<comment id='6' author='keithchugg' date='2020-06-25T03:18:53Z'>
 		Are you satisfied with the resolution of your issue?
 &lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/38403&gt;Yes&lt;/denchmark-link&gt;
 
 &lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/38403&gt;No&lt;/denchmark-link&gt;
 
 		</comment>
 	</comments>
 </bug>
<commit id='60b167181081c14ff88c77ae62049cab8a5ba4c7' author='Scott Zhu' date='2020-04-14 10:15:01-07:00'>
 	<dmm_unit complexity='0.896551724137931' interfacing='0.896551724137931' size='0.0'></dmm_unit>
 	<modification change_type='MODIFY' old_name='tensorflow\python\keras\layers\recurrent.py' new_name='tensorflow\python\keras\layers\recurrent.py'>
 		<file_info nloc='2493' complexity='304' token_count='11761'></file_info>
 		<method name='__call__' parameters='self,inputs,initial_state,constants,kwargs'>
 				<method_info nloc='48' complexity='13' token_count='320' nesting_level='1' start_line='654' end_line='718'></method_info>
 			<added_lines>697,698,699,700,701,702,703,704</added_lines>
 			<deleted_lines>697,698,699,700</deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines></added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 	<modification change_type='MODIFY' old_name='tensorflow\python\keras\layers\recurrent_test.py' new_name='tensorflow\python\keras\layers\recurrent_test.py'>
 		<file_info nloc='1483' complexity='106' token_count='14231'></file_info>
 		<method name='test_full_input_spec' parameters='self'>
 				<method_info nloc='19' complexity='1' token_count='249' nesting_level='1' start_line='1367' end_line='1386'></method_info>
 			<added_lines>1378,1379,1380,1381,1383,1384,1385,1386</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines></added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 	<modification change_type='MODIFY' old_name='tensorflow\python\keras\layers\wrappers_test.py' new_name='tensorflow\python\keras\layers\wrappers_test.py'>
 		<file_info nloc='1022' complexity='99' token_count='10248'></file_info>
 		<method name='test_full_input_spec' parameters='self'>
 				<method_info nloc='18' complexity='1' token_count='259' nesting_level='1' start_line='1240' end_line='1259'></method_info>
 			<added_lines>1240,1241,1242,1243,1244,1245,1246,1247,1248,1249,1250,1251,1252,1253,1254,1255,1256,1257,1258,1259</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines>1260</added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 </commit>
</bug_data>
