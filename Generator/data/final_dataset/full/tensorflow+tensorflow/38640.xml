<bug_data>
<bug id='38640' author='shiningrain' open_date='2020-04-17T12:59:04Z' closed_time='2020-04-27T20:07:51Z'>
 	<summary>K.cast_to_floatx() will convert "None" to "Nan" and lead the ReLU to Nan output.</summary>
 	<description>
 System information
 
 Have I written custom code (as opposed to using example directory):
 OS Platform and Distribution (e.g., Linux Ubuntu 16.04):   Linux Ubuntu 18.04
 TensorFlow backend (yes / no):  yes
 TensorFlow version:  1.14.0-cpu
 Python version:  3.6.9
 CUDA/cuDNN version:  -
 GPU model and memory:  -
 
 Describe the current behavior
 I found that if I used ReLU(threshold = None) in tensorflow.keras, without any errors or warnings, Tensorflow will return a matrix with Nan.  (Detailed configuration and codes for reproduction can be found in the following part) .
 For this reason, I did some investigations and found that when the parameters in ReLU are passed to /tensorflow/python/keras/layers/advanced_activations.py line near line 311, K.cast_to_floatx()  will incorrectly convert the "None" parameter to "Nan" and pass it to the backend for calculation (refer to Figure 1 and Figure 2).
 "Nan" and "None" should have different meanings, but K.cast_to_floatx did not distinguish between "Nan" and "None" during the calculation, which led to the usage of a "Nan" parameter in the tensorflow calculation. This further affects the final output result and makes the output with  "Nan". This operation may confuse the users.
 Is there a difference in meaning between None and Nan in the implementation of K.cast_to_floatx?  Judging from the current results, their meanings are different.   This issue not only affect ReLU, but also affect ThresholdReLU, LeakyReLU and other operations using K.cast_to_floatx() to convert the parameters.
 &lt;denchmark-h:h2&gt;Code to reproduce the issue&lt;/denchmark-h&gt;
 
 &lt;denchmark-code&gt;import os
 import numpy as np
 import tensorflow as tf
 import tensorflow.keras.layers as L
 from tensorflow.keras.models import load_model
 
 
 root_path = "./Your Path"
 layer_name="ReLU"
 kwargs={'max_value': 0.5761369157060329, 'negative_slope': 0.7845179761191806, 'threshold': None}
 input= (10 * np.random.randn(1,32,32,16)).astype(np.float32)
 from tensorflow.keras import Model, Input
 layer_cls = getattr(L, layer_name)
 layer = layer_cls(**kwargs)
 x = Input(batch_shape=input.shape)
 y = layer(x)
 bk_model =Model(x, y)
 model_path = os.path.join(root_path, 'model.h5')
 bk_model.save(model_path, bk_model)
 model = load_model(model_path)     
 output = model.predict(input)
 nanresult=np.isnan(output).any()
 print(nanresult)
 &lt;/denchmark-code&gt;
 
 	</description>
 	<comments>
 		<comment id='1' author='shiningrain' date='2020-04-17T15:15:59Z'>
 		&lt;denchmark-link:https://github.com/shiningrain&gt;@shiningrain&lt;/denchmark-link&gt;
 
 i ran the code shared and face &lt;denchmark-link:https://colab.sandbox.google.com/gist/Saduf2019/673d2c21fcf02091f8243c5ac51f72a9/38640.ipynb&gt;this error&lt;/denchmark-link&gt;
 
 		</comment>
 		<comment id='2' author='shiningrain' date='2020-04-17T15:32:52Z'>
 		
 @shiningrain
 i ran the code shared and face this error
 
 Hello! Thanks for your reply!
 The "root path" in my code is "./ Your Path", this means that you can set any path you want to save the following model... You can also delete it and just save the model in the current dir. You can also use this code:
 &lt;denchmark-code&gt;import os
 import numpy as np
 import tensorflow as tf
 import tensorflow.keras.layers as L
 from tensorflow.keras.models import load_model
 
 
 layer_name="ReLU"
 kwargs={'max_value': 0.5761369157060329, 'negative_slope': 0.7845179761191806, 'threshold': None}
 input= (10 * np.random.randn(1,32,32,16)).astype(np.float32)
 from tensorflow.keras import Model, Input
 layer_cls = getattr(L, layer_name)
 layer = layer_cls(**kwargs)
 x = Input(batch_shape=input.shape)
 y = layer(x)
 bk_model =Model(x, y)
 bk_model.save("model.h5", bk_model)
 model = load_model("model.h5")     
 output = model.predict(input)
 nanresult=np.isnan(output).any()
 print(nanresult)
 &lt;/denchmark-code&gt;
 
 As the following picture shown, the nanresult is True, which means there is nan in output
 &lt;denchmark-link:https://user-images.githubusercontent.com/46860123/79586408-a452db80-8103-11ea-85f7-9b1e0310ef3f.png&gt;&lt;/denchmark-link&gt;
 
 		</comment>
 		<comment id='3' author='shiningrain' date='2020-04-18T07:53:10Z'>
 		Hello, &lt;denchmark-link:https://github.com/Saduf2019&gt;@Saduf2019&lt;/denchmark-link&gt;
   I can also reproduce this issue in Tensorflow 2.1.0-cpu version, shown in the following figure. You can use the code in my reply to reproduce it.
 &lt;denchmark-link:https://user-images.githubusercontent.com/46860123/79631518-6ea60500-818c-11ea-9493-221ccd343132.png&gt;&lt;/denchmark-link&gt;
 
 		</comment>
 		<comment id='4' author='shiningrain' date='2020-04-20T15:31:18Z'>
 		i am able to replicate this issue, please find the &lt;denchmark-link:https://colab.sandbox.google.com/gist/Saduf2019/bd0e794e3005cee01640dca7926e946f/untitled141.ipynb&gt;gist here&lt;/denchmark-link&gt;
 
 		</comment>
 		<comment id='5' author='shiningrain' date='2020-04-20T15:51:34Z'>
 		
 i am able to replicate this issue, please find the gist here
 
 Thanks for your reply! That is exactly what I want to show.
 K.cast_to_floatx() will convert None to nan, which are not the same things. And then it leads to nan output.
 		</comment>
 		<comment id='6' author='shiningrain' date='2020-04-26T22:51:28Z'>
 		The none to nan conversion is due to numpy behavior.
 
 
 
 tensorflow/tensorflow/python/keras/backend.py
 
 
          Line 183
       in
       e5bf8de
 
 
 
 
 
 
  return np.asarray(x, dtype=floatx()) 
 
 
 
 
 
 import numpy as np
 np.asarray(None, dtype=float)
 output:
 array(nan)
 However the documentation says  . Perhaps we can add check to pass a float value to threshold argument.
 &lt;denchmark-link:https://www.tensorflow.org/api_docs/python/tf/keras/layers/ReLU#arguments_2&gt;https://www.tensorflow.org/api_docs/python/tf/keras/layers/ReLU#arguments_2&lt;/denchmark-link&gt;
 
 		</comment>
 		<comment id='7' author='shiningrain' date='2020-04-27T20:07:52Z'>
 		Are you satisfied with the resolution of your issue?
 &lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/38640&gt;Yes&lt;/denchmark-link&gt;
 
 &lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=https://github.com/tensorflow/tensorflow/issues/38640&gt;No&lt;/denchmark-link&gt;
 
 		</comment>
 		<comment id='8' author='shiningrain' date='2020-04-28T04:06:33Z'>
 		
 The none to nan conversion is due to numpy behavior.
 
 
 
 tensorflow/tensorflow/python/keras/backend.py
 
 
          Line 183
       in
       e5bf8de
 
 
 
 
 
 
  return np.asarray(x, dtype=floatx()) 
 
 
 
 
 
 import numpy as np
 np.asarray(None, dtype=float)
 output:
 array(nan)
 However the documentation says threshold: Float . Perhaps we can add check to pass a float value to threshold argument.
 https://www.tensorflow.org/api_docs/python/tf/keras/layers/ReLU#arguments_2
 
 That's a good idea! Thanks for your fix.
 		</comment>
 	</comments>
 </bug>
<commit id='3db8df8ffafe5bcd83a12b92bc4c8287cd80237f' author='A. Unique TensorFlower' date='2020-04-27 13:01:35-07:00'>
 	<dmm_unit complexity='0.0' interfacing='0.0' size='0.0'></dmm_unit>
 	<modification change_type='MODIFY' old_name='tensorflow\python\keras\layers\advanced_activations.py' new_name='tensorflow\python\keras\layers\advanced_activations.py'>
 		<file_info nloc='326' complexity='35' token_count='1308'></file_info>
 		<method name='__init__' parameters='self,max_value,negative_slope,threshold,kwargs'>
 				<method_info nloc='17' complexity='6' token_count='126' nesting_level='1' start_line='344' end_line='361'></method_info>
 			<added_lines>352,353,354</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines></added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 </commit>
</bug_data>
