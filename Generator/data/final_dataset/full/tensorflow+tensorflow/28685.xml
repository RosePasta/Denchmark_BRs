<bug_data>
<bug id='28685' author='EFanZh' open_date='2019-05-14T01:17:34Z' closed_time='2019-05-29T18:10:46Z'>
 	<summary>The cycle detection algorithm in the variable creation has bad performance</summary>
 	<description>
 System information
 
 Have I written custom code (as opposed to using a stock example script provided in TensorFlow): Yes
 OS Platform and Distribution (e.g., Linux Ubuntu 16.04): Arch Linux
 Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device: Donâ€™t know
 TensorFlow installed from (source or binary): Binary
 TensorFlow version (use command below): 1.13.1
 Python version: 3.7.3
 Bazel version (if compiling from source): Not used
 GCC/Compiler version (if compiling from source): Not used
 CUDA/cuDNN version: Not related
 GPU model and memory: Not related
 
 Describe the current behavior
 Maybe related: &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/17439&gt;#17439&lt;/denchmark-link&gt;
 .
 I noticed some slow variable creations. It happens when the initial value is a tensor with complex dependencies.  After some digging, I found that it may be caused by the algorithm used in the cycle detection code:
 
 
 
 tensorflow/tensorflow/python/ops/variables.py
 
 
         Lines 2505 to 2517
       in
       d102214
 
 
 
 
 
 
  def _has_cycle(op, path): 
 
 
 
  """Detect cycles in the dependencies of `initial_value`.""" 
 
 
 
  if op.name in path: 
 
 
 
  return True 
 
 
 
  path.add(op.name) 
 
 
 
  for op_input in op.inputs: 
 
 
 
  if _has_cycle(op_input.op, path): 
 
 
 
  return True 
 
 
 
  for op_control_input in op.control_inputs: 
 
 
 
  if _has_cycle(op_control_input, path): 
 
 
 
  return True 
 
 
 
  path.remove(op.name) 
 
 
 
  return False 
 
 
 
 
 
 Describe the expected behavior
 Creating a variable should be completed within acceptable time.
 Code to reproduce the issue
 You can reproduce the problem using the following code:
 import time
 
 import tensorflow as tf
 
 
 def _build_tensor(depth):
     fibonacci = [tf.zeros(shape=()), tf.ones(shape=())]
 
     for _ in range(depth):
         fibonacci.append(fibonacci[-2] + fibonacci[-1])
 
     return fibonacci[-1]
 
 
 def main():
     for depth in range(15, 25):
         with tf.Graph().as_default():
             tensor = _build_tensor(depth)
 
             start_time = time.perf_counter()
             tf.Variable(initial_value=tensor)
             end_time = time.perf_counter()
 
             print('Depth = {}, Time = {}'.format(depth, end_time - start_time))
 
 
 if __name__ == '__main__':
     main()
 Other info / logs
 Here is my output from running the code:
 &lt;denchmark-code&gt;Depth = 15, Time = 0.008952808999310946
 Depth = 16, Time = 0.014324793000014324
 Depth = 17, Time = 0.019670226999551232
 Depth = 18, Time = 0.03077544999996462
 Depth = 19, Time = 0.04785999100022309
 Depth = 20, Time = 0.07621835800000554
 Depth = 21, Time = 0.12341592400025547
 Depth = 22, Time = 0.19620911800029717
 Depth = 23, Time = 0.31814610099991114
 Depth = 24, Time = 0.5071976489998633
 &lt;/denchmark-code&gt;
 
 Notice the time used for creating a variable grows exponentially.
 &lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;
 
 The cycle detection algorithm could be optimized to have a linear time complexity. Also, the algorithm should avoid stack overflow if the initial value has a long dependency chain.
 	</description>
 	<comments>
 		<comment id='1' author='EFanZh' date='2019-05-15T09:24:40Z'>
 		&lt;denchmark-link:https://github.com/EFanZh&gt;@EFanZh&lt;/denchmark-link&gt;
   It looks like you haven't used a template to create this issue. Please resubmit your issue using a template from &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/new/choose&gt;here&lt;/denchmark-link&gt;
 . We ask users to use the template because it reduces overall time to resolve a new issue by avoiding extra communication to get to the root of the issue. We will close this issue in lieu of the new one you will create from the template. Thank you for your cooperation.
 		</comment>
 		<comment id='2' author='EFanZh' date='2019-05-16T02:38:21Z'>
 		&lt;denchmark-link:https://github.com/muddham&gt;@muddham&lt;/denchmark-link&gt;
  I have updated my issue, please check.
 		</comment>
 		<comment id='3' author='EFanZh' date='2019-05-16T05:27:36Z'>
 		&lt;denchmark-link:https://github.com/EFanZh&gt;@EFanZh&lt;/denchmark-link&gt;
  Able to reproduce the issue with the provided code.
 Depth = 15, Time = 0.014409996000040337
 Depth = 16, Time = 0.018489084000066214
 Depth = 17, Time = 0.02723818900005881
 Depth = 18, Time = 0.048183349999931124
 Depth = 19, Time = 0.07164499200007413
 Depth = 20, Time = 0.11124446999997417
 Depth = 21, Time = 0.17927562900001703
 Depth = 22, Time = 0.2863872639999272
 Depth = 23, Time = 0.4592743739999605
 Depth = 24, Time = 0.7376542980000522
 		</comment>
 		<comment id='4' author='EFanZh' date='2019-05-29T11:10:48Z'>
 		Thanks a lot for reporting this &lt;denchmark-link:https://github.com/EFanZh&gt;@EFanZh&lt;/denchmark-link&gt;
 ! The fix is on the way.
 I'm curious, what was the use-case which triggered this regression for you? In my experience complex initializers are not that common.
 		</comment>
 		<comment id='5' author='EFanZh' date='2019-05-29T12:11:32Z'>
 		&lt;denchmark-link:https://github.com/superbobry&gt;@superbobry&lt;/denchmark-link&gt;
  I was creating a variable to store the the result of a complex computation. The problem is that I need to store the computation result multiples, so I think I could utilize the initializer of the variable to to it, by which, I mean setting the initial value of that variable to the computation result and use the initializer as the storing operation, then my program gets stuck.
 Currently, as a workaround, I am using an zero value as the initial value of the variable, and created another assignment operation to store the computation result. But this method has two extra operations created: a tf.zeros and a tf.assign. It is not as clean as using the computation result as the initial value.
 		</comment>
 		<comment id='6' author='EFanZh' date='2019-05-29T18:10:49Z'>
 		Are you satisfied with the resolution of your issue?
 &lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=Yes&amp;entry.2137816233=28685&gt;Yes&lt;/denchmark-link&gt;
 
 &lt;denchmark-link:https://docs.google.com/forms/d/e/1FAIpQLSfaP12TRhd9xSxjXZjcZFNXPGk4kc1-qMdv3gc6bEP90vY1ew/viewform?entry.85265664=No&amp;entry.2137816233=28685&gt;No&lt;/denchmark-link&gt;
 
 		</comment>
 		<comment id='7' author='EFanZh' date='2019-05-30T00:57:10Z'>
 		&lt;denchmark-link:https://github.com/superbobry&gt;@superbobry&lt;/denchmark-link&gt;
  I see the updated implementation is using recursion, which I think may cause stack overflow if the dependency chain becomes too long. Is it possible to implement cycle detection using a stack and loop to avoid stack overflow?
 Also, the usage of self.cached_session() in testCycleDetectionIsLinear seems unnecessary. Because new graphs are created and used inside the loop, with self.cached_session() has no effect.
 		</comment>
 		<comment id='8' author='EFanZh' date='2019-05-30T21:17:19Z'>
 		Recursion is indeed bounded in Python, but the default limit (1000 on Linux) seems reasonable for most (if not all) initializer graphs. Recursion in Python is also slower than iteration, but again, I'm not convinced it is worth optimizing in that particular case.
 Thanks for spotting redundant self.cached_session()!
 		</comment>
 	</comments>
 </bug>
<commit id='fc20e9fe8223336b491cedd4bc428867bf0e7daa' author='Sergei Lebedev' date='2019-05-29 11:08:23-07:00'>
 	<dmm_unit complexity='1.0' interfacing='1.0' size='1.0'></dmm_unit>
 	<modification change_type='MODIFY' old_name='tensorflow\python\kernel_tests\variables_test.py' new_name='tensorflow\python\kernel_tests\variables_test.py'>
 		<file_info nloc='778' complexity='64' token_count='7922'></file_info>
 		<method name='testCyclicInitializer' parameters='self'>
 				<method_info nloc='9' complexity='1' token_count='66' nesting_level='1' start_line='114' end_line='122'></method_info>
 			<added_lines>114,115,116,117,118,119,120,121,122</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<method name='testCycleDetectionIsLinear._build_tensor' parameters='depth'>
 				<method_info nloc='5' complexity='2' token_count='58' nesting_level='2' start_line='128' end_line='132'></method_info>
 			<added_lines>128,129,130,131,132</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<method name='testCycleDetectionIsLinear' parameters='self'>
 				<method_info nloc='12' complexity='2' token_count='94' nesting_level='1' start_line='125' end_line='145'></method_info>
 			<added_lines>125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines>23,113,123,124,146</added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 	<modification change_type='MODIFY' old_name='tensorflow\python\ops\variables.py' new_name='tensorflow\python\ops\variables.py'>
 		<file_info nloc='1414' complexity='243' token_count='6914'></file_info>
 		<method name='_has_cycle' parameters='op,path'>
 				<method_info nloc='12' complexity='6' token_count='71' nesting_level='0' start_line='2516' end_line='2528'></method_info>
 			<added_lines>2517,2518,2519,2520,2522,2523,2525,2526,2527,2528</added_lines>
 			<deleted_lines>2516,2518,2520,2521,2522,2523,2524,2525,2527</deleted_lines>
 		</method>
 		<method name='_try_guard_against_uninitialized_dependencies' parameters='name,initial_value'>
 				<method_info nloc='6' complexity='3' token_count='53' nesting_level='0' start_line='2482' end_line='2514'></method_info>
 			<added_lines>2512</added_lines>
 			<deleted_lines>2511</deleted_lines>
 		</method>
 		<method name='_has_cycle' parameters='op,state'>
 				<method_info nloc='12' complexity='6' token_count='86' nesting_level='0' start_line='2520' end_line='2533'></method_info>
 			<added_lines>2520,2522,2523,2525,2526,2527,2528,2529,2530,2532</added_lines>
 			<deleted_lines>2520,2521,2522,2523,2524,2525,2527</deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines>22</added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 </commit>
</bug_data>
