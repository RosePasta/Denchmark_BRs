<bug_data>
<bug id='17130' author='benmosher' open_date='2018-02-19T15:01:11Z' closed_time='2018-02-23T05:43:34Z'>
 	<summary>Java: SIGSEGV when `Tensors.create`-ing from an uninitialized array</summary>
 	<description>
 &lt;denchmark-h:h3&gt;System information&lt;/denchmark-h&gt;
 
 
 Have I written custom code (as opposed to using a stock example script provided in TensorFlow): yes
 OS Platform and Distribution (e.g., Linux Ubuntu 16.04):
 macOS 10.13.3
 JRE version: Java(TM) SE Runtime Environment (8.0_121-b13) (build 1.8.0_121-b13)
 TensorFlow installed from (source or binary): maven
 
     &lt;dependency&gt;
       &lt;groupId&gt;org.tensorflow&lt;/groupId&gt;
       &lt;artifactId&gt;tensorflow&lt;/artifactId&gt;
       &lt;version&gt;1.4.0&lt;/version&gt;
     &lt;/dependency&gt;
 
 TensorFlow version (use command below): 1.4.0
 Python version: N/A
 Bazel version (if compiling from source): N/A
 GCC/Compiler version (if compiling from source): N/A
 CUDA/cuDNN version: N/A
 GPU model and memory: N/A
 Exact command to reproduce:
 
     // JUnit test case
     public void testSigSegv() {
         byte[][] bb = new byte[3][];  // note: new byte[3][1] doesn't crash, presumably it is initialized by the compile
 
         bb[0] = new byte[] { 0 };
         bb[1] = new byte[] { 1 };
         // no bb[2]
 
         // next line sigsegv's
         Tensors.create(bb);
     }
 &lt;denchmark-h:h3&gt;Describe the problem&lt;/denchmark-h&gt;
 
 Using Tensors.create to get a Tensor&lt;String&gt; from an uninitialized 2D byte array (byte[][]) results in a SIGSEGV from JNI. See full log below.
 &lt;denchmark-h:h3&gt;Source code / logs&lt;/denchmark-h&gt;
 
 When running the above test case, I get the following output.
 &lt;denchmark-code&gt;#
 # A fatal error has been detected by the Java Runtime Environment:
 #
 #  SIGSEGV (0xb) at pc=0x000000010571f0b3, pid=30179, tid=0x0000000000001a03
 #
 # JRE version: Java(TM) SE Runtime Environment (8.0_121-b13) (build 1.8.0_121-b13)
 # Java VM: Java HotSpot(TM) 64-Bit Server VM (25.121-b13 mixed mode bsd-amd64 compressed oops)
 # Problematic frame:
 # V  [libjvm.dylib+0x31f0b3]
 #
 # Failed to write core dump. Core dumps have been disabled. To enable core dumping, try "ulimit -c unlimited" before starting Java again
 #
 # An error report file with more information is saved as:
 # /Users/ben/AGLabs/nfl/JavaProjects/nlp/hs_err_pid30179.log
 #
 # If you would like to submit a bug report, please visit:
 #   http://bugreport.java.com/bugreport/crash.jsp
 #
 
 Process finished with exit code 134 (interrupted by signal 6: SIGABRT)
 &lt;/denchmark-code&gt;
 
 I'm not familiar enough with JNI in general to know if I'm expecting too much. I won't be surprised if you mark this wontfix, I was just surprised to be able to crash the process with a segfault given some bad data. Easy enough to work around (I will size/init my arrays more carefully) but thought you might want to know.
 Cheers! Thanks so much for this library!
 	</description>
 	<comments>
 		<comment id='1' author='benmosher' date='2018-02-19T20:40:36Z'>
 		Thanks very much for the report! Yes, this is indeed a bug (it should not be possible to cause the JVM to segfault when using the Java API :).
 Will send a fix shortly.
 		</comment>
 	</comments>
 </bug>
<commit id='624a2e47329fefa1f17373954ac541b0e42a9fca' author='Asim Shankar' date='2018-02-20 13:40:07-08:00'>
 	<dmm_unit complexity='1.0' interfacing='0.5' size='0.0'></dmm_unit>
 	<modification change_type='MODIFY' old_name='tensorflow\java\src\main\native\tensor_jni.cc' new_name='tensorflow\java\src\main\native\tensor_jni.cc'>
 		<file_info nloc='495' complexity='84' token_count='3422'></file_info>
 		<method name='Java_org_tensorflow_Tensor_allocateNonScalarBytes' parameters='env,clazz,shape,value'>
 				<method_info nloc='37' complexity='5' token_count='261' nesting_level='0' start_line='436' end_line='474'></method_info>
 			<added_lines>453</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<method name='nonScalarTF_STRINGTensorSize' parameters='env,value,num_dims'>
 				<method_info nloc='20' complexity='5' token_count='141' nesting_level='1' start_line='391' end_line='412'></method_info>
 			<added_lines>403,404,405,406,407,409</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<method name='fillNonScalarTF_STRINGTensorData' parameters='env,value,num_dims,writer,status'>
 				<method_info nloc='20' complexity='4' token_count='168' nesting_level='1' start_line='414' end_line='433'></method_info>
 			<added_lines>431</added_lines>
 			<deleted_lines>424</deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines></added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 	<modification change_type='MODIFY' old_name='tensorflow\java\src\test\java\org\tensorflow\TensorTest.java' new_name='tensorflow\java\src\test\java\org\tensorflow\TensorTest.java'>
 		<file_info nloc='448' complexity='45' token_count='4123'></file_info>
 		<method name='TensorTest::gracefullyFailCreationFromNullArrayForStringTensor' parameters=''>
 				<method_info nloc='7' complexity='2' token_count='37' nesting_level='1' start_line='541' end_line='549'></method_info>
 			<added_lines>541,542,543,544,545,546,547,548,549</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<method name='TensorTest::testCreateFromArrayOfBoxed' parameters=''>
 				<method_info nloc='7' complexity='2' token_count='57' nesting_level='1' start_line='430' end_line='437'></method_info>
 			<added_lines>435</added_lines>
 			<deleted_lines>435</deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines>539,540</added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 </commit>
</bug_data>
