<bug_data>
<bug id='46128' author='summa-code' open_date='2021-01-04T05:04:06Z' closed_time='2021-01-18T18:16:11Z'>
 	<summary>This throws ERROR: features = tf.io.parse_example(..., features=make_parse_example_spec(columns))</summary>
 	<description>
 Please make sure that this is a bug. As per our
 GitHub Policy,
 we only address code/doc bugs, performance issues, feature requests and
 build/installation issues on GitHub. tag:bug_template
 System information
 
 Have I written custom code (as opposed to using a stock example script provided in TensorFlow): No
 OS Platform and Distribution (e.g., Linux Ubuntu 16.04): 20.04
 Mobile device (e.g. iPhone 8, Pixel 2, Samsung Galaxy) if the issue happens on mobile device:
 TensorFlow installed from (source or binary): Source
 TensorFlow version (use command below): Latest from this week
 Python version: 3.8.x
 Bazel version (if compiling from source): 3.1.0
 GCC/Compiler version (if compiling from source):
 CUDA/cuDNN version: 11.2
 GPU model and memory:
 
 Describe the current behavior
 I was trying this code, but it throws exception
 https://www.tensorflow.org/api_docs/python/tf/keras/experimental/SequenceFeatures
 &lt;denchmark-code&gt;ValueError: Attempt to convert a value (Ellipsis) with an unsupported type (&lt;class 'ellipsis'&gt;) to a Tensor.```
 
 
 Here is the full code from that page,
 
 
 ```# Behavior of some cells or feature columns may depend on whether we are in
 # training or inference mode, e.g. applying dropout.
 training = True
 rating = sequence_numeric_column('rating')
 watches = sequence_categorical_column_with_identity(
     'watches', num_buckets=1000)
 watches_embedding = embedding_column(watches, dimension=10)
 columns = [rating, watches_embedding]
 
 sequence_input_layer = SequenceFeatures(columns)
 features = tf.io.parse_example(...,
                                features=make_parse_example_spec(columns))
 sequence_input, sequence_length = sequence_input_layer(
    features, training=training)
 sequence_length_mask = tf.sequence_mask(sequence_length)
 
 rnn_cell = tf.keras.layers.SimpleRNNCell(hidden_size, training=training)
 rnn_layer = tf.keras.layers.RNN(rnn_cell, training=training)
 outputs, state = rnn_layer(sequence_input, mask=sequence_length_mask)
 &lt;/denchmark-code&gt;
 
 	</description>
 	<comments>
 		<comment id='1' author='summa-code' date='2021-01-04T10:07:19Z'>
 		&lt;denchmark-link:https://github.com/summa-code&gt;@summa-code&lt;/denchmark-link&gt;
 
 Please share colab link or simple standalone code with supporting files to reproduce the issue. It helps us in localizing the issue faster.I am seeing the error message(NameError: name 'sequence_numeric_column' is not defined) while trying to reproduce the issue. Thanks!
 		</comment>
 		<comment id='2' author='summa-code' date='2021-01-04T15:53:02Z'>
 		That is what i have given in the description, and also is in this link !!!!!!!
 And Did you include the tensor packages ?
 &lt;denchmark-link:https://www.tensorflow.org/api_docs/python/tf/keras/experimental/SequenceFeatures&gt;https://www.tensorflow.org/api_docs/python/tf/keras/experimental/SequenceFeatures&lt;/denchmark-link&gt;
 
 &lt;denchmark-code&gt;import tensorflow as tf
 from tensorflow.keras import layers
 from tensorflow import feature_column
 
 training = True
 rating = feature_column.sequence_numeric_column('rating')
 watches = feature_column.sequence_categorical_column_with_identity(
     'watches', num_buckets=1000)
 watches_embedding = feature_column.embedding_column(watches, dimension=10)
 columns = [rating, watches_embedding]
 
 sequence_input_layer = tf.keras.experimental.SequenceFeatures(columns)
 features = tf.io.parse_example(...,
                                features=feature_column.make_parse_example_spec(columns))
 sequence_input, sequence_length = sequence_input_layer(
    features, training=training)
 sequence_length_mask = tf.sequence_mask(sequence_length)
 
 rnn_cell = tf.keras.layers.SimpleRNNCell(hidden_size, training=training)
 rnn_layer = tf.keras.layers.RNN(rnn_cell, training=training)
 outputs, state = rnn_layer(sequence_input, mask=sequence_length_mask) 
 
 &lt;/denchmark-code&gt;
 
 		</comment>
 		<comment id='3' author='summa-code' date='2021-01-05T05:08:46Z'>
 		I have tried in colab with TF version &lt;denchmark-link:https://colab.research.google.com/gist/ravikyram/445470fd54502d56b948ebc76743b505/untitled594.ipynb&gt;2.4 gist&lt;/denchmark-link&gt;
  and Nightly version() &lt;denchmark-link:https://colab.research.google.com/gist/ravikyram/9b2cc481b9c9390d2abdd3e516f43a84/untitled593.ipynb&gt;gist&lt;/denchmark-link&gt;
  and was able to reproduce the issue. Thanks!
 		</comment>
 		<comment id='4' author='summa-code' date='2021-01-08T22:52:57Z'>
 		
 ValueError: Attempt to convert a value (Ellipsis) with an unsupported type (&lt;class 'ellipsis'&gt;) to a Tensor.
 
 Yeah, often people put ... in examples to say "fill this in with the necessary code". it's too bad that ... is also valid python.
 Anyway, this whole line: tf.io.parse_example(..., features=feature_column.make_parse_example_spec(columns)) is a distraction from the function being documented here. This thing doesn't need Examples or parser specifications. It needs a dictionary of SparseTensors.
 If you actually do want to parse some tensors using that construct, ... is where you's pass some SerializeToString serialized tf.Examples.
 Now, we encourage people to use doctest format &gt;&gt;&gt; which we do test. But this doc is likely low enough traffic that we may never come back to fix this.
 		</comment>
 		<comment id='5' author='summa-code' date='2021-01-10T17:53:38Z'>
 		I am little bit confused. So the example given looks like self contained. We are trying to extract the inputs. In the example given above what do you think goes in ... ? There is one numeric and and one categorical feature.
 		</comment>
 		<comment id='6' author='summa-code' date='2021-01-11T14:42:57Z'>
 		This line:
 &lt;denchmark-code&gt;features = tf.io.parse_example(...,
                                features=feature_column.make_parse_example_spec(columns))
 &lt;/denchmark-code&gt;
 
 Should be something like:
 &lt;denchmark-code&gt;features = {
  'rating': tf.sparse.from_dense([[1.0,1.1, 0, 0, 0],[2.0,2.1,2.2, 2.3, 2.5]])
  'watches': tf.sparse.from_dense([[2, 85, 61, 0, 0, 0],[33,92, 2, 73, 1]])
 }
 &lt;/denchmark-code&gt;
 
 		</comment>
 		<comment id='7' author='summa-code' date='2021-01-11T18:21:52Z'>
 		So this looks like feeding the actual sequence for building the model. And should there be a "," between ratings and watches ? There was a dimension issue in the watches array, Now it is throwing some other error.
 features = {
 'rating': tf.sparse.from_dense([[1.0, 1.1, 0, 0, 0], [2.0, 2.1, 2.2, 2.3, 2.5]]),
 'watches': tf.sparse.from_dense([[2, 85, 61, 0, 0, 0], [33, 92, 2, 73, 1, 3]])
 }
 sequence_input, sequence_length = sequence_input_layer(features, training=training)
 raise errors.InvalidArgumentError(
 tensorflow.python.framework.errors_impl.InvalidArgumentError: Condition x == y did not hold.
 Indices of first 2 different values:
 [[0]
 [1]]
 Corresponding x values:
 [2 5]
 Corresponding y values:
 [3 6]
 First 2 elements of x:
 [2 5]
 First 2 elements of y:
 [3 6]
 python-BaseException
 Process finished with exit code 1
 		</comment>
 		<comment id='8' author='summa-code' date='2021-01-11T18:26:44Z'>
 		I am just looking for a simple usage example for SequenceFeatures with couple of different sequence columns.
 		</comment>
 		<comment id='9' author='summa-code' date='2021-01-11T18:53:16Z'>
 		All sets of sequences need the same shapes. In my earlier post they didn't match.
 This works:
 &lt;denchmark-code&gt;training = True
 rating = feature_column.sequence_numeric_column('rating')
 watches = feature_column.sequence_categorical_column_with_identity(
     'watches', num_buckets=1000)
 watches_embedding = feature_column.embedding_column(watches, dimension=10)
 columns = [rating, watches_embedding]
 
 features = {
  'rating': tf.sparse.from_dense([[1.0,1.1, 0, 0, 0],[2.0,2.1,2.2, 2.3, 2.5]]),
  'watches': tf.sparse.from_dense([[2, 85, 0, 0, 0],[33,78, 2, 73, 1]])
 }
 
 sequence_input_layer = tf.keras.experimental.SequenceFeatures(columns)
 sequence_input, sequence_length = sequence_input_layer(
    features, training=training)
    
 sequence_length_mask = tf.sequence_mask(sequence_length)
 &lt;/denchmark-code&gt;
 
 		</comment>
 		<comment id='10' author='summa-code' date='2021-01-11T22:31:23Z'>
 		Oops i missed that one. Ok, can we create "features" variable without using the real inputs ? something like this ?
 features['rating'] = tf.keras.Input(shape=(?,), name='rating', dtype=tf.float32)
 features['watches'] = tf.keras.Input(shape=(?,), name='watches', dtype=tf.float32)
 Is the shape here just one dimensional for the feature or should it have the windowed shape ?
 The timeseries example given does not do justice without using these "Sequence" functions. Since LSTM takes in 3 dimensional data, without knowing a working example, it is a bit hard.
 &lt;denchmark-link:https://www.tensorflow.org/tutorials/structured_data/time_series&gt;https://www.tensorflow.org/tutorials/structured_data/time_series&lt;/denchmark-link&gt;
 
 		</comment>
 		<comment id='11' author='summa-code' date='2021-01-13T16:23:19Z'>
 		I came across this one,
 &lt;denchmark-link:https://github.com/tensorflow/tensorflow/issues/31240&gt;#31240&lt;/denchmark-link&gt;
 
 It is remarkable how durandg12 came back after almost a year after first he used it.
 		</comment>
 		<comment id='12' author='summa-code' date='2021-01-15T00:02:06Z'>
 		And how do i create an input to LSTMCell, because i want to use CuDNN with GPU,
 I am using "tf.keras.preprocessing.timeseries_dataset_from_array" to create dataset that has the shape(batch, time sequence, features) format ? I am having sliding window dataset. It is crazy that with the lack of documentation, there is much we could do with SequenceFeature API.
 What i wanted is a slidingwindow dataset with a categorical column that is fed into LSTM network. The examples is shown everything except this crucial part. Pytorch has nice way of doing this. Wish Tensorflow has something simple to implement categorical feature for timeseries.
 		</comment>
 		<comment id='13' author='summa-code' date='2021-01-17T17:54:15Z'>
 		And then i came across this one,
 &lt;denchmark-link:https://github.com/tensorflow/community/blob/master/rfcs/20191212-keras-categorical-inputs.md&gt;https://github.com/tensorflow/community/blob/master/rfcs/20191212-keras-categorical-inputs.md&lt;/denchmark-link&gt;
 
 This all leads to One hot encoding, even the hashing Trick does not do the trick. I am just lost here.
 		</comment>
 		<comment id='14' author='summa-code' date='2021-01-20T20:09:46Z'>
 		???? Why was it closed ?
 		</comment>
 		<comment id='15' author='summa-code' date='2021-01-20T20:12:11Z'>
 		The linked commit updates that example:
 &lt;denchmark-link:https://github.com/tensorflow/tensorflow/commit/2cc955f533a9ba70512cf4a07024aaf65708e103&gt;2cc955f&lt;/denchmark-link&gt;
 
 &lt;denchmark-code&gt; ```python
 import tensorflow as tf
 # Behavior of some cells or feature columns may depend on whether we are in
 # training or inference mode, e.g. applying dropout.
 training = True
 rating = tf.feature_column.sequence_numeric_column('rating')
 watches = tf.feature_column.sequence_categorical_column_with_identity(
     'watches', num_buckets=1000)
 watches_embedding = tf.feature_column.embedding_column(watches,
                                             dimension=10)
 columns = [rating, watches_embedding]
 features = {
  'rating': tf.sparse.from_dense([[1.0,1.1, 0, 0, 0],
                                              [2.0,2.1,2.2, 2.3, 2.5]]),
  'watches': tf.sparse.from_dense([[2, 85, 0, 0, 0],[33,78, 2, 73, 1]])
 }
 sequence_input_layer = tf.keras.experimental.SequenceFeatures(columns)
 sequence_input, sequence_length = sequence_input_layer(
    features, training=training)
 sequence_length_mask = tf.sequence_mask(sequence_length)
 hidden_size = 32
 rnn_cell = tf.keras.layers.SimpleRNNCell(hidden_size)
 rnn_layer = tf.keras.layers.RNN(rnn_cell)
 outputs, state = rnn_layer(sequence_input, mask=sequence_length_mask)
 ```
 &lt;/denchmark-code&gt;
 
 		</comment>
 	</comments>
 </bug>
<commit id='2cc955f533a9ba70512cf4a07024aaf65708e103' author='A. Unique TensorFlower' date='2021-01-18 10:14:54-08:00'>
 	<dmm_unit complexity='None' interfacing='None' size='None'></dmm_unit>
 	<modification change_type='MODIFY' old_name='tensorflow\python\keras\feature_column\sequence_feature_column.py' new_name='tensorflow\python\keras\feature_column\sequence_feature_column.py'>
 		<file_info nloc='114' complexity='12' token_count='411'></file_info>
 		<modified_lines>
 			<added_lines>54,55,56,60,61,63,64,67,68,69,70,71,72,73,76,79,80,81,82</added_lines>
 			<deleted_lines>57,58,60,63,64,65,70,71</deleted_lines>
 		</modified_lines>
 	</modification>
 </commit>
</bug_data>
