<bug_data>
<bug id='831' author='sanket-kamthe' open_date='2018-08-22T20:56:49Z' closed_time='2020-05-07T10:39:02Z'>
 	<summary>SGPR build likelihood is incorrect for Multioutput</summary>
 	<description>
 The multiplication by output_dim in the likelihood is not needed if using multi-output kernels
 link (&lt;denchmark-link:https://github.com/GPflow/GPflow/blob/develop/gpflow/models/sgpr.py#L175&gt;https://github.com/GPflow/GPflow/blob/develop/gpflow/models/sgpr.py#L175&lt;/denchmark-link&gt;
 )
 See line 175 below:
 &lt;denchmark-code&gt;        bound += -0.5 * output_dim * tf.reduce_sum(Kdiag) / self.likelihood.variance
         bound += 0.5 * output_dim * tf.reduce_sum(tf.linalg.diag_part(AAT))
 &lt;/denchmark-code&gt;
 
 This is correct if Y is multidim for single kernel.
 There is no clean way I could think of handling this issue without a discussion.
 Also, should we have had a test to find this bug ?
 	</description>
 	<comments>
 		<comment id='1' author='sanket-kamthe' date='2018-08-23T07:46:26Z'>
 		How about something like output_dim = tf.where(tf.less(tf.rank(Kdiag), 2), output_dim, 1)?
 		</comment>
 		<comment id='2' author='sanket-kamthe' date='2018-08-23T08:34:13Z'>
 		Well, I would like to avoid putting conditions on the gradient path of the model, especially when we can determine this before compiling the graph.
 Are we anticipating a scenario where rank(kdiag)  changes at run time ?
 		</comment>
 		<comment id='3' author='sanket-kamthe' date='2018-08-23T08:50:42Z'>
 		I haven't tested this my self, but I think you can have a condition based on len(Kdiag.shape) == 2 which should work at graph compiling time.
 		</comment>
 		<comment id='4' author='sanket-kamthe' date='2018-08-23T10:32:09Z'>
 		I'd suggest that len(Kdiag.shape) == 2 can be dangerous if the shape is None, as at run time the shape could then be anything
 		</comment>
 		<comment id='5' author='sanket-kamthe' date='2019-12-03T22:33:16Z'>
 		&lt;denchmark-link:https://github.com/sanket-kamthe&gt;@sanket-kamthe&lt;/denchmark-link&gt;
  it's an old issue but still seems relevant - would be great if you'd be up for writing a test (that currently would fail, but that we can work towards fixing). Thank you!
 		</comment>
 		<comment id='6' author='sanket-kamthe' date='2020-05-07T10:39:02Z'>
 		Closing this in favour of the larger issue captured in &lt;denchmark-link:https://github.com/GPflow/GPflow/issues/1209&gt;#1209&lt;/denchmark-link&gt;
 
 		</comment>
 	</comments>
 </bug>
<commit id='2c318e8fa7608d8fc1c5ca0d58797925978a4a11' author='Eric Hammy' date='2020-02-14 15:10:29+00:00'>
 	<dmm_unit complexity='None' interfacing='None' size='None'></dmm_unit>
 	<modification change_type='MODIFY' old_name='doc\source\notebooks\advanced\multioutput.ipynb' new_name='doc\source\notebooks\advanced\multioutput.ipynb'>
 		<file_info nloc='None' complexity='None' token_count='None'></file_info>
 		<modified_lines>
 			<added_lines>16,18,53,58,88,101,111,117,134,178,183,187,192,200,203,204,205,206,207,208,209,229,251,259,262,263,264,265,266,267,268,286,291,309,317,320,321,322,336,339,359,368,375,385,394,402,405,406,407,408,409,410,411,412,413,431,436,453,459,460,461,464,483,508,518,527,532,556,561,583,589,592,618,634,639,641,649,658,663,760,766,769,780,785,789,792,799,815,833,837</added_lines>
 			<deleted_lines>16,18,53,58,88,101,111,117,134,178,183,187,192,200,203,204,205,206,207,208,209,229,251,259,262,263,264,265,266,267,268,286,291,309,317,320,321,322,336,339,359,368,375,385,394,402,405,406,407,408,409,410,411,412,413,431,436,453,459,460,461,464,483,508,518,527,532,556,561,583,589,592,618,634,639,641,649,658,663,760,766,769,780,785,789,792,799,832,836</deleted_lines>
 		</modified_lines>
 	</modification>
 	<modification change_type='MODIFY' old_name='doc\source\notebooks\advanced\multioutput.pct.py' new_name='doc\source\notebooks\advanced\multioutput.pct.py'>
 		<file_info nloc='103' complexity='7' token_count='1209'></file_info>
 		<method name='inspect_conditional' parameters='inducing_variable_type,kernel_type'>
 				<method_info nloc='6' complexity='1' token_count='46' nesting_level='0' start_line='352' end_line='372'></method_info>
 			<added_lines>357,362,366,369</added_lines>
 			<deleted_lines>357,362,366,369</deleted_lines>
 		</method>
 		<method name='generate_data' parameters='N'>
 				<method_info nloc='7' complexity='1' token_count='143' nesting_level='0' start_line='91' end_line='98'></method_info>
 			<added_lines>97</added_lines>
 			<deleted_lines>97</deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines>23,25,60,142,146,191,277,279,376</added_lines>
 			<deleted_lines>23,25,60,142,146,191,277,279,376</deleted_lines>
 		</modified_lines>
 	</modification>
 	<modification change_type='MODIFY' old_name='gpflow\kernels\mo_kernels.py' new_name='gpflow\kernels\mo_kernels.py'>
 		<file_info nloc='123' complexity='32' token_count='907'></file_info>
 		<method name='num_latents' parameters='self'>
 				<method_info nloc='2' complexity='1' token_count='8' nesting_level='1' start_line='41' end_line='43'></method_info>
 			<added_lines>41,42,43</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<method name='__init__' parameters='self,kernels,name'>
 				<method_info nloc='2' complexity='1' token_count='25' nesting_level='1' start_line='114' end_line='115'></method_info>
 			<added_lines>115</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<method name='K_diag' parameters='self,X,full_output_cov'>
 				<method_info nloc='4' complexity='2' token_count='55' nesting_level='1' start_line='103' end_line='106'></method_info>
 			<added_lines>105</added_lines>
 			<deleted_lines>103</deleted_lines>
 		</method>
 		<method name='__init__' parameters='self,Kernel,int'>
 				<method_info nloc='4' complexity='1' token_count='30' nesting_level='1' start_line='85' end_line='88'></method_info>
 			<added_lines>85,88</added_lines>
 			<deleted_lines>86</deleted_lines>
 		</method>
 		<method name='K' parameters='self,X,X2,full_output_cov'>
 				<method_info nloc='7' complexity='2' token_count='101' nesting_level='1' start_line='95' end_line='101'></method_info>
 			<added_lines>98,101</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<method name='__init__' parameters='self,kernels,W,name'>
 				<method_info nloc='3' complexity='1' token_count='35' nesting_level='1' start_line='155' end_line='157'></method_info>
 			<added_lines>156</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<method name='__init__' parameters='self,Kernel,int'>
 				<method_info nloc='4' complexity='1' token_count='30' nesting_level='1' start_line='78' end_line='81'></method_info>
 			<added_lines></added_lines>
 			<deleted_lines>78,81</deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines>38,39,40,44,89,90,91,92,93,116,117,118,119,159,160,161,162</added_lines>
 			<deleted_lines>89,93,140</deleted_lines>
 		</modified_lines>
 	</modification>
 	<modification change_type='MODIFY' old_name='tests\test_multioutput.py' new_name='tests\test_multioutput.py'>
 		<file_info nloc='375' complexity='64' token_count='5082'></file_info>
 		<method name='test_shapes_of_mok' parameters=''>
 				<method_info nloc='10' complexity='2' token_count='82' nesting_level='0' start_line='314' end_line='327'></method_info>
 			<added_lines>314,315,316,317,318,319,320,321,322,323,324,325,326,327</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines>310,311,312,313,328</added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 </commit>
</bug_data>
