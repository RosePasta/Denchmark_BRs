<bug_data>
<bug id='381' author='PhilipMay' open_date='2020-05-29T16:13:05Z' closed_time='2020-06-04T06:34:32Z'>
 	<summary>Zero-based counting in "train epoch" progress bar.</summary>
 	<description>
 The train progress bar seems to work zero based. See below:
 &lt;denchmark-code&gt;Train epoch 0/20 (Cur. train loss: 0.5595):  13%|█▎        | 368/2813 [10:44&lt;48:51,  1.20s/it]
 &lt;/denchmark-code&gt;
 
 IMO this is counterintuitive. It should count from 1 to 20 in this case (or from 0 to 19) since I said n_epochs=20 in initialize_optimizer.
 What do you think?
 	</description>
 	<comments>
 		<comment id='1' author='PhilipMay' date='2020-05-31T14:34:03Z'>
 		Totally agree. Please feel free to add a PR.
 		</comment>
 		<comment id='2' author='PhilipMay' date='2020-06-02T10:48:59Z'>
 		I remember that we had quite some discussion about this a while ago. The zero-based counting simplified some functionality around Checkpointing, StreamingDataSilo and LR schedules.
 I would vote for keeping it like it is at least until we merge &lt;denchmark-link:https://github.com/deepset-ai/FARM/pull/305&gt;#305&lt;/denchmark-link&gt;
  as there might be many unwanted side effects otherwise.
 		</comment>
 		<comment id='3' author='PhilipMay' date='2020-06-02T12:53:03Z'>
 		Well. IMO this is no big deal. I think we should plit 2 questions:
 
 How do we count epochs internaly?
 How do we show them to the user?
 
 I am not 100% sure and I did not try it but I think this could be a simple solution:
 Instead of:
 
 we could just say:  see here: &lt;denchmark-link:https://github.com/deepset-ai/FARM/blob/master/farm/train.py#L249&gt;https://github.com/deepset-ai/FARM/blob/master/farm/train.py#L249&lt;/denchmark-link&gt;
 
 This way we change nothing internaly but just change the "presentation logic"...
 IMO this is the same as Keras is also doing. They show the epochs one based but internaly they count them zero based.
 What do you think?
 		</comment>
 		<comment id='4' author='PhilipMay' date='2020-06-02T13:04:36Z'>
 		I think this is a good solution and I do not see any problems in other parts of the code when changing this line.
 		</comment>
 		<comment id='5' author='PhilipMay' date='2020-06-02T15:47:16Z'>
 		&lt;denchmark-link:https://github.com/tholor&gt;@tholor&lt;/denchmark-link&gt;
  What do you think about my suggestion? Does it interfere with &lt;denchmark-link:https://github.com/deepset-ai/FARM/pull/305&gt;#305&lt;/denchmark-link&gt;
  or is it independent?
 		</comment>
 		<comment id='6' author='PhilipMay' date='2020-06-02T17:18:21Z'>
 		Hm... while I  see your point about a "simple presentation logic", I still have some doubts to be honest:
 
 If the epoch count is one-based the step count (within an epoch) should also be switched to one-based and there it might be more than a "logged string" that we need to change
 If we have a different counting logic for "presentation" and "internal", it might become ambiguous for some other parts of the pipeline. For example, how would we name saved checkpoint files - using "internal" or "presentation" logic? As this was a source of bugs in the past, I would be very cautious here (Disclaimer: I am probably biased because I once spent &gt; 1 day tracing a bug where it turned out in the end that we were executing a training step twice after stopping &amp; resuming training using checkpointing).
 
 I would propose to postpone this until &lt;denchmark-link:https://github.com/deepset-ai/FARM/pull/305&gt;#305&lt;/denchmark-link&gt;
  is finished &amp; merged and evaluate then if we want to "completely" move to one-based counts.
 		</comment>
 		<comment id='7' author='PhilipMay' date='2020-06-02T17:28:34Z'>
 		Well - yes. There is pro and con for zero and one based counting. At the end of the day I do not care and can can live with both solutions. If you want to be zero based we should count from 0 to 19 if saying n_epochs=20.
 Then we could say progress_bar.set_description(f"Train epoch {epoch}/{self.epochs-1} (Cur. train loss: {loss:.4f})". The current implementation is just counterintuitive IMO.
 Maybe you can discuss this internally and make a decision on how to count. Personaly I would definitly count zero based internaly. External I do not care.
 		</comment>
 		<comment id='8' author='PhilipMay' date='2020-06-03T08:26:43Z'>
 		We had a discussion in the team and everybody was in favor of zero-based counting (interal+external).
 We like your suggestion though to switch the progress bar to progress_bar.set_description(f"Train epoch {epoch}/{self.epochs-1} (Cur. train loss: {loss:.4f})".
 Hope this makes sense to you. We appreciate your initiative here and the open discussion.
 Do you want to create a quick PR for that?
 		</comment>
 		<comment id='9' author='PhilipMay' date='2020-06-03T09:36:11Z'>
 		Yes - I can create a PR for this. :-)
 Hope the CI runs soon. :-)
 		</comment>
 		<comment id='10' author='PhilipMay' date='2020-06-03T20:31:07Z'>
 		PR added: &lt;denchmark-link:https://github.com/deepset-ai/FARM/pull/398&gt;#398&lt;/denchmark-link&gt;
 
 		</comment>
 	</comments>
 </bug>
<commit id='f18c282c5ca040c13e0f1b011dbe1c60e311dcde' author='Philip May' date='2020-06-04 08:34:20+02:00'>
 	<dmm_unit complexity='None' interfacing='None' size='None'></dmm_unit>
 	<modification change_type='MODIFY' old_name='farm\train.py' new_name='farm\train.py'>
 		<file_info nloc='336' complexity='61' token_count='2122'></file_info>
 		<method name='train' parameters='self'>
 				<method_info nloc='68' complexity='24' token_count='585' nesting_level='1' start_line='220' end_line='323'></method_info>
 			<added_lines>221,222,223,224,225,226,254</added_lines>
 			<deleted_lines>221,249</deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines></added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 	<modification change_type='MODIFY' old_name='tutorials\1_farm_building_blocks.ipynb' new_name='tutorials\1_farm_building_blocks.ipynb'>
 		<file_info nloc='None' complexity='None' token_count='None'></file_info>
 		<modified_lines>
 			<added_lines>667,694,1225,1255,1285,1316,1363</added_lines>
 			<deleted_lines>667,694,1225,1255,1285,1316,1363</deleted_lines>
 		</modified_lines>
 	</modification>
 </commit>
</bug_data>
