<bug_data>
<bug id='608' author='smolendawid' open_date='2020-04-23T12:07:26Z' closed_time='2020-04-27T08:56:06Z'>
 	<summary>Python code dependencies not saved in SavedBundle</summary>
 	<description>
 Describe the bug
 After saving the object bentoml.BentoService with save() method, I have everything working except that my local package (recognition) is not saved in the Bundle. While saving I can see the warning:
 WARNING - unknown package dependency for module: recognition
 Expected behavior
 I'd like SavedBundle to contain python code dependencies, not only PyPI dependencies.
 Environment:
 
 OS: [e.g. MacOS 10.15.1]
 Python/BentoML Version [e.g. Python 3.7.1, BentoML-0.0.5]
 
 My project structure is
 &lt;denchmark-code&gt;Project/:
   - bento_server/
     - MyClass.py
     - server.py - I save Bundle here
   - recognition/
     - model.py
 &lt;/denchmark-code&gt;
 
 I run bento_server/server.py from Project root, with export PYTHONPATH./
 So bento_server/server.py starts with
 import recognition.model
 	</description>
 	<comments>
 		<comment id='1' author='smolendawid' date='2020-04-23T22:04:28Z'>
 		hi &lt;denchmark-link:https://github.com/smolendawid&gt;@smolendawid&lt;/denchmark-link&gt;
 , thank you for reporting this issue. Python code dependencies are expected to be bundled with BentoML . Here are some unit test covering this behavior:
 &lt;denchmark-link:https://github.com/bentoml/BentoML/blob/master/tests/test_bundle_local_dependencies.py&gt;https://github.com/bentoml/BentoML/blob/master/tests/test_bundle_local_dependencies.py&lt;/denchmark-link&gt;
 
 &lt;denchmark-link:https://github.com/bentoml/BentoML/blob/master/tests/bento_service_examples/local_dependencies/my_test_bento_service.py&gt;https://github.com/bentoml/BentoML/blob/master/tests/bento_service_examples/local_dependencies/my_test_bento_service.py&lt;/denchmark-link&gt;
  This might be an edge case where our implementation does not work.
 Question about your project structure -  the server.py file is where you call my_bento_service.save() and your BentoService class is defined in MyClass.py file right? Do you also have import recognition.model in the MyClass.py file?  And was the recognition.model module only used in training/saving time? or is it also required in serving time?
 It would be a great help if you could share those two files, you can remove the code not related to BentoML.
 		</comment>
 		<comment id='2' author='smolendawid' date='2020-04-24T17:00:12Z'>
 		
 Question about your project structure - the server.py file is where you call my_bento_service.save() and your BentoService class is defined in MyClass.py file right?
 
 Exactly
 
 And was the recognition.model module only used in training/saving time? or is it also required in serving time?
 
 The local dependencies are mainly for the model loading but also for the serving.
 Well, I'll try to upload my anonymized files. The original local dependencies are pretty complex.
 bento_server/server.py:
 &lt;denchmark-code&gt;import sys
 from os import path
 sys.path.append(path.dirname(path.dirname(path.abspath(__file__))))
 
 from recognition.my_model import load_model
 from bento_server.my_class import MyClass
 
 
 if __name__ == '__main__':
 
     model, converter, opt = load_model('path')
 
     bento_svc = MyClass()
     bento_svc.pack('recognizer', model)
     saved_path = bento_svc.save()
     print(saved_path)
 &lt;/denchmark-code&gt;
 
 bento_server/my_class.py:
 &lt;denchmark-code&gt;import sys
 from os import path
 sys.path.append(path.dirname(path.dirname(path.abspath(__file__))))
 
 import bentoml
 from bentoml.artifact import PytorchModelArtifact
 from bentoml.handlers import ImageHandler
 
 from recognition.my_model import recognize
 
 
 pip_dependencies = [
     'bentoml==0.7.3',
     'torch==1.4.0',
     'pillow==7.0.0',
     'numpy==1.18.1',
 ]
 
 @bentoml.env(pip_dependencies=pip_dependencies)
 @bentoml.artifacts([PytorchModelArtifact('recognizer')])
 class MyClass(bentoml.BentoService):
 
     def _prepare_input(self, image):
 
         return image
 
     @bentoml.api(ImageHandler, pilmode='RGB')
     def predict(self, image: np.ndarray):
         image = self._prepare_input(image)
         prediction = recognize(image,  self.artifacts.recognizer)
 
         return prediction
 
 &lt;/denchmark-code&gt;
 
 So we have recognition.my_model that has load_model() and recognize() functions. The former is used only in server.py for loading the model for artifacts (Bundle knows how to load it later, doesn't it?) and the latter is used during serving.
 TBH I don't know why but I don't see the warning anymore. But it's still not adding local dependencies. I can verify them added looking into the bentoml/ correct version and seeing the original files there, like recognition/my_model.py, yes?
 		</comment>
 		<comment id='3' author='smolendawid' date='2020-04-26T05:29:54Z'>
 		&lt;denchmark-link:https://github.com/smolendawid&gt;@smolendawid&lt;/denchmark-link&gt;
  thanks for sharing the details, it may has to do with the , I will try to reproduce on my end.
 And yes you can verify by looking for the file in the generated SavedBundle directory. You can find the directory path using the bentoml CLI, e.g.: bentoml get PyTorchVINModel:latest, the path is in the uri field of the CLI's json output. Could you verify if you see the recognition/my_model.py file in that directory?
 		</comment>
 		<comment id='4' author='smolendawid' date='2020-04-26T05:35:34Z'>
 		&lt;denchmark-link:https://github.com/smolendawid&gt;@smolendawid&lt;/denchmark-link&gt;
  do you mind add the following lines before the code that saves the BentoService and share with us the logs? This code will enable debug logs which will help us diagnose this issue.
 &lt;denchmark-code&gt;import bentoml
 import logging
 bentoml.config().set('core', 'debug', 'true')
 bentoml.utils.log.configure_logging(logging.DEBUG)
 &lt;/denchmark-code&gt;
 
 Thanks!
 		</comment>
 		<comment id='5' author='smolendawid' date='2020-04-26T09:13:56Z'>
 		
 @smolendawid thanks for sharing the details, it may has to do with the sys.path.append(path.dirname(path.dirname(path.abspath(file)))), I will try to reproduce on my end.
 
 Well it's necessary if I want to run bento related scripts from the main project directory like python bento_server/server.py and python bento_server/my_class.py. Otherwise, I would have to run export PYTHONPATH=./ in main directory.
 
 And yes you can verify by looking for the file in the generated SavedBundle directory.
 
 Indeed, the required local dependencies are not there.
 I attach the logs,
 
 4] DEBUG - Created temporary directory: /private/var/folders/xc/958bb1gj3dz57_7qy64gw45xnj4n1d/T/bentoml-temp-yyqybcar
 [2020-04-26 11:05:42,721] DEBUG - copy_used_py_modules target_module_name: bento_server.my_class, target_module_file: /Users/dasm/projects/Project/bento_server/my_class.py
 [2020-04-26 11:05:42,721] DEBUG - Searching for dependant modules of bento_server.my_class:/Users/dasm/projects/Project/bento_server/my_class.py
 [2020-04-26 11:05:59,283] DEBUG - Ignoring deps within local site-packages path: ['/Library/Frameworks/Python.framework/Versions/3.7/lib/python37.zip', '/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7', '/Library/Frameworks/Python.framework/Versions/3.7/lib/python3.7/lib-dynload', '/Users/dasm/venv/lib/python3.7/site-packages', '/Users/dasm/venv/lib/python3.7/site-packages/typing-3.7.4.1-py3.7.egg', '/Users/dasm/venv/lib/python3.7/site-packages/IPython/extensions', '/Users/dasm/venv', '/Library/Frameworks/Python.framework/Versions/3.7']
 [2020-04-26 11:05:59,283] DEBUG - User local module deps found: main
 [2020-04-26 11:05:59,291] DEBUG - Copying user local python dependencies: {'bento_server.my_class': &lt;module 'bento_server.my_class' from '/Users/dasm/projects/Project/bento_server/my_class.py'&gt;}
 [2020-04-26 11:05:59,291] DEBUG - Copying local python module '/Users/dasm/projects/Project/bento_server/my_class.py'
 [2020-04-26 11:05:59,291] DEBUG - Creating empty init.py under folder:'/private/var/folders/xc/958bb1gj3dz57_7qy64gw45xnj4n1d/T/bentoml-temp-yyqybcar/MyClass'
 [2020-04-26 11:05:59,292] DEBUG - Creating empty init.py under folder:'/private/var/folders/xc/958bb1gj3dz57_7qy64gw45xnj4n1d/T/bentoml-temp-yyqybcar/MyClass/artifacts'
 [2020-04-26 11:05:59,292] DEBUG - Creating empty init.py under folder:'/private/var/folders/xc/958bb1gj3dz57_7qy64gw45xnj4n1d/T/bentoml-temp-yyqybcar/MyClass/bento_server'
 [2020-04-26 11:05:59,292] DEBUG - Done copying local python dependant modules
 [2020-04-26 11:05:59,525] INFO - BentoService bundle 'MyClass:20200426110541_5BDB97' saved to: /Users/dasm/bentoml/repository/MyClass/20200426110541_5BDB97
 [2020-04-26 11:05:59,525] DEBUG - BentoML in debug mode, keeping temp directory "/private/var/folders/xc/958bb1gj3dz57_7qy64gw45xnj4n1d/T/bentoml-temp-yyqybcar"
 /Users/dasm/bentoml/repository/MyClass/20200426110541_5BDB97
 
 		</comment>
 		<comment id='6' author='smolendawid' date='2020-04-26T09:54:24Z'>
 		I'm getting familiar with bentml, so maybe I'll be able to solve that issue. In bundler/py_module_utils.py, my local dependencies are in bad_modules attribute of finder.
 in modulefinder.py in find_head_package(self, parent, name) parent=None  and name=recognition.my_model. This function fails. I don't understand how the input should look like, maybe parent=recognition and my_model=name. I'll debug it later, thanks for help
 		</comment>
 		<comment id='7' author='smolendawid' date='2020-04-27T05:53:14Z'>
 		&lt;denchmark-link:https://github.com/smolendawid&gt;@smolendawid&lt;/denchmark-link&gt;
  I tried with a few examples that modify  and everything seems to work, see a test that I added here: &lt;denchmark-link:https://github.com/bentoml/BentoML/pull/611&gt;#611&lt;/denchmark-link&gt;
 
 Could you try creating a minimal sample project that can reproduce this problem?
 		</comment>
 		<comment id='8' author='smolendawid' date='2020-04-27T08:56:06Z'>
 		Well, my bad. I didn't have  file in . &lt;denchmark-link:https://github.com/parano&gt;@parano&lt;/denchmark-link&gt;
  I appreciate your support greatly!
 		</comment>
 	</comments>
 </bug>
<commit id='873fd16e98c516307e3ec4a0a2cf4faf99a9a226' author='Chaoyu' date='2020-04-27 11:27:03-07:00'>
 	<dmm_unit complexity='1.0' interfacing='1.0' size='1.0'></dmm_unit>
 	<modification change_type='ADD' old_name='None' new_name='tests\bento_service_examples\bento_service_with_modified_sys_path.py'>
 		<file_info nloc='22' complexity='1' token_count='146'></file_info>
 	</modification>
 	<modification change_type='MODIFY' old_name='tests\test_bundle_local_dependencies.py' new_name='tests\test_bundle_local_dependencies.py'>
 		<file_info nloc='39' complexity='3' token_count='195'></file_info>
 		<method name='test_bundle_local_dependencies_with_modified_sys_path' parameters=''>
 				<method_info nloc='5' complexity='1' token_count='19' nesting_level='0' start_line='55' end_line='60'></method_info>
 			<added_lines>55,56,57,59,60</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<method name='run_test_with_bento_service_class' parameters='bento_service_class'>
 				<method_info nloc='25' complexity='1' token_count='136' nesting_level='0' start_line='10' end_line='44'></method_info>
 			<added_lines>10,16,17,20,23,25,44</added_lines>
 			<deleted_lines>12,18,19,22,25,27</deleted_lines>
 		</method>
 		<method name='test_bundle_local_dependencies' parameters=''>
 				<method_info nloc='5' complexity='1' token_count='21' nesting_level='0' start_line='47' end_line='52'></method_info>
 			<added_lines>47,48,49,50,51,52</added_lines>
 			<deleted_lines>47</deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines>6,45,46,53,54</added_lines>
 			<deleted_lines>6,7,8,46</deleted_lines>
 		</modified_lines>
 	</modification>
 </commit>
</bug_data>
