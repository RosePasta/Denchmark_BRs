<bug_data>
<bug id='1412' author='tonyyang-svail' open_date='2019-12-13T05:58:37Z' closed_time='2019-12-17T05:39:01Z'>
 	<summary>TestGetPodLogs fails randomly</summary>
 	<description>
 To reproduce, we can run TestGetPodLogs many times.
 Sample script:
 &lt;denchmark-code&gt;set -e
 for i in {0..100}; do
 	echo $i
 	go test -run TestGetPodLogs
 done
 &lt;/denchmark-code&gt;
 
 The test failed at the 17th run.
 &lt;denchmark-code&gt;sqlflow/pkg/argo# bash long_test.sh
 ...
 15
 PASS
 ok  	sqlflow.org/sqlflow/pkg/argo	10.109s
 16
 PASS
 ok  	sqlflow.org/sqlflow/pkg/argo	8.144s
 17
 --- FAIL: TestGetPodLogs (9.48s)
     fetch_test.go:305:
         	Error Trace:	fetch_test.go:305
         	Error:      	Not equal:
         	            	expected: []string{"hello1", "hello2"}
         	            	actual  : []string{"hello1", "hello2", "hello3"}
 
         	            	Diff:
         	            	--- Expected
         	            	+++ Actual
         	            	@@ -1,4 +1,5 @@
         	            	-([]string) (len=2) {
         	            	+([]string) (len=3) {
         	            	  (string) (len=6) "hello1",
         	            	- (string) (len=6) "hello2"
         	            	+ (string) (len=6) "hello2",
         	            	+ (string) (len=6) "hello3"
         	            	 }
         	Test:       	TestGetPodLogs
 FAIL
 exit status 1
 FAIL	sqlflow.org/sqlflow/pkg/argo	9.512s
 &lt;/denchmark-code&gt;
 
 Related code
 
 
 
 sqlflow/pkg/argo/fetch_test.go
 
 
         Lines 275 to 302
       in
       a8ac42f
 
 
 
 
 
 
  func TestGetPodLogs(t *testing.T) { 
 
 
 
  if os.Getenv("SQLFLOW_TEST") != "workflow" { 
 
 
 
  t.Skip("argo: skip workflow tests") 
 
 
 
  	} 
 
 
 
  a := assert.New(t) 
 
 
 
  _, err := kubectlDeleteFromYAML(podYAML) 
 
 
 
  a.NoError(err) 
 
 
 
  podID, err := kubectlCreateFromYAML(podYAML) 
 
 
 
  a.NoError(err) 
 
 
 
  
 
 
 
  err = waitUntilPodRunning(podID) 
 
 
 
  a.NoError(err) 
 
 
 
  offset := "" 
 
 
 
  realLogs := []string{} 
 
 
 
  for { 
 
 
 
  logs, newOffset, err := getPodLogs(podID, offset) 
 
 
 
  a.NoError(err) 
 
 
 
  if len(logs) != 0 { 
 
 
 
  realLogs = append(realLogs, logs...) 
 
 
 
  		} 
 
 
 
  if isPodCompleted(podID) &amp;&amp; offset == newOffset { 
 
 
 
  break 
 
 
 
  		} 
 
 
 
  offset = newOffset 
 
 
 
  	} 
 
 
 
  a.Equal(realLogs, []string{"hello1", "hello2", "hello3"}) 
 
 
 
  
 
 
 
  } 
 
 
 
 
 
 	</description>
 	<comments>
 	</comments>
 </bug>
<commit id='e30e18f8f220175d802face68f7164280c27eea5' author='Yan Xu' date='2019-12-17 13:39:00+08:00'>
 	<dmm_unit complexity='0.0' interfacing='0.0' size='0.0'></dmm_unit>
 	<modification change_type='MODIFY' old_name='pkg\argo\fetch.go' new_name='pkg\argo\fetch.go'>
 		<file_info nloc='188' complexity='46' token_count='1284'></file_info>
 		<method name='getPodLogs' parameters='string,string'>
 				<method_info nloc='8' complexity='2' token_count='88' nesting_level='0' start_line='158' end_line='168'></method_info>
 			<added_lines>167</added_lines>
 			<deleted_lines>167,168</deleted_lines>
 		</method>
 		<method name='parseOffset' parameters='string'>
 				<method_info nloc='8' complexity='2' token_count='81' nesting_level='0' start_line='121' end_line='128'></method_info>
 			<added_lines>121,125,127</added_lines>
 			<deleted_lines>121,125,127</deleted_lines>
 		</method>
 		<method name='getOffsetAndContentFromLogs' parameters='logs,string'>
 				<method_info nloc='23' complexity='6' token_count='114' nesting_level='0' start_line='130' end_line='156'></method_info>
 			<added_lines>139,140</added_lines>
 			<deleted_lines>139,140</deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines></added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 	<modification change_type='MODIFY' old_name='pkg\argo\fetch_test.go' new_name='pkg\argo\fetch_test.go'>
 		<file_info nloc='258' complexity='40' token_count='1429'></file_info>
 		<method name='TestGetPodLogs' parameters='T'>
 				<method_info nloc='28' complexity='6' token_count='164' nesting_level='0' start_line='270' end_line='299'></method_info>
 			<added_lines>277,282,283,285,289,291,295,297</added_lines>
 			<deleted_lines>280,281,288,293,295</deleted_lines>
 		</method>
 		<method name='kubectlDeletePod' parameters='string'>
 				<method_info nloc='8' complexity='2' token_count='53' nesting_level='0' start_line='111' end_line='118'></method_info>
 			<added_lines>111,112,113,115,117</added_lines>
 			<deleted_lines>111,112,114,116,117,118</deleted_lines>
 		</method>
 		<method name='kubectlDeleteFromYAML' parameters='string'>
 				<method_info nloc='13' complexity='3' token_count='92' nesting_level='0' start_line='111' end_line='123'></method_info>
 			<added_lines>111,112,113,115,117</added_lines>
 			<deleted_lines>111,112,114,116,117,118,119,120,121,122</deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines>70</added_lines>
 			<deleted_lines>70,300</deleted_lines>
 		</modified_lines>
 	</modification>
 </commit>
</bug_data>
