<bug_data>
<bug id='2316' author='weiguoz' open_date='2020-05-20T07:45:43Z' closed_time='2020-05-22T09:39:56Z'>
 	<summary>Shall we find a way to specify the external parser</summary>
 	<description>
 
 SQLFlow determines the external parser by  which specified in DataSource string. e.g. &lt;denchmark-link:https://github.com/sql-machine-learning/sqlflow/blob/436d4559577ea3f2214f9cf3b8ffd255f399d788/doc/run_with_maxcompute.md#connect-existing-maxcompute-server&gt;maxcompute Datasource string&lt;/denchmark-link&gt;
 
 For dialect maxcompute, we run the unit test well with calcite parser. However, in some company environments, it's more accurate to use the odps parser because of the Non-Open sourced syntax file.
 
 
 
 sqlflow/pkg/parser/external/parser.go
 
 
         Lines 32 to 46
       in
       436d455
 
 
 
 
 
 
  // NewParser instantiates a parser. 
 
 
 
  func NewParser(dialect string) (Parser, error) { 
 
 
 
  switch dialect { 
 
 
 
  case "mysql", "tidb": 
 
 
 
  return newTiDBParser(), nil 
 
 
 
  case "hive": 
 
 
 
  return newJavaParser("hive"), nil 
 
 
 
  case "calcite", "maxcompute": 
 
 
 
  return newJavaParser("calcite"), nil 
 
 
 
  case "alisa": 
 
 
 
  return newJavaParser("odps"), nil 
 
 
 
  default: 
 
 
 
  return nil, fmt.Errorf("unrecognized dialect %s", dialect) 
 
 
 
  	} 
 
 
 
  } 
 
 
 
 
 
 Describe the solution you'd like
 It looks like we should find a way to specify the external parser.
 	</description>
 	<comments>
 		<comment id='1' author='weiguoz' date='2020-05-20T15:38:41Z'>
 		How about this? It seems only maxcompute has the issue.
 	case "mysql", "tidb":
  		return newTiDBParser(), nil
  	case "hive":
  		return newJavaParser("hive"), nil
  	case "calcite":
  		return newJavaParser("calcite"), nil
 	case "maxcompute":
 		if parser := newJavaParser("odps"); parser != nil {
 			return parser, nil
 		}
 		return newJavaParser("maxcompute"), nil
  	case "alisa":
  		return newJavaParser("odps"), nil
 		</comment>
 		<comment id='2' author='weiguoz' date='2020-05-21T08:57:31Z'>
 		Hi &lt;denchmark-link:https://github.com/shendiaomo&gt;@shendiaomo&lt;/denchmark-link&gt;
 , thanks for your suggestion.
 To test if  is , we need to try to call the Parser firstly.
 Let me do some tests.
 		</comment>
 		<comment id='3' author='weiguoz' date='2020-05-21T23:24:24Z'>
 		
 To test if newJavaParser("odps") is nil, we need to try to call the Parser firstly.
 
 Maybe we can wrap a new Parser which is something like:
 type ComposedParser struct {
     parsers []Parser
 } 
 
 func (parser *ComposedParser) Parse(stmt string) {
     for _, p := range parsers {
         ret, err := p.Parse(stmt)
         if err == nil {
             return ret
         }
     }
     return fmt.Errorf("...")
 }
 		</comment>
 		<comment id='4' author='weiguoz' date='2020-05-22T02:10:12Z'>
 		If we can't use odps parser, why should we add a maxcompute unit test run? Sorry, I'm not clear about the historical context.
 		</comment>
 		<comment id='5' author='weiguoz' date='2020-05-22T07:13:04Z'>
 		
 
 To test if newJavaParser("odps") is nil, we need to try to call the Parser firstly.
 
 Maybe we can wrap a new Parser which is something like:
 type ComposedParser struct {
     parsers []Parser
 } 
 
 func (parser *ComposedParser) Parse(stmt string) {
     for _, p := range parsers {
         ret, err := p.Parse(stmt)
         if err == nil {
             return ret
         }
     }
     return fmt.Errorf("...")
 }
 
 This approach, each stmt calls multi parsers. I would like to use a fixed parser currently.
 		</comment>
 	</comments>
 </bug>
<commit id='19c365b0f2113cb4114b8f9b102d7b559b7ac347' author='HongwuLin' date='2020-05-22 17:39:55+08:00'>
 	<dmm_unit complexity='0.43333333333333335' interfacing='1.0' size='0.43333333333333335'></dmm_unit>
 	<modification change_type='MODIFY' old_name='java\parser\src\main\java\org\sqlflow\parser\ParserFactory.java' new_name='java\parser\src\main\java\org\sqlflow\parser\ParserFactory.java'>
 		<file_info nloc='74' complexity='14' token_count='561'></file_info>
 		<method name='ParserFactory::getAlternativeParsers' parameters='alts'>
 				<method_info nloc='8' complexity='3' token_count='39' nesting_level='1' start_line='63' end_line='70'></method_info>
 			<added_lines>63,64,65,66,67,68,69,70</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<method name='ParserFactory::newParser' parameters='dialect'>
 				<method_info nloc='12' complexity='3' token_count='84' nesting_level='1' start_line='72' end_line='85'></method_info>
 			<added_lines>73,74,75,76,77,78,79,80</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<method name='ParserFactory::ParserFactory' parameters='folderPath'>
 				<method_info nloc='41' complexity='8' token_count='342' nesting_level='1' start_line='16' end_line='61'></method_info>
 			<added_lines>31,32,33,34,44,47,48</added_lines>
 			<deleted_lines>31,41,42,45,46</deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines>71</added_lines>
 			<deleted_lines>62</deleted_lines>
 		</modified_lines>
 	</modification>
 	<modification change_type='MODIFY' old_name='java\parser\src\test\java\org\sqlflow\parser\ParserFactoryTest.java' new_name='java\parser\src\test\java\org\sqlflow\parser\ParserFactoryTest.java'>
 		<file_info nloc='30' complexity='3' token_count='224'></file_info>
 		<method name='ParserFactoryTest::testMaxcompute' parameters=''>
 				<method_info nloc='14' complexity='2' token_count='103' nesting_level='1' start_line='20' end_line='33'></method_info>
 			<added_lines>20,21,22,23,24,25,26,27,28,29,30,31,32</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<method name='ParserFactoryTest::testDynamicLoading' parameters=''>
 				<method_info nloc='7' complexity='1' token_count='63' nesting_level='1' start_line='11' end_line='17'></method_info>
 			<added_lines>15,16,17</added_lines>
 			<deleted_lines>13,14</deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines>3,7,18,19</added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 	<modification change_type='MODIFY' old_name='pkg\parser\external\parser.go' new_name='pkg\parser\external\parser.go'>
 		<file_info nloc='27' complexity='6' token_count='122'></file_info>
 		<method name='NewParser' parameters='string'>
 				<method_info nloc='16' complexity='6' token_count='81' nesting_level='0' start_line='33' end_line='51'></method_info>
 			<added_lines>39,41,42,43,44,45</added_lines>
 			<deleted_lines>39</deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines></added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 </commit>
</bug_data>
