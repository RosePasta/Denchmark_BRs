<bug_data>
<bug id='558' author='andyDoucette' open_date='2020-07-16T23:54:55Z' closed_time='2020-07-22T18:03:31Z'>
 	<summary>How to save the model created with an ENAS_Scheduler?</summary>
 	<description>
 We have this nice tutorial showing how to use the ENAS_Scheduler to train a model.
 &lt;denchmark-link:https://autogluon.mxnet.io/tutorials/nas/enas_proxylessnas.html&gt;ENAS Tutorial&lt;/denchmark-link&gt;
 
 My question is:  How do we save and load trained models created that way?  I've tried 5 different ways and none of them seem to work.
 Based on what I read, the one I think I'm supposed to use is this:
 mynet.export(modelFile, epoch=numEpochsTrained)
 However, that produces this error message when I run it:
 &lt;denchmark-code&gt;Traceback (most recent call last):
   File "/usr/lib/python3.6/pdb.py", line 1667, in main
     pdb._runscript(mainpyfile)
   File "/usr/lib/python3.6/pdb.py", line 1548, in _runscript
     self.run(statement)
   File "/usr/lib/python3.6/bdb.py", line 434, in run
     exec(cmd, globals, locals)
   File "&lt;string&gt;", line 1, in &lt;module&gt;
   File "/app/src/cli/boundryDetector.py", line 2, in &lt;module&gt;
     import sys,os;
   File "/app/src/code/boundryDetector/../lib/click/src/click/core.py", line 857, in __call__
     return self.main(*args, **kwargs)
   File "/app/src/code/boundryDetector/../lib/click/src/click/core.py", line 810, in main
     rv = self.invoke(ctx)
   File "/app/src/code/boundryDetector/../lib/click/src/click/core.py", line 1099, in invoke
     return ctx.invoke(self.callback, **ctx.params)
   File "/app/src/code/boundryDetector/../lib/click/src/click/core.py", line 613, in invoke
     return callback(*args, **kwargs)
   File "/app/src/cli/boundryDetector.py", line 108, in boundry_detector
     dnn.save(modelFile)
   File "/app/src/code/boundryDetector/./dnn/save.py", line 12, in save
     s.model.export(modelFile, epoch=s.numEpochsTrained)
   File "/usr/local/lib/python3.6/dist-packages/mxnet/gluon/block.py", line 1106, in export
     assert name in aux_names
 AssertionError
 &lt;/denchmark-code&gt;
 
 I'm using:
 &lt;denchmark-code&gt;autogluon==0.0.11
 mxnet==1.6.0
 &lt;/denchmark-code&gt;
 
 Your kind assistance would be greatly appreciated. :)
 	</description>
 	<comments>
 		<comment id='1' author='andyDoucette' date='2020-07-17T21:08:00Z'>
 		&lt;denchmark-link:https://github.com/zhreshold&gt;@zhreshold&lt;/denchmark-link&gt;
  Could you take a look at this?
 		</comment>
 		<comment id='2' author='andyDoucette' date='2020-07-17T21:57:38Z'>
 		&lt;denchmark-link:https://github.com/andyDoucette&gt;@andyDoucette&lt;/denchmark-link&gt;
  Hi, the fix to export is available here: &lt;denchmark-link:https://github.com/awslabs/autogluon/pull/559&gt;#559&lt;/denchmark-link&gt;
 
 The remaining issue is that you can only use the exported model for inference, but may not be able to load it back as the current implementation of ENAS is based on a highly dynamically wrapped structure that can't be pickled or saved.
 The good news is that the exported model can be imported into mxnet without extra dependency.
 		</comment>
 		<comment id='3' author='andyDoucette' date='2020-07-18T04:57:42Z'>
 		&lt;denchmark-link:https://github.com/zhreshold&gt;@zhreshold&lt;/denchmark-link&gt;
  Thank you very much! :)  Once this all gets put into master, I'll try it out on my side and report back.
 		</comment>
 	</comments>
 </bug>
<commit id='42941f03cc5f5b668d20c9d136b9bff2eaa3f24f' author='Joshua Z. Zhang' date='2020-07-22 11:03:29-07:00'>
 	<dmm_unit complexity='None' interfacing='None' size='None'></dmm_unit>
 	<modification change_type='MODIFY' old_name='autogluon\contrib\enas\enas.py' new_name='autogluon\contrib\enas\enas.py'>
 		<file_info nloc='346' complexity='114' token_count='2438'></file_info>
 		<method name='enas_net' parameters='kwvars'>
 				<method_info nloc='3' complexity='1' token_count='10' nesting_level='0' start_line='67' end_line='172'></method_info>
 			<added_lines>73</added_lines>
 			<deleted_lines>73</deleted_lines>
 		</method>
 		<method name='export' parameters='self,path'>
 				<method_info nloc='22' complexity='6' token_count='155' nesting_level='1' start_line='306' end_line='349'></method_info>
 			<added_lines>306,307,308,309,310,311,312,313,314,315,316,317,318,319,320,321,322,323,324,325,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,342,343,344,345,346,347,348,349</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<method name='enas_net.registered_class' parameters='Cls'>
 				<method_info nloc='20' complexity='1' token_count='47' nesting_level='1' start_line='68' end_line='171'></method_info>
 			<added_lines>73</added_lines>
 			<deleted_lines>73</deleted_lines>
 		</method>
 		<method name='enas_net.enas_net.registered_class.__init__' parameters='self,args,kwargs'>
 				<method_info nloc='17' complexity='5' token_count='143' nesting_level='3' start_line='70' end_line='87'></method_info>
 			<added_lines>73</added_lines>
 			<deleted_lines>73</deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines>245,350</added_lines>
 			<deleted_lines>245</deleted_lines>
 		</modified_lines>
 	</modification>
 	<modification change_type='MODIFY' old_name='docs\tutorials\nas\enas_proxylessnas.md' new_name='docs\tutorials\nas\enas_proxylessnas.md'>
 		<file_info nloc='None' complexity='None' token_count='None'></file_info>
 		<modified_lines>
 			<added_lines>29,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159</added_lines>
 			<deleted_lines>29</deleted_lines>
 		</modified_lines>
 	</modification>
 	<modification change_type='ADD' old_name='None' new_name='tests\unittests\test_contrib_enas.py'>
 		<file_info nloc='55' complexity='8' token_count='599'></file_info>
 	</modification>
 </commit>
</bug_data>
