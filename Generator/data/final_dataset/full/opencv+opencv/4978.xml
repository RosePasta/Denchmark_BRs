<bug_data>
<bug id='4978' author='opencv-pushbot' open_date='2015-07-27T11:20:41Z' closed_time='2019-01-23T10:32:42Z'>
 	<summary>decomposeHomographyMat does not return the expected decomposition</summary>
 	<description>
 Transferred from &lt;denchmark-link:http://code.opencv.org/issues/4307&gt;http://code.opencv.org/issues/4307&lt;/denchmark-link&gt;
 
 &lt;denchmark-code&gt;|| Philippe Bouttefroy on 2015-05-01 18:52
 || Priority: Normal
 || Affected: branch 'master' (3.0-dev)
 || Category: calibration, 3d
 || Tracker: Bug
 || Difficulty: 
 || PR: 
 || Platform: Any / Any
 &lt;/denchmark-code&gt;
 
 &lt;denchmark-h:h2&gt;decomposeHomographyMat does not return the expected decomposition&lt;/denchmark-h&gt;
 
 &lt;denchmark-code&gt;Hi,
 
 I am integrating decomposeHomographyMat in our codebase. I noticed in my unit tests that the method returns incorrect results about 10-25% of the time. I have reproduced a case in the OpenCV unit tests framework and enclose the file here (test_homography_decomp.cpp). The data used does not seem to represent any specific configuration (or at least non that I could identify). Also, I have relaxed the threshold a LOT (from 0.001 to 1) to make sure that this is not due to a "tight threshold". I also copy/paste the test results at the end of this message, FYI.
 
 The formula used to generate the homography is (from Malis paper): H = R + t^{T}*n/d, where R is the rotation, t is the translation, n is the plane normal and d is the distance of the plane to the origin. Then H is scaled so that H(2,2) = 1.
 
 Could you please confirm the bug and let me know when a fix is available? Please let me know if you need any further information (I did not include any platform, etc. details because you should be able to reproduce on any platform). I can also generate more failure cases if you need.
 
 Thanks,
 Philippe
 
 -----------------------------------------------
 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 Test with OpenCV original data:
 
 ***** VIDEOINPUT LIBRARY - 0.1995 - TFW07 *****
 
 OpenCV version: 3.0.0-dev
 OpenCV VCS version: unknown
 Build type: debug
 Parallel framework: ms-concurrency
 CPU features: popcnt mmx sse sse2 sse3 ssse3 sse4.1 sse4.2
 OpenCL Platforms:
     NVIDIA CUDA
         dGPU: GeForce GTX 970 (OpenCL 1.1 CUDA)
 Current OpenCL device:
     Type = dGPU
     Name = GeForce GTX 970
     Version = OpenCL 1.1 CUDA
     Compute units = 13
     Max work group size = 1024
     Local memory size = 47 kB 1023 B
     Max memory allocation size = 1 GB
     Double support = Yes
     Host unified memory = No
     Has AMD Blas = No
     Has AMD Fft = No
     Preferred vector width char = 1
     Preferred vector width short = 1
     Preferred vector width int = 1
     Preferred vector width long = 1
     Preferred vector width float = 1
     Preferred vector width double = 1
 Note: Google Test filter = *Calib3d_DecomposeHomography*
 [==========] Running 1 test from 1 test case.
 [----------] Global test environment set-up.
 [----------] 1 test from Calib3d_DecomposeHomography
 [ RUN      ] Calib3d_DecomposeHomography.regression
 [       OK ] Calib3d_DecomposeHomography.regression (0 ms)
 [----------] 1 test from Calib3d_DecomposeHomography (0 ms total)
 
 [----------] Global test environment tear-down
 [==========] 1 test from 1 test case ran. (0 ms total)
 [  PASSED  ] 1 test.
 
 ++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++
 Test with new data (in uploaded file):
 
 ***** VIDEOINPUT LIBRARY - 0.1995 - TFW07 *****
 
 OpenCV version: 3.0.0-dev
 OpenCV VCS version: unknown
 Build type: debug
 Parallel framework: ms-concurrency
 CPU features: popcnt mmx sse sse2 sse3 ssse3 sse4.1 sse4.2
 OpenCL Platforms:
     NVIDIA CUDA
         dGPU: GeForce GTX 970 (OpenCL 1.1 CUDA)
 Current OpenCL device:
     Type = dGPU
     Name = GeForce GTX 970
     Version = OpenCL 1.1 CUDA
     Compute units = 13
     Max work group size = 1024
     Local memory size = 47 kB 1023 B
     Max memory allocation size = 1 GB
     Double support = Yes
     Host unified memory = No
     Has AMD Blas = No
     Has AMD Fft = No
     Preferred vector width char = 1
     Preferred vector width short = 1
     Preferred vector width int = 1
     Preferred vector width long = 1
     Preferred vector width float = 1
     Preferred vector width double = 1
 Note: Google Test filter = *Calib3d_DecomposeHomography*
 [==========] Running 1 test from 1 test case.
 [----------] Global test environment set-up.
 [----------] 1 test from Calib3d_DecomposeHomography
 [ RUN      ] Calib3d_DecomposeHomography.regression
 ..\..\..\modules\calib3d\test\test_homography_decomp.cpp(78): error: Value of: containsValidMotion(rotations, translations, normals)
   Actual: false
 Expected: true
 [  FAILED  ] Calib3d_DecomposeHomography.regression (0 ms)
 [----------] 1 test from Calib3d_DecomposeHomography (1 ms total)
 
 [----------] Global test environment tear-down
 [==========] 1 test from 1 test case ran. (2 ms total)
 [  PASSED  ] 0 tests.
 [  FAILED  ] 1 test, listed below:
 [  FAILED  ] Calib3d_DecomposeHomography.regression
 &lt;/denchmark-code&gt;
 
 &lt;denchmark-h:h2&gt;History&lt;/denchmark-h&gt;
 
 &lt;denchmark-h:h5&gt;Philippe Bouttefroy on 2015-05-02 01:31&lt;/denchmark-h&gt;
 
 &lt;denchmark-code&gt;The data that I provided is actually not consistent - I provided a homography with the translation denormalized but provided a normalized translation. The data below is consistent now:
 
         _K = Matx33d(1.0,   0.0,    0.0,
                      0.0,   1.0,    0.0,
                      0.0,   0.0,    1.0);
 
         _H = Matx33d(-0.102896, 0.270191,   -0.0031153,
                      0.0406387, 1.19569,    -0.0120456,
                      0.445351,  0.0410889,  1);
 
         //expected solution for the given homography and intrinsic matrices
         _R = Matx33d(0.692477,      0.657668,   -0.29656,
                      -0.615501,     0.753003,   0.232688,
                      0.376343,      0.0214022,  0.926233);
 
         _t = Vec3d(0.934629,
                    -0.775506,
                    -0.0368358);
         _n = Vec3d(-0.841608,
                    -0.43925,
                    0.314254);
 
         Matx33d h = _R + (_t * _n.t());
         double norm = h(2, 2);
         h = (1 / norm)*h;
         std::cout &lt;&lt; h &lt;&lt; std::endl;
 &lt;/denchmark-code&gt;
 
 	</description>
 	<comments>
 		<comment id='1' author='opencv-pushbot' date='2017-03-07T21:38:33Z'>
 		What's the status here? Does OpenCV have a reliable homography decomposition?
 		</comment>
 		<comment id='2' author='opencv-pushbot' date='2018-04-20T23:59:17Z'>
 		There is an bug in decomposeHomographyMat. For many homographies it returns rotations with negative determinants. In this case the rotation and corresponding translation should be negated. Then the results are correct.
 For example, this happens with:
 &lt;denchmark-code&gt;cv::Mat H = cv::Matx33d(-0.3507, 0.0219, 0.0049,
                          -0.0217, -0.3488, -0.0042,
                          0.0187, 0.0052, -0.3515);
 &lt;/denchmark-code&gt;
 
 		</comment>
 	</comments>
 </bug>
<commit id='78bd55c8df9bef7b87c4cdce029b805f58345fd5' author='Jim Zhou' date='2019-01-11 16:58:47+03:00'>
 	<dmm_unit complexity='1.0' interfacing='0.75' size='0.0'></dmm_unit>
 	<modification change_type='MODIFY' old_name='modules\calib3d\src\homography_decomp.cpp' new_name='modules\calib3d\src\homography_decomp.cpp'>
 		<file_info nloc='376' complexity='70' token_count='3488'></file_info>
 		<method name='cv::HomographyDecomposition::HomographyDecompZhang::findMotionFrom_tstar_n' parameters='tstar,n,motion'>
 				<method_info nloc='17' complexity='2' token_count='143' nesting_level='2' start_line='179' end_line='195'></method_info>
 			<added_lines>188,189,190,191</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<method name='cv::HomographyDecomposition::HomographyDecompInria::findRmatFrom_tstar_n' parameters='tstar,n,v,R'>
 				<method_info nloc='13' complexity='2' token_count='129' nesting_level='2' start_line='310' end_line='323'></method_info>
 			<added_lines>319,320,321,322</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines></added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 	<modification change_type='MODIFY' old_name='modules\calib3d\test\test_homography_decomp.cpp' new_name='modules\calib3d\test\test_homography_decomp.cpp'>
 		<file_info nloc='91' complexity='13' token_count='794'></file_info>
 		<method name='opencv_test::TEST' parameters='Calib3d_DecomposeHomography,issue_4978'>
 				<method_info nloc='24' complexity='2' token_count='229' nesting_level='2' start_line='138' end_line='166'></method_info>
 			<added_lines>138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines>137,167,168</added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 </commit>
</bug_data>
