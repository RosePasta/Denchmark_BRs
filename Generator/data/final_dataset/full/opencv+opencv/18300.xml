<bug_data>
<bug id='18300' author='sl-sergei' open_date='2020-09-09T08:09:01Z' closed_time='2020-09-17T13:29:21Z'>
 	<summary>Problem with loading ONNX networks with Resize layer</summary>
 	<description>
 &lt;denchmark-h:h5&gt;System information (version)&lt;/denchmark-h&gt;
 
 
 OpenCV =&gt; 4.4.0-dev or 3.4.11-pre
 Operating System / Platform =&gt; Ubuntu 18.04
 Compiler =&gt; gcc 7.5.0
 
 &lt;denchmark-h:h5&gt;Detailed description&lt;/denchmark-h&gt;
 
 OpenCV has the following problem with loading networks with Resize layer:
 cv2.error: OpenCV(3.4.11-pre) /home/ssl/Documents/projects/OpenCV/opencv/modules/dnn/src/onnx/onnx_importer.cpp:1424: error: (-2:Unspecified error) in function 'void cv::dnn::experimental_dnn_34_v18::ONNXImporter::populateNet(cv::dnn::experimental_dnn_34_v18::Net)'
 
 (expected: 'shapes.depth() == CV_32S'), where
 'shapes.depth()' is 5 (CV_32FC1)
 must be equal to
 'CV_32S' is 4 (CV_32SC1)
 
 It prevents OpenCV from loading various networks from Segmentation Models Pytorch (&lt;denchmark-link:https://github.com/qubvel/segmentation_models.pytorch&gt;https://github.com/qubvel/segmentation_models.pytorch&lt;/denchmark-link&gt;
 ) or Human Segmentation Pytorch (&lt;denchmark-link:https://github.com/thuyngch/Human-Segmentation-PyTorch&gt;https://github.com/thuyngch/Human-Segmentation-PyTorch&lt;/denchmark-link&gt;
 )
 &lt;denchmark-h:h5&gt;Steps to reproduce&lt;/denchmark-h&gt;
 
 reproducer_resize.py
 &lt;denchmark-code&gt;import cv2
 import torch
 import torch.nn as nn
 import torch.nn.functional as F
 
 
 class Conv2dReLU(nn.Sequential):
     def __init__(
             self,
             in_channels,
             out_channels,
             kernel_size,
             padding=0,
             stride=1,
             use_batchnorm=True,
     ):
 
         conv = nn.Conv2d(
             in_channels,
             out_channels,
             kernel_size,
             stride=stride,
             padding=padding,
             bias=not (use_batchnorm),
         )
         relu = nn.ReLU(inplace=True)
 
         if use_batchnorm and use_batchnorm != "inplace":
             bn = nn.BatchNorm2d(out_channels)
 
         else:
             bn = nn.Identity()
 
         super(Conv2dReLU, self).__init__(conv, bn, relu)
 
 class Attention(nn.Module):
 
     def __init__(self, name, **params):
         super().__init__()
 
         if name is None:
             self.attention = nn.Identity(**params)
         else:
             raise ValueError("Attention {} is not implemented".format(name))
 
     def forward(self, x):
         return self.attention(x)
 
 class DecoderBlock(nn.Module):
     def __init__(
             self,
             in_channels,
             skip_channels,
             out_channels,
             use_batchnorm=True,
             attention_type=None,
     ):
         super().__init__()
         self.conv1 = Conv2dReLU(
             in_channels + skip_channels,
             out_channels,
             kernel_size=3,
             padding=1,
             use_batchnorm=use_batchnorm,
         )
         self.conv2 = Conv2dReLU(
             out_channels,
             out_channels,
             kernel_size=3,
             padding=1,
             use_batchnorm=use_batchnorm,
         )
 
     def forward(self, x, skip=None):
         x = F.interpolate(x, scale_factor=2, mode="nearest")
         if skip is not None:
             x = torch.cat([x, skip], dim=1)
         x = self.conv1(x)
         x = self.conv2(x)
         return x
 
 model = DecoderBlock(2, 0, 2)
 x = torch.rand(1, 2, 10, 10)
 model.eval()
 print(cv2.__version__)
 torch.onnx.export(model, x, "resize.onnx", opset_version=11)
 opencv_net = cv2.dnn.readNetFromONNX("resize.onnx")
 &lt;/denchmark-code&gt;
 
 &lt;denchmark-h:h5&gt;Issue submission checklist&lt;/denchmark-h&gt;
 
 
  I report the issue, it's not a question
 
 
  I checked the problem with documentation, FAQ, open issues,
 answers.opencv.org, Stack Overflow, etc and have not found solution
 
 
  I updated to latest OpenCV version and the issue is still there
 
 
  There is reproducer code and related data files: videos, images, onnx, etc
 
 
 
 	</description>
 	<comments>
 	</comments>
 </bug>
<commit id='fa953e4205327224a1124be10b90d497d7cfa32f' author='Sergei Slashchinin' date='2020-09-17 11:05:22+00:00'>
 	<dmm_unit complexity='0.6666666666666666' interfacing='1.0' size='0.6666666666666666'></dmm_unit>
 	<modification change_type='MODIFY' old_name='modules\dnn\src\onnx\onnx_importer.cpp' new_name='modules\dnn\src\onnx\onnx_importer.cpp'>
 		<file_info nloc='1516' complexity='302' token_count='13224'></file_info>
 		<method name='cv::dnn::ONNXImporter::populateNet' parameters='dstNet'>
 				<method_info nloc='1231' complexity='242' token_count='10932' nesting_level='2' start_line='312' end_line='1689'></method_info>
 			<added_lines>1591,1592,1593</added_lines>
 			<deleted_lines>1591</deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines></added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 	<modification change_type='MODIFY' old_name='modules\dnn\test\test_onnx_importer.cpp' new_name='modules\dnn\test\test_onnx_importer.cpp'>
 		<file_info nloc='782' complexity='283' token_count='4954'></file_info>
 		<method name='opencv_test::TEST_P' parameters='Test_ONNX_layers,ResizeOpset11_Torch1_6'>
 				<method_info nloc='4' complexity='1' token_count='13' nesting_level='2' start_line='639' end_line='642'></method_info>
 			<added_lines>639,640,641,642</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines>643</added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 </commit>
</bug_data>
