<bug_data>
<bug id='17553' author='EhsanKia' open_date='2020-06-15T06:17:48Z' closed_time='2020-12-11T19:09:36Z'>
 	<summary>knnSearch in Flann Index segfaults if used after leaving the local scope</summary>
 	<description>
 
 OpenCV =&gt; 4.2.0.34
 Operating System / Platform =&gt; Windows 32 Bit, Debian 64 bit
 Compiler =&gt; precompiled manylinux/windows binaries, as well as manually compiled with g++
 
 &lt;denchmark-h:h5&gt;Detailed description&lt;/denchmark-h&gt;
 
 knnSearch on FLANN Index causes a segfault (windows and debian, 32bit and 64bit, precompiled and manually compiled) when using algorithm 0, 1, 2, 3 and 5 (not with algorithm 4), if you create the index in a function and return it, then use knnSearch in another method.
 It seems to be a memory issue. With &lt; around 20s images (~1000 features), it never segfaults, but as the number of images go up, the probability of segfault does too, and eventually at around 40 images/2000 features, it gets to 100%.
 My uneducated guess is that some things are getting freed after we leave the function scope which shouldn't, and the more stuff you have loaded, the higher the probability of a GC run which wipes one of those variables that are needed.
 &lt;denchmark-h:h5&gt;Steps to reproduce&lt;/denchmark-h&gt;
 
 import cv2
 import glob
 import numpy
 
 def create_index(feature):
     descriptors = []
     for filename in glob.glob('*.png')[:30]:  # Adjust this 30
         img = cv2.imread(filename)
         _, des = feature.detectAndCompute(img, None)
         descriptors.append(des)
 
     index_params = dict(algorithm=1)
     descriptor_array = numpy.concatenate(descriptors)
     print(descriptor_array.shape)
     flann = cv2.flann_Index(descriptor_array, index_params)
     return flann
 
 feature = cv2.xfeatures2d.SURF_create()  # Same for SIFT and ORB
 index = create_index(feature)
 query_img = cv2.imread('barrel.png')
 _, query_des = feature.detectAndCompute(query_img, None)
 idx, _ = index.knnSearch(query_des, 1)  # &lt;-- segfault
 print('this line is never reached')
 The images are these, but I believe any would do:
 &lt;denchmark-link:https://github.com/EhsanKia/CatalogScanner/tree/master/diys/generated&gt;https://github.com/EhsanKia/CatalogScanner/tree/master/diys/generated&lt;/denchmark-link&gt;
 
 &lt;denchmark-h:h5&gt;Issue submission checklist&lt;/denchmark-h&gt;
 
 
 [ X ] I report the issue, it's not a question
 [ X ] I checked the problem with documentation, FAQ, open issues,
 answers.opencv.org, Stack Overflow, etc and have not found solution
 [ X ] I updated to latest OpenCV version and the issue is still there
 [ X ] There is reproducer code and related data files: videos, images, onnx, etc
 
 	</description>
 	<comments>
 		<comment id='1' author='EhsanKia' date='2020-06-15T06:53:34Z'>
 		similar behaviour in c++, the problem might be here:
 
 
 
 opencv/modules/flann/src/miniflann.cpp
 
 
          Line 319
       in
       c244b45
 
 
 
 
 
 
  ::cvflann::Matrix&lt;ElementType&gt; dataset((ElementType*)data.data, data.rows, data.cols); 
 
 
 
 
 
 (it tries to "run away" with the descriptor Mat's data pointer)
 		</comment>
 		<comment id='2' author='EhsanKia' date='2020-12-08T05:09:02Z'>
 		Fix for 4.x branch is here: &lt;denchmark-link:https://github.com/opencv/opencv/pull/19045&gt;#19045&lt;/denchmark-link&gt;
 
 Please take a look.
 		</comment>
 	</comments>
 </bug>
<commit id='a04479746a944aa3a6de5029658423c82462e15a' author='Alexander Alekhin' date='2020-12-11 19:09:35+00:00'>
 	<dmm_unit complexity='0.875' interfacing='0.875' size='0.875'></dmm_unit>
 	<modification change_type='MODIFY' old_name='modules\features2d\test\test_nearestneighbors.cpp' new_name='modules\features2d\test\test_nearestneighbors.cpp'>
 		<file_info nloc='221' complexity='52' token_count='1828'></file_info>
 		<method name='opencv_test::NearestNeighborTest::run' parameters='int'>
 				<method_info nloc='27' complexity='5' token_count='194' nesting_level='2' start_line='121' end_line='153'></method_info>
 			<added_lines>126</added_lines>
 			<deleted_lines>126</deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines></added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 	<modification change_type='MODIFY' old_name='modules\flann\include\opencv2\flann\miniflann.hpp' new_name='modules\flann\include\opencv2\flann\miniflann.hpp'>
 		<file_info nloc='108' complexity='0' token_count='718'></file_info>
 		<modified_lines>
 			<added_lines>172,173,178</added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 	<modification change_type='MODIFY' old_name='modules\flann\src\miniflann.cpp' new_name='modules\flann\src\miniflann.cpp'>
 		<file_info nloc='722' complexity='176' token_count='5218'></file_info>
 		<method name='cv::flann::Index::load' parameters='_data,filename'>
 				<method_info nloc='7' complexity='1' token_count='41' nesting_level='2' start_line='792' end_line='801'></method_info>
 			<added_lines>795,796,797,798,799,800,801</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<method name='cv::flann::Index::load_' parameters='filename'>
 				<method_info nloc='72' complexity='29' token_count='529' nesting_level='2' start_line='803' end_line='883'></method_info>
 			<added_lines>803,804,805,806,807</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<method name='cv::flann::Index::build' parameters='_data,params,_distType'>
 				<method_info nloc='52' complexity='13' token_count='323' nesting_level='2' start_line='388' end_line='448'></method_info>
 			<added_lines>393,394,395,396,397,401</added_lines>
 			<deleted_lines>396,400</deleted_lines>
 		</method>
 		<method name='cv::flann::Index::release' parameters=''>
 				<method_info nloc='40' complexity='12' token_count='204' nesting_level='2' start_line='465' end_line='509'></method_info>
 			<added_lines>469,470</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines>802</added_lines>
 			<deleted_lines>788,789</deleted_lines>
 		</modified_lines>
 	</modification>
 </commit>
</bug_data>
