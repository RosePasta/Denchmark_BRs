<bug_data>
<bug id='9863' author='homm' open_date='2017-10-16T16:47:51Z' closed_time='2019-11-18T12:06:51Z'>
 	<summary>cv2.GaussianBlur produces darker results than input</summary>
 	<description>
 &lt;denchmark-h:h5&gt;System information (version)&lt;/denchmark-h&gt;
 
 
 OpenCV =&gt; 3.3.0 master
 Operating System / Platform =&gt; Ubuntu 16.04 / x86_64
 Compiler =&gt; gcc 5.4
 
 &lt;denchmark-h:h5&gt;Detailed description&lt;/denchmark-h&gt;
 
 GaussianBlur produces darker results than the input image.
 Original Image:
 &lt;denchmark-link:https://user-images.githubusercontent.com/128982/31622948-8c81076c-b2a6-11e7-8b21-dc1803e39556.png&gt;&lt;/denchmark-link&gt;
 
 &gt;&gt;&gt; cv2.imwrite('gaus.30.cv2.png', cv2.GaussianBlur(im, (151, 151), 30))
 &lt;denchmark-link:https://user-images.githubusercontent.com/128982/31623282-9ddb3180-b2a7-11e7-96bc-be7b07ec4fc0.png&gt;&lt;/denchmark-link&gt;
 
 &lt;denchmark-code&gt;$ gm convert gaus.0.png -blur 75x30 gaus.30.gm.png
 &lt;/denchmark-code&gt;
 
 &lt;denchmark-link:https://user-images.githubusercontent.com/128982/31623794-452271be-b2a9-11e7-8d31-848d37be08cc.png&gt;&lt;/denchmark-link&gt;
 
 Images should look the same, but this is obvious, that produced by OpenCV is much darker.
 &lt;denchmark-h:h3&gt;Proof that results produced by OpenCV is wrong&lt;/denchmark-h&gt;
 
 In theory, Gaussian blur shouldn't change color distribution or lightness. So, lets calculate lightness of the images:
 # Using Pillow
 from PIL import Image 
 
 def lightness(im):
     hist = im.histogram()
     return [
         sum(i*v for i, v in enumerate(hist[:256])) / im.width / im.height,
         sum(i*v for i, v in enumerate(hist[256:512])) / im.width / im.height,
         sum(i*v for i, v in enumerate(hist[512:])) / im.width / im.height
     ]
 
 # [59.76, 69.08, 40.2]
 print(lighnes(Image.open('gaus.0.png')))
 
 # [59.73, 69.18, 39.94]
 print(lighnes(Image.open('gaus.30.gm.png')))
 
 # [53.86, 62.26, 36.22]
 print(lighnes(Image.open('gaus.30.cv2.png')))
 	</description>
 	<comments>
 		<comment id='1' author='homm' date='2017-10-16T20:14:54Z'>
 		Looks like the discrepancy is only for CV_8U type?
 &lt;denchmark-code&gt;diff ImageMagick / GaussianBlur CV_8U
 diff_b= 3.72009277344
 diff_g= 6.92227783203
 diff_r= 5.87456054688
 
 diff ImageMagick / GaussianBlur CV_32F
 diff_b= -0.263266247775
 diff_g= 0.0798971206896
 diff_r= -0.0453944416418
 
 diff ImageMagick / sepFilter2D CV_8U
 diff_b= 3.72009277344
 diff_g= 6.92227783203
 diff_r= 5.87456054688
 
 diff ImageMagick / sepFilter2D CV_32F
 diff_b= -0.263266247775
 diff_g= 0.0798971206896
 diff_r= -0.0453944416418
 
 &lt;/denchmark-code&gt;
 
 More tests with different Gaussian kernel sizes:
 
 ksize=11, sigma=30:
 
 &lt;denchmark-code&gt;diff ImageMagick / GaussianBlur CV_8U
 diff_b= 0.469177246094
 diff_g= 1.1412109375
 diff_r= 0.923785400391
 
 diff ImageMagick / GaussianBlur CV_32F
 diff_b= -0.467183839615
 diff_g= -0.469239479038
 diff_r= -0.469786457056
 &lt;/denchmark-code&gt;
 
 
 ksize=41, sigma=30:
 
 &lt;denchmark-code&gt;diff ImageMagick / GaussianBlur CV_8U
 diff_b= -1.40687255859
 diff_g= -2.06359863281
 diff_r= -1.86463623047
 
 diff ImageMagick / GaussianBlur CV_32F
 diff_b= -0.460932953184
 diff_g= -0.435742572248
 diff_r= -0.456756945207
 &lt;/denchmark-code&gt;
 
 
 ksize=121, sigma=30:
 
 &lt;denchmark-code&gt;diff ImageMagick / GaussianBlur CV_8U
 diff_b= -1.57329711914
 diff_g= -2.19058837891
 diff_r= -2.00388183594
 
 diff ImageMagick / GaussianBlur CV_32F
 diff_b= -0.305351354854
 diff_g= -0.0147031555618
 diff_r= -0.121201964526
 &lt;/denchmark-code&gt;
 
 
 ksize=151, sigma=30:
 
 &lt;denchmark-code&gt;diff ImageMagick / GaussianBlur CV_8U
 diff_b= 3.72009277344
 diff_g= 6.92227783203
 diff_r= 5.87456054688
 
 diff ImageMagick / GaussianBlur CV_32F
 diff_b= -0.263266247775
 diff_g= 0.0798971206896
 diff_r= -0.0453944416418
 &lt;/denchmark-code&gt;
 
 Full code:
 &lt;denchmark-code&gt;import cv2 as cv
 import numpy as np
 
 im = cv.imread('snake.png')
 im_blur_gm = cv.imread('gaus.30.gm.png')
 
 im_blur_cv_8u = cv.GaussianBlur(im, (151, 151), 30)
 
 diff_b = im_blur_gm[:,:,0].astype(float) - im_blur_cv_8u[:,:,0].astype(float)
 diff_g = im_blur_gm[:,:,1].astype(float) - im_blur_cv_8u[:,:,1].astype(float)
 diff_r = im_blur_gm[:,:,2].astype(float) - im_blur_cv_8u[:,:,2].astype(float)
 
 print "diff ImageMagick / GaussianBlur CV_8U"
 print "diff_b=", np.mean(diff_b)
 print "diff_g=", np.mean(diff_g)
 print "diff_r=", np.mean(diff_r)
 
 np.savetxt('diff_b.txt', diff_b)
 np.savetxt('diff_g.txt', diff_g)
 np.savetxt('diff_r.txt', diff_r)
 
 im_float = np.zeros(im.shape, dtype=np.float32)
 
 for i in xrange(im.shape[0]):
   for j in xrange(im.shape[1]):
     im_float[i,j,0] = im[i,j,0]
     im_float[i,j,1] = im[i,j,1]
     im_float[i,j,2] = im[i,j,2]
 
 im_blur_cv_float = cv.GaussianBlur(im_float, (151, 151), 30)
 
 diff_b = im_blur_gm[:,:,0].astype(float) - im_blur_cv_float[:,:,0]
 diff_g = im_blur_gm[:,:,1].astype(float) - im_blur_cv_float[:,:,1]
 diff_r = im_blur_gm[:,:,2].astype(float) - im_blur_cv_float[:,:,2]
 
 print "\ndiff ImageMagick / GaussianBlur CV_32F"
 print "diff_b=", np.mean(diff_b)
 print "diff_g=", np.mean(diff_g)
 print "diff_r=", np.mean(diff_r)
 
 np.savetxt('diff_b_float.txt', diff_b)
 np.savetxt('diff_g_float.txt', diff_g)
 np.savetxt('diff_r_float.txt', diff_r)
 
 kernel = cv.getGaussianKernel(151, 30, cv.CV_32F)
 
 im_sep_cv_8u = cv.sepFilter2D(im, cv.CV_8U, kernel, kernel)
 
 diff_b = im_blur_gm[:,:,0].astype(float) - im_sep_cv_8u[:,:,0].astype(float)
 diff_g = im_blur_gm[:,:,1].astype(float) - im_sep_cv_8u[:,:,1].astype(float)
 diff_r = im_blur_gm[:,:,2].astype(float) - im_sep_cv_8u[:,:,2].astype(float)
 
 print "\ndiff ImageMagick / sepFilter2D CV_8U"
 print "diff_b=", np.mean(diff_b)
 print "diff_g=", np.mean(diff_g)
 print "diff_r=", np.mean(diff_r)
 
 im_sep_cv_float = cv.sepFilter2D(im, cv.CV_32F, kernel, kernel)
 
 diff_b = im_blur_gm[:,:,0].astype(float) - im_sep_cv_float[:,:,0]
 diff_g = im_blur_gm[:,:,1].astype(float) - im_sep_cv_float[:,:,1]
 diff_r = im_blur_gm[:,:,2].astype(float) - im_sep_cv_float[:,:,2]
 
 print "\ndiff ImageMagick / sepFilter2D CV_32F"
 print "diff_b=", np.mean(diff_b)
 print "diff_g=", np.mean(diff_g)
 print "diff_r=", np.mean(diff_r)
 &lt;/denchmark-code&gt;
 
 		</comment>
 		<comment id='2' author='homm' date='2019-01-24T16:57:34Z'>
 		I had the same issue.
 For anyone wondering, you can use getGaussianKernel and sepFilter2D to avoid the issue.
 		</comment>
 		<comment id='3' author='homm' date='2019-05-04T22:57:28Z'>
 		
 you can use getGaussianKernel and sepFilter2D to avoid the issue.
 
 What issue to avoid?
 Results from experiments above shows the same numbers:
 &lt;denchmark-code&gt;diff ImageMagick / GaussianBlur CV_8U
 diff_b= 3.72009277344
 diff_g= 6.92227783203
 diff_r= 5.87456054688
 
 diff ImageMagick / sepFilter2D CV_8U
 diff_b= 3.72009277344
 diff_g= 6.92227783203
 diff_r= 5.87456054688
 &lt;/denchmark-code&gt;
 
 Difference is observed between 8U / 32F cases.
 &lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;
 
 Proper way for making of these experiments is to drop pixels affected by borders at least (probably they are handled in a different ways).
 		</comment>
 		<comment id='4' author='homm' date='2019-05-06T18:43:42Z'>
 		I am using OpenCV 3.4.
 On a big image:
 &lt;denchmark-code&gt;im: (3648, 4864, 3)
 im_blur_gm: (3648, 4864, 3)
 diff ImageMagick / GaussianBlur CV_8U
 diff_b= 11.6140492281
 diff_g= 12.2392454725
 diff_r= 12.1626385103
 
 diff ImageMagick / GaussianBlur CV_32F
 diff_b= -0.498279786766
 diff_g= -0.498219731421
 diff_r= -0.498563998672
 
 diff ImageMagick / sepFilter2D CV_8U
 diff_b= 11.6140573585
 diff_g= 12.2392529355
 diff_r= 12.1626454272
 
 diff ImageMagick / sepFilter2D CV_32F
 diff_b= -0.498279760832
 diff_g= -0.498219566537
 diff_r= -0.498563828562
 &lt;/denchmark-code&gt;
 
 Setting explicitly sigmaX=30, sigmaY=30:
 &lt;denchmark-code&gt;im: (3648, 4864, 3)
 im_blur_gm: (3648, 4864, 3)
 diff ImageMagick / GaussianBlur CV_8U
 diff_b= -0.498629633803
 diff_g= -0.498437173969
 diff_r= -0.498979240853
 
 diff ImageMagick / GaussianBlur CV_32F
 diff_b= -0.498289962178
 diff_g= -0.498230124242
 diff_r= -0.498574525185
 
 diff ImageMagick / sepFilter2D CV_8U
 diff_b= 11.6140573585
 diff_g= 12.2392529355
 diff_r= 12.1626454272
 
 diff ImageMagick / sepFilter2D CV_32F
 diff_b= -0.498279760832
 diff_g= -0.498219566537
 diff_r= -0.498563828562
 &lt;/denchmark-code&gt;
 
 On a small image (snake) (old code):
 &lt;denchmark-code&gt;im: (320, 512, 3)
 im_blur_gm: (320, 512, 3)
 diff ImageMagick / GaussianBlur CV_8U
 diff_b= 4.4182333754
 diff_g= 8.35163664377
 diff_r= 7.0989853956
 
 diff ImageMagick / GaussianBlur CV_32F
 diff_b= -0.496995073647
 diff_g= -0.4971752022
 diff_r= -0.498224385727
 
 diff ImageMagick / sepFilter2D CV_8U
 diff_b= 4.4182333754
 diff_g= 8.35163664377
 diff_r= 7.09900178662
 
 diff ImageMagick / sepFilter2D CV_32F
 diff_b= -0.496995206189
 diff_g= -0.497175293301
 diff_r= -0.498224482238
 &lt;/denchmark-code&gt;
 
 On a small image (snake) (new code):
 &lt;denchmark-code&gt;im: (320, 512, 3)
 im_blur_gm: (320, 512, 3)
 diff ImageMagick / GaussianBlur CV_8U
 diff_b= -0.49654968939
 diff_g= -0.496648035536
 diff_r= -0.497320067531
 
 diff ImageMagick / GaussianBlur CV_32F
 diff_b= -0.497001285997
 diff_g= -0.497185361616
 diff_r= -0.49823264558
 
 diff ImageMagick / sepFilter2D CV_8U
 diff_b= 4.4182333754
 diff_g= 8.35163664377
 diff_r= 7.09900178662
 
 diff ImageMagick / sepFilter2D CV_32F
 diff_b= -0.496995206189
 diff_g= -0.497175293301
 diff_r= -0.498224482238
 &lt;/denchmark-code&gt;
 
 Code:
 
 from __future__ import print_function
 import numpy as np
 import cv2 as cv
 import argparse
 
 parser = argparse.ArgumentParser()
 parser.add_argument('--image', type=str, help='path to original image file')
 parser.add_argument('--blur', type=str, help='path to ImageMagick blurred image file')
 args = parser.parse_args()
 
 im = cv.imread(args.image)
 im_blur_gm = cv.imread(args.blur)
 
 print("im:", im.shape)
 print("im_blur_gm:", im_blur_gm.shape)
 
 im_blur_cv_8u = cv.GaussianBlur(im, (151, 151), sigmaX=30, sigmaY=30)
 
 cv.imwrite("cv_blur.png", im_blur_cv_8u)
 
 diff_b = im_blur_gm[:,:,0].astype(float) - im_blur_cv_8u[:,:,0].astype(float)
 diff_g = im_blur_gm[:,:,1].astype(float) - im_blur_cv_8u[:,:,1].astype(float)
 diff_r = im_blur_gm[:,:,2].astype(float) - im_blur_cv_8u[:,:,2].astype(float)
 
 diff_b = diff_b[75:-76,75:-76]
 diff_g = diff_g[75:-76,75:-76]
 diff_r = diff_r[75:-76,75:-76]
 
 print("diff ImageMagick / GaussianBlur CV_8U")
 print("diff_b=", np.mean(diff_b))
 print("diff_g=", np.mean(diff_g))
 print("diff_r=", np.mean(diff_r))
 
 np.savetxt('diff_b.txt', diff_b)
 np.savetxt('diff_g.txt', diff_g)
 np.savetxt('diff_r.txt', diff_r)
 
 im_float = im.astype(np.float32)
 im_blur_cv_float = cv.GaussianBlur(im_float, (151, 151), sigmaX=30, sigmaY=30)
 
 diff_b = im_blur_gm[:,:,0].astype(float) - im_blur_cv_float[:,:,0]
 diff_g = im_blur_gm[:,:,1].astype(float) - im_blur_cv_float[:,:,1]
 diff_r = im_blur_gm[:,:,2].astype(float) - im_blur_cv_float[:,:,2]
 
 diff_b = diff_b[75:-76,75:-76]
 diff_g = diff_g[75:-76,75:-76]
 diff_r = diff_r[75:-76,75:-76]
 
 print("\ndiff ImageMagick / GaussianBlur CV_32F")
 print("diff_b=", np.mean(diff_b))
 print("diff_g=", np.mean(diff_g))
 print("diff_r=", np.mean(diff_r))
 
 np.savetxt('diff_b_float.txt', diff_b)
 np.savetxt('diff_g_float.txt', diff_g)
 np.savetxt('diff_r_float.txt', diff_r)
 
 kernel = cv.getGaussianKernel(151, 30, cv.CV_32F)
 
 im_sep_cv_8u = cv.sepFilter2D(im, cv.CV_8U, kernel, kernel)
 
 diff_b = im_blur_gm[:,:,0].astype(float) - im_sep_cv_8u[:,:,0].astype(float)
 diff_g = im_blur_gm[:,:,1].astype(float) - im_sep_cv_8u[:,:,1].astype(float)
 diff_r = im_blur_gm[:,:,2].astype(float) - im_sep_cv_8u[:,:,2].astype(float)
 
 diff_b = diff_b[75:-76,75:-76]
 diff_g = diff_g[75:-76,75:-76]
 diff_r = diff_r[75:-76,75:-76]
 
 print("\ndiff ImageMagick / sepFilter2D CV_8U")
 print("diff_b=", np.mean(diff_b))
 print("diff_g=", np.mean(diff_g))
 print("diff_r=", np.mean(diff_r))
 
 im_sep_cv_float = cv.sepFilter2D(im, cv.CV_32F, kernel, kernel)
 
 diff_b = im_blur_gm[:,:,0].astype(float) - im_sep_cv_float[:,:,0]
 diff_g = im_blur_gm[:,:,1].astype(float) - im_sep_cv_float[:,:,1]
 diff_r = im_blur_gm[:,:,2].astype(float) - im_sep_cv_float[:,:,2]
 
 diff_b = diff_b[75:-76,75:-76]
 diff_g = diff_g[75:-76,75:-76]
 diff_r = diff_r[75:-76,75:-76]
 
 print("\ndiff ImageMagick / sepFilter2D CV_32F")
 print("diff_b=", np.mean(diff_b))
 print("diff_g=", np.mean(diff_g))
 print("diff_r=", np.mean(diff_r))
 
 
 When sigma1==sigma2, it should use IPP, otherwise ocvSepFilter.
 The &lt;denchmark-link:https://docs.opencv.org/3.4/d4/d86/group__imgproc__filter.html#gaabe8c836e97159a9193fb0b11ac52cf1&gt;documentation&lt;/denchmark-link&gt;
  says:
 sigmaY Gaussian  kernel standard deviation in Y direction; if sigmaY is zero, it is set  to be equal to sigmaX, if both sigmas are zeros, they are computed from  ksize.width and ksize.height, respectively (see getGaussianKernel  for details); to fully control the result regardless of possible future  modifications of all this semantics, it is recommended to specify all  of ksize, sigmaX, and sigmaY. 
 I don't think sigmaY==sigmaX when sigmaY=0 is valid anymore.
 		</comment>
 		<comment id='5' author='homm' date='2019-07-13T07:58:54Z'>
 		I had the same issue.
 I guess that opencv makes an inaccurate approximation for int type data.
 When data type is double, the issue no longer appear.
 Python code:
 &lt;denchmark-code&gt;img64f = (image/1.0)    
 g = cv2.getGaussianKernel(rad, rad)    
 img = (cv2.sepFilter2D(img64f, cv2.CV_64FC4, g, g) ).astype(np.uint8)  
 &lt;/denchmark-code&gt;
 
 		</comment>
 		<comment id='6' author='homm' date='2019-10-23T17:01:04Z'>
 		Problem has been introduced in bit-exact computation path.
 Computation using floating-point numbers (32F/64F) looks well.
 Main inaccurate calculations are performed during kernels conversion:
 
 GaussianBlur =&gt; ufixedpoint16 (8-bit fraction part)
 sepFilter2D =&gt; 8-bit fraction part (32-bit total)
 
 For example, bit-exact GaussianBlur kernels may break their main property of sum(k) == 1.0.
 There are several options for handling that:
 
 don't call bit-exact code if bit-exact kernel is not a good approximation
 
 "good approximation" should be well defined
 
 
 try to adjust approximated kernel with saving sum(k) == 1.0 property.
 
 This looks like crazy process (and it is hard to define that), but there is already special cases for sigma=0 and ksize=3,5,7 (these kernels are not accurate approximations from original formula)
 Adjusting of approximated kernels in case of sepFilter2D() doesn't look good anyway (it is GaussianBlur approach only)
 
 
 
 		</comment>
 	</comments>
 </bug>
<commit id='f4d55d512fe43a31a39f5e40629fa75d66879036' author='Alexander Alekhin' date='2019-11-18 01:39:27+03:00'>
 	<dmm_unit complexity='0.7058823529411765' interfacing='0.023529411764705882' size='0.3411764705882353'></dmm_unit>
 	<modification change_type='MODIFY' old_name='modules\features2d\misc\java\test\BruteForceDescriptorMatcherTest.java' new_name='modules\features2d\misc\java\test\BruteForceDescriptorMatcherTest.java'>
 		<file_info nloc='214' complexity='35' token_count='1738'></file_info>
 		<method name='BruteForceDescriptorMatcherTest::setUp' parameters=''>
 				<method_info nloc='12' complexity='1' token_count='106' nesting_level='1' start_line='82' end_line='94'></method_info>
 			<added_lines>88,92</added_lines>
 			<deleted_lines>88,92</deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines></added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 	<modification change_type='MODIFY' old_name='modules\features2d\misc\java\test\BruteForceL1DescriptorMatcherTest.java' new_name='modules\features2d\misc\java\test\BruteForceL1DescriptorMatcherTest.java'>
 		<file_info nloc='200' complexity='33' token_count='1611'></file_info>
 		<method name='BruteForceL1DescriptorMatcherTest::setUp' parameters=''>
 				<method_info nloc='12' complexity='1' token_count='106' nesting_level='1' start_line='82' end_line='94'></method_info>
 			<added_lines>88,89,90,91,92</added_lines>
 			<deleted_lines>88,89,90,91,92</deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines></added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 	<modification change_type='MODIFY' old_name='modules\features2d\misc\java\test\BruteForceSL2DescriptorMatcherTest.java' new_name='modules\features2d\misc\java\test\BruteForceSL2DescriptorMatcherTest.java'>
 		<file_info nloc='202' complexity='33' token_count='1621'></file_info>
 		<method name='BruteForceSL2DescriptorMatcherTest::setUp' parameters=''>
 				<method_info nloc='12' complexity='1' token_count='106' nesting_level='1' start_line='87' end_line='99'></method_info>
 			<added_lines>93,97</added_lines>
 			<deleted_lines>93,97</deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines></added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 	<modification change_type='MODIFY' old_name='modules\features2d\misc\java\test\FlannBasedDescriptorMatcherTest.java' new_name='modules\features2d\misc\java\test\FlannBasedDescriptorMatcherTest.java'>
 		<file_info nloc='289' complexity='37' token_count='1813'></file_info>
 		<method name='FlannBasedDescriptorMatcherTest::setUp' parameters=''>
 				<method_info nloc='12' complexity='1' token_count='106' nesting_level='1' start_line='158' end_line='169'></method_info>
 			<added_lines>163,167</added_lines>
 			<deleted_lines>163,167</deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines></added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 	<modification change_type='MODIFY' old_name='modules\features2d\misc\java\test\ORBDescriptorExtractorTest.java' new_name='modules\features2d\misc\java\test\ORBDescriptorExtractorTest.java'>
 		<file_info nloc='93' complexity='12' token_count='868'></file_info>
 		<method name='ORBDescriptorExtractorTest::testRead' parameters=''>
 				<method_info nloc='15' complexity='1' token_count='198' nesting_level='1' start_line='79' end_line='99'></method_info>
 			<added_lines>95</added_lines>
 			<deleted_lines>95</deleted_lines>
 		</method>
 		<method name='ORBDescriptorExtractorTest::testComputeMatListOfKeyPointMat' parameters=''>
 				<method_info nloc='14' complexity='1' token_count='169' nesting_level='1' start_line='45' end_line='60'></method_info>
 			<added_lines>56</added_lines>
 			<deleted_lines>56</deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines></added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 	<modification change_type='MODIFY' old_name='modules\imgproc\src\filter.dispatch.cpp' new_name='modules\imgproc\src\filter.dispatch.cpp'>
 		<file_info nloc='1129' complexity='285' token_count='10284'></file_info>
 		<method name='cv::createBitExactKernel_32S' parameters='kernel,kernel_dst,bits'>
 				<method_info nloc='16' complexity='3' token_count='140' nesting_level='1' start_line='282' end_line='297'></method_info>
 			<added_lines>282,283,284,285,286,287,288,289,290,291,292,293,294,295,296,297</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<method name='cv::createSeparableLinearFilter' parameters='_srcType,_dstType,__rowKernel,__columnKernel,_anchor,_delta,_rowBorderType,_columnBorderType,_borderValue'>
 				<method_info nloc='75' complexity='19' token_count='568' nesting_level='1' start_line='299' end_line='377'></method_info>
 			<added_lines>324,337,338,339,340,341,342,343,344,345,346,347,348,349,350,351,352,353,354,355,357</added_lines>
 			<deleted_lines>314,315,316,317,318,319,321</deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines>44,45,46,47,48,49</added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 	<modification change_type='MODIFY' old_name='modules\imgproc\src\fixedpoint.inl.hpp' new_name='modules\imgproc\src\fixedpoint.inl.hpp'>
 		<file_info nloc='333' complexity='221' token_count='5173'></file_info>
 		<method name='ufixedpoint16::raw' parameters=''>
 				<method_info nloc='1' complexity='1' token_count='8' nesting_level='2' start_line='360' end_line='360'></method_info>
 			<added_lines>360</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<method name='ufixedpoint16::fromRaw' parameters='v'>
 				<method_info nloc='1' complexity='1' token_count='13' nesting_level='2' start_line='359' end_line='359'></method_info>
 			<added_lines>359</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines>358</added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 	<modification change_type='MODIFY' old_name='modules\imgproc\src\smooth.dispatch.cpp' new_name='modules\imgproc\src\smooth.dispatch.cpp'>
 		<file_info nloc='511' complexity='137' token_count='4403'></file_info>
 		<method name='cv::getGaussianKernel' parameters='n,sigma,int,res'>
 				<method_info nloc='1' complexity='1' token_count='33' nesting_level='1' start_line='172' end_line='172'></method_info>
 			<added_lines></added_lines>
 			<deleted_lines>172</deleted_lines>
 		</method>
 		<method name='cv::GaussianBlur' parameters='_src,_dst,ksize,sigma1,sigma2,borderType'>
 				<method_info nloc='67' complexity='28' token_count='744' nesting_level='1' start_line='600' end_line='683'></method_info>
 			<added_lines>662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<method name='cv::getGaussianKernel' parameters='n,sigma,ktype'>
 				<method_info nloc='19' complexity='5' token_count='137' nesting_level='1' start_line='199' end_line='220'></method_info>
 			<added_lines>199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,220</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<method name='cv::getGaussianKernelBitExact' parameters='result,n,sigma'>
 				<method_info nloc='103' complexity='12' token_count='694' nesting_level='1' start_line='80' end_line='197'></method_info>
 			<added_lines>80,83,84,86,88,90,91,93,95,96,97,98,99,100,101,103,105,106,107,108,109,110,111,112,113,115,117,118,119,120,121,122,123,124,125,126,127,129,131,132,133,134,135,136,137,138,139,140,141,142,143,147,148,149,151,152,153,154,155,156,157,161,162,163,164,165,166,167,168,169,170,171,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,192,193,194,195,196,197</added_lines>
 			<deleted_lines>80,81,82,83,85,86,87,88,89,90,91,92,93,94,95,97,98,99,101,102,104,106,107,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,133,134,136,138,139,141,143,144,149,150,151,152,153,157,158,160,162,163,165,169,172</deleted_lines>
 		</method>
 		<method name='cv::validateGaussianBlurKernel' parameters='kernel'>
 				<method_info nloc='10' complexity='2' token_count='69' nesting_level='1' start_line='588' end_line='598'></method_info>
 			<added_lines>588,589,590,591,592,593,594,595,596,597,598</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<method name='cv::getFixedpointGaussianKernel' parameters='n,sigma'>
 				<method_info nloc='39' complexity='9' token_count='415' nesting_level='1' start_line='125' end_line='169'></method_info>
 			<added_lines>125,126,127,129,131,132,133,134,135,136,137,138,139,140,141,142,143,147,148,149,151,152,153,154,155,156,157,161,162,163,164,165,166,167,168,169</added_lines>
 			<deleted_lines>125,126,127,128,129,130,131,133,134,136,138,139,141,143,144,149,150,151,152,153,157,158,160,162,163,165,169</deleted_lines>
 		</method>
 		<method name='cv::getGaussianKernelFixedPoint_ED' parameters='result,kernel_bitexact,fractionBits'>
 				<method_info nloc='27' complexity='2' token_count='221' nesting_level='1' start_line='223' end_line='257'></method_info>
 			<added_lines>223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255,256,257</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<method name='cv::getGaussianKernel&lt;ufixedpoint16&gt;' parameters='n,sigma,int,res'>
 				<method_info nloc='14' complexity='2' token_count='115' nesting_level='1' start_line='263' end_line='279'></method_info>
 			<added_lines>263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,279</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines>46,47,48,49,74,75,76,77,78,79,198,221,222,260,261,262,587,599</added_lines>
 			<deleted_lines>70,73,74,75,76,77,78,79,542,543,544,545,546</deleted_lines>
 		</modified_lines>
 	</modification>
 	<modification change_type='MODIFY' old_name='modules\imgproc\test\test_filter.cpp' new_name='modules\imgproc\test\test_filter.cpp'>
 		<file_info nloc='1806' complexity='349' token_count='19966'></file_info>
 		<method name='opencv_test::CV_SmoothBaseTest::dump_test_case' parameters='test_case_idx,out'>
 				<method_info nloc='5' complexity='1' token_count='37' nesting_level='3' start_line='696' end_line='700'></method_info>
 			<added_lines>696,697,698,699,700</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<method name='opencv_test::CV_GaussianBlurTest::dump_test_case' parameters='test_case_idx,out'>
 				<method_info nloc='5' complexity='1' token_count='49' nesting_level='3' start_line='812' end_line='816'></method_info>
 			<added_lines>812,813,814,815,816</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<method name='opencv_test::CV_FilterBaseTest::dump_test_case' parameters='test_case_idx,out'>
 				<method_info nloc='5' complexity='1' token_count='37' nesting_level='3' start_line='63' end_line='67'></method_info>
 			<added_lines>63,64,65,66,67</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<method name='opencv_test::calcGaussianKernel' parameters='n,sigma,kernel'>
 				<method_info nloc='33' complexity='6' token_count='391' nesting_level='2' start_line='862' end_line='897'></method_info>
 			<added_lines>869,870,876,877</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines>62,68,695,811,860</added_lines>
 			<deleted_lines>841,850,856,857</deleted_lines>
 		</modified_lines>
 	</modification>
 	<modification change_type='MODIFY' old_name='modules\imgproc\test\test_smooth_bitexact.cpp' new_name='modules\imgproc\test\test_smooth_bitexact.cpp'>
 		<file_info nloc='160' complexity='27' token_count='3142'></file_info>
 		<method name='opencv_test::checkGaussianBlur_8Uvs32F' parameters='src8u,src32f,N,sigma'>
 				<method_info nloc='8' complexity='1' token_count='93' nesting_level='2' start_line='175' end_line='184'></method_info>
 			<added_lines>175,176,177,178,179,180,181,182,183,184</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<method name='opencv_test::TEST' parameters='GaussianBlur_Bitexact,regression_15015'>
 				<method_info nloc='7' complexity='1' token_count='64' nesting_level='2' start_line='166' end_line='172'></method_info>
 			<added_lines>170</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<method name='opencv_test::TEST' parameters='GaussianBlur_Bitexact,regression_9863'>
 				<method_info nloc='6' complexity='1' token_count='44' nesting_level='2' start_line='186' end_line='192'></method_info>
 			<added_lines>186,187,188,189,190,191,192</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<method name='opencv_test::TEST' parameters='GaussianBlur_Bitexact,Linear8U'>
 				<method_info nloc='109' complexity='21' token_count='2581' nesting_level='2' start_line='42' end_line='164'></method_info>
 			<added_lines>74,80</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines>17,18,19,20,21,24,174,185,193</added_lines>
 			<deleted_lines>17,18,19,165</deleted_lines>
 		</modified_lines>
 	</modification>
 	<modification change_type='MODIFY' old_name='modules\objdetect\misc\python\test\test_facedetect.py' new_name='modules\objdetect\misc\python\test\test_facedetect.py'>
 		<file_info nloc='63' complexity='15' token_count='531'></file_info>
 		<method name='test_facedetect' parameters='self'>
 				<method_info nloc='46' complexity='13' token_count='427' nesting_level='1' start_line='25' end_line='88'></method_info>
 			<added_lines>53</added_lines>
 			<deleted_lines>53</deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines></added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 	<modification change_type='MODIFY' old_name='modules\ts\include\opencv2\ts.hpp' new_name='modules\ts\include\opencv2\ts.hpp'>
 		<file_info nloc='498' complexity='49' token_count='3797'></file_info>
 		<modified_lines>
 			<added_lines>431,432,433</added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 	<modification change_type='MODIFY' old_name='modules\ts\src\ts.cpp' new_name='modules\ts\src\ts.cpp'>
 		<file_info nloc='779' complexity='226' token_count='5256'></file_info>
 		<method name='cvtest::BaseTest::dump_test_case' parameters='test_case_idx,out'>
 				<method_info nloc='4' complexity='1' token_count='29' nesting_level='1' start_line='410' end_line='413'></method_info>
 			<added_lines>410,411,412,413</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<method name='cvtest::BaseTest::run' parameters='start_from'>
 				<method_info nloc='31' complexity='11' token_count='226' nesting_level='1' start_line='325' end_line='361'></method_info>
 			<added_lines>353,354,355,356,357,359</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines>414,415</added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 </commit>
</bug_data>
