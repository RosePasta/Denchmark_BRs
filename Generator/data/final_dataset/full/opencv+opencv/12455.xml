<bug_data>
<bug id='12455' author='takotakot' open_date='2018-09-07T03:07:44Z' closed_time='2018-09-13T20:14:29Z'>
 	<summary>FLT_EPSILON is too small for RotatedRect</summary>
 	<description>
 &lt;denchmark-h:h5&gt;System information (version)&lt;/denchmark-h&gt;
 
 
 OpenCV =&gt; 3.4.1 (master seems to be same)
 Operating System / Platform =&gt; cygwin 64 bit
 Compiler =&gt; g++ (gcc 7.3.0)
 
 &lt;denchmark-h:h5&gt;Detailed description&lt;/denchmark-h&gt;
 
 In some (very rare) condition, "Error: Assertion failed" happens at:
 
 
 
 opencv/modules/core/src/types.cpp
 
 
          Line 154
       in
       da7e1cf
 
 
 
 
 
 
  CV_Assert( abs(vecs[0].dot(vecs[1])) / (norm(vecs[0]) * norm(vecs[1])) &lt;= FLT_EPSILON ); 
 
 
 
 
 
 CV_Assert(abs(vecs[0].dot(vecs[1])) / (cv::norm(vecs[0]) * cv::norm(vecs[1])) &lt;= FLT_EPSILON);
 because FLT_EPSILON is too small to compare.
 &lt;denchmark-h:h5&gt;Steps to reproduce&lt;/denchmark-h&gt;
 
 I made a reproducible example:
 &lt;denchmark-link:https://github.com/takotakot/opencv_debug/tree/0a5d37dc2cc4aef22a33012bdcbb54597ae852a1&gt;https://github.com/takotakot/opencv_debug/tree/0a5d37dc2cc4aef22a33012bdcbb54597ae852a1&lt;/denchmark-link&gt;
 
 .
 If we have  rectangle, using  can eliminate the problem.
 Part of the code:
     cv::Mat points = (cv::Mat_&lt;double&gt;(10, 2) &lt;&lt;
                     1357., 1337.,
                     1362., 1407.,
                     1367., 1474.,
                     1372., 1543.,
                     1375., 1625.,
                     1375., 1696.,
                     1377., 1734.,
                     1378., 1742.,
                     1382., 1801.,
                     1372., 1990.);
 
     cv::PCA pca_points(points, cv::Mat(), CV_PCA_DATA_AS_ROW, 2);
 
     cv::Point2d p1(564.45, 339.8819), p2, p3;
     p2 = p1 - 1999 * cv::Point2d(pca_points.eigenvectors.row(0));
     p3 = p2 - 1498.5295 * cv::Point2d(pca_points.eigenvectors.row(1));
 
     cv::RotatedRect(p1, p2, p3);
 &lt;denchmark-h:h5&gt;Plans&lt;/denchmark-h&gt;
 
 I have some plans:
 
 Multiple 2, 4 or some value to FLT_EPSILON
 Make another constructor using Point2d for Point2f (and Vec2d for Vec2f etc. inside)
 Note 1: If we use DBL_EPSILON, same problem may occur.
 Note 2: If we only have Point2f rectangle, we cannot avoid assertion.
 Calcurate the angle between two vectors and introduce another assersion.
 
 I want to create PR for solving this issue. But I want some direction.
 	</description>
 	<comments>
 		<comment id='1' author='takotakot' date='2018-09-07T05:39:16Z'>
 		please see &lt;denchmark-link:https://github.com/opencv/opencv/issues/12221&gt;the previous discussion about it&lt;/denchmark-link&gt;
  (duplicate ?)
 		</comment>
 		<comment id='2' author='takotakot' date='2018-09-07T07:43:09Z'>
 		&lt;denchmark-link:https://github.com/berak&gt;@berak&lt;/denchmark-link&gt;
  Thank you for commenting.
 I've already read the issue.
 &lt;denchmark-link:https://github.com/opencv/opencv/issues/12221&gt;#12221&lt;/denchmark-link&gt;
  is about intersections and &lt;denchmark-link:https://github.com/opencv/opencv/pull/12222&gt;#12222&lt;/denchmark-link&gt;
  is merged.
 The point that "double is better" is the same, but this is not not a duplicate bug.
 		</comment>
 		<comment id='3' author='takotakot' date='2018-09-07T19:43:59Z'>
 		Please try something like this:
 &lt;denchmark-code&gt;CV_Assert(std::fabs(vecs[0].ddot(vecs[1])) &lt;=
           0.017 /*cos(89deg)*/ * cv::norm(vecs[0]) * cv::norm(vecs[1]));
 &lt;/denchmark-code&gt;
 
 Changes:
 
 .ddot
 FLT_EPSILON ==&gt; cos(89 deg) (almost 90 degrees)
 avoid division
 
 		</comment>
 		<comment id='4' author='takotakot' date='2018-09-07T20:25:59Z'>
 		I've tried .ddot and "avoid division" but nothing changes. I'll try once again for confirmation.
 cos(89 deg) is about 1.7 * 10^(-2) and FLT_EPSILON is about 1.19 * 10^(-7). cos(89 deg) is 10^5 times bigger. I think that change works.
 For my case, abs(vecs[0].dot(vecs[1])) / (cv::norm(vecs[0]) * cv::norm(vecs[1])) is less than 2 * FLT_EPSILON (as long as I remember). std::sqrt(FLT_EPSILON) or 2 * FLT_EPSILON can avoid assert.
 I did some experiments before reporting and got the result that "increasing the value with small numerical change is very difficult". (This is the reason why I said it's rare case.)
 I'll
 
 try the code provided
 report the value of my case
 
 		</comment>
 		<comment id='5' author='takotakot' date='2018-09-08T00:07:36Z'>
 		For my environment:
 
 .ddot
 fabs
 avoid division
 
 does not solve this bug.
 
 FLT_EPSILON to 1.7
 
 is good.
 My Point2d version:
 &lt;denchmark-code&gt;ddot: -3.63797880709171e-10
 norm0: 1999
 norm1: 1498.5295
 prod: 2995560.4705
 1.21445680797239e-16
 &lt;/denchmark-code&gt;
 
 1.21445680797239e-16 is smaller than FLT_EPSILON.
 My Point2f version:
 &lt;denchmark-code&gt;ddot: -0.406243801116943
 norm0: 1999.00007932771
 norm1: 1498.52945663236
 prod: 2995560.50268301
 1.35615288275128e-07
 OpenCV(3.4.1) Error: Assertion failed (abs(vecs[0].dot(vecs[1])) / (norm(vecs[0]) * norm(vecs[1])) &lt;= 1.19209289550781250000e-7F)
 &lt;/denchmark-code&gt;
 
 1.35615288275128e-07 is a bit larger than FLT_EPSILON.
 A patch that change FLT_EPSILON to std::sqrt(FLT_EPSILON) or some value is accepted?
 double version is better?
 		</comment>
 		<comment id='6' author='takotakot' date='2018-09-08T05:20:49Z'>
 		
 std::sqrt(FLT_EPSILON)
 
 This magic value doesn't have any sense.
 This expression is based on  calculation between two vectors: &lt;denchmark-link:https://en.wikipedia.org/wiki/Dot_product#Complex_vectors&gt;https://en.wikipedia.org/wiki/Dot_product#Complex_vectors&lt;/denchmark-link&gt;
 
 to ensure that they are perpendicular ( should be almost zero)
 		</comment>
 		<comment id='7' author='takotakot' date='2018-09-08T08:05:02Z'>
 		
 This magic value doesn't have any sense.
 
 Yes, I konw that. But 89 degree does not have sense neither. How about 4*EPS?
 I will calculate a^2 + b^2 - c^2 using norm.
 		</comment>
 		<comment id='8' author='takotakot' date='2018-09-09T02:26:45Z'>
 		Using a^2 = vecs[0].ddot(vecs[0]) and vec2 = p2 - p0:
 &lt;denchmark-code&gt;norm0: 1999.00014033596
 norm1: 1498.52945663236
 norm2: 2498.31772711755
 a^2 + b^2 - c^2: 0.627828244119883
 (a^2 + b^2 - c^2) / c^2: 1.00587846477474e-07
 fabs((a^2 + b^2) /c^2 - 1): 1.0058784649658e-07
 &lt;/denchmark-code&gt;
 
 0.627828244119883 is relatively small. So, fabs( a^2 + b^2 - c^2 ) &lt;= FLT_EPSILON * c^2 passes.
 With double version, fabs((a^2 + b^2) /c^2 - 1) is just 0.
 &lt;denchmark-h:h4&gt;Proposal:&lt;/denchmark-h&gt;
 
 CV_Assert((std::fabs(vecs[0].ddot(vecs[1])) &lt;= FLT_EPSILON  * (cv::norm(vecs[0]) * cv::norm(vecs[1]))) || (std::fabs(vecs[0].ddot(vecs[0]) + vecs[1].ddot(vecs[1]) - vec2.ddot(vec2)) &lt;= FLT_EPSILON * vec2.ddot(vec2)));
 This method is better when:
 
 corner case (I reported)
 width/height is relatively large/small than the other
 
 Replace FLT_EPSILON with FLT_EPSILON * 2 may be better, too.
 		</comment>
 		<comment id='9' author='takotakot' date='2018-09-10T04:56:49Z'>
 		&lt;denchmark-h:h4&gt;Estimate calculation (quantization) error:&lt;/denchmark-h&gt;
 
 Define
 &lt;denchmark-link:https://user-images.githubusercontent.com/10368878/45276350-abb00d00-b4fc-11e8-888e-12385b4b1ccc.png&gt;&lt;/denchmark-link&gt;
 
 and
 ac+bd=0
 Squared order of s are denoted as 
 Define
 &lt;denchmark-link:https://user-images.githubusercontent.com/10368878/45276452-57f1f380-b4fd-11e8-9081-3dd9340076f2.png&gt;&lt;/denchmark-link&gt;
 
 Inner product:
 &lt;denchmark-link:https://user-images.githubusercontent.com/10368878/45276494-9d162580-b4fd-11e8-8c0b-b3d2df4d975f.png&gt;&lt;/denchmark-link&gt;
 
 Thus
 &lt;denchmark-link:https://user-images.githubusercontent.com/10368878/45276502-b0c18c00-b4fd-11e8-912b-d2c071d291fd.png&gt;&lt;/denchmark-link&gt;
 
 Norm:
 &lt;denchmark-link:https://user-images.githubusercontent.com/10368878/45276524-d484d200-b4fd-11e8-8881-95d8efd28c72.png&gt;&lt;/denchmark-link&gt;
 
 &lt;denchmark-link:https://user-images.githubusercontent.com/10368878/45276538-f3836400-b4fd-11e8-98d4-9b61cba04dfe.png&gt;&lt;/denchmark-link&gt;
 
 In this way, (4 + alpha) | epsilon | (where alpha is some small value) seems to be sufficient.
 &lt;denchmark-h:h4&gt;Estimate cancellation of significant digits:&lt;/denchmark-h&gt;
 
 If three points
 &lt;denchmark-link:https://user-images.githubusercontent.com/10368878/45277074-e74cd600-b500-11e8-8300-3ea412cab1b4.png&gt;&lt;/denchmark-link&gt;
 
 (k=0, 1, 2) are given. We can calculate v_0 = p_1 - p_0, v_1 = p_2 - p_1 .
 Assume | x_k | and | y_k | are relatively larger than | a | etc.
 For computer calcuration, quantization error exists ex.:
 &lt;denchmark-link:https://user-images.githubusercontent.com/10368878/45277066-cedcbb80-b500-11e8-8d96-22d82d4b8664.png&gt;&lt;/denchmark-link&gt;
 
 And we have cancellation of significant digits as follows:
 &lt;denchmark-link:https://user-images.githubusercontent.com/10368878/45276720-eb77f400-b4fe-11e8-84f2-7e6588901b1a.png&gt;&lt;/denchmark-link&gt;
 
 Then
 &lt;denchmark-link:https://user-images.githubusercontent.com/10368878/45277127-3e52ab00-b501-11e8-9f16-9dc05c9118ad.png&gt;&lt;/denchmark-link&gt;
 
 if | a | is relatively smaller than | b | we can ignore this.
 For convenience define:
 &lt;denchmark-link:https://user-images.githubusercontent.com/10368878/45276767-3eea4200-b4ff-11e8-97aa-86e611f95850.png&gt;&lt;/denchmark-link&gt;
 
 We can estimate:
 &lt;denchmark-link:https://user-images.githubusercontent.com/10368878/45276793-5295a880-b4ff-11e8-8c38-41a31f2215b3.png&gt;&lt;/denchmark-link&gt;
 
 &lt;denchmark-h:h4&gt;proposal 2&lt;/denchmark-h&gt;
 
 &lt;denchmark-link:https://user-images.githubusercontent.com/10368878/45276800-63deb500-b4ff-11e8-9dcc-401990aa4063.png&gt;&lt;/denchmark-link&gt;
 
 		</comment>
 		<comment id='10' author='takotakot' date='2018-09-13T02:23:34Z'>
 		&lt;denchmark-link:https://github.com/alalek&gt;@alalek&lt;/denchmark-link&gt;
  Could you please point out what I can try or explain?
 		</comment>
 		<comment id='11' author='takotakot' date='2018-09-13T12:07:24Z'>
 		Feel free to prepare PR onto 3.4 branch.
 Assumption:
 &lt;denchmark-code&gt;x' = x * (1 + eps), where eps &lt; FLT_EPS
 &lt;/denchmark-code&gt;
 
 is not always true due calculations in caller function (they may use cos/sin approximations with 100+ ULP).
 		</comment>
 		<comment id='12' author='takotakot' date='2018-09-13T13:01:00Z'>
 		Thank you.
 Yes. There are many factors.
 I've created &lt;denchmark-link:https://github.com/opencv/opencv/pull/12523&gt;#12523&lt;/denchmark-link&gt;
 .
 		</comment>
 		<comment id='13' author='takotakot' date='2018-09-13T20:14:29Z'>
 		Closed via &lt;denchmark-link:https://github.com/opencv/opencv/pull/12523&gt;#12523&lt;/denchmark-link&gt;
 .
 		</comment>
 	</comments>
 </bug>
<commit id='451340fd3d2f20fb0f0f62402340bbba27314c75' author='Takuho NAKANO' date='2018-09-13 22:26:05+03:00'>
 	<dmm_unit complexity='1.0' interfacing='0.0' size='0.0'></dmm_unit>
 	<modification change_type='MODIFY' old_name='modules\core\src\types.cpp' new_name='modules\core\src\types.cpp'>
 		<file_info nloc='134' complexity='16' token_count='1629'></file_info>
 		<method name='cv::RotatedRect::RotatedRect' parameters='_point1,_point2,_point3'>
 				<method_info nloc='19' complexity='2' token_count='289' nesting_level='1' start_line='147' end_line='171'></method_info>
 			<added_lines>153,154,156,161,164</added_lines>
 			<deleted_lines>154,159,162</deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines></added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 </commit>
</bug_data>
