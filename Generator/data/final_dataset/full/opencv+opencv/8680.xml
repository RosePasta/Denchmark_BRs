<bug_data>
<bug id='8680' author='cdcseacave' open_date='2017-05-01T09:00:41Z' closed_time='2017-05-23T10:46:03Z'>
 	<summary>Mat::release() resets channels info for Mat_</summary>
 	<description>
 In debug Mat::release() resets fixed info for Mat_ (pls see &lt;denchmark-link:https://github.com/opencv/opencv/blob/master/modules/core/include/opencv2/core/mat.inl.hpp#L780&gt;https://github.com/opencv/opencv/blob/master/modules/core/include/opencv2/core/mat.inl.hpp#L780&lt;/denchmark-link&gt;
 ).
 For instance if Mat_ is compiled with 3 channels, release() sets it to 1.
 	</description>
 	<comments>
 		<comment id='1' author='cdcseacave' date='2017-05-01T09:25:05Z'>
 		Fix: overwrite Mat_::release()
 &lt;denchmark-code&gt;template&lt;typename _Tp&gt; inline
 void Mat_&lt;_Tp&gt;::release()
 {
     Mat::release();
 #ifdef _DEBUG
     flags = (flags &amp; ~CV_MAT_TYPE_MASK) | DataType&lt;_Tp&gt;::type;
 #endif
 }
 &lt;/denchmark-code&gt;
 
 		</comment>
 		<comment id='2' author='cdcseacave' date='2017-05-05T13:15:04Z'>
 		Could you provide a PR with the proposed fix and a regression test?
 		</comment>
 		<comment id='3' author='cdcseacave' date='2017-05-05T14:36:08Z'>
 		Mat has design of smart pointer with some cached fields (like cols, rows, type/flags) - so instead of "m-&gt;obj.field_name" we just write m.field_name.
 Why do you need to access to information fields of released Mat?
 This "Mat" is not attached to any "object/data" anymore, so there are no valid fields "to cache". I believe, we should raise error in these cases (like smart ptr, working with fields of m-&gt;obj is invalid, because obj is nullptr), but there is no way (in the current C++ design) to catch these cases, so these fields always return/contain something ("garbage" in the case of released Mat).
 Using of released fields is not a good practice and will lead to real errors (some problems are already fixed in OpenCV).
 BTW, release() is not a virtual method, so there are still some ways "to break" proposed patch (just to cast to regular Mat* and release it).
 		</comment>
 		<comment id='4' author='cdcseacave' date='2017-05-05T15:10:35Z'>
 		I'll give you an example bellow that breaks OpenCV without this patch. But before that, pls explain following our logic above, why the channels returned by m.channels(); is different from immediately after constructing the matrix cv::Mat_&lt;cv::Point2i&gt; m; and after m.release(); (more exactly 2 !=1).
 Example:
 &lt;denchmark-code&gt;	cv::Mat_&lt;cv::Point2i&gt; m;
 	mat.release();
 	m.channels(); // this line rises an assert at mat.inl.hpp line 1597
 &lt;/denchmark-code&gt;
 
 		</comment>
 		<comment id='5' author='cdcseacave' date='2017-05-05T22:33:28Z'>
 		You can use Mat.empty() or Mat_&lt;T&gt;.empty() to check whether the matrix is empty before use.
 The quirk that Mat_&lt;T&gt;.channels() returns one (1) (as opposed to the more widely accepted practice of returning zero (0)) is due to the way OpenCV encodes the numeric type and channel count into a 32-bit integer type code.
 
 
 
 opencv/modules/core/include/opencv2/core/mat.inl.hpp
 
 
          Line 861
       in
       fe24165
 
 
 
 
 
 
  int Mat::channels() const 
 
 
 
 
 
 The CN macro simply don't have a way to encode a channel count of zero. (When the masked bits give a value of zero, that is interpreted as a channel count of 1; when the masked bits give 1, that's interpreted as 2, and so on.) Likewise, the DEPTH macro simply don't have a way to encode a matrix pixel format that is not one of the 8 predefined types.
 		</comment>
 		<comment id='6' author='cdcseacave' date='2017-05-06T16:45:21Z'>
 		&lt;denchmark-link:https://github.com/kinchungwong&gt;@kinchungwong&lt;/denchmark-link&gt;
  nothing from your answer addresses the 2 points I made earlier
 &lt;denchmark-link:https://github.com/alalek&gt;@alalek&lt;/denchmark-link&gt;
  pls review
 		</comment>
 		<comment id='7' author='cdcseacave' date='2017-05-06T22:40:48Z'>
 		&lt;denchmark-link:https://github.com/cdcseacave&gt;@cdcseacave&lt;/denchmark-link&gt;
  Sorry, I stand corrected.
 I would suggest the following "criteria" (or, line of reasoning) that tries to explain why your suggested fix is better than the existing code.
 Suppose a new Mat_&lt;T&gt; variable is created locally without allocating its data (i.e. it doesn't have a size). Suppose we have a different variable, that is allocated, and then released. After release, it is reasonable to expect that its properties (all getters), those that don't depend on the matrix being allocated, should compare equal between a default-constructed variable and a released variable.
 &lt;denchmark-code&gt;Mat_&lt;cv::Vec2i&gt; matOne;
 Mat_&lt;cv::Vec2i&gt; matTwo(cv::Size(1, 1));
 matTwo.release();
 assert(matOne.channels() == matTwo.channels()); 
 // Assert not just channels(), but also every property that don't depend on whether the matrix is allocated.
 &lt;/denchmark-code&gt;
 
 Don't get me wrong; I think your fix is good; I'm just searching for a rationale in support of the new code (as opposed to being seen as an unnecessary code change).
 The OpenCV API does require that, given a Mat_&lt;cv::Vec2i&gt; that doesn't have allocated data, that its type() method should still return CV_32SC2.
 		</comment>
 	</comments>
 </bug>
<commit id='003745432f5f0168d869788fdc041fd04693bf68' author='cDc' date='2017-05-23 12:19:57+03:00'>
 	<dmm_unit complexity='1.0' interfacing='1.0' size='1.0'></dmm_unit>
 	<modification change_type='MODIFY' old_name='modules\core\include\opencv2\core\mat.hpp' new_name='modules\core\include\opencv2\core\mat.hpp'>
 		<file_info nloc='1113' complexity='0' token_count='11671'></file_info>
 		<modified_lines>
 			<added_lines>2188,2189,2681,2684,2685</added_lines>
 			<deleted_lines>2679,2682,2683</deleted_lines>
 		</modified_lines>
 	</modification>
 	<modification change_type='MODIFY' old_name='modules\core\include\opencv2\core\mat.inl.hpp' new_name='modules\core\include\opencv2\core\mat.inl.hpp'>
 		<file_info nloc='3156' complexity='734' token_count='25607'></file_info>
 		<method name='cv::Mat_&lt;_Tp&gt;::release' parameters=''>
 				<method_info nloc='5' complexity='2' token_count='31' nesting_level='1' start_line='1629' end_line='1635'></method_info>
 			<added_lines>1629,1630,1631,1632,1633,1634,1635</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines>1628,1636</added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 </commit>
</bug_data>
