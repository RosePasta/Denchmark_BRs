<bug_data>
<bug id='5775' author='rvogt' open_date='2015-12-09T12:45:13Z' closed_time='2016-07-20T13:42:39Z'>
 	<summary>arithm_op: wrong data length for actualScalarDepth()</summary>
 	<description>
 Hi,
 i sometimes got an exception when calling subtract(255, srcImage, destImage), where srcImage is of type CV_8UC3.
 I think i found the bug at a quite central position, so it would be great if someone responsible could verify and fix it:
 core/arithm.cpp in function arithm_op
 ...
 if( dims1 != dims2 || sz1 != sz2 || cn != cn2 ||
         (kind1 == _InputArray::MATX &amp;&amp; (sz1 == Size(1,4) || sz1 == Size(1,1))) ||
         (kind2 == _InputArray::MATX &amp;&amp; (sz2 == Size(1,4) || sz2 == Size(1,1))) )
 {
     if( checkScalar(*psrc1, type2, kind1, kind2) )
     {
         // src1 is a scalar; swap it with src2
         swap(psrc1, psrc2);
         swap(sz1, sz2);
         swap(type1, type2);
         swap(depth1, depth2);
         swap(cn, cn2);
         swap(dims1, dims2);
         swapped12 = true;
         if( oclop == OCL_OP_SUB )
             oclop = OCL_OP_RSUB;
         if ( oclop == OCL_OP_DIV_SCALE )
             oclop = OCL_OP_RDIV_SCALE;
     }
     else if( !checkScalar(*psrc2, type1, kind2, kind1) )
         CV_Error( CV_StsUnmatchedSizes,
                  "The operation is neither 'array op array' "
                  "(where arrays have the same size and the same number of channels), "
                  "nor 'array op scalar', nor 'scalar op array'" );
     haveScalar = true;
     CV_Assert(type2 == CV_64F &amp;&amp; (sz2.height == 1 || sz2.height == 4));
 
     if (!muldiv)
     {
         Mat sc = psrc2-&gt;getMat();
         depth2 = actualScalarDepth(sc.ptr&lt;double&gt;(), cn);    // &lt;== cn should be cn2
         if( depth2 == CV_64F &amp;&amp; (depth1 &lt; CV_32S || depth1 == CV_32F) )
             depth2 = CV_32F;
     }
     else
         depth2 = CV_64F;
 }
 ...
 I think, the line
 depth2 = actualScalarDepth(sc.ptr&lt;double&gt;(), cn);
 should be changed to
 depth2 = actualScalarDepth(sc.ptr&lt;double&gt;(), cn2);
 In my case, initially cn = 1 and cn2 = 3, then after swapping cn = 3.
 This leads to an invalid memory access behind my scalar in the actualScalarDepth function:
 static int actualScalarDepth(const double* data, int len)
 {
     int i = 0, minval = INT_MAX, maxval = INT_MIN;
     for(; i &lt; len; ++i)
     {
         int ival = cvRound(data[i]);
         if( ival != data[i] )
             break;
         minval = MIN(minval, ival);
         maxval = MAX(maxval, ival);
     }
     return i &lt; len ? CV_64F :
         minval &gt;= 0 &amp;&amp; maxval &lt;= (int)UCHAR_MAX ? CV_8U :
         minval &gt;= (int)SCHAR_MIN &amp;&amp; maxval &lt;= (int)SCHAR_MAX ? CV_8S :
         minval &gt;= 0 &amp;&amp; maxval &lt;= (int)USHRT_MAX ? CV_16U :
         minval &gt;= (int)SHRT_MIN &amp;&amp; maxval &lt;= (int)SHRT_MAX ? CV_16S :
         CV_32S;
 }
 If there is a NAN at data[1] or data[2], cvRound() throws an exception
 	</description>
 	<comments>
 	</comments>
 </bug>
<commit id='71cbd6f02eb4480970d38ed08132e8b9e5503b05' author='Ilya Lavrenov' date='2016-07-20 11:38:15+03:00'>
 	<dmm_unit complexity='1.0' interfacing='1.0' size='1.0'></dmm_unit>
 	<modification change_type='MODIFY' old_name='modules\core\src\arithm.cpp' new_name='modules\core\src\arithm.cpp'>
 		<file_info nloc='2559' complexity='669' token_count='27157'></file_info>
 		<method name='cv::arithm_op' parameters='_src1,_src2,_dst,_mask,dtype,tab,muldiv,usrdata,oclop'>
 				<method_info nloc='244' complexity='100' token_count='2282' nesting_level='1' start_line='578' end_line='855'></method_info>
 			<added_lines>646</added_lines>
 			<deleted_lines>646</deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines></added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 	<modification change_type='MODIFY' old_name='modules\core\test\test_arithm.cpp' new_name='modules\core\test\test_arithm.cpp'>
 		<file_info nloc='1702' complexity='394' token_count='15576'></file_info>
 		<method name='TEST' parameters='Subtract,scalarc1_matc3'>
 				<method_info nloc='7' complexity='1' token_count='83' nesting_level='0' start_line='1914' end_line='1921'></method_info>
 			<added_lines>1914,1915,1916,1917,1918,1919,1920,1921</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<method name='TEST' parameters='Subtract,scalarc4_matc4'>
 				<method_info nloc='7' complexity='1' token_count='92' nesting_level='0' start_line='1923' end_line='1930'></method_info>
 			<added_lines>1923,1924,1925,1926,1927,1928,1929,1930</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines>1913,1922</added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 </commit>
</bug_data>
