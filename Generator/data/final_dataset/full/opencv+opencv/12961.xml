<bug_data>
<bug id='12961' author='ayounes-nviso' open_date='2018-10-26T13:14:57Z' closed_time='2019-02-01T12:02:28Z'>
 	<summary>Regression: image loading/processing on Android 32bit</summary>
 	<description>
 &lt;denchmark-h:h5&gt;System information (version)&lt;/denchmark-h&gt;
 
 
 OpenCV =&gt; latest master or 3.4 branches, starting with this commit
 cc10e6b
 
 This commit does not have the regression:
 &lt;denchmark-link:https://github.com/opencv/opencv/commit/ad93ed720dfd1a69ecb60905777797e15ba7687f&gt;ad93ed7&lt;/denchmark-link&gt;
 
 So it's only a few commit between the two.
 
 Operating System / Platform =&gt; Android 32bit
 Compiler =&gt; NDK r18
 
 &lt;denchmark-h:h5&gt;Detailed description&lt;/denchmark-h&gt;
 
 Bus error for some specific jpg files.
 Additional info: The issue is reproducible only on Android, all is fine on Intel-x86/gcc-6 and rasperry-pi3/raspian/g++-arm-linux-gnueabihf platforms.
 We managed to reproduce the crash reliably with an image and the following code on Android (32bit NDK r18) compiled with -DENABLE_NEON=ON -DENABLE_VFPV3=ON
 int main(int argc, char* argv[]) {
 cv::Mat m = cv::imread(argv[1]);
 cv::pyrDown(m, m);
 return 0;}
 Backtrace:
 (cv::PyrDownVec_32s8u::operator()(int*, unsigned char, int, int) const+756)
 (void cv::pyrDown_&lt;cv::FixPtCast&lt;unsigned char, 8&gt;, cv::PyrDownVec_32s8u&gt;(cv::Mat const&amp;, cv::Mat&amp;, int)+4232)
 (cv::pyrDown(cv::_InputArray const&amp;, cv::OutputArray const&amp;, cv::Size const&amp;, int)+660)
 	</description>
 	<comments>
 		<comment id='1' author='ayounes-nviso' date='2018-11-29T13:12:14Z'>
 		We managed to reproduce the crash reliably with an image and the following code on Android (32bit NDK r18) compiled with -DENABLE_NEON=ON -DENABLE_VFPV3=ON
 int main(int argc, char* argv[]) {
 cv::Mat m = cv::imread(argv[1]);
 cv::pyrDown(m, m);
 return 0;}
 Backtrace:
 (cv::PyrDownVec_32s8u::operator()(int*, unsigned char, int, int) const+756)
 (void cv::pyrDown_&lt;cv::FixPtCast&lt;unsigned char, 8&gt;, cv::PyrDownVec_32s8u&gt;(cv::Mat const&amp;, cv::Mat&amp;, int)+4232)
 (cv::pyrDown(cv::_InputArray const&amp;, cv::OutputArray const&amp;, cv::Size const&amp;, int)+660)
 
 
 
 		</comment>
 		<comment id='2' author='ayounes-nviso' date='2018-12-15T11:32:48Z'>
 		Do you need any more info?
 		</comment>
 		<comment id='3' author='ayounes-nviso' date='2018-12-15T16:31:42Z'>
 		pyrDown processing is not depend on image content or source.
 Try to reproduce problem with zero Mat: cv::Mat m(cv::Size(cols, rows), CV_8UC3, cv::Scalar::all(0));
 It would be nice to:
 
 capture problematic instruction with lldb and registers (including memory address ranges of src / dst buffers)
 dump of /proc/cpuinfo
 logcat with OpenCV bootstrap information
 
 		</comment>
 		<comment id='4' author='ayounes-nviso' date='2019-01-10T21:54:11Z'>
 		I have the same crash with NEON devices when the input image of cv::pyrDown has a size that is not a multiple of 4 (e.g 110).
 I narrowed it down to line 125 of pyramids.cpp:
 *(int*)(dst + x) = v_reinterpret_as_s32(v_rshr_pack&lt;8&gt;(v_pack_u(t0, t0), v_setzero_u16())).get0();
 Looks like the assignment fails, but I don't really understand why.
 		</comment>
 		<comment id='5' author='ayounes-nviso' date='2019-01-10T22:46:18Z'>
 		Assembly (iOS built with clang), crash location is 0x161e0a.
 
 PyrDownVec_32s8u::operator():
     0x161b68 &lt;+0&gt;:   push   {r4, r5, r6, r7, lr}
     0x161b6a &lt;+2&gt;:   add    r7, sp, #0xc
     0x161b6c &lt;+4&gt;:   push.w {r8, r10, r11}
     0x161b70 &lt;+8&gt;:   sub.w  r4, sp, #0x10
     0x161b74 &lt;+12&gt;:  bfc    r4, #0, #4
     0x161b78 &lt;+16&gt;:  mov    sp, r4
     0x161b7a &lt;+18&gt;:  vst1.64 {d8, d9}, [r4:128]
     0x161b7e &lt;+22&gt;:  sub    sp, #0x20
     0x161b80 &lt;+24&gt;:  ldr    r4, [r7, #0x8]
     0x161b82 &lt;+26&gt;:  ldr.w  r12, [r1]
     0x161b86 &lt;+30&gt;:  ldr.w  r9, [r1, #0x4]
     0x161b8a &lt;+34&gt;:  cmp    r4, #0x10
     0x161b8c &lt;+36&gt;:  ldr.w  r10, [r1, #0x8]
     0x161b90 &lt;+40&gt;:  ldr.w  r11, [r1, #0xc]
     0x161b94 &lt;+44&gt;:  ldr    r3, [r1, #0x10]
     0x161b96 &lt;+46&gt;:  bge    0x161ba6                  ; &lt;+62&gt;
     0x161b98 &lt;+48&gt;:  movs   r0, #0x0
     0x161b9a &lt;+50&gt;:  sub.w  r1, r4, #0x8
     0x161b9e &lt;+54&gt;:  cmp    r0, r1
     0x161ba0 &lt;+56&gt;:  ble.w  0x161d1c                  ; &lt;+436&gt;
     0x161ba4 &lt;+60&gt;:  b      0x161daa                  ; &lt;+578&gt;
     0x161ba6 &lt;+62&gt;:  sub.w  r0, r4, #0x10
     0x161baa &lt;+66&gt;:  str    r0, [sp, #0x8]
     0x161bac &lt;+68&gt;:  movs   r5, #0x0
     0x161bae &lt;+70&gt;:  movs   r6, #0x0
     0x161bb0 &lt;+72&gt;:  movs   r4, #0x30
     0x161bb2 &lt;+74&gt;:  add    r0, sp, #0x14
     0x161bb4 &lt;+76&gt;:  strd   r3, r2, [sp, #12]
     0x161bb8 &lt;+80&gt;:  stm.w  r0, {r9, r10, r12}
     0x161bbc &lt;+84&gt;:  ldr    r0, [sp, #0x1c]
     0x161bbe &lt;+86&gt;:  mov    r2, r11
     0x161bc0 &lt;+88&gt;:  add.w  r11, r2, r5
     0x161bc4 &lt;+92&gt;:  add.w  r12, r3, r5
     0x161bc8 &lt;+96&gt;:  add.w  lr, r0, r5
     0x161bcc &lt;+100&gt;: ldr    r0, [sp, #0x18]
     0x161bce &lt;+102&gt;: mov    r1, r12
     0x161bd0 &lt;+104&gt;: add.w  r10, r0, r5
     0x161bd4 &lt;+108&gt;: add.w  r0, r11, #0x10
     0x161bd8 &lt;+112&gt;: vld1.32 {d30, d31}, [r0]
     0x161bdc &lt;+116&gt;: mov    r3, lr
     0x161bde &lt;+118&gt;: mov    r8, r10
     0x161be0 &lt;+120&gt;: ldr    r0, [sp, #0x14]
     0x161be2 &lt;+122&gt;: vld1.32 {d20, d21}, [r8], r4
     0x161be6 &lt;+126&gt;: add.w  r9, r0, r5
     0x161bea &lt;+130&gt;: adds   r5, #0x40
     0x161bec &lt;+132&gt;: vld1.32 {d16, d17}, [r1], r4
     0x161bf0 &lt;+136&gt;: vqmovn.s32 d20, q10
     0x161bf4 &lt;+140&gt;: mov    r0, r9
     0x161bf6 &lt;+142&gt;: vld1.32 {d22, d23}, [r0], r4
     0x161bfa &lt;+146&gt;: vqmovn.s32 d16, q8
     0x161bfe &lt;+150&gt;: vld1.32 {d2, d3}, [r0]
     0x161c02 &lt;+154&gt;: mov    r0, r11
     0x161c04 &lt;+156&gt;: vqmovn.s32 d26, q11
     0x161c08 &lt;+160&gt;: vld1.32 {d24, d25}, [r0], r4
     0x161c0c &lt;+164&gt;: vqmovn.s32 d3, q1
     0x161c10 &lt;+168&gt;: vld1.32 {d4, d5}, [r0]
     0x161c14 &lt;+172&gt;: add.w  r0, r10, #0x10
     0x161c18 &lt;+176&gt;: vqmovn.s32 d24, q12
     0x161c1c &lt;+180&gt;: vld1.32 {d8, d9}, [r0]
     0x161c20 &lt;+184&gt;: add.w  r0, r12, #0x20
     0x161c24 &lt;+188&gt;: vqmovn.s32 d5, q2
     0x161c28 &lt;+192&gt;: vld1.32 {d18, d19}, [r3], r4
     0x161c2c &lt;+196&gt;: vqmovn.s32 d21, q4
     0x161c30 &lt;+200&gt;: vqmovn.s32 d25, q15
     0x161c34 &lt;+204&gt;: vld1.32 {d6, d7}, [r1]
     0x161c38 &lt;+208&gt;: vqmovn.s32 d18, q9
     0x161c3c &lt;+212&gt;: vld1.32 {d28, d29}, [r3]
     0x161c40 &lt;+216&gt;: vqmovn.s32 d23, q3
     0x161c44 &lt;+220&gt;: vld1.32 {d8, d9}, [r0]
     0x161c48 &lt;+224&gt;: add.w  r0, lr, #0x20
     0x161c4c &lt;+228&gt;: vqmovn.s32 d29, q14
     0x161c50 &lt;+232&gt;: vld1.32 {d6, d7}, [r0]
     0x161c54 &lt;+236&gt;: add.w  r0, r11, #0x20
     0x161c58 &lt;+240&gt;: vqmovn.s32 d22, q4
     0x161c5c &lt;+244&gt;: mov    r11, r2
     0x161c5e &lt;+246&gt;: vqmovn.s32 d28, q3
     0x161c62 &lt;+250&gt;: vld1.32 {d6, d7}, [r0]
     0x161c66 &lt;+254&gt;: add.w  r0, r9, #0x20
     0x161c6a &lt;+258&gt;: vld1.32 {d0, d1}, [r8]
     0x161c6e &lt;+262&gt;: vqmovn.s32 d4, q3
     0x161c72 &lt;+266&gt;: vqadd.u16 q11, q14, q11
     0x161c76 &lt;+270&gt;: vld1.32 {d8, d9}, [r0]
     0x161c7a &lt;+274&gt;: add.w  r0, r10, #0x20
     0x161c7e &lt;+278&gt;: vqmovn.s32 d1, q0
     0x161c82 &lt;+282&gt;: vld1.32 {d6, d7}, [r0]
     0x161c86 &lt;+286&gt;: add.w  r0, r9, #0x10
     0x161c8a &lt;+290&gt;: vqmovn.s32 d2, q4
     0x161c8e &lt;+294&gt;: vqmovn.s32 d0, q3
     0x161c92 &lt;+298&gt;: vld1.32 {d6, d7}, [r0]
     0x161c96 &lt;+302&gt;: add.w  r0, r12, #0x10
     0x161c9a &lt;+306&gt;: vld1.32 {d30, d31}, [r0]
     0x161c9e &lt;+310&gt;: vqmovn.s32 d27, q3
     0x161ca2 &lt;+314&gt;: add.w  r0, lr, #0x10
     0x161ca6 &lt;+318&gt;: vqadd.u16 q1, q1, q2
     0x161caa &lt;+322&gt;: vld1.32 {d4, d5}, [r0]
     0x161cae &lt;+326&gt;: vqmovn.s32 d17, q15
     0x161cb2 &lt;+330&gt;: vqadd.u16 q12, q13, q12
     0x161cb6 &lt;+334&gt;: vqmovn.s32 d19, q2
     0x161cba &lt;+338&gt;: ldr    r2, [sp, #0x10]
     0x161cbc &lt;+340&gt;: vqadd.u16 q13, q0, q0
     0x161cc0 &lt;+344&gt;: ldr.w  r10, [sp, #0x18]
     0x161cc4 &lt;+348&gt;: vqadd.u16 q14, q1, q0
     0x161cc8 &lt;+352&gt;: adds   r0, r2, r6
     0x161cca &lt;+354&gt;: vqadd.u16 q8, q9, q8
     0x161cce &lt;+358&gt;: ldr.w  r9, [sp, #0x14]
     0x161cd2 &lt;+362&gt;: vqadd.u16 q9, q12, q10
     0x161cd6 &lt;+366&gt;: ldr    r3, [sp, #0xc]
     0x161cd8 &lt;+368&gt;: vqadd.u16 q15, q10, q10
     0x161cdc &lt;+372&gt;: ldr.w  r12, [sp, #0x1c]
     0x161ce0 &lt;+376&gt;: vqadd.u16 q10, q11, q13
     0x161ce4 &lt;+380&gt;: adds   r6, #0x10
     0x161ce6 &lt;+382&gt;: vshl.i16 q11, q14, #0x2
     0x161cea &lt;+386&gt;: vshl.i16 q9, q9, #0x2
     0x161cee &lt;+390&gt;: vqadd.u16 q8, q8, q15
     0x161cf2 &lt;+394&gt;: vqadd.u16 q10, q10, q11
     0x161cf6 &lt;+398&gt;: vqadd.u16 q8, q8, q9
     0x161cfa &lt;+402&gt;: vqrshrn.u16 d19, q10, #0x8
     0x161cfe &lt;+406&gt;: vqrshrn.u16 d18, q8, #0x8
     0x161d02 &lt;+410&gt;: vst1.8 {d18, d19}, [r0]
     0x161d06 &lt;+414&gt;: ldr    r0, [sp, #0x8]
     0x161d08 &lt;+416&gt;: cmp    r6, r0
     0x161d0a &lt;+418&gt;: ble.w  0x161bbc                  ; &lt;+84&gt;
     0x161d0e &lt;+422&gt;: ldr    r4, [r7, #0x8]
     0x161d10 &lt;+424&gt;: bic    r0, r4, #0xf
     0x161d14 &lt;+428&gt;: sub.w  r1, r4, #0x8
     0x161d18 &lt;+432&gt;: cmp    r0, r1
     0x161d1a &lt;+434&gt;: bgt    0x161daa                  ; &lt;+578&gt;
     0x161d1c &lt;+436&gt;: add.w  r6, r11, r0, lsl #2
     0x161d20 &lt;+440&gt;: add.w  lr, r9, r0, lsl #2
     0x161d24 &lt;+444&gt;: vld1.32 {d20, d21}, [r6]!
     0x161d28 &lt;+448&gt;: add.w  r1, r10, r0, lsl #2
     0x161d2c &lt;+452&gt;: add.w  r5, r3, r0, lsl #2
     0x161d30 &lt;+456&gt;: vld1.32 {d16, d17}, [lr]!
     0x161d34 &lt;+460&gt;: vqmovn.s32 d20, q10
     0x161d38 &lt;+464&gt;: vld1.32 {d24, d25}, [r6]
     0x161d3c &lt;+468&gt;: vqmovn.s32 d16, q8
     0x161d40 &lt;+472&gt;: add.w  r6, r12, r0, lsl #2
     0x161d44 &lt;+476&gt;: vld1.32 {d30, d31}, [lr]
     0x161d48 &lt;+480&gt;: vqmovn.s32 d21, q12
     0x161d4c &lt;+484&gt;: vld1.32 {d18, d19}, [r1]!
     0x161d50 &lt;+488&gt;: vqmovn.s32 d17, q15
     0x161d54 &lt;+492&gt;: vld1.32 {d22, d23}, [r5]!
     0x161d58 &lt;+496&gt;: vqmovn.s32 d18, q9
     0x161d5c &lt;+500&gt;: vqadd.u16 q8, q8, q10
     0x161d60 &lt;+504&gt;: vld1.32 {d28, d29}, [r1]
     0x161d64 &lt;+508&gt;: vqmovn.s32 d22, q11
     0x161d68 &lt;+512&gt;: adds   r1, r2, r0
     0x161d6a &lt;+514&gt;: orr    r0, r0, #0x8
     0x161d6e &lt;+518&gt;: vld1.32 {d26, d27}, [r6]!
     0x161d72 &lt;+522&gt;: vqmovn.s32 d19, q14
     0x161d76 &lt;+526&gt;: vld1.32 {d24, d25}, [r5]
     0x161d7a &lt;+530&gt;: vqmovn.s32 d26, q13
     0x161d7e &lt;+534&gt;: vld1.32 {d28, d29}, [r6]
     0x161d82 &lt;+538&gt;: vqmovn.s32 d23, q12
     0x161d86 &lt;+542&gt;: vqadd.u16 q8, q8, q9
     0x161d8a &lt;+546&gt;: vqmovn.s32 d27, q14
     0x161d8e &lt;+550&gt;: vqadd.u16 q10, q9, q9
     0x161d92 &lt;+554&gt;: vqadd.u16 q11, q13, q11
     0x161d96 &lt;+558&gt;: vshl.i16 q8, q8, #0x2
     0x161d9a &lt;+562&gt;: vqadd.u16 q9, q11, q10
     0x161d9e &lt;+566&gt;: vqadd.u16 q8, q9, q8
     0x161da2 &lt;+570&gt;: vqrshrn.u16 d16, q8, #0x8
     0x161da6 &lt;+574&gt;: vst1.8 {d16}, [r1]
     0x161daa &lt;+578&gt;: sub.w  r8, r4, #0x4
     0x161dae &lt;+582&gt;: cmp    r0, r8
     0x161db0 &lt;+584&gt;: bgt    0x161e14                  ; &lt;+684&gt;
     0x161db2 &lt;+586&gt;: mov    r1, r9
     0x161db4 &lt;+588&gt;: add.w  r9, r3, r0, lsl #2
     0x161db8 &lt;+592&gt;: add.w  r3, r11, r0, lsl #2
     0x161dbc &lt;+596&gt;: add.w  r6, r10, r0, lsl #2
     0x161dc0 &lt;+600&gt;: add.w  r5, r1, r0, lsl #2
     0x161dc4 &lt;+604&gt;: add.w  r4, r12, r0, lsl #2
     0x161dc8 &lt;+608&gt;: vld1.32 {d16, d17}, [r5]!
     0x161dcc &lt;+612&gt;: adds   r1, r2, r0
     0x161dce &lt;+614&gt;: adds   r0, #0x4
     0x161dd0 &lt;+616&gt;: vld1.32 {d18, d19}, [r6]!
     0x161dd4 &lt;+620&gt;: cmp    r0, r8
     0x161dd6 &lt;+622&gt;: vadd.i32 q8, q9, q8
     0x161dda &lt;+626&gt;: vld1.32 {d20, d21}, [r3]!
     0x161dde &lt;+630&gt;: vshl.i32 q9, q9, #0x1
     0x161de2 &lt;+634&gt;: vadd.i32 q8, q8, q10
     0x161de6 &lt;+638&gt;: vld1.32 {d22, d23}, [r4]!
     0x161dea &lt;+642&gt;: vadd.i32 q9, q9, q11
     0x161dee &lt;+646&gt;: vld1.32 {d20, d21}, [r9]!
     0x161df2 &lt;+650&gt;: vshl.i32 q8, q8, #0x2
     0x161df6 &lt;+654&gt;: vadd.i32 q9, q9, q10
     0x161dfa &lt;+658&gt;: vadd.i32 q8, q9, q8
     0x161dfe &lt;+662&gt;: vqmovun.s32 d16, q8
     0x161e02 &lt;+666&gt;: vorr   d17, d16, d16
     0x161e06 &lt;+670&gt;: vqrshrn.u16 d16, q8, #0x8
 -&gt;  0x161e0a &lt;+674&gt;: vst1.32 {d16[0]}, [r1:32]
     0x161e0e &lt;+678&gt;: vorr   d0, d0, d0
     0x161e12 &lt;+682&gt;: ble    0x161dc8                  ; &lt;+608&gt;
     0x161e14 &lt;+684&gt;: add    r4, sp, #0x20
     0x161e16 &lt;+686&gt;: vld1.64 {d8, d9}, [r4:128]
     0x161e1a &lt;+690&gt;: sub.w  r4, r7, #0x18
     0x161e1e &lt;+694&gt;: mov    sp, r4
     0x161e20 &lt;+696&gt;: pop.w  {r8, r10, r11}
     0x161e24 &lt;+700&gt;: pop    {r4, r5, r6, r7, pc}
     0x161e26 &lt;+702&gt;: nop    
 
 
 		</comment>
 		<comment id='6' author='ayounes-nviso' date='2019-01-11T15:29:01Z'>
 		
 and registers (including memory address ranges of src / dst buffers)
 
 ?
 		</comment>
 		<comment id='7' author='ayounes-nviso' date='2019-01-11T16:50:39Z'>
 		I'm not sure how to get them with Xcode.
 I managed to reproduce systematically with:
 &lt;denchmark-code&gt;int test() {
     auto img0 = cv::Mat::zeros(9, 9, CV_8U);
     auto img1 = cv::Mat{};
     cv::pyrDown(img0, img1);
     return cv::sum(img1)[0];
 }
 &lt;/denchmark-code&gt;
 
 		</comment>
 		<comment id='8' author='ayounes-nviso' date='2019-01-11T16:55:02Z'>
 		General Purpose Registers:
 &lt;denchmark-code&gt;        r0 = 0x00000004
         r1 = 0x1f089cf0
         r2 = 0x176cbf05
         r3 = 0x176cbf05
         r4 = 0x1f089d30
         r5 = 0x1f089df0
         r6 = 0x1f089db0
         r7 = 0x1f0897d8
         r8 = 0x00000001
         r9 = 0x1f089d70
        r10 = 0x1f089d60
        r11 = 0x1f089ce0
        r12 = 0x66666667
         sp = 0x1f089790
         lr = 0x005c87e9  spell`void cv::pyrDown_&lt;cv::FixPtCast&lt;unsigned char, 8&gt;, cv::PyrDownVec_32s8u&gt;(cv::Mat const&amp;, cv::Mat&amp;, int) + 3609
         pc = 0x005d0c16  spell`cv::PyrDownVec_32s8u::operator()(int**, unsigned char*, int, int) const + 666
       cpsr = 0x20000030
 &lt;/denchmark-code&gt;
 
 &lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;
 
 &lt;denchmark-code&gt;    0x5d0c0a &lt;+654&gt;: vqmovun.s32 d16, q8
     0x5d0c0e &lt;+658&gt;: vorr   d17, d16, d16
     0x5d0c12 &lt;+662&gt;: vqrshrn.u16 d16, q8, #0x8
 -&gt;  0x5d0c16 &lt;+666&gt;: vst1.32 {d16[0]}, [r3:32]
     0x5d0c1a &lt;+670&gt;: vorr   d0, d0, d0
     0x5d0c1e &lt;+674&gt;: ble    0x5d0bd4                  ; &lt;+600&gt;
     0x5d0c20 &lt;+676&gt;: add    r4, sp, #0x20
     0x5d0c22 &lt;+678&gt;: vld1.64 {d8, d9}, [r4:128]
 &lt;/denchmark-code&gt;
 
 		</comment>
 		<comment id='9' author='ayounes-nviso' date='2019-01-14T13:03:53Z'>
 		&lt;denchmark-link:https://github.com/ayounes-nviso&gt;@ayounes-nviso&lt;/denchmark-link&gt;
 
 "Inplace" processing has very limited support in OpenCV.
 Please try this code:
 -cv::pyrDown(m, m);
 +Mar res
 +cv::pyrDown(m, res);
 		</comment>
 		<comment id='10' author='ayounes-nviso' date='2019-01-14T13:19:42Z'>
 		&lt;denchmark-link:https://github.com/arnaudbrejeon&gt;@arnaudbrejeon&lt;/denchmark-link&gt;
  Thank you! Looks like there is alignment issue.
 
 0x5d0c16 &lt;+666&gt;: vst1.32 {d16[0]}, [r3:32]
 r3 = 0x176cbf05
 
 &lt;denchmark-h:hr&gt;&lt;/denchmark-h&gt;
 
 I tried this test on ARM devices (Linux):
 
 code: alalek@check_1
 ARMv7: http://pullrequest.opencv.org/buildbot/builders/precommit_armv7/builds/11459
 ARMv8: http://pullrequest.opencv.org/buildbot/builders/precommit_armv8/builds/11346
 
 Issues is not reproduced (GCC compiler).
 I don't have development configuration setup for iOS devices.
 I will try Android later with ARMv7 (NEON).
 		</comment>
 		<comment id='11' author='ayounes-nviso' date='2019-01-14T13:31:20Z'>
 		&lt;denchmark-link:https://github.com/arnaudbrejeon&gt;@arnaudbrejeon&lt;/denchmark-link&gt;
  Could you try this:
 -*(int*)(dst + x) = ...
 +*(__packed int*)(dst + x) = ...
 Details is &lt;denchmark-link:http://infocenter.arm.com/help/index.jsp?topic=/com.arm.doc.faqs/ka15414.html&gt;here&lt;/denchmark-link&gt;
 .
 		</comment>
 		<comment id='12' author='ayounes-nviso' date='2019-01-15T02:01:43Z'>
 		On iOS, I'm using clang and __packed is not supported (compilation error).
 I tried to replace it with __attribute__((aligned(1))) but it didn't solve the crash.
 		</comment>
 		<comment id='13' author='ayounes-nviso' date='2019-01-15T02:07:05Z'>
 		Took me a while to figure it out, but it doesn't crash anymore with:
 &lt;denchmark-code&gt;            typedef int unaligned_int __attribute__((aligned(1)));
             *((unaligned_int*) (dst + x)) =
                 v_reinterpret_as_s32(v_rshr_pack&lt;8&gt;(v_pack_u(t0, t0), v_setzero_u16())).get0();
 &lt;/denchmark-code&gt;
 
 		</comment>
 		<comment id='14' author='ayounes-nviso' date='2019-01-15T15:50:24Z'>
 		Sorry for not following up in this debugging. But anyway I am happy that Arnaud managed to reproduce and fix!
 Thanks
 		</comment>
 		<comment id='15' author='ayounes-nviso' date='2019-01-24T18:24:15Z'>
 		I created a PR to fix the bug.
 		</comment>
 	</comments>
 </bug>
<commit id='d998e70a2504e9238780d87aa6f501e38adb89d3' author='Arnaud Brejeon' date='2019-01-28 21:36:00+03:00'>
 	<dmm_unit complexity='1.0' interfacing='0.875' size='0.875'></dmm_unit>
 	<modification change_type='MODIFY' old_name='modules\imgproc\src\pyramids.cpp' new_name='modules\imgproc\src\pyramids.cpp'>
 		<file_info nloc='1010' complexity='214' token_count='10588'></file_info>
 		<method name='cv::PyrDownVec_32s8u::operator ( )' parameters='src,dst,int,width'>
 				<method_info nloc='47' complexity='4' token_count='816' nesting_level='2' start_line='81' end_line='130'></method_info>
 			<added_lines>115,126</added_lines>
 			<deleted_lines>125</deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines></added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 	<modification change_type='MODIFY' old_name='modules\imgproc\test\test_filter.cpp' new_name='modules\imgproc\test\test_filter.cpp'>
 		<file_info nloc='1735' complexity='345' token_count='17928'></file_info>
 		<method name='opencv_test::TEST' parameters='Imgproc_Pyrdown,issue_12961'>
 				<method_info nloc='7' complexity='1' token_count='51' nesting_level='2' start_line='2239' end_line='2245'></method_info>
 			<added_lines>2239,2240,2241,2242,2243,2244,2245</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines>2238,2246</added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 </commit>
</bug_data>
