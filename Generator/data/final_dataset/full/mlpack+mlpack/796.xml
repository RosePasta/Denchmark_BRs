<bug_data>
<bug id='796' author='thejonan' open_date='2016-10-05T12:57:37Z' closed_time='2016-10-05T17:14:17Z'>
 	<summary>`target_compile_features` from NewCXX11.cmake produce an error with LLVM's clang</summary>
 	<description>
 Trying to build mlpack with OpenMP support on MacOS X (10.11.6) led me to using &lt;denchmark-link:http://www.llvm.org&gt;llvm&lt;/denchmark-link&gt;
 's clang (installed via &lt;denchmark-link:http://brew.sh&gt;Homebrew&lt;/denchmark-link&gt;
  ). With appropriate  command that almost worked:
 &lt;denchmark-code&gt;LDFLAGS=-L/usr/local/opt/llvm/lib CFLAGS=-I/usr/local/opt/llvm/include CPPFLAGS=-I/usr/local/opt/llvm/include\ -std=c++0x cmake -D CMAKE_C_COMPILER=clang-omp -D CMAKE_CXX_COMPILER=clang-omp++ ../
 &lt;/denchmark-code&gt;
 
 (clang-omp and clang-omp++ are symlinks to llvm's binaries).
 However, there was an error referring to target_compile_features directive in CMake/NewCXX11.cmake file:
 &lt;denchmark-code&gt;CMake Error at CMake/NewCXX11.cmake:4 (target_compile_features):
   target_compile_features no known features for CXX compiler
 
   "Clang"
 
   version 3.8.1.
 &lt;/denchmark-code&gt;
 
 	</description>
 	<comments>
 		<comment id='1' author='thejonan' date='2016-10-05T14:02:37Z'>
 		Ugh: &lt;denchmark-link:http://stackoverflow.com/questions/28119552/no-known-features-for-cxx-compiler-when-compiling-with-msvc-2013&gt;http://stackoverflow.com/questions/28119552/no-known-features-for-cxx-compiler-when-compiling-with-msvc-2013&lt;/denchmark-link&gt;
 
 Looks like what I will have to do is add a flag you can specify to CMake to force CMake to believe that the compiler is a C++11 compiler and bypass the check in NewCXX11.cmake.
 		</comment>
 		<comment id='2' author='thejonan' date='2016-10-05T14:07:18Z'>
 		Sounds like it can help. However, I've tried manually adding the -std=c++11 flag to CPPFLAGS when invoking cmake. No success.
 		</comment>
 		<comment id='3' author='thejonan' date='2016-10-05T14:13:11Z'>
 		Sorry, I've just made another test and this time it worked, so yes your suggestion will do the job.
 Here's what I did:
 
 Commented NewCXX11.cmake inclusion as before
 Added -D "CMAKE_CXX_FLAGS=-I/usr/local/opt/llvm/include -std=c++11" to cmake-'s arguments.
 
 		</comment>
 		<comment id='4' author='thejonan' date='2016-10-05T14:14:19Z'>
 		Yep, that will work.  I am writing up a patch now to make this easier and I will let you know when it's done and how it works.
 		</comment>
 		<comment id='5' author='thejonan' date='2016-10-05T17:14:16Z'>
 		Okay, I added some changes that should fix this issue.  If the compiler is not detected as a valid C++11 compiler, you can do specify the -DFORCE_CXX11=ON option and that will force CMake to treat the C++ compiler as having valid C++11 support.  You may also need to specify extra CXXFLAGS like with -DCMAKE_CXX_FLAGS="-std=c++11" or something like that.  Let me know if there are any problems with that.
 		</comment>
 		<comment id='6' author='thejonan' date='2016-10-05T19:52:44Z'>
 		Successfully building. Thanks.
 		</comment>
 	</comments>
 </bug>
<commit id='a2d45ebc93d175602500df8136d54328399e40a8' author='Ryan Curtin' date='2016-10-05 10:19:45-04:00'>
 	<dmm_unit complexity='None' interfacing='None' size='None'></dmm_unit>
 	<modification change_type='MODIFY' old_name='CMakeLists.txt' new_name='CMakeLists.txt'>
 		<file_info nloc='None' complexity='None' token_count='None'></file_info>
 		<modified_lines>
 			<added_lines>19,20,21,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43</added_lines>
 			<deleted_lines>4,5,6,7,8,9,10,11,12,13,14,15,16,17,18</deleted_lines>
 		</modified_lines>
 	</modification>
 	<modification change_type='MODIFY' old_name='src\mlpack\CMakeLists.txt' new_name='src\mlpack\CMakeLists.txt'>
 		<file_info nloc='None' complexity='None' token_count='None'></file_info>
 		<modified_lines>
 			<added_lines></added_lines>
 			<deleted_lines>26,27,28,29,30</deleted_lines>
 		</modified_lines>
 	</modification>
 </commit>
</bug_data>
