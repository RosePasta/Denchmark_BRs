<bug_data>
<bug id='407' author='fepegar' open_date='2021-01-01T18:39:20Z' closed_time='2021-01-01T19:14:54Z'>
 	<summary>RuntimeError: Can only calculate the mean of floating types. Got Short instead</summary>
 	<description>
 üêõBug
 From the inference notebook.
 To reproduce
 # From NiftyNet model zoo
 LI_LANDMARKS = "4.4408920985e-16 8.06305571158 15.5085721044 18.7007018006 21.5032879029 26.1413278906 29.9862059045 33.8384058795 38.1891334787 40.7217966068 44.0109152758 58.3906435207 100.0"
 li_landmarks = np.array([float(n) for n in LI_LANDMARKS.split()])
 
 transforms = [
     tio.ToCanonical(),
     tio.Resample(1),
     tio.HistogramStandardization(landmarks={'t1': li_landmarks}, masking_method=tio.ZNormalization.mean),
     tio.ZNormalization(masking_method=tio.ZNormalization.mean),
 ]
 transform = tio.Compose(transforms)
 preprocessed = transform(subject)
 ---------------------------------------------------------------------------
 RuntimeError                              Traceback (most recent call last)
 &lt;ipython-input-5-f7eeffa30bdc&gt; in &lt;module&gt;()
      10 ]
      11 transform = tio.Compose(transforms)
 ---&gt; 12 preprocessed = transform(subject)
 
 5 frames
 /usr/local/lib/python3.6/dist-packages/torchio/transforms/transform.py in __call__(self, data)
     100             subject = copy.copy(subject)
     101         with np.errstate(all='raise'):
 --&gt; 102             transformed = self.apply_transform(subject)
     103         self.add_transform_to_subject_history(transformed)
     104         for image in transformed.get_images(intensity_only=False):
 
 /usr/local/lib/python3.6/dist-packages/torchio/transforms/augmentation/composition.py in apply_transform(self, subject)
      44     def apply_transform(self, subject: Subject) -&gt; Subject:
      45         for transform in self.transforms:
 ---&gt; 46             subject = transform(subject)
      47         return subject
      48 
 
 /usr/local/lib/python3.6/dist-packages/torchio/transforms/transform.py in __call__(self, data)
     100             subject = copy.copy(subject)
     101         with np.errstate(all='raise'):
 --&gt; 102             transformed = self.apply_transform(subject)
     103         self.add_transform_to_subject_history(transformed)
     104         for image in transformed.get_images(intensity_only=False):
 
 /usr/local/lib/python3.6/dist-packages/torchio/transforms/preprocessing/intensity/normalization_transform.py in apply_transform(self, subject)
      46     def apply_transform(self, subject: Subject) -&gt; Subject:
      47         for image_name, image in self.get_images_dict(subject).items():
 ---&gt; 48             mask = Transform.get_mask(self.masking_method, subject, image.data)
      49             self.apply_normalization(subject, image_name, mask)
      50         return subject
 
 /usr/local/lib/python3.6/dist-packages/torchio/transforms/transform.py in get_mask(masking_method, subject, tensor)
     394             return Transform.ones(tensor)
     395         elif callable(masking_method):
 --&gt; 396             return masking_method(tensor)
     397         elif type(masking_method) is str:
     398             if masking_method in subject and isinstance(subject[masking_method], LabelMap):
 
 /usr/local/lib/python3.6/dist-packages/torchio/transforms/transform.py in mean(tensor)
     386     @staticmethod
     387     def mean(tensor: torch.Tensor) -&gt; torch.Tensor:
 --&gt; 388         mask = tensor &gt; tensor.mean()
     389         return mask
     390 
 
 RuntimeError: Can only calculate the mean of floating types. Got Short instead.
 TorchIO version
 0.18.14
 	</description>
 	<comments>
 	</comments>
 </bug>
<commit id='21f03117f213caa0c46c6d45a7dfd9afad4be823' author='Fernando P√©rez-Garc√≠a' date='2021-01-01 19:14:53+00:00'>
 	<dmm_unit complexity='1.0' interfacing='1.0' size='1.0'></dmm_unit>
 	<modification change_type='MODIFY' old_name='tests\transforms\preprocessing\test_z_normalization.py' new_name='tests\transforms\preprocessing\test_z_normalization.py'>
 		<file_info nloc='20' complexity='3' token_count='183'></file_info>
 		<method name='test_dtype' parameters='self'>
 				<method_info nloc='6' complexity='1' token_count='56' nesting_level='1' start_line='20' end_line='26'></method_info>
 			<added_lines>20,21,22,23,24,25,26</added_lines>
 			<deleted_lines></deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines>19</added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 	<modification change_type='MODIFY' old_name='torchio\transforms\preprocessing\intensity\histogram_standardization.py' new_name='torchio\transforms\preprocessing\intensity\histogram_standardization.py'>
 		<file_info nloc='248' complexity='12' token_count='1208'></file_info>
 		<modified_lines>
 			<added_lines>163,169,170,171</added_lines>
 			<deleted_lines>162,164,170,171</deleted_lines>
 		</modified_lines>
 	</modification>
 	<modification change_type='MODIFY' old_name='torchio\transforms\transform.py' new_name='torchio\transforms\transform.py'>
 		<file_info nloc='427' complexity='58' token_count='2003'></file_info>
 		<method name='mean' parameters='Tensor'>
 				<method_info nloc='3' complexity='1' token_count='28' nesting_level='1' start_line='400' end_line='402'></method_info>
 			<added_lines>401</added_lines>
 			<deleted_lines>401</deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines></added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 </commit>
</bug_data>
