<bug_data>
<bug id='392' author='andfoy' open_date='2018-07-20T19:05:11Z' closed_time='2018-07-23T19:04:28Z'>
 	<summary>Error broadcasting Adam optimizer parameters on PyTorch</summary>
 	<description>
 Thanks for your great work on horovod, it is a great library that speeds up our training processes significatively.
 I've tried to use the novel hvd.broadcast_optimizer_state function introduced on 0.13.10, however, it seems to fail on optimizers different from torch.optim.SGD, because they seem to define additional model parameters that are not necessarily of type torch.tensor.
 For instance, if I try to use Adam as optimizer (As shown on the example snippet), the function will fail with the following traceback:
 optimizer = optim.Adam(net.parameters(), lr=args.lr * args.nodes)
 optimizer = hvd.DistributedOptimizer(
     optimizer, named_parameters=net.named_parameters())
 
 if osp.exists(args.optim_snapshot) and args.rank == 0:
     optimizer.load_state_dict(torch.load(args.optim_snapshot))
 
 hvd.broadcast_optimizer_state(optimizer, root_rank=0)
 &lt;denchmark-code&gt;File "/media/SSD1/score-textseg/ref_score_net/train.py", line 327, in &lt;module&gt;
     hvd.broadcast_optimizer_state(optimizer, root_rank=0)
   File "/home/eamargffoy/anaconda3/envs/parallel/lib/python3.6/site-packages/horovod/torch/__init__.py", line 199, in broadcast_optimizer_state
     broadcast_parameters(params, root_rank)
   File "/home/eamargffoy/anaconda3/envs/parallel/lib/python3.6/site-packages/horovod/torch/__init__.py", line 152, in broadcast_parameters
     handle = broadcast_async_(p, root_rank, name)
   File "/home/eamargffoy/anaconda3/envs/parallel/lib/python3.6/site-packages/horovod/torch/mpi_ops.py", line 348, in broadcast_async_
     return _broadcast_async(tensor, tensor, root_rank, name)
   File "/home/eamargffoy/anaconda3/envs/parallel/lib/python3.6/site-packages/horovod/torch/mpi_ops.py", line 256, in _broadcast_async
     function = _check_function(_broadcast_function_factory, tensor)
   File "/home/eamargffoy/anaconda3/envs/parallel/lib/python3.6/site-packages/horovod/torch/mpi_ops.py", line 39, in _check_function
     function = function_factory(tensor)
   File "/home/eamargffoy/anaconda3/envs/parallel/lib/python3.6/site-packages/horovod/torch/mpi_ops.py", line 252, in _broadcast_function_factory
     return 'horovod_torch_broadcast_async_' + tensor.type().replace('.', '_')
 AttributeError: 'int' object has no attribute 'type'
 &lt;/denchmark-code&gt;
 
 I would like to know if the above appreciation is the cause of such failure, and if it is, if I can contribute to the project by fixing it.
 Thanks in advance.
 	</description>
 	<comments>
 		<comment id='1' author='andfoy' date='2018-07-21T04:37:48Z'>
 		&lt;denchmark-link:https://github.com/andfoy&gt;@andfoy&lt;/denchmark-link&gt;
 , thanks for reporting this issue!
 cc &lt;denchmark-link:https://github.com/tgaddair&gt;@tgaddair&lt;/denchmark-link&gt;
  - we should definitely fix it, and contributions are certainly welcome.
 		</comment>
 		<comment id='2' author='andfoy' date='2018-07-21T21:33:27Z'>
 		Hey &lt;denchmark-link:https://github.com/andfoy&gt;@andfoy&lt;/denchmark-link&gt;
 , thanks for raising this issue! Please take a look at &lt;denchmark-link:https://github.com/horovod/horovod/pull/395&gt;#395&lt;/denchmark-link&gt;
  if you get a chance and let me know if it fixes the issue for your model.
 &lt;denchmark-link:https://github.com/alsrgv&gt;@alsrgv&lt;/denchmark-link&gt;
  Given the hackiness of dealing with optimizer state and all its exceptions, I think the best longterm solution may be to go back to simply serializing/deserializing the  into a blob with  once we drop support for v0.3.0.
 		</comment>
 		<comment id='3' author='andfoy' date='2018-07-22T19:03:21Z'>
 		&lt;denchmark-link:https://github.com/tgaddair&gt;@tgaddair&lt;/denchmark-link&gt;
  I've tried PR &lt;denchmark-link:https://github.com/horovod/horovod/pull/395&gt;#395&lt;/denchmark-link&gt;
  and it seems to be working as expected! I think you can mark this issue as fixed
 		</comment>
 		<comment id='4' author='andfoy' date='2018-07-23T18:51:14Z'>
 		&lt;denchmark-link:https://github.com/tgaddair&gt;@tgaddair&lt;/denchmark-link&gt;
 , sounds good.  We'll just need to make sure broadcasting mechanics works for very large objects (vanilla MPI is limited to 2GB) and doesn't consume too much RAM.
 		</comment>
 		<comment id='5' author='andfoy' date='2018-07-23T19:04:28Z'>
 		Thanks &lt;denchmark-link:https://github.com/andfoy&gt;@andfoy&lt;/denchmark-link&gt;
 !  &lt;denchmark-link:https://github.com/horovod/horovod/pull/395&gt;#395&lt;/denchmark-link&gt;
  has been landed, so marking this as resolved.
 		</comment>
 	</comments>
 </bug>
<commit id='5a526531132326699913e7debba6b97b906723b8' author='Travis Addair' date='2018-07-23 12:03:35-07:00'>
 	<dmm_unit complexity='0.0' interfacing='0.9565217391304348' size='0.2608695652173913'></dmm_unit>
 	<modification change_type='MODIFY' old_name='horovod\torch\__init__.py' new_name='horovod\torch\__init__.py'>
 		<file_info nloc='110' complexity='37' token_count='880'></file_info>
 		<method name='broadcast_optimizer_state.broadcast_optimizer_state._create_callback._from_tensor' parameters=''>
 				<method_info nloc='2' complexity='1' token_count='26' nesting_level='2' start_line='196' end_line='197'></method_info>
 			<added_lines>196,197</added_lines>
 			<deleted_lines>196,197</deleted_lines>
 		</method>
 		<method name='broadcast_optimizer_state' parameters='optimizer,root_rank'>
 				<method_info nloc='30' complexity='11' token_count='246' nesting_level='0' start_line='160' end_line='227'></method_info>
 			<added_lines>169,170,171,172,173,174,188,191,192,193,194,195,196,197,198,199,210,211,212,213,214,215,216,217,219,220,221,223,224,225,226,227</added_lines>
 			<deleted_lines>168,169,196,197</deleted_lines>
 		</method>
 		<method name='broadcast_optimizer_state._create_callback' parameters='pid,name,t,p'>
 				<method_info nloc='3' complexity='1' token_count='15' nesting_level='1' start_line='195' end_line='198'></method_info>
 			<added_lines>195,196,197,198</added_lines>
 			<deleted_lines>196,197</deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines></added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 	<modification change_type='MODIFY' old_name='test\test_torch.py' new_name='test\test_torch.py'>
 		<file_info nloc='593' complexity='128' token_count='5042'></file_info>
 		<method name='test_broadcast_state.get_model_param_values' parameters='model'>
 				<method_info nloc='3' complexity='2' token_count='37' nesting_level='2' start_line='678' end_line='680'></method_info>
 			<added_lines>678,679,680</added_lines>
 			<deleted_lines>678,680</deleted_lines>
 		</method>
 		<method name='test_broadcast_state.new_optimizer' parameters='cls'>
 				<method_info nloc='6' complexity='3' token_count='50' nesting_level='2' start_line='695' end_line='700'></method_info>
 			<added_lines>695,696,697,698,700</added_lines>
 			<deleted_lines>695,696,697,698,699,700</deleted_lines>
 		</method>
 		<method name='test_broadcast_state.get_model_param_value' parameters='model'>
 				<method_info nloc='2' complexity='1' token_count='18' nesting_level='2' start_line='677' end_line='678'></method_info>
 			<added_lines>678</added_lines>
 			<deleted_lines>677,678</deleted_lines>
 		</method>
 		<method name='test_broadcast_state.create_model' parameters='create_opt'>
 				<method_info nloc='10' complexity='1' token_count='70' nesting_level='2' start_line='665' end_line='676'></method_info>
 			<added_lines>665,672</added_lines>
 			<deleted_lines>671</deleted_lines>
 		</method>
 		<method name='test_broadcast_state' parameters='self'>
 				<method_info nloc='78' complexity='15' token_count='603' nesting_level='1' start_line='658' end_line='779'></method_info>
 			<added_lines>665,672,678,679,680,682,683,685,686,687,688,689,690,691,692,693,694,695,696,697,698,700,701,702,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720,721,722,723,724,725,726,727,728,729,730,731,732,733,734,735,736,737,738,739,740,741,742,743,744,745,746,747,748,749,750,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779</added_lines>
 			<deleted_lines>664,671,677,678,680,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,700,701,703,704,705,706,707,708,709,710,711,712,713,714,715,716,717,718,719,720</deleted_lines>
 		</method>
 		<method name='test_broadcast_state.create_model' parameters=''>
 				<method_info nloc='10' complexity='1' token_count='89' nesting_level='2' start_line='664' end_line='675'></method_info>
 			<added_lines>665,672</added_lines>
 			<deleted_lines>664,671</deleted_lines>
 		</method>
 		<method name='test_broadcast_state.get_optimizer_param_value' parameters='optimizer'>
 				<method_info nloc='4' complexity='1' token_count='42' nesting_level='2' start_line='680' end_line='683'></method_info>
 			<added_lines>680,682,683</added_lines>
 			<deleted_lines>680,682,683</deleted_lines>
 		</method>
 		<method name='test_broadcast_state.get_optimizer_param_values' parameters='optimizer'>
 				<method_info nloc='10' complexity='5' token_count='80' nesting_level='2' start_line='682' end_line='691'></method_info>
 			<added_lines>682,683,685,686,687,688,689,690,691</added_lines>
 			<deleted_lines>682,683,684,685,686,687,688,689,690,691</deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines>20</added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 </commit>
</bug_data>
