<bug_data>
<bug id='2424' author='yingzhu146' open_date='2020-12-16T04:30:00Z' closed_time='2020-12-17T09:29:17Z'>
 	<summary>Compilation on osx-arm64 apple silicon m1</summary>
 	<description>
 &lt;denchmark-h:h2&gt;üêõ Bug&lt;/denchmark-h&gt;
 
 Trying to compile from source on the new macbook air with arm64e.
 &lt;denchmark-h:h2&gt;To Reproduce&lt;/denchmark-h&gt;
 
 mkdir build
 cd build
 cmake ..
 make -j 8
 &lt;denchmark-code&gt;/Users/yingzhu/dgl/include/intel/cpu_support.h:70:16: error: no type named 'Reg64' in namespace 'Xbyak'
   const Xbyak::Reg64 &amp;r_out_;
         ~~~~~~~^
 /Users/yingzhu/dgl/include/intel/cpu_support.h:71:16: error: no type named 'Reg64' in namespace 'Xbyak'
   const Xbyak::Reg64 &amp;r_left_;
         ~~~~~~~^
 /Users/yingzhu/dgl/include/intel/cpu_support.h:72:16: error: no type named 'Reg64' in namespace 'Xbyak'
   const Xbyak::Reg64 &amp;r_right;
         ~~~~~~~^
 /Users/yingzhu/dgl/include/intel/cpu_support.h:73:16: error: no type named 'Reg64' in namespace 'Xbyak'
   const Xbyak::Reg64 &amp;r_size_;
         ~~~~~~~^
 /Users/yingzhu/dgl/include/intel/cpu_support.h:156:42: error: use of undeclared identifier 'r9'
     alias_load&lt;IType&gt;(zmm0, ptr[r_out_ + r9 * sizeof(IType)]);
                                         ^
 &lt;/denchmark-code&gt;
 
 &lt;denchmark-h:h2&gt;Expected behavior&lt;/denchmark-h&gt;
 
 Build without error
 &lt;denchmark-h:h2&gt;Environment&lt;/denchmark-h&gt;
 
 
 DGL Version from master
 Backend Library &amp; Version pytorch 1.7 installed
 OS (e.g., Linux): osx-arm64
 How you installed DGL (conda, pip, source): source
 Build command you used (if compiling from source): see above
 Python version: 3.8.5
 CUDA/cuDNN version (if applicable): na
 GPU models and configuration (e.g. V100): na
 Any other relevant information:
 
 &lt;denchmark-h:h2&gt;Additional context&lt;/denchmark-h&gt;
 
 It clearly tries to use intel-specifc code - is there support for arm? i would expect 80% of all mac users to switch to arm in the next 5 years
 	</description>
 	<comments>
 		<comment id='1' author='yingzhu146' date='2020-12-16T17:58:35Z'>
 		Yes that's related to intel-specific optimizations (use AVX instructions, see &lt;denchmark-link:https://github.com/dmlc/dgl/pull/2309&gt;#2309&lt;/denchmark-link&gt;
  ). Actually we should only include this header when a intel CPU with avx support is detected, I'll fix it soon.
 		</comment>
 		<comment id='2' author='yingzhu146' date='2020-12-16T21:30:18Z'>
 		&lt;denchmark-link:https://github.com/yzh119&gt;@yzh119&lt;/denchmark-link&gt;
  thanks keep me posted. sorry for being dense but setting  doesn't work for me - any other way to disable this so I can build in mean time?
 		</comment>
 		<comment id='3' author='yingzhu146' date='2020-12-17T02:12:54Z'>
 		DGL_CPU_INTEL_KERNEL_ENABLED=0 only controls whether to use AVX optimized operator at runtime instead of compile time, I'll set a cmake flag to indicate whether to include the header at compile time.
 		</comment>
 		<comment id='4' author='yingzhu146' date='2020-12-17T05:38:54Z'>
 		&lt;denchmark-link:https://github.com/yingzhu146&gt;@yingzhu146&lt;/denchmark-link&gt;
  does &lt;denchmark-link:https://github.com/dmlc/dgl/pull/2428&gt;#2428&lt;/denchmark-link&gt;
  work in your case? (checkout the  branch in my fork).
 		</comment>
 		<comment id='5' author='yingzhu146' date='2020-12-17T13:34:38Z'>
 		&lt;denchmark-link:https://github.com/yzh119&gt;@yzh119&lt;/denchmark-link&gt;
  yes that worked perfectly thanks a lot for the help!
 		</comment>
 	</comments>
 </bug>
<commit id='e379e52585e2d9a8b416dd5b3f909af7824dc562' author='Zihao Ye' date='2020-12-17 17:29:15+08:00'>
 	<dmm_unit complexity='None' interfacing='None' size='None'></dmm_unit>
 	<modification change_type='MODIFY' old_name='CMakeLists.txt' new_name='CMakeLists.txt'>
 		<file_info nloc='None' complexity='None' token_count='None'></file_info>
 		<modified_lines>
 			<added_lines>27,112,113,114,115</added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 	<modification change_type='MODIFY' old_name='cmake\config.cmake' new_name='cmake\config.cmake'>
 		<file_info nloc='None' complexity='None' token_count='None'></file_info>
 		<modified_lines>
 			<added_lines>42,43,44</added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 	<modification change_type='MODIFY' old_name='src\array\cpu\spmm.h' new_name='src\array\cpu\spmm.h'>
 		<file_info nloc='177' complexity='68' token_count='1978'></file_info>
 		<method name='dgl::aten::cpu::SpMMSumCsr' parameters='bcast,csr,ufeat,efeat,out'>
 				<method_info nloc='48' complexity='22' token_count='538' nesting_level='3' start_line='35' end_line='95'></method_info>
 			<added_lines>46,68,69,91,93,94</added_lines>
 			<deleted_lines>65,88</deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines>16,18,19</added_lines>
 			<deleted_lines>17</deleted_lines>
 		</modified_lines>
 	</modification>
 	<modification change_type='MODIFY' old_name='tests\cpp\test_spmm.cc' new_name='tests\cpp\test_spmm.cc'>
 		<file_info nloc='252' complexity='53' token_count='2132'></file_info>
 		<modified_lines>
 			<added_lines>2,317,318</added_lines>
 			<deleted_lines>316</deleted_lines>
 		</modified_lines>
 	</modification>
 </commit>
</bug_data>
