<bug_data>
<bug id='29744' author='colinfang' open_date='2019-11-13T20:00:25Z' closed_time='2020-01-31T00:58:37Z'>
 	<summary>CuDNN batchnorm has batch size limit for eval with channel</summary>
 	<description>
 &lt;denchmark-code&gt;torch.backends.cudnn.version()
 # 7603
 torch.version.cuda
 # 10.1.243
 # pytorch version 1.3
 &lt;/denchmark-code&gt;
 
 x = torch.rand(70000, 1, 2).cuda()
 
 bn = nn.BatchNorm1d(1)
 bn.cuda()
 bn.eval()
 
 xbn = bn(x)
 xbn.size()
 
 # RuntimeError: cuDNN error: CUDNN_STATUS_NOT_SUPPORTED. This error may appear if you passed in a non-contiguous input.
 The above works if the batch size is 60000, or it is in training mode, or the input is 2d (no channel) instead of 3d.
 &lt;denchmark-link:https://github.com/pytorch/pytorch/issues/2917&gt;#2917&lt;/denchmark-link&gt;
  might be related
 cc &lt;denchmark-link:https://github.com/ngimel&gt;@ngimel&lt;/denchmark-link&gt;
 
 	</description>
 	<comments>
 		<comment id='1' author='colinfang' date='2019-11-14T18:16:04Z'>
 		Have you tried running your code with  as in &lt;denchmark-link:https://github.com/pytorch/pytorch/issues/2917&gt;#2917&lt;/denchmark-link&gt;
 ? Have you tried running the same code as &lt;denchmark-link:https://github.com/pytorch/pytorch/issues/2917&gt;#2917&lt;/denchmark-link&gt;
 ?
 &lt;denchmark-code&gt;import torch
 import torch.nn as nn
 from torch.autograd import Variable
 
 torch.backends.cudnn.enabled=True
 x = Variable(torch.rand(140000,1).contiguous()).cuda()
 
 print (torch.backends.cudnn.version())
 
 bn = nn.BatchNorm1d(1)
 bn.cuda()
 
 xbn = bn(x)
 xbn.size()
 &lt;/denchmark-code&gt;
 
 For completeness, please copy and paste the output from our environment collection script:
 &lt;denchmark-code&gt;wget https://raw.githubusercontent.com/pytorch/pytorch/master/torch/utils/collect_env.py
 # For security purposes, please check the contents of collect_env.py before running it.
 python collect_env.py
 &lt;/denchmark-code&gt;
 
 		</comment>
 		<comment id='2' author='colinfang' date='2019-11-14T19:23:13Z'>
 		cc: &lt;denchmark-link:https://github.com/csarofeen&gt;@csarofeen&lt;/denchmark-link&gt;
  &lt;denchmark-link:https://github.com/ptrblck&gt;@ptrblck&lt;/denchmark-link&gt;
 
 		</comment>
 		<comment id='3' author='colinfang' date='2019-11-25T12:49:48Z'>
 		Code in &lt;denchmark-link:https://github.com/pytorch/pytorch/issues/2917&gt;#2917&lt;/denchmark-link&gt;
  runs well for me.
 Switching to x = torch.rand(70000, 1, 2).contiguous().cuda() still triggers the same error in my example.
 &lt;denchmark-code&gt;python collect_env.py
 
 Collecting environment information...
 PyTorch version: 1.3.0
 Is debug build: No
 CUDA used to build PyTorch: 10.1.243
 
 OS: Ubuntu 18.04.2 LTS
 GCC version: (Ubuntu 7.4.0-1ubuntu1~18.04.1) 7.4.0
 CMake version: version 3.10.2
 
 Python version: 3.7
 Is CUDA available: Yes
 CUDA runtime version: Could not collect
 GPU models and configuration: 
 GPU 0: TITAN X (Pascal)
 GPU 1: TITAN Xp
 GPU 2: TITAN X (Pascal)
 GPU 3: TITAN Xp
 
 Nvidia driver version: 418.67
 cuDNN version: /usr/local/cuda-9.0/targets/x86_64-linux/lib/libcudnn.so.7.1.3
 
 Versions of relevant libraries:
 [pip] numpy==1.17.3
 [pip] torch==1.3.0
 [pip] torchvision==0.4.1a0+d94043a
 [conda] mkl                       2019.4                      243  
 [conda] pytorch                   1.3.0           py3.7_cuda10.1.243_cudnn7.6.3_0    pytorch
 [conda] torchvision               0.4.1                py37_cu101    pytorch
 &lt;/denchmark-code&gt;
 
 I also have conda installed cudatoolkit with version   10.1.243
 BTW the cuDNN version is wrong above, I think pytorch binary comes with statically linked cudnn.
 &lt;denchmark-code&gt;torch.backends.cudnn.version()
 # 7603
 &lt;/denchmark-code&gt;
 
 		</comment>
 		<comment id='4' author='colinfang' date='2019-11-26T16:11:49Z'>
 		&lt;denchmark-link:https://github.com/csarofeen&gt;@csarofeen&lt;/denchmark-link&gt;
 , &lt;denchmark-link:https://github.com/ptrblck&gt;@ptrblck&lt;/denchmark-link&gt;
  can you please look up conditions under which cudnn can be used (in training/activation, in spatial/per_activation modes) and change the conditions in the pytorch code accordingly, so that it transparently falls to native implementation where cudnn can't be used?
 		</comment>
 		<comment id='5' author='colinfang' date='2019-11-28T04:39:16Z'>
 		&lt;denchmark-link:https://github.com/ngimel&gt;@ngimel&lt;/denchmark-link&gt;
  I've pushed an initial commit with updated size limitations and tested it with cudnn 7.6.5.32.
 Based on the minimal CUDA version of 9.0, I assume the minimal cudnn version would be 7.1.4?
 If that's the case, we might also update the cudnn version check in &lt;denchmark-link:https://github.com/ptrblck/pytorch/commit/4c5f048e7ad6242171512294a110bfc33abe2a77#diff-334eb235b4eb8d228fe544dbe506e3c7R472&gt;line 472&lt;/denchmark-link&gt;
  and I'll retest it with older versions.
 		</comment>
 		<comment id='6' author='colinfang' date='2019-11-29T20:22:08Z'>
 		&lt;denchmark-link:https://github.com/ptrblck&gt;@ptrblck&lt;/denchmark-link&gt;
   How did you come up with such magic numbers for the limits? Are they listed in cudnn manual or something?
 		</comment>
 		<comment id='7' author='colinfang' date='2019-12-02T16:55:29Z'>
 		&lt;denchmark-link:https://github.com/ptrblck&gt;@ptrblck&lt;/denchmark-link&gt;
  That's ok, binaries are built with cudnn 7.6, there's no need to specifically test older versions.
 		</comment>
 	</comments>
 </bug>
<commit id='0f0972051a7eaf3da645b2f18cc77be188d59b8d' author='root' date='2020-01-30 16:57:15-08:00'>
 	<dmm_unit complexity='0.0' interfacing='0.0' size='0.0'></dmm_unit>
 	<modification change_type='MODIFY' old_name='aten\src\ATen\native\Normalization.cpp' new_name='aten\src\ATen\native\Normalization.cpp'>
 		<file_info nloc='496' complexity='140' token_count='4833'></file_info>
 		<method name='at::native::_batch_norm_impl_index' parameters='input,weight,bias,running_mean,running_var,training,momentum,eps,cudnn_enabled'>
 				<method_info nloc='70' complexity='49' token_count='709' nesting_level='2' start_line='438' end_line='513'></method_info>
 			<added_lines>467,468,469,470</added_lines>
 			<deleted_lines>467</deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines></added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 	<modification change_type='MODIFY' old_name='test\test_nn.py' new_name='test\test_nn.py'>
 		<file_info nloc='8484' complexity='1307' token_count='95666'></file_info>
 		<method name='test_batchnorm_large_batch' parameters='self,dtype'>
 				<method_info nloc='4' complexity='1' token_count='62' nesting_level='1' start_line='6264' end_line='6267'></method_info>
 			<added_lines>6265,6266</added_lines>
 			<deleted_lines>6265,6266</deleted_lines>
 		</method>
 		<modified_lines>
 			<added_lines></added_lines>
 			<deleted_lines></deleted_lines>
 		</modified_lines>
 	</modification>
 </commit>
</bug_data>
