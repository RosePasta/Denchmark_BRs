{"BR": {"BR_id": "4896", "BR_author": "omri374", "BRopenT": "2020-01-09T16:16:27Z", "BRcloseT": "2020-02-12T16:46:00Z", "BR_text": {"BRsummary": "doc similarity is different between GPU version and CPU version", "BRdescription": "\n <denchmark-h:h2>How to reproduce the behaviour</denchmark-h>\n \n Introducing GPU makes doc.similarity return <class 'cupy.core.core.ndarray'> of size 1 instead of a scalar. On CPU the same call returns a scalar.\n Reproduce:\n import spacy\n nlp1 = spacy.load(\"en_vectors_web_lg\")\n doc1 = nlp1(\"Hey there how are you?\")\n doc2 = nlp1(\"I'm good and you?\")\n doc1.similarity(doc2)\n 0.9182046417319748\n Then, when requiring GPU:\n spacy.require_gpu()\n True\n nlp2 = spacy.load(\"en_vectors_web_lg\")\n doc1 = nlp2(\"Hey there how are you?\")\n doc2 = nlp2(\"I'm good and you?\")\n doc1.similarity(doc2)\n array(0.9182048, dtype=float32)\n <denchmark-h:h2>Your Environment</denchmark-h>\n \n \n spaCy version: 2.2.3\n Platform: Linux-4.15.0-1064-azure-x86_64-with-debian-stretch-sid\n Python version: 3.7.5\n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "omri374", "commentT": "2020-01-09T16:19:58Z", "comment_text": "\n \t\tA quick workaround is to call .item() in any case.\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "omri374", "commentT": "2020-01-15T10:05:05Z", "comment_text": "\n \t\tThe difference is so small that I would argue that it is negligible/rounding noise. I do agree that it'd be better if in both cases, the same type is returned.\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "omri374", "commentT": "2020-02-04T10:02:20Z", "comment_text": "\n \t\tThanks for the report! This boils down to the difference in output type of the  method between <denchmark-link:https://docs.scipy.org/doc/numpy/reference/generated/numpy.dot.html>numpy</denchmark-link>\n  and <denchmark-link:https://docs-cupy.chainer.org/en/stable/reference/generated/cupy.dot.html>cupy</denchmark-link>\n . numpy automatically converts an array with a single element to a scalar, which  doesn't. Calling  makes sense, I'll update the codebase accordingly so there are no surprises.\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "omri374", "commentT": "2020-02-04T11:17:47Z", "comment_text": "\n \t\t\n Thanks for the report! This boils down to the difference in output type of the dot method between numpy and cupy. numpy automatically converts an array with a single element to a scalar, which cupy doesn't. Calling item() makes sense, I'll update the codebase accordingly so there are no surprises.\n \n Hi. I think that's a good decision, indeed! Make sure to document this well, though, because in itself this breaks the way it was implemented before (different type returned). I don't know how many people use this in their code base, but it might cause unexpected bugs when suddenly the item() instead of the array is returned. Therefore, documenting seems very important.\n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "omri374", "commentT": "2020-02-04T15:36:38Z", "comment_text": "\n \t\tYea, I was just thinking about that, we'll probably introduce it as part of v.3 ;-)\n \t\t"}, "comments_5": {"comment_id": 6, "comment_author": "omri374", "commentT": "2020-02-12T16:46:00Z", "comment_text": "\n \t\tFixed by PR <denchmark-link:https://github.com/explosion/spaCy/pull/4969>#4969</denchmark-link>\n  - will be in spaCy v.3\n \t\t"}, "comments_6": {"comment_id": 7, "comment_author": "omri374", "commentT": "2020-03-17T13:31:14Z", "comment_text": "\n \t\tThis thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n \t\t"}}}, "commit": {"commit_id": "781e95cf536cd5720d07ec80b2cb89eaa4b41290", "commit_author": "Sofie Van Landeghem", "commitT": "2020-02-10 20:31:49-05:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "spacy\\tokens\\doc.pyx", "file_new_name": "spacy\\tokens\\doc.pyx", "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "394,395,396", "deleted_lines": "394"}}}}}}