{"BR": {"BR_id": "1950", "BR_author": "jjtapia", "BRopenT": "2018-02-07T19:22:39Z", "BRcloseT": "2018-02-09T09:23:50Z", "BR_text": {"BRsummary": "Rule based matching breaks when using a regular expression that includes letters and numbers", "BRdescription": "\n Consider the following code\n <denchmark-code>from __future__ import unicode_literals\n import en_core_web_sm\n import re\n \n \n nlp = en_core_web_sm.load()\n \n TEST_CODE = nlp.vocab.add_flag(re.compile('abc[0-9]+').match)\n doc = nlp('abc123')\n </denchmark-code>\n \n When running this code, spacy will fail with the following error\n <denchmark-code>Traceback (most recent call last):\n   File \"untitled.py\", line 9, in <module>\n     doc = nlp('123a')\n   File \"/home/.../venv2b/lib/python3.6/site-packages/spacy/language.py\", line 337, in __call__\n     doc = self.make_doc(text)\n   File \"/home.../venv2b/lib/python3.6/site-packages/spacy/language.py\", line 365, in make_doc\n     return self.tokenizer(text)\n   File \"tokenizer.pyx\", line 120, in spacy.tokenizer.Tokenizer.__call__\n   File \"tokenizer.pyx\", line 161, in spacy.tokenizer.Tokenizer._tokenize\n   File \"tokenizer.pyx\", line 240, in spacy.tokenizer.Tokenizer._attach_tokens\n   File \"vocab.pyx\", line 134, in spacy.vocab.Vocab.get\n   File \"vocab.pyx\", line 170, in spacy.vocab.Vocab._new_lexeme\n TypeError: an integer is required\n </denchmark-code>\n \n This error is only triggered when including a regular expression that has both numbers and letters. Including one or the other passes without issues.\n <denchmark-h:h2>Info about spaCy</denchmark-h>\n \n \n spaCy version: 2.0.7\n Platform: Linux-4.4.0-21-generic-x86_64-with-LinuxMint-18-sarah\n Python version: 3.6.1\n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "jjtapia", "commentT": "2018-02-08T10:14:43Z", "comment_text": "\n \t\tThanks for the report. I'm still understanding this in detail but it looks to me like the error comes from re.match() returning a Python object, when the Vocab is expecting the function to return a boolean. The following should work:\n TEST_CODE = nlp.vocab.add_flag(lambda string: bool(re.compile('abc[0-9]+').match))\n I suspect the match over letters and numbers is a red herring, and what matters is whether the token has been seen before. I'm still a bit confused though.\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "jjtapia", "commentT": "2018-02-08T19:36:01Z", "comment_text": "\n \t\tThank you <denchmark-link:https://github.com/honnibal>@honnibal</denchmark-link>\n . I was following <denchmark-link:https://spacy.io/usage/linguistic-features#section-rule-based-matching>this example</denchmark-link>\n  (IS_DEFINITELY) but I should have read more into the documentation for add_flag. I modified your code example a little bit\n TEST_CODE = nlp.vocab.add_flag(lambda string: bool(re.compile('abc[0-9]+').match(string)))\n and this worked for my use case.\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "jjtapia", "commentT": "2018-02-09T09:19:26Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/jjtapia>@jjtapia</denchmark-link>\n  Thanks, looks like this is actually a mistake in our docs! Fixing! \n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "jjtapia", "commentT": "2018-05-07T23:55:31Z", "comment_text": "\n \t\tThis thread has been automatically locked since there has not been any recent activity after it was closed. Please open a new issue for related bugs.\n \t\t"}}}, "commit": {"commit_id": "e9f67be04d39366697845e3670e92c9e5430380e", "commit_author": "ines", "commitT": "2018-02-09 10:23:33+01:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "website\\usage\\_linguistic-features\\_rule-based-matching.jade", "file_new_name": "website\\usage\\_linguistic-features\\_rule-based-matching.jade", "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "342,343", "deleted_lines": "342"}}}}}}