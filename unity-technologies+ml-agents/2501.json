{"BR": {"BR_id": "2501", "BR_author": "hanseoup", "BRopenT": "2019-09-06T11:18:23Z", "BRcloseT": "2019-09-23T01:32:18Z", "BR_text": {"BRsummary": "Memory is linearly increasing when I use model inference mode.", "BRdescription": "\n <denchmark-link:https://github.com/Unity-Technologies/ml-agents/issues/1817>#1817</denchmark-link>\n \n Because i think above issue can solve memory leak issue.\n I changed my ml-agent version to 0.9.2\n as above url said,I checked that it can solve the issue of \"3DBall\" sample example.\n <denchmark-link:https://user-images.githubusercontent.com/53593292/64423563-cdc57680-d0e1-11e9-9200-85f056ce9dba.png></denchmark-link>\n \n But it still has memory leak issue, when it comes to run other sample example\n (Especially sample with \"ray Perception!\" ex.pushBlock, Hallway)\n could you check this issue? I think it would be serious problem, when I run my\n \"custom self training system\". Because it should use at least one inference mode for\n counter part agent. please help me....   :(\n =============================\n following is how to reproduce my issue.\n \n \n open the \"Hallway\"(pushBolck) example scene.\n \n \n \n change the \"Time Scale\" to 100 in academy Inspector window.\n An do not check Control check box.\n \n \n \n \n Give the pre-learned model to agent in \"HallwayArea\" prefab.\n (It is already loaded, if you don't edit this example after installing the ml-agent)\n \n \n \n play! & press \"Ctrl + Shift + Esc\" and watch memory state increasing.\n \n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "hanseoup", "commentT": "2019-09-06T17:47:09Z", "comment_text": "\n \t\tHi <denchmark-link:https://github.com/hanseoup>@hanseoup</denchmark-link>\n ,\n I observed similar behavior to what you described, using the Unity profiler to track the memory usage. However, the memory usage eventually levels out (about maybe 30 seconds of real time) and stays flat after this.\n <denchmark-link:https://user-images.githubusercontent.com/6877802/64447724-e9546100-d090-11e9-8d6f-040adc3f383d.png></denchmark-link>\n \n Can you confirm (preferably in the profiler) whether the memory growth eventually stops? If you're still concerned, we should be able to dig some more and see where the growth is coming from.\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "hanseoup", "commentT": "2019-09-09T01:28:29Z", "comment_text": "\n \t\tThank you for your reply. as you said, i track the memory state, and i want to see the point that memory eventually stop. But, in my environment, the memory state is just linearly increasing.\n following are snapshots... for checking the issue.\n \n at start\n \n after 2min\n \n 3.after 8min\n \n 4.after 20min\n \n \n The example i used is \"HallWay\" in same configuration, as i explained above.\n and here is etc...\n ml-agent version: 0.9.2v\n unity version: 2018.3.14\n os: Window 10(x64)\n cpu: i7-8700K\n gpu: 2080RTX\n ram: 32.0GB\n +) could you tell me, your unity version & ml-agent version?\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "hanseoup", "commentT": "2019-09-10T03:23:37Z", "comment_text": "\n \t\tMy testing is on MacOS using Unity 2017.410f1.\n I looked at this today (along with <denchmark-link:https://github.com/surfnerd>@surfnerd</denchmark-link>\n ) and we were able to reproduce similar results to what you were seeing on Mac too - the total allocated memory reported by the Unity profiler leveled off, but the amount reported by the system (Activity Monitor on Mac) kept increasing.\n We think that what you're seeing is at least partly due to memory fragmentation as explained here: <denchmark-link:https://docs.unity3d.com/Manual/BestPracticeUnderstandingPerformanceInUnity4-1.html>https://docs.unity3d.com/Manual/BestPracticeUnderstandingPerformanceInUnity4-1.html</denchmark-link>\n \n The total memory allocated hits a peak, but because of fragmentation, the amount of memory from the OS increases.\n The material swapping that happens in the hallway scene makes the fragmentation worse that it normally would be. If you comment out this part of the code\n <denchmark-link:https://github.com/Unity-Technologies/ml-agents/blob/develop/UnitySDK/Assets/ML-Agents/Examples/Hallway/Scripts/HallwayAgent.cs#L47-L49>https://github.com/Unity-Technologies/ml-agents/blob/develop/UnitySDK/Assets/ML-Agents/Examples/Hallway/Scripts/HallwayAgent.cs#L47-L49</denchmark-link>\n \n you should see that the memory increase is much slower than before.\n We're going to keep looking at other allocations that are still happening (especially if they're part of the SDK, not the \"demo\" code) to see if any of them can be reduced or eliminated.\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "hanseoup", "commentT": "2019-09-10T04:48:13Z", "comment_text": "\n \t\tThank you, chriselion! I hope that we could solve the issue soon. please comment it, if you find some clues :)\n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "hanseoup", "commentT": "2019-09-11T18:56:36Z", "comment_text": "\n \t\tStill investigating - at the moment it appears there might be a bug with our reuse (or lack thereof) of tensors in Barracuda.\n \t\t"}, "comments_5": {"comment_id": 6, "comment_author": "hanseoup", "commentT": "2019-09-11T21:55:36Z", "comment_text": "\n \t\tHi <denchmark-link:https://github.com/hanseoup>@hanseoup</denchmark-link>\n ,\n Thank you for providing feedback on this issue.  <denchmark-link:https://github.com/Unity-Technologies/ml-agents/pull/2541>#2541</denchmark-link>\n  should fix the memory leak.  Please let us know if you have further issues.\n \t\t"}, "comments_6": {"comment_id": 7, "comment_author": "hanseoup", "commentT": "2019-09-23T01:32:18Z", "comment_text": "\n \t\tThank you <denchmark-link:https://github.com/surfnerd>@surfnerd</denchmark-link>\n  ! I checked my memory issue solved, also in my custom environment!\n Thanks a lot!\n \t\t"}}}, "commit": {"commit_id": "27a46293299172b054b3dfc7cb3d2ac5f6e86624", "commit_author": "Chris Goy", "commitT": "2019-09-11 15:26:50-07:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "UnitySDK\\Assets\\ML-Agents\\Scripts\\InferenceBrain\\ApplierImpl.cs", "file_new_name": "UnitySDK\\Assets\\ML-Agents\\Scripts\\InferenceBrain\\ApplierImpl.cs", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "90,91", "deleted_lines": null, "method_info": {"method_name": "MLAgents.InferenceBrain::DiscreteActionOutputApplier::Apply", "method_params": "tensorProxy,agentInfo", "method_startline": "50", "method_endline": "104"}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 2, "file_old_name": "UnitySDK\\Assets\\ML-Agents\\Scripts\\InferenceBrain\\GeneratorImpl.cs", "file_new_name": "UnitySDK\\Assets\\ML-Agents\\Scripts\\InferenceBrain\\GeneratorImpl.cs", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "44", "deleted_lines": null, "method_info": {"method_name": "MLAgents.InferenceBrain::BatchSizeGenerator::Generate", "method_params": "tensorProxy,batchSize,agentInfo", "method_startline": "42", "method_endline": "47"}}, "hunk_1": {"Ismethod": 1, "added_lines": "68", "deleted_lines": "68", "method_info": {"method_name": "MLAgents.InferenceBrain::SequenceLengthGenerator::Generate", "method_params": "tensorProxy,batchSize,agentInfo", "method_startline": "65", "method_endline": "71"}}}}}}}