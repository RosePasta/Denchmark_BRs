{"BR": {"BR_id": "1056", "BR_author": "elenaehrlich", "BRopenT": "2020-09-28T13:09:22Z", "BRcloseT": "2020-09-30T07:34:09Z", "BR_text": {"BRsummary": "NaN handling of distributions' log_prob() for samples outside distribution's support", "BRdescription": "\n <denchmark-h:h2>Description</denchmark-h>\n \n MixtureDistribution with components [Gaussian(..), Gamma(..)]) returns a NaN instead a real-value log-prob for x<=0 (see MWE-1). MixtureDistributionOutput with components [GaussianOutput(..), GammaOutput(..)]) results in a NaN gradient for x<=0 (see MWE-2).\n <denchmark-h:h2>MWE-1</denchmark-h>\n \n import mxnet as mx\n from scipy import stats\n from gluonts.mx.distribution.mixture import *\n from gluonts.mx.distribution.gaussian import *\n from gluonts.mx.distribution.gamma import *\n \n p = 0.5\n mu, sigma = 0., 2.\n alpha, beta = 0.9, 2.\n \n # The log-prob of x=-1 should return a real-value and not NaN\n x = -1.\n \n scipy_logprob = np.log(p * stats.norm(mu, sigma).pdf(x) + (1-p) * stats.gamma(alpha, 1./beta).pdf(x))\n print('scipy_logprob', scipy_logprob)\n \n gaussian = Gaussian(mx.nd.array([mu]), mx.nd.array([sigma]))\n gamma = Gamma(mx.nd.array([alpha]), mx.nd.array([beta]))\n mixed_dist = MixtureDistribution(mx.nd.array([p,1-p]), [gaussian, gamma])\n gluonts_logprob = mixed_dist.log_prob(mx.nd.array([x]))\n print('gluonts_logprob', gluonts_logprob.asscalar())\n \n assert np.abs(scipy_logprob-gluonts_logprob.asscalar())<1e-6\n <denchmark-h:h2>Error message or code output</denchmark-h>\n \n AssertionError\n <denchmark-h:h2>MWE-2</denchmark-h>\n \n import mxnet as mx, numpy as np\n from gluonts.gluonts_tqdm import tqdm\n from gluonts.model.common import Tensor\n from gluonts.mx.distribution.mixture import *\n from gluonts.mx.distribution.mixture import *\n from gluonts.mx.distribution.gaussian import *\n from gluonts.mx.distribution.gamma import *\n \n \n def fit_mixture_distribution(x: Tensor, mdo: MixtureDistributionOutput, variate_dimensionality: int = 1, epochs: Optional[int]=1_000):\n \n     args_proj = mdo.get_args_proj()\n     args_proj.initialize()\n     args_proj.hybridize()\n \n     input = mx.nd.ones((variate_dimensionality, 1))\n \n \n     trainer = mx.gluon.Trainer(\n         args_proj.collect_params(), \"sgd\", {\"learning_rate\": 0.02}\n     )\n     print('trainer.learning_rate',trainer.learning_rate)\n \n     t = tqdm(list(range(epochs)))\n     for _ in t:\n         with mx.autograd.record():\n             distr_args = args_proj(input)\n             d = mdo.distribution(distr_args)\n             loss = d.loss(x).mean()\n         loss.backward()\n         loss_value = loss.asnumpy()\n         t.set_postfix({\"loss\": loss_value})\n         trainer.step(1)\n \n     distr_args = args_proj(input)\n     d = mdo.distribution(distr_args)\n     return d\n \n fit_mixture = fit_mixture_distribution(mx.nd.array([x]), MixtureDistributionOutput([GaussianOutput(), GammaOutput()]), 1, epochs=3)\n \n for ci, c in enumerate(fit_mixture.components):\n     for ai, a in enumerate(c.args):\n         assert ~np.isnan(a.asnumpy()), \\\n             f\"NaN gradients led to {c}\"\n <denchmark-h:h2>Error message or code output</denchmark-h>\n \n <denchmark-code>AssertionError: NaN gradients led to gluonts.mx.distribution.gamma.Gamma(alpha=mxnet.nd.array([float(\"{x}\")], dtype=numpy.float32), beta=mxnet.nd.array([float(\"{x}\")], dtype=numpy.float32))\n </denchmark-code>\n \n <denchmark-h:h2>Environment</denchmark-h>\n \n \n Operating system: MacOS 10.14.6\n Python version: Python 3.8.5\n GluonTS version: 0.5.1.dev102+g88a9832.d20200924\n MXNet version: 1.6.0\n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "elenaehrlich", "commentT": "2020-09-29T18:58:20Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/elenaehrlich>@elenaehrlich</denchmark-link>\n  solved?\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "elenaehrlich", "commentT": "2020-09-30T07:34:09Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/lostella>@lostella</denchmark-link>\n  many thanks\n \t\t"}}}, "commit": {"commit_id": "2ff399f70e1018b5f28832c04532f8ac011d4a10", "commit_author": "Elena Ehrlich", "commitT": "2020-09-29 14:32:28+02:00", "changed_files": {"file_0": {"file_change_type": "ADD", "file_Nmethod": 0, "file_old_name": "default.profraw", "file_new_name": "default.profraw"}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 2, "file_old_name": "src\\gluonts\\mx\\distribution\\gamma.py", "file_new_name": "src\\gluonts\\mx\\distribution\\gamma.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90", "deleted_lines": "71,72,73,74,75", "method_info": {"method_name": "log_prob", "method_params": "self,Tensor", "method_startline": "67", "method_endline": "91"}}, "hunk_1": {"Ismethod": 1, "added_lines": "71,72,73,74,75,76,77", "deleted_lines": "71,72,73,74,75", "method_info": {"method_name": "log_prob.gamma_log_prob", "method_params": "x,alpha,beta", "method_startline": "71", "method_endline": "77"}}}}, "file_2": {"file_change_type": "MODIFY", "file_Nmethod": 2, "file_old_name": "src\\gluonts\\mx\\distribution\\genpareto.py", "file_new_name": "src\\gluonts\\mx\\distribution\\genpareto.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "74,75,76,77,78", "deleted_lines": "74,76,78", "method_info": {"method_name": "log_prob.genpareto_log_prob", "method_params": "x,xi,beta", "method_startline": "74", "method_endline": "78"}}, "hunk_1": {"Ismethod": 1, "added_lines": "74,75,76,77,78,79,80,81,82,83,84,85,86,87,89,91", "deleted_lines": "74,76,78", "method_info": {"method_name": "log_prob", "method_params": "self,Tensor", "method_startline": "70", "method_endline": "92"}}}}, "file_3": {"file_change_type": "MODIFY", "file_Nmethod": 3, "file_old_name": "test\\distribution\\test_mixture.py", "file_new_name": "test\\distribution\\test_mixture.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "270,271,272,273,274", "deleted_lines": null, "method_info": {"method_name": "fit_mixture_distribution", "method_params": "Tensor,MixtureDistributionOutput,int,int", "method_startline": "270", "method_endline": "274"}}, "hunk_1": {"Ismethod": 1, "added_lines": "331,332,333,334,335", "deleted_lines": null, "method_info": {"method_name": "test_inference_mixture_different_families", "method_params": "MixtureDistribution,MixtureDistributionOutput,int,serialize_fn", "method_startline": "331", "method_endline": "335"}}, "hunk_2": {"Ismethod": 1, "added_lines": "379,380,381,382", "deleted_lines": null, "method_info": {"method_name": "test_mixture_logprob", "method_params": "Distribution,Tensor,DistributionOutput", "method_startline": "379", "method_endline": "382"}}}}}}}