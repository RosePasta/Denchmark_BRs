{"BR": {"BR_id": "15239", "BR_author": "piyushghai", "BRopenT": "2019-06-13T20:11:27Z", "BRcloseT": "2019-06-20T20:03:49Z", "BR_text": {"BRsummary": "Performing operations on 1-D CSR NDArray results in exception", "BRdescription": "\n Note: Providing complete information in the most concise form is the best way to get help. This issue template serves as the checklist for essential information to most of the technical issues and bug reports. For non-technical issues and feature requests, feel free to present the information in what you believe is the best form.\n For Q & A and discussion, please start a discussion thread at <denchmark-link:https://discuss.mxnet.io>https://discuss.mxnet.io</denchmark-link>\n \n <denchmark-h:h2>Description</denchmark-h>\n \n It is possible to create 1D CSR NDArray in MXNet, but performing operation on them results in an exception. The backend checks and expects the shape of the ndarray to be 2D, but it crashes when it sees 1D shape. A fix would be to prevent the creation of 1D CSR NDArrays.\n Package used (Python/R/Scala/Julia):\n (I'm using Python)\n <denchmark-h:h2>Error Message:</denchmark-h>\n \n <denchmark-code>src/operator/tensor/./cast_storage-inl.h:238: Check failed: dns.shape_.ndim() == 2 (1 vs. 2) \n \n Stack trace returned 10 entries:\n [bt] (0) 0   libmxnet.so                         0x000000010afb0c90 std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, mxnet::NDArrayFunctionReg*>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, mxnet::NDArrayFunctionReg*>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, mxnet::NDArrayFunctionReg*> > >::destroy(std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, mxnet::NDArrayFunctionReg*>, void*>*) + 2736\n [bt] (1) 1   libmxnet.so                         0x000000010afb0a3f std::__1::__tree<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, mxnet::NDArrayFunctionReg*>, std::__1::__map_value_compare<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, mxnet::NDArrayFunctionReg*>, std::__1::less<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> > >, true>, std::__1::allocator<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, mxnet::NDArrayFunctionReg*> > >::destroy(std::__1::__tree_node<std::__1::__value_type<std::__1::basic_string<char, std::__1::char_traits<char>, std::__1::allocator<char> >, mxnet::NDArrayFunctionReg*>, void*>*) + 2143\n [bt] (2) 2   libmxnet.so                         0x000000010b5f40bd mxnet::op::CastStorageDnsCsrImpl(mxnet::OpContext const&, mshadow::cpu const&, mxnet::TBlob const&, mxnet::NDArray*) + 1709\n [bt] (3) 3   libmxnet.so                         0x000000010b5eb9c9 void mxnet::op::CastStorageComputeImpl<mshadow::cpu>(mxnet::OpContext const&, mxnet::NDArray const&, mxnet::NDArray const&) + 521\n [bt] (4) 4   libmxnet.so                         0x000000010c658377 mxnet::imperative::PushFComputeEx(std::__1::function<void (nnvm::NodeAttrs const&, mxnet::OpContext const&, std::__1::vector<mxnet::NDArray, std::__1::allocator<mxnet::NDArray> > const&, std::__1::vector<mxnet::OpReqType, std::__1::allocator<mxnet::OpReqType> > const&, std::__1::vector<mxnet::NDArray, std::__1::allocator<mxnet::NDArray> > const&)> const&, nnvm::Op const*, nnvm::NodeAttrs const&, mxnet::Context const&, std::__1::vector<mxnet::engine::Var*, std::__1::allocator<mxnet::engine::Var*> > const&, std::__1::vector<mxnet::engine::Var*, std::__1::allocator<mxnet::engine::Var*> > const&, std::__1::vector<mxnet::Resource, std::__1::allocator<mxnet::Resource> > const&, std::__1::vector<mxnet::NDArray*, std::__1::allocator<mxnet::NDArray*> > const&, std::__1::vector<mxnet::NDArray*, std::__1::allocator<mxnet::NDArray*> > const&, std::__1::vector<mxnet::OpReqType, std::__1::allocator<mxnet::OpReqType> > const&)::'lambda'(mxnet::RunContext)::operator()(mxnet::RunContext) const + 215\n [bt] (5) 5   libmxnet.so                         0x000000010c5d3444 mxnet::Engine::Get() + 34308\n [bt] (6) 6   libmxnet.so                         0x000000010c5d5a48 mxnet::Engine::Get() + 44040\n [bt] (7) 7   libmxnet.so                         0x000000010c5d8b81 std::__1::shared_ptr<mxnet::engine::ThreadedEnginePerDevice::ThreadWorkerBlock<(dmlc::ConcurrentQueueType)0> > mxnet::common::LazyAllocArray<mxnet::engine::ThreadedEnginePerDevice::ThreadWorkerBlock<(dmlc::ConcurrentQueueType)0> >::Get<mxnet::engine::ThreadedEnginePerDevice::PushToExecute(mxnet::engine::OprBlock*, bool)::'lambda2'()>(int, mxnet::engine::ThreadedEnginePerDevice::PushToExecute(mxnet::engine::OprBlock*, bool)::'lambda2'()) + 2145\n [bt] (8) 8   libmxnet.so                         0x000000010c5d8a9f std::__1::shared_ptr<mxnet::engine::ThreadedEnginePerDevice::ThreadWorkerBlock<(dmlc::ConcurrentQueueType)0> > mxnet::common::LazyAllocArray<mxnet::engine::ThreadedEnginePerDevice::ThreadWorkerBlock<(dmlc::ConcurrentQueueType)0> >::Get<mxnet::engine::ThreadedEnginePerDevice::PushToExecute(mxnet::engine::OprBlock*, bool)::'lambda2'()>(int, mxnet::engine::ThreadedEnginePerDevice::PushToExecute(mxnet::engine::OprBlock*, bool)::'lambda2'()) + 1919\n [bt] (9) 9   libmxnet.so                         0x000000010c5d6755 mxnet::Engine::Get() + 47381\n </denchmark-code>\n \n <denchmark-h:h2>Minimum reproducible example</denchmark-h>\n \n <denchmark-code>In [3]: f = mx.nd.array([1, 2]).tostype('csr')\n \n In [4]: f\n Out[4]: \n \n <CSRNDArray 2 @cpu(0)>\n \n In [5]: f.data #crashes here\n </denchmark-code>\n \n <denchmark-h:h2>What have you tried to solve it?</denchmark-h>\n \n I'll raise a PR to fix this. This issue was created because <denchmark-link:https://github.com/apache/incubator-mxnet/issues/13193>#13193</denchmark-link>\n   had surfaced this.\n 13193 tracks the issue with elemwise_mul operator, while this issue tracks the exception on accessing data from 1D CSR.\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "piyushghai", "commentT": "2019-06-13T20:11:31Z", "comment_text": "\n \t\tHey, this is the MXNet Label Bot.\n Thank you for submitting the issue! I will try and suggest some labels so that the appropriate MXNet community members can help resolve it.\n Here are my recommended labels: Bug\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "piyushghai", "commentT": "2019-06-13T20:11:49Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/mxnet-label-bot>@mxnet-label-bot</denchmark-link>\n  Add [Bug, Sparse, Python]\n \t\t"}}}, "commit": {"commit_id": "2de0db0911f2e71728fa85ab342bd99a10974fc9", "commit_author": "Piyush Ghai", "commitT": "2019-06-20 13:03:48-07:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "python\\mxnet\\ndarray\\ndarray.py", "file_new_name": "python\\mxnet\\ndarray\\ndarray.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "2230,2231,2232,2233", "deleted_lines": null, "method_info": {"method_name": "tostype", "method_params": "self,stype", "method_startline": "2218", "method_endline": "2234"}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "tests\\python\\unittest\\test_sparse_ndarray.py", "file_new_name": "tests\\python\\unittest\\test_sparse_ndarray.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "966,967,968,969,970", "deleted_lines": null, "method_info": {"method_name": "test_sparse_nd_check_format", "method_params": "", "method_startline": "935", "method_endline": "984"}}}}}}}