{"BR": {"BR_id": "17595", "BR_author": "connorgoggins", "BRopenT": "2020-02-14T19:19:55Z", "BRcloseT": "2020-07-01T14:53:55Z", "BR_text": {"BRsummary": "MKLDNN incompatibility with large tensor (dim &gt;= 2^32) data", "BRdescription": "\n <denchmark-h:h2>Description</denchmark-h>\n \n While testing individual ops for large tensor (dimension >= 2^32) input functionality, I found an error in MKLDNN. Within 3rdparty/mkldnn/src/cpu/gemm/gemm.cpp on line 43 there is a function which takes in several parameters, including M (the variable used to accept the data dimension in the input). M is designated as an int, so when the value 2^32 is passed in as the first dimension of the input data the > 0 assertion on the next line fails (since the int dtype in C++ interprets 2^32 as 0).\n Note that this error occurs whenever MKLDNN is enabled - whether the BLAS engine is MKL, OpenBLAS, or none. When MKLDNN is disabled, the error does not occur.\n All tests were run on the latest master, building from source.\n <denchmark-h:h2>Environment</denchmark-h>\n \n <denchmark-code>----------Python Info----------\n Version      : 3.6.6\n Compiler     : GCC 7.2.0\n Build        : ('default', 'Jun 28 2018 17:14:51')\n Arch         : ('64bit', '')\n ------------Pip Info-----------\n Version      : 19.3.1\n Directory    : /home/ubuntu/anaconda3/lib/python3.6/site-packages/pip\n ----------MXNet Info-----------\n Version      : 1.6.0\n Directory    : /home/ubuntu/mxnet/python/mxnet\n Num GPUs     : 0\n Hashtag not found. Not installed from pre-built package.\n ----------System Info----------\n Platform     : Linux-4.4.0-1098-aws-x86_64-with-debian-stretch-sid\n system       : Linux\n node         : ip-172-31-47-40\n release      : 4.4.0-1098-aws\n version      : #109-Ubuntu SMP Fri Nov 8 09:30:18 UTC 2019\n ----------Hardware Info----------\n machine      : x86_64\n processor    : x86_64\n Architecture:          x86_64\n CPU op-mode(s):        32-bit, 64-bit\n Byte Order:            Little Endian\n CPU(s):                96\n On-line CPU(s) list:   0-95\n Thread(s) per core:    2\n Core(s) per socket:    24\n Socket(s):             2\n NUMA node(s):          2\n Vendor ID:             GenuineIntel\n CPU family:            6\n Model:                 85\n Model name:            Intel(R) Xeon(R) Platinum 8259CL CPU @ 2.50GHz\n Stepping:              7\n CPU MHz:               2500.000\n BogoMIPS:              5000.00\n Hypervisor vendor:     KVM\n Virtualization type:   full\n L1d cache:             32K\n L1i cache:             32K\n L2 cache:              1024K\n L3 cache:              36608K\n NUMA node0 CPU(s):     0-23,48-71\n NUMA node1 CPU(s):     24-47,72-95\n Flags:                 fpu vme de pse tsc msr pae mce cx8 apic sep mtrr pge mca cmov pat pse36 clflush mmx fxsr sse sse2 ss ht syscall nx pdpe1gb rdtscp lm constant_tsc arch_perfmon rep_good nopl xtopology nonstop_tsc aperfmperf tsc_known_freq pni pclmulqdq monitor ssse3 fma cx16 pcid sse4_1 sse4_2 x2apic movbe popcnt tsc_deadline_timer aes xsave avx f16c rdrand hypervisor lahf_lm abm 3dnowprefetch invpcid_single kaiser fsgsbase tsc_adjust bmi1 avx2 smep bmi2 erms invpcid mpx avx512f rdseed adx smap clflushopt clwb avx512cd xsaveopt xsavec xgetbv1 ida arat pku\n </denchmark-code>\n \n <denchmark-h:h2>Steps to reproduce</denchmark-h>\n \n Create a Python script with the following content:\n <denchmark-code>import mxnet as mx\n \n print(mx.nd.FullyConnected(data=mx.nd.random_normal(shape=(2**32,1)), weight=mx.nd.random_normal(shape=(1,1)), bias=mx.nd.random_normal(shape=(1,)), flatten=False, num_hidden=1))\n </denchmark-code>\n \n and run it with Python3.\n <denchmark-h:h2>Failing Environments and Errors</denchmark-h>\n \n <denchmark-h:h3>BLAS = None, MKLDNN = enabled</denchmark-h>\n \n <denchmark-h:h4>Feature List</denchmark-h>\n \n \u2716 CUDA, \u2716 CUDNN, \u2716 NCCL, \u2716 CUDA_RTC, \u2716 TENSORRT, \u2714 CPU_SSE, \u2714 CPU_SSE2, \u2714 CPU_SSE3, \u2714 CPU_SSE4_1, \u2714 CPU_SSE4_2, \u2716 CPU_SSE4A, \u2714 CPU_AVX, \u2716 CPU_AVX2, \u2714 OPENMP, \u2716 SSE, \u2714 F16C, \u2716 JEMALLOC, \u2716 BLAS_OPEN, \u2716 BLAS_ATLAS, \u2716 BLAS_MKL, \u2716 BLAS_APPLE, \u2714 LAPACK, \u2714 MKLDNN, \u2716 OPENCV, \u2716 CAFFE, \u2716 PROFILER, \u2716 DIST_KVSTORE, \u2716 CXX14, \u2714 INT64_TENSOR_SIZE, \u2716 SIGNAL_HANDLER, \u2714 DEBUG, \u2716 TVM_OP\n <denchmark-h:h4>Error</denchmark-h>\n \n <denchmark-code>python3: /home/ubuntu/mxnet/3rdparty/mkldnn/src/cpu/gemm/gemm.cpp:43: void dnnl::impl::cpu::msan_unpoison_matrix(void*, int, int, int, size_t): Assertion `C\n != nullptr && M > 0 && N > 0 && LDC >= M && typesize' failed.\n Aborted (core dumped)\n </denchmark-code>\n \n <denchmark-h:h3>BLAS = MKL, MKLDNN = enabled</denchmark-h>\n \n <denchmark-h:h4>Feature List</denchmark-h>\n \n \u2716 CUDA, \u2716 CUDNN, \u2716 NCCL, \u2716 CUDA_RTC, \u2716 TENSORRT, \u2714 CPU_SSE, \u2714 CPU_SSE2, \u2714 CPU_SSE3, \u2714 CPU_SSE4_1, \u2714 CPU_SSE4_2, \u2716 CPU_SSE4A, \u2714 CPU_AVX, \u2716 CPU_AVX2, \u2714 OPENMP, \u2716 SSE, \u2714 F16C, \u2716 JEMALLOC, \u2716 BLAS_OPEN, \u2716 BLAS_ATLAS, \u2714 BLAS_MKL, \u2716 BLAS_APPLE, \u2714 LAPACK, \u2714 MKLDNN, \u2716 OPENCV, \u2716 CAFFE, \u2716 PROFILER, \u2716 DIST_KVSTORE, \u2716 CXX14, \u2714 INT64_TENSOR_SIZE, \u2716 SIGNAL_HANDLER, \u2714 DEBUG, \u2716 TVM_OP\n <denchmark-h:h4>Error</denchmark-h>\n \n <denchmark-code>python3: /home/ubuntu/mxnet/3rdparty/mkldnn/src/cpu/gemm/gemm.cpp:43: void dnnl::impl::cpu::msan_unpoison_matrix(void*, int, int, int, size_t): Assertion `C\n != nullptr && M > 0 && N > 0 && LDC >= M && typesize' failed.\n Aborted (core dumped)\n </denchmark-code>\n \n <denchmark-h:h3>BLAS = OpenBLAS, MKLDNN = enabled</denchmark-h>\n \n <denchmark-h:h4>Feature List</denchmark-h>\n \n \u2716 CUDA, \u2716 CUDNN, \u2716 NCCL, \u2716 CUDA_RTC, \u2716 TENSORRT, \u2714 CPU_SSE, \u2714 CPU_SSE2, \u2714 CPU_SSE3, \u2714 CPU_SSE4_1, \u2714 CPU_SSE4_2, \u2716 CPU_SSE4A, \u2714 CPU_AVX, \u2716 CPU_AVX2, \u2714 OPENMP, \u2716 SSE, \u2714 F16C, \u2716 JEMALLOC, \u2714 BLAS_OPEN, \u2716 BLAS_ATLAS, \u2716 BLAS_MKL, \u2716 BLAS_APPLE, \u2714 LAPACK, \u2714 MKLDNN, \u2716 OPENCV, \u2716 CAFFE, \u2716 PROFILER, \u2716 DIST_KVSTORE, \u2716 CXX14, \u2714 INT64_TENSOR_SIZE, \u2716 SIGNAL_HANDLER, \u2714 DEBUG, \u2716 TVM_OP\n <denchmark-h:h4>Error</denchmark-h>\n \n <denchmark-code>python3: /home/ubuntu/mxnet/3rdparty/mkldnn/src/cpu/gemm/gemm.cpp:43: void dnnl::impl::cpu::msan_unpoison_matrix(void*, int, int, int, size_t): Assertion `C\n != nullptr && M > 0 && N > 0 && LDC >= M && typesize' failed.\n Aborted (core dumped)\n </denchmark-code>\n \n <denchmark-h:h2>Successful Environments and Outputs</denchmark-h>\n \n <denchmark-h:h3>BLAS = None, MKLDNN = disabled</denchmark-h>\n \n <denchmark-h:h4>Feature List</denchmark-h>\n \n \u2716 CUDA, \u2716 CUDNN, \u2716 NCCL, \u2716 CUDA_RTC, \u2716 TENSORRT, \u2714 CPU_SSE, \u2714 CPU_SSE2, \u2714 CPU_SSE3, \u2714 CPU_SSE4_1, \u2714 CPU_SSE4_2, \u2716 CPU_SSE4A, \u2714 CPU_AVX, \u2716 CPU_AVX2, \u2714 OPENMP, \u2716 SSE, \u2714 F16C, \u2716 JEMALLOC, \u2716 BLAS_OPEN, \u2716 BLAS_ATLAS, \u2716 BLAS_MKL, \u2716 BLAS_APPLE, \u2714 LAPACK, \u2716 MKLDNN, \u2716 OPENCV, \u2716 CAFFE, \u2716 PROFILER, \u2716 DIST_KVSTORE, \u2716 CXX14, \u2714 INT64_TENSOR_SIZE, \u2716 SIGNAL_HANDLER, \u2714 DEBUG, \u2716 TVM_OP\n <denchmark-h:h4>Output</denchmark-h>\n \n <denchmark-code>[[1.1367434]\n  [1.1367434]\n  [1.1367434]\n  ...\n  [1.1367434]\n  [1.1367434]\n  [1.1367434]]\n <NDArray 4294967296x1 @cpu(0)>\n </denchmark-code>\n \n <denchmark-h:h3>BLAS = MKL, MKLDNN = disabled</denchmark-h>\n \n <denchmark-h:h4>Feature List</denchmark-h>\n \n \u2716 CUDA, \u2716 CUDNN, \u2716 NCCL, \u2716 CUDA_RTC, \u2716 TENSORRT, \u2714 CPU_SSE, \u2714 CPU_SSE2, \u2714 CPU_SSE3, \u2714 CPU_SSE4_1, \u2714 CPU_SSE4_2, \u2716 CPU_SSE4A, \u2714 CPU_AVX, \u2716 CPU_AVX2, \u2714 OPENMP, \u2716 SSE, \u2714 F16C, \u2716 JEMALLOC, \u2716 BLAS_OPEN, \u2716 BLAS_ATLAS, \u2714 BLAS_MKL, \u2716 BLAS_APPLE, \u2714 LAPACK, \u2716 MKLDNN, \u2716 OPENCV, \u2716 CAFFE, \u2716 PROFILER, \u2716 DIST_KVSTORE, \u2716 CXX14, \u2714 INT64_TENSOR_SIZE, \u2716 SIGNAL_HANDLER, \u2714 DEBUG, \u2716 TVM_OP\n <denchmark-h:h4>Output</denchmark-h>\n \n <denchmark-code>[[1.1367434]\n  [1.1367434]\n  [1.1367434]\n  ...\n  [1.1367434]\n  [1.1367434]\n  [1.1367434]]\n <NDArray 4294967296x1 @cpu(0)>\n </denchmark-code>\n \n <denchmark-h:h3>BLAS = OpenBLAS, MKLDNN = disabled</denchmark-h>\n \n <denchmark-h:h4>Feature List</denchmark-h>\n \n \u2716 CUDA, \u2716 CUDNN, \u2716 NCCL, \u2716 CUDA_RTC, \u2716 TENSORRT, \u2714 CPU_SSE, \u2714 CPU_SSE2, \u2714 CPU_SSE3, \u2714 CPU_SSE4_1, \u2714 CPU_SSE4_2, \u2716 CPU_SSE4A, \u2714 CPU_AVX, \u2716 CPU_AVX2, \u2714 OPENMP, \u2716 SSE, \u2714 F16C, \u2716 JEMALLOC, \u2714 BLAS_OPEN, \u2716 BLAS_ATLAS, \u2716 BLAS_MKL, \u2716 BLAS_APPLE, \u2714 LAPACK, \u2716 MKLDNN, \u2716 OPENCV, \u2716 CAFFE, \u2716 PROFILER, \u2716 DIST_KVSTORE, \u2716 CXX14, \u2714 INT64_TENSOR_SIZE, \u2716 SIGNAL_HANDLER, \u2714 DEBUG, \u2716 TVM_OP\n <denchmark-h:h4>Output</denchmark-h>\n \n <denchmark-code>[[1.1367434]\n  [1.1367434]\n  [1.1367434]\n  ...\n  [1.1367434]\n  [1.1367434]\n  [1.1367434]]\n <NDArray 4294967296x1 @cpu(0)>\n </denchmark-code>\n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "connorgoggins", "commentT": "2020-02-14T19:30:02Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/mxnet-label-bot>@mxnet-label-bot</denchmark-link>\n  add [MKLDNN]\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "connorgoggins", "commentT": "2020-02-14T19:38:37Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/PatricZhao>@PatricZhao</denchmark-link>\n  Could your team please take a look at this? Thanks!\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "connorgoggins", "commentT": "2020-02-14T20:04:00Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/connorgoggins>@connorgoggins</denchmark-link>\n  thanks for bringing this up\n <denchmark-link:https://github.com/PatricZhao>@PatricZhao</denchmark-link>\n  <denchmark-link:https://github.com/TaoLv>@TaoLv</denchmark-link>\n   looks like blas=MKL/openblas/none(mnative mxnet) and MKLDNN=OFF are supporting gemm on int64 but with MKLDNN its not. If its not a known issue with MKLDNN can you guys please take a look\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "connorgoggins", "commentT": "2020-02-15T03:28:58Z", "comment_text": "\n \t\tThank you for reporting the issue. I will take a look at this. But my initial thought is that MKL-DNN itself already supports int64 shape since the v1.0 upgrading, while I don't think the current integration of MKL/openblas supports int64 GEMM.\n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "connorgoggins", "commentT": "2020-02-15T04:34:45Z", "comment_text": "\n \t\tI can reproduce the crash.\n \t\t"}, "comments_5": {"comment_id": 6, "comment_author": "connorgoggins", "commentT": "2020-02-16T02:24:03Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/TaoLv>@TaoLv</denchmark-link>\n  thanks for taking a look !\n \t\t"}, "comments_6": {"comment_id": 7, "comment_author": "connorgoggins", "commentT": "2020-03-06T09:43:51Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/access2rohit>@access2rohit</denchmark-link>\n  <denchmark-link:https://github.com/connorgoggins>@connorgoggins</denchmark-link>\n  This was confirmed to be a bug of the DNNL library. But we still need to wait for the next release of the library to get the bug fixed.\n \t\t"}, "comments_7": {"comment_id": 8, "comment_author": "connorgoggins", "commentT": "2020-04-17T23:17:23Z", "comment_text": "\n \t\tThis issue is resolved in <denchmark-link:https://github.com/oneapi-src/oneDNN/releases/tag/v1.4>oneDNN v1.4</denchmark-link>\n .\n \t\t"}, "comments_8": {"comment_id": 9, "comment_author": "connorgoggins", "commentT": "2020-04-20T08:48:39Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/vpirogov>@vpirogov</denchmark-link>\n  Thanks for the update. We will upgrade the 3rdparty dependency soon.\n \t\t"}, "comments_9": {"comment_id": 10, "comment_author": "connorgoggins", "commentT": "2020-05-05T18:42:20Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/vpirogov>@vpirogov</denchmark-link>\n  great news! Once this is added to MXNet we can resolve this issue :)\n \t\t"}}}, "commit": {"commit_id": "a8c8dea67593df7f1d2061893dddfdeee4750d9f", "commit_author": "Tao Lv", "commitT": "2020-07-01 22:53:54+08:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "3rdparty\\mkldnn", "file_new_name": "3rdparty\\mkldnn", "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "1", "deleted_lines": "1"}}}}}}