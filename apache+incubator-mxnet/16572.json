{"BR": {"BR_id": "16572", "BR_author": "haojin2", "BRopenT": "2019-10-21T21:34:07Z", "BRcloseT": "2019-10-23T04:38:13Z", "BR_text": {"BRsummary": "cudaErrorInvalidResourceHandle error when running some RNN models", "BRdescription": "\n Both this <denchmark-link:https://github.com/d2l-ai/d2l-en/blob/numpy2/chapter_natural-language-processing/sentiment-analysis-rnn.md>notebook</denchmark-link>\n  and this <denchmark-link:https://github.com/d2l-ai/d2l-en/blob/master/chapter_natural-language-processing/sentiment-analysis-rnn.md>notebook</denchmark-link>\n  in dive into deep learning textbook errors with  on <denchmark-link:https://github.com/apache/incubator-mxnet/blob/master/src/operator/rnn-inl.h#L1505>line 1505 of src/operator/rnn-inl.h</denchmark-link>\n .\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "haojin2", "commentT": "2019-10-21T21:35:02Z", "comment_text": "\n \t\tI'm using CUDA 10.1 + CUDNN 7.6.4 on 4 V100 GPUs (p3.8xlarge instances). Reverting <denchmark-link:https://github.com/apache/incubator-mxnet/pull/16391>#16391</denchmark-link>\n  got both notebooks back to normal.\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "haojin2", "commentT": "2019-10-21T21:35:52Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/DickJC123>@DickJC123</denchmark-link>\n  <denchmark-link:https://github.com/ptrendx>@ptrendx</denchmark-link>\n  Could you guys help with this issue here?\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "haojin2", "commentT": "2019-10-22T20:52:57Z", "comment_text": "\n \t\tI will take a look at this.  Thanks for pointing this out.\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "haojin2", "commentT": "2019-10-22T22:20:18Z", "comment_text": "\n \t\tGlancing over the code knowing now of this issue, I see a problem that may be related.  If the code has been compiled for CUDA/CUDNN use, and then an RNNOp is instantiated on a system with no GPU, the code will fail at the call to cudaEventCreateWithFlags() in the constructor.  Calling this lazily on first use (on a gpu) would solve this.  I suspect the approach will also fix the issues with the notebooks that you point out, although I have not verified this.\n Are you blocked by this?  It might take me a day or two to make a proper PR with the fix properly verified.\n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "haojin2", "commentT": "2019-10-22T22:38:29Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/DickJC123>@DickJC123</denchmark-link>\n  Actually the 1.6.0 release could be blocked by this. Please do lemme know if you need any help on verification/reproduction/fixing so that we could streamline your fix. Thanks!\n \t\t"}, "comments_5": {"comment_id": 6, "comment_author": "haojin2", "commentT": "2019-10-22T22:44:42Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/DickJC123>@DickJC123</denchmark-link>\n  BTW I mentioned earlier that I was running with 4 V100 GPUs.\n \t\t"}, "comments_6": {"comment_id": 7, "comment_author": "haojin2", "commentT": "2019-10-22T23:43:56Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/ptrendx>@ptrendx</denchmark-link>\n  has postulated that the problem involves having the main python thread create the RNNOp (and its held cuda event) with either no context or a GPU-0 context, then having the event recorded on a stream of a different GPU.  I will be pushing a fix momentarily that delays creating the cuda event until first use, which should correct this scenario.\n I have verified the PR reinstates proper behavior when run on a system with no GPU.  I appreciate your offer to see if the PR cures this issue you raised with the notebooks.  Thanks!\n \t\t"}, "comments_7": {"comment_id": 8, "comment_author": "haojin2", "commentT": "2019-10-23T04:38:12Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/DickJC123>@DickJC123</denchmark-link>\n  Fix merged, now closing this issue.\n \t\t"}}}, "commit": {"commit_id": "b05d72ac5697904e8d00954402174a7891c65ece", "commit_author": "Dick Carter", "commitT": "2019-10-22 21:35:31-07:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 3, "file_old_name": "src\\operator\\rnn-inl.h", "file_new_name": "src\\operator\\rnn-inl.h", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "540,541", "deleted_lines": "541", "method_info": {"method_name": "mxnet::op::RNNOp::~RNNOp", "method_params": "", "method_startline": "525", "method_endline": "560"}}, "hunk_1": {"Ismethod": 1, "added_lines": "1505,1506,1507,1508", "deleted_lines": null, "method_info": {"method_name": "mxnet::op::RNNOp::SyncDgrad", "method_params": "", "method_startline": "1501", "method_endline": "1511"}}, "hunk_2": {"Ismethod": 1, "added_lines": null, "deleted_lines": "496", "method_info": {"method_name": "mxnet::op::RNNOp::RNNOp", "method_params": "param,ctx", "method_startline": "418", "method_endline": "524"}}}}}}}