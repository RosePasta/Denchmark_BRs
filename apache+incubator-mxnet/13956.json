{"BR": {"BR_id": "13956", "BR_author": "mika-fischer", "BRopenT": "2019-01-22T16:06:33Z", "BRcloseT": "2020-02-05T18:56:56Z", "BR_text": {"BRsummary": "C API should *never* call abort()", "BRdescription": "\n <denchmark-h:h2>Description</denchmark-h>\n \n C-API functions should catch and report all errors instead of calling abort() for some errors.\n <denchmark-h:h2>Environment info (Required)</denchmark-h>\n \n This is independent of the environment and the problem is present in all releases and the master branch.\n <denchmark-h:h2>Minimum reproducible example</denchmark-h>\n \n Basically all uses of the CHECK... macros in functions called (even indirectly) from any of the C-API functions are problematic since in case they fail the error cannot be caught by the library user and mxnet just aborts the whole process (via dmlc::LogMessageFatal). This is unacceptable for any library\u2026\n It might be infeasible to achieve this library-wide. But at least simple user-input errors in src/c_api should most definitely not use CHECK_... for anything.\n One example:\n \n \n \n incubator-mxnet/src/c_api/c_predict_api.cc\n \n \n          Line 130\n       in\n       eebdd5f\n \n \n \n \n \n \n  CHECK_NE(j, all_out.size() - 1) << \"didn't find node name: \" << out_key; \n \n \n \n \n \n This should not call abort(), but throw a normal exception so that the library user can handle the error appropriately...\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "mika-fischer", "commentT": "2019-01-22T16:06:37Z", "comment_text": "\n \t\tHey, this is the MXNet Label Bot.\n Thank you for submitting the issue! I will try and suggest some labels so that the appropriate MXNet community members can help resolve it.\n Here are my recommended labels: Bug\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "mika-fischer", "commentT": "2019-01-22T18:37:12Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/mxnet-label-bot>@mxnet-label-bot</denchmark-link>\n  add [Bug, c api]\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "mika-fischer", "commentT": "2019-01-23T17:37:43Z", "comment_text": "\n \t\tI can add a second issue if desired, but I'd like to point out that the C++ API has the same problem.\n <denchmark-link:https://github.com/apache/incubator-mxnet/blob/master/cpp-package/include/mxnet-cpp/executor.hpp#L77-L83>https://github.com/apache/incubator-mxnet/blob/master/cpp-package/include/mxnet-cpp/executor.hpp#L77-L83</denchmark-link>\n \n I am using the raw C API (i.e. not the C predict API) partly to avoid having abort called on me.\n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "mika-fischer", "commentT": "2019-01-24T08:35:15Z", "comment_text": "\n \t\tI'll note that even the raw C API (i.e. not the C predict API) has this problem in quite a few places, though they seem to be less easy to trigger.\n E.g. \n \n \n incubator-mxnet/src/c_api/c_api_executor.cc\n \n \n          Line 358\n       in\n       0a45e1a\n \n \n \n \n \n \n  CHECK_EQ(req_map.count(provided_grad_req_types[0]), 1U) \n \n \n \n \n \n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "mika-fischer", "commentT": "2019-01-24T17:56:05Z", "comment_text": "\n \t\tGood point...lots of places to clean up if we want to remove the possibility that abort() gets called on us.\n Turns out it's also in the underlying library code implementing e.g. operators:\n \n \n \n incubator-mxnet/src/operator/tensor/init_op.h\n \n \n         Lines 121 to 123\n       in\n       0d480fb\n \n \n \n \n \n \n  CHECK_EQ(in_attrs->size(), 0U); \n \n \n \n  CHECK_EQ(out_attrs->size(), 1U); \n \n \n \n  SHAPE_ASSIGN_CHECK(*out_attrs, 0, mshadow::Shape2(param.N, param.M > 0 ? param.M : param.N)); \n \n \n \n \n \n I am in the process of putting MxNet into a production environment, and it would be nice if it didn't have the ability to unexpectedly abort() the process it's running in. I guess this is a bigger task than I initially thought.\n \t\t"}, "comments_5": {"comment_id": 6, "comment_author": "mika-fischer", "commentT": "2019-01-27T06:13:29Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/mika-fischer>@mika-fischer</denchmark-link>\n  <denchmark-link:https://github.com/stephenrawls>@stephenrawls</denchmark-link>\n  thanks for the suggestions. Since this requires potentially large change, I'd suggest that we get more attention on this by writing to <denchmark-link:https://lists.apache.org/list.html?dev@mxnet.apache.org>dev@mxnet.apache.org</denchmark-link>\n , if you intend to initiate a large change.\n \t\t"}, "comments_6": {"comment_id": 7, "comment_author": "mika-fischer", "commentT": "2019-01-27T06:37:52Z", "comment_text": "\n \t\tBy default, those checks should be throwing instead of calling .\n <denchmark-link:https://github.com/dmlc/dmlc-core/blob/master/include/dmlc/logging.h#L25-L26>https://github.com/dmlc/dmlc-core/blob/master/include/dmlc/logging.h#L25-L26</denchmark-link>\n \n It will abort only when \n <denchmark-link:https://github.com/dmlc/dmlc-core/blob/master/include/dmlc/logging.h#L351>https://github.com/dmlc/dmlc-core/blob/master/include/dmlc/logging.h#L351</denchmark-link>\n \n or when  is explicitly set to 0.\n <denchmark-link:https://github.com/dmlc/dmlc-core/blob/master/include/dmlc/logging.h#L362>https://github.com/dmlc/dmlc-core/blob/master/include/dmlc/logging.h#L362</denchmark-link>\n \n Since the build logic of mxnet itself uses the default setting, I'd like to see how and in what scenarios you trigger either the first or the second case, after which we can try to come up with the fix necessary.\n \t\t"}, "comments_7": {"comment_id": 8, "comment_author": "mika-fischer", "commentT": "2019-01-28T02:59:35Z", "comment_text": "\n \t\tGood catch, sorry for the confusion. Can't speak for <denchmark-link:https://github.com/mika-fischer>@mika-fischer</denchmark-link>\n , but as for me, I dug through the various layers until I saw  in the code and didn't pay close enough attention to the #if/#elif preprocessor declarations.\n My other complaint about the c++ api is that it doesn't always check the return status of its C API calls. But that issue is much easier to detect and fix, I will put in a separate Issue / Pull Request about that.  (e.g. see here: <denchmark-link:https://github.com/apache/incubator-mxnet/blob/master/cpp-package/include/mxnet-cpp/operator.hpp#L137-L139>https://github.com/apache/incubator-mxnet/blob/master/cpp-package/include/mxnet-cpp/operator.hpp#L137-L139</denchmark-link>\n )\n \t\t"}, "comments_8": {"comment_id": 9, "comment_author": "mika-fischer", "commentT": "2019-01-28T09:09:17Z", "comment_text": "\n \t\tYes, same here. I think I've seen the pip installed mxnet abort on me before and the stack trace in the error message confused us. But in fact an exception is thrown as you say. So this can be closed. Sorry for the noise.\n \t\t"}, "comments_9": {"comment_id": 10, "comment_author": "mika-fischer", "commentT": "2020-02-03T06:52:35Z", "comment_text": "\n \t\t\n After all replacements due to macro expansion and the defined unary operator have been performed, all remaining identifiers and keywords, except for true and false, are replaced with the pp-number 0\n \n <denchmark-link:https://stackoverflow.com/a/5085425/2560672>https://stackoverflow.com/a/5085425/2560672</denchmark-link>\n \n Thus it is not true that DMLC_LOG_FATAL_THROW needs to be explicitly set to 0. Rather, if DMLC_LOG_FATAL_THROW is unset, DMLC_LOG_FATAL_THROW == 0 will evaluate true during preprocessing at least if the preprocessor implements the standard correctly. Some older preprocessors may not have conformed to standard and this logic may have thus appeared to work.\n It certainly does not work on GCC7 or Clang 9..\n \t\t"}, "comments_10": {"comment_id": 11, "comment_author": "mika-fischer", "commentT": "2020-02-05T20:54:06Z", "comment_text": "\n \t\tThanks for fixing it <denchmark-link:https://github.com/leezu>@leezu</denchmark-link>\n \n \t\t"}}}, "commit": {"commit_id": "8d820cf69147209772942f9dea9725fda163a5f2", "commit_author": "Leonard Lausen", "commitT": "2020-02-05 18:56:55+00:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "3rdparty\\mshadow\\mshadow\\logging.h", "file_new_name": "3rdparty\\mshadow\\mshadow\\logging.h", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "204", "deleted_lines": "204", "method_info": {"method_name": "dmlc::LogMessageFatal::~LogMessageFatal", "method_params": "", "method_startline": "204", "method_endline": "208"}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "CMakeLists.txt", "file_new_name": "CMakeLists.txt", "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "132", "deleted_lines": null}}}, "file_2": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "Makefile", "file_new_name": "Makefile", "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": "99", "deleted_lines": null}}}}}}