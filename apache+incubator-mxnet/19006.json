{"BR": {"BR_id": "19006", "BR_author": "Zha0q1", "BRopenT": "2020-08-24T22:49:27Z", "BRcloseT": "2020-08-26T01:19:06Z", "BR_text": {"BRsummary": "Numpy Equal Broadcast Type Large Int Bug", "BRdescription": "\n import mxnet\n from mxnet import np, npx\n \n INT_OVERFLOW = 2**31\n \n A = np.array([INT_OVERFLOW], dtype='int64')\n assert A == INT_OVERFLOW\n triggers\n <denchmark-code>ubuntu@ip-172-31-38-169:~/incubator-mxnet$ python shapearray.py \n [22:46:12] ../src/storage/storage.cc:198: Using Pooled (Naive) StorageManager for CPU\n Traceback (most recent call last):\n   File \"shapearray.py\", line 10, in <module>\n     assert A == INT_OVERFLOW\n   File \"/home/ubuntu/incubator-mxnet/python/mxnet/numpy/multiarray.py\", line 260, in _wrap_mxnp_np_ufunc\n     return func(x1, x2)\n   File \"/home/ubuntu/incubator-mxnet/python/mxnet/numpy/multiarray.py\", line 1119, in __eq__\n     return equal(self, other)\n   File \"/home/ubuntu/incubator-mxnet/python/mxnet/numpy/multiarray.py\", line 9089, in equal\n     return _mx_nd_np.equal(x1, x2, out)\n   File \"/home/ubuntu/incubator-mxnet/python/mxnet/ndarray/numpy/_op.py\", line 7168, in equal\n     return _api_internal.equal(x1, x2, out)\n   File \"/home/ubuntu/incubator-mxnet/python/mxnet/_ffi/_ctypes/function.py\", line 115, in __call__\n     raise get_last_ffi_error()\n mxnet.base.MXNetError: Traceback (most recent call last):\n   File \"../include/mxnet/runtime/packed_func.h\", line 412\n MXNetError: Check failed: value_.v_int64 <= std: :numeric_limits<int>::max() (2147483648 vs. 2147483647) : \n </denchmark-code>\n \n I am working on a simple fix on this specific use case but there might be similar issues when broadcasting arrays\n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "Zha0q1", "commentT": "2020-08-25T00:17:36Z", "comment_text": "\n \t\tupdate:\n == != < > <= >= are all affected, but after the fix they seem to be working\n The scalar side of those comparison operators used to be converted to int32. Now I changed them all to int64_t.\n Note that this is not an indexing issue but rather a value issue. Also note that to have very large int tensors we need to set dtype to int64\n \t\t"}}}, "commit": {"commit_id": "8245fe2be7abd5c776b6ec6ecd2253232dd1efea", "commit_author": "Zhaoqi Zhu", "commitT": "2020-08-25 18:19:05-07:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 5, "file_old_name": "src\\api\\operator\\ufunc_helper.cc", "file_new_name": "src\\api\\operator\\ufunc_helper.cc", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "55", "deleted_lines": "55", "method_info": {"method_name": "mxnet::UFuncHelper", "method_params": "lhs,rhs,out,ret,op", "method_startline": "55", "method_endline": "75"}}, "hunk_1": {"Ismethod": 1, "added_lines": "99", "deleted_lines": "99", "method_info": {"method_name": "mxnet::UFuncHelper", "method_params": "lhs,rhs,out,ret,op", "method_startline": "99", "method_endline": "119"}}, "hunk_2": {"Ismethod": 1, "added_lines": "154,159", "deleted_lines": "154,159", "method_info": {"method_name": "mxnet::UFuncHelper", "method_params": "args,ret,fn_array,lfn_scalar,rfn_scalar", "method_startline": "143", "method_endline": "165"}}, "hunk_3": {"Ismethod": 1, "added_lines": "55", "deleted_lines": "55", "method_info": {"method_name": "mxnet::UFuncHelper", "method_params": "lhs,rhs,out,ret,op", "method_startline": "55", "method_endline": "75"}}, "hunk_4": {"Ismethod": 1, "added_lines": "99", "deleted_lines": "99", "method_info": {"method_name": "mxnet::UFuncHelper", "method_params": "lhs,rhs,out,ret,op", "method_startline": "99", "method_endline": "119"}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 0, "file_old_name": "tests\\nightly\\test_np_large_array.py", "file_new_name": "tests\\nightly\\test_np_large_array.py", "hunks": {"hunk_0": {"Ismethod": 0, "added_lines": null, "deleted_lines": "763"}}}}}}