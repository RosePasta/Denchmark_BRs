{"BR": {"BR_id": "14858", "BR_author": "sandeep-krishnamurthy", "BRopenT": "2019-05-01T23:56:52Z", "BRcloseT": "2019-05-07T05:33:05Z", "BR_text": {"BRsummary": "add_n operator with MXNet-MKL producing wrong results when input count &gt;4", "BRdescription": "\n Problem:\n With mxnet-mkl (1.4.0)\n If number of input symbols > 4 and I perform add_n after a FC layer produces wrong results.\n i.e.,\n <denchmark-code>data_0 -> fc_0  \\\n data_1 -> fc_1   \\ \n data_2 -> fc_2      => add_n\n data_3 -> fc_3  /\n data_4 -> fc_4 /\n </denchmark-code>\n \n Minimum reproducible code below:\n Run below code which is full network:\n import mxnet as mx\n \n num_inp_symbols = 5\n data_shape = (5,5)\n hidden_layer_size = 8\n \n input_symbols = [mx.sym.var('data_'+str(i)) for i in range(num_inp_symbols)]\n fully_connected_symbols = [mx.sym.FullyConnected(data=input_symbols[i], \n                                                                                           num_hidden=hidden_layer_size, \n                                                                                           name='fc_'+str(i))\n                                                 for i in range(num_datasets)]\n \n #Create final symbol\n net = mx.sym.add_n(*fully_connected_symbols)\n #Validate topology\n #mx.viz.plot_network(net)\n \n mod = mx.mod.Module(symbol=net, data_names=['data_0', 'data_1', 'data_2', 'data_3', 'data_4'], label_names=None)\n mod.bind(for_training=False, data_shapes=[('data_0', data_shape), ('data_1', data_shape), ('data_2', data_shape), ('data_3', data_shape), ('data_4', data_shape)])\n mod.set_params(full_module.get_params()[0], full_module.get_params()[1])\n \n mod.forward(mx.io.DataBatch([mx.nd.ones(data_shape), mx.nd.ones(data_shape), mx.nd.ones(data_shape), mx.nd.ones(data_shape), mx.nd.ones(data_shape)]))\n print(mod.get_outputs()[0])\n Output\n <denchmark-code>[[ 2.2989948  -3.3271918   0.64880913  2.2778904   0.9859241   2.0046096\n   -1.6065626   1.5986269 ]\n  [ 2.2989948  -3.3271918   0.64880913  2.2778904   0.9859241   2.0046096\n   -1.6065626   1.5986269 ]\n  [ 2.2989948  -3.3271918   0.64880913  2.2778904   0.9859241   2.0046096\n   -1.6065626   1.5986269 ]\n  [ 2.2989948  -3.3271918   0.64880913  2.2778904   0.9859241   2.0046096\n   -1.6065626   1.5986269 ]\n  [ 2.2989948  -3.3271918   0.64880913  2.2778904   0.9859241   2.0046096\n   -1.6065626   1.5986269 ]]\n <NDArray 5x8 @cpu(0)>\n </denchmark-code>\n \n However, Let us now compute output of each FC in above network (fc0_output, fc1_output,... fc4_output). What I observe is the if I do individual fc output calculation and sum it up it is not same result as running everything together.\n <denchmark-code>constituent_fc0 = fully_connected_symbols[0]\n print(constituent_fc0.get_internals().list_outputs())\n \n mod_cons_fc0 = mx.mod.Module(symbol=constituent_fc0, data_names=['data_0'], label_names=None)\n mod_cons_fc0.bind(for_training=False, data_shapes=[('data_0', data_shape)])\n mod_cons_fc0.set_params(mod.get_params()[0], mod.get_params()[1])\n mod_cons_fc0.forward(mx.io.DataBatch([mx.nd.ones(data_shape)]))\n o1 = mod_cons_fc0.get_outputs()[0]\n \n #and so on for fc1, fc2, fc3, fc4\n #and then do\n print(nd.add_n(o1, o2, o3, o4, o5))\n </denchmark-code>\n \n <denchmark-link:https://github.com/ZhennanQin>@ZhennanQin</denchmark-link>\n  <denchmark-link:https://github.com/pengzhao-intel>@pengzhao-intel</denchmark-link>\n  - Can you please help debug this issue?\n Please Note:\n \n storage type is all dense\n Number of inputs > 4\n Happens only from Module APIs and from mxnet-mkl 1.3.0 version onwards.\n \n \t"}, "comments": {"comments_0": {"comment_id": 1, "comment_author": "sandeep-krishnamurthy", "commentT": "2019-05-01T23:56:55Z", "comment_text": "\n \t\tHey, this is the MXNet Label Bot.\n Thank you for submitting the issue! I will try and suggest some labels so that the appropriate MXNet community members can help resolve it.\n Here are my recommended labels: Bug\n \t\t"}, "comments_1": {"comment_id": 2, "comment_author": "sandeep-krishnamurthy", "commentT": "2019-05-02T14:48:13Z", "comment_text": "\n \t\twe are on the public holiday this week :)\n <denchmark-link:https://github.com/rongzha1>@rongzha1</denchmark-link>\n  please help take a look for this issue after the holiday.\n \t\t"}, "comments_2": {"comment_id": 3, "comment_author": "sandeep-krishnamurthy", "commentT": "2019-05-05T15:09:31Z", "comment_text": "\n \t\tadd_n output mem overlap with input mem (due to FInplaceOption), but in Forward function : ElementwiseSumContainsDnsImpl( ),  output mem was set_zero which makes input zero:     Kernel<set_zero, cpu>::Launch(s, out_data.Size(), out_data.dptr());\n In fact, this is not a MKLDNN Bug.\n <denchmark-link:https://github.com/pengzhao-intel>@pengzhao-intel</denchmark-link>\n  <denchmark-link:https://github.com/zheng-da>@zheng-da</denchmark-link>\n  <denchmark-link:https://github.com/TaoLv>@TaoLv</denchmark-link>\n \n \t\t"}, "comments_3": {"comment_id": 4, "comment_author": "sandeep-krishnamurthy", "commentT": "2019-05-06T04:43:05Z", "comment_text": "\n \t\t<denchmark-link:https://github.com/rongzha1>@rongzha1</denchmark-link>\n  thanks for the analysis. Would you mind to file a PR and fix this issue?\n \t\t"}, "comments_4": {"comment_id": 5, "comment_author": "sandeep-krishnamurthy", "commentT": "2019-05-06T04:45:11Z", "comment_text": "\n \t\tbtw, please add the example as a test case.\n \t\t"}, "comments_5": {"comment_id": 6, "comment_author": "sandeep-krishnamurthy", "commentT": "2019-05-07T05:33:05Z", "comment_text": "\n \t\tGood catch and fixed now :)\n \t\t"}}}, "commit": {"commit_id": "5bda980c5e952e85ced4d9f42e8fdf1ad0affff8", "commit_author": "rongzha1", "commitT": "2019-05-07 13:30:12+08:00", "changed_files": {"file_0": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "src\\ndarray\\ndarray_function.cc", "file_new_name": "src\\ndarray\\ndarray_function.cc", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "210,211,212,213,214", "deleted_lines": "210", "method_info": {"method_name": "mxnet::ndarray::ElementwiseSumContainsDnsImpl", "method_params": "s,rsc,nds,out", "method_startline": "202", "method_endline": "273"}}}}, "file_1": {"file_change_type": "MODIFY", "file_Nmethod": 1, "file_old_name": "tests\\python\\unittest\\test_operator.py", "file_new_name": "tests\\python\\unittest\\test_operator.py", "hunks": {"hunk_0": {"Ismethod": 1, "added_lines": "8361,8362,8363,8364,8365,8366,8367,8368,8369", "deleted_lines": null, "method_info": {"method_name": "test_add_n", "method_params": "", "method_startline": "8361", "method_endline": "8369"}}}}}}}